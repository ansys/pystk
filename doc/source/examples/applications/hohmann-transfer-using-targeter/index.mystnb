---
jupytext:
  text_representation:
    extension: .mystnb
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.15.2
kernelspec:
  display_name: Python 3 (ipykernel)
  language: python
  name: python3
---

# Hohmann transfer using targeter

This example provides a practical example of how to use PySTK to solve for a Hohmann transfer problem. The the satellite presents an circular and equatorial orbit with a periapsis radius of 6700 kilometers. Its desired final orbit has an apoapsis radius of 42238 kilometers.

+++

## What is a Hohmann transfer?

A Hohmann transfer is a fuel-efficient orbital maneuver used in spaceflight to transfer a spacecraft from one circular orbit to another circular orbit at a different altitude or around a different celestial body. It was developed by German engineer Walter Hohmann in 1925 and is often referred to as the Hohmann transfer orbit or Hohmann ellipse. This maneuver is commonly used for missions within our solar system, including transfers between planets or moons.

The transfer is typically modeled under the two-body assumption. This means that it assumes a simplified scenario where only two significant gravitational bodies are considered: the spacecraft and the central body (e.g., a planet or a moon).

+++

## Launch a new STK instance

Start by launching a new STK instance. In this example, `STKEngine` is used in `noGraphics` mode. This means that the graphic user interface (GUI) of the product is not launched:

```{code-cell} ipython3
from ansys.stk.core.stkengine import STKEngine


stk = STKEngine.StartApplication(noGraphics=False)
print(f"Using {stk.version}")
```

## Creating a new scenario

Start by creating a new scenario in STK by running:

```{code-cell} ipython3
root = stk.NewObjectRoot()
root.new_scenario("HohmannTransfer")
```

## Adding a satellite to the scenario

Now that a new scenario is available, add a new satellite:

```{code-cell} ipython3
from ansys.stk.core.stkobjects import STK_OBJECT_TYPE

satellite = root.current_scenario.children.new(STK_OBJECT_TYPE.SATELLITE, "Satellite")
```

Then, declare the type of propagator used for the satellite:

```{code-cell} ipython3
from ansys.stk.core.stkobjects import VEHICLE_PROPAGATOR_TYPE

satellite.set_propagator_type(VEHICLE_PROPAGATOR_TYPE.PROPAGATOR_ASTROGATOR)
```

Initialize the propagator by making sure that no previous sequence is present. Add any additional configurations for the propagator. For this example, its is requested to draw the maneuver in 3D.

```{code-cell} ipython3
satellite.propagator.main_sequence.remove_all()
satellite.propagator.options.draw_trajectory_in_3d = True
```

## Set up the initial state of the satellite

### Available element sets

To declare the initial state of a satellite, a total of six elements are required. STK supports multiple sets of elements. List them by running:

```{code-cell} ipython3
from ansys.stk.core.stkobjects.astrogator import ELEMENT_TYPE

element_types = [element_type for element_type, _ in ELEMENT_TYPE.__members__.items()]
print(element_types)
```

### Available segment types

The segment type is also requied for specifying the initial state of the satellite. List the supported segment types by running:

```{code-cell} ipython3
from ansys.stk.core.stkobjects.astrogator import SEGMENT_TYPE

segment_types = [segment_type for segment_type, _ in SEGMENT_TYPE.__members__.items()]
print(segment_types)
```

### Selecting the element and segment types

```{code-cell} ipython3
initial_state = satellite.propagator.main_sequence.insert(SEGMENT_TYPE.INITIAL_STATE, "Inner orbit", "-")
initial_state.set_element_type(ELEMENT_TYPE.KEPLERIAN)
```

### Listing the elements in a set

You can list the names of the different elements of this set by filtering the public attributes of the set:

```{code-cell} ipython3
is_element = lambda element: not element.startswith("_") and element != "element_type"
elements = [element for element in dir(initial_state.element) if is_element(element)]
print(elements)
```

Now, set at least six of the previous elements. Since the initial orbit of the satellite is a

```{code-cell} ipython3
initial_state.element.periapsis_radius_size = 6700
initial_state.element.eccentricity = 0
initial_state.element.inclination = 0
initial_state.element.raan = 0
initial_state.element.arg_of_periapsis = 0
initial_state.element.true_anomaly = 0
```

## Set up the parking orbit of the satellite

The parking orbit is the temporary orbit that the satellite follows before starting any maneuver. Modelling a parking orbit requires to create a new segment in the main sequence. This segment must be of the propagate type. The total duration of the propagation is set in this example for 7200 seconds.

```{code-cell} ipython3
transfer_state = satellite.propagator.main_sequence.insert(SEGMENT_TYPE.PROPAGATE, "Transfer orbit", "-")
transfer_state.stopping_conditions["Duration"].properties.trip = 7200
```

Additional configurations, like the name for this propagation and its color can also be declared in this step:

```{code-cell} ipython3
from ansys.stk.core.utilities.colors import Color, Colors


transfer_state.propagator_name = "Earth point mass"
transfer_state.properties.color = Colors.Blue
```

## Define the target sequence for solving transfer orbit

The target sequence is the set of steps defining the complete maneuver.

```{code-cell} ipython3
target_sequence = satellite.propagator.main_sequence.insert(SEGMENT_TYPE.TARGET_SEQUENCE, "Start transfer", "-")
```

Hohmann maneuver is an impulsive maneuver. Thus, define a maneuver of impulsive type in the target sequence:

```{code-cell} ipython3
from ansys.stk.core.stkobjects.astrogator import MANEUVER_TYPE


delta_v1 = target_sequence.segments.insert(SEGMENT_TYPE.MANEUVER, "First impulse", "-")
delta_v1.set_maneuver_type(MANEUVER_TYPE.IMPULSIVE)
```

This first impulse takes place in the direction of the velocity vector at the periapsis. For this reason, it is convenient to define the thrust impulse in the Velocity-Normal-CoNormal (VNC) frame. By selecting the VNC frame, the velocity vector is now aligned with the X-axis.

```{code-cell} ipython3
from ansys.stk.core.stkobjects.astrogator import ATTITUDE_CONTROL, CONTROL_MANEUVER


delta_v1.maneuver.set_attitude_control_type(ATTITUDE_CONTROL.THRUST_VECTOR)
delta_v1.maneuver.attitude_control.se = "VNC (Earth)"
#delta_v1.maneuver.enable_control_parameter(CONTROL_MANEUVER.IMPULSIVE_CARTESIAN_X)
```

```{code-cell} ipython3
delta_v1.name
```

```{code-cell} ipython3

```

Now, configure the solver for this target sequence. A differential corrector can be used to solve for the desired final radius at apoapsis. The desired value is

```{code-cell} ipython3
differential_corrector = target_sequence.profiles["Differential Corrector"]

# Reference
# https://help.agi.com/stkdevkit/11.4.0/LinkedDocuments/STK_Astrogator_OM_Tutorial.pdf
```
