[tox]
description = Default tox environments list
envlist =
    code-style,tests-{aviator,stk,vgt}-{graphics,nographics}-{cov,nocov}-linux,doc-style,doc
skip_missing_interpreters = true
isolated_build = true
isolated_build_env = build

[testenv]
description = Checks for project testing with desired extras
basepython =
    tests38: python3.8
    tests39: python3.9
    test310: python3.10
    {style,tests,doc}: python3
passenv = 
    ANSYSLMD_LICENSE_FILE
    LD_LIBRARY_PATH
    STK_USER_HOME
    STK_INSTALL_DIR
    STK_CONFIG_DIR
    COVERAGE_FILE
    BUILD_API
    BUILD_EXAMPLES
    DISPLAY
setenv =
    PYTHONUNBUFFERED = yes

    # Pytest extra arguments
    cov: PYTEST_EXTRA_ARGS = --cov=ansys.stk --cov-report=xml:.cov/{env:COVERAGE_FILE}.xml --cov-report=html:.cov/{env:COVERAGE_FILE}-html

    # Pytest session options
    linux: PYTEST_EXCLUDE_LINUX = --exclude ExcludeOnLinux --exclude SEET
    graphics: PYTEST_WITH_GRAPHICS = --target StkX
    nographics: PYTEST_EXCLUDE_GRAPHICS = --exclude 'Graphics Tests'
    novo: PYTEST_EXCLUDE_VO = --exclude 'VO Tests'

    # Tests sets
    aviator: PYTEST_PYTHON_FILES = ./tests/generated/aviator_tests
    stk: PYTEST_PYTHON_FILES = ./tests/generated/stk_tests
    vgt: PYTEST_PYTHON_FILES = ./tests/generated/vgt_tests
usedevelop = true
extras = 
    tests
commands =
    pytest {env:PYTEST_PYTHON_FILES:tests} {env:PYTEST_EXTRA_ARGS:} \
        {env:PYTEST_TARGET:} {env:PYTEST_EXCLUDE_LINUX:} \
        {env:PYTEST_WITH_GRAPHICS:} {env:PYTEST_EXCLUDE_GRAPHICS:} \
        {env:PYTEST_EXCLUDE_VO:} --exclude PluginTests {posargs:-vv}

[testenv:code-style]
description = Checks project code style
skip_install = true
deps =
    pre-commit
commands =
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure

[testenv:doc-style]
description = Checks project documentation style
skip_install = true
allowlist_externals = 
    vale
commands =
    vale sync --config="{toxinidir}/doc/.vale.ini"
    vale --config="{toxinidir}/doc/.vale.ini" "{toxinidir}/doc"

[testenv:doc]
description = Check if documentation generates properly
extras = 
    doc
commands =
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/linkcheck" --color -vW -b linkcheck -j auto
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/html" --color -vW -b html -j auto

# The following environments are only for development purposes. Do not use in CI/CD.
# Using these during a CI/CD can lead to unexpected issues due to a Docker-In-Docker
# situation.

[testenv:docker-build]
description = Build all the available Docker Linux images 
skip_install = true
allowlist_externals =
    docker
    compose
commands =
    docker compose --file "{toxinidir}/docker/linux/docker-compose.yml" build

[testenv:docker-run-{linux,windows}-{py38,py39,py310}]
description = Run a Linux Docker container with the desired Python version, STK, and the current PySTK
skip_install = true
platform = 
    linux: linux
    windows: win32
setenv =
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    linux: PLATFORM_ARGS = --network="host" --env DISPLAY={env:DISPLAY} --entrypoint /bin/bash
    linux: PLATFORM_CMD = /bin/bash -c "cd /home/stk && python -m venv .venv && python -m pip install -e /home/stk/pystk[tests,doc]"
    windows: PLATFORM_ARGS = -p 8888:8888 --entrypoint /bin/bash
    windows: PLATFORM_CMD = /bin/bash -c "cd /home/stk && python -m venv .venv && python -m pip install -e /home/stk/pystk[tests,doc]"
allowlist_externals =
    docker
commands =
    # Start a container with the desired configuration
    docker run \
        --detach --interactive --tty \
        --volume "{toxinidir}:/home/stk/pystk" \
        --env ANSYSLMD_LICENSE_FILE={env:ANSYSLMD_LICENSE_FILE} \
        {env:PLATFORM_ARGS} \
        --name stk-python{env:PYTHON_VERSION} \
        ansys/stk:latest-centos7-python{env:PYTHON_VERSION}

    # HACK: a virtual environment fixes allows Jupyter Lab to operate as expected.
    # These issues may be raised because of the custom Python installation 
    # in the Docker images. 
    # TODO: Once gRPC is enabled, this should be revisited since Python will 
    # no longer need to be installed inside the container.
    docker exec --interactive --tty \
        stk-python{env:PYTHON_VERSION} {env:PLATFORM_CMD}

[testenv:docker-exec-{py38,py39,py310}]
description = Exec a command using the desired STK container
skip_install = true
setenv =
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    VENV_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && {posargs}'
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty \
        stk-python{env:PYTHON_VERSION} {env:VENV_CMD}

[testenv:docker-exec-{py38,py39,py310}-lab]
description = Run jupyter lab using the desired STK container
skip_install = true
setenv =
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    LAB_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && jupyter lab --ip=0.0.0.0 --port 8888 --no-browser --NotebookApp.token=pystk --notebook-dir=/home/stk/pystk'
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty \
        stk-python{env:PYTHON_VERSION} {env:LAB_CMD}

[testenv:docker-stop-{py38,py39,py310}]
description = Stop the Docker container with the desired Python version, STK, and the current PySTK
skip_install = true
setenv =
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
allowlist_externals =
    docker
commands =
    docker stop stk-python{env:PYTHON_VERSION}

[testenv:docker-rm-{py38,py39,py310}]
description = Clean all the Docker images associated with this project
skip_install = true
setenv =
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
allowlist_externals =
    docker
commands =
    docker rm --force stk-python{env:PYTHON_VERSION}
