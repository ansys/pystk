[tox]
description = Default tox environments list
envlist =
    code-style
    tests-{aviator,stk,vgt}-{graphics,nographics,graphicsonly}-{cov,nocov}-linux
    doc-style
    doc
    docker-build-{linux_images,windows_images}
    docker-run-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}
skip_missing_interpreters = true
isolated_build = true
isolated_build_env = build

[testenv]
description = Checks for project testing with desired extras
basepython =
    tests38: python3.8
    tests39: python3.9
    test310: python3.10
    {style,tests,doc}: python3
passenv = 
    ANSYSLMD_LICENSE_FILE
    LD_LIBRARY_PATH
    STK_USER_HOME
    STK_INSTALL_DIR
    STK_CONFIG_DIR
    COVERAGE_FILE
    BUILD_API
    BUILD_EXAMPLES
    DISPLAY
setenv =
    PYTHONUNBUFFERED = yes

    # Pytest extra arguments
    cov: PYTEST_EXTRA_ARGS = --cov=ansys.stk --cov-report=xml:.cov/{env:COVERAGE_FILE}.xml --cov-report=html:.cov/{env:COVERAGE_FILE}-html

    # Pytest session options
    linux: PYTEST_LINUX_OPTIONS = --exclude ExcludeOnLinux --exclude SEET

    graphics: PYTEST_TARGET = --target StkX
    nographics: PYTEST_TARGET = --target StkXNoGfx
    graphicsonly: PYTEST_TARGET = --target StkX

    graphics: PYTEST_GRAPHICS_OPTIONS = 
    nographics: PYTEST_GRAPHICS_OPTIONS = --exclude 'Graphics Tests' --exclude 'VO Tests'
    graphicsonly: PYTEST_GRAPHICS_OPTIONS = --include 'Graphics Tests' --include 'VO Tests'

    # Tests sets
    aviator: PYTEST_PYTHON_FILES = ./tests/generated/aviator_tests
    stk: PYTEST_PYTHON_FILES = ./tests/generated/stk_tests
    vgt: PYTEST_PYTHON_FILES = ./tests/generated/vgt_tests
usedevelop = true
extras = 
    tests
commands =
    pytest {env:PYTEST_PYTHON_FILES:tests} {env:PYTEST_EXTRA_ARGS:} \
        {env:PYTEST_TARGET:} {env:PYTEST_LINUX_OPTIONS:} \
        {env:PYTEST_GRAPHICS_OPTIONS:} \
        --exclude PluginTests {posargs:-vv}

[testenv:code-style]
description = Checks project code style
skip_install = true
deps =
    pre-commit
commands =
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure

[testenv:doc-style]
description = Checks project documentation style
skip_install = true
allowlist_externals = 
    vale
commands =
    vale sync --config="{toxinidir}/doc/.vale.ini"
    vale --config="{toxinidir}/doc/.vale.ini" "{toxinidir}/doc"

[testenv:doc]
description = Check if documentation generates properly
extras = 
    doc
commands =
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/linkcheck" --color -vW -b linkcheck -j auto
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/html" --color -vW -b html -j auto

# The following environments are only for development purposes. Do not use in CI/CD.
# Using these during a CI/CD can lead to unexpected issues due to a Docker-In-Docker
# situation.

[testenv:docker-build-{linux_images,windows_images}]
description = Build all the available Docker images for the specified platform
skip_install = true
allowlist_externals =
    docker
    compose
commands =
    linux_images: docker compose --file "{toxinidir}/docker/linux/docker-compose.yml" build
    windows_images: python -c 'print("Not yet implemented")'

[testenv:docker-run-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Run a Docker container with the desired platform, Python version, STK, and the current PySTK
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    # Host platform specific arguments
    linux_host:   HOST_ARGS = --network="host" --env DISPLAY={env:DISPLAY}
    windows_host: HOST_ARGS = -p 8888:8888
    # Linux container
    linux_container: CONTAINER_OS = linux
    linux_container: CONTAINER_ARGS = --volume "{toxinidir}:/home/stk/pystk"
    linux_container: CONTAINER_CMD = /bin/bash -c "cd /home/stk && python -m venv .venv && source .venv/bin/activate && python -m pip install -e /home/stk/pystk[tests,doc]"
    linux_container: WINDOWS_HOST_ROOT_CMD = /bin/bash -c "chown -R stk:stk /home/stk/pystk"
    # Windows container
    windows_container: CONTAINER_OS = windows
    windows_container: CONTAINER_ARGS = # TODO
    windows_container: CONTAINER_CMD = #TODO
    windows_container: WINDOWS_HOST_ROOT_CMD = #TODO
allowlist_externals =
    docker
commands =
    # Start a container with the desired configuration
    docker run \
        --detach --interactive --tty \
        --env ANSYSLMD_LICENSE_FILE={env:ANSYSLMD_LICENSE_FILE} \
        {env:HOST_ARGS} \
        {env:CONTAINER_ARGS} \
        --name stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
        ansys/stk:latest-centos7-python{env:PYTHON_VERSION}

    # HACK: a virtual environment fixes allows Jupyter Lab to operate as expected.
    # These issues may be raised because of the custom Python installation 
    # in the Docker images. 
    # TODO: Once gRPC is enabled, this should be revisited since Python will 
    # no longer need to be installed inside the container.
    docker exec --interactive --tty \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:CONTAINER_CMD}

    # On Windows, the docker volume is exposed in the container with the owner and group 
    # for all the files and directories set to root.
    # Change both to the "stk" user used to run the container, so tests relying 
    # on file permissions work correctly.
    windows_host: docker exec --interactive --tty --user root stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:WINDOWS_HOST_ROOT_CMD}

[testenv:docker-exec-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Exec a command using the desired STK container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    # Linux container
    linux_container: CONTAINER_OS = linux
    # Windows container
    windows_container: CONTAINER_OS = windows
    VENV_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && {posargs}'
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:VENV_CMD}

[testenv:docker-lab-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Run jupyter lab using the desired STK container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    # Host platform specific arguments
    linux_host:   HOST_ARGS = 
    windows_host: HOST_ARGS = --allow-root
    # Linux container
    linux_container: CONTAINER_OS = linux
    linux_container: LAB_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && jupyter lab {env:HOST_ARGS} --ip=0.0.0.0 --port 8888 --no-browser --NotebookApp.token=pystk --notebook-dir=/home/stk/pystk'
    # Windows container
    windows_container: CONTAINER_OS = windows
    windows_container: # TODO
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:LAB_CMD}

[testenv:docker-novnc-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Expose container UI through novnc for troubleshooting purpose and also add sudo to make it possible to install additional debugging tools like gdb or valgrind
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    linux_container: CONTAINER_OS = linux
    windows_container: CONTAINER_OS = windows
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty --user root stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
        /bin/bash -c ' \
            yum -y install epel-release && yum --enablerepo=epel -y install chpasswd sudo sed fluxbox novnc python-websockify numpy x11vnc xterm; \
            usermod -aG wheel stk; \
            echo "stk:stk" | chpasswd; \
            sed -i \
                "s/this.attach(new WebSocket(uri, protocols));/this.attach(new WebSocket(uri, ['"'"'binary'"'"', '"'"'base64'"'"']));/g" \
                /usr/share/novnc/core/websock.js \
        '
            # See https://techglimpse.com/openstack-novnc-code-400-base64-protocol-error/
    docker exec --interactive --tty stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
        /bin/bash -i -c ' \
            fluxbox -display :0 & \
            x11vnc -forever -shared -display :0 & \
            xterm -e "source ${HOME}/.venv/bin/activate; $SHELL" & \
            sleep 8; \
            echo "***************************************************"; \
            echo "* Navigate to http://127.0.0.1:8888/vnc_auto.html *"; \
            echo "***************************************************"; \
            websockify --web=/usr/share/novnc/ 8888 localhost:5900 \
        '

[testenv:docker-stop-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Stop the Docker container with the desired Python version, STK, and the current PySTK
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    # Linux container
    linux_container: CONTAINER_OS = linux
    # Windows container
    windows_container: CONTAINER_OS = windows
allowlist_externals =
    docker
commands =
    docker stop stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION}

[testenv:docker-rm-{linux_host,windows_host}-{linux_container,windows_container}-{py38,py39,py310}]
description = Remove the specified Docker container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py38: PYTHON_VERSION = 3.8
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    # Linux container
    linux_container: CONTAINER_OS = linux
    # Windows container
    windows_container: CONTAINER_OS = windows
allowlist_externals =
    docker
commands =
    docker rm --force stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION}
