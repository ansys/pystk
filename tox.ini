[tox]
description = Default tox environments list
envlist =
    code-style
    tests-{aviator,stk,vgt}-{graphics,nographics,graphicsonly}-{cov,nocov}-linux
    doc-style
    doc-{links,html}
    docker-build-{centos_images,ubuntu_images,windows_images}
    docker-run-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}
    vulnerabilities-{code,deps}
skip_missing_interpreters = true
isolated_build = true
isolated_build_env = build

[testenv]
description = Checks for project testing with desired extras
basepython =
    tests39: python3.9
    test310: python3.10
    test311: python3.11
    {style,tests,doc,vulnerabilities}: python3
passenv = 
    ANSYSLMD_LICENSE_FILE
    LD_LIBRARY_PATH
    STK_USER_HOME
    STK_INSTALL_DIR
    STK_CONFIG_DIR
    COVERAGE_FILE
    BUILD_API
    BUILD_EXAMPLES
    DISPLAY
setenv =
    PYTHONUNBUFFERED = yes

    # Pytest extra arguments
    cov: PYTEST_EXTRA_ARGS = --cov=ansys.stk --cov-report=xml:.cov/{env:COVERAGE_FILE}.xml --cov-report=html:.cov/{env:COVERAGE_FILE}-html

    # Pytest session options
    linux: PYTEST_LINUX_OPTIONS = --exclude ExcludeOnLinux --exclude SEET

    graphics: PYTEST_TARGET = --target StkX
    nographics: PYTEST_TARGET = --target StkXNoGfx
    graphicsonly: PYTEST_TARGET = --target StkX

    graphics: PYTEST_GRAPHICS_OPTIONS = 
    nographics: PYTEST_GRAPHICS_OPTIONS = --exclude 'Graphics Tests' --exclude 'VO Tests'
    graphicsonly: PYTEST_GRAPHICS_OPTIONS = --include 'Graphics Tests' --include 'VO Tests' --deselect=area_target/area_target.py::EarlyBoundTests::test_AccessDataDisplay --deselect=mto/mto.py::EarlyBoundTests::test_VODefaultTrack --deselect=mto/mto.py::EarlyBoundTests::test_VOGlobalTrack --deselect=mto/mto.py::EarlyBoundTests::test_VOTrack --deselect=volumetric/volumetric

    # Tests sets
    aviator: PYTEST_PYTHON_FILES = ./tests/generated/aviator_tests
    stk: PYTEST_PYTHON_FILES = ./tests/generated/stk_tests
    vgt: PYTEST_PYTHON_FILES = ./tests/generated/vgt_tests
usedevelop = true
extras = 
    tests
commands =
    pytest {env:PYTEST_PYTHON_FILES:tests} {env:PYTEST_EXTRA_ARGS:} \
        {env:PYTEST_TARGET:} {env:PYTEST_LINUX_OPTIONS:} \
        {env:PYTEST_GRAPHICS_OPTIONS:} \
        --exclude PluginTests {posargs:-vv}

[testenv:vulnerabilities-{code,deps}]
description = Checks vulnerabilities within the source code and its dependencies
skip_install = false
setenv =
    code: TOOL = bandit
    code: TOOL_OPTS = -r {toxinidir}/src
    code: TOOL_REPORT = -o {toxinidir}/log/bandit.json -f json
    
    deps: TOOL = safety
    # PyPI vulnerability: https://data.safetycli.com/v/67599/97c
    deps: IGNORE_VULNERABILITIES = 67599
    deps: TOOL_OPTS = check -o bare --continue-on-error -i {env:IGNORE_VULNERABILITIES}
    deps: TOOL_REPORT = --save-json {toxinidir}/log/safety.json
extras =
    vulnerabilities
    # Install any additional dependencies that PySTK uses for advanced features
    visualization
commands =
    {env:TOOL} {env:TOOL_OPTS} {env:TOOL_REPORT}

[testenv:code-style]
description = Checks project code style
skip_install = true
deps =
    pre-commit
commands =
    pre-commit install
    pre-commit run --all-files --show-diff-on-failure

[testenv:doc-style]
description = Checks project documentation style
skip_install = true
allowlist_externals = 
    vale
commands =
    vale sync --config="{toxinidir}/doc/.vale.ini"
    vale --config="{toxinidir}/doc/.vale.ini" "{toxinidir}/doc" "{toxinidir}/examples"

[testenv:doc-{links,html}]
description = Check if documentation generates properly
setenv =
    links: BUILDER = linkcheck
    html: BUILDER = html
passenv =
    ANSYSLMD_LICENSE_FILE
    LD_LIBRARY_PATH
    STK_USER_HOME
    STK_INSTALL_DIR
    STK_CONFIG_DIR
    BUILD_API
    BUILD_EXAMPLES
    DISPLAY
extras = 
    doc
    visualization
commands =
    sphinx-build -d "{toxworkdir}/doc_doctree" doc/source "{toxinidir}/doc/_build/{env:BUILDER}" --color -vW -b {env:BUILDER} -j auto

# The following environments are only for development purposes. Do not use in CI/CD.
# Using these during a CI/CD can lead to unexpected issues due to a Docker-In-Docker
# situation.

[testenv:docker-build-{centos_images,ubuntu_images,windows_images}]
description = Build all the available Docker images for the specified platform
skip_install = true
allowlist_externals =
    docker
    compose
commands =
    centos_images: docker compose --file "{toxinidir}/docker/linux/centos/docker-compose.yml" build
    ubuntu_images: docker compose --file "{toxinidir}/docker/linux/ubuntu/docker-compose.yml" build
    windows_images: docker compose --file "{toxinidir}/docker/windows/docker-compose.yml" build --build-arg {posargs}

[testenv:docker-run-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Run a Docker container with the desired platform, Python version, STK, and the current PySTK
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
passenv =
    COLUMNS
    LINES
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    # Host platform specific arguments
    linux_host:   HOST_ARGS = --network="host" --env DISPLAY={env:DISPLAY}
    windows_host: HOST_ARGS = -p 8888:8888
    # CentOS container
    centos_container: CONTAINER_OS = centos7
    centos_container: CONTAINER_ARGS = --volume "{toxinidir}:/home/stk/pystk"
    centos_container: CONTAINER_CMD = /bin/bash -c "cd /home/stk && python -m venv .venv && source .venv/bin/activate && python -m pip install --upgrade pip  && python -m pip install -e /home/stk/pystk[tests,doc,visualization]"
    centos_container: WINDOWS_HOST_ROOT_CMD = /bin/bash -c "chown -R stk:stk /home/stk/pystk"
    centos_container: ROOT_USER = root
    # Ubuntu container
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    ubuntu_container: CONTAINER_ARGS = --volume "{toxinidir}:/home/stk/pystk"
    ubuntu_container: CONTAINER_CMD = /bin/bash -c "cd /home/stk && python -m venv .venv && source .venv/bin/activate && python -m pip install --upgrade pip && python -m pip install -e /home/stk/pystk[tests,doc,visualization]"
    ubuntu_container: WINDOWS_HOST_ROOT_CMD = /bin/bash -c "chown -R stk:stk /home/stk/pystk"
    ubuntu_container: ROOT_USER = root
    # Windows container
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
    windows_container: CONTAINER_ARGS = --volume "{toxinidir}:C:\Users\STK\pystk"
    windows_container: CONTAINER_CMD = cmd /C "python -m venv .venv && cd pystk && chcp 65001 && call C:\Users\STK\.venv\Scripts\activate.bat && python -m pip install --upgrade pip && python -m pip install -e C:\Users\STK\pystk[tests,doc,visualization]"
    windows_container: WINDOWS_HOST_ROOT_CMD = cmd /C "takeown /F C:\Users\STK\pystk\tests /R /D Y 2> nul"
    windows_container: ROOT_USER = STK
allowlist_externals =
    docker
commands =
    # Start a container with the desired configuration
    docker run \
        --detach --interactive --tty \
        --env ANSYSLMD_LICENSE_FILE={env:ANSYSLMD_LICENSE_FILE} \
        {env:HOST_ARGS} \
        {env:CONTAINER_ARGS} \
        --name stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
        ansys/stk:dev-{env:CONTAINER_OS}-python{env:PYTHON_VERSION}
    
    # HACK: a virtual environment fixes allows Jupyter Lab to operate as expected.
    # These issues may be raised because of the custom Python installation 
    # in the Docker images. 
    # TODO: Once gRPC is enabled, this should be revisited since Python will 
    # no longer need to be installed inside the container.
    docker exec --interactive --tty -e COLUMNS=$COLUMNS -e LINES=$LINES \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:CONTAINER_CMD}

    # On Windows, the docker volume is exposed in the container with the owner and group 
    # for all the files and directories set to root.
    # Change both to the "stk" user used to run the container, so tests relying 
    # on file permissions work correctly.
    windows_host: docker exec --user {env:ROOT_USER} --interactive --tty stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:WINDOWS_HOST_ROOT_CMD}

[testenv:docker-exec-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Exec a command using the desired STK container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
passenv =
    COLUMNS
    LINES
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    # CentOS container
    centos_container: CONTAINER_OS = centos7
    centos_container: VENV_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && {posargs}'
    # Ubuntu container
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    ubuntu_container: VENV_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && {posargs}'
    # Windows container
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
    windows_container: VENV_CMD = cmd /C ""mode con:cols=100 lines=50 && chcp 65001 && call C:\\Users\\STK\\.venv\\Scripts\\activate.bat && {posargs}""
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty -e COLUMNS=$COLUMNS -e LINES=$LINES \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:VENV_CMD}

[testenv:docker-lab-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Run jupyter lab using the desired STK container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    # Host platform specific arguments
    linux_host:   HOST_ARGS = 
    windows_host: HOST_ARGS =
    # CentOS container
    centos_container: CONTAINER_OS = centos7
    centos_container: LAB_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && jupyter lab {env:HOST_ARGS} --ip=0.0.0.0 --port 8888 --no-browser --NotebookApp.token=pystk --notebook-dir=/home/stk/pystk'
    # Ubuntu container
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    ubuntu_container: LAB_CMD = /bin/bash -c 'cd /home/stk && source .venv/bin/activate && jupyter lab {env:HOST_ARGS} --ip=0.0.0.0 --port 8888 --no-browser --NotebookApp.token=pystk --notebook-dir=/home/stk/pystk'
    # Windows container
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
    windows_container: LAB_CMD = cmd -c "chcp 65001 && call C:\Users\STK\.venv\Scripts\activate.bat && python -m jupyter lab --ip=0.0.0.0 --port 8888 --no-browser --NotebookApp.token=pystk --notebook-dir=C:\Users\STK\pystk"
allowlist_externals =
    docker
commands =
    docker exec --interactive --tty \
        stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} {env:LAB_CMD}

[testenv:docker-novnc-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Expose container UI through novnc for troubleshooting purpose and also add sudo to make it possible to install additional debugging tools like gdb or valgrind
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    centos_container: CONTAINER_OS = centos7
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
allowlist_externals =
    docker
commands =
    centos_container: docker exec --interactive --tty --user root stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
    centos_container:     /bin/bash -c ' \
    centos_container:         yum -y install epel-release && yum --enablerepo=epel -y install chpasswd sudo sed fluxbox novnc python-websockify numpy x11vnc xterm; \
    centos_container:         usermod -aG wheel stk; \
    centos_container:         echo "stk:stk" | chpasswd; \
    centos_container:         sed -i \
    centos_container:             "s/this.attach(new WebSocket(uri, protocols));/this.attach(new WebSocket(uri, ['"'"'binary'"'"', '"'"'base64'"'"']));/g" \
    centos_container:             /usr/share/novnc/core/websock.js \
    centos_container:     '
            # See https://techglimpse.com/openstack-novnc-code-400-base64-protocol-error/

    ubuntu_container: docker exec --interactive --tty --user root stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
    ubuntu_container:     /bin/bash -c ' \
    ubuntu_container:         apt-get update -y; \
    ubuntu_container:         apt-get install -y sudo sed fluxbox novnc python3-websockify python3-numpy x11vnc xterm; \
    ubuntu_container:         usermod -aG sudo stk; \
    ubuntu_container:         echo "stk:stk" | chpasswd; \
    ubuntu_container:         echo "stk ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers; \
    ubuntu_container:         sed -i \
    ubuntu_container:             "s/this.attach(new WebSocket(uri, protocols));/this.attach(new WebSocket(uri, ['"'"'binary'"'"', '"'"'base64'"'"']));/g" \
    ubuntu_container:             /usr/share/novnc/core/websock.js \
    ubuntu_container:     '
            # See https://techglimpse.com/openstack-novnc-code-400-base64-protocol-error/

    docker exec --interactive --tty stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION} \
        /bin/bash -i -c ' \
            fluxbox -display :0 & \
            x11vnc -forever -shared -display :0 & \
            xterm -e "source ${HOME}/.venv/bin/activate; $SHELL" & \
            sleep 8; \
            echo "***************************************************"; \
            echo "* Navigate to http://127.0.0.1:8888/vnc_auto.html *"; \
            echo "***************************************************"; \
            websockify --web=/usr/share/novnc/ 8888 localhost:5900 \
        '

[testenv:docker-stop-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Stop the Docker container with the desired Python version, STK, and the current PySTK
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    # CentOS container
    centos_container: CONTAINER_OS = centos7
    # Ubuntu container
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    # Windows container
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
allowlist_externals =
    docker
commands =
    docker stop stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION}

[testenv:docker-rm-{linux_host,windows_host}-{centos_container,ubuntu_container,windows_container}-{py39,py310,py311}]
description = Remove the specified Docker container
skip_install = true
platform =
    windows_host: win32
    linux_host: linux
setenv =
    # Python version selector
    py39: PYTHON_VERSION = 3.9
    py310: PYTHON_VERSION = 3.10
    py311: PYTHON_VERSION = 3.11
    # CentOS container
    centos_container: CONTAINER_OS = centos7
    # LinUbunutux container
    ubuntu_container: CONTAINER_OS = ubuntu22.04
    # Windows container
    windows_container: CONTAINER_OS = windowsservercore-ltsc2019
allowlist_externals =
    docker
commands =
    docker rm --force stk-{env:CONTAINER_OS}-python{env:PYTHON_VERSION}
