################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################ 

__all__ = ["ADDSMessage", "ADDSMessageCollection", "ARINC424Airport", "ARINC424Helipad", "ARINC424Navaid", "ARINC424Runway", 
"ARINC424Source", "ARINC424Waypoint", "AdvFixedWingElectricPowerplant", "AdvFixedWingEmpiricalJetEngine", "AdvFixedWingExternalAero", 
"AdvFixedWingExternalProp", "AdvFixedWingGeometryBasic", "AdvFixedWingGeometryVariable", "AdvFixedWingPistonPowerplant", 
"AdvFixedWingRamjetBasic", "AdvFixedWingScramjetBasic", "AdvFixedWingSubSuperHypersonicAero", "AdvFixedWingSubSuperHypersonicProp", 
"AdvFixedWingSubsonicAero", "AdvFixedWingSupersonicAero", "AdvFixedWingTool", "AdvFixedWingTurbofanBasicABPowerplant", "AdvFixedWingTurbofanBasicABProp", 
"AdvFixedWingTurbojetBasicABPowerplant", "AdvFixedWingTurbojetBasicABProp", "AdvFixedWingTurbopropPowerplant", "AeroPropManeuverModeHelper", 
"AgEAvtrADDSForecastType", "AgEAvtrADDSMissingMsgType", "AgEAvtrADDSMsgExtrapType", "AgEAvtrADDSMsgInterpType", "AgEAvtrAFPROPFuelType", 
"AgEAvtrAGLMSL", "AgEAvtrAccelManeuverAeroPropMode", "AgEAvtrAccelManeuverMode", "AgEAvtrAccelMode", "AgEAvtrAccelPerfModelOverride", 
"AgEAvtrAccelerationAdvAccelMode", "AgEAvtrAdvFixedWingAeroStrategy", "AgEAvtrAdvFixedWingGeometry", "AgEAvtrAdvFixedWingPowerplantStrategy", 
"AgEAvtrAeroPropFlightMode", "AgEAvtrAeroPropSimpleMode", "AgEAvtrAileronRollFlightPath", "AgEAvtrAileronRollMode", "AgEAvtrAircraftAeroStrategy", 
"AgEAvtrAircraftPropStrategy", "AgEAvtrAirspeedType", "AgEAvtrAltitudeConstraintManeuverMode", "AgEAvtrAltitudeRef", "AgEAvtrAndOr", 
"AgEAvtrAngleMode", "AgEAvtrApproachMode", "AgEAvtrAtmosphereModel", "AgEAvtrAutopilotAltitudeControlMode", "AgEAvtrAutopilotAltitudeMode", 
"AgEAvtrAutopilotHorizPlaneMode", "AgEAvtrBallistic3DControlMode", "AgEAvtrBasicFixedWingPropMode", "AgEAvtrBasicManeuverAirspeedMode", 
"AgEAvtrBasicManeuverAltitudeLimit", "AgEAvtrBasicManeuverFuelFlowType", "AgEAvtrBasicManeuverRefFrame", "AgEAvtrBasicManeuverStrategy", 
"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits", "AgEAvtrBasicManeuverStrategyNavControlLimit", "AgEAvtrCEAFuelType", "AgEAvtrClimbSpeedType", 
"AgEAvtrClosureMode", "AgEAvtrClosureValue", "AgEAvtrCruiseMaxPerfSpeedType", "AgEAvtrCruiseSpeed", "AgEAvtrDelayAltMode", 
"AgEAvtrDelayTurnDir", "AgEAvtrDepartureSpeedMode", "AgEAvtrDescentSpeedType", "AgEAvtrErrorCodes", "AgEAvtrFlightLineProcType", 
"AgEAvtrFlyAOALeftRight", "AgEAvtrFlyToFlightPathAngleMode", "AgEAvtrFuelFlowType", "AgEAvtrHoldRefuelDumpMode", "AgEAvtrHoldingDirection", 
"AgEAvtrHoldingEntryManeuver", "AgEAvtrHoldingProfileMode", "AgEAvtrHoverAltitudeMode", "AgEAvtrHoverHeadingMode", "AgEAvtrHoverMode", 
"AgEAvtrInterceptMode", "AgEAvtrJetEngineExhaustNozzleType", "AgEAvtrJetEngineIntakeType", "AgEAvtrJetEngineTechnologyLevel", 
"AgEAvtrJetEngineTurbineType", "AgEAvtrJetFuelType", "AgEAvtrJoinExitArcMethod", "AgEAvtrLandingApproachFixRangeMode", "AgEAvtrLaunchAttitudeMode", 
"AgEAvtrLaunchDynStateBearingRef", "AgEAvtrLaunchDynStateCoordFrame", "AgEAvtrLineOrientation", "AgEAvtrMinimizeSiteProcTimeDiff", 
"AgEAvtrMissileAeroStrategy", "AgEAvtrMissilePropStrategy", "AgEAvtrNavigatorTurnDir", "AgEAvtrNumericalIntegrator", "AgEAvtrPerfModelOverride", 
"AgEAvtrPhaseOfFlight", "AgEAvtrPitch3DControlMode", "AgEAvtrPointToPointMode", "AgEAvtrProcedureType", "AgEAvtrProfileControlLimit", 
"AgEAvtrPullMode", "AgEAvtrPushPull", "AgEAvtrRamjetMode", "AgEAvtrRefStateAttitudeMode", "AgEAvtrRefStateLateralAccelMode", 
"AgEAvtrRefStateLongitudinalAccelMode", "AgEAvtrRefStatePerfMode", "AgEAvtrRefuelDumpMode", "AgEAvtrRelAbsBearing", "AgEAvtrRelSpeedAltStopCondition", 
"AgEAvtrRelativeAltitudeMode", "AgEAvtrRendezvousStopCondition", "AgEAvtrRollLeftRight", "AgEAvtrRollUprightInverted", "AgEAvtrRollingPullMode", 
"AgEAvtrRotorcraftPowerplantType", "AgEAvtrRunwayHighLowEnd", "AgEAvtrSTKObjectWaypointOffsetMode", "AgEAvtrScramjetMode", 
"AgEAvtrSearchPatternCourseMode", "AgEAvtrSiteType", "AgEAvtrSmoothAccelLeftRight", "AgEAvtrSmoothAccelStopConditions", 
"AgEAvtrSmoothTurnFPAMode", "AgEAvtrSmoothTurnMode", "AgEAvtrStationkeepingStopCondition", "AgEAvtrStraightAheadRefFrame", 
"AgEAvtrTakeoffLandingSpeedMode", "AgEAvtrTakeoffMode", "AgEAvtrTrajectoryBlendMode", "AgEAvtrTransitionToHoverMode", "AgEAvtrTurbineMode", 
"AgEAvtrTurnDirection", "AgEAvtrTurnMode", "AgEAvtrVTOLFinalHeadingMode", "AgEAvtrVTOLHeadingMode", "AgEAvtrVTOLRateMode", 
"AgEAvtrVTOLTransitionMode", "AgEAvtrVTOLTranslationFinalCourseMode", "AgEAvtrVTOLTranslationMode", "AgEAvtrVertLandingMode", 
"AgEAvtrWindAtmosModelSource", "AgEAvtrWindModelType", "AircraftAcceleration", "AircraftAccelerationMode", "AircraftAdvAccelerationModel", 
"AircraftAdvClimbModel", "AircraftAdvCruiseModel", "AircraftAdvDescentModel", "AircraftAdvLandingModel", "AircraftAdvTakeoffModel", 
"AircraftAero", "AircraftBasicAccelerationModel", "AircraftBasicClimbModel", "AircraftBasicCruiseModel", "AircraftBasicDescentModel", 
"AircraftBasicFixedWingAero", "AircraftBasicFixedWingProp", "AircraftBasicLandingModel", "AircraftBasicTakeoffModel", "AircraftCategory", 
"AircraftClimb", "AircraftCruise", "AircraftDescent", "AircraftExternalAero", "AircraftExternalProp", "AircraftLanding", 
"AircraftModel", "AircraftModels", "AircraftProp", "AircraftSimpleAero", "AircraftSimpleProp", "AircraftTakeoff", "AircraftTerrainFollow", 
"AircraftTerrainFollowModel", "AircraftVTOL", "AircraftVTOLModel", "AirportCategory", "AltitudeMSLAndLevelOffOptions", "AltitudeMSLOptions", 
"AltitudeOptions", "ArcAltitudeAndDelayOptions", "ArcAltitudeOptions", "ArcOptions", "ArcVerticalPlaneOptions", "AtmosphereModel", 
"AtmosphereModelBasic", "AttitudeTransitions", "AviatorPropagator", "BasicFixedWingFwdFlightLiftHelper", "BasicManeuverAirspeedOptions", 
"BasicManeuverStrategyAileronRoll", "BasicManeuverStrategyAutopilotNav", "BasicManeuverStrategyAutopilotProf", "BasicManeuverStrategyBallistic3D", 
"BasicManeuverStrategyBarrelRoll", "BasicManeuverStrategyBezier", "BasicManeuverStrategyCruiseProfile", "BasicManeuverStrategyFlyAOA", 
"BasicManeuverStrategyGlideProfile", "BasicManeuverStrategyIntercept", "BasicManeuverStrategyLTAHover", "BasicManeuverStrategyLoop", 
"BasicManeuverStrategyPitch3D", "BasicManeuverStrategyPull", "BasicManeuverStrategyPushPull", "BasicManeuverStrategyRelSpeedAlt", 
"BasicManeuverStrategyRelativeBearing", "BasicManeuverStrategyRelativeCourse", "BasicManeuverStrategyRelativeFPA", "BasicManeuverStrategyRendezvous", 
"BasicManeuverStrategyRollingPull", "BasicManeuverStrategySimpleTurn", "BasicManeuverStrategySmoothAccel", "BasicManeuverStrategySmoothTurn", 
"BasicManeuverStrategyStationkeeping", "BasicManeuverStrategyStraightAhead", "BasicManeuverStrategyWeave", "CalculationOptions", 
"Catalog", "ClimbAndDescentTransitions", "Configuration", "CruiseAirspeedAndProfileOptions", "CruiseAirspeedOptions", "CruiseAirspeedProfile", 
"DAFIFHelipad", "DAFIFRunway", "DAFIFSource", "DAFIFWaypoint", "EnrouteAndDelayOptions", "EnrouteOptions", "EnrouteTurnDirectionOptions", 
"FuelModelKeroseneAFPROP", "FuelModelKeroseneCEA", "FuelTankExternal", "FuelTankInternal", "HoverAltitudeOptions", "IADDSMessage", 
"IADDSMessageCollection", "IARINC424Airport", "IARINC424Item", "IARINC424Runway", "IARINC424Source", "IAdvFixedWingElectricPowerplant", 
"IAdvFixedWingEmpiricalJetEngine", "IAdvFixedWingExternalAero", "IAdvFixedWingExternalProp", "IAdvFixedWingGeometry", "IAdvFixedWingGeometryBasic", 
"IAdvFixedWingGeometryVariable", "IAdvFixedWingPistonPowerplant", "IAdvFixedWingPowerplant", "IAdvFixedWingRamjetBasic", 
"IAdvFixedWingScramjetBasic", "IAdvFixedWingSubSuperHypersonicAero", "IAdvFixedWingSubSuperHypersonicProp", "IAdvFixedWingSubsonicAero", 
"IAdvFixedWingSupersonicAero", "IAdvFixedWingTool", "IAdvFixedWingTurbofanBasicABPowerplant", "IAdvFixedWingTurbofanBasicABProp", 
"IAdvFixedWingTurbojetBasicABPowerplant", "IAdvFixedWingTurbojetBasicABProp", "IAdvFixedWingTurbopropPowerplant", "IAeroPropManeuverModeHelper", 
"IAircraftAcceleration", "IAircraftAccelerationMode", "IAircraftAdvAccelerationModel", "IAircraftAdvClimbModel", "IAircraftAdvCruiseModel", 
"IAircraftAdvDescentModel", "IAircraftAdvLandingModel", "IAircraftAdvTakeoffModel", "IAircraftAero", "IAircraftBasicAccelerationModel", 
"IAircraftBasicClimbModel", "IAircraftBasicCruiseModel", "IAircraftBasicDescentModel", "IAircraftBasicFixedWingAero", "IAircraftBasicFixedWingProp", 
"IAircraftBasicLandingModel", "IAircraftBasicTakeoffModel", "IAircraftCategory", "IAircraftClimb", "IAircraftCruise", "IAircraftDescent", 
"IAircraftExternalAero", "IAircraftExternalProp", "IAircraftLanding", "IAircraftModel", "IAircraftModels", "IAircraftProp", 
"IAircraftSimpleAero", "IAircraftSimpleProp", "IAircraftTakeoff", "IAircraftTerrainFollow", "IAircraftTerrainFollowModel", 
"IAircraftVTOL", "IAircraftVTOLModel", "IAirportCategory", "IAltitudeMSLAndLevelOffOptions", "IAltitudeMSLOptions", "IAltitudeOptions", 
"IArcAltitudeAndDelayOptions", "IArcAltitudeOptions", "IArcOptions", "IArcVerticalPlaneOptions", "IAtmosphereModel", "IAtmosphereModelBasic", 
"IAttitudeTransitions", "IAutomationStrategyFactory", "IAviatorPropagator", "IAviatorVehicle", "IBasicFixedWingLiftHelper", 
"IBasicManeuverAirspeedOptions", "IBasicManeuverStrategy", "IBasicManeuverStrategyAileronRoll", "IBasicManeuverStrategyAutopilotNav", 
"IBasicManeuverStrategyAutopilotProf", "IBasicManeuverStrategyBallistic3D", "IBasicManeuverStrategyBarrelRoll", "IBasicManeuverStrategyBezier", 
"IBasicManeuverStrategyCruiseProfile", "IBasicManeuverStrategyFlyAOA", "IBasicManeuverStrategyGlideProfile", "IBasicManeuverStrategyIntercept", 
"IBasicManeuverStrategyLTAHover", "IBasicManeuverStrategyLoop", "IBasicManeuverStrategyPitch3D", "IBasicManeuverStrategyPull", 
"IBasicManeuverStrategyPushPull", "IBasicManeuverStrategyRelSpeedAlt", "IBasicManeuverStrategyRelativeBearing", "IBasicManeuverStrategyRelativeCourse", 
"IBasicManeuverStrategyRelativeFPA", "IBasicManeuverStrategyRendezvous", "IBasicManeuverStrategyRollingPull", "IBasicManeuverStrategySimpleTurn", 
"IBasicManeuverStrategySmoothAccel", "IBasicManeuverStrategySmoothTurn", "IBasicManeuverStrategyStationkeeping", "IBasicManeuverStrategyStraightAhead", 
"IBasicManeuverStrategyWeave", "ICalculationOptions", "ICatalog", "ICatalogAirport", "ICatalogItem", "ICatalogNavaid", "ICatalogRunway", 
"ICatalogSource", "ICatalogVTOLPoint", "ICatalogWaypoint", "IClimbAndDescentTransitions", "IConfiguration", "IConnect", 
"ICruiseAirspeedAndProfileOptions", "ICruiseAirspeedOptions", "ICruiseAirspeedProfile", "IDAFIFItem", "IDAFIFSource", "IEnrouteAndDelayOptions", 
"IEnrouteOptions", "IEnrouteTurnDirectionOptions", "IFuelModelKeroseneAFPROP", "IFuelModelKeroseneCEA", "IFuelTankExternal", 
"IFuelTankInternal", "IHoverAltitudeOptions", "ILandingEnterDownwindPattern", "ILandingInterceptGlideslope", "ILandingStandardInstrumentApproach", 
"ILevelTurns", "IMissileAdvancedAero", "IMissileAero", "IMissileExternalAero", "IMissileExternalProp", "IMissileModel", 
"IMissileModels", "IMissileProp", "IMissileRamjetProp", "IMissileRocketProp", "IMissileSimpleAero", "IMissileSimpleProp", 
"IMissileTurbojetProp", "IMission", "INavaidCategory", "INavigationOptions", "IPayloadStation", "IPerformanceModel", "IPerformanceModelOptions", 
"IPhase", "IPhaseCollection", "IProcedure", "IProcedureAirway", "IProcedureAirwayRouter", "IProcedureArcEnroute", "IProcedureArcPointToPoint", 
"IProcedureAreaTargetSearch", "IProcedureBasicManeuver", "IProcedureBasicPointToPoint", "IProcedureCollection", "IProcedureDelay", 
"IProcedureEnroute", "IProcedureFastTimeOptions", "IProcedureFlightLine", "IProcedureFormationRecover", "IProcedureHoldingCircular", 
"IProcedureHoldingFigure8", "IProcedureHoldingRacetrack", "IProcedureHover", "IProcedureHoverTranslate", "IProcedureInFormation", 
"IProcedureLanding", "IProcedureLaunch", "IProcedureLaunchDynState", "IProcedureLaunchWaypoint", "IProcedureParallelFlightLine", 
"IProcedureReferenceState", "IProcedureSuperProcedure", "IProcedureTakeoff", "IProcedureTerrainFollow", "IProcedureTimeOptions", 
"IProcedureTransitionToForwardFlight", "IProcedureTransitionToHover", "IProcedureVGTPoint", "IProcedureVerticalLanding", 
"IProcedureVerticalTakeoff", "IPropulsionEfficiencies", "IPropulsionThrust", "IRefStateForwardFlightOptions", "IRefStateHoverOptions", 
"IRefStateTakeoffLandingOptions", "IRefStateWeightOnWheelsOptions", "IRefuelDumpProperties", "IRotorcraftAero", "IRotorcraftModel", 
"IRotorcraftModels", "IRotorcraftProp", "IRunwayCategory", "IRunwayHeadingOptions", "ISite", "ISiteAirportFromCatalog", 
"ISiteDynState", "ISiteEndOfPrevProcedure", "ISiteNavaidFromCatalog", "ISiteReferenceState", "ISiteRelToPrevProcedure", 
"ISiteRelToSTKObject", "ISiteRunway", "ISiteRunwayFromCatalog", "ISiteSTKAreaTarget", "ISiteSTKObjectWaypoint", "ISiteSTKStaticObject", 
"ISiteSTKVehicle", "ISiteSuperProcedure", "ISiteUnknown", "ISiteVTOLPoint", "ISiteVTOLPointFromCatalog", "ISiteWaypoint", 
"ISiteWaypointFromCatalog", "IStation", "IStationCollection", "ITakeoffDeparturePoint", "ITakeoffLowTransition", "ITakeoffNormal", 
"IUserRunway", "IUserRunwaySource", "IUserVTOLPoint", "IUserVTOLPointSource", "IUserWaypoint", "IUserWaypointSource", "IVTOLPointCategory", 
"IVerticalPlaneAndFlightPathOptions", "IVerticalPlaneOptions", "IWaypointCategory", "IWindModel", "IWindModelADDS", "IWindModelConstant", 
"LandingCruiseAirspeedAndProfileOptions", "LandingEnrouteOptions", "LandingEnterDownwindPattern", "LandingInterceptGlideslope", 
"LandingStandardInstrumentApproach", "LandingVerticalPlaneOptions", "LevelTurns", "MissileAdvancedAero", "MissileAero", 
"MissileExternalAero", "MissileExternalProp", "MissileModel", "MissileModels", "MissileProp", "MissileRamjetProp", "MissileRocketProp", 
"MissileSimpleAero", "MissileSimpleProp", "MissileTurbojetProp", "Mission", "NavaidCategory", "NavigationOptions", "PayloadStation", 
"PerformanceModel", "PerformanceModelOptions", "Phase", "PhaseCollection", "Procedure", "ProcedureAirway", "ProcedureAirwayRouter", 
"ProcedureArcEnroute", "ProcedureArcPointToPoint", "ProcedureAreaTargetSearch", "ProcedureBasicManeuver", "ProcedureBasicPointToPoint", 
"ProcedureCollection", "ProcedureDelay", "ProcedureEnroute", "ProcedureFastTimeOptions", "ProcedureFlightLine", "ProcedureFormationRecover", 
"ProcedureHoldingCircular", "ProcedureHoldingFigure8", "ProcedureHoldingRacetrack", "ProcedureHover", "ProcedureHoverTranslate", 
"ProcedureInFormation", "ProcedureLanding", "ProcedureLaunch", "ProcedureLaunchDynState", "ProcedureLaunchWaypoint", "ProcedureParallelFlightLine", 
"ProcedureReferenceState", "ProcedureSuperProcedure", "ProcedureTakeoff", "ProcedureTerrainFollow", "ProcedureTimeOptions", 
"ProcedureTransitionToForwardFlight", "ProcedureTransitionToHover", "ProcedureVGTPoint", "ProcedureVerticalLanding", "ProcedureVerticalTakeoff", 
"PropulsionEfficiencies", "PropulsionThrust", "RefStateForwardFlightOptions", "RefStateHoverOptions", "RefStateTakeoffLandingOptions", 
"RefStateWeightOnWheelsOptions", "RefuelDumpProperties", "RotorcraftAero", "RotorcraftModel", "RotorcraftModels", "RotorcraftProp", 
"RunwayCategory", "RunwayHeadingOptions", "Site", "SiteAirportFromCatalog", "SiteDynState", "SiteEndOfPrevProcedure", "SiteNavaidFromCatalog", 
"SiteReferenceState", "SiteRelToPrevProcedure", "SiteRelToSTKObject", "SiteRunway", "SiteRunwayFromCatalog", "SiteSTKAreaTarget", 
"SiteSTKObjectWaypoint", "SiteSTKStaticObject", "SiteSTKVehicle", "SiteSuperProcedure", "SiteVTOLPoint", "SiteVTOLPointFromCatalog", 
"SiteWaypoint", "SiteWaypointFromCatalog", "StationCollection", "TakeoffDeparturePoint", "TakeoffLowTransition", "TakeoffNormal", 
"UserRunway", "UserRunwaySource", "UserVTOLPoint", "UserVTOLPointSource", "UserWaypoint", "UserWaypointSource", "VTOLPointCategory", 
"VerticalPlaneAndFlightPathOptions", "VerticalPlaneOptions", "WaypointCategory", "WindModel", "WindModelADDS", "WindModelConstant"]

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

try:
    from numpy import ndarray
except ModuleNotFoundError:
    pass
    
try:
    from pandas import DataFrame
except ModuleNotFoundError:
    pass

from ...internal  import comutil          as agcom
from ...internal  import coclassutil      as agcls
from ...internal  import marshall         as agmarshall
from ...internal  import dataanalysisutil as agdata
from ...utilities import colors           as agcolor
from ...internal.comutil     import IUnknown, IDispatch, IPictureDisp, IAGFUNCTYPE, IEnumVARIANT
from ...internal.eventutil   import *
from ...utilities.exceptions import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEAvtrErrorCodes(IntEnum):
    """Error Codes."""
    # Object not found.
    eAvtrErrorObjectNotFound = (((1 << 31) | (4 << 16)) | (0x200 + 1))
    # Index out of range.
    eAvtrErrorIndexOutOfRange = (((1 << 31) | (4 << 16)) | (0x200 + 2))
    # The attribute is invalid.
    eAvtrErrorInvalidAttribute = (((1 << 31) | (4 << 16)) | (0x200 + 3))
    # The command failed.
    eAvtrErrorCommandFailed = (((1 << 31) | (4 << 16)) | (0x200 + 4))
    # Invalid argument.
    eAvtrAvtrErrorInvalidArg = (((1 << 31) | (4 << 16)) | (0x200 + 5))
    # Empty argument.
    eAvtrErrorEmptyArg = (((1 << 31) | (4 << 16)) | (0x200 + 6))
    # Object was not removed.
    eAvtrErrorObjectNotRemoved = (((1 << 31) | (4 << 16)) | (0x200 + 7))
    # Error renaming object.
    eAvtrErrorFailedToRenameObject = (((1 << 31) | (4 << 16)) | (0x200 + 8))
    # Unknown class type.
    eAvtrErrorUnknownClassType = (((1 << 31) | (4 << 16)) | (0x200 + 9))
    # Failed to create the object.
    eAvtrErrorFailedToCreateObject = (((1 << 31) | (4 << 16)) | (0x200 + 10))
    # Invalid choice for object link.
    eAvtrErrorObjectLinkInvalidChoice = (((1 << 31) | (4 << 16)) | (0x200 + 11))
    # No choices available.
    eAvtrErrorObjectLinkNoChoices = (((1 << 31) | (4 << 16)) | (0x200 + 12))
    # Read only attribute.
    eAvtrErrorReadOnlyAttribute = (((1 << 31) | (4 << 16)) | (0x200 + 13))
    # Invalid constraint list.
    eAvtrErrorCstrInvalidCstrList = (((1 << 31) | (4 << 16)) | (0x200 + 14))
    # InvalidConstraint.
    eAvtrErrorCstrInvalidConstraint = (((1 << 31) | (4 << 16)) | (0x200 + 15))
    # List if read only.
    eAvtrErrorListReadOnly = (((1 << 31) | (4 << 16)) | (0x200 + 16))
    # Failed to insert the item into the list.
    eAvtrErrorListInsertFailed = (((1 << 31) | (4 << 16)) | (0x200 + 17))
    # Length is invalid.
    eAvtrErrorInvalidLength = (((1 << 31) | (4 << 16)) | (0x200 + 18))
    # Error loading a file.
    eAvtrErrorFailedToLoadFile = (((1 << 31) | (4 << 16)) | (0x200 + 19))
    # Invalid operation.
    eAvtrErrorInvalidOperation = (((1 << 31) | (4 << 16)) | (0x200 + 20))
    # Method failed.
    eAvtrErrorMethodInvokeFailed = (((1 << 31) | (4 << 16)) | (0x200 + 21))
    # Deprecated property or method.
    eAvtrErrorDeprecated = (((1 << 31) | (4 << 16)) | (0x200 + 22))

AgEAvtrErrorCodes.eAvtrErrorObjectNotFound.__doc__ = "Object not found."
AgEAvtrErrorCodes.eAvtrErrorIndexOutOfRange.__doc__ = "Index out of range."
AgEAvtrErrorCodes.eAvtrErrorInvalidAttribute.__doc__ = "The attribute is invalid."
AgEAvtrErrorCodes.eAvtrErrorCommandFailed.__doc__ = "The command failed."
AgEAvtrErrorCodes.eAvtrAvtrErrorInvalidArg.__doc__ = "Invalid argument."
AgEAvtrErrorCodes.eAvtrErrorEmptyArg.__doc__ = "Empty argument."
AgEAvtrErrorCodes.eAvtrErrorObjectNotRemoved.__doc__ = "Object was not removed."
AgEAvtrErrorCodes.eAvtrErrorFailedToRenameObject.__doc__ = "Error renaming object."
AgEAvtrErrorCodes.eAvtrErrorUnknownClassType.__doc__ = "Unknown class type."
AgEAvtrErrorCodes.eAvtrErrorFailedToCreateObject.__doc__ = "Failed to create the object."
AgEAvtrErrorCodes.eAvtrErrorObjectLinkInvalidChoice.__doc__ = "Invalid choice for object link."
AgEAvtrErrorCodes.eAvtrErrorObjectLinkNoChoices.__doc__ = "No choices available."
AgEAvtrErrorCodes.eAvtrErrorReadOnlyAttribute.__doc__ = "Read only attribute."
AgEAvtrErrorCodes.eAvtrErrorCstrInvalidCstrList.__doc__ = "Invalid constraint list."
AgEAvtrErrorCodes.eAvtrErrorCstrInvalidConstraint.__doc__ = "InvalidConstraint."
AgEAvtrErrorCodes.eAvtrErrorListReadOnly.__doc__ = "List if read only."
AgEAvtrErrorCodes.eAvtrErrorListInsertFailed.__doc__ = "Failed to insert the item into the list."
AgEAvtrErrorCodes.eAvtrErrorInvalidLength.__doc__ = "Length is invalid."
AgEAvtrErrorCodes.eAvtrErrorFailedToLoadFile.__doc__ = "Error loading a file."
AgEAvtrErrorCodes.eAvtrErrorInvalidOperation.__doc__ = "Invalid operation."
AgEAvtrErrorCodes.eAvtrErrorMethodInvokeFailed.__doc__ = "Method failed."
AgEAvtrErrorCodes.eAvtrErrorDeprecated.__doc__ = "Deprecated property or method."

agcls.AgTypeNameMap["AgEAvtrErrorCodes"] = AgEAvtrErrorCodes

class AgEAvtrClosureValue(IntEnum):
    """The closure value."""
    # The closure mode
    eClosureMode = 0
    # The HOBS max angle offset
    eMaxAngle = 1
    # The HOBS angle tolerance
    eAngleTol = 2

AgEAvtrClosureValue.eClosureMode.__doc__ = "The closure mode"
AgEAvtrClosureValue.eMaxAngle.__doc__ = "The HOBS max angle offset"
AgEAvtrClosureValue.eAngleTol.__doc__ = "The HOBS angle tolerance"

agcls.AgTypeNameMap["AgEAvtrClosureValue"] = AgEAvtrClosureValue

class AgEAvtrProcedureType(IntEnum):
    """Aviator procedure types."""
    # Airway procedure.
    eProcAirway = 0
    # Airway Router procedure.
    eProcAirwayRouter = 1
    # ArcEnroute procedure.
    eProcArcEnroute = 2
    # ArcPointToPoint procedure.
    eProcArcPointToPoint = 3
    # Area Target Search procedure.
    eProcAreaTargetSearch = 4
    # Basic Maneuver procedure.
    eProcBasicManeuver = 5
    # Basic Point to Point procedure.
    eProcBasicPointToPoint = 6
    # Delay procedure.
    eProcDelay = 7
    # Enroute procedure.
    eProcEnroute = 8
    # Flight Line procedure.
    eProcFlightLine = 9
    # Formation Recover procedure.
    eProcFormationRecover = 10
    # Holding Circular procedure.
    eProcHoldingCircular = 11
    # Holding Figure 8 procedure.
    eProcHoldingFigure8 = 12
    # Holding Racetrack procedure.
    eProcHoldingRacetrack = 13
    # Hover procedure.
    eProcHover = 14
    # Hover Translate procedure.
    eProcHoverTranslate = 15
    # In Formation procedure.
    eProcInFormation = 16
    # Landing procedure.
    eProcLanding = 17
    # Launch procedure.
    eProcLaunch = 18
    # Parallel Flight Line procedure.
    eProcParallelFlightLine = 19
    # Reference State procedure.
    eProcReferenceState = 20
    # Super Procedure procedure.
    eProcSuperProcedure = 21
    # Takeoff procedure.
    eProcTakeoff = 22
    # Terrain Following procedure.
    eProcTerrainFollowing = 23
    # Transition to Forward Flight procedure.
    eProcTransitionToForwardFlight = 24
    # Transition To Hover procedure.
    eProcTransitionToHover = 25
    # Vertical Landing procedure.
    eProcVerticalLanding = 26
    # Vertical Takeoff procedure.
    eProcVerticalTakeoff = 27
    # VGT Point procedure.
    eProcVGTPoint = 28
    # LaunchDynState procedure.
    eProcLaunchDynState = 29
    # LaunchWaypoint procedure.
    eProcLaunchWaypoint = 30

AgEAvtrProcedureType.eProcAirway.__doc__ = "Airway procedure."
AgEAvtrProcedureType.eProcAirwayRouter.__doc__ = "Airway Router procedure."
AgEAvtrProcedureType.eProcArcEnroute.__doc__ = "ArcEnroute procedure."
AgEAvtrProcedureType.eProcArcPointToPoint.__doc__ = "ArcPointToPoint procedure."
AgEAvtrProcedureType.eProcAreaTargetSearch.__doc__ = "Area Target Search procedure."
AgEAvtrProcedureType.eProcBasicManeuver.__doc__ = "Basic Maneuver procedure."
AgEAvtrProcedureType.eProcBasicPointToPoint.__doc__ = "Basic Point to Point procedure."
AgEAvtrProcedureType.eProcDelay.__doc__ = "Delay procedure."
AgEAvtrProcedureType.eProcEnroute.__doc__ = "Enroute procedure."
AgEAvtrProcedureType.eProcFlightLine.__doc__ = "Flight Line procedure."
AgEAvtrProcedureType.eProcFormationRecover.__doc__ = "Formation Recover procedure."
AgEAvtrProcedureType.eProcHoldingCircular.__doc__ = "Holding Circular procedure."
AgEAvtrProcedureType.eProcHoldingFigure8.__doc__ = "Holding Figure 8 procedure."
AgEAvtrProcedureType.eProcHoldingRacetrack.__doc__ = "Holding Racetrack procedure."
AgEAvtrProcedureType.eProcHover.__doc__ = "Hover procedure."
AgEAvtrProcedureType.eProcHoverTranslate.__doc__ = "Hover Translate procedure."
AgEAvtrProcedureType.eProcInFormation.__doc__ = "In Formation procedure."
AgEAvtrProcedureType.eProcLanding.__doc__ = "Landing procedure."
AgEAvtrProcedureType.eProcLaunch.__doc__ = "Launch procedure."
AgEAvtrProcedureType.eProcParallelFlightLine.__doc__ = "Parallel Flight Line procedure."
AgEAvtrProcedureType.eProcReferenceState.__doc__ = "Reference State procedure."
AgEAvtrProcedureType.eProcSuperProcedure.__doc__ = "Super Procedure procedure."
AgEAvtrProcedureType.eProcTakeoff.__doc__ = "Takeoff procedure."
AgEAvtrProcedureType.eProcTerrainFollowing.__doc__ = "Terrain Following procedure."
AgEAvtrProcedureType.eProcTransitionToForwardFlight.__doc__ = "Transition to Forward Flight procedure."
AgEAvtrProcedureType.eProcTransitionToHover.__doc__ = "Transition To Hover procedure."
AgEAvtrProcedureType.eProcVerticalLanding.__doc__ = "Vertical Landing procedure."
AgEAvtrProcedureType.eProcVerticalTakeoff.__doc__ = "Vertical Takeoff procedure."
AgEAvtrProcedureType.eProcVGTPoint.__doc__ = "VGT Point procedure."
AgEAvtrProcedureType.eProcLaunchDynState.__doc__ = "LaunchDynState procedure."
AgEAvtrProcedureType.eProcLaunchWaypoint.__doc__ = "LaunchWaypoint procedure."

agcls.AgTypeNameMap["AgEAvtrProcedureType"] = AgEAvtrProcedureType

class AgEAvtrSiteType(IntEnum):
    """Aviator site types."""
    # Airport from Catalog site.
    eSiteAirportFromCatalog = 0
    # End of Previous Procedure site.
    eSiteEndOfPrevProcedure = 1
    # Navaid from Catalog site.
    eSiteNavaidFromCatalog = 2
    # Reference State site.
    eSiteReferenceState = 3
    # Relative to Previous Procedure site.
    eSiteRelativeToPrevProcedure = 4
    # Relative to Stationary STK Object site.
    eSiteRelativeToStationarySTKObject = 5
    # Runway site.
    eSiteRunway = 6
    # Runway from Catalog site.
    eSiteRunwayFromCatalog = 7
    # STK Area Target site.
    eSiteSTKAreaTarget = 8
    # STK Object Waypoint site.
    eSiteSTKObjectWaypoint = 9
    # STK STatic Object site.
    eSiteSTKStaticObject = 10
    # STK Vehicle site.
    eSiteSTKVehicle = 11
    # Super Procedure site.
    eSiteSuperProcedure = 12
    # VTOL Point site.
    eSiteVTOLPoint = 13
    # VTOL Point from Catalog site.
    eSiteVTOLPointFromCatalog = 14
    # Waypoint site.
    eSiteWaypoint = 15
    # Waypoint from Catalog site.
    eSiteWaypointFromCatalog = 16
    # DynState site.
    eSiteDynState = 17

AgEAvtrSiteType.eSiteAirportFromCatalog.__doc__ = "Airport from Catalog site."
AgEAvtrSiteType.eSiteEndOfPrevProcedure.__doc__ = "End of Previous Procedure site."
AgEAvtrSiteType.eSiteNavaidFromCatalog.__doc__ = "Navaid from Catalog site."
AgEAvtrSiteType.eSiteReferenceState.__doc__ = "Reference State site."
AgEAvtrSiteType.eSiteRelativeToPrevProcedure.__doc__ = "Relative to Previous Procedure site."
AgEAvtrSiteType.eSiteRelativeToStationarySTKObject.__doc__ = "Relative to Stationary STK Object site."
AgEAvtrSiteType.eSiteRunway.__doc__ = "Runway site."
AgEAvtrSiteType.eSiteRunwayFromCatalog.__doc__ = "Runway from Catalog site."
AgEAvtrSiteType.eSiteSTKAreaTarget.__doc__ = "STK Area Target site."
AgEAvtrSiteType.eSiteSTKObjectWaypoint.__doc__ = "STK Object Waypoint site."
AgEAvtrSiteType.eSiteSTKStaticObject.__doc__ = "STK STatic Object site."
AgEAvtrSiteType.eSiteSTKVehicle.__doc__ = "STK Vehicle site."
AgEAvtrSiteType.eSiteSuperProcedure.__doc__ = "Super Procedure site."
AgEAvtrSiteType.eSiteVTOLPoint.__doc__ = "VTOL Point site."
AgEAvtrSiteType.eSiteVTOLPointFromCatalog.__doc__ = "VTOL Point from Catalog site."
AgEAvtrSiteType.eSiteWaypoint.__doc__ = "Waypoint site."
AgEAvtrSiteType.eSiteWaypointFromCatalog.__doc__ = "Waypoint from Catalog site."
AgEAvtrSiteType.eSiteDynState.__doc__ = "DynState site."

agcls.AgTypeNameMap["AgEAvtrSiteType"] = AgEAvtrSiteType

class AgEAvtrBasicManeuverStrategy(IntEnum):
    """Basic maneuver strategy types."""
    # Straight Ahead strategy.
    eStraightAhead = 0
    # Weave strategy.
    eWeave = 1

AgEAvtrBasicManeuverStrategy.eStraightAhead.__doc__ = "Straight Ahead strategy."
AgEAvtrBasicManeuverStrategy.eWeave.__doc__ = "Weave strategy."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategy"] = AgEAvtrBasicManeuverStrategy

class AgEAvtrStraightAheadRefFrame(IntEnum):
    """Straight Ahead basic maneuver Reference Frame."""
    # Maintain Course.
    eMaintainCourse = 0
    # Maintain Heading.
    eMaintainHeading = 1
    # No Lateral Accelerations.
    eNoLateralAcc = 2
    # Compensate For Coriolis
    eCompensateCoriolis = 3

AgEAvtrStraightAheadRefFrame.eMaintainCourse.__doc__ = "Maintain Course."
AgEAvtrStraightAheadRefFrame.eMaintainHeading.__doc__ = "Maintain Heading."
AgEAvtrStraightAheadRefFrame.eNoLateralAcc.__doc__ = "No Lateral Accelerations."
AgEAvtrStraightAheadRefFrame.eCompensateCoriolis.__doc__ = "Compensate For Coriolis"

agcls.AgTypeNameMap["AgEAvtrStraightAheadRefFrame"] = AgEAvtrStraightAheadRefFrame

class AgEAvtrAirspeedType(IntEnum):
    """Airspeed types."""
    # Mach number.
    eMach = 0
    # Equivalent airspeed.
    eEAS = 1
    # Calibrated airspeed.
    eCAS = 2
    # True airspeed.
    eTAS = 3

AgEAvtrAirspeedType.eMach.__doc__ = "Mach number."
AgEAvtrAirspeedType.eEAS.__doc__ = "Equivalent airspeed."
AgEAvtrAirspeedType.eCAS.__doc__ = "Calibrated airspeed."
AgEAvtrAirspeedType.eTAS.__doc__ = "True airspeed."

agcls.AgTypeNameMap["AgEAvtrAirspeedType"] = AgEAvtrAirspeedType

class AgEAvtrAeroPropSimpleMode(IntEnum):
    """Aircraft operating mode for basic acceleration models with aerodynamics set to Simple."""
    # Fixed wing operatiog mode.
    eFixedWing = 0
    # Helicopter operating mode.
    eHelicopter = 1

AgEAvtrAeroPropSimpleMode.eFixedWing.__doc__ = "Fixed wing operatiog mode."
AgEAvtrAeroPropSimpleMode.eHelicopter.__doc__ = "Helicopter operating mode."

agcls.AgTypeNameMap["AgEAvtrAeroPropSimpleMode"] = AgEAvtrAeroPropSimpleMode

class AgEAvtrAeroPropFlightMode(IntEnum):
    """Flight mode for the Aero/Prop maneuver mode helper in aircraft acceleration models."""
    # Forward Flight mode.
    eFlightPerfForwardFlight = 0
    # Hover mode.
    eFlightPerfHover = 1
    # Takeoff mode.
    eFlightPerfTakeoff = 2
    # Landing mode.
    eFlightPerfLanding = 3
    # Weight on wheels mode.
    eFlightPerfWeightOnWheels = 4

AgEAvtrAeroPropFlightMode.eFlightPerfForwardFlight.__doc__ = "Forward Flight mode."
AgEAvtrAeroPropFlightMode.eFlightPerfHover.__doc__ = "Hover mode."
AgEAvtrAeroPropFlightMode.eFlightPerfTakeoff.__doc__ = "Takeoff mode."
AgEAvtrAeroPropFlightMode.eFlightPerfLanding.__doc__ = "Landing mode."
AgEAvtrAeroPropFlightMode.eFlightPerfWeightOnWheels.__doc__ = "Weight on wheels mode."

agcls.AgTypeNameMap["AgEAvtrAeroPropFlightMode"] = AgEAvtrAeroPropFlightMode

class AgEAvtrPhaseOfFlight(IntEnum):
    """Flight mode for basic maneuver procedures."""
    # Takeoff flight mode.
    eFlightPhaseTakeoff = 1
    # Forward flight climb flight mode.
    eFlightPhaseClimb = 2
    # Forward flight - cruise flight mode.
    eFlightPhaseCruise = 3
    # Forward flight descend flight mode.
    eFlightPhaseDescend = 4
    # Landing flight mode.
    eFlightPhaseLanding = 5
    # Rotary wing / hover flight mode
    eFlightPhaseVTOL = 6

AgEAvtrPhaseOfFlight.eFlightPhaseTakeoff.__doc__ = "Takeoff flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseClimb.__doc__ = "Forward flight climb flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseCruise.__doc__ = "Forward flight - cruise flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseDescend.__doc__ = "Forward flight descend flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseLanding.__doc__ = "Landing flight mode."
AgEAvtrPhaseOfFlight.eFlightPhaseVTOL.__doc__ = "Rotary wing / hover flight mode"

agcls.AgTypeNameMap["AgEAvtrPhaseOfFlight"] = AgEAvtrPhaseOfFlight

class AgEAvtrCruiseSpeed(IntEnum):
    """Cruise airspeed type for the procedure."""
    # Minimum airspeed.
    eMinAirspeed = 0
    # Maximum endurance airspeed.
    eMaxEnduranceAirspeed = 1
    # Maximum range airspeed.
    eMaxRangeAirspeed = 2
    # Other airspeed.
    eOtherAirspeed = 3
    # Maximum airspeed.
    eMaxAirspeed = 4
    # Maximum performance airspeed.
    eMaxPerfAirspeed = 6

AgEAvtrCruiseSpeed.eMinAirspeed.__doc__ = "Minimum airspeed."
AgEAvtrCruiseSpeed.eMaxEnduranceAirspeed.__doc__ = "Maximum endurance airspeed."
AgEAvtrCruiseSpeed.eMaxRangeAirspeed.__doc__ = "Maximum range airspeed."
AgEAvtrCruiseSpeed.eOtherAirspeed.__doc__ = "Other airspeed."
AgEAvtrCruiseSpeed.eMaxAirspeed.__doc__ = "Maximum airspeed."
AgEAvtrCruiseSpeed.eMaxPerfAirspeed.__doc__ = "Maximum performance airspeed."

agcls.AgTypeNameMap["AgEAvtrCruiseSpeed"] = AgEAvtrCruiseSpeed

class AgEAvtrTakeoffMode(IntEnum):
    """Takeoff procedure mode."""
    # Normal takeoff mode.
    eTakeoffNormal = 0
    # Fly to departure point takeoff mode.
    eTakeoffFlyToDeparturePoint = 1
    # Low transition takeoff.
    eTakeoffLowTransition = 2

AgEAvtrTakeoffMode.eTakeoffNormal.__doc__ = "Normal takeoff mode."
AgEAvtrTakeoffMode.eTakeoffFlyToDeparturePoint.__doc__ = "Fly to departure point takeoff mode."
AgEAvtrTakeoffMode.eTakeoffLowTransition.__doc__ = "Low transition takeoff."

agcls.AgTypeNameMap["AgEAvtrTakeoffMode"] = AgEAvtrTakeoffMode

class AgEAvtrApproachMode(IntEnum):
    """Landing procedure approach mode."""
    # Standard instrument approach mode.
    eStandardInstrumentApproach = 0
    # Intercept Glideslope approach mode.
    eInterceptGlideslope = 1
    # Enter downwind pattern approach mode.
    eEnterDownwindPattern = 2

AgEAvtrApproachMode.eStandardInstrumentApproach.__doc__ = "Standard instrument approach mode."
AgEAvtrApproachMode.eInterceptGlideslope.__doc__ = "Intercept Glideslope approach mode."
AgEAvtrApproachMode.eEnterDownwindPattern.__doc__ = "Enter downwind pattern approach mode."

agcls.AgTypeNameMap["AgEAvtrApproachMode"] = AgEAvtrApproachMode

class AgEAvtrNavigatorTurnDir(IntEnum):
    """Turn mode for procedures with Enroute Turn Direction options."""
    # Automatic turn. Aviator will determine the direction of the turn.
    eNavigatorTurnAuto = 0
    # Left turn.
    eNavigatorTurnLeft = 1
    # Right turn.
    eNavigatorTurnRight = 2

AgEAvtrNavigatorTurnDir.eNavigatorTurnAuto.__doc__ = "Automatic turn. Aviator will determine the direction of the turn."
AgEAvtrNavigatorTurnDir.eNavigatorTurnLeft.__doc__ = "Left turn."
AgEAvtrNavigatorTurnDir.eNavigatorTurnRight.__doc__ = "Right turn."

agcls.AgTypeNameMap["AgEAvtrNavigatorTurnDir"] = AgEAvtrNavigatorTurnDir

class AgEAvtrBasicManeuverFuelFlowType(IntEnum):
    """Fuel flow type for basic maneuver procedures."""
    # Fuel flow defined for the current Takeoff performance model.
    eBasicManeuverFuelFlowTakeoff = 0
    # Fuel flow defined for the current Cruise performance model.
    eBasicManeuverFuelFlowCruise = 1
    # Fuel flow defined for the current Landing performance model.
    eBasicManeuverFuelFlowLanding = 2
    # Fuel flow defined for the current VTOL performance model.
    eBasicManeuverFuelFlowVTOL = 3
    # Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model.
    eBasicManeuverFuelFlowAeroProp = 4
    # Fuel flow defined manually.
    eBasicManeuverFuelFlowOverride = 5
    # Fuel flow defined using the thrust model for this maneuver.
    eBasicManeuverFuelFlowThrustModel = 6

AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowTakeoff.__doc__ = "Fuel flow defined for the current Takeoff performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowCruise.__doc__ = "Fuel flow defined for the current Cruise performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowLanding.__doc__ = "Fuel flow defined for the current Landing performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowVTOL.__doc__ = "Fuel flow defined for the current VTOL performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowAeroProp.__doc__ = "Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowOverride.__doc__ = "Fuel flow defined manually."
AgEAvtrBasicManeuverFuelFlowType.eBasicManeuverFuelFlowThrustModel.__doc__ = "Fuel flow defined using the thrust model for this maneuver."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverFuelFlowType"] = AgEAvtrBasicManeuverFuelFlowType

class AgEAvtrBasicManeuverAltitudeLimit(IntEnum):
    """The type of response Aviator will have if the maneuver attempts to exceed the altitude limit."""
    # Error when altitude limit exceeded.
    eBasicManeuverAltLimitError = 0
    # Stop when altitude limit exceeded.
    eBasicManeuverAltLimitStop = 1
    # Continue when altitude limit exceeded.
    eBasicManeuverAltLimitContinue = 2

AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitError.__doc__ = "Error when altitude limit exceeded."
AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitStop.__doc__ = "Stop when altitude limit exceeded."
AgEAvtrBasicManeuverAltitudeLimit.eBasicManeuverAltLimitContinue.__doc__ = "Continue when altitude limit exceeded."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverAltitudeLimit"] = AgEAvtrBasicManeuverAltitudeLimit

class AgEAvtrRunwayHighLowEnd(IntEnum):
    """Runway heading that the aircraft will use."""
    # High end.
    eHighEnd = 0
    # Low end.
    eLowEnd = 1
    # Headwind.
    eHeadwind = 2

AgEAvtrRunwayHighLowEnd.eHighEnd.__doc__ = "High end."
AgEAvtrRunwayHighLowEnd.eLowEnd.__doc__ = "Low end."
AgEAvtrRunwayHighLowEnd.eHeadwind.__doc__ = "Headwind."

agcls.AgTypeNameMap["AgEAvtrRunwayHighLowEnd"] = AgEAvtrRunwayHighLowEnd

class AgEAvtrBasicManeuverRefFrame(IntEnum):
    """Reference frame for the basic maneuver strategy."""
    # Earth frame.
    eEarthFrame = 0
    # Wind frame.
    eWindFrame = 1

AgEAvtrBasicManeuverRefFrame.eEarthFrame.__doc__ = "Earth frame."
AgEAvtrBasicManeuverRefFrame.eWindFrame.__doc__ = "Wind frame."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverRefFrame"] = AgEAvtrBasicManeuverRefFrame

class AgEAvtrBasicManeuverStrategyNavControlLimit(IntEnum):
    """Method to define the control limits for the aircraft during the maneuver."""
    # Use Accel Perf Model.
    eNavUseAccelPerfModel = 0
    # Specify min turn radius.
    eNavMinTurnRadius = 1
    # Specify max turn rate.
    eNavMaxTurnRate = 2
    # Specify max horiz accel.
    eNavMaxHorizAccel = 3

AgEAvtrBasicManeuverStrategyNavControlLimit.eNavUseAccelPerfModel.__doc__ = "Use Accel Perf Model."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMinTurnRadius.__doc__ = "Specify min turn radius."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMaxTurnRate.__doc__ = "Specify max turn rate."
AgEAvtrBasicManeuverStrategyNavControlLimit.eNavMaxHorizAccel.__doc__ = "Specify max horiz accel."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategyNavControlLimit"] = AgEAvtrBasicManeuverStrategyNavControlLimit

class AgEAvtrAccelManeuverMode(IntEnum):
    """The mode that the aircraft will adhere to the specified acceleration parameters."""
    # Constant value (default).
    eAccelManeuverModeNormal = 0
    # Scale by amtmospheric density. The aircraft will consider dynamic pressure when calculating turn radius.
    eAccelManeuverModeDensityScale = 1
    # Aero/Prop maneuver mode.
    eAccelManeuverModeAeroProp = 2

AgEAvtrAccelManeuverMode.eAccelManeuverModeNormal.__doc__ = "Constant value (default)."
AgEAvtrAccelManeuverMode.eAccelManeuverModeDensityScale.__doc__ = "Scale by amtmospheric density. The aircraft will consider dynamic pressure when calculating turn radius."
AgEAvtrAccelManeuverMode.eAccelManeuverModeAeroProp.__doc__ = "Aero/Prop maneuver mode."

agcls.AgTypeNameMap["AgEAvtrAccelManeuverMode"] = AgEAvtrAccelManeuverMode

class AgEAvtrAircraftAeroStrategy(IntEnum):
    """The aerodynamic strategy used to compute lift, drag, angle of attack, sideslip and intermediate / derived values."""
    # Simple aerodynamics.
    eAircraftAeroSimple = 0
    # External file aerodynamics.
    eAircraftAeroExternalFile = 1
    # Basic fixed wing aerodynamics.
    eAircraftAeroBasicFixedWing = 2
    # Advanced missile aerodynamics.
    eAircraftAeroAdvancedMissile = 3

AgEAvtrAircraftAeroStrategy.eAircraftAeroSimple.__doc__ = "Simple aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroExternalFile.__doc__ = "External file aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroBasicFixedWing.__doc__ = "Basic fixed wing aerodynamics."
AgEAvtrAircraftAeroStrategy.eAircraftAeroAdvancedMissile.__doc__ = "Advanced missile aerodynamics."

agcls.AgTypeNameMap["AgEAvtrAircraftAeroStrategy"] = AgEAvtrAircraftAeroStrategy

class AgEAvtrAircraftPropStrategy(IntEnum):
    """The propulsion strategy used to compute thrust and throttle setting."""
    # Simple propulsion.
    eAircraftPropSimple = 0
    # External file propulsion.
    eAircraftPropExternalFile = 1
    # Basic fixed wing propulsion.
    eAircraftPropBasicFixedWing = 2
    # Missile - Ramjet propulsion.
    eAircraftPropMissileRamjet = 3
    # Missile - Rocket propulsion.
    eAircraftPropMissileRocket = 4
    # Missile - Turbojet propulsion.
    eAircraftPropMissileTurbojet = 5

AgEAvtrAircraftPropStrategy.eAircraftPropSimple.__doc__ = "Simple propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropExternalFile.__doc__ = "External file propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropBasicFixedWing.__doc__ = "Basic fixed wing propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileRamjet.__doc__ = "Missile - Ramjet propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileRocket.__doc__ = "Missile - Rocket propulsion."
AgEAvtrAircraftPropStrategy.eAircraftPropMissileTurbojet.__doc__ = "Missile - Turbojet propulsion."

agcls.AgTypeNameMap["AgEAvtrAircraftPropStrategy"] = AgEAvtrAircraftPropStrategy

class AgEAvtrAGLMSL(IntEnum):
    """The altitude mode."""
    # AGl altitude. ALtitude above local terrain
    eAltAGL = 0
    # MSL altitude. Altitude above sea level.
    eAltMSL = 1

AgEAvtrAGLMSL.eAltAGL.__doc__ = "AGl altitude. ALtitude above local terrain"
AgEAvtrAGLMSL.eAltMSL.__doc__ = "MSL altitude. Altitude above sea level."

agcls.AgTypeNameMap["AgEAvtrAGLMSL"] = AgEAvtrAGLMSL

class AgEAvtrLandingApproachFixRangeMode(IntEnum):
    """The reference point on the runway for the Approach Fix Range."""
    # Runway center.
    eRelToRunwayCenter = 0
    # Runway end.
    eRelToRunwayEnd = 1

AgEAvtrLandingApproachFixRangeMode.eRelToRunwayCenter.__doc__ = "Runway center."
AgEAvtrLandingApproachFixRangeMode.eRelToRunwayEnd.__doc__ = "Runway end."

agcls.AgTypeNameMap["AgEAvtrLandingApproachFixRangeMode"] = AgEAvtrLandingApproachFixRangeMode

class AgEAvtrAccelerationAdvAccelMode(IntEnum):
    """Acceleration mode for aircraft advanced acceleration models."""
    # Max acceleration.
    eAccelModeMaxAccel = 0
    # Manually override the acceleration.
    eAccelModeOverrideAccel = 1

AgEAvtrAccelerationAdvAccelMode.eAccelModeMaxAccel.__doc__ = "Max acceleration."
AgEAvtrAccelerationAdvAccelMode.eAccelModeOverrideAccel.__doc__ = "Manually override the acceleration."

agcls.AgTypeNameMap["AgEAvtrAccelerationAdvAccelMode"] = AgEAvtrAccelerationAdvAccelMode

class AgEAvtrAccelManeuverAeroPropMode(IntEnum):
    """The mode used for the Aero/Prop maneuver mode helper for aircraft basic acceleration models."""
    # Use Thrust and Lift Coefficient
    eUseThrustAndLiftCoefficient = 0
    # Use Lift Coefficient only.
    eUseLiftCoefficientOnly = 1

AgEAvtrAccelManeuverAeroPropMode.eUseThrustAndLiftCoefficient.__doc__ = "Use Thrust and Lift Coefficient"
AgEAvtrAccelManeuverAeroPropMode.eUseLiftCoefficientOnly.__doc__ = "Use Lift Coefficient only."

agcls.AgTypeNameMap["AgEAvtrAccelManeuverAeroPropMode"] = AgEAvtrAccelManeuverAeroPropMode

class AgEAvtrBasicManeuverStrategyAirspeedPerfLimits(IntEnum):
    """The type of response Aviator will have if the basic maneuver attempts to exceed the airspeed limit."""
    # Constrain the aircraft to not exceed the airspeed limit.
    eConstrainIfViolated = 0
    # Stop when airspeed limit exceeded..
    eStopIfViolated = 1
    # Error when airspeed limit exceeded.
    eErrorIfViolated = 2
    # Ignore when airspeed limit exceeded.
    eIgnoreIfViolated = 3

AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eConstrainIfViolated.__doc__ = "Constrain the aircraft to not exceed the airspeed limit."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eStopIfViolated.__doc__ = "Stop when airspeed limit exceeded.."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eErrorIfViolated.__doc__ = "Error when airspeed limit exceeded."
AgEAvtrBasicManeuverStrategyAirspeedPerfLimits.eIgnoreIfViolated.__doc__ = "Ignore when airspeed limit exceeded."

agcls.AgTypeNameMap["AgEAvtrBasicManeuverStrategyAirspeedPerfLimits"] = AgEAvtrBasicManeuverStrategyAirspeedPerfLimits

class AgEAvtrTurnMode(IntEnum):
    """The mode to specify an aircraft's level turn performance for acceleration performance models."""
    # Turn G. The standard G force of the aircraft in a turn.
    eTurnModeTurnG = 0
    # Bank angle.
    eTurnModeBankAngle = 1
    # Turn acceleration.
    eTurnModeAccel = 2
    # Turn radius.
    eTurnModeRadius = 3
    # Turn rate.
    eTurnModeRate = 4

AgEAvtrTurnMode.eTurnModeTurnG.__doc__ = "Turn G. The standard G force of the aircraft in a turn."
AgEAvtrTurnMode.eTurnModeBankAngle.__doc__ = "Bank angle."
AgEAvtrTurnMode.eTurnModeAccel.__doc__ = "Turn acceleration."
AgEAvtrTurnMode.eTurnModeRadius.__doc__ = "Turn radius."
AgEAvtrTurnMode.eTurnModeRate.__doc__ = "Turn rate."

agcls.AgTypeNameMap["AgEAvtrTurnMode"] = AgEAvtrTurnMode

class AgEAvtrPointToPointMode(IntEnum):
    """The heading or course of the aircraft at the beginning of the procedure."""
    # Fly direct.
    eFlyDirect = 0
    # Arrive on course for next procedure.
    eArriveOnCourseForNext = 1
    # Arrive on course.
    eArriveOnCourse = 2
    # Inscribed turn.
    eInscribedTurn = 3
    # Arrive on heading into wind.
    eArriveOnHdgIntoWind = 4

AgEAvtrPointToPointMode.eFlyDirect.__doc__ = "Fly direct."
AgEAvtrPointToPointMode.eArriveOnCourseForNext.__doc__ = "Arrive on course for next procedure."
AgEAvtrPointToPointMode.eArriveOnCourse.__doc__ = "Arrive on course."
AgEAvtrPointToPointMode.eInscribedTurn.__doc__ = "Inscribed turn."
AgEAvtrPointToPointMode.eArriveOnHdgIntoWind.__doc__ = "Arrive on heading into wind."

agcls.AgTypeNameMap["AgEAvtrPointToPointMode"] = AgEAvtrPointToPointMode

class AgEAvtrAltitudeConstraintManeuverMode(IntEnum):
    """Turn mode for procedures that may require a level off maneuver."""
    # Automatic turn.Aviator will determine the direction of the turn.
    eLevelOffAutomaticManeuver = 0
    # Left turn.
    eLevelOffLeftTurnManeuver = 1
    # Right turn.
    eLevelOffRightTurnManeuver = 2
    # No turn. A level off maneuver will not be performed.
    eLevelOffNoManeuver = 3

AgEAvtrAltitudeConstraintManeuverMode.eLevelOffAutomaticManeuver.__doc__ = "Automatic turn.Aviator will determine the direction of the turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffLeftTurnManeuver.__doc__ = "Left turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffRightTurnManeuver.__doc__ = "Right turn."
AgEAvtrAltitudeConstraintManeuverMode.eLevelOffNoManeuver.__doc__ = "No turn. A level off maneuver will not be performed."

agcls.AgTypeNameMap["AgEAvtrAltitudeConstraintManeuverMode"] = AgEAvtrAltitudeConstraintManeuverMode

class AgEAvtrWindModelType(IntEnum):
    """The wind model type."""
    # Constant Wind/Speed.
    eConstantWind = 0
    # NOAA ADDS Service.
    eADDS = 1
    # Disabled wind model.
    eDisabled = 2

AgEAvtrWindModelType.eConstantWind.__doc__ = "Constant Wind/Speed."
AgEAvtrWindModelType.eADDS.__doc__ = "NOAA ADDS Service."
AgEAvtrWindModelType.eDisabled.__doc__ = "Disabled wind model."

agcls.AgTypeNameMap["AgEAvtrWindModelType"] = AgEAvtrWindModelType

class AgEAvtrWindAtmosModelSource(IntEnum):
    """The source for the wind or atmosphere model."""
    # Scenario Model.
    eScenarioModel = 0
    # Mission Model.
    eMissionModel = 1
    # Procedure Model.
    eProcedureModel = 2

AgEAvtrWindAtmosModelSource.eScenarioModel.__doc__ = "Scenario Model."
AgEAvtrWindAtmosModelSource.eMissionModel.__doc__ = "Mission Model."
AgEAvtrWindAtmosModelSource.eProcedureModel.__doc__ = "Procedure Model."

agcls.AgTypeNameMap["AgEAvtrWindAtmosModelSource"] = AgEAvtrWindAtmosModelSource

class AgEAvtrADDSMsgInterpType(IntEnum):
    """The interpolation method for the wind conditions."""
    # One Point Interpolation.
    eInterpOnePoint = 0
    # Two Point Interpolation.
    eInterpTwoPoint = 1

AgEAvtrADDSMsgInterpType.eInterpOnePoint.__doc__ = "One Point Interpolation."
AgEAvtrADDSMsgInterpType.eInterpTwoPoint.__doc__ = "Two Point Interpolation."

agcls.AgTypeNameMap["AgEAvtrADDSMsgInterpType"] = AgEAvtrADDSMsgInterpType

class AgEAvtrADDSMissingMsgType(IntEnum):
    """The wind effect to apply if there is an interval gap between messages."""
    # Zero Wind.
    eMissingMsgZeroWind = 0
    # Interpolate End Points.
    eMissingMsgInterpEndPoints = 1

AgEAvtrADDSMissingMsgType.eMissingMsgZeroWind.__doc__ = "Zero Wind."
AgEAvtrADDSMissingMsgType.eMissingMsgInterpEndPoints.__doc__ = "Interpolate End Points."

agcls.AgTypeNameMap["AgEAvtrADDSMissingMsgType"] = AgEAvtrADDSMissingMsgType

class AgEAvtrADDSMsgExtrapType(IntEnum):
    """The wind effect to apply if the procedure(s) extend beyond the intervals of any available messages."""
    # Zero Wind.
    eExtrapMsgZeroWind = 0
    # Hold End Point Wind.
    eExtrapMsgHoldEndPoints = 1

AgEAvtrADDSMsgExtrapType.eExtrapMsgZeroWind.__doc__ = "Zero Wind."
AgEAvtrADDSMsgExtrapType.eExtrapMsgHoldEndPoints.__doc__ = "Hold End Point Wind."

agcls.AgTypeNameMap["AgEAvtrADDSMsgExtrapType"] = AgEAvtrADDSMsgExtrapType

class AgEAvtrADDSForecastType(IntEnum):
    """The forecast type for the NOAA ADDS message."""
    # 6 hour forecast
    e6Hour = 0
    # 12 hour forecast
    e12Hour = 1
    # 24 hour forecast
    e24Hour = 2

AgEAvtrADDSForecastType.e6Hour.__doc__ = "6 hour forecast"
AgEAvtrADDSForecastType.e12Hour.__doc__ = "12 hour forecast"
AgEAvtrADDSForecastType.e24Hour.__doc__ = "24 hour forecast"

agcls.AgTypeNameMap["AgEAvtrADDSForecastType"] = AgEAvtrADDSForecastType

class AgEAvtrAtmosphereModel(IntEnum):
    """The basic atmosphere model type."""
    # 1976 U.S. Standard Atmosphere
    eStandard1976 = 0
    # U.S. MIL HDBK 310 - Hot
    eMILHot = 1
    # U.S. MIL HDBK 310 - Cold
    eMILCold = 2
    # U.S. MIL HDBK 310 - Low Density
    eMILLowDensity = 3
    # U.S. MIL HDBK 310 - High Density
    eMILHighDensity = 4
    # Interpolate MIL HDBK 310 Data
    eMILInterpolate = 5

AgEAvtrAtmosphereModel.eStandard1976.__doc__ = "1976 U.S. Standard Atmosphere"
AgEAvtrAtmosphereModel.eMILHot.__doc__ = "U.S. MIL HDBK 310 - Hot"
AgEAvtrAtmosphereModel.eMILCold.__doc__ = "U.S. MIL HDBK 310 - Cold"
AgEAvtrAtmosphereModel.eMILLowDensity.__doc__ = "U.S. MIL HDBK 310 - Low Density"
AgEAvtrAtmosphereModel.eMILHighDensity.__doc__ = "U.S. MIL HDBK 310 - High Density"
AgEAvtrAtmosphereModel.eMILInterpolate.__doc__ = "Interpolate MIL HDBK 310 Data"

agcls.AgTypeNameMap["AgEAvtrAtmosphereModel"] = AgEAvtrAtmosphereModel

class AgEAvtrSmoothTurnMode(IntEnum):
    """The basic maneuver smooth turn mode."""
    # Specify the load factor of the smooth turn
    eSmoothTurnLoadFactor = 0
    # Specify the roll angle of the smooth turn
    eSmoothTurnRollAngle = 1

AgEAvtrSmoothTurnMode.eSmoothTurnLoadFactor.__doc__ = "Specify the load factor of the smooth turn"
AgEAvtrSmoothTurnMode.eSmoothTurnRollAngle.__doc__ = "Specify the roll angle of the smooth turn"

agcls.AgTypeNameMap["AgEAvtrSmoothTurnMode"] = AgEAvtrSmoothTurnMode

class AgEAvtrPerfModelOverride(IntEnum):
    """The performance model override mode."""
    # Use the performance model value
    ePerfModelValue = 0
    # Override the performance model value
    eOverride = 1

AgEAvtrPerfModelOverride.ePerfModelValue.__doc__ = "Use the performance model value"
AgEAvtrPerfModelOverride.eOverride.__doc__ = "Override the performance model value"

agcls.AgTypeNameMap["AgEAvtrPerfModelOverride"] = AgEAvtrPerfModelOverride

class AgEAvtrBasicManeuverAirspeedMode(IntEnum):
    """The basic maneuver airspeed mode."""
    # Maintain the current airspeed
    eMaintainCurrentAirspeed = 0
    # Maintain the specified airspeed
    eMaintainSpecifiedAirspeed = 1
    # Maintain the minimum airspeed for the aircraft
    eMaintainMinAirspeed = 2
    # Maintain the maximum endurance airspeed for the aircraft
    eMaintainMaxEnduranceAirspeed = 3
    # Maintain the maximum range airspeed for the aircraft
    eMaintainMaxRangeAirspeed = 4
    # Maintain the maximum airspeed for the aircraft
    eMaintainMaxAirspeed = 5
    # Maintain the maximum performance airspeed for the aircraft
    eMaintainMaxPerformanceAirspeed = 6
    # Accelerate at the specified rate
    eAccelAtG = 7
    # Decelerate at the specified rate
    eDecelAtG = 8
    # Accel/Decel at the force of gravity (no drag, no thrust)
    eAccelDecelUnderGravity = 9
    # Accel/Decel using Aero/Propulsion with throttle setting
    eAccelDecelAeroProp = 10
    # Specify thrust (using drag from Aerodynamics model)
    eThrust = 11
    # Interpolate Accelerate/Decelerate over interval
    eInterpolateAccelDecel = 12

AgEAvtrBasicManeuverAirspeedMode.eMaintainCurrentAirspeed.__doc__ = "Maintain the current airspeed"
AgEAvtrBasicManeuverAirspeedMode.eMaintainSpecifiedAirspeed.__doc__ = "Maintain the specified airspeed"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMinAirspeed.__doc__ = "Maintain the minimum airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxEnduranceAirspeed.__doc__ = "Maintain the maximum endurance airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxRangeAirspeed.__doc__ = "Maintain the maximum range airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxAirspeed.__doc__ = "Maintain the maximum airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eMaintainMaxPerformanceAirspeed.__doc__ = "Maintain the maximum performance airspeed for the aircraft"
AgEAvtrBasicManeuverAirspeedMode.eAccelAtG.__doc__ = "Accelerate at the specified rate"
AgEAvtrBasicManeuverAirspeedMode.eDecelAtG.__doc__ = "Decelerate at the specified rate"
AgEAvtrBasicManeuverAirspeedMode.eAccelDecelUnderGravity.__doc__ = "Accel/Decel at the force of gravity (no drag, no thrust)"
AgEAvtrBasicManeuverAirspeedMode.eAccelDecelAeroProp.__doc__ = "Accel/Decel using Aero/Propulsion with throttle setting"
AgEAvtrBasicManeuverAirspeedMode.eThrust.__doc__ = "Specify thrust (using drag from Aerodynamics model)"
AgEAvtrBasicManeuverAirspeedMode.eInterpolateAccelDecel.__doc__ = "Interpolate Accelerate/Decelerate over interval"

agcls.AgTypeNameMap["AgEAvtrBasicManeuverAirspeedMode"] = AgEAvtrBasicManeuverAirspeedMode

class AgEAvtrAileronRollFlightPath(IntEnum):
    """The flight path option for an aileron roll strategy for a basic maneuver procedure."""
    # Fly a straight line flight path
    eStraightLineFlightPath = 0
    # Fly a zero G flight path
    eZeroGFlightPath = 1

AgEAvtrAileronRollFlightPath.eStraightLineFlightPath.__doc__ = "Fly a straight line flight path"
AgEAvtrAileronRollFlightPath.eZeroGFlightPath.__doc__ = "Fly a zero G flight path"

agcls.AgTypeNameMap["AgEAvtrAileronRollFlightPath"] = AgEAvtrAileronRollFlightPath

class AgEAvtrRollLeftRight(IntEnum):
    """The roll direction for an aileron roll strategy for a basic maneuver procedure."""
    # Roll left
    eRollLeft = 0
    # Roll right
    eRollRight = 1

AgEAvtrRollLeftRight.eRollLeft.__doc__ = "Roll left"
AgEAvtrRollLeftRight.eRollRight.__doc__ = "Roll right"

agcls.AgTypeNameMap["AgEAvtrRollLeftRight"] = AgEAvtrRollLeftRight

class AgEAvtrRollUprightInverted(IntEnum):
    """The orientation for an aileron roll strategy for a basic maneuver procedure."""
    # Upright roll
    eRollUpright = 0
    # Inverted roll
    eRollInverted = 1

AgEAvtrRollUprightInverted.eRollUpright.__doc__ = "Upright roll"
AgEAvtrRollUprightInverted.eRollInverted.__doc__ = "Inverted roll"

agcls.AgTypeNameMap["AgEAvtrRollUprightInverted"] = AgEAvtrRollUprightInverted

class AgEAvtrAileronRollMode(IntEnum):
    """The roll mode aileron roll strategy for a basic maneuver procedure."""
    # Specify the angle to roll
    eRollToAngle = 0
    # Specify the orientation to roll to
    eRollToOrientation = 1

AgEAvtrAileronRollMode.eRollToAngle.__doc__ = "Specify the angle to roll"
AgEAvtrAileronRollMode.eRollToOrientation.__doc__ = "Specify the orientation to roll to"

agcls.AgTypeNameMap["AgEAvtrAileronRollMode"] = AgEAvtrAileronRollMode

class AgEAvtrFlyAOALeftRight(IntEnum):
    """The roll direction for a Fly AOA strategy for a basic maneuver procedure."""
    # Roll left
    eFlyAOALeft = 0
    # Roll right
    eFlyAOARight = 1
    # No roll
    eFlyAOANoRoll = 2

AgEAvtrFlyAOALeftRight.eFlyAOALeft.__doc__ = "Roll left"
AgEAvtrFlyAOALeftRight.eFlyAOARight.__doc__ = "Roll right"
AgEAvtrFlyAOALeftRight.eFlyAOANoRoll.__doc__ = "No roll"

agcls.AgTypeNameMap["AgEAvtrFlyAOALeftRight"] = AgEAvtrFlyAOALeftRight

class AgEAvtrSmoothAccelLeftRight(IntEnum):
    """The roll direction for a smooth acceleration strategy for a basic maneuver procedure."""
    # Roll left
    eSmoothAccelLeft = 0
    # Roll right
    eSmoothAccelRight = 1
    # No roll
    eSmoothAccelNoRoll = 2

AgEAvtrSmoothAccelLeftRight.eSmoothAccelLeft.__doc__ = "Roll left"
AgEAvtrSmoothAccelLeftRight.eSmoothAccelRight.__doc__ = "Roll right"
AgEAvtrSmoothAccelLeftRight.eSmoothAccelNoRoll.__doc__ = "No roll"

agcls.AgTypeNameMap["AgEAvtrSmoothAccelLeftRight"] = AgEAvtrSmoothAccelLeftRight

class AgEAvtrPullMode(IntEnum):
    """The pull mode for a pull strategy of a basic maneuver procedure."""
    # Pull to the specified angle
    ePullToAngle = 0
    # Pull to the horizon plus the additional angle
    ePullToHorizon = 1

AgEAvtrPullMode.ePullToAngle.__doc__ = "Pull to the specified angle"
AgEAvtrPullMode.ePullToHorizon.__doc__ = "Pull to the horizon plus the additional angle"

agcls.AgTypeNameMap["AgEAvtrPullMode"] = AgEAvtrPullMode

class AgEAvtrRollingPullMode(IntEnum):
    """The rolling pull mode for a rolling pull strategy of a basic maneuver procedure."""
    # Roll to the specified angle
    eRollToAngleMode = 0
    # Roll to the specified orientaiton plus additional angle
    eRollToOrientationMode = 1
    # Pull to the specified angle
    ePullToAngleMode = 2
    # Pull to the horizon plus the additional angle
    ePullToHorizonMode = 3

AgEAvtrRollingPullMode.eRollToAngleMode.__doc__ = "Roll to the specified angle"
AgEAvtrRollingPullMode.eRollToOrientationMode.__doc__ = "Roll to the specified orientaiton plus additional angle"
AgEAvtrRollingPullMode.ePullToAngleMode.__doc__ = "Pull to the specified angle"
AgEAvtrRollingPullMode.ePullToHorizonMode.__doc__ = "Pull to the horizon plus the additional angle"

agcls.AgTypeNameMap["AgEAvtrRollingPullMode"] = AgEAvtrRollingPullMode

class AgEAvtrSmoothAccelStopConditions(IntEnum):
    """The rolling pull mode for a rolling pull strategy of a basic maneuver procedure."""
    # Roll rate and load factor rate achieved
    eRollRateANDLoadFactor = 0
    # Roll rate or load factor rate achieved
    eRollRateORLoadFactor = 1
    # Basic stop conditions
    eSmoothAccelNormalStopConditions = 2

AgEAvtrSmoothAccelStopConditions.eRollRateANDLoadFactor.__doc__ = "Roll rate and load factor rate achieved"
AgEAvtrSmoothAccelStopConditions.eRollRateORLoadFactor.__doc__ = "Roll rate or load factor rate achieved"
AgEAvtrSmoothAccelStopConditions.eSmoothAccelNormalStopConditions.__doc__ = "Basic stop conditions"

agcls.AgTypeNameMap["AgEAvtrSmoothAccelStopConditions"] = AgEAvtrSmoothAccelStopConditions

class AgEAvtrAutopilotHorizPlaneMode(IntEnum):
    """The autopilot mode for an autopilot - horizontal plane strategy of a basic maneuver procedure."""
    # The absolute heading mode
    eAutopilotAbsoluteHeading = 0
    # The absolute course mode
    eAutopilotAbsoluteCourse = 1
    # The relative heading change mode
    eAutopilotRelativeHeading = 2
    # The relative course change mode
    eAutopilotRelativeCourse = 3
    # The set heading rate mode
    eAutopilotHeadingRate = 4
    # The set heading rate  mode
    eAutopilotCourseRate = 5

AgEAvtrAutopilotHorizPlaneMode.eAutopilotAbsoluteHeading.__doc__ = "The absolute heading mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotAbsoluteCourse.__doc__ = "The absolute course mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotRelativeHeading.__doc__ = "The relative heading change mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotRelativeCourse.__doc__ = "The relative course change mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotHeadingRate.__doc__ = "The set heading rate mode"
AgEAvtrAutopilotHorizPlaneMode.eAutopilotCourseRate.__doc__ = "The set heading rate  mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotHorizPlaneMode"] = AgEAvtrAutopilotHorizPlaneMode

class AgEAvtrAngleMode(IntEnum):
    """The angle mode for a barrel roll strategy of a basic maneuver procedure."""
    # The absolute angle option
    eRelativeAngle = 0
    # The relative angle option
    eAbsoluteAngle = 1

AgEAvtrAngleMode.eRelativeAngle.__doc__ = "The absolute angle option"
AgEAvtrAngleMode.eAbsoluteAngle.__doc__ = "The relative angle option"

agcls.AgTypeNameMap["AgEAvtrAngleMode"] = AgEAvtrAngleMode

class AgEAvtrHoverAltitudeMode(IntEnum):
    """The altitude mode for the lighter than air hover strategy of a basic maneuver procedure."""
    # The hold initial altitude mode
    eHoverHoldInitAltitude = 0
    # The specify altitude mode
    eHoverSpecifyAltitude = 1
    # The specify altitude change mode
    eHoverSpecifyAltitudeChange = 2
    # The specify altitude rate mode
    eHoverSpecifyAltitudeRate = 3
    # The hold initial altitude rate mode
    eHoverHoldInitAltitudeRate = 4
    # The parachute mode
    eHoverParachute = 5

AgEAvtrHoverAltitudeMode.eHoverHoldInitAltitude.__doc__ = "The hold initial altitude mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitude.__doc__ = "The specify altitude mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitudeChange.__doc__ = "The specify altitude change mode"
AgEAvtrHoverAltitudeMode.eHoverSpecifyAltitudeRate.__doc__ = "The specify altitude rate mode"
AgEAvtrHoverAltitudeMode.eHoverHoldInitAltitudeRate.__doc__ = "The hold initial altitude rate mode"
AgEAvtrHoverAltitudeMode.eHoverParachute.__doc__ = "The parachute mode"

agcls.AgTypeNameMap["AgEAvtrHoverAltitudeMode"] = AgEAvtrHoverAltitudeMode

class AgEAvtrHoverHeadingMode(IntEnum):
    """The heading mode for the lighter than air hover strategy of a basic maneuver procedure."""
    # The relative to start heading mode
    eHoverRelative = 0
    # The absolute heading mode
    eHoverAbsolute = 1
    # The align into wind heading mode
    eHoverIntoWind = 2
    # The align opposite wind heading mode
    eHoverOppositeWind = 3

AgEAvtrHoverHeadingMode.eHoverRelative.__doc__ = "The relative to start heading mode"
AgEAvtrHoverHeadingMode.eHoverAbsolute.__doc__ = "The absolute heading mode"
AgEAvtrHoverHeadingMode.eHoverIntoWind.__doc__ = "The align into wind heading mode"
AgEAvtrHoverHeadingMode.eHoverOppositeWind.__doc__ = "The align opposite wind heading mode"

agcls.AgTypeNameMap["AgEAvtrHoverHeadingMode"] = AgEAvtrHoverHeadingMode

class AgEAvtrAutopilotAltitudeMode(IntEnum):
    """The altitude mode for the autopilot - vertical plane strategy of a basic maneuver procedure."""
    # The hold initial altitude mode
    eAutopilotHoldInitAltitude = 0
    # The specify altitude mode
    eAutopilotSpecifyAltitude = 1
    # The specify altitude change mode
    eAutopilotSpecifyAltitudeChange = 2
    # The specify altitude rate mode
    eAutopilotSpecifyAltitudeRate = 3
    # The hold initial altitude rate mode
    eAutopilotHoldInitAltitudeRate = 4
    # The specify wind fram eflight path angle mode
    eAutopilotSpecifyFPA = 5
    # The hold initial wind frame flight path angle mode
    eAutopilotHoldInitFPA = 6
    # The ballistic flight path mode
    eAutopilotBallistic = 7

AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitAltitude.__doc__ = "The hold initial altitude mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitude.__doc__ = "The specify altitude mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitudeChange.__doc__ = "The specify altitude change mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyAltitudeRate.__doc__ = "The specify altitude rate mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitAltitudeRate.__doc__ = "The hold initial altitude rate mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotSpecifyFPA.__doc__ = "The specify wind fram eflight path angle mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotHoldInitFPA.__doc__ = "The hold initial wind frame flight path angle mode"
AgEAvtrAutopilotAltitudeMode.eAutopilotBallistic.__doc__ = "The ballistic flight path mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotAltitudeMode"] = AgEAvtrAutopilotAltitudeMode

class AgEAvtrAutopilotAltitudeControlMode(IntEnum):
    """The altitude control mode for the autopilot - vertical plane strategy of a basic maneuver procedure."""
    # The control altitude rate mode
    eAutopilotAltitudeRate = 0
    # The control flight path angle mode
    eAutopilotFPA = 1
    # The climb/descent performance models mode
    eAutopilotPerfModels = 2

AgEAvtrAutopilotAltitudeControlMode.eAutopilotAltitudeRate.__doc__ = "The control altitude rate mode"
AgEAvtrAutopilotAltitudeControlMode.eAutopilotFPA.__doc__ = "The control flight path angle mode"
AgEAvtrAutopilotAltitudeControlMode.eAutopilotPerfModels.__doc__ = "The climb/descent performance models mode"

agcls.AgTypeNameMap["AgEAvtrAutopilotAltitudeControlMode"] = AgEAvtrAutopilotAltitudeControlMode

class AgEAvtrClosureMode(IntEnum):
    """The closure mode for guidance strategies of the basic maneuver procedure."""
    # The closure is not set. The maneuver will continue whether or not the aircraft is closing with the target
    eClosureNotSet = 0
    # The closure is required
    eClosureRequired = 1
    # The high off boresight mode
    eHOBS = 2

AgEAvtrClosureMode.eClosureNotSet.__doc__ = "The closure is not set. The maneuver will continue whether or not the aircraft is closing with the target"
AgEAvtrClosureMode.eClosureRequired.__doc__ = "The closure is required"
AgEAvtrClosureMode.eHOBS.__doc__ = "The high off boresight mode"

agcls.AgTypeNameMap["AgEAvtrClosureMode"] = AgEAvtrClosureMode

class AgEAvtrInterceptMode(IntEnum):
    """The intercept mode for the intercept strategy of the basic maneuver procedure."""
    # The target aspect mode. The aircraft will maintain an approach angle with the target.
    eTargetAspect = 0
    # The lateral separation mode. The aircraft will guide to a specific distance from the target
    eLateralSeparation = 1

AgEAvtrInterceptMode.eTargetAspect.__doc__ = "The target aspect mode. The aircraft will maintain an approach angle with the target."
AgEAvtrInterceptMode.eLateralSeparation.__doc__ = "The lateral separation mode. The aircraft will guide to a specific distance from the target"

agcls.AgTypeNameMap["AgEAvtrInterceptMode"] = AgEAvtrInterceptMode

class AgEAvtrRendezvousStopCondition(IntEnum):
    """The stop condition options for a rendezvous formation strategy of the basic maneuver procedure."""
    # The basic stopping conditions will be used.
    eStopNormal = 0
    # Stop after the target completes the current procedure.
    eStopAfterTargetCurrentProcedure = 1
    # Stop after the target completes the current phase.
    eStopAfterTargetCurrentPhase = 2
    # Stop when the target enters a new mode of flight.
    eStopWhenTargetPerfModeChanges = 3
    # Stop when the target enters a new performance phase.
    eStopWhenTargetPhaseOfFlightChanges = 4

AgEAvtrRendezvousStopCondition.eStopNormal.__doc__ = "The basic stopping conditions will be used."
AgEAvtrRendezvousStopCondition.eStopAfterTargetCurrentProcedure.__doc__ = "Stop after the target completes the current procedure."
AgEAvtrRendezvousStopCondition.eStopAfterTargetCurrentPhase.__doc__ = "Stop after the target completes the current phase."
AgEAvtrRendezvousStopCondition.eStopWhenTargetPerfModeChanges.__doc__ = "Stop when the target enters a new mode of flight."
AgEAvtrRendezvousStopCondition.eStopWhenTargetPhaseOfFlightChanges.__doc__ = "Stop when the target enters a new performance phase."

agcls.AgTypeNameMap["AgEAvtrRendezvousStopCondition"] = AgEAvtrRendezvousStopCondition

class AgEAvtrAccelPerfModelOverride(IntEnum):
    """The acceleration performance model override mode."""
    # Use the acceleration performanc model value.
    eAccelPerfModelValue = 0
    # Override the performanc model value.
    eAccelOverride = 1
    # Set no limit on the acceleration.
    eAccelNoLimit = 2

AgEAvtrAccelPerfModelOverride.eAccelPerfModelValue.__doc__ = "Use the acceleration performanc model value."
AgEAvtrAccelPerfModelOverride.eAccelOverride.__doc__ = "Override the performanc model value."
AgEAvtrAccelPerfModelOverride.eAccelNoLimit.__doc__ = "Set no limit on the acceleration."

agcls.AgTypeNameMap["AgEAvtrAccelPerfModelOverride"] = AgEAvtrAccelPerfModelOverride

class AgEAvtrStationkeepingStopCondition(IntEnum):
    """The stop condition options for a stationkeeping strategy."""
    # The basic stopping conditions will be used.
    eStopConditionNotSet = 0
    # Stop after a specified number of turns.
    eStopAfterTurnCount = 1
    # Stop after a specified duration.
    eStopAfterDuration = 2
    # Stop at the specified time.
    eStopAfterTime = 3

AgEAvtrStationkeepingStopCondition.eStopConditionNotSet.__doc__ = "The basic stopping conditions will be used."
AgEAvtrStationkeepingStopCondition.eStopAfterTurnCount.__doc__ = "Stop after a specified number of turns."
AgEAvtrStationkeepingStopCondition.eStopAfterDuration.__doc__ = "Stop after a specified duration."
AgEAvtrStationkeepingStopCondition.eStopAfterTime.__doc__ = "Stop at the specified time."

agcls.AgTypeNameMap["AgEAvtrStationkeepingStopCondition"] = AgEAvtrStationkeepingStopCondition

class AgEAvtrTurnDirection(IntEnum):
    """The roll direction for an aileron roll strategy for a basic maneuver procedure."""
    # Turn left
    eTurnLeft = 0
    # Turn right
    eTurnRight = 2

AgEAvtrTurnDirection.eTurnLeft.__doc__ = "Turn left"
AgEAvtrTurnDirection.eTurnRight.__doc__ = "Turn right"

agcls.AgTypeNameMap["AgEAvtrTurnDirection"] = AgEAvtrTurnDirection

class AgEAvtrProfileControlLimit(IntEnum):
    """Method to define the control limits for a profile strategy of a basic maneuver procedure."""
    # Use Accel Perf Model
    eProfileAccelPerfModel = 0
    # Specify the pitch rate
    eProfilePitchRate = 1

AgEAvtrProfileControlLimit.eProfileAccelPerfModel.__doc__ = "Use Accel Perf Model"
AgEAvtrProfileControlLimit.eProfilePitchRate.__doc__ = "Specify the pitch rate"

agcls.AgTypeNameMap["AgEAvtrProfileControlLimit"] = AgEAvtrProfileControlLimit

class AgEAvtrRelSpeedAltStopCondition(IntEnum):
    """The stop condition options for a relative speed/altitude strategy."""
    # The basic stopping conditions will be used.
    eRelSpeedAltStopNormal = 0
    # Stop when the aircraft achieves the range for equal speed.
    eRelSpeedAltStopMinRangeForEqualSpeed = 1
    # Stop when the aircraft achieves the range to transition speed.
    eRelSpeedAltStopTransitionSpeedRange = 2
    # Stop after the target completes the current procedure.
    eRelSpeedAltStopAfterTargetCurrentProcedure = 3
    # Stop after the target completes the current phase.
    eRelSpeedAltStopAfterTargetCurrentPhase = 4
    # Stop when the target enters a new mode of flight.
    eRelSpeedAltStopWhenTargetPerfModeChanges = 5
    # Stop when the target enters a new performance phase.
    eRelSpeedAltStopWhenTargetPhaseOfFlightChanges = 6

AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopNormal.__doc__ = "The basic stopping conditions will be used."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopMinRangeForEqualSpeed.__doc__ = "Stop when the aircraft achieves the range for equal speed."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopTransitionSpeedRange.__doc__ = "Stop when the aircraft achieves the range to transition speed."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopAfterTargetCurrentProcedure.__doc__ = "Stop after the target completes the current procedure."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopAfterTargetCurrentPhase.__doc__ = "Stop after the target completes the current phase."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopWhenTargetPerfModeChanges.__doc__ = "Stop when the target enters a new mode of flight."
AgEAvtrRelSpeedAltStopCondition.eRelSpeedAltStopWhenTargetPhaseOfFlightChanges.__doc__ = "Stop when the target enters a new performance phase."

agcls.AgTypeNameMap["AgEAvtrRelSpeedAltStopCondition"] = AgEAvtrRelSpeedAltStopCondition

class AgEAvtrRelativeAltitudeMode(IntEnum):
    """The relative altitude mode for a relative speed/altitude strategy."""
    # Maintain the specified altitude offset from the target.
    eHoldOffsetAlt = 0
    # Maintain the altitude offset at the beginning of the maneuver.
    eHoldInitAltOffset = 1
    # Maintain the specified elevation angle from the target.
    eHoldElevationAngle = 2
    # Maintain the elevation angle at the beginning of the maneuver.
    eHoldInitElevationAngle = 3

AgEAvtrRelativeAltitudeMode.eHoldOffsetAlt.__doc__ = "Maintain the specified altitude offset from the target."
AgEAvtrRelativeAltitudeMode.eHoldInitAltOffset.__doc__ = "Maintain the altitude offset at the beginning of the maneuver."
AgEAvtrRelativeAltitudeMode.eHoldElevationAngle.__doc__ = "Maintain the specified elevation angle from the target."
AgEAvtrRelativeAltitudeMode.eHoldInitElevationAngle.__doc__ = "Maintain the elevation angle at the beginning of the maneuver."

agcls.AgTypeNameMap["AgEAvtrRelativeAltitudeMode"] = AgEAvtrRelativeAltitudeMode

class AgEAvtrFlyToFlightPathAngleMode(IntEnum):
    """The flight path angle mode mode for a bezier profile strategy."""
    # Fly to a specified altitude rate.
    eFlyToAltRate = 0
    # Fly to a specified flight path angle.
    eFlyToFlightPathAngle = 1

AgEAvtrFlyToFlightPathAngleMode.eFlyToAltRate.__doc__ = "Fly to a specified altitude rate."
AgEAvtrFlyToFlightPathAngleMode.eFlyToFlightPathAngle.__doc__ = "Fly to a specified flight path angle."

agcls.AgTypeNameMap["AgEAvtrFlyToFlightPathAngleMode"] = AgEAvtrFlyToFlightPathAngleMode

class AgEAvtrPushPull(IntEnum):
    """The option to pull up or push over for a push/pull profile strategy."""
    # Pull up.
    ePullUp = 0
    # Push over.
    ePushOver = 1

AgEAvtrPushPull.ePullUp.__doc__ = "Pull up."
AgEAvtrPushPull.ePushOver.__doc__ = "Push over."

agcls.AgTypeNameMap["AgEAvtrPushPull"] = AgEAvtrPushPull

class AgEAvtrAccelMode(IntEnum):
    """The acceleration/decelation option for a push/pull profile strategy."""
    # Accelerate at specified G.
    eAccel = 0
    # Decelerate at specified G.
    eDecel = 1
    # Maintain the initial airspeed.
    eMaintainSpeed = 2

AgEAvtrAccelMode.eAccel.__doc__ = "Accelerate at specified G."
AgEAvtrAccelMode.eDecel.__doc__ = "Decelerate at specified G."
AgEAvtrAccelMode.eMaintainSpeed.__doc__ = "Maintain the initial airspeed."

agcls.AgTypeNameMap["AgEAvtrAccelMode"] = AgEAvtrAccelMode

class AgEAvtrDelayAltMode(IntEnum):
    """The altitude options for a delay procedure."""
    # Use a level off maneuver to fly to the default altitude.
    eDelayLevelOff = 0
    # The default cruise altitude.
    eDelayDefaultCruiseAlt = 1
    # Override the default altitude.
    eDelayOverride = 2

AgEAvtrDelayAltMode.eDelayLevelOff.__doc__ = "Use a level off maneuver to fly to the default altitude."
AgEAvtrDelayAltMode.eDelayDefaultCruiseAlt.__doc__ = "The default cruise altitude."
AgEAvtrDelayAltMode.eDelayOverride.__doc__ = "Override the default altitude."

agcls.AgTypeNameMap["AgEAvtrDelayAltMode"] = AgEAvtrDelayAltMode

class AgEAvtrJoinExitArcMethod(IntEnum):
    """The options to join or exit an arc."""
    # The aircraft begins/ends the procedure on a course away from the site.
    eJoinExitOutbound = 0
    # The aircraft begins/ends the procedure at the start bearing.
    eJoinExitOn = 1
    # The aircraft begins/ends on a course towards the site.
    eJoinExitInbound = 2

AgEAvtrJoinExitArcMethod.eJoinExitOutbound.__doc__ = "The aircraft begins/ends the procedure on a course away from the site."
AgEAvtrJoinExitArcMethod.eJoinExitOn.__doc__ = "The aircraft begins/ends the procedure at the start bearing."
AgEAvtrJoinExitArcMethod.eJoinExitInbound.__doc__ = "The aircraft begins/ends on a course towards the site."

agcls.AgTypeNameMap["AgEAvtrJoinExitArcMethod"] = AgEAvtrJoinExitArcMethod

class AgEAvtrFlightLineProcType(IntEnum):
    """The procedure methodology used to calculate the flight line."""
    # An enroute procedure type.
    eProcTypeEnroute = 0
    # A basic point to point procedure type.
    eProcTypeBasicPointToPoint = 1
    # A terrain follow procedure type.
    eProcTypeTerrainFollow = 2

AgEAvtrFlightLineProcType.eProcTypeEnroute.__doc__ = "An enroute procedure type."
AgEAvtrFlightLineProcType.eProcTypeBasicPointToPoint.__doc__ = "A basic point to point procedure type."
AgEAvtrFlightLineProcType.eProcTypeTerrainFollow.__doc__ = "A terrain follow procedure type."

agcls.AgTypeNameMap["AgEAvtrFlightLineProcType"] = AgEAvtrFlightLineProcType

class AgEAvtrTransitionToHoverMode(IntEnum):
    """The type of hover to transition to."""
    # Transition to a full stop hover.
    eFullStop = 0
    # Transition to a hover with a constant translation rate.
    eTranslationOnly = 1
    # Transition to a hover with a constant translation and altitude rate.
    eTranslationAndAltitude = 2

AgEAvtrTransitionToHoverMode.eFullStop.__doc__ = "Transition to a full stop hover."
AgEAvtrTransitionToHoverMode.eTranslationOnly.__doc__ = "Transition to a hover with a constant translation rate."
AgEAvtrTransitionToHoverMode.eTranslationAndAltitude.__doc__ = "Transition to a hover with a constant translation and altitude rate."

agcls.AgTypeNameMap["AgEAvtrTransitionToHoverMode"] = AgEAvtrTransitionToHoverMode

class AgEAvtrVTOLRateMode(IntEnum):
    """The rate mode for the VTOL procedure."""
    # The rate during the procedure will be maintained.
    eHaltAutomatic = 0
    # The rate will be set to zero.
    eAlwaysStop = 1

AgEAvtrVTOLRateMode.eHaltAutomatic.__doc__ = "The rate during the procedure will be maintained."
AgEAvtrVTOLRateMode.eAlwaysStop.__doc__ = "The rate will be set to zero."

agcls.AgTypeNameMap["AgEAvtrVTOLRateMode"] = AgEAvtrVTOLRateMode

class AgEAvtrHoldingProfileMode(IntEnum):
    """How the aircraft will perform during the holding pattern with respect to airspeed and altitude."""
    # The aircraft will fly the pattern at the speed at which it arrived at the entry point.
    eSTK8Compatible = 0
    # The aircraft will level off and fly at the cruise speed
    eLevelOffCruiseSpeed = 1
    # The aircraft will climb or descend to the specified altitude.
    eClimbDescentOnStation = 2

AgEAvtrHoldingProfileMode.eSTK8Compatible.__doc__ = "The aircraft will fly the pattern at the speed at which it arrived at the entry point."
AgEAvtrHoldingProfileMode.eLevelOffCruiseSpeed.__doc__ = "The aircraft will level off and fly at the cruise speed"
AgEAvtrHoldingProfileMode.eClimbDescentOnStation.__doc__ = "The aircraft will climb or descend to the specified altitude."

agcls.AgTypeNameMap["AgEAvtrHoldingProfileMode"] = AgEAvtrHoldingProfileMode

class AgEAvtrHoldingDirection(IntEnum):
    """The turn direction for the aircraft to enter the holding pattern."""
    # Turn left on the way inbound to the site.
    eInboundLeftTurn = 0
    # Turn right on the way inbound to the site.
    eInboundRightTurn = 1
    # Turn left on the way outbound from the site.
    eOutboundLeftTurn = 2
    # Turn right on the way outbound from the site.
    eOutboundRightTurn = 3

AgEAvtrHoldingDirection.eInboundLeftTurn.__doc__ = "Turn left on the way inbound to the site."
AgEAvtrHoldingDirection.eInboundRightTurn.__doc__ = "Turn right on the way inbound to the site."
AgEAvtrHoldingDirection.eOutboundLeftTurn.__doc__ = "Turn left on the way outbound from the site."
AgEAvtrHoldingDirection.eOutboundRightTurn.__doc__ = "Turn right on the way outbound from the site."

agcls.AgTypeNameMap["AgEAvtrHoldingDirection"] = AgEAvtrHoldingDirection

class AgEAvtrHoldRefuelDumpMode(IntEnum):
    """Defines when the aircraft will leave the holding pattern after it has completed refueling or dumping fuel."""
    # Turn left on the way inbound to the site.
    eFullNumerOfTurns = 0
    # Turn right on the way inbound to the site.
    eExitAtEndOfTurn = 1
    # Turn left on the way outbound from the site.
    eImmediateExit = 2

AgEAvtrHoldRefuelDumpMode.eFullNumerOfTurns.__doc__ = "Turn left on the way inbound to the site."
AgEAvtrHoldRefuelDumpMode.eExitAtEndOfTurn.__doc__ = "Turn right on the way inbound to the site."
AgEAvtrHoldRefuelDumpMode.eImmediateExit.__doc__ = "Turn left on the way outbound from the site."

agcls.AgTypeNameMap["AgEAvtrHoldRefuelDumpMode"] = AgEAvtrHoldRefuelDumpMode

class AgEAvtrHoldingEntryManeuver(IntEnum):
    """Defines how the aircraft will enter the holding pattern."""
    # The aircraft will enter the holding pattern at the normal holding point.
    eHoldEntryNoManeuver = 0
    # The aircraft will enter the holding pattern using a standard entry maneuvers defined in the FAA Instrument Flying Handbook
    eUseStandardEntryTurns = 1
    # The aircraft will enter the holding pattern at an alternate entry point.
    eUseAlternateEntryPoints = 2

AgEAvtrHoldingEntryManeuver.eHoldEntryNoManeuver.__doc__ = "The aircraft will enter the holding pattern at the normal holding point."
AgEAvtrHoldingEntryManeuver.eUseStandardEntryTurns.__doc__ = "The aircraft will enter the holding pattern using a standard entry maneuvers defined in the FAA Instrument Flying Handbook"
AgEAvtrHoldingEntryManeuver.eUseAlternateEntryPoints.__doc__ = "The aircraft will enter the holding pattern at an alternate entry point."

agcls.AgTypeNameMap["AgEAvtrHoldingEntryManeuver"] = AgEAvtrHoldingEntryManeuver

class AgEAvtrVTOLTransitionMode(IntEnum):
    """The mode to specify the course of the transition maneuver."""
    # Specify a heading relative to the previous procedure.
    eTransitionRelativeHdg = 0
    # Specify an absolute heading.
    eTransitionAbsoluteHdg = 1
    # Transition into the wind direction.
    eTransitionIntoWind = 2

AgEAvtrVTOLTransitionMode.eTransitionRelativeHdg.__doc__ = "Specify a heading relative to the previous procedure."
AgEAvtrVTOLTransitionMode.eTransitionAbsoluteHdg.__doc__ = "Specify an absolute heading."
AgEAvtrVTOLTransitionMode.eTransitionIntoWind.__doc__ = "Transition into the wind direction."

agcls.AgTypeNameMap["AgEAvtrVTOLTransitionMode"] = AgEAvtrVTOLTransitionMode

class AgEAvtrVTOLFinalHeadingMode(IntEnum):
    """The mode to specify the heading at the end of the maneuver."""
    # Specify a heading relative to the previous procedure.
    eFinalHeadingRelative = 0
    # Specify an absolute heading.
    eFinalHeadingAbsolute = 1
    # The aircraft have the same heading as the translation bearing.
    eFinalHeadingTranslationCourse = 2

AgEAvtrVTOLFinalHeadingMode.eFinalHeadingRelative.__doc__ = "Specify a heading relative to the previous procedure."
AgEAvtrVTOLFinalHeadingMode.eFinalHeadingAbsolute.__doc__ = "Specify an absolute heading."
AgEAvtrVTOLFinalHeadingMode.eFinalHeadingTranslationCourse.__doc__ = "The aircraft have the same heading as the translation bearing."

agcls.AgTypeNameMap["AgEAvtrVTOLFinalHeadingMode"] = AgEAvtrVTOLFinalHeadingMode

class AgEAvtrVTOLTranslationMode(IntEnum):
    """The mode to specify the translation of the VTOL maneuver."""
    # The aircraft will translate on a specific bearing and range.
    eSetBearingAndRange = 0
    # The aircraft will come to a complete stop.
    eComeToStop = 1
    # The aircraft will continue to translate with the same rate and direction as it began the procedure.
    eMaintainRate = 2

AgEAvtrVTOLTranslationMode.eSetBearingAndRange.__doc__ = "The aircraft will translate on a specific bearing and range."
AgEAvtrVTOLTranslationMode.eComeToStop.__doc__ = "The aircraft will come to a complete stop."
AgEAvtrVTOLTranslationMode.eMaintainRate.__doc__ = "The aircraft will continue to translate with the same rate and direction as it began the procedure."

agcls.AgTypeNameMap["AgEAvtrVTOLTranslationMode"] = AgEAvtrVTOLTranslationMode

class AgEAvtrVTOLTranslationFinalCourseMode(IntEnum):
    """The mode to specify the final course of the VTOL maneuver."""
    # The aircraft will translate directly along the specified bearing and range.
    eTranslateDirect = 0
    # The aircraft will translate along a bisecting line between the inbound and outbound course.
    eBisectInboundOutbound = 1
    # The aircraft will evaluate the procedure ahead to determine the translation bearing and rate.
    eAnticipateNextTranslation = 2

AgEAvtrVTOLTranslationFinalCourseMode.eTranslateDirect.__doc__ = "The aircraft will translate directly along the specified bearing and range."
AgEAvtrVTOLTranslationFinalCourseMode.eBisectInboundOutbound.__doc__ = "The aircraft will translate along a bisecting line between the inbound and outbound course."
AgEAvtrVTOLTranslationFinalCourseMode.eAnticipateNextTranslation.__doc__ = "The aircraft will evaluate the procedure ahead to determine the translation bearing and rate."

agcls.AgTypeNameMap["AgEAvtrVTOLTranslationFinalCourseMode"] = AgEAvtrVTOLTranslationFinalCourseMode

class AgEAvtrHoverMode(IntEnum):
    """The hover mode."""
    # Hover in place for a fixed time.
    eHoverModeFixedTime = 0
    # Perform a hovering maneuver.
    eHoverModeManeuver = 1

AgEAvtrHoverMode.eHoverModeFixedTime.__doc__ = "Hover in place for a fixed time."
AgEAvtrHoverMode.eHoverModeManeuver.__doc__ = "Perform a hovering maneuver."

agcls.AgTypeNameMap["AgEAvtrHoverMode"] = AgEAvtrHoverMode

class AgEAvtrVTOLHeadingMode(IntEnum):
    """The heading mode for the hover maneuver."""
    # The aircraft's heading is independent of its translation.
    eHeadingIndependent = 0
    # The aircraft will align its heading with the translation course.
    eHeadingAlignTranslationCourse = 1
    # The aircraft will set its heading into the wind.
    eHeadingIntoWind = 2

AgEAvtrVTOLHeadingMode.eHeadingIndependent.__doc__ = "The aircraft's heading is independent of its translation."
AgEAvtrVTOLHeadingMode.eHeadingAlignTranslationCourse.__doc__ = "The aircraft will align its heading with the translation course."
AgEAvtrVTOLHeadingMode.eHeadingIntoWind.__doc__ = "The aircraft will set its heading into the wind."

agcls.AgTypeNameMap["AgEAvtrVTOLHeadingMode"] = AgEAvtrVTOLHeadingMode

class AgEAvtrVertLandingMode(IntEnum):
    """The heading mode for a vertical landing maneuver."""
    # The aircraft's heading is independent of its translation.
    eVertLandingIndependent = 0
    # The aircraft will align its heading with the translation course.
    eVertLandingAlignTranslationCourse = 1
    # The aircraft will set its heading into the wind.
    eVertLandingIntoWind = 2
    # The aircraft will align its heading with the translation course  will achieve the specified heading upon arriving.
    eVertLandingAlignTranslationCourseOverride = 3

AgEAvtrVertLandingMode.eVertLandingIndependent.__doc__ = "The aircraft's heading is independent of its translation."
AgEAvtrVertLandingMode.eVertLandingAlignTranslationCourse.__doc__ = "The aircraft will align its heading with the translation course."
AgEAvtrVertLandingMode.eVertLandingIntoWind.__doc__ = "The aircraft will set its heading into the wind."
AgEAvtrVertLandingMode.eVertLandingAlignTranslationCourseOverride.__doc__ = "The aircraft will align its heading with the translation course  will achieve the specified heading upon arriving."

agcls.AgTypeNameMap["AgEAvtrVertLandingMode"] = AgEAvtrVertLandingMode

class AgEAvtrLaunchAttitudeMode(IntEnum):
    """The attitude mode for the launch procedure."""
    # The aircraft's attitude is aligned with the specified direction vector.
    eLaunchAlignDirectionVector = 0
    # The aircraft will maintain the parent vehicle's attiude at the time of launch.
    eLaunchHoldParentAttitude = 1
    # The aircraft launches in level flight
    eLaunchVTOL = 2

AgEAvtrLaunchAttitudeMode.eLaunchAlignDirectionVector.__doc__ = "The aircraft's attitude is aligned with the specified direction vector."
AgEAvtrLaunchAttitudeMode.eLaunchHoldParentAttitude.__doc__ = "The aircraft will maintain the parent vehicle's attiude at the time of launch."
AgEAvtrLaunchAttitudeMode.eLaunchVTOL.__doc__ = "The aircraft launches in level flight"

agcls.AgTypeNameMap["AgEAvtrLaunchAttitudeMode"] = AgEAvtrLaunchAttitudeMode

class AgEAvtrFuelFlowType(IntEnum):
    """The fuel flow type to use for the procedure."""
    # Fuel flow defined for the current Takeoff performance model.
    eFuelFlowTakeoff = 0
    # Fuel flow defined for the current Cruise performance model.
    eFuelFlowCruise = 1
    # Fuel flow defined for the current Landing performance model.
    eFuelFlowLanding = 2
    # Fuel flow defined for the current VTOL performance model.
    eFuelFlowVTOL = 3
    # Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model.
    eFuelFlowAeroProp = 4
    # Fuel flow defined manually.
    eFuelFlowOverride = 5

AgEAvtrFuelFlowType.eFuelFlowTakeoff.__doc__ = "Fuel flow defined for the current Takeoff performance model."
AgEAvtrFuelFlowType.eFuelFlowCruise.__doc__ = "Fuel flow defined for the current Cruise performance model."
AgEAvtrFuelFlowType.eFuelFlowLanding.__doc__ = "Fuel flow defined for the current Landing performance model."
AgEAvtrFuelFlowType.eFuelFlowVTOL.__doc__ = "Fuel flow defined for the current VTOL performance model."
AgEAvtrFuelFlowType.eFuelFlowAeroProp.__doc__ = "Fuel flow defined for the Aerodynamics and Propulsion Analysis component of the current basic acceleration performance model."
AgEAvtrFuelFlowType.eFuelFlowOverride.__doc__ = "Fuel flow defined manually."

agcls.AgTypeNameMap["AgEAvtrFuelFlowType"] = AgEAvtrFuelFlowType

class AgEAvtrLineOrientation(IntEnum):
    """The orientation for a parallel flight line procedure."""
    # Left of the previous flight line.
    eFlightLineToLeft = 0
    # Right of the previous flight line.
    eFlightLineToRight = 1

AgEAvtrLineOrientation.eFlightLineToLeft.__doc__ = "Left of the previous flight line."
AgEAvtrLineOrientation.eFlightLineToRight.__doc__ = "Right of the previous flight line."

agcls.AgTypeNameMap["AgEAvtrLineOrientation"] = AgEAvtrLineOrientation

class AgEAvtrRelAbsBearing(IntEnum):
    """The options for a bearing that can be relative or absolute."""
    # A bearing relative to the previous course.
    eRelativeBearing = 0
    # A bearing using true north.
    eTrueBearing = 1
    # A bearing using magnetic north.
    eMagneticBearing = 2

AgEAvtrRelAbsBearing.eRelativeBearing.__doc__ = "A bearing relative to the previous course."
AgEAvtrRelAbsBearing.eTrueBearing.__doc__ = "A bearing using true north."
AgEAvtrRelAbsBearing.eMagneticBearing.__doc__ = "A bearing using magnetic north."

agcls.AgTypeNameMap["AgEAvtrRelAbsBearing"] = AgEAvtrRelAbsBearing

class AgEAvtrBasicFixedWingPropMode(IntEnum):
    """The option to specify the thrust (jet engines) or power (propellers)."""
    # Jet - Specify net thrust.
    eSpecifyThrust = 0
    # Propeller - Specify net power.
    eSpecifyPower = 1

AgEAvtrBasicFixedWingPropMode.eSpecifyThrust.__doc__ = "Jet - Specify net thrust."
AgEAvtrBasicFixedWingPropMode.eSpecifyPower.__doc__ = "Propeller - Specify net power."

agcls.AgTypeNameMap["AgEAvtrBasicFixedWingPropMode"] = AgEAvtrBasicFixedWingPropMode

class AgEAvtrClimbSpeedType(IntEnum):
    """The mode to calculate the aircraft's airspeed while climbing for an advanced climb performance model."""
    # The speed at which the aircraft's rate of climb is maximized.
    eClimbSpeedBestRate = 0
    # The speed at which the aircraft will gain the most altitude over downrange distance.
    eClimbSpeedBestAngle = 1
    # The speed at which the aircraft's fuel consumption is minimized.
    eClimbSpeedMinFuel = 2
    # Manually specify the speed.
    eClimbSpeedOverride = 3

AgEAvtrClimbSpeedType.eClimbSpeedBestRate.__doc__ = "The speed at which the aircraft's rate of climb is maximized."
AgEAvtrClimbSpeedType.eClimbSpeedBestAngle.__doc__ = "The speed at which the aircraft will gain the most altitude over downrange distance."
AgEAvtrClimbSpeedType.eClimbSpeedMinFuel.__doc__ = "The speed at which the aircraft's fuel consumption is minimized."
AgEAvtrClimbSpeedType.eClimbSpeedOverride.__doc__ = "Manually specify the speed."

agcls.AgTypeNameMap["AgEAvtrClimbSpeedType"] = AgEAvtrClimbSpeedType

class AgEAvtrCruiseMaxPerfSpeedType(IntEnum):
    """The method for defining the maximum performance airspeed of the aircraft for an advanced cruise model."""
    # The lowest speed at which the aircraft can generate lift while pulling maximum Gs.
    eCornerSpeed = 0
    # The maximum specific excess power without afterburning.
    eMaxPsDryThrust = 1
    # The maximum specific excess power while afterburning.
    eMaxPsAfterburner = 2
    # The maximum speed without afterburning.
    eMaxSpeedDryThrust = 3
    # The speed which maximizes the aircraft range while afterburning.
    eMaxRangeAfterburner = 4

AgEAvtrCruiseMaxPerfSpeedType.eCornerSpeed.__doc__ = "The lowest speed at which the aircraft can generate lift while pulling maximum Gs."
AgEAvtrCruiseMaxPerfSpeedType.eMaxPsDryThrust.__doc__ = "The maximum specific excess power without afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxPsAfterburner.__doc__ = "The maximum specific excess power while afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxSpeedDryThrust.__doc__ = "The maximum speed without afterburning."
AgEAvtrCruiseMaxPerfSpeedType.eMaxRangeAfterburner.__doc__ = "The speed which maximizes the aircraft range while afterburning."

agcls.AgTypeNameMap["AgEAvtrCruiseMaxPerfSpeedType"] = AgEAvtrCruiseMaxPerfSpeedType

class AgEAvtrDescentSpeedType(IntEnum):
    """The method for calculating the aircraft's airspeed while descending."""
    # A variable airspeed that maximizes the distance that the aircraft can fly.
    eDescentMaxRangeCruise = 0
    # The speed at which the aircraft's glide ratio is maximized.
    eDescentMaxGlideRatio = 1
    # The speed at which the aircraft's rate of descent is minimized.
    eDescentMinSinkRate = 2
    # A speed relative to the aircraft's stall speed..
    eDescentStallSpeedRatio = 3
    # Manually define the airspeed.
    eDescentSpeedOverride = 4

AgEAvtrDescentSpeedType.eDescentMaxRangeCruise.__doc__ = "A variable airspeed that maximizes the distance that the aircraft can fly."
AgEAvtrDescentSpeedType.eDescentMaxGlideRatio.__doc__ = "The speed at which the aircraft's glide ratio is maximized."
AgEAvtrDescentSpeedType.eDescentMinSinkRate.__doc__ = "The speed at which the aircraft's rate of descent is minimized."
AgEAvtrDescentSpeedType.eDescentStallSpeedRatio.__doc__ = "A speed relative to the aircraft's stall speed.."
AgEAvtrDescentSpeedType.eDescentSpeedOverride.__doc__ = "Manually define the airspeed."

agcls.AgTypeNameMap["AgEAvtrDescentSpeedType"] = AgEAvtrDescentSpeedType

class AgEAvtrTakeoffLandingSpeedMode(IntEnum):
    """The method for calculating the aircraft's speed upon leaving the ground or at wheels down."""
    # A multiple of the aircraft's stall speed.
    eTakeoffLandingStallSpeedRatio = 0
    # The speed needed to achieve lift at the specified Angle of Attack.
    eTakeoffLandingAngleOfAttack = 1

AgEAvtrTakeoffLandingSpeedMode.eTakeoffLandingStallSpeedRatio.__doc__ = "A multiple of the aircraft's stall speed."
AgEAvtrTakeoffLandingSpeedMode.eTakeoffLandingAngleOfAttack.__doc__ = "The speed needed to achieve lift at the specified Angle of Attack."

agcls.AgTypeNameMap["AgEAvtrTakeoffLandingSpeedMode"] = AgEAvtrTakeoffLandingSpeedMode

class AgEAvtrDepartureSpeedMode(IntEnum):
    """The method for calculating the aircraft's airspeed upon leaving the ground."""
    # The aircraft will fly at the max climb angle.
    eMaxClimbAngle = 0
    # The aircraft will fly at the max climb rate.
    eMaxClimbRate = 1
    # The aircraft will fly at the airspeed defined in the Climb performance model.
    eUseClimbModel = 2

AgEAvtrDepartureSpeedMode.eMaxClimbAngle.__doc__ = "The aircraft will fly at the max climb angle."
AgEAvtrDepartureSpeedMode.eMaxClimbRate.__doc__ = "The aircraft will fly at the max climb rate."
AgEAvtrDepartureSpeedMode.eUseClimbModel.__doc__ = "The aircraft will fly at the airspeed defined in the Climb performance model."

agcls.AgTypeNameMap["AgEAvtrDepartureSpeedMode"] = AgEAvtrDepartureSpeedMode

class AgEAvtrAdvFixedWingAeroStrategy(IntEnum):
    """The aerodynamic strategy for the Advanced Fixed Wing Tool."""
    # Define the aerodynamics using an external .aero file.
    eExternalAeroFile = 0
    # Define the aerodynamics using a model derived from first principles that is valid for the full speed range of high speed aircraft.
    eSubSuperHyperAero = 1
    # Define the aerodynamics for an aircraft that generally travels at subsonic speeds.
    eSubsonicAero = 2
    # Define the aerodynamics for an aircraft that generally travels at supersonic speeds.
    eSupersonicAero = 3

AgEAvtrAdvFixedWingAeroStrategy.eExternalAeroFile.__doc__ = "Define the aerodynamics using an external .aero file."
AgEAvtrAdvFixedWingAeroStrategy.eSubSuperHyperAero.__doc__ = "Define the aerodynamics using a model derived from first principles that is valid for the full speed range of high speed aircraft."
AgEAvtrAdvFixedWingAeroStrategy.eSubsonicAero.__doc__ = "Define the aerodynamics for an aircraft that generally travels at subsonic speeds."
AgEAvtrAdvFixedWingAeroStrategy.eSupersonicAero.__doc__ = "Define the aerodynamics for an aircraft that generally travels at supersonic speeds."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingAeroStrategy"] = AgEAvtrAdvFixedWingAeroStrategy

class AgEAvtrAdvFixedWingGeometry(IntEnum):
    """The method to define the wing geometry of an aircraft in the Advanced Fixed Wing Tool."""
    # Define the static properties of an immovable wing.
    eBasicGeometry = 0
    # Define the minimum and maximum properties of an adjustable wing.
    eVariableGeometry = 1

AgEAvtrAdvFixedWingGeometry.eBasicGeometry.__doc__ = "Define the static properties of an immovable wing."
AgEAvtrAdvFixedWingGeometry.eVariableGeometry.__doc__ = "Define the minimum and maximum properties of an adjustable wing."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingGeometry"] = AgEAvtrAdvFixedWingGeometry

class AgEAvtrAdvFixedWingPowerplantStrategy(IntEnum):
    """The powerplant strategy for the Advanced Fixed Wing Tool."""
    # An electric engine.
    eElectricPowerplant = 0
    # Define the powerplant using an external .prop file.
    eExternalPropFile = 1
    # A piston, or reciprocating, engine.
    ePistonPowerplant = 2
    # A thermodynamic model that includes turbine, ramjet, and scramjet performance modes.
    eSubSuperHyperPowerplant = 3
    # A thermodynamic model of a dual-spool turbofan engine that has an afterburner.
    eTurbofanBasicAB = 4
    # An empirical model for a turbofan engine that produces significantly more fan thrust than jet thrust.
    eTurbofanHighBypass = 5
    # An empirical model for a turbofan engine that produces significantly more jet thrust than fan thrust.
    eTurbofanLowBypass = 6
    # An empirical model for a turbofan engine that has an afterburner and produces significantly more jet thrust than fan thrust.
    eTurbofanLowBypassAfterburning = 7
    # An empirical model that models a turbojet engine that has an afterburner.
    eTurbojetAfterburning = 8
    # An empirical model that models a turbojet engine.
    eTurbojetBasicAB = 9
    # An empirical model that models a turbojet engine.
    eTurbojet = 10
    # An empirical model that models a turboprop engine.
    eTurboprop = 11

AgEAvtrAdvFixedWingPowerplantStrategy.eElectricPowerplant.__doc__ = "An electric engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eExternalPropFile.__doc__ = "Define the powerplant using an external .prop file."
AgEAvtrAdvFixedWingPowerplantStrategy.ePistonPowerplant.__doc__ = "A piston, or reciprocating, engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eSubSuperHyperPowerplant.__doc__ = "A thermodynamic model that includes turbine, ramjet, and scramjet performance modes."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanBasicAB.__doc__ = "A thermodynamic model of a dual-spool turbofan engine that has an afterburner."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanHighBypass.__doc__ = "An empirical model for a turbofan engine that produces significantly more fan thrust than jet thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanLowBypass.__doc__ = "An empirical model for a turbofan engine that produces significantly more jet thrust than fan thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbofanLowBypassAfterburning.__doc__ = "An empirical model for a turbofan engine that has an afterburner and produces significantly more jet thrust than fan thrust."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojetAfterburning.__doc__ = "An empirical model that models a turbojet engine that has an afterburner."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojetBasicAB.__doc__ = "An empirical model that models a turbojet engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurbojet.__doc__ = "An empirical model that models a turbojet engine."
AgEAvtrAdvFixedWingPowerplantStrategy.eTurboprop.__doc__ = "An empirical model that models a turboprop engine."

agcls.AgTypeNameMap["AgEAvtrAdvFixedWingPowerplantStrategy"] = AgEAvtrAdvFixedWingPowerplantStrategy

class AgEAvtrMissileAeroStrategy(IntEnum):
    """The aerodynamic strategy used to compute lift, drag, angle of attack, sideslip and intermediate / derived values."""
    # Simple aerodynamics.
    eMissileAeroSimple = 0
    # External file aerodynamics.
    eMissileAeroExternalFile = 1
    # Advanced missile aerodynamics.
    eMissileAeroAdvanced = 2

AgEAvtrMissileAeroStrategy.eMissileAeroSimple.__doc__ = "Simple aerodynamics."
AgEAvtrMissileAeroStrategy.eMissileAeroExternalFile.__doc__ = "External file aerodynamics."
AgEAvtrMissileAeroStrategy.eMissileAeroAdvanced.__doc__ = "Advanced missile aerodynamics."

agcls.AgTypeNameMap["AgEAvtrMissileAeroStrategy"] = AgEAvtrMissileAeroStrategy

class AgEAvtrMissilePropStrategy(IntEnum):
    """The propulsion strategy used to compute thrust and throttle setting."""
    # Simple propulsion.
    eMissilePropSimple = 0
    # External file propulsion.
    eMissilePropExternalFile = 1
    # Ramjet propulsion.
    eMissilePropRamjet = 2
    # Rocket propulsion.
    eMissilePropRocket = 3
    # Turbojet propulsion.
    eMissilePropTurbojet = 4

AgEAvtrMissilePropStrategy.eMissilePropSimple.__doc__ = "Simple propulsion."
AgEAvtrMissilePropStrategy.eMissilePropExternalFile.__doc__ = "External file propulsion."
AgEAvtrMissilePropStrategy.eMissilePropRamjet.__doc__ = "Ramjet propulsion."
AgEAvtrMissilePropStrategy.eMissilePropRocket.__doc__ = "Rocket propulsion."
AgEAvtrMissilePropStrategy.eMissilePropTurbojet.__doc__ = "Turbojet propulsion."

agcls.AgTypeNameMap["AgEAvtrMissilePropStrategy"] = AgEAvtrMissilePropStrategy

class AgEAvtrRotorcraftPowerplantType(IntEnum):
    """The powerplant type for a rotorcraft."""
    # Electric propulsion.
    eRotorcraftElectric = 0
    # Turboshaft propulsion.
    eRotorcraftTurboshaft = 1
    # Piston propulsion.
    eRotorcraftPiston = 2

AgEAvtrRotorcraftPowerplantType.eRotorcraftElectric.__doc__ = "Electric propulsion."
AgEAvtrRotorcraftPowerplantType.eRotorcraftTurboshaft.__doc__ = "Turboshaft propulsion."
AgEAvtrRotorcraftPowerplantType.eRotorcraftPiston.__doc__ = "Piston propulsion."

agcls.AgTypeNameMap["AgEAvtrRotorcraftPowerplantType"] = AgEAvtrRotorcraftPowerplantType

class AgEAvtrMinimizeSiteProcTimeDiff(IntEnum):
    """Options for minimizing the time difference between the procedure and site times."""
    # Do not converge the procedure and site times.
    eMinimizeTimeDifferenceOff = 0
    # Always recalculate.
    eMinimizeTimeDifferenceAlways = 1
    # Only recalculate when updated.
    eMinimizeTimeDifferenceNextUpdate = 2

AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceOff.__doc__ = "Do not converge the procedure and site times."
AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceAlways.__doc__ = "Always recalculate."
AgEAvtrMinimizeSiteProcTimeDiff.eMinimizeTimeDifferenceNextUpdate.__doc__ = "Only recalculate when updated."

agcls.AgTypeNameMap["AgEAvtrMinimizeSiteProcTimeDiff"] = AgEAvtrMinimizeSiteProcTimeDiff

class AgEAvtrSTKObjectWaypointOffsetMode(IntEnum):
    """The options to offset the site location relative to the STK Object."""
    # No offset.
    eOffsetNone = 0
    # Bearing/Range (relative to North).
    eOffsetBearingRange = 1
    # VGT Point.
    eOffsetVGTPoint = 2
    # Bearing/Reange relative to Vehicle course.
    eOffsetRelativeBearingRange = 3

AgEAvtrSTKObjectWaypointOffsetMode.eOffsetNone.__doc__ = "No offset."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetBearingRange.__doc__ = "Bearing/Range (relative to North)."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetVGTPoint.__doc__ = "VGT Point."
AgEAvtrSTKObjectWaypointOffsetMode.eOffsetRelativeBearingRange.__doc__ = "Bearing/Reange relative to Vehicle course."

agcls.AgTypeNameMap["AgEAvtrSTKObjectWaypointOffsetMode"] = AgEAvtrSTKObjectWaypointOffsetMode

class AgEAvtrSearchPatternCourseMode(IntEnum):
    """The mode to determine the course of the search pattern."""
    # Automatically begin the search pattern within 0 - 180 degrees.
    eCourseModeLow = 0
    # Automatically begin the search pattern within 180 - 360 degrees.
    eCourseModeHigh = 1
    # Manually define the course of the search pattern.
    eCourseModeOverride = 2

AgEAvtrSearchPatternCourseMode.eCourseModeLow.__doc__ = "Automatically begin the search pattern within 0 - 180 degrees."
AgEAvtrSearchPatternCourseMode.eCourseModeHigh.__doc__ = "Automatically begin the search pattern within 180 - 360 degrees."
AgEAvtrSearchPatternCourseMode.eCourseModeOverride.__doc__ = "Manually define the course of the search pattern."

agcls.AgTypeNameMap["AgEAvtrSearchPatternCourseMode"] = AgEAvtrSearchPatternCourseMode

class AgEAvtrDelayTurnDir(IntEnum):
    """Turn mode for procedures with Delay options."""
    # Automatic turn. Aviator will determine the direction of the turn.
    eDelayTurnAuto = 0
    # Left turn.
    eDelayTurnLeft = 1
    # Right turn.
    eDelayTurnRight = 2

AgEAvtrDelayTurnDir.eDelayTurnAuto.__doc__ = "Automatic turn. Aviator will determine the direction of the turn."
AgEAvtrDelayTurnDir.eDelayTurnLeft.__doc__ = "Left turn."
AgEAvtrDelayTurnDir.eDelayTurnRight.__doc__ = "Right turn."

agcls.AgTypeNameMap["AgEAvtrDelayTurnDir"] = AgEAvtrDelayTurnDir

class AgEAvtrTrajectoryBlendMode(IntEnum):
    """The interpolation mode to determine the aircraft's position and velocity."""
    # Quadratic interpolation using the body frame.
    eBlendBodyQuadratic = 0
    # Cubic interpolation using the body frame.
    eBlendBodyCubic = 1
    # Quadratic interpolation using the local horizontal frame.
    eBlendLHQuadratic = 2
    # Cubic interpolation using the local horizontal frame.
    eBlendLHCubic = 3
    # Quadratic interpolation using the Earth-Centered Fixed frame.
    eBlendECFQuadratic = 4
    # Cubic interpolation using the Earth-Centered Fixed frame.
    eBlendECFCubic = 5

AgEAvtrTrajectoryBlendMode.eBlendBodyQuadratic.__doc__ = "Quadratic interpolation using the body frame."
AgEAvtrTrajectoryBlendMode.eBlendBodyCubic.__doc__ = "Cubic interpolation using the body frame."
AgEAvtrTrajectoryBlendMode.eBlendLHQuadratic.__doc__ = "Quadratic interpolation using the local horizontal frame."
AgEAvtrTrajectoryBlendMode.eBlendLHCubic.__doc__ = "Cubic interpolation using the local horizontal frame."
AgEAvtrTrajectoryBlendMode.eBlendECFQuadratic.__doc__ = "Quadratic interpolation using the Earth-Centered Fixed frame."
AgEAvtrTrajectoryBlendMode.eBlendECFCubic.__doc__ = "Cubic interpolation using the Earth-Centered Fixed frame."

agcls.AgTypeNameMap["AgEAvtrTrajectoryBlendMode"] = AgEAvtrTrajectoryBlendMode

class AgEAvtrRefStatePerfMode(IntEnum):
    """The type of motion the aircraft is engaged in at the reference state."""
    # Forward Flight - Climb performance mode.
    eRefStateClimb = 0
    # Forward Flight - Cruise performance mode.
    eRefStateCruise = 1
    # Forward Flight - Descend performance mode.
    eRefStateDescend = 2
    # Hover performance mode.
    eRefStateHover = 3
    # Landing performance mode.
    eRefStateLanding = 4
    # Takeoff performance mode.
    eRefStateTakeoff = 5
    # Weight On Wheels - Landing Rollout performance mode
    eRefStateLandingRollout = 6
    # Weight On Wheels - Takeoff Run performance mode
    eRefStateTakeoffRun = 7

AgEAvtrRefStatePerfMode.eRefStateClimb.__doc__ = "Forward Flight - Climb performance mode."
AgEAvtrRefStatePerfMode.eRefStateCruise.__doc__ = "Forward Flight - Cruise performance mode."
AgEAvtrRefStatePerfMode.eRefStateDescend.__doc__ = "Forward Flight - Descend performance mode."
AgEAvtrRefStatePerfMode.eRefStateHover.__doc__ = "Hover performance mode."
AgEAvtrRefStatePerfMode.eRefStateLanding.__doc__ = "Landing performance mode."
AgEAvtrRefStatePerfMode.eRefStateTakeoff.__doc__ = "Takeoff performance mode."
AgEAvtrRefStatePerfMode.eRefStateLandingRollout.__doc__ = "Weight On Wheels - Landing Rollout performance mode"
AgEAvtrRefStatePerfMode.eRefStateTakeoffRun.__doc__ = "Weight On Wheels - Takeoff Run performance mode"

agcls.AgTypeNameMap["AgEAvtrRefStatePerfMode"] = AgEAvtrRefStatePerfMode

class AgEAvtrRefStateLongitudinalAccelMode(IntEnum):
    """The mode to specify the longitudinal acceleration of the aircraft."""
    # Specify the true airspeed acceleration.
    eSpecifyTASDot = 0
    # Specify the groundspeed acceleration.
    eSpecifyGroundSpeedDot = 1

AgEAvtrRefStateLongitudinalAccelMode.eSpecifyTASDot.__doc__ = "Specify the true airspeed acceleration."
AgEAvtrRefStateLongitudinalAccelMode.eSpecifyGroundSpeedDot.__doc__ = "Specify the groundspeed acceleration."

agcls.AgTypeNameMap["AgEAvtrRefStateLongitudinalAccelMode"] = AgEAvtrRefStateLongitudinalAccelMode

class AgEAvtrRefStateLateralAccelMode(IntEnum):
    """The mode to specify the lateral acceleration of the aircraft."""
    # Specify the heading rate of change.
    eSpecifyHeadingDot = 0
    # Specify the course rate of change.
    eSpecifyCourseDot = 1

AgEAvtrRefStateLateralAccelMode.eSpecifyHeadingDot.__doc__ = "Specify the heading rate of change."
AgEAvtrRefStateLateralAccelMode.eSpecifyCourseDot.__doc__ = "Specify the course rate of change."

agcls.AgTypeNameMap["AgEAvtrRefStateLateralAccelMode"] = AgEAvtrRefStateLateralAccelMode

class AgEAvtrRefStateAttitudeMode(IntEnum):
    """The mode to specify the attitude rate of change."""
    # Specify the push/pull G.
    eSpecifyPushPullG = 0
    # Specify the pitch rate of change.
    eSpecifyPitchRate = 1

AgEAvtrRefStateAttitudeMode.eSpecifyPushPullG.__doc__ = "Specify the push/pull G."
AgEAvtrRefStateAttitudeMode.eSpecifyPitchRate.__doc__ = "Specify the pitch rate of change."

agcls.AgTypeNameMap["AgEAvtrRefStateAttitudeMode"] = AgEAvtrRefStateAttitudeMode

class AgEAvtrAndOr(IntEnum):
    """The option to specify AND or OR."""
    # And option.
    eAvtrAND = 0
    # Or option.
    eAvtrOR = 1

AgEAvtrAndOr.eAvtrAND.__doc__ = "And option."
AgEAvtrAndOr.eAvtrOR.__doc__ = "Or option."

agcls.AgTypeNameMap["AgEAvtrAndOr"] = AgEAvtrAndOr

class AgEAvtrJetEngineTechnologyLevel(IntEnum):
    """The technology level of the jet engine."""
    # Ideal (perfect efficiencies).
    eIdeal = 0
    # Level 1 (1945-1965).
    eLevel1 = 1
    # Level 2 (1965-1985).
    eLevel2 = 2
    # Level 3 (1985-2005).
    eLevel3 = 3
    # Level 4 (2005-2025).
    eLevel4 = 4
    # Level 5 (2025-2045).
    eLevel5 = 5

AgEAvtrJetEngineTechnologyLevel.eIdeal.__doc__ = "Ideal (perfect efficiencies)."
AgEAvtrJetEngineTechnologyLevel.eLevel1.__doc__ = "Level 1 (1945-1965)."
AgEAvtrJetEngineTechnologyLevel.eLevel2.__doc__ = "Level 2 (1965-1985)."
AgEAvtrJetEngineTechnologyLevel.eLevel3.__doc__ = "Level 3 (1985-2005)."
AgEAvtrJetEngineTechnologyLevel.eLevel4.__doc__ = "Level 4 (2005-2025)."
AgEAvtrJetEngineTechnologyLevel.eLevel5.__doc__ = "Level 5 (2025-2045)."

agcls.AgTypeNameMap["AgEAvtrJetEngineTechnologyLevel"] = AgEAvtrJetEngineTechnologyLevel

class AgEAvtrJetEngineIntakeType(IntEnum):
    """The intake type of the jet engine."""
    # Subsonic nacelles.
    eSubsonicNacelles = 0
    # Subsonic embedded.
    eSubsonicEmbedded = 1
    # Supersonic embedded.
    eSupersonicEmbedded = 2

AgEAvtrJetEngineIntakeType.eSubsonicNacelles.__doc__ = "Subsonic nacelles."
AgEAvtrJetEngineIntakeType.eSubsonicEmbedded.__doc__ = "Subsonic embedded."
AgEAvtrJetEngineIntakeType.eSupersonicEmbedded.__doc__ = "Supersonic embedded."

agcls.AgTypeNameMap["AgEAvtrJetEngineIntakeType"] = AgEAvtrJetEngineIntakeType

class AgEAvtrJetEngineTurbineType(IntEnum):
    """The turbine type of the jet engine."""
    # Uncooled turbine.
    eUncooled = 0
    # Cooled turbine.
    eCooled = 1

AgEAvtrJetEngineTurbineType.eUncooled.__doc__ = "Uncooled turbine."
AgEAvtrJetEngineTurbineType.eCooled.__doc__ = "Cooled turbine."

agcls.AgTypeNameMap["AgEAvtrJetEngineTurbineType"] = AgEAvtrJetEngineTurbineType

class AgEAvtrJetEngineExhaustNozzleType(IntEnum):
    """The exhaust nozzle type of the jet engine."""
    # Fixed Area Convergent.
    eFixedAreaConvergent = 0
    # Variable Area Convergent.
    eVariableAreaConvergent = 1
    # Variable Area Convergent - Divergent.
    eVariableAreaConvergentDivergent = 2

AgEAvtrJetEngineExhaustNozzleType.eFixedAreaConvergent.__doc__ = "Fixed Area Convergent."
AgEAvtrJetEngineExhaustNozzleType.eVariableAreaConvergent.__doc__ = "Variable Area Convergent."
AgEAvtrJetEngineExhaustNozzleType.eVariableAreaConvergentDivergent.__doc__ = "Variable Area Convergent - Divergent."

agcls.AgTypeNameMap["AgEAvtrJetEngineExhaustNozzleType"] = AgEAvtrJetEngineExhaustNozzleType

class AgEAvtrJetFuelType(IntEnum):
    """The jet fuel type."""
    # A kerosene fuel model based on AFPROP.
    eKeroseneAFPROP = 0
    # A kerosene fuel model based on NASA CEA.
    eKeroseneCEA = 1
    # A hydrogen fuel model based on NASA CEA.
    eHydrogen = 2

AgEAvtrJetFuelType.eKeroseneAFPROP.__doc__ = "A kerosene fuel model based on AFPROP."
AgEAvtrJetFuelType.eKeroseneCEA.__doc__ = "A kerosene fuel model based on NASA CEA."
AgEAvtrJetFuelType.eHydrogen.__doc__ = "A hydrogen fuel model based on NASA CEA."

agcls.AgTypeNameMap["AgEAvtrJetFuelType"] = AgEAvtrJetFuelType

class AgEAvtrAFPROPFuelType(IntEnum):
    """The AFPROP fuel type."""
    # Override the specific energy.
    eAFPROPOverride = 0
    # Jet A fuel model based on AFPROP.
    eAFPROPJetA = 1
    # Jet A-1 fuel model based on AFPROP.
    eAFPROPJetA1 = 2
    # JP-5 fuel model based on AFPROP.
    eAFPROPJP5 = 3
    # JP-7 fuel model based on AFPROP.
    eAFPROPJP7 = 4

AgEAvtrAFPROPFuelType.eAFPROPOverride.__doc__ = "Override the specific energy."
AgEAvtrAFPROPFuelType.eAFPROPJetA.__doc__ = "Jet A fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJetA1.__doc__ = "Jet A-1 fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJP5.__doc__ = "JP-5 fuel model based on AFPROP."
AgEAvtrAFPROPFuelType.eAFPROPJP7.__doc__ = "JP-7 fuel model based on AFPROP."

agcls.AgTypeNameMap["AgEAvtrAFPROPFuelType"] = AgEAvtrAFPROPFuelType

class AgEAvtrCEAFuelType(IntEnum):
    """The CEA fuel type."""
    # Override the specific energy.
    eCEAOverride = 0
    # Jet A fuel model based on NASA CEA.
    eCEAJetA = 1
    # Jet A-1 fuel model based on NASA CEA.
    eCEAJetA1 = 2
    # JP-5 fuel model based on NASA CEA.
    eCEAJP5 = 3
    # JP-7 fuel model based on NASA CEA.
    eCEAJP7 = 4

AgEAvtrCEAFuelType.eCEAOverride.__doc__ = "Override the specific energy."
AgEAvtrCEAFuelType.eCEAJetA.__doc__ = "Jet A fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJetA1.__doc__ = "Jet A-1 fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJP5.__doc__ = "JP-5 fuel model based on NASA CEA."
AgEAvtrCEAFuelType.eCEAJP7.__doc__ = "JP-7 fuel model based on NASA CEA."

agcls.AgTypeNameMap["AgEAvtrCEAFuelType"] = AgEAvtrCEAFuelType

class AgEAvtrTurbineMode(IntEnum):
    """The turbine mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled turbine mode.
    eTurbineModeDisabled = 0
    # Turbojet - Basic w/AB (Thermodynamic model).
    eTurbineModeTurbojetBasicAB = 1
    # Turbofan - Basic w/AB (Thermodynamic model).
    eTurbineModeTurbofanBasicAB = 2

AgEAvtrTurbineMode.eTurbineModeDisabled.__doc__ = "Disabled turbine mode."
AgEAvtrTurbineMode.eTurbineModeTurbojetBasicAB.__doc__ = "Turbojet - Basic w/AB (Thermodynamic model)."
AgEAvtrTurbineMode.eTurbineModeTurbofanBasicAB.__doc__ = "Turbofan - Basic w/AB (Thermodynamic model)."

agcls.AgTypeNameMap["AgEAvtrTurbineMode"] = AgEAvtrTurbineMode

class AgEAvtrRamjetMode(IntEnum):
    """The ramjet mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled ramjet mode.
    eRamjetModeDisabled = 0
    # Ramjet - Basic mode.
    eRamjetModeBasic = 1

AgEAvtrRamjetMode.eRamjetModeDisabled.__doc__ = "Disabled ramjet mode."
AgEAvtrRamjetMode.eRamjetModeBasic.__doc__ = "Ramjet - Basic mode."

agcls.AgTypeNameMap["AgEAvtrRamjetMode"] = AgEAvtrRamjetMode

class AgEAvtrScramjetMode(IntEnum):
    """The scramjet mode for a Sub/Super/Hypersonic powerplant."""
    # Disabled scramjet mode.
    eScramjetModeDisabled = 0
    # Scramjet - Basic mode.
    eScramjetModeBasic = 1

AgEAvtrScramjetMode.eScramjetModeDisabled.__doc__ = "Disabled scramjet mode."
AgEAvtrScramjetMode.eScramjetModeBasic.__doc__ = "Scramjet - Basic mode."

agcls.AgTypeNameMap["AgEAvtrScramjetMode"] = AgEAvtrScramjetMode

class AgEAvtrNumericalIntegrator(IntEnum):
    """The numerical integrator to be used for the procedure."""
    # Runge-Kutta 4th Order Fixed Time Step Integrator
    eRK4 = 0
    # Runge-Kutta 4th Order Adpative Time Step Integrator.
    eRK45 = 1

AgEAvtrNumericalIntegrator.eRK4.__doc__ = "Runge-Kutta 4th Order Fixed Time Step Integrator"
AgEAvtrNumericalIntegrator.eRK45.__doc__ = "Runge-Kutta 4th Order Adpative Time Step Integrator."

agcls.AgTypeNameMap["AgEAvtrNumericalIntegrator"] = AgEAvtrNumericalIntegrator

class AgEAvtrBallistic3DControlMode(IntEnum):
    """The control mode used to define the ballistic 3D strategy of the basic maneuver procedure."""
    # The vehicle will compensate for the wind along its ballistic trajectory.
    eBallistic3DCompensateForWind = 0
    # Allow the wind to affect the ballistic trajectory.
    eBallistic3DWindPushesVehicle = 1
    # Model the vehicle as a parachute.
    eBallistic3DParachuteMode = 2

AgEAvtrBallistic3DControlMode.eBallistic3DCompensateForWind.__doc__ = "The vehicle will compensate for the wind along its ballistic trajectory."
AgEAvtrBallistic3DControlMode.eBallistic3DWindPushesVehicle.__doc__ = "Allow the wind to affect the ballistic trajectory."
AgEAvtrBallistic3DControlMode.eBallistic3DParachuteMode.__doc__ = "Model the vehicle as a parachute."

agcls.AgTypeNameMap["AgEAvtrBallistic3DControlMode"] = AgEAvtrBallistic3DControlMode

class AgEAvtrLaunchDynStateCoordFrame(IntEnum):
    """The coordinate frame used for a LaunchDynState procedure."""
    # The object's body frame.
    eLaunchDynStateCoordFrameBody = 0
    # The object's local horizontal frame.
    eLaunchDynStateCoordFrameLocalHorizontal = 1

AgEAvtrLaunchDynStateCoordFrame.eLaunchDynStateCoordFrameBody.__doc__ = "The object's body frame."
AgEAvtrLaunchDynStateCoordFrame.eLaunchDynStateCoordFrameLocalHorizontal.__doc__ = "The object's local horizontal frame."

agcls.AgTypeNameMap["AgEAvtrLaunchDynStateCoordFrame"] = AgEAvtrLaunchDynStateCoordFrame

class AgEAvtrLaunchDynStateBearingRef(IntEnum):
    """The vector used as a bearing reference for a LaunchDynState procedure."""
    # The object's velocity vector.
    eLaunchDynStateBearingRefVelocity = 0
    # The X vector of the object's coordinate frame.
    eLaunchDynStateBearingRefCoordFrameX = 1
    # The object's vector to North.
    eLaunchDynStateBearingRefNorth = 2

AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefVelocity.__doc__ = "The object's velocity vector."
AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefCoordFrameX.__doc__ = "The X vector of the object's coordinate frame."
AgEAvtrLaunchDynStateBearingRef.eLaunchDynStateBearingRefNorth.__doc__ = "The object's vector to North."

agcls.AgTypeNameMap["AgEAvtrLaunchDynStateBearingRef"] = AgEAvtrLaunchDynStateBearingRef

class AgEAvtrAltitudeRef(IntEnum):
    """The altitude reference."""
    # Altitude above WGS84 ground reference.
    eAltitudeRefWGS84 = 0
    # Altitude above Mean Sea Level (MSL).
    eAltitudeRefMSL = 1
    # ALtitude above terrain.
    eAltitudeRefTerrain = 2

AgEAvtrAltitudeRef.eAltitudeRefWGS84.__doc__ = "Altitude above WGS84 ground reference."
AgEAvtrAltitudeRef.eAltitudeRefMSL.__doc__ = "Altitude above Mean Sea Level (MSL)."
AgEAvtrAltitudeRef.eAltitudeRefTerrain.__doc__ = "ALtitude above terrain."

agcls.AgTypeNameMap["AgEAvtrAltitudeRef"] = AgEAvtrAltitudeRef

class AgEAvtrSmoothTurnFPAMode(IntEnum):
    """The flight path angle mode for the Smooth Turn strategy of the Basic Maneuver procedure."""
    # Hold the initial flight path angle.
    eSmoothTurnFPAHoldInitial = 0
    # Levell off the flight path angle.
    eSmoothTurnFPALevelOff = 1

AgEAvtrSmoothTurnFPAMode.eSmoothTurnFPAHoldInitial.__doc__ = "Hold the initial flight path angle."
AgEAvtrSmoothTurnFPAMode.eSmoothTurnFPALevelOff.__doc__ = "Levell off the flight path angle."

agcls.AgTypeNameMap["AgEAvtrSmoothTurnFPAMode"] = AgEAvtrSmoothTurnFPAMode

class AgEAvtrPitch3DControlMode(IntEnum):
    """The control mode used to define the pitch 3D strategy of the basic maneuver procedure."""
    # The vehicle will compensate for the wind along its trajectory.
    ePitch3DCompensateForWind = 0
    # Allow the wind to affect the trajectory.
    ePitch3DWindPushesVehicle = 1

AgEAvtrPitch3DControlMode.ePitch3DCompensateForWind.__doc__ = "The vehicle will compensate for the wind along its trajectory."
AgEAvtrPitch3DControlMode.ePitch3DWindPushesVehicle.__doc__ = "Allow the wind to affect the trajectory."

agcls.AgTypeNameMap["AgEAvtrPitch3DControlMode"] = AgEAvtrPitch3DControlMode

class AgEAvtrRefuelDumpMode(IntEnum):
    """The modes used to define procedure refuel/dump modes."""
    # Enumeration AgEAvtrRefuelDumpMode:eRefuelDumpDisabled.
    eRefuelDumpDisabled = 0
    # Enumeration AgEAvtrRefuelDumpMode:eRefuelTopOff.
    eRefuelTopOff = 1
    # Enumeration AgEAvtrRefuelDumpMode:eRefuelToFuelState.
    eRefuelToFuelState = 2
    # Enumeration AgEAvtrRefuelDumpMode:eRefuelToWeight.
    eRefuelToWeight = 3
    # Enumeration AgEAvtrRefuelDumpMode:eRefuelQuantity.
    eRefuelQuantity = 4
    # Enumeration AgEAvtrRefuelDumpMode:eDumpToFuelState.
    eDumpToFuelState = 5
    # Enumeration AgEAvtrRefuelDumpMode:eDumpToWeight.
    eDumpToWeight = 6
    # Enumeration AgEAvtrRefuelDumpMode:eDumpQuantity.
    eDumpQuantity = 7

AgEAvtrRefuelDumpMode.eRefuelDumpDisabled.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eRefuelDumpDisabled."
AgEAvtrRefuelDumpMode.eRefuelTopOff.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eRefuelTopOff."
AgEAvtrRefuelDumpMode.eRefuelToFuelState.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eRefuelToFuelState."
AgEAvtrRefuelDumpMode.eRefuelToWeight.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eRefuelToWeight."
AgEAvtrRefuelDumpMode.eRefuelQuantity.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eRefuelQuantity."
AgEAvtrRefuelDumpMode.eDumpToFuelState.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eDumpToFuelState."
AgEAvtrRefuelDumpMode.eDumpToWeight.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eDumpToWeight."
AgEAvtrRefuelDumpMode.eDumpQuantity.__doc__ = "Enumeration AgEAvtrRefuelDumpMode:eDumpQuantity."

agcls.AgTypeNameMap["AgEAvtrRefuelDumpMode"] = AgEAvtrRefuelDumpMode


class ISite(object):
    """Interface to access Site options"""
    _uuid = "{ca4ddeac-d1c9-4bd8-9569-22c259ae7a1b}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISite._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISite from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISite = agcom.GUID(ISite._uuid)
        vtable_offset_local = ISite._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_ISite, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_ISite, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISite.__dict__ and type(ISite.__dict__[attrname]) == property:
            return ISite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISite.")
    
    @property
    def Name(self) -> str:
        """The name of the site."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the site."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ca4ddeac-d1c9-4bd8-9569-22c259ae7a1b}", ISite)
agcls.AgTypeNameMap["ISite"] = ISite

class IWindModel(object):
    """Interface used to access the wind model for a mission, scenario, or procedure."""
    _uuid = "{7147f488-83c5-49be-949c-84e81fdcfb1a}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWindModelType"] = _raise_uninitialized_error
        self.__dict__["_SetWindModelType"] = _raise_uninitialized_error
        self.__dict__["_GetWindModelTypeString"] = _raise_uninitialized_error
        self.__dict__["_SetWindModelTypeString"] = _raise_uninitialized_error
        self.__dict__["_GetWindModelSource"] = _raise_uninitialized_error
        self.__dict__["_SetWindModelSource"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsConstant"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsADDS"] = _raise_uninitialized_error
        self.__dict__["_Copy"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IWindModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IWindModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IWindModel = agcom.GUID(IWindModel._uuid)
        vtable_offset_local = IWindModel._vtable_offset - 1
        self.__dict__["_GetWindModelType"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetWindModelType"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetWindModelTypeString"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetWindModelTypeString"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetWindModelSource"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetWindModelSource"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetModeAsConstant"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsADDS"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_Copy"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+9, )
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IWindModel, vtable_offset_local+10, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IWindModel.__dict__ and type(IWindModel.__dict__[attrname]) == property:
            return IWindModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IWindModel.")
    
    @property
    def WindModelType(self) -> "AgEAvtrWindModelType":
        """The wind model type."""
        with agmarshall.AgEnum_arg(AgEAvtrWindModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WindModelType.setter
    def WindModelType(self, pVal:"AgEAvtrWindModelType") -> None:
        """The wind model type."""
        with agmarshall.AgEnum_arg(AgEAvtrWindModelType, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindModelType"](arg_pVal.COM_val))

    @property
    def WindModelTypeString(self) -> str:
        """The wind model type as a string value. Use this for custom models."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindModelTypeString"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WindModelTypeString.setter
    def WindModelTypeString(self, pVal:str) -> None:
        """The wind model type as a string value. Use this for custom models."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindModelTypeString"](arg_pVal.COM_val))

    @property
    def WindModelSource(self) -> "AgEAvtrWindAtmosModelSource":
        """The wind model source."""
        with agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindModelSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WindModelSource.setter
    def WindModelSource(self, pVal:"AgEAvtrWindAtmosModelSource") -> None:
        """The wind model source."""
        with agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindModelSource"](arg_pVal.COM_val))

    @property
    def ModeAsConstant(self) -> "IWindModelConstant":
        """Get the options for a Constant Bearing/Speed wind model."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsConstant"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsADDS(self) -> "IWindModelADDS":
        """Get the options for a NOAA ADDS Service wind model."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsADDS"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Copy(self) -> None:
        """Copy the wind model."""
        agcls.evaluate_hresult(self.__dict__["_Copy"]())

    def Paste(self) -> None:
        """Paste the wind model."""
        agcls.evaluate_hresult(self.__dict__["_Paste"]())


agcls.AgClassCatalog.add_catalog_entry("{7147f488-83c5-49be-949c-84e81fdcfb1a}", IWindModel)
agcls.AgTypeNameMap["IWindModel"] = IWindModel

class IADDSMessage(object):
    """Interface used to access a message from the NOAA ADDS forecast."""
    _uuid = "{cc723181-9845-44c1-b061-f3e516343d88}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetStopTime"] = _raise_uninitialized_error
        self.__dict__["_GetMessageTime"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        self.__dict__["_GetSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IADDSMessage._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IADDSMessage from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IADDSMessage = agcom.GUID(IADDSMessage._uuid)
        vtable_offset_local = IADDSMessage._vtable_offset - 1
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IADDSMessage, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_GetStopTime"] = IAGFUNCTYPE(pUnk, IID_IADDSMessage, vtable_offset_local+2, POINTER(agcom.VARIANT))
        self.__dict__["_GetMessageTime"] = IAGFUNCTYPE(pUnk, IID_IADDSMessage, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IADDSMessage, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetSource"] = IAGFUNCTYPE(pUnk, IID_IADDSMessage, vtable_offset_local+5, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IADDSMessage.__dict__ and type(IADDSMessage.__dict__[attrname]) == property:
            return IADDSMessage.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IADDSMessage.")
    
    @property
    def StartTime(self) -> typing.Any:
        """Valid start time for the ADDS message."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopTime(self) -> typing.Any:
        """Valid stop time for the ADDS message."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MessageTime(self) -> typing.Any:
        """The message time for the ADDS message."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMessageTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Type(self) -> "AgEAvtrADDSForecastType":
        """The ADDS message type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSForecastType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Source(self) -> str:
        """The ADDS message source."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{cc723181-9845-44c1-b061-f3e516343d88}", IADDSMessage)
agcls.AgTypeNameMap["IADDSMessage"] = IADDSMessage

class IFuelTankInternal(object):
    """Interface used to set an aircraft's internal fuel tank."""
    _uuid = "{4cc46781-fe55-4b7e-9bd8-b4f174b208b2}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_SetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetConsumptionOrder"] = _raise_uninitialized_error
        self.__dict__["_SetConsumptionOrder"] = _raise_uninitialized_error
        self.__dict__["_GetInitialFuelState"] = _raise_uninitialized_error
        self.__dict__["_SetInitialFuelState"] = _raise_uninitialized_error
        self.__dict__["_GetPositionX"] = _raise_uninitialized_error
        self.__dict__["_GetPositionY"] = _raise_uninitialized_error
        self.__dict__["_GetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IFuelTankInternal._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IFuelTankInternal from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IFuelTankInternal = agcom.GUID(IFuelTankInternal._uuid)
        vtable_offset_local = IFuelTankInternal._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCapacity"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetConsumptionOrder"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetConsumptionOrder"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetInitialFuelState"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialFuelState"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetPositionX"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionY"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IFuelTankInternal, vtable_offset_local+12, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IFuelTankInternal.__dict__ and type(IFuelTankInternal.__dict__[attrname]) == property:
            return IFuelTankInternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IFuelTankInternal.")
    
    @property
    def Name(self) -> str:
        """The name of the fuel tank."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the fuel tank."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def Capacity(self) -> float:
        """The capacity of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Capacity.setter
    def Capacity(self, newVal:float) -> None:
        """The capacity of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCapacity"](arg_newVal.COM_val))

    @property
    def ConsumptionOrder(self) -> int:
        """The consumption order of the fuel tank."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConsumptionOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConsumptionOrder.setter
    def ConsumptionOrder(self, newVal:int) -> None:
        """The consumption order of the fuel tank."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConsumptionOrder"](arg_newVal.COM_val))

    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialFuelState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialFuelState.setter
    def InitialFuelState(self, newVal:float) -> None:
        """The initial fuel state of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialFuelState"](arg_newVal.COM_val))

    @property
    def PositionX(self) -> float:
        """The X value of the fuel tank's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionY(self) -> float:
        """The Y value of the fuel tank's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionZ(self) -> float:
        """The Z value of the fuel tank's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionZ"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetPosition(self, x:float, y:float, z:float) -> None:
        """Set the fuel tank's parent relative position."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.DOUBLE_arg(z) as arg_z:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_x.COM_val, arg_y.COM_val, arg_z.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4cc46781-fe55-4b7e-9bd8-b4f174b208b2}", IFuelTankInternal)
agcls.AgTypeNameMap["IFuelTankInternal"] = IFuelTankInternal

class IFuelTankExternal(object):
    """Interface used to set an aircraft's external fuel tank."""
    _uuid = "{d4c0aa70-49ba-4343-907b-d7271a23a42f}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetEmptyWeight"] = _raise_uninitialized_error
        self.__dict__["_SetEmptyWeight"] = _raise_uninitialized_error
        self.__dict__["_GetCapacity"] = _raise_uninitialized_error
        self.__dict__["_SetCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetInitialFuelState"] = _raise_uninitialized_error
        self.__dict__["_SetInitialFuelState"] = _raise_uninitialized_error
        self.__dict__["_GetConsumptionOrder"] = _raise_uninitialized_error
        self.__dict__["_SetConsumptionOrder"] = _raise_uninitialized_error
        self.__dict__["_GetDragIndex"] = _raise_uninitialized_error
        self.__dict__["_SetDragIndex"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IFuelTankExternal._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IFuelTankExternal from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IFuelTankExternal = agcom.GUID(IFuelTankExternal._uuid)
        vtable_offset_local = IFuelTankExternal._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetEmptyWeight"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEmptyWeight"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCapacity"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCapacity"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetInitialFuelState"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialFuelState"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetConsumptionOrder"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetConsumptionOrder"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetDragIndex"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDragIndex"] = IAGFUNCTYPE(pUnk, IID_IFuelTankExternal, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IFuelTankExternal.__dict__ and type(IFuelTankExternal.__dict__[attrname]) == property:
            return IFuelTankExternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IFuelTankExternal.")
    
    @property
    def Name(self) -> str:
        """The name of the fuel tank."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the fuel tank."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def EmptyWeight(self) -> float:
        """The empty weight of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEmptyWeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EmptyWeight.setter
    def EmptyWeight(self, newVal:float) -> None:
        """The empty weight of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEmptyWeight"](arg_newVal.COM_val))

    @property
    def Capacity(self) -> float:
        """The capacity of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Capacity.setter
    def Capacity(self, newVal:float) -> None:
        """The capacity of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCapacity"](arg_newVal.COM_val))

    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialFuelState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialFuelState.setter
    def InitialFuelState(self, newVal:float) -> None:
        """The initial fuel state of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialFuelState"](arg_newVal.COM_val))

    @property
    def ConsumptionOrder(self) -> int:
        """The consumption order of the fuel tank."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConsumptionOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConsumptionOrder.setter
    def ConsumptionOrder(self, newVal:int) -> None:
        """The consumption order of the fuel tank."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConsumptionOrder"](arg_newVal.COM_val))

    @property
    def DragIndex(self) -> float:
        """The drag index of the fuel tank."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragIndex"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragIndex.setter
    def DragIndex(self, newVal:float) -> None:
        """The drag index of the fuel tank."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragIndex"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d4c0aa70-49ba-4343-907b-d7271a23a42f}", IFuelTankExternal)
agcls.AgTypeNameMap["IFuelTankExternal"] = IFuelTankExternal

class IPayloadStation(object):
    """Interface used to set an aircraft's payload station."""
    _uuid = "{d13cdb7b-4771-4ca1-954b-772a87f77ad2}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetPositionX"] = _raise_uninitialized_error
        self.__dict__["_GetPositionY"] = _raise_uninitialized_error
        self.__dict__["_GetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_SetPosition"] = _raise_uninitialized_error
        self.__dict__["_RemoveSubItem"] = _raise_uninitialized_error
        self.__dict__["_AddExternalFuelTank"] = _raise_uninitialized_error
        self.__dict__["_GetExternalFuelTank"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPayloadStation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPayloadStation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPayloadStation = agcom.GUID(IPayloadStation._uuid)
        vtable_offset_local = IPayloadStation._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPositionX"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionY"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPosition"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+6, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_RemoveSubItem"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+7, )
        self.__dict__["_AddExternalFuelTank"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetExternalFuelTank"] = IAGFUNCTYPE(pUnk, IID_IPayloadStation, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPayloadStation.__dict__ and type(IPayloadStation.__dict__[attrname]) == property:
            return IPayloadStation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPayloadStation.")
    
    @property
    def Name(self) -> str:
        """The name of the payload station."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the payload station."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def PositionX(self) -> float:
        """The X value of the payload station's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionY(self) -> float:
        """The Y value of the payload station's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def PositionZ(self) -> float:
        """The Z value of the payload station's parent relative position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionZ"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetPosition(self, x:float, y:float, z:float) -> None:
        """Set the payload station's parent relative position."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.DOUBLE_arg(z) as arg_z:
            agcls.evaluate_hresult(self.__dict__["_SetPosition"](arg_x.COM_val, arg_y.COM_val, arg_z.COM_val))

    def RemoveSubItem(self) -> None:
        """Remove any sub item that may be attached to the payload station."""
        agcls.evaluate_hresult(self.__dict__["_RemoveSubItem"]())

    def AddExternalFuelTank(self) -> "IFuelTankExternal":
        """Add an external fuel tank to the payload station."""
        with agmarshall.AgInterface_out_arg() as arg_ppFuelTank:
            agcls.evaluate_hresult(self.__dict__["_AddExternalFuelTank"](byref(arg_ppFuelTank.COM_val)))
            return arg_ppFuelTank.python_val

    def GetExternalFuelTank(self) -> "IFuelTankExternal":
        """Get the external fuel tank attached to the payload station."""
        with agmarshall.AgInterface_out_arg() as arg_ppFuelTank:
            agcls.evaluate_hresult(self.__dict__["_GetExternalFuelTank"](byref(arg_ppFuelTank.COM_val)))
            return arg_ppFuelTank.python_val


agcls.AgClassCatalog.add_catalog_entry("{d13cdb7b-4771-4ca1-954b-772a87f77ad2}", IPayloadStation)
agcls.AgTypeNameMap["IPayloadStation"] = IPayloadStation

class IAircraftModel(object):
    """Interface used to access the aircraft options in the Aviator catalog."""
    _uuid = "{42c19506-e18d-4500-bc0e-c5db5dad14a1}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPerfModelTypes"] = _raise_uninitialized_error
        self.__dict__["_GetAcceleration"] = _raise_uninitialized_error
        self.__dict__["_GetClimb"] = _raise_uninitialized_error
        self.__dict__["_GetCruise"] = _raise_uninitialized_error
        self.__dict__["_GetDescent"] = _raise_uninitialized_error
        self.__dict__["_GetLanding"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoff"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultConfiguration"] = _raise_uninitialized_error
        self.__dict__["_GetAdvFixedWingTool"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        self.__dict__["_GetVTOL"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainFollow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftModel = agcom.GUID(IAircraftModel._uuid)
        vtable_offset_local = IAircraftModel._vtable_offset - 1
        self.__dict__["_GetPerfModelTypes"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAcceleration"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetClimb"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetCruise"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetDescent"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetLanding"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetTakeoff"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetDefaultConfiguration"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvFixedWingTool"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetVTOL"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetTerrainFollow"] = IAGFUNCTYPE(pUnk, IID_IAircraftModel, vtable_offset_local+12, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftModel.__dict__ and type(IAircraftModel.__dict__[attrname]) == property:
            return IAircraftModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftModel.")
    
    @property
    def PerfModelTypes(self) -> list:
        """Get the types of performance models."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerfModelTypes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Acceleration(self) -> "IAircraftAcceleration":
        """Get the acceleration interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppAcc:
            agcls.evaluate_hresult(self.__dict__["_GetAcceleration"](byref(arg_ppAcc.COM_val)))
            return arg_ppAcc.python_val

    @property
    def Climb(self) -> "IAircraftClimb":
        """Get the climb interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppClimb:
            agcls.evaluate_hresult(self.__dict__["_GetClimb"](byref(arg_ppClimb.COM_val)))
            return arg_ppClimb.python_val

    @property
    def Cruise(self) -> "IAircraftCruise":
        """Get the cruise interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppCruise:
            agcls.evaluate_hresult(self.__dict__["_GetCruise"](byref(arg_ppCruise.COM_val)))
            return arg_ppCruise.python_val

    @property
    def Descent(self) -> "IAircraftDescent":
        """Get the descent interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppDescent:
            agcls.evaluate_hresult(self.__dict__["_GetDescent"](byref(arg_ppDescent.COM_val)))
            return arg_ppDescent.python_val

    @property
    def Landing(self) -> "IAircraftLanding":
        """Get the landing interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppLanding:
            agcls.evaluate_hresult(self.__dict__["_GetLanding"](byref(arg_ppLanding.COM_val)))
            return arg_ppLanding.python_val

    @property
    def Takeoff(self) -> "IAircraftTakeoff":
        """Get the takeoff interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppTakeoff:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoff"](byref(arg_ppTakeoff.COM_val)))
            return arg_ppTakeoff.python_val

    @property
    def DefaultConfiguration(self) -> "IConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrConfig:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultConfiguration"](byref(arg_ppAvtrConfig.COM_val)))
            return arg_ppAvtrConfig.python_val

    @property
    def AdvFixedWingTool(self) -> "IAdvFixedWingTool":
        """Get the Advanced Fixed Wing Tool for the aircraft."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrAdvFWT:
            agcls.evaluate_hresult(self.__dict__["_GetAdvFixedWingTool"](byref(arg_ppAvtrAdvFWT.COM_val)))
            return arg_ppAvtrAdvFWT.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val

    @property
    def VTOL(self) -> "IAircraftVTOL":
        """Get the VTOL interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppVTOL:
            agcls.evaluate_hresult(self.__dict__["_GetVTOL"](byref(arg_ppVTOL.COM_val)))
            return arg_ppVTOL.python_val

    @property
    def TerrainFollow(self) -> "IAircraftTerrainFollow":
        """Get the TerrainFollow interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppTerrainFollow:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainFollow"](byref(arg_ppTerrainFollow.COM_val)))
            return arg_ppTerrainFollow.python_val


agcls.AgClassCatalog.add_catalog_entry("{42c19506-e18d-4500-bc0e-c5db5dad14a1}", IAircraftModel)
agcls.AgTypeNameMap["IAircraftModel"] = IAircraftModel

class IAircraftSimpleAero(object):
    """Interface used to access the Simple Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{b3a9d57b-8ebb-428c-b36a-b4c701931cc1}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOperatingMode"] = _raise_uninitialized_error
        self.__dict__["_SetOperatingMode"] = _raise_uninitialized_error
        self.__dict__["_GetSRef"] = _raise_uninitialized_error
        self.__dict__["_SetSRef"] = _raise_uninitialized_error
        self.__dict__["_GetClMax"] = _raise_uninitialized_error
        self.__dict__["_SetClMax"] = _raise_uninitialized_error
        self.__dict__["_GetCd"] = _raise_uninitialized_error
        self.__dict__["_SetCd"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftSimpleAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftSimpleAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftSimpleAero = agcom.GUID(IAircraftSimpleAero._uuid)
        vtable_offset_local = IAircraftSimpleAero._vtable_offset - 1
        self.__dict__["_GetOperatingMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetOperatingMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetSRef"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSRef"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetClMax"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetClMax"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetCd"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCd"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleAero, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftSimpleAero.__dict__ and type(IAircraftSimpleAero.__dict__[attrname]) == property:
            return IAircraftSimpleAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftSimpleAero.")
    
    @property
    def OperatingMode(self) -> "AgEAvtrAeroPropSimpleMode":
        """The mode option to treat the aircraft as a helicopter or a fixed wing aircraft when calculating the aircraft's attitude."""
        with agmarshall.AgEnum_arg(AgEAvtrAeroPropSimpleMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOperatingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OperatingMode.setter
    def OperatingMode(self, newVal:"AgEAvtrAeroPropSimpleMode") -> None:
        """The mode option to treat the aircraft as a helicopter or a fixed wing aircraft when calculating the aircraft's attitude."""
        with agmarshall.AgEnum_arg(AgEAvtrAeroPropSimpleMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOperatingMode"](arg_newVal.COM_val))

    @property
    def SRef(self) -> float:
        """The reference surface area of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSRef"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SRef.setter
    def SRef(self, newVal:float) -> None:
        """The reference surface area of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSRef"](arg_newVal.COM_val))

    @property
    def ClMax(self) -> float:
        """The max coefficient of lift."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClMax"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClMax.setter
    def ClMax(self, newVal:float) -> None:
        """The max coefficient of lift."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClMax"](arg_newVal.COM_val))

    @property
    def Cd(self) -> float:
        """The coefficient of drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCd"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Cd.setter
    def Cd(self, newVal:float) -> None:
        """The coefficient of drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCd"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b3a9d57b-8ebb-428c-b36a-b4c701931cc1}", IAircraftSimpleAero)
agcls.AgTypeNameMap["IAircraftSimpleAero"] = IAircraftSimpleAero

class ILevelTurns(object):
    """Interface used to access the Level Turns Transitions options found in the Basic Acceleration Model of an aircraft."""
    _uuid = "{5c45254a-230f-4f6d-adb9-d33c0a1bf06c}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTurnMode"] = _raise_uninitialized_error
        self.__dict__["_GetTurnG"] = _raise_uninitialized_error
        self.__dict__["_GetBankAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTurnAcceleration"] = _raise_uninitialized_error
        self.__dict__["_GetTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetTurnRate"] = _raise_uninitialized_error
        self.__dict__["_SetLevelTurn"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverModeHelper"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ILevelTurns._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ILevelTurns from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ILevelTurns = agcom.GUID(ILevelTurns._uuid)
        vtable_offset_local = ILevelTurns._vtable_offset - 1
        self.__dict__["_GetTurnMode"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetTurnG"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_GetBankAngle"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_GetTurnAcceleration"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTurnRadius"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTurnRate"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLevelTurn"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+7, agcom.LONG, agcom.VARIANT)
        self.__dict__["_GetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetManeuverModeHelper"] = IAGFUNCTYPE(pUnk, IID_ILevelTurns, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ILevelTurns.__dict__ and type(ILevelTurns.__dict__[attrname]) == property:
            return ILevelTurns.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ILevelTurns.")
    
    @property
    def TurnMode(self) -> "AgEAvtrTurnMode":
        """Get the turn mode."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TurnG(self) -> float:
        """Get the TurnG."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def BankAngle(self) -> typing.Any:
        """Get the bank angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBankAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TurnAcceleration(self) -> float:
        """Get the turn acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnAcceleration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TurnRadius(self) -> float:
        """Get the turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TurnRate(self) -> float:
        """get the turn rate."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLevelTurn(self, turnMode:"AgEAvtrTurnMode", turnValue:typing.Any) -> None:
        """Set the level turn mode and corresponding value."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnMode, turnMode) as arg_turnMode, \
             agmarshall.VARIANT_arg(turnValue) as arg_turnValue:
            agcls.evaluate_hresult(self.__dict__["_SetLevelTurn"](arg_turnMode.COM_val, arg_turnValue.COM_val))

    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverMode"](arg_newVal.COM_val))

    @property
    def ManeuverModeHelper(self) -> "IAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverModeHelper"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5c45254a-230f-4f6d-adb9-d33c0a1bf06c}", ILevelTurns)
agcls.AgTypeNameMap["ILevelTurns"] = ILevelTurns

class IAttitudeTransitions(object):
    """Interface used to access the Attitude Transitions options found in the Basic Acceleration Model of an aircraft."""
    _uuid = "{3dd0e618-20a7-42be-b04d-63472b068f36}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_SetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetYawRate"] = _raise_uninitialized_error
        self.__dict__["_SetYawRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAttitudeTransitions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAttitudeTransitions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAttitudeTransitions = agcom.GUID(IAttitudeTransitions._uuid)
        vtable_offset_local = IAttitudeTransitions._vtable_offset - 1
        self.__dict__["_GetRollRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetYawRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetYawRate"] = IAGFUNCTYPE(pUnk, IID_IAttitudeTransitions, vtable_offset_local+6, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAttitudeTransitions.__dict__ and type(IAttitudeTransitions.__dict__[attrname]) == property:
            return IAttitudeTransitions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAttitudeTransitions.")
    
    @property
    def RollRate(self) -> typing.Any:
        """The roll rate when the aircraft in a turn."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRate.setter
    def RollRate(self, newVal:typing.Any) -> None:
        """The roll rate when the aircraft in a turn."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRate"](arg_newVal.COM_val))

    @property
    def PitchRate(self) -> typing.Any:
        """The pitch rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PitchRate.setter
    def PitchRate(self, newVal:typing.Any) -> None:
        """The pitch rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPitchRate"](arg_newVal.COM_val))

    @property
    def YawRate(self) -> typing.Any:
        """The yaw rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetYawRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @YawRate.setter
    def YawRate(self, newVal:typing.Any) -> None:
        """The yaw rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetYawRate"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3dd0e618-20a7-42be-b04d-63472b068f36}", IAttitudeTransitions)
agcls.AgTypeNameMap["IAttitudeTransitions"] = IAttitudeTransitions

class IClimbAndDescentTransitions(object):
    """Interface used to access the Climb and Descent Transitions options found in the Basic Acceleration Model of an aircraft."""
    _uuid = "{8733914e-9bc9-4270-ab39-0b32af9ca84e}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxPullUpG"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPullUpG"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPushOverG"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPushOverG"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_GetIgnoreFPA"] = _raise_uninitialized_error
        self.__dict__["_SetIgnoreFPA"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverModeHelper"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IClimbAndDescentTransitions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IClimbAndDescentTransitions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IClimbAndDescentTransitions = agcom.GUID(IClimbAndDescentTransitions._uuid)
        vtable_offset_local = IClimbAndDescentTransitions._vtable_offset - 1
        self.__dict__["_GetMaxPullUpG"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPullUpG"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaxPushOverG"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPushOverG"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetIgnoreFPA"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIgnoreFPA"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetManeuverModeHelper"] = IAGFUNCTYPE(pUnk, IID_IClimbAndDescentTransitions, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IClimbAndDescentTransitions.__dict__ and type(IClimbAndDescentTransitions.__dict__[attrname]) == property:
            return IClimbAndDescentTransitions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IClimbAndDescentTransitions.")
    
    @property
    def MaxPullUpG(self) -> float:
        """The force normal to the velocity vector used to transition into a climb or to a transition out of a dive into the next flight segment."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPullUpG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPullUpG.setter
    def MaxPullUpG(self, newVal:float) -> None:
        """The force normal to the velocity vector used to transition into a climb or to a transition out of a dive into the next flight segment."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPullUpG"](arg_newVal.COM_val))

    @property
    def MaxPushOverG(self) -> float:
        """The force normal to the velocity vector used to transition into a descent or to a transition from a climb into the next flight segment."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPushOverG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPushOverG.setter
    def MaxPushOverG(self, newVal:float) -> None:
        """The force normal to the velocity vector used to transition into a descent or to a transition from a climb into the next flight segment."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPushOverG"](arg_newVal.COM_val))

    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the aircraft will adhere to the specified acceleration parameters. Scale by atmospheric density will cause the aircraft to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverMode"](arg_newVal.COM_val))

    @property
    def IgnoreFPA(self) -> bool:
        """Opt whether to ignore the flight path angle."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIgnoreFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IgnoreFPA.setter
    def IgnoreFPA(self, newVal:bool) -> None:
        """Opt whether to ignore the flight path angle."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetIgnoreFPA"](arg_newVal.COM_val))

    @property
    def ManeuverModeHelper(self) -> "IAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverModeHelper"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8733914e-9bc9-4270-ab39-0b32af9ca84e}", IClimbAndDescentTransitions)
agcls.AgTypeNameMap["IClimbAndDescentTransitions"] = IClimbAndDescentTransitions

class ICatalogItem(object):
    """Interface used to access the options for a Catalog Item in the Aviator Catalog. Use this interface to Create, Remove, Duplicate, or Rename items in the catalog."""
    _uuid = "{97dd0fde-8548-4bbf-b2c5-909c6013b32d}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetDescription"] = _raise_uninitialized_error
        self.__dict__["_Duplicate"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Save"] = _raise_uninitialized_error
        self.__dict__["_GetIsReadOnly"] = _raise_uninitialized_error
        self.__dict__["_GetChildNames"] = _raise_uninitialized_error
        self.__dict__["_GetChildItemByName"] = _raise_uninitialized_error
        self.__dict__["_GetChildTypes"] = _raise_uninitialized_error
        self.__dict__["_AddDefaultChild"] = _raise_uninitialized_error
        self.__dict__["_AddChildOfType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogItem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogItem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogItem = agcom.GUID(ICatalogItem._uuid)
        vtable_offset_local = ICatalogItem._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetDescription"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_Duplicate"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+5, )
        self.__dict__["_Save"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+6, )
        self.__dict__["_GetIsReadOnly"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetChildNames"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+8, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetChildItemByName"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetChildTypes"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+10, POINTER(agcom.SAFEARRAY))
        self.__dict__["_AddDefaultChild"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddChildOfType"] = IAGFUNCTYPE(pUnk, IID_ICatalogItem, vtable_offset_local+12, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogItem.__dict__ and type(ICatalogItem.__dict__[attrname]) == property:
            return ICatalogItem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogItem.")
    
    @property
    def Name(self) -> str:
        """Get the name of the catalog item."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, pVal:str) -> None:
        """Get the name of the catalog item."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_pVal.COM_val))

    @property
    def Description(self) -> str:
        """Get the description of the catalog item."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescription"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Duplicate(self) -> "ICatalogItem":
        """Duplicates the catalog item."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_Duplicate"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    def Remove(self) -> None:
        """Removes the catalog item."""
        agcls.evaluate_hresult(self.__dict__["_Remove"]())

    def Save(self) -> None:
        """Saves the catalog item."""
        agcls.evaluate_hresult(self.__dict__["_Save"]())

    @property
    def IsReadOnly(self) -> bool:
        """Get whether the catalog item is read only."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsReadOnly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ChildNames(self) -> list:
        """Get the child names of the catalog item."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetChildNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetChildItemByName(self, childName:str) -> "ICatalogItem":
        """Get the child of the catalog item with the given name."""
        with agmarshall.BSTR_arg(childName) as arg_childName, \
             agmarshall.AgInterface_out_arg() as arg_ppUnk:
            agcls.evaluate_hresult(self.__dict__["_GetChildItemByName"](arg_childName.COM_val, byref(arg_ppUnk.COM_val)))
            return arg_ppUnk.python_val

    @property
    def ChildTypes(self) -> list:
        """Get the child types."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetChildTypes"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AddDefaultChild(self, childName:str) -> "ICatalogItem":
        """Creates a new child with the given name and default type."""
        with agmarshall.BSTR_arg(childName) as arg_childName, \
             agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_AddDefaultChild"](arg_childName.COM_val, byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    def AddChildOfType(self, childType:str, childName:str) -> "ICatalogItem":
        """Creates a new child with the given name and specified type."""
        with agmarshall.BSTR_arg(childType) as arg_childType, \
             agmarshall.BSTR_arg(childName) as arg_childName, \
             agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_AddChildOfType"](arg_childType.COM_val, arg_childName.COM_val, byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val


agcls.AgClassCatalog.add_catalog_entry("{97dd0fde-8548-4bbf-b2c5-909c6013b32d}", ICatalogItem)
agcls.AgTypeNameMap["ICatalogItem"] = ICatalogItem

class IAircraftBasicClimbModel(object):
    """Interface used to access the basic climb model options for a climb model of an aircraft in the Aviator catalog."""
    _uuid = "{db58182c-ba76-44ea-be78-5c529aea4de7}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetEnableRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetEnableRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicClimbModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicClimbModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicClimbModel = agcom.GUID(IAircraftBasicClimbModel._uuid)
        vtable_offset_local = IAircraftBasicClimbModel._vtable_offset - 1
        self.__dict__["_GetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetEnableRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicClimbModel, vtable_offset_local+18, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicClimbModel.__dict__ and type(IAircraftBasicClimbModel.__dict__[attrname]) == property:
            return IAircraftBasicClimbModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicClimbModel.")
    
    @property
    def CeilingAltitude(self) -> float:
        """Get the ceiling altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCeilingAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """Put the ceiling altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCeilingAltitude"](arg_newVal.COM_val))

    @property
    def Airspeed(self) -> float:
        """Get the airsepeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed type and value."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """Get the altitude rate."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """Put the altitude rate."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))

    @property
    def EnableRelativeAirspeedTolerance(self) -> bool:
        """Get whether to enable relative airspeed tolerance."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableRelativeAirspeedTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableRelativeAirspeedTolerance.setter
    def EnableRelativeAirspeedTolerance(self, newVal:bool) -> None:
        """Put whether to enable relative airspeed tolerance."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableRelativeAirspeedTolerance"](arg_newVal.COM_val))

    @property
    def RelativeAirspeedTolerance(self) -> float:
        """Get the relative airspeed tolerance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeAirspeedTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeAirspeedTolerance.setter
    def RelativeAirspeedTolerance(self, newVal:float) -> None:
        """Put the relative airspeed tolerance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeAirspeedTolerance"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{db58182c-ba76-44ea-be78-5c529aea4de7}", IAircraftBasicClimbModel)
agcls.AgTypeNameMap["IAircraftBasicClimbModel"] = IAircraftBasicClimbModel

class IAircraftBasicAccelerationModel(object):
    """Interface used to access the basic acceleration model options for an acceleration model of an aircraft in the Aviator catalog."""
    _uuid = "{a1a75a12-5730-4442-b84c-dc51c7783896}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLevelTurns"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetClimbAndDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetAerodynamics"] = _raise_uninitialized_error
        self.__dict__["_GetPropulsion"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicAccelerationModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicAccelerationModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicAccelerationModel = agcom.GUID(IAircraftBasicAccelerationModel._uuid)
        vtable_offset_local = IAircraftBasicAccelerationModel._vtable_offset - 1
        self.__dict__["_GetLevelTurns"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAttitudeTransitions"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetClimbAndDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetAerodynamics"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetPropulsion"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicAccelerationModel, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicAccelerationModel.__dict__ and type(IAircraftBasicAccelerationModel.__dict__[attrname]) == property:
            return IAircraftBasicAccelerationModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicAccelerationModel.")
    
    @property
    def LevelTurns(self) -> "ILevelTurns":
        """Get the level turns interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelTurns"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AttitudeTransitions(self) -> "IAttitudeTransitions":
        """Get the attitude transitions interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeTransitions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ClimbAndDescentTransitions(self) -> "IClimbAndDescentTransitions":
        """Get the climb and descent transitions interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbAndDescentTransitions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Aerodynamics(self) -> "IAircraftAero":
        """Get the aerodynamics interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAerodynamics"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Propulsion(self) -> "IAircraftProp":
        """Get the propulsion interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsion"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{a1a75a12-5730-4442-b84c-dc51c7783896}", IAircraftBasicAccelerationModel)
agcls.AgTypeNameMap["IAircraftBasicAccelerationModel"] = IAircraftBasicAccelerationModel

class IAircraftCategory(object):
    """Interface used to access the Aircraft Category in the Aviator Catalog."""
    _uuid = "{222d5a63-81e6-4ada-b309-e5ada49f075d}"
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAircraftModels"] = _raise_uninitialized_error
        self.__dict__["_GetMissileModels"] = _raise_uninitialized_error
        self.__dict__["_GetRotorcraftModels"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftCategory = agcom.GUID(IAircraftCategory._uuid)
        vtable_offset_local = IAircraftCategory._vtable_offset - 1
        self.__dict__["_GetAircraftModels"] = IAGFUNCTYPE(pUnk, IID_IAircraftCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetMissileModels"] = IAGFUNCTYPE(pUnk, IID_IAircraftCategory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetRotorcraftModels"] = IAGFUNCTYPE(pUnk, IID_IAircraftCategory, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftCategory.__dict__ and type(IAircraftCategory.__dict__[attrname]) == property:
            return IAircraftCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftCategory.")
    
    @property
    def AircraftModels(self) -> "IAircraftModels":
        """Get the user aircraft models."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAircraftModels"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MissileModels(self) -> "IMissileModels":
        """Get the user missile models."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMissileModels"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RotorcraftModels(self) -> "IRotorcraftModels":
        """Get the user rotorcraft models."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotorcraftModels"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{222d5a63-81e6-4ada-b309-e5ada49f075d}", IAircraftCategory)
agcls.AgTypeNameMap["IAircraftCategory"] = IAircraftCategory

class IRunwayCategory(object):
    """Interface used to access runways in the Aviator catalog."""
    _uuid = "{76f32dcb-0127-47b6-b347-c78c18de45c6}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserRunways"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Runways"] = _raise_uninitialized_error
        self.__dict__["_GetDAFIFRunways"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRunwayCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRunwayCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRunwayCategory = agcom.GUID(IRunwayCategory._uuid)
        vtable_offset_local = IRunwayCategory._vtable_offset - 1
        self.__dict__["_GetUserRunways"] = IAGFUNCTYPE(pUnk, IID_IRunwayCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Runways"] = IAGFUNCTYPE(pUnk, IID_IRunwayCategory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetDAFIFRunways"] = IAGFUNCTYPE(pUnk, IID_IRunwayCategory, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRunwayCategory.__dict__ and type(IRunwayCategory.__dict__[attrname]) == property:
            return IRunwayCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRunwayCategory.")
    
    @property
    def UserRunways(self) -> "IUserRunwaySource":
        """Get the user runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserRunways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Runways(self) -> "IARINC424Source":
        """Get the ARINC-424 runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Runways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DAFIFRunways(self) -> "IDAFIFSource":
        """Get the DAFIF runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFRunways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{76f32dcb-0127-47b6-b347-c78c18de45c6}", IRunwayCategory)
agcls.AgTypeNameMap["IRunwayCategory"] = IRunwayCategory

class IBasicManeuverStrategy(object):
    """Interface used to access options for a Basic Maneuver Strategy."""
    _uuid = "{55e05a46-43d4-41d7-9866-2b1255b5d08f}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategy = agcom.GUID(IBasicManeuverStrategy._uuid)
        vtable_offset_local = IBasicManeuverStrategy._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategy.__dict__ and type(IBasicManeuverStrategy.__dict__[attrname]) == property:
            return IBasicManeuverStrategy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategy.")
    

agcls.AgClassCatalog.add_catalog_entry("{55e05a46-43d4-41d7-9866-2b1255b5d08f}", IBasicManeuverStrategy)
agcls.AgTypeNameMap["IBasicManeuverStrategy"] = IBasicManeuverStrategy

class IAircraftVTOL(object):
    """Interface used to access the VTOL options for an aircraft in the Aviator catalog."""
    _uuid = "{dbf209b7-90de-455a-b287-1b0d6c6fd823}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetVTOLByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftVTOL._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftVTOL from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftVTOL = agcom.GUID(IAircraftVTOL._uuid)
        vtable_offset_local = IAircraftVTOL._vtable_offset - 1
        self.__dict__["_GetVTOLByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOL, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOL, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftVTOL.__dict__ and type(IAircraftVTOL.__dict__[attrname]) == property:
            return IAircraftVTOL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftVTOL.")
    
    def GetVTOLByName(self, name:str) -> "IAircraftVTOLModel":
        """Gets the VTOL model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVTOLModel:
            agcls.evaluate_hresult(self.__dict__["_GetVTOLByName"](arg_name.COM_val, byref(arg_ppVTOLModel.COM_val)))
            return arg_ppVTOLModel.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{dbf209b7-90de-455a-b287-1b0d6c6fd823}", IAircraftVTOL)
agcls.AgTypeNameMap["IAircraftVTOL"] = IAircraftVTOL

class IAircraftExternalAero(object):
    """Interface used to access the External File Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{8edd99ca-d7c9-4552-aff5-540ae780d319}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetForwardFlightFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightFilepath"] = _raise_uninitialized_error
        self.__dict__["_ReloadForwardFlightFile"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightRefArea"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetCanSetForwardFlightRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetIsForwardFlightValid"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingFilepath"] = _raise_uninitialized_error
        self.__dict__["_ReloadTakeoffLandingFile"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingRefArea"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetCanSetTakeoffLandingRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetIsTakeoffLandingValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftExternalAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftExternalAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftExternalAero = agcom.GUID(IAircraftExternalAero._uuid)
        vtable_offset_local = IAircraftExternalAero._vtable_offset - 1
        self.__dict__["_GetForwardFlightFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetForwardFlightFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_ReloadForwardFlightFile"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetForwardFlightRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetCanSetForwardFlightRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetIsForwardFlightValid"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetTakeoffLandingFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+8, POINTER(agcom.BSTR))
        self.__dict__["_SetTakeoffLandingFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+9, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_ReloadTakeoffLandingFile"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_GetTakeoffLandingRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetCanSetTakeoffLandingRefArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetIsTakeoffLandingValid"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalAero, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftExternalAero.__dict__ and type(IAircraftExternalAero.__dict__[attrname]) == property:
            return IAircraftExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftExternalAero.")
    
    @property
    def ForwardFlightFilepath(self) -> str:
        """The filepath for the forward flight aero file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetForwardFlightFilepath(self, filepath:str) -> str:
        """Set the filepath for the forward flight aero file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    def ReloadForwardFlightFile(self) -> str:
        """Reload the forward flight aero file."""
        with agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_ReloadForwardFlightFile"](byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def ForwardFlightRefArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightRefArea.setter
    def ForwardFlightRefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightRefArea"](arg_pVal.COM_val))

    @property
    def CanSetForwardFlightRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanSetForwardFlightRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def IsForwardFlightValid(self) -> bool:
        """Check whether the forward flight file is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsForwardFlightValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TakeoffLandingFilepath(self) -> str:
        """The filepath for the takeoff and landing aero file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTakeoffLandingFilepath(self, filepath:str) -> str:
        """Set the filepath for the takeoff and landing aero file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    def ReloadTakeoffLandingFile(self) -> str:
        """Reload the takeoff and landing aero file."""
        with agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_ReloadTakeoffLandingFile"](byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def TakeoffLandingRefArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingRefArea.setter
    def TakeoffLandingRefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingRefArea"](arg_pVal.COM_val))

    @property
    def CanSetTakeoffLandingRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanSetTakeoffLandingRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def IsTakeoffLandingValid(self) -> bool:
        """Check whether the takeoff and landing file is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsTakeoffLandingValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8edd99ca-d7c9-4552-aff5-540ae780d319}", IAircraftExternalAero)
agcls.AgTypeNameMap["IAircraftExternalAero"] = IAircraftExternalAero

class IAircraftSimpleProp(object):
    """Interface used to access the Simple Propulsion options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{e765bd7d-75d3-4b0e-afa6-cff14f98226c}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_SetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_GetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_SetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_GetUseDensityScaling"] = _raise_uninitialized_error
        self.__dict__["_GetDensityRatioExponent"] = _raise_uninitialized_error
        self.__dict__["_SetDensityScaling"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftSimpleProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftSimpleProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftSimpleProp = agcom.GUID(IAircraftSimpleProp._uuid)
        vtable_offset_local = IAircraftSimpleProp._vtable_offset - 1
        self.__dict__["_GetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetUseDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDensityRatioExponent"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftSimpleProp, vtable_offset_local+7, agcom.VARIANT_BOOL, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftSimpleProp.__dict__ and type(IAircraftSimpleProp.__dict__[attrname]) == property:
            return IAircraftSimpleProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftSimpleProp.")
    
    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxThrustAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxThrustAccel"](arg_pVal.COM_val))

    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinThrustDecel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinThrustDecel"](arg_pVal.COM_val))

    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDensityScaling"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityRatioExponent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        with agmarshall.VARIANT_BOOL_arg(useScaling) as arg_useScaling, \
             agmarshall.DOUBLE_arg(exponent) as arg_exponent:
            agcls.evaluate_hresult(self.__dict__["_SetDensityScaling"](arg_useScaling.COM_val, arg_exponent.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e765bd7d-75d3-4b0e-afa6-cff14f98226c}", IAircraftSimpleProp)
agcls.AgTypeNameMap["IAircraftSimpleProp"] = IAircraftSimpleProp

class IAircraftExternalProp(object):
    """Interface used to access the External File Propulsion options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{bc0afa8f-6ccd-4369-8cfd-ee88f8251eec}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetPropFilepath"] = _raise_uninitialized_error
        self.__dict__["_ReloadPropFile"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        self.__dict__["_GetCanSetAccelDecel"] = _raise_uninitialized_error
        self.__dict__["_GetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_SetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_GetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_SetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_GetUseDensityScaling"] = _raise_uninitialized_error
        self.__dict__["_GetDensityRatioExponent"] = _raise_uninitialized_error
        self.__dict__["_SetDensityScaling"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftExternalProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftExternalProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftExternalProp = agcom.GUID(IAircraftExternalProp._uuid)
        vtable_offset_local = IAircraftExternalProp._vtable_offset - 1
        self.__dict__["_GetPropFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPropFilepath"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_ReloadPropFile"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetCanSetAccelDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetUseDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDensityRatioExponent"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftExternalProp, vtable_offset_local+12, agcom.VARIANT_BOOL, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftExternalProp.__dict__ and type(IAircraftExternalProp.__dict__[attrname]) == property:
            return IAircraftExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftExternalProp.")
    
    @property
    def PropFilepath(self) -> str:
        """The filepath for the prop file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetPropFilepath(self, filepath:str) -> str:
        """Set the filepath for the prop file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetPropFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    def ReloadPropFile(self) -> str:
        """Reload the prop file."""
        with agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_ReloadPropFile"](byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def IsValid(self) -> bool:
        """Check if the prop file is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CanSetAccelDecel(self) -> bool:
        """Check whether you can set the acceleration and deceleration values or whether they are specified in the file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanSetAccelDecel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxThrustAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxThrustAccel"](arg_pVal.COM_val))

    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinThrustDecel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinThrustDecel"](arg_pVal.COM_val))

    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDensityScaling"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityRatioExponent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        with agmarshall.VARIANT_BOOL_arg(useScaling) as arg_useScaling, \
             agmarshall.DOUBLE_arg(exponent) as arg_exponent:
            agcls.evaluate_hresult(self.__dict__["_SetDensityScaling"](arg_useScaling.COM_val, arg_exponent.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{bc0afa8f-6ccd-4369-8cfd-ee88f8251eec}", IAircraftExternalProp)
agcls.AgTypeNameMap["IAircraftExternalProp"] = IAircraftExternalProp

class IAircraftBasicFixedWingProp(object):
    """Interface used to access the Basic Fixed Wing Propulsion options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{0c92bc71-bb3f-4953-8171-6efb0d0ab922}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropulsionMode"] = _raise_uninitialized_error
        self.__dict__["_SetPropulsionMode"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerRPM"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerRPM"] = _raise_uninitialized_error
        self.__dict__["_GetMinPowerThrust"] = _raise_uninitialized_error
        self.__dict__["_SetMinPowerThrust"] = _raise_uninitialized_error
        self.__dict__["_GetMinFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMinFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPowerThrust"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPowerThrust"] = _raise_uninitialized_error
        self.__dict__["_GetMaxFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_SetMaxThrustAccel"] = _raise_uninitialized_error
        self.__dict__["_GetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_SetMinThrustDecel"] = _raise_uninitialized_error
        self.__dict__["_GetUseDensityScaling"] = _raise_uninitialized_error
        self.__dict__["_GetDensityRatioExponent"] = _raise_uninitialized_error
        self.__dict__["_SetDensityScaling"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicFixedWingProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicFixedWingProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicFixedWingProp = agcom.GUID(IAircraftBasicFixedWingProp._uuid)
        vtable_offset_local = IAircraftBasicFixedWingProp._vtable_offset - 1
        self.__dict__["_GetPropulsionMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPropulsionMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetPropellerRPM"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellerRPM"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMinPowerThrust"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinPowerThrust"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxPowerThrust"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPowerThrust"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxThrustAccel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinThrustDecel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetUseDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDensityRatioExponent"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDensityScaling"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingProp, vtable_offset_local+23, agcom.VARIANT_BOOL, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicFixedWingProp.__dict__ and type(IAircraftBasicFixedWingProp.__dict__[attrname]) == property:
            return IAircraftBasicFixedWingProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicFixedWingProp.")
    
    @property
    def PropulsionMode(self) -> "AgEAvtrBasicFixedWingPropMode":
        """The option of whether to specify net thrust or net power."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicFixedWingPropMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsionMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropulsionMode.setter
    def PropulsionMode(self, pVal:"AgEAvtrBasicFixedWingPropMode") -> None:
        """The option of whether to specify net thrust or net power."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicFixedWingPropMode, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropulsionMode"](arg_pVal.COM_val))

    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerCount.setter
    def PropellerCount(self, pVal:int) -> None:
        """The number of propellers."""
        with agmarshall.LONG_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerCount"](arg_pVal.COM_val))

    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerDiameter.setter
    def PropellerDiameter(self, pVal:float) -> None:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerDiameter"](arg_pVal.COM_val))

    @property
    def PropellerRPM(self) -> float:
        """The propeller RPM."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerRPM"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerRPM.setter
    def PropellerRPM(self, pVal:float) -> None:
        """The propeller RPM."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerRPM"](arg_pVal.COM_val))

    @property
    def MinPowerThrust(self) -> float:
        """The minimum power/thrust depending on the propulsion mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinPowerThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinPowerThrust.setter
    def MinPowerThrust(self, pVal:float) -> None:
        """The minimum power/thrust depending on the propulsion mode."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinPowerThrust"](arg_pVal.COM_val))

    @property
    def MinFuelFlow(self) -> float:
        """The fuel flow for the minimum thrust/power setting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinFuelFlow.setter
    def MinFuelFlow(self, pVal:float) -> None:
        """The fuel flow for the minimum thrust/power setting."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinFuelFlow"](arg_pVal.COM_val))

    @property
    def MaxPowerThrust(self) -> float:
        """The maximum power/thrust depending on the propulsion mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPowerThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPowerThrust.setter
    def MaxPowerThrust(self, pVal:float) -> None:
        """The maximum power/thrust depending on the propulsion mode."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPowerThrust"](arg_pVal.COM_val))

    @property
    def MaxFuelFlow(self) -> float:
        """The fuel flow for the maximum thrust/power setting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxFuelFlow.setter
    def MaxFuelFlow(self, pVal:float) -> None:
        """The fuel flow for the maximum thrust/power setting."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxFuelFlow"](arg_pVal.COM_val))

    @property
    def MaxThrustAccel(self) -> float:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxThrustAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxThrustAccel.setter
    def MaxThrustAccel(self, pVal:float) -> None:
        """The rate at which the aircraft speeds up at max throttle."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxThrustAccel"](arg_pVal.COM_val))

    @property
    def MinThrustDecel(self) -> float:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinThrustDecel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinThrustDecel.setter
    def MinThrustDecel(self, pVal:float) -> None:
        """The rate at which the aircraft slows down at minimum throttle setting."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinThrustDecel"](arg_pVal.COM_val))

    @property
    def UseDensityScaling(self) -> bool:
        """Opt whether to scale the accel/decel performance by the density ratio."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDensityScaling"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DensityRatioExponent(self) -> float:
        """The relative impace of atmospheric density on the aircraft's performance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityRatioExponent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDensityScaling(self, useScaling:bool, exponent:float) -> None:
        """Set the option to use density scaling and set the density ratio exponent."""
        with agmarshall.VARIANT_BOOL_arg(useScaling) as arg_useScaling, \
             agmarshall.DOUBLE_arg(exponent) as arg_exponent:
            agcls.evaluate_hresult(self.__dict__["_SetDensityScaling"](arg_useScaling.COM_val, arg_exponent.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0c92bc71-bb3f-4953-8171-6efb0d0ab922}", IAircraftBasicFixedWingProp)
agcls.AgTypeNameMap["IAircraftBasicFixedWingProp"] = IAircraftBasicFixedWingProp

class IAircraftAdvClimbModel(object):
    """Interface used to access the advanced climb model options for a climb model of an aircraft in the Aviator catalog."""
    _uuid = "{3e994b97-b141-4cee-aada-d02409dc4756}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetClimbSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetClimbSpeedType"] = _raise_uninitialized_error
        self.__dict__["_GetClimbOverrideAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetClimbOverrideAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetClimbOverrideAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_SetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_GetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimitType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetUseFlightPathAngleLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseFlightPathAngleLimit"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetComputeDeltaAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetComputeDeltaAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvClimbModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvClimbModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvClimbModel = agcom.GUID(IAircraftAdvClimbModel._uuid)
        vtable_offset_local = IAircraftAdvClimbModel._vtable_offset - 1
        self.__dict__["_GetClimbSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetClimbSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetClimbOverrideAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetClimbOverrideAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetClimbOverrideAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetAirspeedLimitType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+14, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetUseFlightPathAngleLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFlightPathAngleLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+17, POINTER(agcom.VARIANT))
        self.__dict__["_SetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+18, agcom.VARIANT)
        self.__dict__["_GetComputeDeltaAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetComputeDeltaAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvClimbModel, vtable_offset_local+21, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvClimbModel.__dict__ and type(IAircraftAdvClimbModel.__dict__[attrname]) == property:
            return IAircraftAdvClimbModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvClimbModel.")
    
    @property
    def ClimbSpeedType(self) -> "AgEAvtrClimbSpeedType":
        """The mode to calculate the aircraft's airspeed while climbing."""
        with agmarshall.AgEnum_arg(AgEAvtrClimbSpeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClimbSpeedType.setter
    def ClimbSpeedType(self, newVal:"AgEAvtrClimbSpeedType") -> None:
        """The mode to calculate the aircraft's airspeed while climbing."""
        with agmarshall.AgEnum_arg(AgEAvtrClimbSpeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClimbSpeedType"](arg_newVal.COM_val))

    @property
    def ClimbOverrideAirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the override airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbOverrideAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ClimbOverrideAirspeed(self) -> float:
        """Get the override airsepeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbOverrideAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetClimbOverrideAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the override airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetClimbOverrideAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def UseAfterburner(self) -> bool:
        """Opt to use the engine's afterburner when climbing if available."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAfterburner"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt to use the engine's afterburner when climbing if available."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAfterburner"](arg_newVal.COM_val))

    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAirspeedLimit"](arg_newVal.COM_val))

    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeLimit"](arg_newVal.COM_val))

    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimitType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedLimit"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def UseFlightPathAngleLimit(self) -> bool:
        """Opt to limit the flight path angle."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFlightPathAngleLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFlightPathAngleLimit.setter
    def UseFlightPathAngleLimit(self, newVal:bool) -> None:
        """Opt to limit the flight path angle."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFlightPathAngleLimit"](arg_newVal.COM_val))

    @property
    def FlightPathAngle(self) -> typing.Any:
        """Get the flight path angle limit."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetFlightPathAngle(self, angle:typing.Any) -> None:
        """Enable the flight path angle limit an set the flight path angle value."""
        with agmarshall.VARIANT_arg(angle) as arg_angle:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathAngle"](arg_angle.COM_val))

    @property
    def ComputeDeltaAltitude(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputeDeltaAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComputeDeltaAltitude.setter
    def ComputeDeltaAltitude(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetComputeDeltaAltitude"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{3e994b97-b141-4cee-aada-d02409dc4756}", IAircraftAdvClimbModel)
agcls.AgTypeNameMap["IAircraftAdvClimbModel"] = IAircraftAdvClimbModel

class IAircraftBasicCruiseModel(object):
    """Interface used to access the basic cruise model options for a cruise model of an aircraft in the Aviator catalog."""
    _uuid = "{0416553d-3446-49c1-8b44-e677197bd059}"
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnduranceAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnduranceAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRangeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRangeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnduranceFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnduranceFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRangeFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRangeFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPerfAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPerfAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicCruiseModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicCruiseModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicCruiseModel = agcom.GUID(IAircraftBasicCruiseModel._uuid)
        vtable_offset_local = IAircraftBasicCruiseModel._vtable_offset - 1
        self.__dict__["_GetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxEnduranceAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxEnduranceAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxRangeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRangeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetMinAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetMaxEnduranceFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxEnduranceFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetMaxRangeFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRangeFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetMaxPerfAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPerfAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicCruiseModel, vtable_offset_local+31, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicCruiseModel.__dict__ and type(IAircraftBasicCruiseModel.__dict__[attrname]) == property:
            return IAircraftBasicCruiseModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicCruiseModel.")
    
    @property
    def CeilingAltitude(self) -> float:
        """The maximum altitude above mean sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCeilingAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """The maximum altitude above mean sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCeilingAltitude"](arg_newVal.COM_val))

    @property
    def DefaultCruiseAltitude(self) -> float:
        """The aircraft's default cruise altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The aircraft's default cruise altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AirspeedType.setter
    def AirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedType"](arg_newVal.COM_val))

    @property
    def MinAirspeed(self) -> float:
        """The minimum cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinAirspeed.setter
    def MinAirspeed(self, newVal:float) -> None:
        """The minimum cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeed"](arg_newVal.COM_val))

    @property
    def MaxEnduranceAirspeed(self) -> float:
        """The cruising airspeed that will provide the maximum flying time for the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnduranceAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnduranceAirspeed.setter
    def MaxEnduranceAirspeed(self, newVal:float) -> None:
        """The cruising airspeed that will provide the maximum flying time for the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnduranceAirspeed"](arg_newVal.COM_val))

    @property
    def MaxRangeAirspeed(self) -> float:
        """The maximum range cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRangeAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRangeAirspeed.setter
    def MaxRangeAirspeed(self, newVal:float) -> None:
        """The maximum range cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRangeAirspeed"](arg_newVal.COM_val))

    @property
    def MaxAirspeed(self) -> float:
        """The maximum cruisng airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAirspeed.setter
    def MaxAirspeed(self, newVal:float) -> None:
        """The maximum cruisng airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeed"](arg_newVal.COM_val))

    @property
    def MaxPerfAirspeed(self) -> float:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPerfAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:float) -> None:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPerfAirspeed"](arg_newVal.COM_val))

    @property
    def MinAirspeedFuelFlow(self) -> float:
        """The fuel flow for the minimum cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinAirspeedFuelFlow.setter
    def MinAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the minimum cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeedFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxEnduranceFuelFlow(self) -> float:
        """The fuel flow for the maximum endurance cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnduranceFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnduranceFuelFlow.setter
    def MaxEnduranceFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximumendurance cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnduranceFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxRangeFuelFlow(self) -> float:
        """The fuel flow for the maximum range cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRangeFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRangeFuelFlow.setter
    def MaxRangeFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum range cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRangeFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAirspeedFuelFlow.setter
    def MaxAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeedFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxPerfAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum performance cruising airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPerfAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPerfAirspeedFuelFlow.setter
    def MaxPerfAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum performance cruising airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPerfAirspeedFuelFlow"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{0416553d-3446-49c1-8b44-e677197bd059}", IAircraftBasicCruiseModel)
agcls.AgTypeNameMap["IAircraftBasicCruiseModel"] = IAircraftBasicCruiseModel

class IAircraftAdvCruiseModel(object):
    """Interface used to access the advanced cruise model options for a cruise model of an aircraft in the Aviator catalog."""
    _uuid = "{49d2ea85-8dad-44b8-8ebd-596a3ef22c88}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimitType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetComputeDeltaDownrange"] = _raise_uninitialized_error
        self.__dict__["_SetComputeDeltaDownrange"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvCruiseModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvCruiseModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvCruiseModel = agcom.GUID(IAircraftAdvCruiseModel._uuid)
        vtable_offset_local = IAircraftAdvCruiseModel._vtable_offset - 1
        self.__dict__["_GetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAirspeedLimitType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetComputeDeltaDownrange"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetComputeDeltaDownrange"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvCruiseModel, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvCruiseModel.__dict__ and type(IAircraftAdvCruiseModel.__dict__[attrname]) == property:
            return IAircraftAdvCruiseModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvCruiseModel.")
    
    @property
    def DefaultCruiseAltitude(self) -> float:
        """The aircraft's default cruising altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The aircraft's default cruising altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def MaxPerfAirspeed(self) -> "AgEAvtrCruiseMaxPerfSpeedType":
        """The method for defining the maximum performance airspeed of the aircraft with respect to its altitude."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseMaxPerfSpeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPerfAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:"AgEAvtrCruiseMaxPerfSpeedType") -> None:
        """The method for defining the maximum performance airspeed of the aircraft with respect to its altitude."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseMaxPerfSpeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPerfAirspeed"](arg_newVal.COM_val))

    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAirspeedLimit"](arg_newVal.COM_val))

    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeLimit"](arg_newVal.COM_val))

    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimitType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedLimit"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def ComputeDeltaDownrange(self) -> float:
        """The maximum change in downrange distance in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputeDeltaDownrange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComputeDeltaDownrange.setter
    def ComputeDeltaDownrange(self, newVal:float) -> None:
        """The maximum change in downrange distance in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetComputeDeltaDownrange"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{49d2ea85-8dad-44b8-8ebd-596a3ef22c88}", IAircraftAdvCruiseModel)
agcls.AgTypeNameMap["IAircraftAdvCruiseModel"] = IAircraftAdvCruiseModel

class IAircraftBasicDescentModel(object):
    """Interface used to access the basic descent model options for a descent model of an aircraft in the Aviator catalog."""
    _uuid = "{b2fec1db-7e30-401b-91cf-b78db9b1401b}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetCeilingAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetEnableRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetEnableRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeAirspeedTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicDescentModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicDescentModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicDescentModel = agcom.GUID(IAircraftBasicDescentModel._uuid)
        vtable_offset_local = IAircraftBasicDescentModel._vtable_offset - 1
        self.__dict__["_GetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCeilingAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetEnableRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelativeAirspeedTolerance"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicDescentModel, vtable_offset_local+18, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicDescentModel.__dict__ and type(IAircraftBasicDescentModel.__dict__[attrname]) == property:
            return IAircraftBasicDescentModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicDescentModel.")
    
    @property
    def CeilingAltitude(self) -> float:
        """Get the ceiling altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCeilingAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CeilingAltitude.setter
    def CeilingAltitude(self, newVal:float) -> None:
        """Put the ceiling altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCeilingAltitude"](arg_newVal.COM_val))

    @property
    def Airspeed(self) -> float:
        """Get the airsepeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed type and value."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """Get the altitude rate."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """Put the altitude rate."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))

    @property
    def EnableRelativeAirspeedTolerance(self) -> bool:
        """Get whether to enable relative airspeed tolerance."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableRelativeAirspeedTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableRelativeAirspeedTolerance.setter
    def EnableRelativeAirspeedTolerance(self, newVal:bool) -> None:
        """Put whether to enable relative airspeed tolerance."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableRelativeAirspeedTolerance"](arg_newVal.COM_val))

    @property
    def RelativeAirspeedTolerance(self) -> float:
        """Get the relative airspeed tolerance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeAirspeedTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeAirspeedTolerance.setter
    def RelativeAirspeedTolerance(self, newVal:float) -> None:
        """Put the relative airspeed tolerance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeAirspeedTolerance"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{b2fec1db-7e30-401b-91cf-b78db9b1401b}", IAircraftBasicDescentModel)
agcls.AgTypeNameMap["IAircraftBasicDescentModel"] = IAircraftBasicDescentModel

class IAircraftAdvDescentModel(object):
    """Interface used to access the advanced descent model options for a descent model of an aircraft in the Aviator catalog."""
    _uuid = "{e668da71-2641-4751-a2eb-880eff768017}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDescentSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetDescentSpeedType"] = _raise_uninitialized_error
        self.__dict__["_GetDescentStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_SetDescentStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_GetDescentOverrideAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetDescentOverrideAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetDescentOverrideAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetSpeedbrakes"] = _raise_uninitialized_error
        self.__dict__["_SetSpeedbrakes"] = _raise_uninitialized_error
        self.__dict__["_GetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimitType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetComputeDeltaAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetComputeDeltaAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvDescentModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvDescentModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvDescentModel = agcom.GUID(IAircraftAdvDescentModel._uuid)
        vtable_offset_local = IAircraftAdvDescentModel._vtable_offset - 1
        self.__dict__["_GetDescentSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetDescentSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetDescentStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDescentStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDescentOverrideAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_GetDescentOverrideAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDescentOverrideAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+7, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetSpeedbrakes"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpeedbrakes"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetAirspeedLimitType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+16, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetComputeDeltaAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetComputeDeltaAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvDescentModel, vtable_offset_local+19, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvDescentModel.__dict__ and type(IAircraftAdvDescentModel.__dict__[attrname]) == property:
            return IAircraftAdvDescentModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvDescentModel.")
    
    @property
    def DescentSpeedType(self) -> "AgEAvtrDescentSpeedType":
        """The mode to calculate the aircraft's airspeed while descending ."""
        with agmarshall.AgEnum_arg(AgEAvtrDescentSpeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentSpeedType.setter
    def DescentSpeedType(self, newVal:"AgEAvtrDescentSpeedType") -> None:
        """The mode to calculate the aircraft's airspeed while descending ."""
        with agmarshall.AgEnum_arg(AgEAvtrDescentSpeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentSpeedType"](arg_newVal.COM_val))

    @property
    def DescentStallSpeedRatio(self) -> float:
        """The ratio of the airspeed upon leaving the ground to the stall speed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentStallSpeedRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentStallSpeedRatio.setter
    def DescentStallSpeedRatio(self, newVal:float) -> None:
        """The ratio of the airspeed upon leaving the ground to the stall speed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentStallSpeedRatio"](arg_newVal.COM_val))

    @property
    def DescentOverrideAirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the override airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentOverrideAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DescentOverrideAirspeed(self) -> float:
        """Get the override airsepeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentOverrideAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDescentOverrideAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the override airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetDescentOverrideAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def Speedbrakes(self) -> float:
        """The extension of the speedbrakes during the landing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpeedbrakes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Speedbrakes.setter
    def Speedbrakes(self, newVal:float) -> None:
        """The extension of the speedbrakes during the landing."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpeedbrakes"](arg_newVal.COM_val))

    @property
    def UseAirspeedLimit(self) -> bool:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAirspeedLimit.setter
    def UseAirspeedLimit(self, newVal:bool) -> None:
        """Opt to limit the airspeed below a specified altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAirspeedLimit"](arg_newVal.COM_val))

    @property
    def AltitudeLimit(self) -> float:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeLimit.setter
    def AltitudeLimit(self, newVal:float) -> None:
        """The altitude threshold, below which the airspeed limit will be applied."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeLimit"](arg_newVal.COM_val))

    @property
    def AirspeedLimitType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed limit type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimitType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedLimit(self) -> float:
        """Get the airsepeed limit below the altitude threshold."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the airspeed limit and airspeed type below the altitude threshold."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedLimit"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def ComputeDeltaAltitude(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputeDeltaAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComputeDeltaAltitude.setter
    def ComputeDeltaAltitude(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetComputeDeltaAltitude"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{e668da71-2641-4751-a2eb-880eff768017}", IAircraftAdvDescentModel)
agcls.AgTypeNameMap["IAircraftAdvDescentModel"] = IAircraftAdvDescentModel

class IAircraftBasicLandingModel(object):
    """Interface used to access the basic landing model options for a landing model of an aircraft in the Aviator catalog."""
    _uuid = "{3e5cc8b6-970b-4412-8ee7-4863224e2ae5}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLandingSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetLandingSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetLandingSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetSeaLevelGroundRoll"] = _raise_uninitialized_error
        self.__dict__["_SetSeaLevelGroundRoll"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicLandingModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicLandingModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicLandingModel = agcom.GUID(IAircraftBasicLandingModel._uuid)
        vtable_offset_local = IAircraftBasicLandingModel._vtable_offset - 1
        self.__dict__["_GetLandingSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLandingSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetLandingSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+3, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetSeaLevelGroundRoll"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSeaLevelGroundRoll"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicLandingModel, vtable_offset_local+12, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicLandingModel.__dict__ and type(IAircraftBasicLandingModel.__dict__[attrname]) == property:
            return IAircraftBasicLandingModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicLandingModel.")
    
    @property
    def LandingSpeed(self) -> float:
        """The landing speed of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLandingSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LandingSpeedType(self) -> "AgEAvtrAirspeedType":
        """The landing speed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLandingSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLandingSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the landing speed of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetLandingSpeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def SeaLevelGroundRoll(self) -> float:
        """The distance the aircraft travels along the ground while decelerating to a stop at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSeaLevelGroundRoll"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SeaLevelGroundRoll.setter
    def SeaLevelGroundRoll(self, newVal:float) -> None:
        """The distance the aircraft travels along the ground while decelerating to a stop at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSeaLevelGroundRoll"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """Get the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """Put the Sea Level Fuel Flow."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{3e5cc8b6-970b-4412-8ee7-4863224e2ae5}", IAircraftBasicLandingModel)
agcls.AgTypeNameMap["IAircraftBasicLandingModel"] = IAircraftBasicLandingModel

class IAircraftAdvLandingModel(object):
    """Interface used to access the advanced landing model options for a landing model of an aircraft in the Aviator catalog."""
    _uuid = "{bee9a455-0eeb-493f-aff6-93a11be34090}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLandingSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_SetLandingSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_GetStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_SetStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_GetAngleOfAttack"] = _raise_uninitialized_error
        self.__dict__["_SetAngleOfAttack"] = _raise_uninitialized_error
        self.__dict__["_GetFlaps"] = _raise_uninitialized_error
        self.__dict__["_SetFlaps"] = _raise_uninitialized_error
        self.__dict__["_GetSpeedbrakes"] = _raise_uninitialized_error
        self.__dict__["_SetSpeedbrakes"] = _raise_uninitialized_error
        self.__dict__["_GetBrakingDecelG"] = _raise_uninitialized_error
        self.__dict__["_SetBrakingDecelG"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvLandingModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvLandingModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvLandingModel = agcom.GUID(IAircraftAdvLandingModel._uuid)
        vtable_offset_local = IAircraftAdvLandingModel._vtable_offset - 1
        self.__dict__["_GetLandingSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetLandingSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetAngleOfAttack"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetAngleOfAttack"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetFlaps"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFlaps"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetSpeedbrakes"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpeedbrakes"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetBrakingDecelG"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBrakingDecelG"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvLandingModel, vtable_offset_local+13, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvLandingModel.__dict__ and type(IAircraftAdvLandingModel.__dict__[attrname]) == property:
            return IAircraftAdvLandingModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvLandingModel.")
    
    @property
    def LandingSpeedMode(self) -> "AgEAvtrTakeoffLandingSpeedMode":
        """The mode to calculate the aircraft's speed at wheels down."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLandingSpeedMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LandingSpeedMode.setter
    def LandingSpeedMode(self, newVal:"AgEAvtrTakeoffLandingSpeedMode") -> None:
        """The mode to calculate the aircraft's speed at wheels down."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLandingSpeedMode"](arg_newVal.COM_val))

    @property
    def StallSpeedRatio(self) -> float:
        """The ratio of the airspeed to the stall speed at wheels down."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStallSpeedRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStallSpeedRatio(self, stallSpeedRatio:float) -> None:
        """Set the landing speed mode to StallSpeedRatio and specify the stall speed ratio."""
        with agmarshall.DOUBLE_arg(stallSpeedRatio) as arg_stallSpeedRatio:
            agcls.evaluate_hresult(self.__dict__["_SetStallSpeedRatio"](arg_stallSpeedRatio.COM_val))

    @property
    def AngleOfAttack(self) -> typing.Any:
        """The Angle of Attack at wheels down."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngleOfAttack"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAngleOfAttack(self, angleOfAttack:typing.Any) -> None:
        """Set the landing speed mode to AngleOfAttack and specify the angle of attack"""
        with agmarshall.VARIANT_arg(angleOfAttack) as arg_angleOfAttack:
            agcls.evaluate_hresult(self.__dict__["_SetAngleOfAttack"](arg_angleOfAttack.COM_val))

    @property
    def Flaps(self) -> float:
        """The extension of the flaps during the landing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlaps"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Flaps.setter
    def Flaps(self, newVal:float) -> None:
        """The extension of the flaps during the landing."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlaps"](arg_newVal.COM_val))

    @property
    def Speedbrakes(self) -> float:
        """The extension of the speedbrakes during the landing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpeedbrakes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Speedbrakes.setter
    def Speedbrakes(self, newVal:float) -> None:
        """The extension of the speedbrakes during the landing."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpeedbrakes"](arg_newVal.COM_val))

    @property
    def BrakingDecelG(self) -> float:
        """The deceleration rate, in G, when braking."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBrakingDecelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BrakingDecelG.setter
    def BrakingDecelG(self, newVal:float) -> None:
        """The deceleration rate, in G, when braking."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBrakingDecelG"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{bee9a455-0eeb-493f-aff6-93a11be34090}", IAircraftAdvLandingModel)
agcls.AgTypeNameMap["IAircraftAdvLandingModel"] = IAircraftAdvLandingModel

class IAircraftBasicTakeoffModel(object):
    """Interface used to access the basic takeoff model options for a takeoff model of an aircraft in the Aviator catalog."""
    _uuid = "{981697a5-e6b3-45d7-a3d4-7caec2237c0a}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTakeoffSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetSeaLevelGroundRoll"] = _raise_uninitialized_error
        self.__dict__["_SetSeaLevelGroundRoll"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetAccelFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetAccelFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicTakeoffModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicTakeoffModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicTakeoffModel = agcom.GUID(IAircraftBasicTakeoffModel._uuid)
        vtable_offset_local = IAircraftBasicTakeoffModel._vtable_offset - 1
        self.__dict__["_GetTakeoffSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTakeoffSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetTakeoffSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+3, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetSeaLevelGroundRoll"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSeaLevelGroundRoll"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetDepartureSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDepartureSpeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetDepartureSpeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+8, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAccelFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetDepartureFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDepartureFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicTakeoffModel, vtable_offset_local+17, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicTakeoffModel.__dict__ and type(IAircraftBasicTakeoffModel.__dict__[attrname]) == property:
            return IAircraftBasicTakeoffModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicTakeoffModel.")
    
    @property
    def TakeoffSpeed(self) -> float:
        """The speed to which the aircraft accelerates on its ground roll for takeoff."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TakeoffSpeedType(self) -> "AgEAvtrAirspeedType":
        """The takeoff speed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTakeoffSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the takeoff speed of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffSpeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def SeaLevelGroundRoll(self) -> float:
        """The distance the aircraft travels along the ground while accelerationg to takeoff at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSeaLevelGroundRoll"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SeaLevelGroundRoll.setter
    def SeaLevelGroundRoll(self, newVal:float) -> None:
        """The distance the aircraft travels along the ground while accelerationg to takeoff at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSeaLevelGroundRoll"](arg_newVal.COM_val))

    @property
    def DepartureSpeed(self) -> float:
        """The aircraft's speed upon leaving the ground."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DepartureSpeedType(self) -> "AgEAvtrAirspeedType":
        """The departure speed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDepartureSpeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the departure speed of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureSpeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def AccelFuelFlow(self) -> float:
        """The aircraft's fuel flow rate while accelerating during takeoff."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelFuelFlow.setter
    def AccelFuelFlow(self, newVal:float) -> None:
        """The aircraft's fuel flow rate while accelerating during takeoff."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelFuelFlow"](arg_newVal.COM_val))

    @property
    def DepartureFuelFlow(self) -> float:
        """The aircraft's fuel flow rate at departure speed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DepartureFuelFlow.setter
    def DepartureFuelFlow(self, newVal:float) -> None:
        """The aircraft's fuel flow rate at departure speed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureFuelFlow"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{981697a5-e6b3-45d7-a3d4-7caec2237c0a}", IAircraftBasicTakeoffModel)
agcls.AgTypeNameMap["IAircraftBasicTakeoffModel"] = IAircraftBasicTakeoffModel

class IAircraftAdvTakeoffModel(object):
    """Interface used to access the advanced takeoff model options for a takeoff model of an aircraft in the Aviator catalog."""
    _uuid = "{3290c530-62d6-49d7-8d89-69f0c3e6148d}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTakeoffSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_GetStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_SetStallSpeedRatio"] = _raise_uninitialized_error
        self.__dict__["_GetAngleOfAttack"] = _raise_uninitialized_error
        self.__dict__["_SetAngleOfAttack"] = _raise_uninitialized_error
        self.__dict__["_GetFlaps"] = _raise_uninitialized_error
        self.__dict__["_SetFlaps"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureSpeedMode"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureSpeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureSpeedLimitType"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureSpeedLimit"] = _raise_uninitialized_error
        self.__dict__["_GetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_SetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvTakeoffModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvTakeoffModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvTakeoffModel = agcom.GUID(IAircraftAdvTakeoffModel._uuid)
        vtable_offset_local = IAircraftAdvTakeoffModel._vtable_offset - 1
        self.__dict__["_GetTakeoffSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTakeoffSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStallSpeedRatio"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetAngleOfAttack"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetAngleOfAttack"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetFlaps"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFlaps"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetDepartureSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetDepartureSpeedMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetDepartureSpeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDepartureSpeedLimitType"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetDepartureSpeedLimit"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+13, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvTakeoffModel, vtable_offset_local+16, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvTakeoffModel.__dict__ and type(IAircraftAdvTakeoffModel.__dict__[attrname]) == property:
            return IAircraftAdvTakeoffModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvTakeoffModel.")
    
    @property
    def TakeoffSpeedMode(self) -> "AgEAvtrTakeoffLandingSpeedMode":
        """The mode to calculate the aircraft's airspeed upon leaving the ground."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffSpeedMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffSpeedMode.setter
    def TakeoffSpeedMode(self, newVal:"AgEAvtrTakeoffLandingSpeedMode") -> None:
        """The mode to calculate the aircraft's  airspeed upon leaving the ground."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffLandingSpeedMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffSpeedMode"](arg_newVal.COM_val))

    @property
    def StallSpeedRatio(self) -> float:
        """The ratio of the airspeed to the stall speed upon leaving the ground."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStallSpeedRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStallSpeedRatio(self, stallSpeedRatio:float) -> None:
        """Set the takeoff speed mode to StallSpeedRatio and specify the stall speed ratio."""
        with agmarshall.DOUBLE_arg(stallSpeedRatio) as arg_stallSpeedRatio:
            agcls.evaluate_hresult(self.__dict__["_SetStallSpeedRatio"](arg_stallSpeedRatio.COM_val))

    @property
    def AngleOfAttack(self) -> typing.Any:
        """The Angle of Attack upon leaving the ground."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngleOfAttack"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAngleOfAttack(self, angleOfAttack:typing.Any) -> None:
        """Set the takeoff speed mode to AngleOfAttack and specify the angle of attack"""
        with agmarshall.VARIANT_arg(angleOfAttack) as arg_angleOfAttack:
            agcls.evaluate_hresult(self.__dict__["_SetAngleOfAttack"](arg_angleOfAttack.COM_val))

    @property
    def Flaps(self) -> float:
        """The extension of the flaps during takeoff."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlaps"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Flaps.setter
    def Flaps(self, newVal:float) -> None:
        """The extension of the flaps during takeoff."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlaps"](arg_newVal.COM_val))

    @property
    def DepartureSpeedMode(self) -> "AgEAvtrDepartureSpeedMode":
        """The mode to calculate the airspeed upon leaving the ground."""
        with agmarshall.AgEnum_arg(AgEAvtrDepartureSpeedMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureSpeedMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DepartureSpeedMode.setter
    def DepartureSpeedMode(self, newVal:"AgEAvtrDepartureSpeedMode") -> None:
        """The mode to calculate the airspeed upon leaving the ground."""
        with agmarshall.AgEnum_arg(AgEAvtrDepartureSpeedMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureSpeedMode"](arg_newVal.COM_val))

    @property
    def DepartureSpeedLimit(self) -> float:
        """The aircraft's maximum airspeed upon leaving the ground."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureSpeedLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DepartureSpeedLimitType(self) -> "AgEAvtrAirspeedType":
        """The departure speed limim type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureSpeedLimitType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDepartureSpeedLimit(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the departure speed limit of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureSpeedLimit"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def UseAfterburner(self) -> bool:
        """Opt whether to use the afterburner if it is possible."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAfterburner"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt whether to use the afterburner if it is possible."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAfterburner"](arg_newVal.COM_val))

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{3290c530-62d6-49d7-8d89-69f0c3e6148d}", IAircraftAdvTakeoffModel)
agcls.AgTypeNameMap["IAircraftAdvTakeoffModel"] = IAircraftAdvTakeoffModel

class IAircraftVTOLModel(object):
    """Interface used to access the options for a VTOL performance model of an aircraft."""
    _uuid = "{e9a1ecac-84c0-4fed-bbfc-ae61a6b5d745}"
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxHoverAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaxHoverAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetHoverFuel"] = _raise_uninitialized_error
        self.__dict__["_SetHoverFuel"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalRate"] = _raise_uninitialized_error
        self.__dict__["_SetVerticalRate"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetVerticalTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationRate"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationRate"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightTransitionTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftVTOLModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftVTOLModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftVTOLModel = agcom.GUID(IAircraftVTOLModel._uuid)
        vtable_offset_local = IAircraftVTOLModel._vtable_offset - 1
        self.__dict__["_GetMaxHoverAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxHoverAltitude"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetHoverFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHoverFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetHeadingTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHeadingTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetVerticalRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVerticalRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetVerticalTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVerticalTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetTranslationRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationRate"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetTranslationTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTranslationTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_GetForwardFlightAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetForwardFlightAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+23, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+24, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IAircraftVTOLModel, vtable_offset_local+25, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftVTOLModel.__dict__ and type(IAircraftVTOLModel.__dict__[attrname]) == property:
            return IAircraftVTOLModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftVTOLModel.")
    
    @property
    def MaxHoverAltitude(self) -> float:
        """The maximum altitude at which the aircraft is capable of hovering."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxHoverAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxHoverAltitude.setter
    def MaxHoverAltitude(self, newVal:float) -> None:
        """The maximum altitude at which the aircraft is capable of hovering."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxHoverAltitude"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Get whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Put whether to use Aero/Propulsion fuel flow."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Get whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Put whether to scale fuel flow by non std density."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def HoverFuel(self) -> float:
        """The aircraft's fuel flow rate while hovering."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoverFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoverFuel.setter
    def HoverFuel(self, newVal:float) -> None:
        """The aircraft's fuel flow rate while hovering."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoverFuel"](arg_newVal.COM_val))

    @property
    def HeadingRate(self) -> typing.Any:
        """The rate at which the aircraft can change heading while hovering."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingRate.setter
    def HeadingRate(self, newVal:typing.Any) -> None:
        """The rate at which the aircraft can change heading while hovering."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingRate"](arg_newVal.COM_val))

    @property
    def HeadingTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to heading change maneuver mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingTransitionTime.setter
    def HeadingTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to heading change maneuver mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingTransitionTime"](arg_newVal.COM_val))

    @property
    def VerticalRate(self) -> float:
        """The aircraft's vertical rate."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VerticalRate.setter
    def VerticalRate(self, newVal:float) -> None:
        """The aircraft's vertical rate."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVerticalRate"](arg_newVal.COM_val))

    @property
    def VerticalTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to vertical maneuver mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VerticalTransitionTime.setter
    def VerticalTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to vertical maneuver mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVerticalTransitionTime"](arg_newVal.COM_val))

    @property
    def TranslationRate(self) -> float:
        """The rate at which the aircraft can translate while hovering."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TranslationRate.setter
    def TranslationRate(self, newVal:float) -> None:
        """The rate at which the aircraft can translate while hovering."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationRate"](arg_newVal.COM_val))

    @property
    def TranslationTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to translation maneuver mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TranslationTransitionTime.setter
    def TranslationTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to translation maneuver mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationTransitionTime"](arg_newVal.COM_val))

    @property
    def ForwardFlightAirspeed(self) -> float:
        """The speed at which the aircraft can begin forward flight."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ForwardFlightAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The forward flight airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetForwardFlightAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the speed at which the aircraft can begin forward flight."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def ForwardFlightTransitionTime(self) -> float:
        """The time required to transition from another maneuvering mode to forward flight at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightTransitionTime.setter
    def ForwardFlightTransitionTime(self, newVal:float) -> None:
        """The time required to transition from another maneuvering mode to forward flight at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightTransitionTime"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e9a1ecac-84c0-4fed-bbfc-ae61a6b5d745}", IAircraftVTOLModel)
agcls.AgTypeNameMap["IAircraftVTOLModel"] = IAircraftVTOLModel

class IAircraftTerrainFollow(object):
    """Interface used to access the TerrainFollow options for an aircraft in the Aviator catalog."""
    _uuid = "{293c033c-5053-4a55-bfbb-fd8ea210749f}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTerrainFollowByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftTerrainFollow._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftTerrainFollow from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftTerrainFollow = agcom.GUID(IAircraftTerrainFollow._uuid)
        vtable_offset_local = IAircraftTerrainFollow._vtable_offset - 1
        self.__dict__["_GetTerrainFollowByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollow, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollow, vtable_offset_local+2, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftTerrainFollow.__dict__ and type(IAircraftTerrainFollow.__dict__[attrname]) == property:
            return IAircraftTerrainFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftTerrainFollow.")
    
    def GetTerrainFollowByName(self, name:str) -> "IAircraftTerrainFollowModel":
        """Gets the TerrainFollow model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppTerrainFollowModel:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainFollowByName"](arg_name.COM_val, byref(arg_ppTerrainFollowModel.COM_val)))
            return arg_ppTerrainFollowModel.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{293c033c-5053-4a55-bfbb-fd8ea210749f}", IAircraftTerrainFollow)
agcls.AgTypeNameMap["IAircraftTerrainFollow"] = IAircraftTerrainFollow

class IPerformanceModelOptions(object):
    """Interface used to change the active performance model in a phase for a given model type."""
    _uuid = "{DE05DB32-36E7-4C14-916E-C626C4E084FD}"
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_LinkToCatalog"] = _raise_uninitialized_error
        self.__dict__["_CopyFromCatalog"] = _raise_uninitialized_error
        self.__dict__["_CreateNew"] = _raise_uninitialized_error
        self.__dict__["_Rename"] = _raise_uninitialized_error
        self.__dict__["_Delete"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetIsLinkedToCatalog"] = _raise_uninitialized_error
        self.__dict__["_GetProperties"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPerformanceModelOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPerformanceModelOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPerformanceModelOptions = agcom.GUID(IPerformanceModelOptions._uuid)
        vtable_offset_local = IPerformanceModelOptions._vtable_offset - 1
        self.__dict__["_LinkToCatalog"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+1, agcom.BSTR)
        self.__dict__["_CopyFromCatalog"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_CreateNew"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_Rename"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_Delete"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+5, )
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetIsLinkedToCatalog"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetProperties"] = IAGFUNCTYPE(pUnk, IID_IPerformanceModelOptions, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPerformanceModelOptions.__dict__ and type(IPerformanceModelOptions.__dict__[attrname]) == property:
            return IPerformanceModelOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPerformanceModelOptions.")
    
    def LinkToCatalog(self, name:str) -> None:
        """Link to the performance model in the catalog with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name:
            agcls.evaluate_hresult(self.__dict__["_LinkToCatalog"](arg_name.COM_val))

    def CopyFromCatalog(self, name:str) -> None:
        """Create a copy of the performance model in the catalog with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name:
            agcls.evaluate_hresult(self.__dict__["_CopyFromCatalog"](arg_name.COM_val))

    def CreateNew(self, type:str) -> None:
        """Create a new performance model of the given type."""
        with agmarshall.BSTR_arg(type) as arg_type:
            agcls.evaluate_hresult(self.__dict__["_CreateNew"](arg_type.COM_val))

    def Rename(self, type:str) -> None:
        """Rename the performance model."""
        with agmarshall.BSTR_arg(type) as arg_type:
            agcls.evaluate_hresult(self.__dict__["_Rename"](arg_type.COM_val))

    def Delete(self) -> None:
        """Delete the performance model."""
        agcls.evaluate_hresult(self.__dict__["_Delete"]())

    @property
    def Name(self) -> str:
        """Get the name of the performance model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def IsLinkedToCatalog(self) -> bool:
        """Get whether the performance model is linked to the catalog."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsLinkedToCatalog"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Properties(self) -> "IPerformanceModel":
        """Get the properties of the performance model."""
        with agmarshall.AgInterface_out_arg() as arg_ppPerfModel:
            agcls.evaluate_hresult(self.__dict__["_GetProperties"](byref(arg_ppPerfModel.COM_val)))
            return arg_ppPerfModel.python_val


agcls.AgClassCatalog.add_catalog_entry("{DE05DB32-36E7-4C14-916E-C626C4E084FD}", IPerformanceModelOptions)
agcls.AgTypeNameMap["IPerformanceModelOptions"] = IPerformanceModelOptions

class IAdvFixedWingTool(object):
    """Interface used to access the options for the Advanced Fixed Wing Tool of an aircraft."""
    _uuid = "{3722BD33-A1BE-48AD-AF6F-4AC40B19FBBA}"
    _num_methods = 41
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetWingArea"] = _raise_uninitialized_error
        self.__dict__["_SetWingArea"] = _raise_uninitialized_error
        self.__dict__["_GetFlapsArea"] = _raise_uninitialized_error
        self.__dict__["_SetFlapsArea"] = _raise_uninitialized_error
        self.__dict__["_GetSpeedbrakesArea"] = _raise_uninitialized_error
        self.__dict__["_SetSpeedbrakesArea"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaxMach"] = _raise_uninitialized_error
        self.__dict__["_SetMaxMach"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEAS"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEAS"] = _raise_uninitialized_error
        self.__dict__["_GetMinLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMinLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxTemperatureLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxTemperatureLimit"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetCacheAeroData"] = _raise_uninitialized_error
        self.__dict__["_SetCacheAeroData"] = _raise_uninitialized_error
        self.__dict__["_GetCacheFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetCacheFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetAeroModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetAeroModeAsSubsonic"] = _raise_uninitialized_error
        self.__dict__["_GetAeroModeAsSubSuperHypersonic"] = _raise_uninitialized_error
        self.__dict__["_GetAeroModeAsSupersonic"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetPowerplantStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsElectric"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsPiston"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsTurboprop"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsEmpiricalJetEngine"] = _raise_uninitialized_error
        self.__dict__["_CreateAllPerfModels"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsBasicTurbofan"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsBasicTurbojet"] = _raise_uninitialized_error
        self.__dict__["_GetPowerplantModeAsSubSuperHypersonic"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTool._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTool from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTool = agcom.GUID(IAdvFixedWingTool._uuid)
        vtable_offset_local = IAdvFixedWingTool._vtable_offset - 1
        self.__dict__["_GetWingArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetFlapsArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFlapsArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetSpeedbrakesArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpeedbrakesArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMaxEAS"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxEAS"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMinLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetUseMaxTemperatureLimit"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxTemperatureLimit"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetCacheAeroData"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCacheAeroData"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+22, agcom.VARIANT_BOOL)
        self.__dict__["_GetCacheFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+23, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCacheFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+24, agcom.VARIANT_BOOL)
        self.__dict__["_GetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+25, POINTER(agcom.LONG))
        self.__dict__["_SetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+26, agcom.LONG)
        self.__dict__["_GetAeroModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_GetAeroModeAsSubsonic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_GetAeroModeAsSubSuperHypersonic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+29, POINTER(agcom.PVOID))
        self.__dict__["_GetAeroModeAsSupersonic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantStrategy"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+31, POINTER(agcom.LONG))
        self.__dict__["_SetPowerplantStrategy"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+32, agcom.LONG)
        self.__dict__["_GetPowerplantModeAsElectric"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+34, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsPiston"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+35, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsTurboprop"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+36, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsEmpiricalJetEngine"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+37, POINTER(agcom.PVOID))
        self.__dict__["_CreateAllPerfModels"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+38, agcom.BSTR, agcom.VARIANT_BOOL, agcom.VARIANT_BOOL)
        self.__dict__["_GetPowerplantModeAsBasicTurbofan"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+39, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsBasicTurbojet"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+40, POINTER(agcom.PVOID))
        self.__dict__["_GetPowerplantModeAsSubSuperHypersonic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTool, vtable_offset_local+41, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTool.__dict__ and type(IAdvFixedWingTool.__dict__[attrname]) == property:
            return IAdvFixedWingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTool.")
    
    @property
    def WingArea(self) -> float:
        """The total surface area of the wing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingArea.setter
    def WingArea(self, newVal:float) -> None:
        """The total surface area of the wing."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingArea"](arg_newVal.COM_val))

    @property
    def FlapsArea(self) -> float:
        """The total surface area of the flaps."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlapsArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlapsArea.setter
    def FlapsArea(self, newVal:float) -> None:
        """The total surface area of the flaps."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlapsArea"](arg_newVal.COM_val))

    @property
    def SpeedbrakesArea(self) -> float:
        """The total surface area of the speedbrakes."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpeedbrakesArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpeedbrakesArea.setter
    def SpeedbrakesArea(self, newVal:float) -> None:
        """The total surface area of the speedbrakes."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpeedbrakesArea"](arg_newVal.COM_val))

    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAltitude"](arg_newVal.COM_val))

    @property
    def MaxMach(self) -> float:
        """The maximum mach number of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxMach.setter
    def MaxMach(self, newVal:float) -> None:
        """The maximum mach number of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxMach"](arg_newVal.COM_val))

    @property
    def MaxEAS(self) -> float:
        """The maximum equivalent airspeed of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEAS"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEAS.setter
    def MaxEAS(self, newVal:float) -> None:
        """The maximum equivalent airspeed of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEAS"](arg_newVal.COM_val))

    @property
    def MinLoadFactor(self) -> float:
        """The minimum load factor the aircraft can bear."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinLoadFactor.setter
    def MinLoadFactor(self, newVal:float) -> None:
        """The minimum load factor the aircraft can bear."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinLoadFactor"](arg_newVal.COM_val))

    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor the aircraft can bear."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLoadFactor.setter
    def MaxLoadFactor(self, newVal:float) -> None:
        """The maximum load factor the aircraft can bear."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLoadFactor"](arg_newVal.COM_val))

    @property
    def UseMaxTemperatureLimit(self) -> bool:
        """The option to limit the maximum speed of the aircraft so the specified temperature is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxTemperatureLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxTemperatureLimit.setter
    def UseMaxTemperatureLimit(self, newVal:bool) -> None:
        """The option to limit the maximum speed of the aircraft so the specified temperature is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxTemperatureLimit"](arg_newVal.COM_val))

    @property
    def MaxTemperature(self) -> float:
        """The maximum total temperature limit of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTemperature.setter
    def MaxTemperature(self, newVal:float) -> None:
        """The maximum total temperature limit of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTemperature"](arg_newVal.COM_val))

    @property
    def CacheAeroData(self) -> bool:
        """The option to store intermediate results for aerodynamics calculations."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCacheAeroData"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CacheAeroData.setter
    def CacheAeroData(self, newVal:bool) -> None:
        """The option to store intermediate results for aerodynamics calculations."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCacheAeroData"](arg_newVal.COM_val))

    @property
    def CacheFuelFlow(self) -> bool:
        """The option to store intermediate results for fuel flow calculations."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCacheFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CacheFuelFlow.setter
    def CacheFuelFlow(self, newVal:bool) -> None:
        """The option to store intermediate results for fuel flow calculations."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCacheFuelFlow"](arg_newVal.COM_val))

    @property
    def AeroStrategy(self) -> "AgEAvtrAdvFixedWingAeroStrategy":
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingAeroStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrAdvFixedWingAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingAeroStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAeroStrategy"](arg_newVal.COM_val))

    @property
    def AeroModeAsExternal(self) -> "IAdvFixedWingExternalAero":
        """Get the interface for an Extern File Aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AeroModeAsSubsonic(self) -> "IAdvFixedWingSubsonicAero":
        """Get the interface for a Subsonic Aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroModeAsSubsonic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AeroModeAsSubSuperHypersonic(self) -> "IAdvFixedWingSubSuperHypersonicAero":
        """Get the interface for a Sub/Super/Hypersonic Aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroModeAsSubSuperHypersonic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AeroModeAsSupersonic(self) -> "IAdvFixedWingSupersonicAero":
        """Get the interface for a Supersonic Aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroModeAsSupersonic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantStrategy(self) -> "AgEAvtrAdvFixedWingPowerplantStrategy":
        """The powerplant strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingPowerplantStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerplantStrategy.setter
    def PowerplantStrategy(self, newVal:"AgEAvtrAdvFixedWingPowerplantStrategy") -> None:
        """The powerplant  strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingPowerplantStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerplantStrategy"](arg_newVal.COM_val))

    @property
    def PowerplantModeAsElectric(self) -> "IAdvFixedWingElectricPowerplant":
        """Get the interface for an Electric Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsElectric"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsExternal(self) -> "IAdvFixedWingExternalProp":
        """Get the interface for an External Prop File Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsPiston(self) -> "IAdvFixedWingPistonPowerplant":
        """Get the interface for a Piston Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsPiston"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsTurboprop(self) -> "IAdvFixedWingTurbopropPowerplant":
        """Get the interface for a Turboprop Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsTurboprop"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsEmpiricalJetEngine(self) -> "IAdvFixedWingEmpiricalJetEngine":
        """Get the interface for an Empirical Jet Engine Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsEmpiricalJetEngine"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CreateAllPerfModels(self, name:str, overwrite:bool, makeDefault:bool) -> None:
        """Create a set of advanced performance models for the aircraft with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg(overwrite) as arg_overwrite, \
             agmarshall.VARIANT_BOOL_arg(makeDefault) as arg_makeDefault:
            agcls.evaluate_hresult(self.__dict__["_CreateAllPerfModels"](arg_name.COM_val, arg_overwrite.COM_val, arg_makeDefault.COM_val))

    @property
    def PowerplantModeAsBasicTurbofan(self) -> "IAdvFixedWingTurbofanBasicABProp":
        """Get the interface for a Turbofan - Basic w/ AB Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsBasicTurbofan"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsBasicTurbojet(self) -> "IAdvFixedWingTurbojetBasicABProp":
        """Get the interface for a Turbojet - Basic w/ AB Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsBasicTurbojet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PowerplantModeAsSubSuperHypersonic(self) -> "IAdvFixedWingSubSuperHypersonicProp":
        """Get the interface for a Sub/Super/Hypersoinc Powerplant strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantModeAsSubSuperHypersonic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3722BD33-A1BE-48AD-AF6F-4AC40B19FBBA}", IAdvFixedWingTool)
agcls.AgTypeNameMap["IAdvFixedWingTool"] = IAdvFixedWingTool

class IAdvFixedWingExternalAero(object):
    """Interface used to access the options for an external file aerodynamic strategy in the advanced fixed wing tool."""
    _uuid = "{7A440104-B346-417B-98CB-7718A5A95848}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetFilepath"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingExternalAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingExternalAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingExternalAero = agcom.GUID(IAdvFixedWingExternalAero._uuid)
        vtable_offset_local = IAdvFixedWingExternalAero._vtable_offset - 1
        self.__dict__["_GetFilepath"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalAero, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilepath"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalAero, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalAero, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingExternalAero.__dict__ and type(IAdvFixedWingExternalAero.__dict__[attrname]) == property:
            return IAdvFixedWingExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingExternalAero.")
    
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7A440104-B346-417B-98CB-7718A5A95848}", IAdvFixedWingExternalAero)
agcls.AgTypeNameMap["IAdvFixedWingExternalAero"] = IAdvFixedWingExternalAero

class IAdvFixedWingSubsonicAero(object):
    """Interface used to access the options for the subsonic aerodynamic strategy in the advanced fixed wing tool."""
    _uuid = "{9e4abf77-2ca1-4130-8ff8-e13d216d722b}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGeometryType"] = _raise_uninitialized_error
        self.__dict__["_SetGeometryType"] = _raise_uninitialized_error
        self.__dict__["_GetGeometryModeAsBasic"] = _raise_uninitialized_error
        self.__dict__["_GetGeometryModeAsVariable"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetCd0"] = _raise_uninitialized_error
        self.__dict__["_SetCd0"] = _raise_uninitialized_error
        self.__dict__["_GetMachDivergence"] = _raise_uninitialized_error
        self.__dict__["_SetMachDivergence"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMachDragFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingSubsonicAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingSubsonicAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingSubsonicAero = agcom.GUID(IAdvFixedWingSubsonicAero._uuid)
        vtable_offset_local = IAdvFixedWingSubsonicAero._vtable_offset - 1
        self.__dict__["_GetGeometryType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetGeometryType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetGeometryModeAsBasic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGeometryModeAsVariable"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetCd0"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCd0"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMachDivergence"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMachDivergence"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubsonicAero, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingSubsonicAero.__dict__ and type(IAdvFixedWingSubsonicAero.__dict__[attrname]) == property:
            return IAdvFixedWingSubsonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingSubsonicAero.")
    
    @property
    def GeometryType(self) -> "AgEAvtrAdvFixedWingGeometry":
        """The type of wing geometry for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GeometryType.setter
    def GeometryType(self, newVal:"AgEAvtrAdvFixedWingGeometry") -> None:
        """The type of wing geometry for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGeometryType"](arg_newVal.COM_val))

    @property
    def GeometryModeAsBasic(self) -> "IAdvFixedWingGeometryBasic":
        """The options for a basic geometry wing."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryModeAsBasic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GeometryModeAsVariable(self) -> "IAdvFixedWingGeometryVariable":
        """The options for a variable geometry wing."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryModeAsVariable"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAOA"](arg_newVal.COM_val))

    @property
    def Cd0(self) -> float:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCd0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Cd0.setter
    def Cd0(self, newVal:float) -> None:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCd0"](arg_newVal.COM_val))

    @property
    def MachDivergence(self) -> float:
        """The speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMachDivergence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MachDivergence.setter
    def MachDivergence(self, newVal:float) -> None:
        """The speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMachDivergence"](arg_newVal.COM_val))

    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying faster than the Mach Divergence."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMachDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying faster than the Mach Divergence."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMachDragFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9e4abf77-2ca1-4130-8ff8-e13d216d722b}", IAdvFixedWingSubsonicAero)
agcls.AgTypeNameMap["IAdvFixedWingSubsonicAero"] = IAdvFixedWingSubsonicAero

class IAdvFixedWingSubSuperHypersonicAero(object):
    """Interface used to access the options for the Sub/Super/Hypersonic aerodynamic strategy in the advanced fixed wing tool."""
    _uuid = "{c229225f-d608-457a-a100-7ef7a8618825}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMinMach"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMinMach"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_GetSuperHyperMachTransition"] = _raise_uninitialized_error
        self.__dict__["_SetSuperHyperMachTransition"] = _raise_uninitialized_error
        self.__dict__["_GetLeadingEdgeFrontalAreaRatio"] = _raise_uninitialized_error
        self.__dict__["_SetLeadingEdgeFrontalAreaRatio"] = _raise_uninitialized_error
        self.__dict__["_GetSubsonicAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_SetSubsonicAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_GetWaveDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetWaveDragFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingSubSuperHypersonicAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingSubSuperHypersonicAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingSubSuperHypersonicAero = agcom.GUID(IAdvFixedWingSubSuperHypersonicAero._uuid)
        vtable_offset_local = IAdvFixedWingSubSuperHypersonicAero._vtable_offset - 1
        self.__dict__["_GetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetTransonicMinMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMinMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetTransonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetSuperHyperMachTransition"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSuperHyperMachTransition"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetLeadingEdgeFrontalAreaRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLeadingEdgeFrontalAreaRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetSubsonicAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSubsonicAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetWaveDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWaveDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicAero, vtable_offset_local+16, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingSubSuperHypersonicAero.__dict__ and type(IAdvFixedWingSubSuperHypersonicAero.__dict__[attrname]) == property:
            return IAdvFixedWingSubSuperHypersonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingSubSuperHypersonicAero.")
    
    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAOA"](arg_newVal.COM_val))

    @property
    def TransonicMinMach(self) -> float:
        """The minimum speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMinMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMinMach.setter
    def TransonicMinMach(self, newVal:float) -> None:
        """The minimum speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMinMach"](arg_newVal.COM_val))

    @property
    def TransonicMaxMach(self) -> float:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMaxMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMaxMach.setter
    def TransonicMaxMach(self, newVal:float) -> None:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMaxMach"](arg_newVal.COM_val))

    @property
    def SuperHyperMachTransition(self) -> float:
        """The minimum speed at which the air flow will be treated as hypersonic."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSuperHyperMachTransition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SuperHyperMachTransition.setter
    def SuperHyperMachTransition(self, newVal:float) -> None:
        """The minimum speed at which the air flow will be treated as hypersonic."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSuperHyperMachTransition"](arg_newVal.COM_val))

    @property
    def LeadingEdgeFrontalAreaRatio(self) -> float:
        """The frontal face thickness of the aircraft's wings at their leading edge."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLeadingEdgeFrontalAreaRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LeadingEdgeFrontalAreaRatio.setter
    def LeadingEdgeFrontalAreaRatio(self, newVal:float) -> None:
        """The frontal face thickness of the aircraft's wings at their leading edge."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLeadingEdgeFrontalAreaRatio"](arg_newVal.COM_val))

    @property
    def SubsonicAspectRatio(self) -> float:
        """The aircraft's wingspan squared divided by the wing area."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSubsonicAspectRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SubsonicAspectRatio.setter
    def SubsonicAspectRatio(self, newVal:float) -> None:
        """The aircraft's wingspan squared divided by the wing area."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSubsonicAspectRatio"](arg_newVal.COM_val))

    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMachDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMachDragFactor"](arg_newVal.COM_val))

    @property
    def WaveDragFactor(self) -> float:
        """A scalar value that models drag produced by shock waves at or near the aircraft's critical Mach number."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWaveDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WaveDragFactor.setter
    def WaveDragFactor(self, newVal:float) -> None:
        """A scalar value that models drag produced by shock waves at or near the aircraft's critical Mach number."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWaveDragFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c229225f-d608-457a-a100-7ef7a8618825}", IAdvFixedWingSubSuperHypersonicAero)
agcls.AgTypeNameMap["IAdvFixedWingSubSuperHypersonicAero"] = IAdvFixedWingSubSuperHypersonicAero

class IAdvFixedWingSubSuperHypersonicProp(object):
    """Interface used to access the options for the Sub/Super/Hypersonic powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{1a204443-6853-4897-b530-6e7231607545}"
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTurbineMode"] = _raise_uninitialized_error
        self.__dict__["_SetTurbineMode"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineModeAsTurbojet"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineModeAsTurbofan"] = _raise_uninitialized_error
        self.__dict__["_GetRamjetMode"] = _raise_uninitialized_error
        self.__dict__["_SetRamjetMode"] = _raise_uninitialized_error
        self.__dict__["_GetRamjetModeAsBasic"] = _raise_uninitialized_error
        self.__dict__["_GetScramjetMode"] = _raise_uninitialized_error
        self.__dict__["_SetScramjetMode"] = _raise_uninitialized_error
        self.__dict__["_GetScramjetModeAsBasic"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetRamjetRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetScramjetRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTurbineCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTurbineCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTurbineBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTurbineBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetCanRamCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetCanRamCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetMustRamCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetMustRamCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRamScramCompressionTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRamScramCompressionTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRamScramBurnerTotalTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRamScramBurnerTotalTemperature"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingSubSuperHypersonicProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingSubSuperHypersonicProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingSubSuperHypersonicProp = agcom.GUID(IAdvFixedWingSubSuperHypersonicProp._uuid)
        vtable_offset_local = IAdvFixedWingSubSuperHypersonicProp._vtable_offset - 1
        self.__dict__["_GetTurbineMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTurbineMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetTurbineModeAsTurbojet"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetTurbineModeAsTurbofan"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetRamjetMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetRamjetMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetRamjetModeAsBasic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetScramjetMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetScramjetMode"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetScramjetModeAsBasic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetTurbineRefArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRamjetRefArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetScramjetRefArea"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaxTurbineCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTurbineCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetMaxTurbineBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTurbineBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetCanRamCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCanRamCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetMustRamCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMustRamCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetMaxRamScramCompressionTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRamScramCompressionTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetMaxRamScramBurnerTotalTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+24, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRamScramBurnerTotalTemperature"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSubSuperHypersonicProp, vtable_offset_local+25, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingSubSuperHypersonicProp.__dict__ and type(IAdvFixedWingSubSuperHypersonicProp.__dict__[attrname]) == property:
            return IAdvFixedWingSubSuperHypersonicProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingSubSuperHypersonicProp.")
    
    @property
    def TurbineMode(self) -> "AgEAvtrTurbineMode":
        """The turbine operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrTurbineMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurbineMode.setter
    def TurbineMode(self, newVal:"AgEAvtrTurbineMode") -> None:
        """The turbine operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrTurbineMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurbineMode"](arg_newVal.COM_val))

    @property
    def TurbineModeAsTurbojet(self) -> "IAdvFixedWingTurbojetBasicABProp":
        """Get the interface for a Turbojet Basic w/ AB tubrine mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineModeAsTurbojet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TurbineModeAsTurbofan(self) -> "IAdvFixedWingTurbofanBasicABProp":
        """Get the interface for a Turbojet Basic w/ AB tubrine mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineModeAsTurbofan"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RamjetMode(self) -> "AgEAvtrRamjetMode":
        """The ramjet operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRamjetMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRamjetMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RamjetMode.setter
    def RamjetMode(self, newVal:"AgEAvtrRamjetMode") -> None:
        """The ramjet operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRamjetMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRamjetMode"](arg_newVal.COM_val))

    @property
    def RamjetModeAsBasic(self) -> "IAdvFixedWingRamjetBasic":
        """Get the interface for a Ramjet - Basic."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRamjetModeAsBasic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScramjetMode(self) -> "AgEAvtrScramjetMode":
        """The scramjet operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrScramjetMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScramjetMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScramjetMode.setter
    def ScramjetMode(self, newVal:"AgEAvtrScramjetMode") -> None:
        """The scramjet operating mode."""
        with agmarshall.AgEnum_arg(AgEAvtrScramjetMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScramjetMode"](arg_newVal.COM_val))

    @property
    def ScramjetModeAsBasic(self) -> "IAdvFixedWingScramjetBasic":
        """Get the interface for a Scramjet - Basic."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScramjetModeAsBasic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TurbineRefArea(self) -> float:
        """The reference area used for the turbine operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RamjetRefArea(self) -> float:
        """The reference area used for the ramjet operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRamjetRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ScramjetRefArea(self) -> float:
        """The reference area used for the scramjet operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScramjetRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxTurbineCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage in the turbine operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTurbineCompressionTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTurbineCompressionTemp.setter
    def MaxTurbineCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage in the turbine operating mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTurbineCompressionTemp"](arg_newVal.COM_val))

    @property
    def MaxTurbineBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage in the turbine operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTurbineBurnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTurbineBurnerTemp.setter
    def MaxTurbineBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage in the turbine operating mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTurbineBurnerTemp"](arg_newVal.COM_val))

    @property
    def CanRamCompressorPressureRatio(self) -> float:
        """Can Ram compressor pressure ratio."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanRamCompressorPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CanRamCompressorPressureRatio.setter
    def CanRamCompressorPressureRatio(self, newVal:float) -> None:
        """Can Ram compressor pressure ratio."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCanRamCompressorPressureRatio"](arg_newVal.COM_val))

    @property
    def MustRamCompressorPressureRatio(self) -> float:
        """Must Ram compressor pressure ratio."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMustRamCompressorPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MustRamCompressorPressureRatio.setter
    def MustRamCompressorPressureRatio(self, newVal:float) -> None:
        """Must Ram compressor pressure ratio."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMustRamCompressorPressureRatio"](arg_newVal.COM_val))

    @property
    def MaxRamScramCompressionTemperature(self) -> float:
        """The maximum temperature at the compressor stage in the Ramjet or Scramjet operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRamScramCompressionTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRamScramCompressionTemperature.setter
    def MaxRamScramCompressionTemperature(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage in the Ramjet or Scramjet operating mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRamScramCompressionTemperature"](arg_newVal.COM_val))

    @property
    def MaxRamScramBurnerTotalTemperature(self) -> float:
        """The maximum temperature at the combustion stage in the Ramjet or Scramjet operating mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRamScramBurnerTotalTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRamScramBurnerTotalTemperature.setter
    def MaxRamScramBurnerTotalTemperature(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage in the Ramjet or Scramjet operating mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRamScramBurnerTotalTemperature"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1a204443-6853-4897-b530-6e7231607545}", IAdvFixedWingSubSuperHypersonicProp)
agcls.AgTypeNameMap["IAdvFixedWingSubSuperHypersonicProp"] = IAdvFixedWingSubSuperHypersonicProp

class IAdvFixedWingSupersonicAero(object):
    """Interface used to access the options for the supersonic aerodynamic strategy in the advanced fixed wing tool."""
    _uuid = "{8864671c-5df8-40d1-95db-a2f92c6016ea}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGeometryType"] = _raise_uninitialized_error
        self.__dict__["_SetGeometryType"] = _raise_uninitialized_error
        self.__dict__["_GetGeometryModeAsBasic"] = _raise_uninitialized_error
        self.__dict__["_GetGeometryModeAsVariable"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetSubsonicCd0"] = _raise_uninitialized_error
        self.__dict__["_SetSubsonicCd0"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMinMach"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMinMach"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_GetSupersonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_SetSupersonicMaxMach"] = _raise_uninitialized_error
        self.__dict__["_GetTransonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTransonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_GetSupersonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetSupersonicMachDragFactor"] = _raise_uninitialized_error
        self.__dict__["_GetLeadingEdgeSuctionEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetLeadingEdgeSuctionEfficiency"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingSupersonicAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingSupersonicAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingSupersonicAero = agcom.GUID(IAdvFixedWingSupersonicAero._uuid)
        vtable_offset_local = IAdvFixedWingSupersonicAero._vtable_offset - 1
        self.__dict__["_GetGeometryType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetGeometryType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetGeometryModeAsBasic"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetGeometryModeAsVariable"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetSubsonicCd0"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSubsonicCd0"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetTransonicMinMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMinMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetTransonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetSupersonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSupersonicMaxMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetSupersonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSupersonicMachDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLeadingEdgeSuctionEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLeadingEdgeSuctionEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingSupersonicAero, vtable_offset_local+20, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingSupersonicAero.__dict__ and type(IAdvFixedWingSupersonicAero.__dict__[attrname]) == property:
            return IAdvFixedWingSupersonicAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingSupersonicAero.")
    
    @property
    def GeometryType(self) -> "AgEAvtrAdvFixedWingGeometry":
        """The type of wing geometry for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GeometryType.setter
    def GeometryType(self, newVal:"AgEAvtrAdvFixedWingGeometry") -> None:
        """The type of wing geometry for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAdvFixedWingGeometry, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGeometryType"](arg_newVal.COM_val))

    @property
    def GeometryModeAsBasic(self) -> "IAdvFixedWingGeometryBasic":
        """The options for a basic geometry wing."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryModeAsBasic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def GeometryModeAsVariable(self) -> "IAdvFixedWingGeometryVariable":
        """The options for a variable geometry wing."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeometryModeAsVariable"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAOA"](arg_newVal.COM_val))

    @property
    def SubsonicCd0(self) -> float:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSubsonicCd0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SubsonicCd0.setter
    def SubsonicCd0(self, newVal:float) -> None:
        """The parasitic drag coefficient of the aircraft when flying at a speed less than the Mach Divergence."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSubsonicCd0"](arg_newVal.COM_val))

    @property
    def TransonicMinMach(self) -> float:
        """The minimum speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMinMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMinMach.setter
    def TransonicMinMach(self, newVal:float) -> None:
        """The minimum speed at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMinMach"](arg_newVal.COM_val))

    @property
    def TransonicMaxMach(self) -> float:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMaxMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMaxMach.setter
    def TransonicMaxMach(self, newVal:float) -> None:
        """The maximum speed, below supersonic, at which the aircraft begins to experience air compression."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMaxMach"](arg_newVal.COM_val))

    @property
    def SupersonicMaxMach(self) -> float:
        """The speed at which the Supersonic Mach Drag Factor is applied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupersonicMaxMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SupersonicMaxMach.setter
    def SupersonicMaxMach(self, newVal:float) -> None:
        """The speed at which the Supersonic Mach Drag Factor is applied."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSupersonicMaxMach"](arg_newVal.COM_val))

    @property
    def TransonicMachDragFactor(self) -> float:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransonicMachDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransonicMachDragFactor.setter
    def TransonicMachDragFactor(self, newVal:float) -> None:
        """A factor applied to the aircraft's parasitic drag coefficient when it is flying between the Transonic Min Mach and Transonic Mach Drag Factor speeds."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransonicMachDragFactor"](arg_newVal.COM_val))

    @property
    def SupersonicMachDragFactor(self) -> float:
        """A scalar value applied to the aircraft's parasitic drag coefficient when it is flying faster than the Supersonic Max Mach."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSupersonicMachDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SupersonicMachDragFactor.setter
    def SupersonicMachDragFactor(self, newVal:float) -> None:
        """A scalar value applied to the aircraft's parasitic drag coefficient when it is flying faster than the Supersonic Max Mach."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSupersonicMachDragFactor"](arg_newVal.COM_val))

    @property
    def LeadingEdgeSuctionEfficiency(self) -> float:
        """The ability of the wing's leading edge to ingest turbulent airflow and thereby reduce induced drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLeadingEdgeSuctionEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LeadingEdgeSuctionEfficiency.setter
    def LeadingEdgeSuctionEfficiency(self, newVal:float) -> None:
        """The ability of the wing's leading edge to ingest turbulent airflow and thereby reduce induced drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLeadingEdgeSuctionEfficiency"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8864671c-5df8-40d1-95db-a2f92c6016ea}", IAdvFixedWingSupersonicAero)
agcls.AgTypeNameMap["IAdvFixedWingSupersonicAero"] = IAdvFixedWingSupersonicAero

class IAdvFixedWingGeometryBasic(object):
    """Interface used to access the options for a basic geometry wing in the advanced fixed wing tool."""
    _uuid = "{56a5685f-3271-4635-9989-24663bd35e0d}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_SetAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_GetWingSweep"] = _raise_uninitialized_error
        self.__dict__["_SetWingSweep"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingGeometryBasic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingGeometryBasic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingGeometryBasic = agcom.GUID(IAdvFixedWingGeometryBasic._uuid)
        vtable_offset_local = IAdvFixedWingGeometryBasic._vtable_offset - 1
        self.__dict__["_GetAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryBasic, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryBasic, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetWingSweep"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryBasic, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetWingSweep"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryBasic, vtable_offset_local+4, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingGeometryBasic.__dict__ and type(IAdvFixedWingGeometryBasic.__dict__[attrname]) == property:
            return IAdvFixedWingGeometryBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingGeometryBasic.")
    
    @property
    def AspectRatio(self) -> float:
        """The wing sweep of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAspectRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAspectRatio(self, aspectRatio:float) -> None:
        """The wing sweep of the aircraft."""
        with agmarshall.DOUBLE_arg(aspectRatio) as arg_aspectRatio:
            agcls.evaluate_hresult(self.__dict__["_SetAspectRatio"](arg_aspectRatio.COM_val))

    @property
    def WingSweep(self) -> typing.Any:
        """The wing sweep of the aircraft."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingSweep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingSweep.setter
    def WingSweep(self, newVal:typing.Any) -> None:
        """The wing sweep of the aircraft."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingSweep"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{56a5685f-3271-4635-9989-24663bd35e0d}", IAdvFixedWingGeometryBasic)
agcls.AgTypeNameMap["IAdvFixedWingGeometryBasic"] = IAdvFixedWingGeometryBasic

class IAdvFixedWingGeometryVariable(object):
    """Interface used to access the options for a variable geometry wing in the advanced fixed wing tool."""
    _uuid = "{e6f7e882-f360-4744-858a-7ea1eb2104c6}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_SetAspectRatio"] = _raise_uninitialized_error
        self.__dict__["_GetStartSweepMach"] = _raise_uninitialized_error
        self.__dict__["_SetStartSweepMach"] = _raise_uninitialized_error
        self.__dict__["_GetStopSweepMach"] = _raise_uninitialized_error
        self.__dict__["_SetStopSweepMach"] = _raise_uninitialized_error
        self.__dict__["_GetMinSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMinSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSweepAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingGeometryVariable._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingGeometryVariable from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingGeometryVariable = agcom.GUID(IAdvFixedWingGeometryVariable._uuid)
        vtable_offset_local = IAdvFixedWingGeometryVariable._vtable_offset - 1
        self.__dict__["_GetAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAspectRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetStartSweepMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStartSweepMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetStopSweepMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopSweepMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMinSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetMinSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetMaxSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingGeometryVariable, vtable_offset_local+10, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingGeometryVariable.__dict__ and type(IAdvFixedWingGeometryVariable.__dict__[attrname]) == property:
            return IAdvFixedWingGeometryVariable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingGeometryVariable.")
    
    @property
    def AspectRatio(self) -> float:
        """The wing sweep of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAspectRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAspectRatio(self, aspectRatio:float) -> None:
        """The wing sweep of the aircraft."""
        with agmarshall.DOUBLE_arg(aspectRatio) as arg_aspectRatio:
            agcls.evaluate_hresult(self.__dict__["_SetAspectRatio"](arg_aspectRatio.COM_val))

    @property
    def StartSweepMach(self) -> float:
        """The mach number at which the wings start to sweep from the min sweep angle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartSweepMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartSweepMach.setter
    def StartSweepMach(self, newVal:float) -> None:
        """The mach number at which the wings start to sweep from the min sweep angle."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartSweepMach"](arg_newVal.COM_val))

    @property
    def StopSweepMach(self) -> float:
        """The mach number at which the wings are swept to the max sweep angle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopSweepMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopSweepMach.setter
    def StopSweepMach(self, newVal:float) -> None:
        """The mach number at which the wings are swept to the max sweep angle."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopSweepMach"](arg_newVal.COM_val))

    @property
    def MinSweepAngle(self) -> typing.Any:
        """The minimum sweep angle of the wings."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinSweepAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinSweepAngle.setter
    def MinSweepAngle(self, newVal:typing.Any) -> None:
        """The minimum sweep angle of the wings."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinSweepAngle"](arg_newVal.COM_val))

    @property
    def MaxSweepAngle(self) -> typing.Any:
        """The maximum sweep angle of the wings."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSweepAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSweepAngle.setter
    def MaxSweepAngle(self, newVal:typing.Any) -> None:
        """The maximum sweep angle of the wings."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSweepAngle"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e6f7e882-f360-4744-858a-7ea1eb2104c6}", IAdvFixedWingGeometryVariable)
agcls.AgTypeNameMap["IAdvFixedWingGeometryVariable"] = IAdvFixedWingGeometryVariable

class IAdvFixedWingElectricPowerplant(object):
    """Interface used to access the options for the Electric powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{285ba7fc-1c89-49e1-983b-bf16ce641584}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxPower"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPower"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerDiameter"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingElectricPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingElectricPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingElectricPowerplant = agcom.GUID(IAdvFixedWingElectricPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingElectricPowerplant._vtable_offset - 1
        self.__dict__["_GetMaxPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingElectricPowerplant, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingElectricPowerplant.__dict__ and type(IAdvFixedWingElectricPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingElectricPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingElectricPowerplant.")
    
    @property
    def MaxPower(self) -> float:
        """The maximum power of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPower.setter
    def MaxPower(self, newVal:float) -> None:
        """The maximum power of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPower"](arg_newVal.COM_val))

    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerCount"](arg_newVal.COM_val))

    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerDiameter"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{285ba7fc-1c89-49e1-983b-bf16ce641584}", IAdvFixedWingElectricPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingElectricPowerplant"] = IAdvFixedWingElectricPowerplant

class IAdvFixedWingExternalProp(object):
    """Interface used to access the options for the External Prop File powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{a886a5d9-63f4-455c-9cda-bce9c81d941d}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetFilepath"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingExternalProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingExternalProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingExternalProp = agcom.GUID(IAdvFixedWingExternalProp._uuid)
        vtable_offset_local = IAdvFixedWingExternalProp._vtable_offset - 1
        self.__dict__["_GetFilepath"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalProp, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilepath"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalProp, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingExternalProp, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingExternalProp.__dict__ and type(IAdvFixedWingExternalProp.__dict__[attrname]) == property:
            return IAdvFixedWingExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingExternalProp.")
    
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{a886a5d9-63f4-455c-9cda-bce9c81d941d}", IAdvFixedWingExternalProp)
agcls.AgTypeNameMap["IAdvFixedWingExternalProp"] = IAdvFixedWingExternalProp

class IAdvFixedWingPistonPowerplant(object):
    """Interface used to access the options for the Piston powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{891f9708-b367-447d-9e25-bb8fb24d6c83}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxSeaLevelStaticPower"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSeaLevelStaticPower"] = _raise_uninitialized_error
        self.__dict__["_GetCriticalAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetCriticalAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingPistonPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingPistonPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingPistonPowerplant = agcom.GUID(IAdvFixedWingPistonPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingPistonPowerplant._vtable_offset - 1
        self.__dict__["_GetMaxSeaLevelStaticPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSeaLevelStaticPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetCriticalAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCriticalAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingPistonPowerplant, vtable_offset_local+10, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingPistonPowerplant.__dict__ and type(IAdvFixedWingPistonPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingPistonPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingPistonPowerplant.")
    
    @property
    def MaxSeaLevelStaticPower(self) -> float:
        """The maximum static power of the engine at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSeaLevelStaticPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSeaLevelStaticPower.setter
    def MaxSeaLevelStaticPower(self, newVal:float) -> None:
        """The maximum static power of the engine at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSeaLevelStaticPower"](arg_newVal.COM_val))

    @property
    def CriticalAltitude(self) -> float:
        """The engine's critical altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCriticalAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CriticalAltitude.setter
    def CriticalAltitude(self, newVal:float) -> None:
        """The engine's critical altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCriticalAltitude"](arg_newVal.COM_val))

    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerCount"](arg_newVal.COM_val))

    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerDiameter"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{891f9708-b367-447d-9e25-bb8fb24d6c83}", IAdvFixedWingPistonPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingPistonPowerplant"] = IAdvFixedWingPistonPowerplant

class IAdvFixedWingTurbopropPowerplant(object):
    """Interface used to access the options for the Turboprop powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{04fd63b4-761a-49b4-8a9c-c1610f676993}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxSeaLevelStaticPower"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSeaLevelStaticPower"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerCount"] = _raise_uninitialized_error
        self.__dict__["_GetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetPropellerDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTurbopropPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTurbopropPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTurbopropPowerplant = agcom.GUID(IAdvFixedWingTurbopropPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingTurbopropPowerplant._vtable_offset - 1
        self.__dict__["_GetMaxSeaLevelStaticPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSeaLevelStaticPower"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetPropellerCount"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellerDiameter"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbopropPowerplant, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTurbopropPowerplant.__dict__ and type(IAdvFixedWingTurbopropPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingTurbopropPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTurbopropPowerplant.")
    
    @property
    def MaxSeaLevelStaticPower(self) -> float:
        """The maximum static power of the engine at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSeaLevelStaticPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSeaLevelStaticPower.setter
    def MaxSeaLevelStaticPower(self, newVal:float) -> None:
        """The maximum static power of the engine at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSeaLevelStaticPower"](arg_newVal.COM_val))

    @property
    def PropellerCount(self) -> int:
        """The number of propellers."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerCount.setter
    def PropellerCount(self, newVal:int) -> None:
        """The number of propellers."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerCount"](arg_newVal.COM_val))

    @property
    def PropellerDiameter(self) -> float:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellerDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellerDiameter.setter
    def PropellerDiameter(self, newVal:float) -> None:
        """The propeller diameter."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellerDiameter"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{04fd63b4-761a-49b4-8a9c-c1610f676993}", IAdvFixedWingTurbopropPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingTurbopropPowerplant"] = IAdvFixedWingTurbopropPowerplant

class IAdvFixedWingEmpiricalJetEngine(object):
    """Interface used to access the options for the Sub/Super/Hypersonic powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{f8fa49f0-f901-4b85-ac60-0712141db32c}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxSeaLevelStaticThrust"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSeaLevelStaticThrust"] = _raise_uninitialized_error
        self.__dict__["_GetDesignPointAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignPointAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignPointMachNumber"] = _raise_uninitialized_error
        self.__dict__["_SetDesignPointMachNumber"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingEmpiricalJetEngine._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingEmpiricalJetEngine from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingEmpiricalJetEngine = agcom.GUID(IAdvFixedWingEmpiricalJetEngine._uuid)
        vtable_offset_local = IAdvFixedWingEmpiricalJetEngine._vtable_offset - 1
        self.__dict__["_GetMaxSeaLevelStaticThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSeaLevelStaticThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDesignPointAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignPointAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignPointMachNumber"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignPointMachNumber"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingEmpiricalJetEngine, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingEmpiricalJetEngine.__dict__ and type(IAdvFixedWingEmpiricalJetEngine.__dict__[attrname]) == property:
            return IAdvFixedWingEmpiricalJetEngine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingEmpiricalJetEngine.")
    
    @property
    def MaxSeaLevelStaticThrust(self) -> float:
        """The maximum static thrust of the engine at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSeaLevelStaticThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSeaLevelStaticThrust.setter
    def MaxSeaLevelStaticThrust(self, newVal:float) -> None:
        """The maximum static thrust of the engine at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSeaLevelStaticThrust"](arg_newVal.COM_val))

    @property
    def DesignPointAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignPointAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignPointAltitude.setter
    def DesignPointAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignPointAltitude"](arg_newVal.COM_val))

    @property
    def DesignPointMachNumber(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignPointMachNumber"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignPointMachNumber.setter
    def DesignPointMachNumber(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignPointMachNumber"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The engine's fuel flow at max power."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f8fa49f0-f901-4b85-ac60-0712141db32c}", IAdvFixedWingEmpiricalJetEngine)
agcls.AgTypeNameMap["IAdvFixedWingEmpiricalJetEngine"] = IAdvFixedWingEmpiricalJetEngine

class IAdvFixedWingTurbojetBasicABProp(object):
    """Interface used to access the options for the Turbojet - Basic w/AB (Thermodynamic) powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{7ff41deb-7c10-42ac-8805-0b251e250018}"
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCanUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_SetCanUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetAfterburnerOn"] = _raise_uninitialized_error
        self.__dict__["_SetAfterburnerOn"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAfterburnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAfterburnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetHPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetHPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetLPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetLPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetEfficienciesAndLosses"] = _raise_uninitialized_error
        self.__dict__["_GetFuelType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelType"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsAFPROP"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsCEA"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTurbojetBasicABProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTurbojetBasicABProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTurbojetBasicABProp = agcom.GUID(IAdvFixedWingTurbojetBasicABProp._uuid)
        vtable_offset_local = IAdvFixedWingTurbojetBasicABProp._vtable_offset - 1
        self.__dict__["_GetCanUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCanUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAfterburnerOn"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAfterburnerOn"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAfterburnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAfterburnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetEfficienciesAndLosses"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetFuelModeAsAFPROP"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelModeAsCEA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbojetBasicABProp, vtable_offset_local+25, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTurbojetBasicABProp.__dict__ and type(IAdvFixedWingTurbojetBasicABProp.__dict__[attrname]) == property:
            return IAdvFixedWingTurbojetBasicABProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTurbojetBasicABProp.")
    
    @property
    def CanUseAfterburner(self) -> bool:
        """Opt whether the engine has an afterburner."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanUseAfterburner"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CanUseAfterburner.setter
    def CanUseAfterburner(self, newVal:bool) -> None:
        """Opt whether the engine has an afterburner."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCanUseAfterburner"](arg_newVal.COM_val))

    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def AfterburnerOn(self) -> bool:
        """Opt whether to specify the design point with the afterburner on. """
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAfterburnerOn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AfterburnerOn.setter
    def AfterburnerOn(self, newVal:bool) -> None:
        """Opt whether to specify the design point with the afterburner on."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAfterburnerOn"](arg_newVal.COM_val))

    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCompressionTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCompressionTemp"](arg_newVal.COM_val))

    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxBurnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxBurnerTemp"](arg_newVal.COM_val))

    @property
    def MaxAfterburnerTemp(self) -> float:
        """The maximum temperature at the afterburner."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAfterburnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAfterburnerTemp.setter
    def MaxAfterburnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the afterburner."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAfterburnerTemp"](arg_newVal.COM_val))

    @property
    def HPCPressureRatio(self) -> float:
        """The pressure ratio of the high-pressure compressor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHPCPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HPCPressureRatio.setter
    def HPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the high-pressure compressor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHPCPressureRatio"](arg_newVal.COM_val))

    @property
    def LPCPressureRatio(self) -> float:
        """The pressure ratio of the low-pressure compressor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLPCPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LPCPressureRatio.setter
    def LPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the low-pressure compressor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLPCPressureRatio"](arg_newVal.COM_val))

    @property
    def EfficienciesAndLosses(self) -> "IPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEfficienciesAndLosses"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelType"](arg_newVal.COM_val))

    @property
    def FuelModeAsAFPROP(self) -> "IFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsAFPROP"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelModeAsCEA(self) -> "IFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsCEA"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7ff41deb-7c10-42ac-8805-0b251e250018}", IAdvFixedWingTurbojetBasicABProp)
agcls.AgTypeNameMap["IAdvFixedWingTurbojetBasicABProp"] = IAdvFixedWingTurbojetBasicABProp

class IAdvFixedWingTurbofanBasicABProp(object):
    """Interface used to access the options for the Turbofan - Basic w/AB (Thermodynamic) powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{f26a8761-895c-47b1-9836-9278313cf45d}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCanUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_SetCanUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetAfterburnerOn"] = _raise_uninitialized_error
        self.__dict__["_SetAfterburnerOn"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAfterburnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAfterburnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetHPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetHPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetLPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetLPCPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetFanPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetFanPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetEfficienciesAndLosses"] = _raise_uninitialized_error
        self.__dict__["_GetFuelType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelType"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsAFPROP"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsCEA"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTurbofanBasicABProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTurbofanBasicABProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTurbofanBasicABProp = agcom.GUID(IAdvFixedWingTurbofanBasicABProp._uuid)
        vtable_offset_local = IAdvFixedWingTurbofanBasicABProp._vtable_offset - 1
        self.__dict__["_GetCanUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCanUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAfterburnerOn"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAfterburnerOn"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAfterburnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAfterburnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLPCPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetFanPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFanPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetEfficienciesAndLosses"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetFuelModeAsAFPROP"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+26, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelModeAsCEA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingTurbofanBasicABProp, vtable_offset_local+27, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTurbofanBasicABProp.__dict__ and type(IAdvFixedWingTurbofanBasicABProp.__dict__[attrname]) == property:
            return IAdvFixedWingTurbofanBasicABProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTurbofanBasicABProp.")
    
    @property
    def CanUseAfterburner(self) -> bool:
        """Opt whether the engine has an afterburner."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanUseAfterburner"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CanUseAfterburner.setter
    def CanUseAfterburner(self, newVal:bool) -> None:
        """Opt whether the engine has an afterburner."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCanUseAfterburner"](arg_newVal.COM_val))

    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def AfterburnerOn(self) -> bool:
        """Opt whether to specify the design point with the afterburner on. """
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAfterburnerOn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AfterburnerOn.setter
    def AfterburnerOn(self, newVal:bool) -> None:
        """Opt whether to specify the design point with the afterburner on."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAfterburnerOn"](arg_newVal.COM_val))

    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCompressionTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCompressionTemp"](arg_newVal.COM_val))

    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxBurnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxBurnerTemp"](arg_newVal.COM_val))

    @property
    def MaxAfterburnerTemp(self) -> float:
        """The maximum temperature at the afterburner."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAfterburnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAfterburnerTemp.setter
    def MaxAfterburnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the afterburner."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAfterburnerTemp"](arg_newVal.COM_val))

    @property
    def HPCPressureRatio(self) -> float:
        """The pressure ratio of the high-pressure compressor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHPCPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HPCPressureRatio.setter
    def HPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the high-pressure compressor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHPCPressureRatio"](arg_newVal.COM_val))

    @property
    def LPCPressureRatio(self) -> float:
        """The pressure ratio of the low-pressure compressor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLPCPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LPCPressureRatio.setter
    def LPCPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the low-pressure compressor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLPCPressureRatio"](arg_newVal.COM_val))

    @property
    def FanPressureRatio(self) -> float:
        """The pressure ratio of the fan."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFanPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FanPressureRatio.setter
    def FanPressureRatio(self, newVal:float) -> None:
        """The pressure ratio of the fan."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFanPressureRatio"](arg_newVal.COM_val))

    @property
    def EfficienciesAndLosses(self) -> "IPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEfficienciesAndLosses"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelType"](arg_newVal.COM_val))

    @property
    def FuelModeAsAFPROP(self) -> "IFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsAFPROP"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelModeAsCEA(self) -> "IFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsCEA"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f26a8761-895c-47b1-9836-9278313cf45d}", IAdvFixedWingTurbofanBasicABProp)
agcls.AgTypeNameMap["IAdvFixedWingTurbofanBasicABProp"] = IAdvFixedWingTurbofanBasicABProp

class IAviatorVehicle(object):
    """Interface for a vehicle in Aviator."""
    _uuid = "{9be54cfc-ba13-4a27-a829-2e10e04f2beb}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAviatorVehicle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAviatorVehicle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAviatorVehicle = agcom.GUID(IAviatorVehicle._uuid)
        vtable_offset_local = IAviatorVehicle._vtable_offset - 1
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAviatorVehicle, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAviatorVehicle.__dict__ and type(IAviatorVehicle.__dict__[attrname]) == property:
            return IAviatorVehicle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAviatorVehicle.")
    
    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{9be54cfc-ba13-4a27-a829-2e10e04f2beb}", IAviatorVehicle)
agcls.AgTypeNameMap["IAviatorVehicle"] = IAviatorVehicle

class IMissileModel(object):
    """Interface used to access the missile options in the Aviator catalog."""
    _uuid = "{80168c56-998d-45e3-9a93-e0511478a44b}"
    _num_methods = 47
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverMode"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverModeHelper"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetClimbAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetClimbAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetClimbAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetClimbMaxFPA"] = _raise_uninitialized_error
        self.__dict__["_SetClimbMaxFPA"] = _raise_uninitialized_error
        self.__dict__["_GetClimbMinFPA"] = _raise_uninitialized_error
        self.__dict__["_SetClimbMinFPA"] = _raise_uninitialized_error
        self.__dict__["_GetClimbFailOnInsufficientPerformance"] = _raise_uninitialized_error
        self.__dict__["_SetClimbFailOnInsufficientPerformance"] = _raise_uninitialized_error
        self.__dict__["_GetCruiseMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetCruiseMaxAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetCruiseMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetCruiseDefaultAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetCruiseDefaultAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDescentAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetDescentAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetDescentAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetDescentMaxFPA"] = _raise_uninitialized_error
        self.__dict__["_SetDescentMaxFPA"] = _raise_uninitialized_error
        self.__dict__["_GetDescentMinFPA"] = _raise_uninitialized_error
        self.__dict__["_SetDescentMinFPA"] = _raise_uninitialized_error
        self.__dict__["_GetDescentFailOnInsufficientPerformance"] = _raise_uninitialized_error
        self.__dict__["_SetDescentFailOnInsufficientPerformance"] = _raise_uninitialized_error
        self.__dict__["_GetUseTotalTempLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseTotalTempLimit"] = _raise_uninitialized_error
        self.__dict__["_GetTotalTempLimit"] = _raise_uninitialized_error
        self.__dict__["_SetTotalTempLimit"] = _raise_uninitialized_error
        self.__dict__["_GetUseMachLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseMachLimit"] = _raise_uninitialized_error
        self.__dict__["_GetMachLimit"] = _raise_uninitialized_error
        self.__dict__["_SetMachLimit"] = _raise_uninitialized_error
        self.__dict__["_GetUseEASLimit"] = _raise_uninitialized_error
        self.__dict__["_SetUseEASLimit"] = _raise_uninitialized_error
        self.__dict__["_GetEASLimit"] = _raise_uninitialized_error
        self.__dict__["_SetEASLimit"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultConfiguration"] = _raise_uninitialized_error
        self.__dict__["_GetAerodynamics"] = _raise_uninitialized_error
        self.__dict__["_GetPropulsion"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileModel = agcom.GUID(IMissileModel._uuid)
        vtable_offset_local = IMissileModel._vtable_offset - 1
        self.__dict__["_GetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetManeuverMode"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetManeuverModeHelper"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetAttitudeTransitions"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetClimbAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_GetClimbAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetClimbAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetClimbMaxFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetClimbMaxFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetClimbMinFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetClimbMinFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+15, agcom.VARIANT)
        self.__dict__["_GetClimbFailOnInsufficientPerformance"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClimbFailOnInsufficientPerformance"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetCruiseMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_GetCruiseMaxAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetCruiseMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+20, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCruiseDefaultAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCruiseDefaultAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetDescentAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDescentAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetDescentAirspeed"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+25, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetDescentMaxFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+26, POINTER(agcom.VARIANT))
        self.__dict__["_SetDescentMaxFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+27, agcom.VARIANT)
        self.__dict__["_GetDescentMinFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+28, POINTER(agcom.VARIANT))
        self.__dict__["_SetDescentMinFPA"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+29, agcom.VARIANT)
        self.__dict__["_GetDescentFailOnInsufficientPerformance"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+30, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDescentFailOnInsufficientPerformance"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+31, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseTotalTempLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+32, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTotalTempLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+33, agcom.VARIANT_BOOL)
        self.__dict__["_GetTotalTempLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+34, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTotalTempLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+35, agcom.DOUBLE)
        self.__dict__["_GetUseMachLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+36, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMachLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+37, agcom.VARIANT_BOOL)
        self.__dict__["_GetMachLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+38, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMachLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+39, agcom.DOUBLE)
        self.__dict__["_GetUseEASLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+40, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseEASLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+41, agcom.VARIANT_BOOL)
        self.__dict__["_GetEASLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+42, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEASLimit"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+43, agcom.DOUBLE)
        self.__dict__["_GetDefaultConfiguration"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+44, POINTER(agcom.PVOID))
        self.__dict__["_GetAerodynamics"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+45, POINTER(agcom.PVOID))
        self.__dict__["_GetPropulsion"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+46, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IMissileModel, vtable_offset_local+47, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileModel.__dict__ and type(IMissileModel.__dict__[attrname]) == property:
            return IMissileModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileModel.")
    
    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor that the missile can withstand while maneuvering."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLoadFactor.setter
    def MaxLoadFactor(self, pVal:float) -> None:
        """The maximum load factor that the missile can withstand while maneuvering."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLoadFactor"](arg_pVal.COM_val))

    @property
    def ManeuverMode(self) -> "AgEAvtrAccelManeuverMode":
        """The mode that the missile will adhere to the specified load factor. Scale by atmospheric density will cause the missile to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverMode.setter
    def ManeuverMode(self, newVal:"AgEAvtrAccelManeuverMode") -> None:
        """The mode that the missile will adhere to the specified load factor. Scale by atmospheric density will cause the missile to consider dynamic pressure when calculating turn radius."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverMode"](arg_newVal.COM_val))

    @property
    def ManeuverModeHelper(self) -> "IAeroPropManeuverModeHelper":
        """Get the interface for the Aero/Prop Maneuver Mode helper. The maneuver mode must be set to Aero/Prop to access this interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverModeHelper"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AttitudeTransitions(self) -> "IAttitudeTransitions":
        """Get the attitude transitions interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeTransitions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def IgnoreFPAForClimbDescentTransitions(self) -> bool:
        """Opt whether to ignore the flight path angle limits for climb and descent transitions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IgnoreFPAForClimbDescentTransitions.setter
    def IgnoreFPAForClimbDescentTransitions(self, pVal:bool) -> None:
        """Opt whether to ignore the flight path angle limits for climb and descent transitions."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"](arg_pVal.COM_val))

    @property
    def ClimbAirspeed(self) -> float:
        """The standard airspeed of the missile while climbing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ClimbAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The climb airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetClimbAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's climb airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetClimbAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def ClimbMaxFPA(self) -> typing.Any:
        """The maximum flight path angle of the missile's flight path while climbing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbMaxFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClimbMaxFPA.setter
    def ClimbMaxFPA(self, pVal:typing.Any) -> None:
        """The maximum flight path angle of the missile's flight path while climbing."""
        with agmarshall.VARIANT_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetClimbMaxFPA"](arg_pVal.COM_val))

    @property
    def ClimbMinFPA(self) -> typing.Any:
        """The minimum flight path angle of the missile's flight path while climbing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbMinFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClimbMinFPA.setter
    def ClimbMinFPA(self, pVal:typing.Any) -> None:
        """The minimum flight path angle of the missile's flight path while climbing."""
        with agmarshall.VARIANT_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetClimbMinFPA"](arg_pVal.COM_val))

    @property
    def ClimbFailOnInsufficientPerformance(self) -> bool:
        """Opt whether to fail while climbing if there is insufficient specific excess power."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbFailOnInsufficientPerformance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClimbFailOnInsufficientPerformance.setter
    def ClimbFailOnInsufficientPerformance(self, pVal:bool) -> None:
        """Opt whether to fail while climbing if there is insufficient specific excess power."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetClimbFailOnInsufficientPerformance"](arg_pVal.COM_val))

    @property
    def CruiseMaxAirspeed(self) -> float:
        """The maximum airspeed of the missile while cruising."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseMaxAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CruiseMaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The cruise airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseMaxAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetCruiseMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's max cruise airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetCruiseMaxAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def CruiseDefaultAltitude(self) -> float:
        """The missile's default cruising altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseDefaultAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CruiseDefaultAltitude.setter
    def CruiseDefaultAltitude(self, pVal:float) -> None:
        """The missile's default cruising altitude."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCruiseDefaultAltitude"](arg_pVal.COM_val))

    @property
    def DescentAirspeed(self) -> float:
        """The standard airspeed of the missile while descending."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DescentAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The descent airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDescentAirspeed(self, airspeedType:"AgEAvtrAirspeedType", aispeed:float) -> None:
        """Set the missile's descent airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(aispeed) as arg_aispeed:
            agcls.evaluate_hresult(self.__dict__["_SetDescentAirspeed"](arg_airspeedType.COM_val, arg_aispeed.COM_val))

    @property
    def DescentMaxFPA(self) -> typing.Any:
        """The maximum flight path angle of the missile's flight path while descending."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentMaxFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentMaxFPA.setter
    def DescentMaxFPA(self, pVal:typing.Any) -> None:
        """The maximum flight path angle of the missile's flight path while descending."""
        with agmarshall.VARIANT_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentMaxFPA"](arg_pVal.COM_val))

    @property
    def DescentMinFPA(self) -> typing.Any:
        """The minimum flight path angle of the missile's flight path while descending."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentMinFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentMinFPA.setter
    def DescentMinFPA(self, pVal:typing.Any) -> None:
        """The minimum flight path angle of the missile's flight path while descending."""
        with agmarshall.VARIANT_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentMinFPA"](arg_pVal.COM_val))

    @property
    def DescentFailOnInsufficientPerformance(self) -> bool:
        """Opt whether to fail while descending if there is insufficient specific excess power."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentFailOnInsufficientPerformance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentFailOnInsufficientPerformance.setter
    def DescentFailOnInsufficientPerformance(self, pVal:bool) -> None:
        """Opt whether to fail while descending if there is insufficient specific excess power."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentFailOnInsufficientPerformance"](arg_pVal.COM_val))

    @property
    def UseTotalTempLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified temperature is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTotalTempLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseTotalTempLimit.setter
    def UseTotalTempLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified temperature is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseTotalTempLimit"](arg_pVal.COM_val))

    @property
    def TotalTempLimit(self) -> float:
        """The maximum total temperature limit of the missile."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalTempLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TotalTempLimit.setter
    def TotalTempLimit(self, pVal:float) -> None:
        """The maximum total temperature limit of the missile."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetTotalTempLimit"](arg_pVal.COM_val))

    @property
    def UseMachLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified mach number is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMachLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMachLimit.setter
    def UseMachLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified mach number is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMachLimit"](arg_pVal.COM_val))

    @property
    def MachLimit(self) -> float:
        """The maximum allowable mach number."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMachLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MachLimit.setter
    def MachLimit(self, pVal:float) -> None:
        """The maximum allowable mach number."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMachLimit"](arg_pVal.COM_val))

    @property
    def UseEASLimit(self) -> bool:
        """Opt whether to limit the speed of the missile so the specified Equivalent Airspeed is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseEASLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseEASLimit.setter
    def UseEASLimit(self, pVal:bool) -> None:
        """Opt whether to limit the speed of the missile so the specified Equivalent Airspeed is not exceeded."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseEASLimit"](arg_pVal.COM_val))

    @property
    def EASLimit(self) -> float:
        """The maximum allowable Equivalent Airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEASLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EASLimit.setter
    def EASLimit(self, pVal:float) -> None:
        """The maximum allowable Equivalent Airspeed."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEASLimit"](arg_pVal.COM_val))

    @property
    def DefaultConfiguration(self) -> "IConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrConfig:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultConfiguration"](byref(arg_ppAvtrConfig.COM_val)))
            return arg_ppAvtrConfig.python_val

    @property
    def Aerodynamics(self) -> "IMissileAero":
        """Get the aerodynamics interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAerodynamics"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Propulsion(self) -> "IMissileProp":
        """Get the propulsion interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsion"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{80168c56-998d-45e3-9a93-e0511478a44b}", IMissileModel)
agcls.AgTypeNameMap["IMissileModel"] = IMissileModel

class IMissileAero(object):
    """Interface used to access the aerodynamics options for a missile."""
    _uuid = "{b7e5c31a-5fbd-4a71-b99b-48707d6af556}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsSimple"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsAdvanced"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileAero = agcom.GUID(IMissileAero._uuid)
        vtable_offset_local = IMissileAero._vtable_offset - 1
        self.__dict__["_GetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IMissileAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IMissileAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetModeAsSimple"] = IAGFUNCTYPE(pUnk, IID_IMissileAero, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IMissileAero, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsAdvanced"] = IAGFUNCTYPE(pUnk, IID_IMissileAero, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileAero.__dict__ and type(IMissileAero.__dict__[attrname]) == property:
            return IMissileAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileAero.")
    
    @property
    def AeroStrategy(self) -> "AgEAvtrMissileAeroStrategy":
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrMissileAeroStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrMissileAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrMissileAeroStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAeroStrategy"](arg_newVal.COM_val))

    @property
    def ModeAsSimple(self) -> "IMissileSimpleAero":
        """Get the interface for a simple aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsSimple"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsExternal(self) -> "IMissileExternalAero":
        """Get the interface for an external file aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsAdvanced(self) -> "IMissileAdvancedAero":
        """Get the interface for an advanced aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsAdvanced"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b7e5c31a-5fbd-4a71-b99b-48707d6af556}", IMissileAero)
agcls.AgTypeNameMap["IMissileAero"] = IMissileAero

class IMissileProp(object):
    """Interface used to access the Propulsion options for a missile."""
    _uuid = "{3a29d5aa-b4f4-4431-9857-1d61bd3250cb}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetPropStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsSimple"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsRamjet"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsTurbojet"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsRocket"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileProp = agcom.GUID(IMissileProp._uuid)
        vtable_offset_local = IMissileProp._vtable_offset - 1
        self.__dict__["_GetPropStrategy"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPropStrategy"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetModeAsSimple"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsRamjet"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsTurbojet"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsRocket"] = IAGFUNCTYPE(pUnk, IID_IMissileProp, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileProp.__dict__ and type(IMissileProp.__dict__[attrname]) == property:
            return IMissileProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileProp.")
    
    @property
    def PropStrategy(self) -> "AgEAvtrMissilePropStrategy":
        """The propulsion strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrMissilePropStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropStrategy.setter
    def PropStrategy(self, newVal:"AgEAvtrMissilePropStrategy") -> None:
        """The propulsion strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrMissilePropStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropStrategy"](arg_newVal.COM_val))

    @property
    def ModeAsSimple(self) -> "IMissileSimpleProp":
        """Get the interface for a simple propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsSimple"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsExternal(self) -> "IMissileExternalProp":
        """Get the interface for an external file propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsRamjet(self) -> "IMissileRamjetProp":
        """Get the interface for an Ramjet propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsRamjet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsTurbojet(self) -> "IMissileTurbojetProp":
        """Get the interface for an Turbojet propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsTurbojet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsRocket(self) -> "IMissileRocketProp":
        """Get the interface for an Rocket propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsRocket"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3a29d5aa-b4f4-4431-9857-1d61bd3250cb}", IMissileProp)
agcls.AgTypeNameMap["IMissileProp"] = IMissileProp

class IMissileSimpleAero(object):
    """Interface used to access the Simple aerodynamics options for a missile."""
    _uuid = "{e189fccd-ff74-40ee-9181-ed655a619480}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSRef"] = _raise_uninitialized_error
        self.__dict__["_SetSRef"] = _raise_uninitialized_error
        self.__dict__["_GetClMax"] = _raise_uninitialized_error
        self.__dict__["_SetClMax"] = _raise_uninitialized_error
        self.__dict__["_GetCd"] = _raise_uninitialized_error
        self.__dict__["_SetCd"] = _raise_uninitialized_error
        self.__dict__["_GetCalculateAOA"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAOA"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileSimpleAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileSimpleAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileSimpleAero = agcom.GUID(IMissileSimpleAero._uuid)
        vtable_offset_local = IMissileSimpleAero._vtable_offset - 1
        self.__dict__["_GetSRef"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSRef"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetClMax"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetClMax"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCd"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCd"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetCalculateAOA"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleAero, vtable_offset_local+9, agcom.VARIANT_BOOL, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileSimpleAero.__dict__ and type(IMissileSimpleAero.__dict__[attrname]) == property:
            return IMissileSimpleAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileSimpleAero.")
    
    @property
    def SRef(self) -> float:
        """The area of the lifting surface of the missile."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSRef"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SRef.setter
    def SRef(self, newVal:float) -> None:
        """The area of the lifting surface of the missile."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSRef"](arg_newVal.COM_val))

    @property
    def ClMax(self) -> float:
        """The max coefficient of lift."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClMax"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClMax.setter
    def ClMax(self, newVal:float) -> None:
        """The max coefficient of lift."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClMax"](arg_newVal.COM_val))

    @property
    def Cd(self) -> float:
        """The coefficient of drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCd"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Cd.setter
    def Cd(self, newVal:float) -> None:
        """The coefficient of drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCd"](arg_newVal.COM_val))

    @property
    def CalculateAOA(self) -> bool:
        """Opt to allow Aviator to calculate the Angle of Attack. Otherwise, the value will be 0 by default."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalculateAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxAOA(self) -> typing.Any:
        """The missile's maximum angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxAOA(self, calculateAoA:bool, maxAoA:typing.Any) -> None:
        """Set whether to calculate the Angle of Attack and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(calculateAoA) as arg_calculateAoA, \
             agmarshall.VARIANT_arg(maxAoA) as arg_maxAoA:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAOA"](arg_calculateAoA.COM_val, arg_maxAoA.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{e189fccd-ff74-40ee-9181-ed655a619480}", IMissileSimpleAero)
agcls.AgTypeNameMap["IMissileSimpleAero"] = IMissileSimpleAero

class IMissileSimpleProp(object):
    """Interface used to access the Simple propulsion options for a missile."""
    _uuid = "{410fb08c-ae20-4f74-9b91-9035b813b146}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxThrust"] = _raise_uninitialized_error
        self.__dict__["_SetMaxThrust"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_SetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileSimpleProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileSimpleProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileSimpleProp = agcom.GUID(IMissileSimpleProp._uuid)
        vtable_offset_local = IMissileSimpleProp._vtable_offset - 1
        self.__dict__["_GetMaxThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileSimpleProp, vtable_offset_local+6, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileSimpleProp.__dict__ and type(IMissileSimpleProp.__dict__[attrname]) == property:
            return IMissileSimpleProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileSimpleProp.")
    
    @property
    def MaxThrust(self) -> float:
        """The maximum thrust of the missile."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxThrust.setter
    def MaxThrust(self, pVal:float) -> None:
        """The maximum thrust of the missile."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxThrust"](arg_pVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """The fuel flow at max thrust."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, pVal:float) -> None:
        """The fuel flow at max thrust."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_pVal.COM_val))

    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoThrustWhenNoFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoThrustWhenNoFuel"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{410fb08c-ae20-4f74-9b91-9035b813b146}", IMissileSimpleProp)
agcls.AgTypeNameMap["IMissileSimpleProp"] = IMissileSimpleProp

class IMissileExternalAero(object):
    """Interface used to access the External aerodynamics options for a missile."""
    _uuid = "{fed723ce-0c02-41bb-8e61-d602b3543049}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetFilepath"] = _raise_uninitialized_error
        self.__dict__["_Reload"] = _raise_uninitialized_error
        self.__dict__["_GetRefArea"] = _raise_uninitialized_error
        self.__dict__["_SetRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetCanSetRefArea"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileExternalAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileExternalAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileExternalAero = agcom.GUID(IMissileExternalAero._uuid)
        vtable_offset_local = IMissileExternalAero._vtable_offset - 1
        self.__dict__["_GetFilepath"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilepath"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_Reload"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetRefArea"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefArea"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetCanSetRefArea"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalAero, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileExternalAero.__dict__ and type(IMissileExternalAero.__dict__[attrname]) == property:
            return IMissileExternalAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileExternalAero.")
    
    @property
    def Filepath(self) -> str:
        """The filepath for the external aero file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external aero file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    def Reload(self) -> str:
        """Reload the external aero file."""
        with agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_Reload"](byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def RefArea(self) -> float:
        """The area of the lifting surface of the missile."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefArea.setter
    def RefArea(self, pVal:float) -> None:
        """The area of the lifting surface of the missile."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefArea"](arg_pVal.COM_val))

    @property
    def CanSetRefArea(self) -> bool:
        """Check whether you can set the reference area or whether it is specified in the file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanSetRefArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{fed723ce-0c02-41bb-8e61-d602b3543049}", IMissileExternalAero)
agcls.AgTypeNameMap["IMissileExternalAero"] = IMissileExternalAero

class IMissileExternalProp(object):
    """Interface used to access the External Prop file options for a missile."""
    _uuid = "{14bcb2f5-2893-4743-9e3c-1b9c52505e0c}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetFilepath"] = _raise_uninitialized_error
        self.__dict__["_Reload"] = _raise_uninitialized_error
        self.__dict__["_GetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_SetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileExternalProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileExternalProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileExternalProp = agcom.GUID(IMissileExternalProp._uuid)
        vtable_offset_local = IMissileExternalProp._vtable_offset - 1
        self.__dict__["_GetFilepath"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilepath"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.BSTR))
        self.__dict__["_Reload"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+5, agcom.VARIANT_BOOL)
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IMissileExternalProp, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileExternalProp.__dict__ and type(IMissileExternalProp.__dict__[attrname]) == property:
            return IMissileExternalProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileExternalProp.")
    
    @property
    def Filepath(self) -> str:
        """The filepath for the external prop file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetFilepath(self, filepath:str) -> str:
        """Set the filepath for the external prop file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath, \
             agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_SetFilepath"](arg_filepath.COM_val, byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    def Reload(self) -> str:
        """Reload the external prop file."""
        with agmarshall.BSTR_arg() as arg_pReturnMsg:
            agcls.evaluate_hresult(self.__dict__["_Reload"](byref(arg_pReturnMsg.COM_val)))
            return arg_pReturnMsg.python_val

    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoThrustWhenNoFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoThrustWhenNoFuel"](arg_pVal.COM_val))

    @property
    def IsValid(self) -> bool:
        """Check whether the filepath is valid."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{14bcb2f5-2893-4743-9e3c-1b9c52505e0c}", IMissileExternalProp)
agcls.AgTypeNameMap["IMissileExternalProp"] = IMissileExternalProp

class IMissileAdvancedAero(object):
    """Interface used to access the Advanced aerodynamics options for a missile."""
    _uuid = "{a26fe490-218c-44e4-95ab-69c20d3d6629}"
    _num_methods = 48
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBodyWidth"] = _raise_uninitialized_error
        self.__dict__["_SetBodyWidth"] = _raise_uninitialized_error
        self.__dict__["_GetBodyHeight"] = _raise_uninitialized_error
        self.__dict__["_SetBodyHeight"] = _raise_uninitialized_error
        self.__dict__["_GetBodyLength"] = _raise_uninitialized_error
        self.__dict__["_SetBodyLength"] = _raise_uninitialized_error
        self.__dict__["_GetNoseLength"] = _raise_uninitialized_error
        self.__dict__["_SetNoseLength"] = _raise_uninitialized_error
        self.__dict__["_GetNoseTipDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetNoseTipDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetNozzleDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetNozzleDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetMinMach"] = _raise_uninitialized_error
        self.__dict__["_SetMinMach"] = _raise_uninitialized_error
        self.__dict__["_GetWingCount"] = _raise_uninitialized_error
        self.__dict__["_SetWingCount"] = _raise_uninitialized_error
        self.__dict__["_GetWingSpan"] = _raise_uninitialized_error
        self.__dict__["_SetWingSpan"] = _raise_uninitialized_error
        self.__dict__["_GetWingSurfaceArea"] = _raise_uninitialized_error
        self.__dict__["_SetWingSurfaceArea"] = _raise_uninitialized_error
        self.__dict__["_GetWingLeadingEdgeSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_SetWingLeadingEdgeSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_GetWingLeadingEdgeSectionAngle"] = _raise_uninitialized_error
        self.__dict__["_SetWingLeadingEdgeSectionAngle"] = _raise_uninitialized_error
        self.__dict__["_GetWingMeanAeroChordLength"] = _raise_uninitialized_error
        self.__dict__["_SetWingMeanAeroChordLength"] = _raise_uninitialized_error
        self.__dict__["_GetWingMaxThicknessAlongMAC"] = _raise_uninitialized_error
        self.__dict__["_SetWingMaxThicknessAlongMAC"] = _raise_uninitialized_error
        self.__dict__["_GetWingLiftFraction"] = _raise_uninitialized_error
        self.__dict__["_SetWingLiftFraction"] = _raise_uninitialized_error
        self.__dict__["_GetTailCount"] = _raise_uninitialized_error
        self.__dict__["_SetTailCount"] = _raise_uninitialized_error
        self.__dict__["_GetTailSpan"] = _raise_uninitialized_error
        self.__dict__["_SetTailSpan"] = _raise_uninitialized_error
        self.__dict__["_GetTailSurfaceArea"] = _raise_uninitialized_error
        self.__dict__["_SetTailSurfaceArea"] = _raise_uninitialized_error
        self.__dict__["_GetTailLeadingEdgeSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTailLeadingEdgeSweepAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTailLeadingEdgeSectionAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTailLeadingEdgeSectionAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTailMeanAeroChordLength"] = _raise_uninitialized_error
        self.__dict__["_SetTailMeanAeroChordLength"] = _raise_uninitialized_error
        self.__dict__["_GetTailMaxThicknessAlongMAC"] = _raise_uninitialized_error
        self.__dict__["_SetTailMaxThicknessAlongMAC"] = _raise_uninitialized_error
        self.__dict__["_GetTailLiftFraction"] = _raise_uninitialized_error
        self.__dict__["_SetTailLiftFraction"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileAdvancedAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileAdvancedAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileAdvancedAero = agcom.GUID(IMissileAdvancedAero._uuid)
        vtable_offset_local = IMissileAdvancedAero._vtable_offset - 1
        self.__dict__["_GetBodyWidth"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBodyWidth"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetBodyHeight"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBodyHeight"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetBodyLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBodyLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetNoseLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNoseLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetNoseTipDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNoseTipDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetNozzleDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNozzleDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetMinMach"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinMach"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetWingCount"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetWingCount"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetWingSpan"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingSpan"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetWingSurfaceArea"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingSurfaceArea"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetWingLeadingEdgeSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+23, POINTER(agcom.VARIANT))
        self.__dict__["_SetWingLeadingEdgeSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+24, agcom.VARIANT)
        self.__dict__["_GetWingLeadingEdgeSectionAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_SetWingLeadingEdgeSectionAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+26, agcom.VARIANT)
        self.__dict__["_GetWingMeanAeroChordLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingMeanAeroChordLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetWingMaxThicknessAlongMAC"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingMaxThicknessAlongMAC"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetWingLiftFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWingLiftFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetTailCount"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+33, POINTER(agcom.LONG))
        self.__dict__["_SetTailCount"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+34, agcom.LONG)
        self.__dict__["_GetTailSpan"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+35, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailSpan"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+36, agcom.DOUBLE)
        self.__dict__["_GetTailSurfaceArea"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+37, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailSurfaceArea"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+38, agcom.DOUBLE)
        self.__dict__["_GetTailLeadingEdgeSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+39, POINTER(agcom.VARIANT))
        self.__dict__["_SetTailLeadingEdgeSweepAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+40, agcom.VARIANT)
        self.__dict__["_GetTailLeadingEdgeSectionAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+41, POINTER(agcom.VARIANT))
        self.__dict__["_SetTailLeadingEdgeSectionAngle"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+42, agcom.VARIANT)
        self.__dict__["_GetTailMeanAeroChordLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+43, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailMeanAeroChordLength"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+44, agcom.DOUBLE)
        self.__dict__["_GetTailMaxThicknessAlongMAC"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+45, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailMaxThicknessAlongMAC"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+46, agcom.DOUBLE)
        self.__dict__["_GetTailLiftFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+47, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailLiftFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileAdvancedAero, vtable_offset_local+48, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileAdvancedAero.__dict__ and type(IMissileAdvancedAero.__dict__[attrname]) == property:
            return IMissileAdvancedAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileAdvancedAero.")
    
    @property
    def BodyWidth(self) -> float:
        """The missile body's width."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBodyWidth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BodyWidth.setter
    def BodyWidth(self, newVal:float) -> None:
        """The missile body's width."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBodyWidth"](arg_newVal.COM_val))

    @property
    def BodyHeight(self) -> float:
        """The missile body's height."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBodyHeight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BodyHeight.setter
    def BodyHeight(self, newVal:float) -> None:
        """The missile body's height."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBodyHeight"](arg_newVal.COM_val))

    @property
    def BodyLength(self) -> float:
        """The missile body's length."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBodyLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BodyLength.setter
    def BodyLength(self, newVal:float) -> None:
        """The missile body's length."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBodyLength"](arg_newVal.COM_val))

    @property
    def NoseLength(self) -> float:
        """The missile nose's length."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoseLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoseLength.setter
    def NoseLength(self, newVal:float) -> None:
        """The missile nose's length."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoseLength"](arg_newVal.COM_val))

    @property
    def NoseTipDiameter(self) -> float:
        """The missile nose's diameter at the tip."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoseTipDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoseTipDiameter.setter
    def NoseTipDiameter(self, newVal:float) -> None:
        """The missile nose's diameter at the tip."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoseTipDiameter"](arg_newVal.COM_val))

    @property
    def NozzleDiameter(self) -> float:
        """The diameter of the missile's nozzle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNozzleDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NozzleDiameter.setter
    def NozzleDiameter(self, newVal:float) -> None:
        """The diameter of the missile's nozzle."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNozzleDiameter"](arg_newVal.COM_val))

    @property
    def MaxAOA(self) -> typing.Any:
        """The missile's maximum angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAOA.setter
    def MaxAOA(self, newVal:typing.Any) -> None:
        """The missile's maximum angle of attack."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAOA"](arg_newVal.COM_val))

    @property
    def MinMach(self) -> float:
        """The minimum mach number of the missile."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinMach.setter
    def MinMach(self, newVal:float) -> None:
        """The minimum mach number of the missile."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinMach"](arg_newVal.COM_val))

    @property
    def WingCount(self) -> int:
        """The number of wings on the missile."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingCount.setter
    def WingCount(self, newVal:int) -> None:
        """The number of wings on the missile."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingCount"](arg_newVal.COM_val))

    @property
    def WingSpan(self) -> float:
        """The span of one of the missile's wings."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingSpan"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingSpan.setter
    def WingSpan(self, newVal:float) -> None:
        """The span of one of the missile's wings."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingSpan"](arg_newVal.COM_val))

    @property
    def WingSurfaceArea(self) -> float:
        """The area of one of the missile's wings."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingSurfaceArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingSurfaceArea.setter
    def WingSurfaceArea(self, newVal:float) -> None:
        """The area of one of the missile's wings."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingSurfaceArea"](arg_newVal.COM_val))

    @property
    def WingLeadingEdgeSweepAngle(self) -> typing.Any:
        """The leading edge weep angle of the wings."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingLeadingEdgeSweepAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingLeadingEdgeSweepAngle.setter
    def WingLeadingEdgeSweepAngle(self, newVal:typing.Any) -> None:
        """The leading edge weep angle of the wings."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingLeadingEdgeSweepAngle"](arg_newVal.COM_val))

    @property
    def WingLeadingEdgeSectionAngle(self) -> typing.Any:
        """The leading edge section angle of the wings."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingLeadingEdgeSectionAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingLeadingEdgeSectionAngle.setter
    def WingLeadingEdgeSectionAngle(self, newVal:typing.Any) -> None:
        """The leading edge section angle of the wings."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingLeadingEdgeSectionAngle"](arg_newVal.COM_val))

    @property
    def WingMeanAeroChordLength(self) -> float:
        """The mean chord length of one of the missile's wings."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingMeanAeroChordLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingMeanAeroChordLength.setter
    def WingMeanAeroChordLength(self, newVal:float) -> None:
        """The mean chord length of one of the missile's wings."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingMeanAeroChordLength"](arg_newVal.COM_val))

    @property
    def WingMaxThicknessAlongMAC(self) -> float:
        """The max thickness of the wing along the mean aerodynamic chord."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingMaxThicknessAlongMAC"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingMaxThicknessAlongMAC.setter
    def WingMaxThicknessAlongMAC(self, newVal:float) -> None:
        """The max thickness of the wing along the mean aerodynamic chord."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingMaxThicknessAlongMAC"](arg_newVal.COM_val))

    @property
    def WingLiftFraction(self) -> float:
        """The lift fraction of the wing."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWingLiftFraction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WingLiftFraction.setter
    def WingLiftFraction(self, newVal:float) -> None:
        """The lift fraction of the wing."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWingLiftFraction"](arg_newVal.COM_val))

    @property
    def TailCount(self) -> int:
        """The number of tails on the missile."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailCount.setter
    def TailCount(self, newVal:int) -> None:
        """The number of tails on the missile."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailCount"](arg_newVal.COM_val))

    @property
    def TailSpan(self) -> float:
        """The span of one of the missile's tails."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailSpan"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailSpan.setter
    def TailSpan(self, newVal:float) -> None:
        """The span of one of the missile's tails."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailSpan"](arg_newVal.COM_val))

    @property
    def TailSurfaceArea(self) -> float:
        """The area of one of the missile's tails."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailSurfaceArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailSurfaceArea.setter
    def TailSurfaceArea(self, newVal:float) -> None:
        """The area of one of the missile's tails."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailSurfaceArea"](arg_newVal.COM_val))

    @property
    def TailLeadingEdgeSweepAngle(self) -> typing.Any:
        """The leading edge weep angle of the tails."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailLeadingEdgeSweepAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailLeadingEdgeSweepAngle.setter
    def TailLeadingEdgeSweepAngle(self, newVal:typing.Any) -> None:
        """The leading edge weep angle of the tails."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailLeadingEdgeSweepAngle"](arg_newVal.COM_val))

    @property
    def TailLeadingEdgeSectionAngle(self) -> typing.Any:
        """The leading edge section angle of the tails."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailLeadingEdgeSectionAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailLeadingEdgeSectionAngle.setter
    def TailLeadingEdgeSectionAngle(self, newVal:typing.Any) -> None:
        """The leading edge section angle of the tails."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailLeadingEdgeSectionAngle"](arg_newVal.COM_val))

    @property
    def TailMeanAeroChordLength(self) -> float:
        """The mean chord length of one of the missile's tails."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailMeanAeroChordLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailMeanAeroChordLength.setter
    def TailMeanAeroChordLength(self, newVal:float) -> None:
        """The mean chord length of one of the missile's tails."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailMeanAeroChordLength"](arg_newVal.COM_val))

    @property
    def TailMaxThicknessAlongMAC(self) -> float:
        """The max thickness of the tail along the mean aerodynamic chord."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailMaxThicknessAlongMAC"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailMaxThicknessAlongMAC.setter
    def TailMaxThicknessAlongMAC(self, newVal:float) -> None:
        """The max thickness of the tail along the mean aerodynamic chord."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailMaxThicknessAlongMAC"](arg_newVal.COM_val))

    @property
    def TailLiftFraction(self) -> float:
        """The lift fraction of the tail."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailLiftFraction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailLiftFraction.setter
    def TailLiftFraction(self, newVal:float) -> None:
        """The lift fraction of the tail."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailLiftFraction"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a26fe490-218c-44e4-95ab-69c20d3d6629}", IMissileAdvancedAero)
agcls.AgTypeNameMap["IMissileAdvancedAero"] = IMissileAdvancedAero

class IMissileRamjetProp(object):
    """Interface used to access the Ramjet propulsion options for a missile."""
    _uuid = "{a0a4fb0a-67cb-44bd-b0e9-2362cfedbb0e}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetEngineTemp"] = _raise_uninitialized_error
        self.__dict__["_SetEngineTemp"] = _raise_uninitialized_error
        self.__dict__["_GetFuelHeatingValue"] = _raise_uninitialized_error
        self.__dict__["_SetFuelHeatingValue"] = _raise_uninitialized_error
        self.__dict__["_GetInletPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetInletPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetBurnerPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetBurnerPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetNozzlePressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetNozzlePressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetP0overP9"] = _raise_uninitialized_error
        self.__dict__["_SetP0overP9"] = _raise_uninitialized_error
        self.__dict__["_GetBurnerEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetBurnerEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_SetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileRamjetProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileRamjetProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileRamjetProp = agcom.GUID(IMissileRamjetProp._uuid)
        vtable_offset_local = IMissileRamjetProp._vtable_offset - 1
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEngineTemp"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEngineTemp"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFuelHeatingValue"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelHeatingValue"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetInletPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInletPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetBurnerPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBurnerPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetNozzlePressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNozzlePressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetP0overP9"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetP0overP9"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetBurnerEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBurnerEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileRamjetProp, vtable_offset_local+22, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileRamjetProp.__dict__ and type(IMissileRamjetProp.__dict__[attrname]) == property:
            return IMissileRamjetProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileRamjetProp.")
    
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def EngineTemp(self) -> float:
        """The maximum temperature that the engine material can support."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEngineTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EngineTemp.setter
    def EngineTemp(self, newVal:float) -> None:
        """The maximum temperature that the engine material can support."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEngineTemp"](arg_newVal.COM_val))

    @property
    def FuelHeatingValue(self) -> float:
        """The heating value of the fuel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelHeatingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelHeatingValue.setter
    def FuelHeatingValue(self, newVal:float) -> None:
        """The heating value of the fuel."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelHeatingValue"](arg_newVal.COM_val))

    @property
    def InletPressureRatio(self) -> float:
        """The pressure ratio from the inlet exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInletPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InletPressureRatio.setter
    def InletPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the inlet exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInletPressureRatio"](arg_newVal.COM_val))

    @property
    def BurnerPressureRatio(self) -> float:
        """The pressure ratio from the burner exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnerPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BurnerPressureRatio.setter
    def BurnerPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the burner exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBurnerPressureRatio"](arg_newVal.COM_val))

    @property
    def NozzlePressureRatio(self) -> float:
        """The pressure ratio from the nozzle exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNozzlePressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NozzlePressureRatio.setter
    def NozzlePressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the nozzle exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNozzlePressureRatio"](arg_newVal.COM_val))

    @property
    def P0overP9(self) -> float:
        """The pressure ratio from ambient conditions to the engine exit."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetP0overP9"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @P0overP9.setter
    def P0overP9(self, newVal:float) -> None:
        """The pressure ratio from ambient conditions to the engine exit."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetP0overP9"](arg_newVal.COM_val))

    @property
    def BurnerEfficiency(self) -> float:
        """The efficiency of the burner."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnerEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BurnerEfficiency.setter
    def BurnerEfficiency(self, newVal:float) -> None:
        """The efficiency of the burner."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBurnerEfficiency"](arg_newVal.COM_val))

    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoThrustWhenNoFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoThrustWhenNoFuel"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{a0a4fb0a-67cb-44bd-b0e9-2362cfedbb0e}", IMissileRamjetProp)
agcls.AgTypeNameMap["IMissileRamjetProp"] = IMissileRamjetProp

class IMissileRocketProp(object):
    """Interface used to access the Rocket propulsion options for a missile."""
    _uuid = "{4aa12da8-8ff9-40f4-bbf7-1e09aa7f04f8}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetNozzleExpansionRatio"] = _raise_uninitialized_error
        self.__dict__["_SetNozzleExpansionRatio"] = _raise_uninitialized_error
        self.__dict__["_GetNozzleExitDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetNozzleExitDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetCombustionChamberPressure"] = _raise_uninitialized_error
        self.__dict__["_SetCombustionChamberPressure"] = _raise_uninitialized_error
        self.__dict__["_GetPropellantSpecificHeatRatio"] = _raise_uninitialized_error
        self.__dict__["_SetPropellantSpecificHeatRatio"] = _raise_uninitialized_error
        self.__dict__["_GetPropellantCharacteristicVelocity"] = _raise_uninitialized_error
        self.__dict__["_SetPropellantCharacteristicVelocity"] = _raise_uninitialized_error
        self.__dict__["_GetUseBoostSustainMode"] = _raise_uninitialized_error
        self.__dict__["_SetUseBoostSustainMode"] = _raise_uninitialized_error
        self.__dict__["_GetBoostFuelFraction"] = _raise_uninitialized_error
        self.__dict__["_SetBoostFuelFraction"] = _raise_uninitialized_error
        self.__dict__["_GetBoostChamberPressure"] = _raise_uninitialized_error
        self.__dict__["_SetBoostChamberPressure"] = _raise_uninitialized_error
        self.__dict__["_GetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_SetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileRocketProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileRocketProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileRocketProp = agcom.GUID(IMissileRocketProp._uuid)
        vtable_offset_local = IMissileRocketProp._vtable_offset - 1
        self.__dict__["_GetNozzleExpansionRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNozzleExpansionRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetNozzleExitDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNozzleExitDiameter"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCombustionChamberPressure"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCombustionChamberPressure"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetPropellantSpecificHeatRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellantSpecificHeatRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetPropellantCharacteristicVelocity"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPropellantCharacteristicVelocity"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetUseBoostSustainMode"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseBoostSustainMode"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetBoostFuelFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoostFuelFraction"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetBoostChamberPressure"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoostChamberPressure"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileRocketProp, vtable_offset_local+18, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileRocketProp.__dict__ and type(IMissileRocketProp.__dict__[attrname]) == property:
            return IMissileRocketProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileRocketProp.")
    
    @property
    def NozzleExpansionRatio(self) -> float:
        """The exit area divided by the throat area."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNozzleExpansionRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NozzleExpansionRatio.setter
    def NozzleExpansionRatio(self, newVal:float) -> None:
        """The exit area divided by the throat area."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNozzleExpansionRatio"](arg_newVal.COM_val))

    @property
    def NozzleExitDiameter(self) -> float:
        """The diameter of the nozzle exit."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNozzleExitDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NozzleExitDiameter.setter
    def NozzleExitDiameter(self, newVal:float) -> None:
        """The diameter of the nozzle exit."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNozzleExitDiameter"](arg_newVal.COM_val))

    @property
    def CombustionChamberPressure(self) -> float:
        """The pressure in the combustion chamber."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCombustionChamberPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CombustionChamberPressure.setter
    def CombustionChamberPressure(self, newVal:float) -> None:
        """The pressure in the combustion chamber."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCombustionChamberPressure"](arg_newVal.COM_val))

    @property
    def PropellantSpecificHeatRatio(self) -> float:
        """The ratio of the propellant's constant-pressure specific heat to the constant volume specific heat."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellantSpecificHeatRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellantSpecificHeatRatio.setter
    def PropellantSpecificHeatRatio(self, newVal:float) -> None:
        """The ratio of the propellant's constant-pressure specific heat to the constant volume specific heat."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellantSpecificHeatRatio"](arg_newVal.COM_val))

    @property
    def PropellantCharacteristicVelocity(self) -> float:
        """The propellant's characteristic velocity (Chamber Pressure * Throat Area / Mass Flow Rate of the engine)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropellantCharacteristicVelocity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropellantCharacteristicVelocity.setter
    def PropellantCharacteristicVelocity(self, newVal:float) -> None:
        """The propellant's characteristic velocity (Chamber Pressure * Throat Area / Mass Flow Rate of the engine)."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropellantCharacteristicVelocity"](arg_newVal.COM_val))

    @property
    def UseBoostSustainMode(self) -> bool:
        """Opt for the engine to use a boost phase to achieve a target velocity and then transition to a sustenance phase."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseBoostSustainMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseBoostSustainMode.setter
    def UseBoostSustainMode(self, newVal:bool) -> None:
        """Opt for the engine to use a boost phase to achieve a target velocity and then transition to a sustenance phase."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseBoostSustainMode"](arg_newVal.COM_val))

    @property
    def BoostFuelFraction(self) -> float:
        """The amount of fuel that is consumed during the boost phase."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoostFuelFraction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BoostFuelFraction.setter
    def BoostFuelFraction(self, newVal:float) -> None:
        """The amount of fuel that is consumed during the boost phase."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBoostFuelFraction"](arg_newVal.COM_val))

    @property
    def BoostChamberPressure(self) -> float:
        """The combustion chamber pressure during the boost phase."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoostChamberPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BoostChamberPressure.setter
    def BoostChamberPressure(self, newVal:float) -> None:
        """The combustion chamber pressure during the boost phase."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBoostChamberPressure"](arg_newVal.COM_val))

    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoThrustWhenNoFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoThrustWhenNoFuel"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4aa12da8-8ff9-40f4-bbf7-1e09aa7f04f8}", IMissileRocketProp)
agcls.AgTypeNameMap["IMissileRocketProp"] = IMissileRocketProp

class IMissileTurbojetProp(object):
    """Interface used to access the Turbojet propulsion options for a missile."""
    _uuid = "{7d849783-6cbc-442e-aec8-4137fb673619}"
    _num_methods = 30
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineTemp"] = _raise_uninitialized_error
        self.__dict__["_SetTurbineTemp"] = _raise_uninitialized_error
        self.__dict__["_GetCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetCompressorPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetFuelHeatingValue"] = _raise_uninitialized_error
        self.__dict__["_SetFuelHeatingValue"] = _raise_uninitialized_error
        self.__dict__["_GetInletSubsonicPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetInletSubsonicPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetBurnerPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetBurnerPressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetNozzlePressureRatio"] = _raise_uninitialized_error
        self.__dict__["_SetNozzlePressureRatio"] = _raise_uninitialized_error
        self.__dict__["_GetP0overP9"] = _raise_uninitialized_error
        self.__dict__["_SetP0overP9"] = _raise_uninitialized_error
        self.__dict__["_GetCompressorEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetCompressorEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetTurbineEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetBurnerEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetBurnerEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetMechanicalEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetMechanicalEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        self.__dict__["_SetNoThrustWhenNoFuel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileTurbojetProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileTurbojetProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileTurbojetProp = agcom.GUID(IMissileTurbojetProp._uuid)
        vtable_offset_local = IMissileTurbojetProp._vtable_offset - 1
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetTurbineTemp"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTurbineTemp"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCompressorPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFuelHeatingValue"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelHeatingValue"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetInletSubsonicPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInletSubsonicPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetBurnerPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBurnerPressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetNozzlePressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNozzlePressureRatio"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetP0overP9"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetP0overP9"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetCompressorEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCompressorEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetTurbineEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTurbineEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetBurnerEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBurnerEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetMechanicalEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMechanicalEfficiency"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNoThrustWhenNoFuel"] = IAGFUNCTYPE(pUnk, IID_IMissileTurbojetProp, vtable_offset_local+30, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileTurbojetProp.__dict__ and type(IMissileTurbojetProp.__dict__[attrname]) == property:
            return IMissileTurbojetProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileTurbojetProp.")
    
    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def TurbineTemp(self) -> float:
        """The maximum temperature that the turbine material can support."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurbineTemp.setter
    def TurbineTemp(self, newVal:float) -> None:
        """The maximum temperature that the turbine material can support."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurbineTemp"](arg_newVal.COM_val))

    @property
    def CompressorPressureRatio(self) -> float:
        """The maximum compressor pressure ratio."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompressorPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompressorPressureRatio.setter
    def CompressorPressureRatio(self, newVal:float) -> None:
        """The maximum compressor pressure ratio."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompressorPressureRatio"](arg_newVal.COM_val))

    @property
    def FuelHeatingValue(self) -> float:
        """The heating value of the fuel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelHeatingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelHeatingValue.setter
    def FuelHeatingValue(self, newVal:float) -> None:
        """The heating value of the fuel."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelHeatingValue"](arg_newVal.COM_val))

    @property
    def InletSubsonicPressureRatio(self) -> float:
        """The subsonic pressure ratio from the inlet exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInletSubsonicPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InletSubsonicPressureRatio.setter
    def InletSubsonicPressureRatio(self, newVal:float) -> None:
        """The subsonic pressure ratio from the inlet exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInletSubsonicPressureRatio"](arg_newVal.COM_val))

    @property
    def BurnerPressureRatio(self) -> float:
        """The pressure ratio from the burner exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnerPressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BurnerPressureRatio.setter
    def BurnerPressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the burner exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBurnerPressureRatio"](arg_newVal.COM_val))

    @property
    def NozzlePressureRatio(self) -> float:
        """The pressure ratio from the nozzle exit to the entrance."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNozzlePressureRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NozzlePressureRatio.setter
    def NozzlePressureRatio(self, newVal:float) -> None:
        """The pressure ratio from the nozzle exit to the entrance."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNozzlePressureRatio"](arg_newVal.COM_val))

    @property
    def P0overP9(self) -> float:
        """The pressure ratio from ambient conditions to the engine exit."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetP0overP9"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @P0overP9.setter
    def P0overP9(self, newVal:float) -> None:
        """The pressure ratio from ambient conditions to the engine exit."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetP0overP9"](arg_newVal.COM_val))

    @property
    def CompressorEfficiency(self) -> float:
        """The efficiency of the compressor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompressorEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompressorEfficiency.setter
    def CompressorEfficiency(self, newVal:float) -> None:
        """The efficiency of the compressor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompressorEfficiency"](arg_newVal.COM_val))

    @property
    def TurbineEfficiency(self) -> float:
        """The efficiency of the turbine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurbineEfficiency.setter
    def TurbineEfficiency(self, newVal:float) -> None:
        """The efficiency of the turbine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurbineEfficiency"](arg_newVal.COM_val))

    @property
    def BurnerEfficiency(self) -> float:
        """The efficiency of the burner."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnerEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BurnerEfficiency.setter
    def BurnerEfficiency(self, newVal:float) -> None:
        """The efficiency of the burner."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBurnerEfficiency"](arg_newVal.COM_val))

    @property
    def MechanicalEfficiency(self) -> float:
        """The mechanical efficiency of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMechanicalEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MechanicalEfficiency.setter
    def MechanicalEfficiency(self, newVal:float) -> None:
        """The mechanical efficiency of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMechanicalEfficiency"](arg_newVal.COM_val))

    @property
    def NoThrustWhenNoFuel(self) -> bool:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNoThrustWhenNoFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NoThrustWhenNoFuel.setter
    def NoThrustWhenNoFuel(self, pVal:bool) -> None:
        """Opt to have no thrust if the fuel is empty."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetNoThrustWhenNoFuel"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7d849783-6cbc-442e-aec8-4137fb673619}", IMissileTurbojetProp)
agcls.AgTypeNameMap["IMissileTurbojetProp"] = IMissileTurbojetProp

class IRotorcraftModel(object):
    """Interface used to access the rotorcraft options in the Aviator catalog."""
    _uuid = "{34b21f79-51d4-4687-8d0f-9ae1d8ac063c}"
    _num_methods = 44
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDescentRateFactor"] = _raise_uninitialized_error
        self.__dict__["_SetDescentRateFactor"] = _raise_uninitialized_error
        self.__dict__["_GetMaxClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_GetClimbAtCruiseAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetClimbAtCruiseAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxDescentAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxDescentAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMinDescentRate"] = _raise_uninitialized_error
        self.__dict__["_SetMinDescentRate"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_SetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetYawRate"] = _raise_uninitialized_error
        self.__dict__["_SetYawRate"] = _raise_uninitialized_error
        self.__dict__["_GetYawRateDot"] = _raise_uninitialized_error
        self.__dict__["_SetYawRateDot"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTransitionPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTransitionPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTFMaxFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTFMaxFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTFTerrainWindow"] = _raise_uninitialized_error
        self.__dict__["_SetTFTerrainWindow"] = _raise_uninitialized_error
        self.__dict__["_GetComputeDeltaAlt"] = _raise_uninitialized_error
        self.__dict__["_SetComputeDeltaAlt"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSafeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSafeAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSafeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSafeTranslationSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSafeTranslationSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSafeTranslationSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultConfiguration"] = _raise_uninitialized_error
        self.__dict__["_GetAerodynamics"] = _raise_uninitialized_error
        self.__dict__["_GetPropulsion"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRotorcraftModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRotorcraftModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRotorcraftModel = agcom.GUID(IRotorcraftModel._uuid)
        vtable_offset_local = IRotorcraftModel._vtable_offset - 1
        self.__dict__["_GetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDescentRateFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDescentRateFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxClimbAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxClimbAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetClimbAtCruiseAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClimbAtCruiseAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxDescentAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxDescentAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetMinDescentRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinDescentRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetRollRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+17, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+18, agcom.VARIANT)
        self.__dict__["_GetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+19, POINTER(agcom.VARIANT))
        self.__dict__["_SetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+20, agcom.VARIANT)
        self.__dict__["_GetYawRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_SetYawRate"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+22, agcom.VARIANT)
        self.__dict__["_GetYawRateDot"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+23, POINTER(agcom.VARIANT))
        self.__dict__["_SetYawRateDot"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+24, agcom.VARIANT)
        self.__dict__["_GetMaxTransitionPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxTransitionPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+26, agcom.VARIANT)
        self.__dict__["_GetTFMaxFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetTFMaxFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetTFTerrainWindow"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTFTerrainWindow"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetComputeDeltaAlt"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetComputeDeltaAlt"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetMaxSafeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaxSafeAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+34, POINTER(agcom.LONG))
        self.__dict__["_SetMaxSafeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+35, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetMaxSafeTranslationSpeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+36, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaxSafeTranslationSpeedType"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetMaxSafeTranslationSpeed"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+38, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+39, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+40, agcom.VARIANT_BOOL)
        self.__dict__["_GetDefaultConfiguration"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+41, POINTER(agcom.PVOID))
        self.__dict__["_GetAerodynamics"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+42, POINTER(agcom.PVOID))
        self.__dict__["_GetPropulsion"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+43, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModel, vtable_offset_local+44, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRotorcraftModel.__dict__ and type(IRotorcraftModel.__dict__[attrname]) == property:
            return IRotorcraftModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRotorcraftModel.")
    
    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude at which the rotorcraft is capable of operating."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude at which the rotorcraft is capable of operating."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAltitude"](arg_newVal.COM_val))

    @property
    def DefaultCruiseAltitude(self) -> float:
        """The rotorcraft's default cruising altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DefaultCruiseAltitude.setter
    def DefaultCruiseAltitude(self, newVal:float) -> None:
        """The rotorcraft's default cruising altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def DescentRateFactor(self) -> float:
        """The descent rate of the rotorcraft as a factor multiplied by the altitude change rate calculated at zero throttle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDescentRateFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DescentRateFactor.setter
    def DescentRateFactor(self, newVal:float) -> None:
        """The descent rate of the rotorcraft as a factor multiplied by the altitude change rate calculated at zero throttle."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDescentRateFactor"](arg_newVal.COM_val))

    @property
    def MaxClimbAngle(self) -> typing.Any:
        """The maximum pitch angle of the rotorcraft's flight path while climbing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxClimbAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxClimbAngle.setter
    def MaxClimbAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the rotorcraft's flight path while climbing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxClimbAngle"](arg_newVal.COM_val))

    @property
    def ClimbAtCruiseAirspeed(self) -> bool:
        """Select to define the climbing airspeed of the rotorcraft using the cruise airspeed of the current procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbAtCruiseAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClimbAtCruiseAirspeed.setter
    def ClimbAtCruiseAirspeed(self, newVal:bool) -> None:
        """Select to define the climbing airspeed of the rotorcraft using the cruise airspeed of the current procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClimbAtCruiseAirspeed"](arg_newVal.COM_val))

    @property
    def MaxDescentAngle(self) -> typing.Any:
        """The maximum pitch angle of the rotorcraft's flight path while descending."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxDescentAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxDescentAngle.setter
    def MaxDescentAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the rotorcraft's flight path while descending."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxDescentAngle"](arg_newVal.COM_val))

    @property
    def MinDescentRate(self) -> float:
        """The minimum rate at which the aircraft will descend once established in a steady descent."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinDescentRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinDescentRate.setter
    def MinDescentRate(self, newVal:float) -> None:
        """The minimum rate at which the aircraft will descend once established in a steady descent."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinDescentRate"](arg_newVal.COM_val))

    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor that the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLoadFactor.setter
    def MaxLoadFactor(self, newVal:float) -> None:
        """The maximum load factor that the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLoadFactor"](arg_newVal.COM_val))

    @property
    def RollRate(self) -> typing.Any:
        """The standard roll rate of the rotorcraft in a turn."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRate.setter
    def RollRate(self, newVal:typing.Any) -> None:
        """The standard roll rate of the rotorcraft in a turn."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRate"](arg_newVal.COM_val))

    @property
    def PitchRate(self) -> typing.Any:
        """The pitch rate when transitioning between attitude modes or procedures."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PitchRate.setter
    def PitchRate(self, newVal:typing.Any) -> None:
        """The pitch rate when transitioning between attitude modes or procedures."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPitchRate"](arg_newVal.COM_val))

    @property
    def YawRate(self) -> typing.Any:
        """The yaw rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetYawRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @YawRate.setter
    def YawRate(self, newVal:typing.Any) -> None:
        """The yaw rate when transitioning between attitude modes."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetYawRate"](arg_newVal.COM_val))

    @property
    def YawRateDot(self) -> typing.Any:
        """The rate of change of the yaw rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetYawRateDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @YawRateDot.setter
    def YawRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the yaw rate."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetYawRateDot"](arg_newVal.COM_val))

    @property
    def MaxTransitionPitchAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path when transitioning between forward flight and hovering."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTransitionPitchAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTransitionPitchAngle.setter
    def MaxTransitionPitchAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path when transitioning between forward flight and hovering."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTransitionPitchAngle"](arg_newVal.COM_val))

    @property
    def TFMaxFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path when the rotorcraft is engaged in terrain following flight."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTFMaxFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TFMaxFlightPathAngle.setter
    def TFMaxFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path when the rotorcraft is engaged in terrain following flight."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTFMaxFlightPathAngle"](arg_newVal.COM_val))

    @property
    def TFTerrainWindow(self) -> float:
        """The time interval over which terrain points are sampled when the rotorcraft is engaged in terrain following flight."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTFTerrainWindow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TFTerrainWindow.setter
    def TFTerrainWindow(self, newVal:float) -> None:
        """The time interval over which terrain points are sampled when the rotorcraft is engaged in terrain following flight."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTFTerrainWindow"](arg_newVal.COM_val))

    @property
    def ComputeDeltaAlt(self) -> float:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputeDeltaAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComputeDeltaAlt.setter
    def ComputeDeltaAlt(self, newVal:float) -> None:
        """The maximum change in altitude in a computed segment before the data is sampled again."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetComputeDeltaAlt"](arg_newVal.COM_val))

    @property
    def MaxSafeAirspeed(self) -> float:
        """The maximum cruising airspeed of the rotorcraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSafeAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxSafeAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The maximum safe airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSafeAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxSafeAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum safe airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSafeAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def MaxSafeTranslationSpeed(self) -> float:
        """The maximum translation speed of the rotorcraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSafeTranslationSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxSafeTranslationSpeedType(self) -> "AgEAvtrAirspeedType":
        """The maximum safe translation speed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSafeTranslationSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxSafeTranslationSpeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum safe translation airspeed and airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSafeTranslationSpeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def IgnoreFPAForClimbDescentTransitions(self) -> bool:
        """Opt to ignore load factor limits when pushing over or pulling up."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIgnoreFPAForClimbDescentTransitions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IgnoreFPAForClimbDescentTransitions.setter
    def IgnoreFPAForClimbDescentTransitions(self, newVal:bool) -> None:
        """Opt to ignore load factor limits when pushing over or pulling up."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetIgnoreFPAForClimbDescentTransitions"](arg_newVal.COM_val))

    @property
    def DefaultConfiguration(self) -> "IConfiguration":
        """The aircraft's default configuration as saved in the catalog."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrConfig:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultConfiguration"](byref(arg_ppAvtrConfig.COM_val)))
            return arg_ppAvtrConfig.python_val

    @property
    def Aerodynamics(self) -> "IRotorcraftAero":
        """Get the aerodynamics interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAerodynamics"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Propulsion(self) -> "IRotorcraftProp":
        """Get the propulsion interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsion"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{34b21f79-51d4-4687-8d0f-9ae1d8ac063c}", IRotorcraftModel)
agcls.AgTypeNameMap["IRotorcraftModel"] = IRotorcraftModel

class IRotorcraftAero(object):
    """Interface used to access the aerodynamics options for a rotorcraft."""
    _uuid = "{76dc620d-2f8f-49ce-b043-7f502815bcb3}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRotorCount"] = _raise_uninitialized_error
        self.__dict__["_SetRotorCount"] = _raise_uninitialized_error
        self.__dict__["_GetRotorDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetRotorDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetBladesPerRotor"] = _raise_uninitialized_error
        self.__dict__["_SetBladesPerRotor"] = _raise_uninitialized_error
        self.__dict__["_GetBladeChord"] = _raise_uninitialized_error
        self.__dict__["_SetBladeChord"] = _raise_uninitialized_error
        self.__dict__["_GetRotorTipMach"] = _raise_uninitialized_error
        self.__dict__["_SetRotorTipMach"] = _raise_uninitialized_error
        self.__dict__["_GetFuselageFlatPlateArea"] = _raise_uninitialized_error
        self.__dict__["_SetFuselageFlatPlateArea"] = _raise_uninitialized_error
        self.__dict__["_GetTailRotorOffset"] = _raise_uninitialized_error
        self.__dict__["_SetTailRotorOffset"] = _raise_uninitialized_error
        self.__dict__["_GetTailRotorDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetTailRotorDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetBladeProfileDragCD0"] = _raise_uninitialized_error
        self.__dict__["_SetBladeProfileDragCD0"] = _raise_uninitialized_error
        self.__dict__["_GetBladeProfileDragK"] = _raise_uninitialized_error
        self.__dict__["_SetBladeProfileDragK"] = _raise_uninitialized_error
        self.__dict__["_GetInducedPowerCorrectionFactor"] = _raise_uninitialized_error
        self.__dict__["_SetInducedPowerCorrectionFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRotorcraftAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRotorcraftAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRotorcraftAero = agcom.GUID(IRotorcraftAero._uuid)
        vtable_offset_local = IRotorcraftAero._vtable_offset - 1
        self.__dict__["_GetRotorCount"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetRotorCount"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetRotorDiameter"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotorDiameter"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetBladesPerRotor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetBladesPerRotor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetBladeChord"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBladeChord"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetRotorTipMach"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotorTipMach"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFuselageFlatPlateArea"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuselageFlatPlateArea"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetTailRotorOffset"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailRotorOffset"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetTailRotorDiameter"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTailRotorDiameter"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetBladeProfileDragCD0"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBladeProfileDragCD0"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetBladeProfileDragK"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBladeProfileDragK"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetInducedPowerCorrectionFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInducedPowerCorrectionFactor"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftAero, vtable_offset_local+22, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRotorcraftAero.__dict__ and type(IRotorcraftAero.__dict__[attrname]) == property:
            return IRotorcraftAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRotorcraftAero.")
    
    @property
    def RotorCount(self) -> int:
        """The number of rotors."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotorCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RotorCount.setter
    def RotorCount(self, newVal:int) -> None:
        """The number of rotors."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRotorCount"](arg_newVal.COM_val))

    @property
    def RotorDiameter(self) -> float:
        """The diameter of the rotor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotorDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RotorDiameter.setter
    def RotorDiameter(self, newVal:float) -> None:
        """The diameter of the rotor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRotorDiameter"](arg_newVal.COM_val))

    @property
    def BladesPerRotor(self) -> int:
        """The number of blades on each rotor."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBladesPerRotor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BladesPerRotor.setter
    def BladesPerRotor(self, newVal:int) -> None:
        """The number of blades on each rotor."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBladesPerRotor"](arg_newVal.COM_val))

    @property
    def BladeChord(self) -> float:
        """The chord length of the blade."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBladeChord"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BladeChord.setter
    def BladeChord(self, newVal:float) -> None:
        """The chord length of the blade."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBladeChord"](arg_newVal.COM_val))

    @property
    def RotorTipMach(self) -> float:
        """The Mach number of the advancing blade tip."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotorTipMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RotorTipMach.setter
    def RotorTipMach(self, newVal:float) -> None:
        """The Mach number of the advancing blade tip."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRotorTipMach"](arg_newVal.COM_val))

    @property
    def FuselageFlatPlateArea(self) -> float:
        """The flat plate area for the fuselage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuselageFlatPlateArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuselageFlatPlateArea.setter
    def FuselageFlatPlateArea(self, newVal:float) -> None:
        """The flat plate area for the fuselage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuselageFlatPlateArea"](arg_newVal.COM_val))

    @property
    def TailRotorOffset(self) -> float:
        """The offset of the tail rotor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailRotorOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailRotorOffset.setter
    def TailRotorOffset(self, newVal:float) -> None:
        """The offset of the tail rotor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailRotorOffset"](arg_newVal.COM_val))

    @property
    def TailRotorDiameter(self) -> float:
        """The diameter of the tail rotor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTailRotorDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TailRotorDiameter.setter
    def TailRotorDiameter(self, newVal:float) -> None:
        """The diameter of the tail rotor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTailRotorDiameter"](arg_newVal.COM_val))

    @property
    def BladeProfileDragCD0(self) -> float:
        """The drag coefficient when the rotor disc does not generate any lift."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBladeProfileDragCD0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BladeProfileDragCD0.setter
    def BladeProfileDragCD0(self, newVal:float) -> None:
        """The drag coefficient when the rotor disc does not generate any lift."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBladeProfileDragCD0"](arg_newVal.COM_val))

    @property
    def BladeProfileDragK(self) -> float:
        """The induced drag coefficient, which accounts for how lift generation impacts drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBladeProfileDragK"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BladeProfileDragK.setter
    def BladeProfileDragK(self, newVal:float) -> None:
        """The induced drag coefficient, which accounts for how lift generation impacts drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBladeProfileDragK"](arg_newVal.COM_val))

    @property
    def InducedPowerCorrectionFactor(self) -> float:
        """The slop factor that accounts for losses."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInducedPowerCorrectionFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InducedPowerCorrectionFactor.setter
    def InducedPowerCorrectionFactor(self, newVal:float) -> None:
        """The slop factor that accounts for losses."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInducedPowerCorrectionFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{76dc620d-2f8f-49ce-b043-7f502815bcb3}", IRotorcraftAero)
agcls.AgTypeNameMap["IRotorcraftAero"] = IRotorcraftAero

class IRotorcraftProp(object):
    """Interface used to access the Propulsion options for a rotorcraft."""
    _uuid = "{83f50978-efae-48fd-b5e7-df4f1a487aac}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPowerplantType"] = _raise_uninitialized_error
        self.__dict__["_SetPowerplantType"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSLPower"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSLPower"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSLFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSLFuelFlow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRotorcraftProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRotorcraftProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRotorcraftProp = agcom.GUID(IRotorcraftProp._uuid)
        vtable_offset_local = IRotorcraftProp._vtable_offset - 1
        self.__dict__["_GetPowerplantType"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPowerplantType"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMaxSLPower"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSLPower"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMaxSLFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSLFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftProp, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRotorcraftProp.__dict__ and type(IRotorcraftProp.__dict__[attrname]) == property:
            return IRotorcraftProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRotorcraftProp.")
    
    @property
    def PowerplantType(self) -> "AgEAvtrRotorcraftPowerplantType":
        """The rotorcraft's powerplant type."""
        with agmarshall.AgEnum_arg(AgEAvtrRotorcraftPowerplantType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerplantType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerplantType.setter
    def PowerplantType(self, newVal:"AgEAvtrRotorcraftPowerplantType") -> None:
        """The rotorcraft's powerplant type."""
        with agmarshall.AgEnum_arg(AgEAvtrRotorcraftPowerplantType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerplantType"](arg_newVal.COM_val))

    @property
    def MaxSLPower(self) -> float:
        """The maximum power at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSLPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSLPower.setter
    def MaxSLPower(self, newVal:float) -> None:
        """The maximum power at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSLPower"](arg_newVal.COM_val))

    @property
    def MaxSLFuelFlow(self) -> float:
        """The maximum fuel flow at sea level."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSLFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSLFuelFlow.setter
    def MaxSLFuelFlow(self, newVal:float) -> None:
        """The maximum fuel flow at sea level."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSLFuelFlow"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{83f50978-efae-48fd-b5e7-df4f1a487aac}", IRotorcraftProp)
agcls.AgTypeNameMap["IRotorcraftProp"] = IRotorcraftProp

class IUserRunwaySource(object):
    """Interface used to access the user runways in the Aviator catalog."""
    _uuid = "{684e58b2-17da-40e6-ab75-00f965dc947c}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserRunway"] = _raise_uninitialized_error
        self.__dict__["_AddUserRunway"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserRunwaySource._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserRunwaySource from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserRunwaySource = agcom.GUID(IUserRunwaySource._uuid)
        vtable_offset_local = IUserRunwaySource._vtable_offset - 1
        self.__dict__["_GetUserRunway"] = IAGFUNCTYPE(pUnk, IID_IUserRunwaySource, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddUserRunway"] = IAGFUNCTYPE(pUnk, IID_IUserRunwaySource, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IUserRunwaySource, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserRunwaySource.__dict__ and type(IUserRunwaySource.__dict__[attrname]) == property:
            return IUserRunwaySource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserRunwaySource.")
    
    def GetUserRunway(self, name:str) -> "IUserRunway":
        """Gets the user runway with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserRunway:
            agcls.evaluate_hresult(self.__dict__["_GetUserRunway"](arg_name.COM_val, byref(arg_ppUserRunway.COM_val)))
            return arg_ppUserRunway.python_val

    def AddUserRunway(self, name:str) -> "IUserRunway":
        """Creates a new user runway with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserRunway:
            agcls.evaluate_hresult(self.__dict__["_AddUserRunway"](arg_name.COM_val, byref(arg_ppUserRunway.COM_val)))
            return arg_ppUserRunway.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{684e58b2-17da-40e6-ab75-00f965dc947c}", IUserRunwaySource)
agcls.AgTypeNameMap["IUserRunwaySource"] = IUserRunwaySource

class IUserRunway(object):
    """Interface used to access a user runway in the Aviator catalog."""
    _uuid = "{74B0531F-504B-42E6-A8AF-7A6B891A88F8}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainAlt"] = _raise_uninitialized_error
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetLowEndHeading"] = _raise_uninitialized_error
        self.__dict__["_SetLowEndHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHighEndHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHighEndHeading"] = _raise_uninitialized_error
        self.__dict__["_GetIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_CopySite"] = _raise_uninitialized_error
        self.__dict__["_PasteSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserRunway._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserRunway from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserRunway = agcom.GUID(IUserRunway._uuid)
        vtable_offset_local = IUserRunway._vtable_offset - 1
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetTerrainAlt"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetLowEndHeading"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowEndHeading"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetHighEndHeading"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetHighEndHeading"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_CopySite"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+17, )
        self.__dict__["_PasteSite"] = IAGFUNCTYPE(pUnk, IID_IUserRunway, vtable_offset_local+18, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserRunway.__dict__ and type(IUserRunway.__dict__[attrname]) == property:
            return IUserRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserRunway.")
    
    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val

    @property
    def Altitude(self) -> float:
        """The runway altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The runway altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    def GetTerrainAlt(self) -> float:
        """Set the runway altitude to the terrain altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Latitude(self) -> typing.Any:
        """The runway latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The runway latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The runway longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The runway longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Length(self) -> float:
        """The length of the runway"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Length.setter
    def Length(self, newVal:float) -> None:
        """The length of the runway"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_newVal.COM_val))

    @property
    def LowEndHeading(self) -> typing.Any:
        """The low end heading of the runway."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowEndHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowEndHeading.setter
    def LowEndHeading(self, newVal:typing.Any) -> None:
        """The low end heading of the runway."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowEndHeading"](arg_newVal.COM_val))

    @property
    def HighEndHeading(self) -> typing.Any:
        """The high end heading of the runway."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighEndHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighEndHeading.setter
    def HighEndHeading(self, newVal:typing.Any) -> None:
        """The high end heading of the runway."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighEndHeading"](arg_newVal.COM_val))

    @property
    def IsMagnetic(self) -> bool:
        """Opt whether to use a magnetic heading for the runway heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IsMagnetic.setter
    def IsMagnetic(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading for the runway heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetIsMagnetic"](arg_newVal.COM_val))

    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopySite"]())

    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteSite"]())


agcls.AgClassCatalog.add_catalog_entry("{74B0531F-504B-42E6-A8AF-7A6B891A88F8}", IUserRunway)
agcls.AgTypeNameMap["IUserRunway"] = IUserRunway

class IARINC424Item(object):
    """Interface used to access the options for an ARINC424 Item found in the Aviator catalog."""
    _uuid = "{ec9a6d30-e195-49d8-a5fd-635114490f7c}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        self.__dict__["_GetValue"] = _raise_uninitialized_error
        self.__dict__["_GetAllFields"] = _raise_uninitialized_error
        self.__dict__["_GetAllFieldsAndValues"] = _raise_uninitialized_error
        self.__dict__["_CopySite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IARINC424Item._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IARINC424Item from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IARINC424Item = agcom.GUID(IARINC424Item._uuid)
        vtable_offset_local = IARINC424Item._vtable_offset - 1
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IARINC424Item, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetValue"] = IAGFUNCTYPE(pUnk, IID_IARINC424Item, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.VARIANT))
        self.__dict__["_GetAllFields"] = IAGFUNCTYPE(pUnk, IID_IARINC424Item, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAllFieldsAndValues"] = IAGFUNCTYPE(pUnk, IID_IARINC424Item, vtable_offset_local+4, POINTER(agcom.SAFEARRAY))
        self.__dict__["_CopySite"] = IAGFUNCTYPE(pUnk, IID_IARINC424Item, vtable_offset_local+5, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IARINC424Item.__dict__ and type(IARINC424Item.__dict__[attrname]) == property:
            return IARINC424Item.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IARINC424Item.")
    
    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val

    def GetValue(self, fieldName:str) -> typing.Any:
        """Get the value of the field with the given name."""
        with agmarshall.BSTR_arg(fieldName) as arg_fieldName, \
             agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetValue"](arg_fieldName.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAllFields(self) -> list:
        """Get all the field names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllFields"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAllFieldsAndValues(self) -> list:
        """Get all the field names along with the corresponding value."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllFieldsAndValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopySite"]())


agcls.AgClassCatalog.add_catalog_entry("{ec9a6d30-e195-49d8-a5fd-635114490f7c}", IARINC424Item)
agcls.AgTypeNameMap["IARINC424Item"] = IARINC424Item

class IARINC424Source(object):
    """Interface used to access the options for any ARINC424 source in the Aviator catalog."""
    _uuid = "{949959c7-31af-48e3-9267-27acdcbedc5e}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetARINC424Item"] = _raise_uninitialized_error
        self.__dict__["_GetUseMasterDataFile"] = _raise_uninitialized_error
        self.__dict__["_SetUseMasterDataFile"] = _raise_uninitialized_error
        self.__dict__["_GetMasterDataFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetMasterDataFilepath"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideDataFilepath"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideDataFilepath"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IARINC424Source._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IARINC424Source from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IARINC424Source = agcom.GUID(IARINC424Source._uuid)
        vtable_offset_local = IARINC424Source._vtable_offset - 1
        self.__dict__["_GetARINC424Item"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetUseMasterDataFile"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMasterDataFile"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+3, agcom.VARIANT_BOOL)
        self.__dict__["_GetMasterDataFilepath"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_SetMasterDataFilepath"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+5, agcom.BSTR)
        self.__dict__["_GetOverrideDataFilepath"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_SetOverrideDataFilepath"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IARINC424Source, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IARINC424Source.__dict__ and type(IARINC424Source.__dict__[attrname]) == property:
            return IARINC424Source.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IARINC424Source.")
    
    def GetARINC424Item(self, name:str) -> "IARINC424Item":
        """Gets the ARINC-424 item with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppItem:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Item"](arg_name.COM_val, byref(arg_ppItem.COM_val)))
            return arg_ppItem.python_val

    @property
    def UseMasterDataFile(self) -> bool:
        """Opt whether to use the master data file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMasterDataFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMasterDataFile.setter
    def UseMasterDataFile(self, newVal:bool) -> None:
        """Opt whether to use the master data file."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMasterDataFile"](arg_newVal.COM_val))

    @property
    def MasterDataFilepath(self) -> str:
        """The master data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMasterDataFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MasterDataFilepath.setter
    def MasterDataFilepath(self, newVal:str) -> None:
        """The master data file path."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMasterDataFilepath"](arg_newVal.COM_val))

    @property
    def OverrideDataFilepath(self) -> str:
        """The file path to the data overriding the mader data file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideDataFilepath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideDataFilepath.setter
    def OverrideDataFilepath(self, newVal:str) -> None:
        """The file path to the data overriding the mader data file."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideDataFilepath"](arg_newVal.COM_val))

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{949959c7-31af-48e3-9267-27acdcbedc5e}", IARINC424Source)
agcls.AgTypeNameMap["IARINC424Source"] = IARINC424Source

class IDAFIFSource(object):
    """Interface used to access the options for any DAFIF source in the Aviator catalog."""
    _uuid = "{a5045bd9-f91e-4213-b4f3-0b7a3acce45c}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDAFIFItem"] = _raise_uninitialized_error
        self.__dict__["_GetDataPath"] = _raise_uninitialized_error
        self.__dict__["_SetDataPath"] = _raise_uninitialized_error
        self.__dict__["_GetEffectiveDate"] = _raise_uninitialized_error
        self.__dict__["_GetExpirationDate"] = _raise_uninitialized_error
        self.__dict__["_GetSpecRevision"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IDAFIFSource._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IDAFIFSource from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IDAFIFSource = agcom.GUID(IDAFIFSource._uuid)
        vtable_offset_local = IDAFIFSource._vtable_offset - 1
        self.__dict__["_GetDAFIFItem"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetDataPath"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_SetDataPath"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_GetEffectiveDate"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetExpirationDate"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetSpecRevision"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IDAFIFSource, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IDAFIFSource.__dict__ and type(IDAFIFSource.__dict__[attrname]) == property:
            return IDAFIFSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IDAFIFSource.")
    
    def GetDAFIFItem(self, name:str) -> "IDAFIFItem":
        """Get the DAFIF item with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppItem:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFItem"](arg_name.COM_val, byref(arg_ppItem.COM_val)))
            return arg_ppItem.python_val

    @property
    def DataPath(self) -> str:
        """The DAFIF data path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataPath"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataPath.setter
    def DataPath(self, newVal:str) -> None:
        """The DAFIF data path."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataPath"](arg_newVal.COM_val))

    @property
    def EffectiveDate(self) -> str:
        """The effective date of the DAFIF catalog."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEffectiveDate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ExpirationDate(self) -> str:
        """The expiration date of the DAFIF catalog."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetExpirationDate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SpecRevision(self) -> str:
        """The DAFIF edition."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecRevision"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{a5045bd9-f91e-4213-b4f3-0b7a3acce45c}", IDAFIFSource)
agcls.AgTypeNameMap["IDAFIFSource"] = IDAFIFSource

class IUserVTOLPoint(object):
    """Interface used to access a user VTOL Point in the Aviator catalog."""
    _uuid = "{10055426-0046-406c-85db-b418e7b0810e}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainAlt"] = _raise_uninitialized_error
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_CopySite"] = _raise_uninitialized_error
        self.__dict__["_PasteSite"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserVTOLPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserVTOLPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserVTOLPoint = agcom.GUID(IUserVTOLPoint._uuid)
        vtable_offset_local = IUserVTOLPoint._vtable_offset - 1
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetTerrainAlt"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_CopySite"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+8, )
        self.__dict__["_PasteSite"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+9, )
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPoint, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserVTOLPoint.__dict__ and type(IUserVTOLPoint.__dict__[attrname]) == property:
            return IUserVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserVTOLPoint.")
    
    @property
    def Altitude(self) -> float:
        """The VTOL Point altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The VTOL Point altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    def GetTerrainAlt(self) -> float:
        """Set the VTOL Point altitude to the terrain altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Latitude(self) -> typing.Any:
        """The VTOL Point latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The VTOL Point latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The VTOL Point longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The VTOL Point longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopySite"]())

    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteSite"]())

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{10055426-0046-406c-85db-b418e7b0810e}", IUserVTOLPoint)
agcls.AgTypeNameMap["IUserVTOLPoint"] = IUserVTOLPoint

class IUserVTOLPointSource(object):
    """Interface used to access the user VTOL Points in the Aviator catalog."""
    _uuid = "{f5a61b9c-b511-4cf4-b1ee-058153530c70}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserVTOLPoint"] = _raise_uninitialized_error
        self.__dict__["_AddUserVTOLPoint"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserVTOLPointSource._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserVTOLPointSource from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserVTOLPointSource = agcom.GUID(IUserVTOLPointSource._uuid)
        vtable_offset_local = IUserVTOLPointSource._vtable_offset - 1
        self.__dict__["_GetUserVTOLPoint"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPointSource, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddUserVTOLPoint"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPointSource, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IUserVTOLPointSource, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserVTOLPointSource.__dict__ and type(IUserVTOLPointSource.__dict__[attrname]) == property:
            return IUserVTOLPointSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserVTOLPointSource.")
    
    def GetUserVTOLPoint(self, name:str) -> "IUserVTOLPoint":
        """Gets the user VTOL Point with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserVTOLPoint:
            agcls.evaluate_hresult(self.__dict__["_GetUserVTOLPoint"](arg_name.COM_val, byref(arg_ppUserVTOLPoint.COM_val)))
            return arg_ppUserVTOLPoint.python_val

    def AddUserVTOLPoint(self, name:str) -> "IUserVTOLPoint":
        """Creates a new user VTOL Point with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserVTOLPoint:
            agcls.evaluate_hresult(self.__dict__["_AddUserVTOLPoint"](arg_name.COM_val, byref(arg_ppUserVTOLPoint.COM_val)))
            return arg_ppUserVTOLPoint.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{f5a61b9c-b511-4cf4-b1ee-058153530c70}", IUserVTOLPointSource)
agcls.AgTypeNameMap["IUserVTOLPointSource"] = IUserVTOLPointSource

class IUserWaypoint(object):
    """Interface used to access a user waypoint in the Aviator catalog."""
    _uuid = "{2b18b860-070a-41cf-803c-c14d7f87ee8c}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_CopySite"] = _raise_uninitialized_error
        self.__dict__["_PasteSite"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserWaypoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserWaypoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserWaypoint = agcom.GUID(IUserWaypoint._uuid)
        vtable_offset_local = IUserWaypoint._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_CopySite"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+5, )
        self.__dict__["_PasteSite"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+6, )
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IUserWaypoint, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserWaypoint.__dict__ and type(IUserWaypoint.__dict__[attrname]) == property:
            return IUserWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserWaypoint.")
    
    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopySite"]())

    def PasteSite(self) -> None:
        """Paste the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteSite"]())

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{2b18b860-070a-41cf-803c-c14d7f87ee8c}", IUserWaypoint)
agcls.AgTypeNameMap["IUserWaypoint"] = IUserWaypoint

class IUserWaypointSource(object):
    """Interface used to access the user waypoints in the Aviator catalog."""
    _uuid = "{381b23fb-f3b9-4944-996a-efdd9dde16d8}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserWaypoint"] = _raise_uninitialized_error
        self.__dict__["_AddUserWaypoint"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IUserWaypointSource._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IUserWaypointSource from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IUserWaypointSource = agcom.GUID(IUserWaypointSource._uuid)
        vtable_offset_local = IUserWaypointSource._vtable_offset - 1
        self.__dict__["_GetUserWaypoint"] = IAGFUNCTYPE(pUnk, IID_IUserWaypointSource, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddUserWaypoint"] = IAGFUNCTYPE(pUnk, IID_IUserWaypointSource, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IUserWaypointSource, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IUserWaypointSource.__dict__ and type(IUserWaypointSource.__dict__[attrname]) == property:
            return IUserWaypointSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IUserWaypointSource.")
    
    def GetUserWaypoint(self, name:str) -> "IUserWaypoint":
        """Gets the user waypoint with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserWaypoint:
            agcls.evaluate_hresult(self.__dict__["_GetUserWaypoint"](arg_name.COM_val, byref(arg_ppUserWaypoint.COM_val)))
            return arg_ppUserWaypoint.python_val

    def AddUserWaypoint(self, name:str) -> "IUserWaypoint":
        """Creates a new user waypoint with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppUserWaypoint:
            agcls.evaluate_hresult(self.__dict__["_AddUserWaypoint"](arg_name.COM_val, byref(arg_ppUserWaypoint.COM_val)))
            return arg_ppUserWaypoint.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{381b23fb-f3b9-4944-996a-efdd9dde16d8}", IUserWaypointSource)
agcls.AgTypeNameMap["IUserWaypointSource"] = IUserWaypointSource

class IPropulsionEfficiencies(object):
    """Interface used to access the options for the Efficiencies and Losses of a jet engine powerplant in the advanced fixed wing tool."""
    _uuid = "{ff3eeabb-ada1-40dd-99ce-acacb6c390f2}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTechnologyLevel"] = _raise_uninitialized_error
        self.__dict__["_SetTechnologyLevel"] = _raise_uninitialized_error
        self.__dict__["_GetIntakeType"] = _raise_uninitialized_error
        self.__dict__["_SetIntakeType"] = _raise_uninitialized_error
        self.__dict__["_GetTurbineType"] = _raise_uninitialized_error
        self.__dict__["_SetTurbineType"] = _raise_uninitialized_error
        self.__dict__["_GetExhaustNozzleType"] = _raise_uninitialized_error
        self.__dict__["_SetExhaustNozzleType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPropulsionEfficiencies._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPropulsionEfficiencies from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPropulsionEfficiencies = agcom.GUID(IPropulsionEfficiencies._uuid)
        vtable_offset_local = IPropulsionEfficiencies._vtable_offset - 1
        self.__dict__["_GetTechnologyLevel"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTechnologyLevel"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetIntakeType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetIntakeType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetTurbineType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetTurbineType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetExhaustNozzleType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetExhaustNozzleType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionEfficiencies, vtable_offset_local+8, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPropulsionEfficiencies.__dict__ and type(IPropulsionEfficiencies.__dict__[attrname]) == property:
            return IPropulsionEfficiencies.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPropulsionEfficiencies.")
    
    @property
    def TechnologyLevel(self) -> "AgEAvtrJetEngineTechnologyLevel":
        """The technology level of the jet engine."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineTechnologyLevel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTechnologyLevel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TechnologyLevel.setter
    def TechnologyLevel(self, newVal:"AgEAvtrJetEngineTechnologyLevel") -> None:
        """The technology level of the jet engine."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineTechnologyLevel, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTechnologyLevel"](arg_newVal.COM_val))

    @property
    def IntakeType(self) -> "AgEAvtrJetEngineIntakeType":
        """The jet engine intake type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineIntakeType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntakeType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IntakeType.setter
    def IntakeType(self, newVal:"AgEAvtrJetEngineIntakeType") -> None:
        """The jet engine intake type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineIntakeType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetIntakeType"](arg_newVal.COM_val))

    @property
    def TurbineType(self) -> "AgEAvtrJetEngineTurbineType":
        """The jet engine turbine type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineTurbineType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurbineType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurbineType.setter
    def TurbineType(self, newVal:"AgEAvtrJetEngineTurbineType") -> None:
        """The jet engine turbine type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineTurbineType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurbineType"](arg_newVal.COM_val))

    @property
    def ExhaustNozzleType(self) -> "AgEAvtrJetEngineExhaustNozzleType":
        """The jet engine exhaust nozzle type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineExhaustNozzleType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetExhaustNozzleType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ExhaustNozzleType.setter
    def ExhaustNozzleType(self, newVal:"AgEAvtrJetEngineExhaustNozzleType") -> None:
        """The jet engine exhaust nozzle type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetEngineExhaustNozzleType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetExhaustNozzleType"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ff3eeabb-ada1-40dd-99ce-acacb6c390f2}", IPropulsionEfficiencies)
agcls.AgTypeNameMap["IPropulsionEfficiencies"] = IPropulsionEfficiencies

class IFuelModelKeroseneAFPROP(object):
    """Interface used to access the options for Kerosense - CEA fuel for a thermodynamic a jet engine model."""
    _uuid = "{f32e5943-6656-4ef2-983b-e80105acf859}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSubtype"] = _raise_uninitialized_error
        self.__dict__["_SetSubtype"] = _raise_uninitialized_error
        self.__dict__["_GetSpecificEnergy"] = _raise_uninitialized_error
        self.__dict__["_SetSpecificEnergy"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IFuelModelKeroseneAFPROP._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IFuelModelKeroseneAFPROP from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IFuelModelKeroseneAFPROP = agcom.GUID(IFuelModelKeroseneAFPROP._uuid)
        vtable_offset_local = IFuelModelKeroseneAFPROP._vtable_offset - 1
        self.__dict__["_GetSubtype"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneAFPROP, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetSubtype"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneAFPROP, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetSpecificEnergy"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneAFPROP, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpecificEnergy"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneAFPROP, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IFuelModelKeroseneAFPROP.__dict__ and type(IFuelModelKeroseneAFPROP.__dict__[attrname]) == property:
            return IFuelModelKeroseneAFPROP.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IFuelModelKeroseneAFPROP.")
    
    @property
    def Subtype(self) -> "AgEAvtrAFPROPFuelType":
        """The fuel subtype."""
        with agmarshall.AgEnum_arg(AgEAvtrAFPROPFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSubtype"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Subtype.setter
    def Subtype(self, newVal:"AgEAvtrAFPROPFuelType") -> None:
        """The fuel subtype."""
        with agmarshall.AgEnum_arg(AgEAvtrAFPROPFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSubtype"](arg_newVal.COM_val))

    @property
    def SpecificEnergy(self) -> float:
        """The specific energy of the jet fuel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecificEnergy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecificEnergy.setter
    def SpecificEnergy(self, newVal:float) -> None:
        """The specific energy of the jet fuel."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecificEnergy"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f32e5943-6656-4ef2-983b-e80105acf859}", IFuelModelKeroseneAFPROP)
agcls.AgTypeNameMap["IFuelModelKeroseneAFPROP"] = IFuelModelKeroseneAFPROP

class IFuelModelKeroseneCEA(object):
    """Interface used to access the options for Kerosense - CEA fuel for a thermodynamic a jet engine model."""
    _uuid = "{52d8882c-bc92-469c-ae5b-2ac105b2f88b}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSubtype"] = _raise_uninitialized_error
        self.__dict__["_SetSubtype"] = _raise_uninitialized_error
        self.__dict__["_GetSpecificEnergy"] = _raise_uninitialized_error
        self.__dict__["_SetSpecificEnergy"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IFuelModelKeroseneCEA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IFuelModelKeroseneCEA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IFuelModelKeroseneCEA = agcom.GUID(IFuelModelKeroseneCEA._uuid)
        vtable_offset_local = IFuelModelKeroseneCEA._vtable_offset - 1
        self.__dict__["_GetSubtype"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneCEA, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetSubtype"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneCEA, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetSpecificEnergy"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneCEA, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpecificEnergy"] = IAGFUNCTYPE(pUnk, IID_IFuelModelKeroseneCEA, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IFuelModelKeroseneCEA.__dict__ and type(IFuelModelKeroseneCEA.__dict__[attrname]) == property:
            return IFuelModelKeroseneCEA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IFuelModelKeroseneCEA.")
    
    @property
    def Subtype(self) -> "AgEAvtrCEAFuelType":
        """The fuel subtype."""
        with agmarshall.AgEnum_arg(AgEAvtrCEAFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSubtype"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Subtype.setter
    def Subtype(self, newVal:"AgEAvtrCEAFuelType") -> None:
        """The fuel subtype."""
        with agmarshall.AgEnum_arg(AgEAvtrCEAFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSubtype"](arg_newVal.COM_val))

    @property
    def SpecificEnergy(self) -> float:
        """The specific energy of the jet fuel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecificEnergy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecificEnergy.setter
    def SpecificEnergy(self, newVal:float) -> None:
        """The specific energy of the jet fuel."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecificEnergy"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{52d8882c-bc92-469c-ae5b-2ac105b2f88b}", IFuelModelKeroseneCEA)
agcls.AgTypeNameMap["IFuelModelKeroseneCEA"] = IFuelModelKeroseneCEA

class IAdvFixedWingRamjetBasic(object):
    """Interface used to access the options for a basic Ramjet mode."""
    _uuid = "{9533600c-479f-42f8-b14d-a56199f9f64f}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetFuelType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelType"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsAFPROP"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsCEA"] = _raise_uninitialized_error
        self.__dict__["_GetEfficienciesAndLosses"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingRamjetBasic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingRamjetBasic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingRamjetBasic = agcom.GUID(IAdvFixedWingRamjetBasic._uuid)
        vtable_offset_local = IAdvFixedWingRamjetBasic._vtable_offset - 1
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetFuelModeAsAFPROP"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelModeAsCEA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+14, POINTER(agcom.PVOID))
        self.__dict__["_GetEfficienciesAndLosses"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingRamjetBasic, vtable_offset_local+15, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingRamjetBasic.__dict__ and type(IAdvFixedWingRamjetBasic.__dict__[attrname]) == property:
            return IAdvFixedWingRamjetBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingRamjetBasic.")
    
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCompressionTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCompressionTemp"](arg_newVal.COM_val))

    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxBurnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxBurnerTemp"](arg_newVal.COM_val))

    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelType"](arg_newVal.COM_val))

    @property
    def FuelModeAsAFPROP(self) -> "IFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsAFPROP"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelModeAsCEA(self) -> "IFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsCEA"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EfficienciesAndLosses(self) -> "IPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEfficienciesAndLosses"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9533600c-479f-42f8-b14d-a56199f9f64f}", IAdvFixedWingRamjetBasic)
agcls.AgTypeNameMap["IAdvFixedWingRamjetBasic"] = IAdvFixedWingRamjetBasic

class IAdvFixedWingScramjetBasic(object):
    """Interface used to access the options for a basic Scramjet mode."""
    _uuid = "{24585a26-2d65-4fa8-850d-d19e5f7d190d}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDesignAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_SetDesignMach"] = _raise_uninitialized_error
        self.__dict__["_GetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_SetDesignThrust"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCompressionTemp"] = _raise_uninitialized_error
        self.__dict__["_GetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_SetMaxBurnerTemp"] = _raise_uninitialized_error
        self.__dict__["_GetFuelType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelType"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsAFPROP"] = _raise_uninitialized_error
        self.__dict__["_GetFuelModeAsCEA"] = _raise_uninitialized_error
        self.__dict__["_GetEfficienciesAndLosses"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingScramjetBasic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingScramjetBasic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingScramjetBasic = agcom.GUID(IAdvFixedWingScramjetBasic._uuid)
        vtable_offset_local = IAdvFixedWingScramjetBasic._vtable_offset - 1
        self.__dict__["_GetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignAltitude"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignMach"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesignThrust"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxCompressionTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxBurnerTemp"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetFuelType"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetFuelModeAsAFPROP"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelModeAsCEA"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+14, POINTER(agcom.PVOID))
        self.__dict__["_GetEfficienciesAndLosses"] = IAGFUNCTYPE(pUnk, IID_IAdvFixedWingScramjetBasic, vtable_offset_local+15, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingScramjetBasic.__dict__ and type(IAdvFixedWingScramjetBasic.__dict__[attrname]) == property:
            return IAdvFixedWingScramjetBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingScramjetBasic.")
    
    @property
    def DesignAltitude(self) -> float:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignAltitude.setter
    def DesignAltitude(self, newVal:float) -> None:
        """The altitude design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignAltitude"](arg_newVal.COM_val))

    @property
    def DesignMach(self) -> float:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignMach"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignMach.setter
    def DesignMach(self, newVal:float) -> None:
        """The mach number design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignMach"](arg_newVal.COM_val))

    @property
    def DesignThrust(self) -> float:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesignThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesignThrust.setter
    def DesignThrust(self, newVal:float) -> None:
        """The thrust design point of the engine."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesignThrust"](arg_newVal.COM_val))

    @property
    def MaxCompressionTemp(self) -> float:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCompressionTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCompressionTemp.setter
    def MaxCompressionTemp(self, newVal:float) -> None:
        """The maximum temperature at the compressor stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCompressionTemp"](arg_newVal.COM_val))

    @property
    def MaxBurnerTemp(self) -> float:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxBurnerTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxBurnerTemp.setter
    def MaxBurnerTemp(self, newVal:float) -> None:
        """The maximum temperature at the combustion stage."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxBurnerTemp"](arg_newVal.COM_val))

    @property
    def FuelType(self) -> "AgEAvtrJetFuelType":
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelType.setter
    def FuelType(self, newVal:"AgEAvtrJetFuelType") -> None:
        """The jet engine's fuel type."""
        with agmarshall.AgEnum_arg(AgEAvtrJetFuelType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelType"](arg_newVal.COM_val))

    @property
    def FuelModeAsAFPROP(self) -> "IFuelModelKeroseneAFPROP":
        """Get the interface for a Kerosene - AFPROP fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsAFPROP"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FuelModeAsCEA(self) -> "IFuelModelKeroseneCEA":
        """Get the interface for a Kerosene - CEA fuel mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelModeAsCEA"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EfficienciesAndLosses(self) -> "IPropulsionEfficiencies":
        """The jet engine's propulsion efficiencies and losses."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEfficienciesAndLosses"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{24585a26-2d65-4fa8-850d-d19e5f7d190d}", IAdvFixedWingScramjetBasic)
agcls.AgTypeNameMap["IAdvFixedWingScramjetBasic"] = IAdvFixedWingScramjetBasic

class IRefuelDumpProperties(object):
    """Interface used to access the refuel/dump properties for the current procedure."""
    _uuid = "{8C37F92D-E841-456E-8E12-A09C84D5EFF5}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpModeValue"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpRate"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpRate"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetCanUseEndOfEnrouteSegmentAsEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetUseEndOfEnrouteSegmentAsEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetUseEndOfEnrouteSegmentAsEpoch"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRefuelDumpProperties._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRefuelDumpProperties from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRefuelDumpProperties = agcom.GUID(IRefuelDumpProperties._uuid)
        vtable_offset_local = IRefuelDumpProperties._vtable_offset - 1
        self.__dict__["_GetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetRefuelDumpModeValue"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+3, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetRefuelDumpRate"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefuelDumpRate"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetRefuelDumpTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefuelDumpTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetCanUseEndOfEnrouteSegmentAsEpoch"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUseEndOfEnrouteSegmentAsEpoch"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseEndOfEnrouteSegmentAsEpoch"] = IAGFUNCTYPE(pUnk, IID_IRefuelDumpProperties, vtable_offset_local+10, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRefuelDumpProperties.__dict__ and type(IRefuelDumpProperties.__dict__[attrname]) == property:
            return IRefuelDumpProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRefuelDumpProperties.")
    
    @property
    def RefuelDumpMode(self) -> "AgEAvtrRefuelDumpMode":
        """property RefuelDumpMode"""
        with agmarshall.AgEnum_arg(AgEAvtrRefuelDumpMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RefuelDumpModeValue(self) -> float:
        """property RefuelDumpModeValue"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpModeValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetRefuelDumpMode(self, mode:"AgEAvtrRefuelDumpMode", value:float) -> None:
        """method SetRefuelDumpMode"""
        with agmarshall.AgEnum_arg(AgEAvtrRefuelDumpMode, mode) as arg_mode, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpMode"](arg_mode.COM_val, arg_value.COM_val))

    @property
    def RefuelDumpRate(self) -> float:
        """property RefuelDumpRate"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefuelDumpRate.setter
    def RefuelDumpRate(self, newVal:float) -> None:
        """property RefuelDumpRate"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpRate"](arg_newVal.COM_val))

    @property
    def RefuelDumpTimeOffset(self) -> float:
        """property RefuelDumpTimeOffset"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpTimeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefuelDumpTimeOffset.setter
    def RefuelDumpTimeOffset(self, newVal:float) -> None:
        """property RefuelDumpTimeOffset"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpTimeOffset"](arg_newVal.COM_val))

    @property
    def CanUseEndOfEnrouteSegmentAsEpoch(self) -> bool:
        """property CanUseEndOfEnrouteSegmentAsEpoch"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCanUseEndOfEnrouteSegmentAsEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseEndOfEnrouteSegmentAsEpoch(self) -> bool:
        """property UseEndOfEnrouteSegmentAsEpoch"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseEndOfEnrouteSegmentAsEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseEndOfEnrouteSegmentAsEpoch.setter
    def UseEndOfEnrouteSegmentAsEpoch(self, newVal:bool) -> None:
        """property UseEndOfEnrouteSegmentAsEpoch"""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseEndOfEnrouteSegmentAsEpoch"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8C37F92D-E841-456E-8E12-A09C84D5EFF5}", IRefuelDumpProperties)
agcls.AgTypeNameMap["IRefuelDumpProperties"] = IRefuelDumpProperties

class IProcedureFastTimeOptions(object):
    """Interface used to access the fast time options (without error or constraint checks) for the current procedure. Use this interface to set an Interrupt Time or Fixed Duration for a procedure."""
    _uuid = "{776EACCB-1B06-4CB2-A915-01B3B2E15E10}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetInterruptTime"] = _raise_uninitialized_error
        self.__dict__["_GetStopTime"] = _raise_uninitialized_error
        self.__dict__["_SetStopTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureFastTimeOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureFastTimeOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureFastTimeOptions = agcom.GUID(IProcedureFastTimeOptions._uuid)
        vtable_offset_local = IProcedureFastTimeOptions._vtable_offset - 1
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFastTimeOptions, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFastTimeOptions, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_SetInterruptTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFastTimeOptions, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_GetStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFastTimeOptions, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFastTimeOptions, vtable_offset_local+5, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureFastTimeOptions.__dict__ and type(IProcedureFastTimeOptions.__dict__[attrname]) == property:
            return IProcedureFastTimeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureFastTimeOptions.")
    
    @property
    def StartTime(self) -> typing.Any:
        """Start time for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStartTime(self, time:typing.Any) -> None:
        """Set the start time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_time.COM_val))

    def SetInterruptTime(self, time:typing.Any) -> None:
        """Set the interrupt time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetInterruptTime"](arg_time.COM_val))

    @property
    def StopTime(self) -> typing.Any:
        """Stop time for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopTime(self, time:typing.Any) -> None:
        """Set the stop time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetStopTime"](arg_time.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{776EACCB-1B06-4CB2-A915-01B3B2E15E10}", IProcedureFastTimeOptions)
agcls.AgTypeNameMap["IProcedureFastTimeOptions"] = IProcedureFastTimeOptions

class IAtmosphereModelBasic(object):
    """Interface used to access the basic atmosphere model."""
    _uuid = "{c39ccd9f-0996-4325-95bf-4b0af8d47b2f}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetBasicModelType"] = _raise_uninitialized_error
        self.__dict__["_SetBasicModelType"] = _raise_uninitialized_error
        self.__dict__["_GetUseNonStandardAtmosphere"] = _raise_uninitialized_error
        self.__dict__["_SetUseNonStandardAtmosphere"] = _raise_uninitialized_error
        self.__dict__["_GetTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetPressure"] = _raise_uninitialized_error
        self.__dict__["_SetPressure"] = _raise_uninitialized_error
        self.__dict__["_GetDensityAlt"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAtmosphereModelBasic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAtmosphereModelBasic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAtmosphereModelBasic = agcom.GUID(IAtmosphereModelBasic._uuid)
        vtable_offset_local = IAtmosphereModelBasic._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetBasicModelType"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetBasicModelType"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetUseNonStandardAtmosphere"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseNonStandardAtmosphere"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetTemperature"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTemperature"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetPressure"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPressure"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetDensityAlt"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModelBasic, vtable_offset_local+11, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAtmosphereModelBasic.__dict__ and type(IAtmosphereModelBasic.__dict__[attrname]) == property:
            return IAtmosphereModelBasic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAtmosphereModelBasic.")
    
    @property
    def Name(self) -> str:
        """The name of the atmosphere model."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the atmospheremodel."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def BasicModelType(self) -> "AgEAvtrAtmosphereModel":
        """The type of basic atmosphere."""
        with agmarshall.AgEnum_arg(AgEAvtrAtmosphereModel) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBasicModelType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BasicModelType.setter
    def BasicModelType(self, newVal:"AgEAvtrAtmosphereModel") -> None:
        """The type of basic atmosphere."""
        with agmarshall.AgEnum_arg(AgEAvtrAtmosphereModel, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBasicModelType"](arg_newVal.COM_val))

    @property
    def UseNonStandardAtmosphere(self) -> bool:
        """Opt whether to use non standard atmosphere conditions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseNonStandardAtmosphere"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseNonStandardAtmosphere.setter
    def UseNonStandardAtmosphere(self, newVal:bool) -> None:
        """Opt whether to use non standard atmosphere conditions."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseNonStandardAtmosphere"](arg_newVal.COM_val))

    @property
    def Temperature(self) -> float:
        """The sea-level temperature."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTemperature"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Temperature.setter
    def Temperature(self, newVal:float) -> None:
        """The sea-level temperature."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTemperature"](arg_newVal.COM_val))

    @property
    def Pressure(self) -> float:
        """The sea-level pressure."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPressure"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Pressure.setter
    def Pressure(self, newVal:float) -> None:
        """The sea-level pressure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPressure"](arg_newVal.COM_val))

    @property
    def DensityAlt(self) -> float:
        """The sea-level density altitude."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityAlt"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{c39ccd9f-0996-4325-95bf-4b0af8d47b2f}", IAtmosphereModelBasic)
agcls.AgTypeNameMap["IAtmosphereModelBasic"] = IAtmosphereModelBasic

class IAtmosphereModel(object):
    """Interface used to access the atmosphere model for a mission, scenario, or procedure."""
    _uuid = "{1f18b697-794a-4001-a3ee-ccfb21c27e44}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosphereModelTypeString"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosphereModelTypeString"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosphereModelSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosphereModelSource"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsBasic"] = _raise_uninitialized_error
        self.__dict__["_Copy"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAtmosphereModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAtmosphereModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAtmosphereModel = agcom.GUID(IAtmosphereModel._uuid)
        vtable_offset_local = IAtmosphereModel._vtable_offset - 1
        self.__dict__["_GetAtmosphereModelTypeString"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosphereModelTypeString"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetAtmosphereModelSource"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosphereModelSource"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetModeAsBasic"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Copy"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+6, )
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAtmosphereModel, vtable_offset_local+7, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAtmosphereModel.__dict__ and type(IAtmosphereModel.__dict__[attrname]) == property:
            return IAtmosphereModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAtmosphereModel.")
    
    @property
    def AtmosphereModelTypeString(self) -> str:
        """The atmosphere model type as a string value."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosphereModelTypeString"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosphereModelTypeString.setter
    def AtmosphereModelTypeString(self, pVal:str) -> None:
        """The atmosphere model type as a string value."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosphereModelTypeString"](arg_pVal.COM_val))

    @property
    def AtmosphereModelSource(self) -> "AgEAvtrWindAtmosModelSource":
        """The atmosphere model source."""
        with agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosphereModelSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosphereModelSource.setter
    def AtmosphereModelSource(self, pVal:"AgEAvtrWindAtmosModelSource") -> None:
        """The atmosphere model source."""
        with agmarshall.AgEnum_arg(AgEAvtrWindAtmosModelSource, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosphereModelSource"](arg_pVal.COM_val))

    @property
    def ModeAsBasic(self) -> "IAtmosphereModelBasic":
        """Get the options for a Basic Atmosphere model."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsBasic"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Copy(self) -> None:
        """Copy the atmosphere model."""
        agcls.evaluate_hresult(self.__dict__["_Copy"]())

    def Paste(self) -> None:
        """Paste the atmosphere model."""
        agcls.evaluate_hresult(self.__dict__["_Paste"]())


agcls.AgClassCatalog.add_catalog_entry("{1f18b697-794a-4001-a3ee-ccfb21c27e44}", IAtmosphereModel)
agcls.AgTypeNameMap["IAtmosphereModel"] = IAtmosphereModel

class IADDSMessageCollection(object):
    """Interface used to access the collection of messages from the NOAA ADDS forecast."""
    _uuid = "{fecb8f81-541f-4e86-8f34-ed7570047450}"
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_RemoveMessage"] = _raise_uninitialized_error
        self.__dict__["_ClearMessages"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IADDSMessageCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IADDSMessageCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IADDSMessageCollection = agcom.GUID(IADDSMessageCollection._uuid)
        vtable_offset_local = IADDSMessageCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IADDSMessageCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IADDSMessageCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IADDSMessageCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_RemoveMessage"] = IAGFUNCTYPE(pUnk, IID_IADDSMessageCollection, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_ClearMessages"] = IAGFUNCTYPE(pUnk, IID_IADDSMessageCollection, vtable_offset_local+5, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IADDSMessageCollection.__dict__ and type(IADDSMessageCollection.__dict__[attrname]) == property:
            return IADDSMessageCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IADDSMessageCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IADDSMessage":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IADDSMessage":
        """Given an index, returns an element in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that can iterate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def RemoveMessage(self, message:"IADDSMessage") -> None:
        """Remove this message from the forecast."""
        with agmarshall.AgInterface_in_arg(message, IADDSMessage) as arg_message:
            agcls.evaluate_hresult(self.__dict__["_RemoveMessage"](arg_message.COM_val))

    def ClearMessages(self) -> None:
        """Clears all of the messages in the collection."""
        agcls.evaluate_hresult(self.__dict__["_ClearMessages"]())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{fecb8f81-541f-4e86-8f34-ed7570047450}", IADDSMessageCollection)
agcls.AgTypeNameMap["IADDSMessageCollection"] = IADDSMessageCollection

class IWindModelADDS(object):
    """Interface used to access the options for a NOAA ADDS wind model."""
    _uuid = "{56b53131-0902-4469-9acc-75b68ed298d4}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetBlendTime"] = _raise_uninitialized_error
        self.__dict__["_SetBlendTime"] = _raise_uninitialized_error
        self.__dict__["_GetMsgInterpolationType"] = _raise_uninitialized_error
        self.__dict__["_SetMsgInterpolationType"] = _raise_uninitialized_error
        self.__dict__["_GetMsgExtrapolationType"] = _raise_uninitialized_error
        self.__dict__["_SetMsgExtrapolationType"] = _raise_uninitialized_error
        self.__dict__["_GetMissingMsgType"] = _raise_uninitialized_error
        self.__dict__["_SetMissingMsgType"] = _raise_uninitialized_error
        self.__dict__["_GetInterpBlendTime"] = _raise_uninitialized_error
        self.__dict__["_SetInterpBlendTime"] = _raise_uninitialized_error
        self.__dict__["_AddCurrentForecast"] = _raise_uninitialized_error
        self.__dict__["_GetMessages"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IWindModelADDS._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IWindModelADDS from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IWindModelADDS = agcom.GUID(IWindModelADDS._uuid)
        vtable_offset_local = IWindModelADDS._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMsgInterpolationType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetMsgInterpolationType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMsgExtrapolationType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMsgExtrapolationType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetMissingMsgType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMissingMsgType"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetInterpBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInterpBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_AddCurrentForecast"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_GetMessages"] = IAGFUNCTYPE(pUnk, IID_IWindModelADDS, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IWindModelADDS.__dict__ and type(IWindModelADDS.__dict__[attrname]) == property:
            return IWindModelADDS.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IWindModelADDS.")
    
    @property
    def Name(self) -> str:
        """The name of the wind model."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the wind model."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def BlendTime(self) -> float:
        """The blend time to transition from the previous wind model if one exists."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBlendTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BlendTime.setter
    def BlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind model if one exists."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBlendTime"](arg_newVal.COM_val))

    @property
    def MsgInterpolationType(self) -> "AgEAvtrADDSMsgInterpType":
        """The message interpolation type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMsgInterpType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMsgInterpolationType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MsgInterpolationType.setter
    def MsgInterpolationType(self, newVal:"AgEAvtrADDSMsgInterpType") -> None:
        """The message interpolation type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMsgInterpType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMsgInterpolationType"](arg_newVal.COM_val))

    @property
    def MsgExtrapolationType(self) -> "AgEAvtrADDSMsgExtrapType":
        """The message extrapolation type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMsgExtrapType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMsgExtrapolationType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MsgExtrapolationType.setter
    def MsgExtrapolationType(self, newVal:"AgEAvtrADDSMsgExtrapType") -> None:
        """The message extrapolation type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMsgExtrapType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMsgExtrapolationType"](arg_newVal.COM_val))

    @property
    def MissingMsgType(self) -> "AgEAvtrADDSMissingMsgType":
        """The missing message type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMissingMsgType) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMissingMsgType"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MissingMsgType.setter
    def MissingMsgType(self, newVal:"AgEAvtrADDSMissingMsgType") -> None:
        """The missing message type."""
        with agmarshall.AgEnum_arg(AgEAvtrADDSMissingMsgType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMissingMsgType"](arg_newVal.COM_val))

    @property
    def InterpBlendTime(self) -> float:
        """The blend time to transition from the previous wind condition."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpBlendTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @InterpBlendTime.setter
    def InterpBlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind condition."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpBlendTime"](arg_newVal.COM_val))

    def AddCurrentForecast(self) -> str:
        """Add the current forecast from the ADDS service."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_AddCurrentForecast"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def Messages(self) -> "IADDSMessageCollection":
        """Get the messages from the current forecast."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMessages"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{56b53131-0902-4469-9acc-75b68ed298d4}", IWindModelADDS)
agcls.AgTypeNameMap["IWindModelADDS"] = IWindModelADDS

class IWindModelConstant(object):
    """Interface used to access the options for a Constant Bearing/Speed wind model."""
    _uuid = "{d40dcd05-eccc-4264-8b84-39be36b58406}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetBlendTime"] = _raise_uninitialized_error
        self.__dict__["_SetBlendTime"] = _raise_uninitialized_error
        self.__dict__["_GetWindSpeed"] = _raise_uninitialized_error
        self.__dict__["_SetWindSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetWindBearing"] = _raise_uninitialized_error
        self.__dict__["_SetWindBearing"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IWindModelConstant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IWindModelConstant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IWindModelConstant = agcom.GUID(IWindModelConstant._uuid)
        vtable_offset_local = IWindModelConstant._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBlendTime"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetWindSpeed"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWindSpeed"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetWindBearing"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetWindBearing"] = IAGFUNCTYPE(pUnk, IID_IWindModelConstant, vtable_offset_local+8, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IWindModelConstant.__dict__ and type(IWindModelConstant.__dict__[attrname]) == property:
            return IWindModelConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IWindModelConstant.")
    
    @property
    def Name(self) -> str:
        """The name of the wind model."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the wind model."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def BlendTime(self) -> float:
        """The blend time to transition from the previous wind model if one exists."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBlendTime"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BlendTime.setter
    def BlendTime(self, newVal:float) -> None:
        """The blend time to transition from the previous wind model if one exists."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBlendTime"](arg_newVal.COM_val))

    @property
    def WindSpeed(self) -> float:
        """The constant wind speed."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindSpeed"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @WindSpeed.setter
    def WindSpeed(self, newVal:float) -> None:
        """The constant wind speed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindSpeed"](arg_newVal.COM_val))

    @property
    def WindBearing(self) -> typing.Any:
        """The wind's true bearing."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindBearing"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @WindBearing.setter
    def WindBearing(self, newVal:typing.Any) -> None:
        """The wind's true bearing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindBearing"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d40dcd05-eccc-4264-8b84-39be36b58406}", IWindModelConstant)
agcls.AgTypeNameMap["IWindModelConstant"] = IWindModelConstant

class IStation(object):
    """Interface used to access a station for an Aviator aircraft."""
    _uuid = "{ac0b6aed-ff8d-4f69-ba75-d31e2285b436}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStation = agcom.GUID(IStation._uuid)
        vtable_offset_local = IStation._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStation.__dict__ and type(IStation.__dict__[attrname]) == property:
            return IStation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStation.")
    

agcls.AgClassCatalog.add_catalog_entry("{ac0b6aed-ff8d-4f69-ba75-d31e2285b436}", IStation)
agcls.AgTypeNameMap["IStation"] = IStation

class IStationCollection(object):
    """Interface used to access the list of stations for an Aviator aircraft."""
    _uuid = "{c4e09526-9742-4f58-9943-b176e5192b24}"
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetInternalFuelTankByName"] = _raise_uninitialized_error
        self.__dict__["_AddInternalFuelTank"] = _raise_uninitialized_error
        self.__dict__["_GetPayloadStationByName"] = _raise_uninitialized_error
        self.__dict__["_AddPayloadStation"] = _raise_uninitialized_error
        self.__dict__["_ContainsStation"] = _raise_uninitialized_error
        self.__dict__["_RemoveStationByName"] = _raise_uninitialized_error
        self.__dict__["_RemoveAtIndex"] = _raise_uninitialized_error
        self.__dict__["_GetStationNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IStationCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IStationCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IStationCollection = agcom.GUID(IStationCollection._uuid)
        vtable_offset_local = IStationCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetInternalFuelTankByName"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddInternalFuelTank"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetPayloadStationByName"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+6, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddPayloadStation"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_ContainsStation"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_RemoveStationByName"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+9, agcom.BSTR)
        self.__dict__["_RemoveAtIndex"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetStationNames"] = IAGFUNCTYPE(pUnk, IID_IStationCollection, vtable_offset_local+11, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IStationCollection.__dict__ and type(IStationCollection.__dict__[attrname]) == property:
            return IStationCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IStationCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IStation":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IStation":
        """Given an index, returns an element in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that can iterate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetInternalFuelTankByName(self, name:str) -> "IFuelTankInternal":
        """Get the internal fuel tank with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppFuelTank:
            agcls.evaluate_hresult(self.__dict__["_GetInternalFuelTankByName"](arg_name.COM_val, byref(arg_ppFuelTank.COM_val)))
            return arg_ppFuelTank.python_val

    def AddInternalFuelTank(self) -> "IFuelTankInternal":
        """Add an internal fuel tank"""
        with agmarshall.AgInterface_out_arg() as arg_ppFuelTankInternal:
            agcls.evaluate_hresult(self.__dict__["_AddInternalFuelTank"](byref(arg_ppFuelTankInternal.COM_val)))
            return arg_ppFuelTankInternal.python_val

    def GetPayloadStationByName(self, name:str) -> "IPayloadStation":
        """Get the payload station with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppPayloadStation:
            agcls.evaluate_hresult(self.__dict__["_GetPayloadStationByName"](arg_name.COM_val, byref(arg_ppPayloadStation.COM_val)))
            return arg_ppPayloadStation.python_val

    def AddPayloadStation(self) -> "IPayloadStation":
        """Add a payload station"""
        with agmarshall.AgInterface_out_arg() as arg_ppNewPayloadStation:
            agcls.evaluate_hresult(self.__dict__["_AddPayloadStation"](byref(arg_ppNewPayloadStation.COM_val)))
            return arg_ppNewPayloadStation.python_val

    def ContainsStation(self, name:str) -> bool:
        """Get whether the station list contains an item with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_ContainsStation"](arg_name.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def RemoveStationByName(self, name:str) -> None:
        """Remove an station by name."""
        with agmarshall.BSTR_arg(name) as arg_name:
            agcls.evaluate_hresult(self.__dict__["_RemoveStationByName"](arg_name.COM_val))

    def RemoveAtIndex(self, index:int) -> None:
        """Remove procedure at the given index."""
        with agmarshall.LONG_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAtIndex"](arg_index.COM_val))

    @property
    def StationNames(self) -> list:
        """Returns the station names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetStationNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{c4e09526-9742-4f58-9943-b176e5192b24}", IStationCollection)
agcls.AgTypeNameMap["IStationCollection"] = IStationCollection

class IConfiguration(object):
    """Interface used to change an aircraft's configuration for an Aviator mission."""
    _uuid = "{33bb7422-861d-4949-a165-cb4a416c400b}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEmptyWeight"] = _raise_uninitialized_error
        self.__dict__["_SetEmptyWeight"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLandingWeight"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLandingWeight"] = _raise_uninitialized_error
        self.__dict__["_GetBaseDragIndex"] = _raise_uninitialized_error
        self.__dict__["_SetBaseDragIndex"] = _raise_uninitialized_error
        self.__dict__["_GetEmptyCGX"] = _raise_uninitialized_error
        self.__dict__["_GetEmptyCGY"] = _raise_uninitialized_error
        self.__dict__["_GetEmptyCGZ"] = _raise_uninitialized_error
        self.__dict__["_SetEmptyCG"] = _raise_uninitialized_error
        self.__dict__["_GetTotalWeight"] = _raise_uninitialized_error
        self.__dict__["_GetTotalWeightMaxFuel"] = _raise_uninitialized_error
        self.__dict__["_GetTotalDragIndex"] = _raise_uninitialized_error
        self.__dict__["_GetTotalCGX"] = _raise_uninitialized_error
        self.__dict__["_GetTotalCGY"] = _raise_uninitialized_error
        self.__dict__["_GetTotalCGZ"] = _raise_uninitialized_error
        self.__dict__["_PasteConfiguration"] = _raise_uninitialized_error
        self.__dict__["_GetStations"] = _raise_uninitialized_error
        self.__dict__["_GetTotalCapacity"] = _raise_uninitialized_error
        self.__dict__["_GetInitialFuelState"] = _raise_uninitialized_error
        self.__dict__["_Save"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IConfiguration._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IConfiguration from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IConfiguration = agcom.GUID(IConfiguration._uuid)
        vtable_offset_local = IConfiguration._vtable_offset - 1
        self.__dict__["_GetEmptyWeight"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEmptyWeight"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaxLandingWeight"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLandingWeight"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetBaseDragIndex"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBaseDragIndex"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEmptyCGX"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_GetEmptyCGY"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetEmptyCGZ"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEmptyCG"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+10, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_GetTotalWeight"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTotalWeightMaxFuel"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTotalDragIndex"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTotalCGX"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTotalCGY"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_GetTotalCGZ"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_PasteConfiguration"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+17, agcom.PVOID)
        self.__dict__["_GetStations"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_GetTotalCapacity"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_GetInitialFuelState"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_Save"] = IAGFUNCTYPE(pUnk, IID_IConfiguration, vtable_offset_local+21, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IConfiguration.__dict__ and type(IConfiguration.__dict__[attrname]) == property:
            return IConfiguration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IConfiguration.")
    
    @property
    def EmptyWeight(self) -> float:
        """The empty weight of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEmptyWeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @EmptyWeight.setter
    def EmptyWeight(self, newVal:float) -> None:
        """The empty weight of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEmptyWeight"](arg_newVal.COM_val))

    @property
    def MaxLandingWeight(self) -> float:
        """The max landing weight of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLandingWeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @MaxLandingWeight.setter
    def MaxLandingWeight(self, newVal:float) -> None:
        """The max landing weight of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLandingWeight"](arg_newVal.COM_val))

    @property
    def BaseDragIndex(self) -> float:
        """The base drag index of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseDragIndex"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @BaseDragIndex.setter
    def BaseDragIndex(self, newVal:float) -> None:
        """The base drag index of the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBaseDragIndex"](arg_newVal.COM_val))

    @property
    def EmptyCGX(self) -> float:
        """The X value of the aircraft's Empty CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEmptyCGX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def EmptyCGY(self) -> float:
        """The Y value of the aircraft's Empty CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEmptyCGY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def EmptyCGZ(self) -> float:
        """The Z value of the aircraft's Empty CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEmptyCGZ"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def SetEmptyCG(self, x:float, y:float, z:float) -> None:
        """Set the aircraft's Empty CG position."""
        with agmarshall.DOUBLE_arg(x) as arg_x, \
             agmarshall.DOUBLE_arg(y) as arg_y, \
             agmarshall.DOUBLE_arg(z) as arg_z:
            agcls.evaluate_hresult(self.__dict__["_SetEmptyCG"](arg_x.COM_val, arg_y.COM_val, arg_z.COM_val))

    @property
    def TotalWeight(self) -> float:
        """The total weight of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalWeight"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TotalWeightMaxFuel(self) -> float:
        """The total weight of the aircraft with all fuel tanks full."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalWeightMaxFuel"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TotalDragIndex(self) -> float:
        """The total drag index of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalDragIndex"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TotalCGX(self) -> float:
        """The X value of the aircraft's Total CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalCGX"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TotalCGY(self) -> float:
        """The Y value of the aircraft's Total CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalCGY"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def TotalCGZ(self) -> float:
        """The Z value of the aircraft's Total CG position."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalCGZ"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def PasteConfiguration(self, otherConfiguration:"IConfiguration") -> None:
        """Paste the aircraft's configuration."""
        with agmarshall.AgInterface_in_arg(otherConfiguration, IConfiguration) as arg_otherConfiguration:
            agcls.evaluate_hresult(self.__dict__["_PasteConfiguration"](arg_otherConfiguration.COM_val))

    def GetStations(self) -> "IStationCollection":
        """Get a collection of the aircraft's payload stations."""
        with agmarshall.AgInterface_out_arg() as arg_ppStationList:
            agcls.evaluate_hresult(self.__dict__["_GetStations"](byref(arg_ppStationList.COM_val)))
            return arg_ppStationList.python_val

    @property
    def TotalCapacity(self) -> float:
        """The total fuel capacity of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTotalCapacity"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def InitialFuelState(self) -> float:
        """The initial fuel state of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialFuelState"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Save(self) -> None:
        """Save."""
        agcls.evaluate_hresult(self.__dict__["_Save"]())


agcls.AgClassCatalog.add_catalog_entry("{33bb7422-861d-4949-a165-cb4a416c400b}", IConfiguration)
agcls.AgTypeNameMap["IConfiguration"] = IConfiguration

class ICatalogSource(object):
    """Interface used to access options for a source in the Aviator Catalog. Examples of sources include User Aircraft Models, ARINC424runways, User Runways, etc."""
    _uuid = "{ea6e896f-5c4d-4614-9835-4a9f598e52b3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetChildNames"] = _raise_uninitialized_error
        self.__dict__["_Contains"] = _raise_uninitialized_error
        self.__dict__["_RemoveChild"] = _raise_uninitialized_error
        self.__dict__["_Save"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogSource._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogSource from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogSource = agcom.GUID(ICatalogSource._uuid)
        vtable_offset_local = ICatalogSource._vtable_offset - 1
        self.__dict__["_GetChildNames"] = IAGFUNCTYPE(pUnk, IID_ICatalogSource, vtable_offset_local+1, POINTER(agcom.SAFEARRAY))
        self.__dict__["_Contains"] = IAGFUNCTYPE(pUnk, IID_ICatalogSource, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_RemoveChild"] = IAGFUNCTYPE(pUnk, IID_ICatalogSource, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_Save"] = IAGFUNCTYPE(pUnk, IID_ICatalogSource, vtable_offset_local+4, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogSource.__dict__ and type(ICatalogSource.__dict__[attrname]) == property:
            return ICatalogSource.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogSource.")
    
    @property
    def ChildNames(self) -> list:
        """Returns the child names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetChildNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Contains(self, aircraftName:str) -> bool:
        """Checks whether the catalog source contains the catalog item with the given name."""
        with agmarshall.BSTR_arg(aircraftName) as arg_aircraftName, \
             agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_Contains"](arg_aircraftName.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def RemoveChild(self, childName:str) -> None:
        """Removes the child with the given name."""
        with agmarshall.BSTR_arg(childName) as arg_childName:
            agcls.evaluate_hresult(self.__dict__["_RemoveChild"](arg_childName.COM_val))

    def Save(self) -> None:
        """Saves the catalog item."""
        agcls.evaluate_hresult(self.__dict__["_Save"]())


agcls.AgClassCatalog.add_catalog_entry("{ea6e896f-5c4d-4614-9835-4a9f598e52b3}", ICatalogSource)
agcls.AgTypeNameMap["ICatalogSource"] = ICatalogSource

class IAircraftModels(object):
    """Interface for the User Aircraft Models in the Aviator Catalog."""
    _uuid = "{7fffbf9b-1624-4cc9-ba50-ad078c509123}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAircraft"] = _raise_uninitialized_error
        self.__dict__["_AddAircraft"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftModels._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftModels from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftModels = agcom.GUID(IAircraftModels._uuid)
        vtable_offset_local = IAircraftModels._vtable_offset - 1
        self.__dict__["_GetAircraft"] = IAGFUNCTYPE(pUnk, IID_IAircraftModels, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddAircraft"] = IAGFUNCTYPE(pUnk, IID_IAircraftModels, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IAircraftModels, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftModels.__dict__ and type(IAircraftModels.__dict__[attrname]) == property:
            return IAircraftModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftModels.")
    
    def GetAircraft(self, aircraftName:str) -> "IAircraftModel":
        """Gets the aircraft with the given name."""
        with agmarshall.BSTR_arg(aircraftName) as arg_aircraftName, \
             agmarshall.AgInterface_out_arg() as arg_ppAircraft:
            agcls.evaluate_hresult(self.__dict__["_GetAircraft"](arg_aircraftName.COM_val, byref(arg_ppAircraft.COM_val)))
            return arg_ppAircraft.python_val

    def AddAircraft(self, aircraftName:str) -> "IAircraftModel":
        """Creates a new aircraft with the given name."""
        with agmarshall.BSTR_arg(aircraftName) as arg_aircraftName, \
             agmarshall.AgInterface_out_arg() as arg_ppAircraft:
            agcls.evaluate_hresult(self.__dict__["_AddAircraft"](arg_aircraftName.COM_val, byref(arg_ppAircraft.COM_val)))
            return arg_ppAircraft.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{7fffbf9b-1624-4cc9-ba50-ad078c509123}", IAircraftModels)
agcls.AgTypeNameMap["IAircraftModels"] = IAircraftModels

class IMissileModels(object):
    """Interface for the User Missile Models in the Aviator Catalog."""
    _uuid = "{7d284b91-7746-4fb4-bb96-a115192c18b6}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMissile"] = _raise_uninitialized_error
        self.__dict__["_AddMissile"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMissileModels._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMissileModels from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMissileModels = agcom.GUID(IMissileModels._uuid)
        vtable_offset_local = IMissileModels._vtable_offset - 1
        self.__dict__["_GetMissile"] = IAGFUNCTYPE(pUnk, IID_IMissileModels, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddMissile"] = IAGFUNCTYPE(pUnk, IID_IMissileModels, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IMissileModels, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMissileModels.__dict__ and type(IMissileModels.__dict__[attrname]) == property:
            return IMissileModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMissileModels.")
    
    def GetMissile(self, name:str) -> "IMissileModel":
        """Gets the missile with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppMissile:
            agcls.evaluate_hresult(self.__dict__["_GetMissile"](arg_name.COM_val, byref(arg_ppMissile.COM_val)))
            return arg_ppMissile.python_val

    def AddMissile(self, name:str) -> "IMissileModel":
        """Creates a new missile with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppMissile:
            agcls.evaluate_hresult(self.__dict__["_AddMissile"](arg_name.COM_val, byref(arg_ppMissile.COM_val)))
            return arg_ppMissile.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{7d284b91-7746-4fb4-bb96-a115192c18b6}", IMissileModels)
agcls.AgTypeNameMap["IMissileModels"] = IMissileModels

class IRotorcraftModels(object):
    """Interface for the User Rotorcraft Models in the Aviator Catalog."""
    _uuid = "{60605557-ec23-4435-a778-d524335f9244}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRotorcraft"] = _raise_uninitialized_error
        self.__dict__["_AddRotorcraft"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogSource"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRotorcraftModels._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRotorcraftModels from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRotorcraftModels = agcom.GUID(IRotorcraftModels._uuid)
        vtable_offset_local = IRotorcraftModels._vtable_offset - 1
        self.__dict__["_GetRotorcraft"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModels, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_AddRotorcraft"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModels, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogSource"] = IAGFUNCTYPE(pUnk, IID_IRotorcraftModels, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRotorcraftModels.__dict__ and type(IRotorcraftModels.__dict__[attrname]) == property:
            return IRotorcraftModels.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRotorcraftModels.")
    
    def GetRotorcraft(self, name:str) -> "IRotorcraftModel":
        """Gets the rotorcraft with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRotorcraft:
            agcls.evaluate_hresult(self.__dict__["_GetRotorcraft"](arg_name.COM_val, byref(arg_ppRotorcraft.COM_val)))
            return arg_ppRotorcraft.python_val

    def AddRotorcraft(self, name:str) -> "IRotorcraftModel":
        """Creates a new rotorcraft with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppRotorcraft:
            agcls.evaluate_hresult(self.__dict__["_AddRotorcraft"](arg_name.COM_val, byref(arg_ppRotorcraft.COM_val)))
            return arg_ppRotorcraft.python_val

    def GetAsCatalogSource(self) -> "ICatalogSource":
        """Get the catalog source interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogSource:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogSource"](byref(arg_ppCatalogSource.COM_val)))
            return arg_ppCatalogSource.python_val


agcls.AgClassCatalog.add_catalog_entry("{60605557-ec23-4435-a778-d524335f9244}", IRotorcraftModels)
agcls.AgTypeNameMap["IRotorcraftModels"] = IRotorcraftModels

class IBasicFixedWingLiftHelper(object):
    """Interface used to access Lift Coefficient Helper in the Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    _uuid = "{6c9d7ac9-cf16-4110-87e4-080c83a44322}"
    _num_methods = 0
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicFixedWingLiftHelper._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicFixedWingLiftHelper from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicFixedWingLiftHelper = agcom.GUID(IBasicFixedWingLiftHelper._uuid)
        vtable_offset_local = IBasicFixedWingLiftHelper._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicFixedWingLiftHelper.__dict__ and type(IBasicFixedWingLiftHelper.__dict__[attrname]) == property:
            return IBasicFixedWingLiftHelper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicFixedWingLiftHelper.")
    

agcls.AgClassCatalog.add_catalog_entry("{6c9d7ac9-cf16-4110-87e4-080c83a44322}", IBasicFixedWingLiftHelper)
agcls.AgTypeNameMap["IBasicFixedWingLiftHelper"] = IBasicFixedWingLiftHelper

class IAircraftBasicFixedWingAero(object):
    """Interface used to access Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    _uuid = "{cdf3e057-6192-4817-a72b-8f3cba8b38e5}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetForwardFlightReferenceArea"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightReferenceArea"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightUseCompressibleFlow"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightUseCompressibleFlow"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightCl0"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightCl0"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightClAlpha"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightClAlpha"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightMinAOA"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightMinAOA"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightCd0"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightCd0"] = _raise_uninitialized_error
        self.__dict__["_GetForwardFlightK"] = _raise_uninitialized_error
        self.__dict__["_SetForwardFlightK"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingReferenceArea"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingReferenceArea"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingUseCompressibleFlow"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingUseCompressibleFlow"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingCl0"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingCl0"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingClAlpha"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingClAlpha"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingMinAOA"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingMinAOA"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingMaxAOA"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingCd0"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingCd0"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffLandingK"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffLandingK"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftBasicFixedWingAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftBasicFixedWingAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftBasicFixedWingAero = agcom.GUID(IAircraftBasicFixedWingAero._uuid)
        vtable_offset_local = IAircraftBasicFixedWingAero._vtable_offset - 1
        self.__dict__["_GetForwardFlightReferenceArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightReferenceArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightUseCompressibleFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetForwardFlightUseCompressibleFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetForwardFlightCl0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightCl0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightClAlpha"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightClAlpha"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightMinAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetForwardFlightMinAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetForwardFlightMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetForwardFlightMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetForwardFlightCd0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightCd0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetForwardFlightK"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetForwardFlightK"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetTakeoffLandingReferenceArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingReferenceArea"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetTakeoffLandingUseCompressibleFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTakeoffLandingUseCompressibleFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetTakeoffLandingCl0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingCl0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetTakeoffLandingClAlpha"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingClAlpha"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetTakeoffLandingMinAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_SetTakeoffLandingMinAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+26, agcom.VARIANT)
        self.__dict__["_GetTakeoffLandingMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetTakeoffLandingMaxAOA"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetTakeoffLandingCd0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingCd0"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetTakeoffLandingK"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTakeoffLandingK"] = IAGFUNCTYPE(pUnk, IID_IAircraftBasicFixedWingAero, vtable_offset_local+32, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftBasicFixedWingAero.__dict__ and type(IAircraftBasicFixedWingAero.__dict__[attrname]) == property:
            return IAircraftBasicFixedWingAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftBasicFixedWingAero.")
    
    @property
    def ForwardFlightReferenceArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightReferenceArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightReferenceArea.setter
    def ForwardFlightReferenceArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightReferenceArea"](arg_pVal.COM_val))

    @property
    def ForwardFlightUseCompressibleFlow(self) -> bool:
        """Opt to define the aerodynamic parameters for forward flight with respect to supersonic flight conditions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightUseCompressibleFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightUseCompressibleFlow.setter
    def ForwardFlightUseCompressibleFlow(self, newVal:bool) -> None:
        """Opt to define the aerodynamic parameters for forward flight with respect to supersonic flight conditions."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightUseCompressibleFlow"](arg_newVal.COM_val))

    @property
    def ForwardFlightCl0(self) -> float:
        """The coefficient of lift at zero angle of attack."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightCl0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightCl0.setter
    def ForwardFlightCl0(self, newVal:float) -> None:
        """The coefficient of lift at zero angle of attack."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightCl0"](arg_newVal.COM_val))

    @property
    def ForwardFlightClAlpha(self) -> float:
        """The slope of the coefficient of lift curve."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightClAlpha"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightClAlpha.setter
    def ForwardFlightClAlpha(self, newVal:float) -> None:
        """The slope of the coefficient of lift curve."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightClAlpha"](arg_newVal.COM_val))

    @property
    def ForwardFlightMinAOA(self) -> typing.Any:
        """The minimum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightMinAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightMinAOA.setter
    def ForwardFlightMinAOA(self, newVal:typing.Any) -> None:
        """The minimum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightMinAOA"](arg_newVal.COM_val))

    @property
    def ForwardFlightMaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightMaxAOA.setter
    def ForwardFlightMaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightMaxAOA"](arg_newVal.COM_val))

    @property
    def ForwardFlightCd0(self) -> float:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightCd0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightCd0.setter
    def ForwardFlightCd0(self, newVal:float) -> None:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightCd0"](arg_newVal.COM_val))

    @property
    def ForwardFlightK(self) -> float:
        """The coefficient of induced drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetForwardFlightK"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ForwardFlightK.setter
    def ForwardFlightK(self, newVal:float) -> None:
        """The coefficient of induced drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetForwardFlightK"](arg_newVal.COM_val))

    @property
    def TakeoffLandingReferenceArea(self) -> float:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingReferenceArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingReferenceArea.setter
    def TakeoffLandingReferenceArea(self, pVal:float) -> None:
        """The area of the lifting surface of the aircraft."""
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingReferenceArea"](arg_pVal.COM_val))

    @property
    def TakeoffLandingUseCompressibleFlow(self) -> bool:
        """Opt to define the aerodynamic parameters for takeoff and landing with respect to supersonic flight conditions."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingUseCompressibleFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingUseCompressibleFlow.setter
    def TakeoffLandingUseCompressibleFlow(self, newVal:bool) -> None:
        """Opt to define the aerodynamic parameters for takeoff and landing with respect to supersonic flight conditions."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingUseCompressibleFlow"](arg_newVal.COM_val))

    @property
    def TakeoffLandingCl0(self) -> float:
        """The coefficient of lift at zero angle of attack."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingCl0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingCl0.setter
    def TakeoffLandingCl0(self, newVal:float) -> None:
        """The coefficient of lift at zero angle of attack."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingCl0"](arg_newVal.COM_val))

    @property
    def TakeoffLandingClAlpha(self) -> float:
        """The slope of the coefficient of lift curve."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingClAlpha"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingClAlpha.setter
    def TakeoffLandingClAlpha(self, newVal:float) -> None:
        """The slope of the coefficient of lift curve."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingClAlpha"](arg_newVal.COM_val))

    @property
    def TakeoffLandingMinAOA(self) -> typing.Any:
        """The minimum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingMinAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingMinAOA.setter
    def TakeoffLandingMinAOA(self, newVal:typing.Any) -> None:
        """The minimum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingMinAOA"](arg_newVal.COM_val))

    @property
    def TakeoffLandingMaxAOA(self) -> typing.Any:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingMaxAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingMaxAOA.setter
    def TakeoffLandingMaxAOA(self, newVal:typing.Any) -> None:
        """The maximum angle of attack possible."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingMaxAOA"](arg_newVal.COM_val))

    @property
    def TakeoffLandingCd0(self) -> float:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingCd0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingCd0.setter
    def TakeoffLandingCd0(self, newVal:float) -> None:
        """The coefficient of drag of the lifting surface at zero angle of attack."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingCd0"](arg_newVal.COM_val))

    @property
    def TakeoffLandingK(self) -> float:
        """The coefficient of induced drag."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffLandingK"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffLandingK.setter
    def TakeoffLandingK(self, newVal:float) -> None:
        """The coefficient of induced drag."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffLandingK"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{cdf3e057-6192-4817-a72b-8f3cba8b38e5}", IAircraftBasicFixedWingAero)
agcls.AgTypeNameMap["IAircraftBasicFixedWingAero"] = IAircraftBasicFixedWingAero

class IAircraftAero(object):
    """Interface used to access the Aerodynamics options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{cade76fa-36f7-4711-affc-77d00899be77}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetAeroStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsSimple"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsBasicFixedWing"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsAdvancedMissile"] = _raise_uninitialized_error
        self.__dict__["_GetLiftFactor"] = _raise_uninitialized_error
        self.__dict__["_SetLiftFactor"] = _raise_uninitialized_error
        self.__dict__["_GetDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetDragFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAero._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAero from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAero = agcom.GUID(IAircraftAero._uuid)
        vtable_offset_local = IAircraftAero._vtable_offset - 1
        self.__dict__["_GetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAeroStrategy"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetModeAsSimple"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsBasicFixedWing"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsAdvancedMissile"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetLiftFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLiftFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftAero, vtable_offset_local+10, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAero.__dict__ and type(IAircraftAero.__dict__[attrname]) == property:
            return IAircraftAero.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAero.")
    
    @property
    def AeroStrategy(self) -> "AgEAvtrAircraftAeroStrategy":
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAircraftAeroStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAeroStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AeroStrategy.setter
    def AeroStrategy(self, newVal:"AgEAvtrAircraftAeroStrategy") -> None:
        """The aerodynamic strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAircraftAeroStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAeroStrategy"](arg_newVal.COM_val))

    @property
    def ModeAsSimple(self) -> "IAircraftSimpleAero":
        """Get the interface for a simple aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsSimple"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsBasicFixedWing(self) -> "IAircraftBasicFixedWingAero":
        """Get the interface for a basic fixed wing aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsBasicFixedWing"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsExternal(self) -> "IAircraftExternalAero":
        """Get the interface for an external file aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsAdvancedMissile(self) -> "IMissileAdvancedAero":
        """Get the interface for an advanced missile aerodynamics strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsAdvancedMissile"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LiftFactor(self) -> float:
        """A scalar value applied to the lift for parametric analysis."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLiftFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LiftFactor.setter
    def LiftFactor(self, newVal:float) -> None:
        """A scalar value applied to the lift for parametric analysis."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLiftFactor"](arg_newVal.COM_val))

    @property
    def DragFactor(self) -> float:
        """A scalar value applied to the drag for parametric analysis."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragFactor.setter
    def DragFactor(self, newVal:float) -> None:
        """A scalar value applied to the drag for parametric analysis."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{cade76fa-36f7-4711-affc-77d00899be77}", IAircraftAero)
agcls.AgTypeNameMap["IAircraftAero"] = IAircraftAero

class IAircraftProp(object):
    """Interface used to access the propulsion options for the Basic Acceleration Model of an aircraft."""
    _uuid = "{f2c9e37e-da9b-4210-94d6-b90c90d1a696}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetPropStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsSimple"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsBasicFixedWing"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsExternal"] = _raise_uninitialized_error
        self.__dict__["_GetLiftFactor"] = _raise_uninitialized_error
        self.__dict__["_SetLiftFactor"] = _raise_uninitialized_error
        self.__dict__["_GetDragFactor"] = _raise_uninitialized_error
        self.__dict__["_SetDragFactor"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsRamjet"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsTurbojet"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsRocket"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftProp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftProp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftProp = agcom.GUID(IAircraftProp._uuid)
        vtable_offset_local = IAircraftProp._vtable_offset - 1
        self.__dict__["_GetPropStrategy"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPropStrategy"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetModeAsSimple"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsBasicFixedWing"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsExternal"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetLiftFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLiftFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDragFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetModeAsRamjet"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsTurbojet"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsRocket"] = IAGFUNCTYPE(pUnk, IID_IAircraftProp, vtable_offset_local+12, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftProp.__dict__ and type(IAircraftProp.__dict__[attrname]) == property:
            return IAircraftProp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftProp.")
    
    @property
    def PropStrategy(self) -> "AgEAvtrAircraftPropStrategy":
        """The propulsion strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAircraftPropStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropStrategy.setter
    def PropStrategy(self, newVal:"AgEAvtrAircraftPropStrategy") -> None:
        """The propulsion strategy type."""
        with agmarshall.AgEnum_arg(AgEAvtrAircraftPropStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropStrategy"](arg_newVal.COM_val))

    @property
    def ModeAsSimple(self) -> "IAircraftSimpleProp":
        """Get the interface for a simple propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsSimple"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsBasicFixedWing(self) -> "IAircraftBasicFixedWingProp":
        """Get the interface for a basic fixed wing propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsBasicFixedWing"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsExternal(self) -> "IAircraftExternalProp":
        """Get the interface for an external file propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsExternal"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LiftFactor(self) -> float:
        """A scalar value applied to the lift for parametric analysis."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLiftFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LiftFactor.setter
    def LiftFactor(self, newVal:float) -> None:
        """A scalar value applied to the lift for parametric analysis."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLiftFactor"](arg_newVal.COM_val))

    @property
    def DragFactor(self) -> float:
        """A scalar value applied to the drag for parametric analysis."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragFactor.setter
    def DragFactor(self, newVal:float) -> None:
        """A scalar value applied to the drag for parametric analysis."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragFactor"](arg_newVal.COM_val))

    @property
    def ModeAsRamjet(self) -> "IMissileRamjetProp":
        """Get the interface for a Ramjet propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsRamjet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsTurbojet(self) -> "IMissileTurbojetProp":
        """Get the interface for a Turbojet propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsTurbojet"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ModeAsRocket(self) -> "IMissileRocketProp":
        """Get the interface for a Rocket propulsion strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsRocket"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{f2c9e37e-da9b-4210-94d6-b90c90d1a696}", IAircraftProp)
agcls.AgTypeNameMap["IAircraftProp"] = IAircraftProp

class IAircraftAccelerationMode(object):
    """Interface used to set the Acceleration Mode for the Advanced Acceleration Model of an aircraft."""
    _uuid = "{ed792861-7946-4e82-bf56-24fd86d3fdb2}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_SetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_GetAccelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelG"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAccelerationMode._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAccelerationMode from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAccelerationMode = agcom.GUID(IAircraftAccelerationMode._uuid)
        vtable_offset_local = IAircraftAccelerationMode._vtable_offset - 1
        self.__dict__["_GetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAccelerationMode, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAccelerationMode, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAccelG"] = IAGFUNCTYPE(pUnk, IID_IAircraftAccelerationMode, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelG"] = IAGFUNCTYPE(pUnk, IID_IAircraftAccelerationMode, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAccelerationMode.__dict__ and type(IAircraftAccelerationMode.__dict__[attrname]) == property:
            return IAircraftAccelerationMode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAccelerationMode.")
    
    @property
    def AccelMode(self) -> "AgEAvtrAccelerationAdvAccelMode":
        """Opt whether to override the acceleration or deceleration of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelerationAdvAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrAccelerationAdvAccelMode") -> None:
        """Opt whether to override the acceleration or deceleration of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelerationAdvAccelMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelMode"](arg_newVal.COM_val))

    @property
    def AccelG(self) -> float:
        """The rate of acceleration or deceleration of the aircraft if the accleeration mode is set to override."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The rate of acceleration or deceleration of the aircraft if the accleeration mode is set to override."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelG"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ed792861-7946-4e82-bf56-24fd86d3fdb2}", IAircraftAccelerationMode)
agcls.AgTypeNameMap["IAircraftAccelerationMode"] = IAircraftAccelerationMode

class IAircraftAdvAccelerationModel(object):
    """Interface used to access the Advanced Acceleration Model options of an aircraft."""
    _uuid = "{bb08fcaa-8e26-49be-bde2-9bbe5408c1fa}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLevelTurns"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetClimbAndDescentTransitions"] = _raise_uninitialized_error
        self.__dict__["_GetAccelerationMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAdvAccelerationModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAdvAccelerationModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAdvAccelerationModel = agcom.GUID(IAircraftAdvAccelerationModel._uuid)
        vtable_offset_local = IAircraftAdvAccelerationModel._vtable_offset - 1
        self.__dict__["_GetLevelTurns"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvAccelerationModel, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAttitudeTransitions"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvAccelerationModel, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetClimbAndDescentTransitions"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvAccelerationModel, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetAccelerationMode"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvAccelerationModel, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAdvAccelerationModel, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAdvAccelerationModel.__dict__ and type(IAircraftAdvAccelerationModel.__dict__[attrname]) == property:
            return IAircraftAdvAccelerationModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAdvAccelerationModel.")
    
    @property
    def LevelTurns(self) -> "ILevelTurns":
        """Get the level turns interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelTurns"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AttitudeTransitions(self) -> "IAttitudeTransitions":
        """Get the attitude transitions interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeTransitions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ClimbAndDescentTransitions(self) -> "IClimbAndDescentTransitions":
        """Get the climb and descent transitions interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetClimbAndDescentTransitions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AccelerationMode(self) -> "IAircraftAccelerationMode":
        """Get the acceleration mode interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelerationMode"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{bb08fcaa-8e26-49be-bde2-9bbe5408c1fa}", IAircraftAdvAccelerationModel)
agcls.AgTypeNameMap["IAircraftAdvAccelerationModel"] = IAircraftAdvAccelerationModel

class IAeroPropManeuverModeHelper(object):
    """Interface used to access the The calculation mode for the Aero/Prop maneuver mode helper. Helper found in the Basic Acceleration Model of an aircraft."""
    _uuid = "{52d6c08d-32e5-49f1-bda0-96469ed01a6f}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMode"] = _raise_uninitialized_error
        self.__dict__["_SetMode"] = _raise_uninitialized_error
        self.__dict__["_GetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_SetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_GetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_SetUseAfterburner"] = _raise_uninitialized_error
        self.__dict__["_GetRefWeight"] = _raise_uninitialized_error
        self.__dict__["_SetRefWeight"] = _raise_uninitialized_error
        self.__dict__["_GetRefAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetRefAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetRefAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetRefAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetRefAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetRefLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetRefLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetEstimatedPs"] = _raise_uninitialized_error
        self.__dict__["_GetControlAuthority"] = _raise_uninitialized_error
        self.__dict__["_SetControlAuthority"] = _raise_uninitialized_error
        self.__dict__["_GetStatusMsg"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAeroPropManeuverModeHelper._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAeroPropManeuverModeHelper from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAeroPropManeuverModeHelper = agcom.GUID(IAeroPropManeuverModeHelper._uuid)
        vtable_offset_local = IAeroPropManeuverModeHelper._vtable_offset - 1
        self.__dict__["_GetMode"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetMode"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAfterburner"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetRefWeight"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefWeight"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetRefAltitude"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefAltitude"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetRefAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetRefAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetRefAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+13, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetRefLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetEstimatedPs"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlAuthority"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlAuthority"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetStatusMsg"] = IAGFUNCTYPE(pUnk, IID_IAeroPropManeuverModeHelper, vtable_offset_local+19, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAeroPropManeuverModeHelper.__dict__ and type(IAeroPropManeuverModeHelper.__dict__[attrname]) == property:
            return IAeroPropManeuverModeHelper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAeroPropManeuverModeHelper.")
    
    @property
    def Mode(self) -> "AgEAvtrAccelManeuverAeroPropMode":
        """The calculation mode for the Aero/Prop maneuver mode helper."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverAeroPropMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Mode.setter
    def Mode(self, newVal:"AgEAvtrAccelManeuverAeroPropMode") -> None:
        """The calculation mode for the Aero/Prop maneuver mode helper."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelManeuverAeroPropMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMode"](arg_newVal.COM_val))

    @property
    def FlightMode(self) -> "AgEAvtrAeroPropFlightMode":
        """The performance flight mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAeroPropFlightMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrAeroPropFlightMode") -> None:
        """The performance flight mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAeroPropFlightMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightMode"](arg_newVal.COM_val))

    @property
    def UseAfterburner(self) -> bool:
        """Opt whether to use the afterburner if it is possible."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAfterburner"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAfterburner.setter
    def UseAfterburner(self, newVal:bool) -> None:
        """Opt whether to use the afterburner if it is possible."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAfterburner"](arg_newVal.COM_val))

    @property
    def RefWeight(self) -> float:
        """The reference weight."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefWeight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefWeight.setter
    def RefWeight(self, newVal:float) -> None:
        """The reference weight."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefWeight"](arg_newVal.COM_val))

    @property
    def RefAltitude(self) -> float:
        """The reference altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefAltitude.setter
    def RefAltitude(self, newVal:float) -> None:
        """The reference altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefAltitude"](arg_newVal.COM_val))

    @property
    def RefAirspeed(self) -> float:
        """The reference airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RefAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The reference airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetRefAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the reference airspeed and reference airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetRefAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def RefLoadFactor(self) -> float:
        """The reference load factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefLoadFactor.setter
    def RefLoadFactor(self, newVal:float) -> None:
        """The reference load factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefLoadFactor"](arg_newVal.COM_val))

    @property
    def EstimatedPs(self) -> float:
        """The estimated specific excess power."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEstimatedPs"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlAuthority(self) -> float:
        """The control authority of how much to factor a turn over push/pull."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlAuthority"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlAuthority.setter
    def ControlAuthority(self, newVal:float) -> None:
        """The control authority of how much to factor a turn over push/pull."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlAuthority"](arg_newVal.COM_val))

    @property
    def StatusMsg(self) -> str:
        """Get the status message in the message window."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStatusMsg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{52d6c08d-32e5-49f1-bda0-96469ed01a6f}", IAeroPropManeuverModeHelper)
agcls.AgTypeNameMap["IAeroPropManeuverModeHelper"] = IAeroPropManeuverModeHelper

class ICatalogRunway(object):
    """Interface used to access a runway in the Aviator catalog."""
    _uuid = "{120d6778-93cd-4d78-a63f-c3fb3ca55eb6}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogRunway._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogRunway from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogRunway = agcom.GUID(ICatalogRunway._uuid)
        vtable_offset_local = ICatalogRunway._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogRunway.__dict__ and type(ICatalogRunway.__dict__[attrname]) == property:
            return ICatalogRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogRunway.")
    

agcls.AgClassCatalog.add_catalog_entry("{120d6778-93cd-4d78-a63f-c3fb3ca55eb6}", ICatalogRunway)
agcls.AgTypeNameMap["ICatalogRunway"] = ICatalogRunway

class ICatalogAirport(object):
    """Interface used to access a airport in the Aviator catalog."""
    _uuid = "{aed7cf8c-257e-4c91-b829-0d3489bd7bef}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogAirport._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogAirport from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogAirport = agcom.GUID(ICatalogAirport._uuid)
        vtable_offset_local = ICatalogAirport._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogAirport.__dict__ and type(ICatalogAirport.__dict__[attrname]) == property:
            return ICatalogAirport.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogAirport.")
    

agcls.AgClassCatalog.add_catalog_entry("{aed7cf8c-257e-4c91-b829-0d3489bd7bef}", ICatalogAirport)
agcls.AgTypeNameMap["ICatalogAirport"] = ICatalogAirport

class ICatalogNavaid(object):
    """Interface used to access a navaid in the Aviator catalog."""
    _uuid = "{a019db80-a2e3-49bd-9bb0-09d1af40ca00}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogNavaid._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogNavaid from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogNavaid = agcom.GUID(ICatalogNavaid._uuid)
        vtable_offset_local = ICatalogNavaid._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogNavaid.__dict__ and type(ICatalogNavaid.__dict__[attrname]) == property:
            return ICatalogNavaid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogNavaid.")
    

agcls.AgClassCatalog.add_catalog_entry("{a019db80-a2e3-49bd-9bb0-09d1af40ca00}", ICatalogNavaid)
agcls.AgTypeNameMap["ICatalogNavaid"] = ICatalogNavaid

class ICatalogVTOLPoint(object):
    """Interface used to access a VTOL Point in the Aviator catalog."""
    _uuid = "{f4818560-bc87-4fa4-84bc-33d25a14eac5}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogVTOLPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogVTOLPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogVTOLPoint = agcom.GUID(ICatalogVTOLPoint._uuid)
        vtable_offset_local = ICatalogVTOLPoint._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogVTOLPoint.__dict__ and type(ICatalogVTOLPoint.__dict__[attrname]) == property:
            return ICatalogVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogVTOLPoint.")
    

agcls.AgClassCatalog.add_catalog_entry("{f4818560-bc87-4fa4-84bc-33d25a14eac5}", ICatalogVTOLPoint)
agcls.AgTypeNameMap["ICatalogVTOLPoint"] = ICatalogVTOLPoint

class ICatalogWaypoint(object):
    """Interface used to access a waypoint in the Aviator catalog."""
    _uuid = "{a3a67fca-89f4-4cc8-9ef0-194707369ef9}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalogWaypoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalogWaypoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalogWaypoint = agcom.GUID(ICatalogWaypoint._uuid)
        vtable_offset_local = ICatalogWaypoint._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalogWaypoint.__dict__ and type(ICatalogWaypoint.__dict__[attrname]) == property:
            return ICatalogWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalogWaypoint.")
    

agcls.AgClassCatalog.add_catalog_entry("{a3a67fca-89f4-4cc8-9ef0-194707369ef9}", ICatalogWaypoint)
agcls.AgTypeNameMap["ICatalogWaypoint"] = ICatalogWaypoint

class IARINC424Airport(object):
    """This interface is deprecated. Use IAgAvtrARINC424Item instead."""
    _uuid = "{38a8e2de-6ca0-42b4-a5c9-9a2ae40ac0d7}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IARINC424Airport._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IARINC424Airport from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IARINC424Airport = agcom.GUID(IARINC424Airport._uuid)
        vtable_offset_local = IARINC424Airport._vtable_offset - 1
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IARINC424Airport, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IARINC424Airport.__dict__ and type(IARINC424Airport.__dict__[attrname]) == property:
            return IARINC424Airport.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IARINC424Airport.")
    
    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{38a8e2de-6ca0-42b4-a5c9-9a2ae40ac0d7}", IARINC424Airport)
agcls.AgTypeNameMap["IARINC424Airport"] = IARINC424Airport

class IDAFIFItem(object):
    """Interface used to access the options for an DAFIF Item found in the Aviator catalog."""
    _uuid = "{5725c989-94a3-47c9-8115-6d5b88b992aa}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetValue"] = _raise_uninitialized_error
        self.__dict__["_GetAllFields"] = _raise_uninitialized_error
        self.__dict__["_GetAllFieldsAndValues"] = _raise_uninitialized_error
        self.__dict__["_CopySite"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IDAFIFItem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IDAFIFItem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IDAFIFItem = agcom.GUID(IDAFIFItem._uuid)
        vtable_offset_local = IDAFIFItem._vtable_offset - 1
        self.__dict__["_GetValue"] = IAGFUNCTYPE(pUnk, IID_IDAFIFItem, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.VARIANT))
        self.__dict__["_GetAllFields"] = IAGFUNCTYPE(pUnk, IID_IDAFIFItem, vtable_offset_local+2, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAllFieldsAndValues"] = IAGFUNCTYPE(pUnk, IID_IDAFIFItem, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_CopySite"] = IAGFUNCTYPE(pUnk, IID_IDAFIFItem, vtable_offset_local+4, )
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IDAFIFItem, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IDAFIFItem.__dict__ and type(IDAFIFItem.__dict__[attrname]) == property:
            return IDAFIFItem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IDAFIFItem.")
    
    def GetValue(self, fieldName:str) -> typing.Any:
        """Get the value of the field with the given name."""
        with agmarshall.BSTR_arg(fieldName) as arg_fieldName, \
             agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetValue"](arg_fieldName.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAllFields(self) -> list:
        """Get all the field names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllFields"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAllFieldsAndValues(self) -> list:
        """Get all the field names along with the corresponding value."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllFieldsAndValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopySite(self) -> None:
        """Copy the site to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopySite"]())

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{5725c989-94a3-47c9-8115-6d5b88b992aa}", IDAFIFItem)
agcls.AgTypeNameMap["IDAFIFItem"] = IDAFIFItem

class IARINC424Runway(object):
    """This interface is deprecated. Use IAgAvtrARINC424Item instead."""
    _uuid = "{fafcfc3b-d259-498d-9000-8ec380048afa}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IARINC424Runway._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IARINC424Runway from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IARINC424Runway = agcom.GUID(IARINC424Runway._uuid)
        vtable_offset_local = IARINC424Runway._vtable_offset - 1
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IARINC424Runway, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IARINC424Runway.__dict__ and type(IARINC424Runway.__dict__[attrname]) == property:
            return IARINC424Runway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IARINC424Runway.")
    
    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{fafcfc3b-d259-498d-9000-8ec380048afa}", IARINC424Runway)
agcls.AgTypeNameMap["IARINC424Runway"] = IARINC424Runway

class IAirportCategory(object):
    """Interface used to access the airports in the Aviator catalog."""
    _uuid = "{b1430df6-bb64-4173-af26-0b8c42724d29}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetARINC424Airports"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAirportCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAirportCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAirportCategory = agcom.GUID(IAirportCategory._uuid)
        vtable_offset_local = IAirportCategory._vtable_offset - 1
        self.__dict__["_GetARINC424Airports"] = IAGFUNCTYPE(pUnk, IID_IAirportCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAirportCategory.__dict__ and type(IAirportCategory.__dict__[attrname]) == property:
            return IAirportCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAirportCategory.")
    
    @property
    def ARINC424Airports(self) -> "IARINC424Source":
        """Get the ARINC-424 airports."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Airports"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b1430df6-bb64-4173-af26-0b8c42724d29}", IAirportCategory)
agcls.AgTypeNameMap["IAirportCategory"] = IAirportCategory

class INavaidCategory(object):
    """Interface used to access the navaids in the Aviator catalog."""
    _uuid = "{5b17c73b-f045-4228-bd66-9b0ed6eb40a1}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetARINC424Navaids"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(INavaidCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create INavaidCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_INavaidCategory = agcom.GUID(INavaidCategory._uuid)
        vtable_offset_local = INavaidCategory._vtable_offset - 1
        self.__dict__["_GetARINC424Navaids"] = IAGFUNCTYPE(pUnk, IID_INavaidCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in INavaidCategory.__dict__ and type(INavaidCategory.__dict__[attrname]) == property:
            return INavaidCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in INavaidCategory.")
    
    @property
    def ARINC424Navaids(self) -> "IARINC424Source":
        """Get the ARINC-424 navaids."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Navaids"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5b17c73b-f045-4228-bd66-9b0ed6eb40a1}", INavaidCategory)
agcls.AgTypeNameMap["INavaidCategory"] = INavaidCategory

class IVTOLPointCategory(object):
    """Interface used to access the VTOL Points in the Aviator catalog."""
    _uuid = "{1753d173-fd39-4755-932f-88a091f1ac63}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserVTOLPoints"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Helipads"] = _raise_uninitialized_error
        self.__dict__["_GetDAFIFHelipads"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IVTOLPointCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IVTOLPointCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IVTOLPointCategory = agcom.GUID(IVTOLPointCategory._uuid)
        vtable_offset_local = IVTOLPointCategory._vtable_offset - 1
        self.__dict__["_GetUserVTOLPoints"] = IAGFUNCTYPE(pUnk, IID_IVTOLPointCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Helipads"] = IAGFUNCTYPE(pUnk, IID_IVTOLPointCategory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetDAFIFHelipads"] = IAGFUNCTYPE(pUnk, IID_IVTOLPointCategory, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IVTOLPointCategory.__dict__ and type(IVTOLPointCategory.__dict__[attrname]) == property:
            return IVTOLPointCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IVTOLPointCategory.")
    
    @property
    def UserVTOLPoints(self) -> "IUserVTOLPointSource":
        """Get the User VTOL Points."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVTOLPoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Helipads(self) -> "IARINC424Source":
        """Get the ARINC-424 helipads."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Helipads"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DAFIFHelipads(self) -> "IDAFIFSource":
        """Get the DAFIF helipads."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFHelipads"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1753d173-fd39-4755-932f-88a091f1ac63}", IVTOLPointCategory)
agcls.AgTypeNameMap["IVTOLPointCategory"] = IVTOLPointCategory

class IWaypointCategory(object):
    """Interface used to access the waypoints in the Aviator catalog."""
    _uuid = "{3bdd04fa-d1ac-42ea-9978-f3a9c6718899}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUserWaypoints"] = _raise_uninitialized_error
        self.__dict__["_GetUserRunways"] = _raise_uninitialized_error
        self.__dict__["_GetUserVTOLPoints"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Airports"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Helipads"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Navaids"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Runways"] = _raise_uninitialized_error
        self.__dict__["_GetARINC424Waypoints"] = _raise_uninitialized_error
        self.__dict__["_GetDAFIFHelipads"] = _raise_uninitialized_error
        self.__dict__["_GetDAFIFRunways"] = _raise_uninitialized_error
        self.__dict__["_GetDAFIFWaypoints"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IWaypointCategory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IWaypointCategory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IWaypointCategory = agcom.GUID(IWaypointCategory._uuid)
        vtable_offset_local = IWaypointCategory._vtable_offset - 1
        self.__dict__["_GetUserWaypoints"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetUserRunways"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetUserVTOLPoints"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Airports"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Helipads"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Navaids"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Runways"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetARINC424Waypoints"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetDAFIFHelipads"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetDAFIFRunways"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetDAFIFWaypoints"] = IAGFUNCTYPE(pUnk, IID_IWaypointCategory, vtable_offset_local+11, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IWaypointCategory.__dict__ and type(IWaypointCategory.__dict__[attrname]) == property:
            return IWaypointCategory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IWaypointCategory.")
    
    @property
    def UserWaypoints(self) -> "IUserWaypointSource":
        """Get the User Waypoints."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserWaypoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UserRunways(self) -> "IUserRunwaySource":
        """Get the User Runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserRunways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UserVTOLPoints(self) -> "IUserVTOLPointSource":
        """Get the User VTOL Points."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVTOLPoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Airports(self) -> "IARINC424Source":
        """Get the ARINC-424 airports."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Airports"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Helipads(self) -> "IARINC424Source":
        """Get the ARINC-424 helipads."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Helipads"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Navaids(self) -> "IARINC424Source":
        """Get the ARINC-424 navaids."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Navaids"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Runways(self) -> "IARINC424Source":
        """Get the ARINC-424 runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Runways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ARINC424Waypoints(self) -> "IARINC424Source":
        """Get the ARINC-424 waypoints."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetARINC424Waypoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DAFIFHelipads(self) -> "IDAFIFSource":
        """Get the DAFIF helipads."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFHelipads"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DAFIFRunways(self) -> "IDAFIFSource":
        """Get the DAFIF runways."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFRunways"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def DAFIFWaypoints(self) -> "IDAFIFSource":
        """Get the DAFIF waypoints."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDAFIFWaypoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3bdd04fa-d1ac-42ea-9978-f3a9c6718899}", IWaypointCategory)
agcls.AgTypeNameMap["IWaypointCategory"] = IWaypointCategory

class IAircraftClimb(object):
    """Interface used to access the climb options for an aircraft in the Aviator catalog."""
    _uuid = "{66bca11a-e1e6-490a-8127-3aeb9e2f1aab}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicClimbByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvClimbByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftClimb._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftClimb from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftClimb = agcom.GUID(IAircraftClimb._uuid)
        vtable_offset_local = IAircraftClimb._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftClimb, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicClimbByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftClimb, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvClimbByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftClimb, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftClimb, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftClimb.__dict__ and type(IAircraftClimb.__dict__[attrname]) == property:
            return IAircraftClimb.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftClimb.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicClimbModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicClimb:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicClimb.COM_val)))
            return arg_ppBasicClimb.python_val

    def GetBasicClimbByName(self, name:str) -> "IAircraftBasicClimbModel":
        """Gets the basic climb model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicClimb:
            agcls.evaluate_hresult(self.__dict__["_GetBasicClimbByName"](arg_name.COM_val, byref(arg_ppBasicClimb.COM_val)))
            return arg_ppBasicClimb.python_val

    def GetAdvClimbByName(self, name:str) -> "IAircraftAdvClimbModel":
        """Gets the advanced climb model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvClimb:
            agcls.evaluate_hresult(self.__dict__["_GetAdvClimbByName"](arg_name.COM_val, byref(arg_ppAdvClimb.COM_val)))
            return arg_ppAdvClimb.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{66bca11a-e1e6-490a-8127-3aeb9e2f1aab}", IAircraftClimb)
agcls.AgTypeNameMap["IAircraftClimb"] = IAircraftClimb

class IAircraftCruise(object):
    """Interface used to access the cruise options for an aircraft in the Aviator catalog."""
    _uuid = "{b67511c7-87c1-472c-89a5-59da8c09f07c}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicCruiseByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvCruiseByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftCruise._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftCruise from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftCruise = agcom.GUID(IAircraftCruise._uuid)
        vtable_offset_local = IAircraftCruise._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftCruise, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicCruiseByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftCruise, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvCruiseByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftCruise, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftCruise, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftCruise.__dict__ and type(IAircraftCruise.__dict__[attrname]) == property:
            return IAircraftCruise.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftCruise.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicCruiseModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicCruise:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicCruise.COM_val)))
            return arg_ppBasicCruise.python_val

    def GetBasicCruiseByName(self, name:str) -> "IAircraftBasicCruiseModel":
        """Gets the basic cruise model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicCruise:
            agcls.evaluate_hresult(self.__dict__["_GetBasicCruiseByName"](arg_name.COM_val, byref(arg_ppBasicCruise.COM_val)))
            return arg_ppBasicCruise.python_val

    def GetAdvCruiseByName(self, name:str) -> "IAircraftAdvCruiseModel":
        """Gets the advanced cruise model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvCruise:
            agcls.evaluate_hresult(self.__dict__["_GetAdvCruiseByName"](arg_name.COM_val, byref(arg_ppAdvCruise.COM_val)))
            return arg_ppAdvCruise.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{b67511c7-87c1-472c-89a5-59da8c09f07c}", IAircraftCruise)
agcls.AgTypeNameMap["IAircraftCruise"] = IAircraftCruise

class IAircraftDescent(object):
    """Interface used to access the descent options for an aircraft in the Aviator catalog."""
    _uuid = "{568db25b-e93e-4982-9131-82e1527ab875}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicDescentByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvDescentByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftDescent._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftDescent from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftDescent = agcom.GUID(IAircraftDescent._uuid)
        vtable_offset_local = IAircraftDescent._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftDescent, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicDescentByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftDescent, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvDescentByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftDescent, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftDescent, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftDescent.__dict__ and type(IAircraftDescent.__dict__[attrname]) == property:
            return IAircraftDescent.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftDescent.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicDescentModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicDescentModel:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicDescentModel.COM_val)))
            return arg_ppBasicDescentModel.python_val

    def GetBasicDescentByName(self, name:str) -> "IAircraftBasicDescentModel":
        """Gets the basic descent model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicDescentModel:
            agcls.evaluate_hresult(self.__dict__["_GetBasicDescentByName"](arg_name.COM_val, byref(arg_ppBasicDescentModel.COM_val)))
            return arg_ppBasicDescentModel.python_val

    def GetAdvDescentByName(self, name:str) -> "IAircraftAdvDescentModel":
        """Gets the advanced descent model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvDescent:
            agcls.evaluate_hresult(self.__dict__["_GetAdvDescentByName"](arg_name.COM_val, byref(arg_ppAdvDescent.COM_val)))
            return arg_ppAdvDescent.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val


agcls.AgClassCatalog.add_catalog_entry("{568db25b-e93e-4982-9131-82e1527ab875}", IAircraftDescent)
agcls.AgTypeNameMap["IAircraftDescent"] = IAircraftDescent

class IAircraftLanding(object):
    """Interface used to access the landing options for an aircraft in the Aviator catalog."""
    _uuid = "{4a0055a5-4224-42c3-b113-704c110093e8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicLandingByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvLandingByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftLanding._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftLanding from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftLanding = agcom.GUID(IAircraftLanding._uuid)
        vtable_offset_local = IAircraftLanding._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftLanding, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicLandingByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftLanding, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvLandingByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftLanding, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftLanding, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftLanding.__dict__ and type(IAircraftLanding.__dict__[attrname]) == property:
            return IAircraftLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftLanding.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicLandingModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicLandingModel:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicLandingModel.COM_val)))
            return arg_ppBasicLandingModel.python_val

    def GetBasicLandingByName(self, name:str) -> "IAircraftBasicLandingModel":
        """Gets the basic Landing model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicLandingModel:
            agcls.evaluate_hresult(self.__dict__["_GetBasicLandingByName"](arg_name.COM_val, byref(arg_ppBasicLandingModel.COM_val)))
            return arg_ppBasicLandingModel.python_val

    def GetAdvLandingByName(self, name:str) -> "IAircraftAdvLandingModel":
        """Gets the advanced Landing model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvLanding:
            agcls.evaluate_hresult(self.__dict__["_GetAdvLandingByName"](arg_name.COM_val, byref(arg_ppAdvLanding.COM_val)))
            return arg_ppAdvLanding.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{4a0055a5-4224-42c3-b113-704c110093e8}", IAircraftLanding)
agcls.AgTypeNameMap["IAircraftLanding"] = IAircraftLanding

class IAircraftTakeoff(object):
    """Interface used to access the takeoff options for an aircraft in the Aviator catalog."""
    _uuid = "{0a5a6393-8473-4f08-8501-9ca2a66494f4}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicTakeoffByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvTakeoffByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftTakeoff._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftTakeoff from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftTakeoff = agcom.GUID(IAircraftTakeoff._uuid)
        vtable_offset_local = IAircraftTakeoff._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftTakeoff, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicTakeoffByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftTakeoff, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvTakeoffByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftTakeoff, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftTakeoff, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftTakeoff.__dict__ and type(IAircraftTakeoff.__dict__[attrname]) == property:
            return IAircraftTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftTakeoff.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicTakeoffModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicTakeoffModel:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicTakeoffModel.COM_val)))
            return arg_ppBasicTakeoffModel.python_val

    def GetBasicTakeoffByName(self, name:str) -> "IAircraftBasicTakeoffModel":
        """Gets the basic Takeoff model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicTakeoffModel:
            agcls.evaluate_hresult(self.__dict__["_GetBasicTakeoffByName"](arg_name.COM_val, byref(arg_ppBasicTakeoffModel.COM_val)))
            return arg_ppBasicTakeoffModel.python_val

    def GetAdvTakeoffByName(self, name:str) -> "IAircraftAdvTakeoffModel":
        """Gets the advanced Takeoff model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvTakeoff:
            agcls.evaluate_hresult(self.__dict__["_GetAdvTakeoffByName"](arg_name.COM_val, byref(arg_ppAdvTakeoff.COM_val)))
            return arg_ppAdvTakeoff.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{0a5a6393-8473-4f08-8501-9ca2a66494f4}", IAircraftTakeoff)
agcls.AgTypeNameMap["IAircraftTakeoff"] = IAircraftTakeoff

class IAircraftAcceleration(object):
    """Interface used to access the acceleration options for an aircraft in the Aviator catalog."""
    _uuid = "{f40c1168-8650-4aad-9790-192041602734}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBuiltInModel"] = _raise_uninitialized_error
        self.__dict__["_GetBasicAccelerationByName"] = _raise_uninitialized_error
        self.__dict__["_GetAdvAccelerationByName"] = _raise_uninitialized_error
        self.__dict__["_GetAsCatalogItem"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftAcceleration._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftAcceleration from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftAcceleration = agcom.GUID(IAircraftAcceleration._uuid)
        vtable_offset_local = IAircraftAcceleration._vtable_offset - 1
        self.__dict__["_GetBuiltInModel"] = IAGFUNCTYPE(pUnk, IID_IAircraftAcceleration, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetBasicAccelerationByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftAcceleration, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAdvAccelerationByName"] = IAGFUNCTYPE(pUnk, IID_IAircraftAcceleration, vtable_offset_local+3, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetAsCatalogItem"] = IAGFUNCTYPE(pUnk, IID_IAircraftAcceleration, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftAcceleration.__dict__ and type(IAircraftAcceleration.__dict__[attrname]) == property:
            return IAircraftAcceleration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftAcceleration.")
    
    def GetBuiltInModel(self) -> "IAircraftBasicAccelerationModel":
        """Get the built-in model."""
        with agmarshall.AgInterface_out_arg() as arg_ppBasicAcc:
            agcls.evaluate_hresult(self.__dict__["_GetBuiltInModel"](byref(arg_ppBasicAcc.COM_val)))
            return arg_ppBasicAcc.python_val

    def GetBasicAccelerationByName(self, name:str) -> "IAircraftBasicAccelerationModel":
        """Get the basic acceleration model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicAcc:
            agcls.evaluate_hresult(self.__dict__["_GetBasicAccelerationByName"](arg_name.COM_val, byref(arg_ppBasicAcc.COM_val)))
            return arg_ppBasicAcc.python_val

    def GetAdvAccelerationByName(self, name:str) -> "IAircraftAdvAccelerationModel":
        """Get the advanced acceleration model with the given name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppAdvAcc:
            agcls.evaluate_hresult(self.__dict__["_GetAdvAccelerationByName"](arg_name.COM_val, byref(arg_ppAdvAcc.COM_val)))
            return arg_ppAdvAcc.python_val

    def GetAsCatalogItem(self) -> "ICatalogItem":
        """Get the catalog item interface for this object."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogData:
            agcls.evaluate_hresult(self.__dict__["_GetAsCatalogItem"](byref(arg_ppCatalogData.COM_val)))
            return arg_ppCatalogData.python_val


agcls.AgClassCatalog.add_catalog_entry("{f40c1168-8650-4aad-9790-192041602734}", IAircraftAcceleration)
agcls.AgTypeNameMap["IAircraftAcceleration"] = IAircraftAcceleration

class ICatalog(object):
    """Interface used to access the Aviator catalog."""
    _uuid = "{a9756132-0cd0-438d-bc8c-77fb748cebbd}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAircraftCategory"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayCategory"] = _raise_uninitialized_error
        self.__dict__["_GetAirportCategory"] = _raise_uninitialized_error
        self.__dict__["_GetNavaidCategory"] = _raise_uninitialized_error
        self.__dict__["_GetVTOLPointCategory"] = _raise_uninitialized_error
        self.__dict__["_GetWaypointCategory"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICatalog = agcom.GUID(ICatalog._uuid)
        vtable_offset_local = ICatalog._vtable_offset - 1
        self.__dict__["_GetAircraftCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetRunwayCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetAirportCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetNavaidCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetVTOLPointCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetWaypointCategory"] = IAGFUNCTYPE(pUnk, IID_ICatalog, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICatalog.__dict__ and type(ICatalog.__dict__[attrname]) == property:
            return ICatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICatalog.")
    
    @property
    def AircraftCategory(self) -> "IAircraftCategory":
        """Get the aircraft category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetAircraftCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    @property
    def RunwayCategory(self) -> "IRunwayCategory":
        """Get the runway category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    @property
    def AirportCategory(self) -> "IAirportCategory":
        """Get the airport category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetAirportCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    @property
    def NavaidCategory(self) -> "INavaidCategory":
        """Get the navaid category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetNavaidCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    @property
    def VTOLPointCategory(self) -> "IVTOLPointCategory":
        """Get the vtol point category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetVTOLPointCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val

    @property
    def WaypointCategory(self) -> "IWaypointCategory":
        """Get the waypoint category."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalogItem:
            agcls.evaluate_hresult(self.__dict__["_GetWaypointCategory"](byref(arg_ppCatalogItem.COM_val)))
            return arg_ppCatalogItem.python_val


agcls.AgClassCatalog.add_catalog_entry("{a9756132-0cd0-438d-bc8c-77fb748cebbd}", ICatalog)
agcls.AgTypeNameMap["ICatalog"] = ICatalog

class IProcedureTimeOptions(object):
    """Interface used to access the time options for the current procedure. Use this interface to set an Interrupt Time or Fixed Duration for a procedure."""
    _uuid = "{19d372f4-0dce-4b60-8517-cbdfc1e5939c}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStartTimeEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetUseStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetUseStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetInterruptTimeEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetUseInterruptTime"] = _raise_uninitialized_error
        self.__dict__["_SetUseInterruptTime"] = _raise_uninitialized_error
        self.__dict__["_GetInterruptTime"] = _raise_uninitialized_error
        self.__dict__["_SetInterruptTime"] = _raise_uninitialized_error
        self.__dict__["_GetStopTimeEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopTime"] = _raise_uninitialized_error
        self.__dict__["_SetUseStopTime"] = _raise_uninitialized_error
        self.__dict__["_GetStopTime"] = _raise_uninitialized_error
        self.__dict__["_SetStopTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureTimeOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureTimeOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureTimeOptions = agcom.GUID(IProcedureTimeOptions._uuid)
        vtable_offset_local = IProcedureTimeOptions._vtable_offset - 1
        self.__dict__["_GetStartTimeEnabled"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUseStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+3, agcom.VARIANT_BOOL)
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetInterruptTimeEnabled"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUseInterruptTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseInterruptTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetInterruptTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetInterruptTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetStopTimeEnabled"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUseStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_GetStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureTimeOptions, vtable_offset_local+15, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureTimeOptions.__dict__ and type(IProcedureTimeOptions.__dict__[attrname]) == property:
            return IProcedureTimeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureTimeOptions.")
    
    @property
    def StartTimeEnabled(self) -> bool:
        """Check to see if the start time is enabled for this procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTimeEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseStartTime(self) -> bool:
        """Opt whether to set a start time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseStartTime.setter
    def UseStartTime(self, newVal:bool) -> None:
        """Opt whether to set a start time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseStartTime"](arg_newVal.COM_val))

    @property
    def StartTime(self) -> typing.Any:
        """Start time for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStartTime(self, time:typing.Any) -> None:
        """Set the start time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_time.COM_val))

    @property
    def InterruptTimeEnabled(self) -> bool:
        """Check to see if the interrupt time is enabled for this procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterruptTimeEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseInterruptTime(self) -> bool:
        """Opt whether to set an interrupt time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseInterruptTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseInterruptTime.setter
    def UseInterruptTime(self, newVal:bool) -> None:
        """Opt whether to set an interrupt time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseInterruptTime"](arg_newVal.COM_val))

    @property
    def InterruptTime(self) -> typing.Any:
        """Interrupt time for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterruptTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetInterruptTime(self, time:typing.Any) -> None:
        """Set the interrupt time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetInterruptTime"](arg_time.COM_val))

    @property
    def StopTimeEnabled(self) -> bool:
        """Check to see if the stop time is enabled for this procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopTimeEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseStopTime(self) -> bool:
        """Opt whether to set a stop  time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseStopTime.setter
    def UseStopTime(self, newVal:bool) -> None:
        """Opt whether to set a stop time for the procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseStopTime"](arg_newVal.COM_val))

    @property
    def StopTime(self) -> typing.Any:
        """Stop time for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopTime(self, time:typing.Any) -> None:
        """Set the stop time for the procedure."""
        with agmarshall.VARIANT_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetStopTime"](arg_time.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{19d372f4-0dce-4b60-8517-cbdfc1e5939c}", IProcedureTimeOptions)
agcls.AgTypeNameMap["IProcedureTimeOptions"] = IProcedureTimeOptions

class ICalculationOptions(object):
    """Interface used to access the calculation options for a procedure or phase."""
    _uuid = "{B398DB5E-FA44-446B-B1AE-31761CB12D50}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxRelMotionFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelMotionFactor"] = _raise_uninitialized_error
        self.__dict__["_GetStateCacheTimeInterval"] = _raise_uninitialized_error
        self.__dict__["_SetStateCacheTimeInterval"] = _raise_uninitialized_error
        self.__dict__["_GetTimeResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTimeResolution"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_GetMaxBadSteps"] = _raise_uninitialized_error
        self.__dict__["_SetMaxBadSteps"] = _raise_uninitialized_error
        self.__dict__["_GetIntegratorType"] = _raise_uninitialized_error
        self.__dict__["_SetIntegratorType"] = _raise_uninitialized_error
        self.__dict__["_GetIntegratorTypeString"] = _raise_uninitialized_error
        self.__dict__["_SetIntegratorTypeString"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICalculationOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICalculationOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICalculationOptions = agcom.GUID(ICalculationOptions._uuid)
        vtable_offset_local = ICalculationOptions._vtable_offset - 1
        self.__dict__["_GetMaxRelMotionFactor"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelMotionFactor"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetStateCacheTimeInterval"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStateCacheTimeInterval"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetTimeResolution"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeResolution"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetMaxBadSteps"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMaxBadSteps"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetIntegratorType"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetIntegratorType"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetIntegratorTypeString"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetIntegratorTypeString"] = IAGFUNCTYPE(pUnk, IID_ICalculationOptions, vtable_offset_local+14, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICalculationOptions.__dict__ and type(ICalculationOptions.__dict__[attrname]) == property:
            return ICalculationOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICalculationOptions.")
    
    @property
    def MaxRelMotionFactor(self) -> float:
        """The maximum motion allowed between sampling points."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelMotionFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelMotionFactor.setter
    def MaxRelMotionFactor(self, newVal:float) -> None:
        """The maximum motion allowed between sampling points."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelMotionFactor"](arg_newVal.COM_val))

    @property
    def StateCacheTimeInterval(self) -> float:
        """The time interval used to store the state information."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStateCacheTimeInterval"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StateCacheTimeInterval.setter
    def StateCacheTimeInterval(self, newVal:float) -> None:
        """The time interval used to store the state information."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStateCacheTimeInterval"](arg_newVal.COM_val))

    @property
    def TimeResolution(self) -> float:
        """The tolerance for resolving time calculations."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeResolution.setter
    def TimeResolution(self, newVal:float) -> None:
        """The tolerance for resolving time calculations."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeResolution"](arg_newVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum number of iterations per time step Aviator will attempt."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        """The maximum number of iterations per time step Aviator will attempt."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_newVal.COM_val))

    @property
    def MaxBadSteps(self) -> int:
        """The maximum number of bad steps Aviator will allow before ceasing calculation."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxBadSteps"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxBadSteps.setter
    def MaxBadSteps(self, newVal:int) -> None:
        """The maximum number of bad steps Aviator will allow before ceasing calculation."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxBadSteps"](arg_newVal.COM_val))

    @property
    def IntegratorType(self) -> "AgEAvtrNumericalIntegrator":
        """The integrator type."""
        with agmarshall.AgEnum_arg(AgEAvtrNumericalIntegrator) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntegratorType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IntegratorType.setter
    def IntegratorType(self, pVal:"AgEAvtrNumericalIntegrator") -> None:
        """The integrator type."""
        with agmarshall.AgEnum_arg(AgEAvtrNumericalIntegrator, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetIntegratorType"](arg_pVal.COM_val))

    @property
    def IntegratorTypeString(self) -> str:
        """The integrator type as a string value. Use this for custom integrators."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIntegratorTypeString"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IntegratorTypeString.setter
    def IntegratorTypeString(self, pVal:str) -> None:
        """The integrator type as a string value. Use this for custom integrators."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetIntegratorTypeString"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B398DB5E-FA44-446B-B1AE-31761CB12D50}", ICalculationOptions)
agcls.AgTypeNameMap["ICalculationOptions"] = ICalculationOptions

class INavigationOptions(object):
    """Interface used to access the navigation options for an Aviator procedure."""
    _uuid = "{d0b367a7-0df0-454b-b059-e27f55a04730}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetNavMode"] = _raise_uninitialized_error
        self.__dict__["_SetNavMode"] = _raise_uninitialized_error
        self.__dict__["_GetArriveOnCourse"] = _raise_uninitialized_error
        self.__dict__["_SetArriveOnCourse"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteFirstTurn"] = _raise_uninitialized_error
        self.__dict__["_SetEnrouteFirstTurn"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteSecondTurn"] = _raise_uninitialized_error
        self.__dict__["_SetEnrouteSecondTurn"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(INavigationOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create INavigationOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_INavigationOptions = agcom.GUID(INavigationOptions._uuid)
        vtable_offset_local = INavigationOptions._vtable_offset - 1
        self.__dict__["_GetNavMode"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetNavMode"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetArriveOnCourse"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetArriveOnCourse"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnrouteFirstTurn"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetEnrouteFirstTurn"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetEnrouteSecondTurn"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetEnrouteSecondTurn"] = IAGFUNCTYPE(pUnk, IID_INavigationOptions, vtable_offset_local+10, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in INavigationOptions.__dict__ and type(INavigationOptions.__dict__[attrname]) == property:
            return INavigationOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in INavigationOptions.")
    
    @property
    def NavMode(self) -> "AgEAvtrPointToPointMode":
        """The navigation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPointToPointMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NavMode.setter
    def NavMode(self, newVal:"AgEAvtrPointToPointMode") -> None:
        """The navigation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPointToPointMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNavMode"](arg_newVal.COM_val))

    @property
    def ArriveOnCourse(self) -> typing.Any:
        """The aircraft will start or arrive at the procedure site with the specified course. The nav mode must be set to Arrive on Course to set this value."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArriveOnCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArriveOnCourse.setter
    def ArriveOnCourse(self, newVal:typing.Any) -> None:
        """The aircraft will start or arrive at the procedure site with the specified course. The nav mode must be set to Arrive on Course to set this value."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArriveOnCourse"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """Opt whether to use a magnetic heading to arrive on course. The nav mode must be set to Arrive on Course to set this value."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading to arrive on course. The nav mode must be set to Arrive on Course to set this value."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def EnrouteFirstTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the first turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteFirstTurn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnrouteFirstTurn.setter
    def EnrouteFirstTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the first turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnrouteFirstTurn"](arg_newVal.COM_val))

    @property
    def EnrouteSecondTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the second turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteSecondTurn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnrouteSecondTurn.setter
    def EnrouteSecondTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the second turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnrouteSecondTurn"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d0b367a7-0df0-454b-b059-e27f55a04730}", INavigationOptions)
agcls.AgTypeNameMap["INavigationOptions"] = INavigationOptions

class IAltitudeMSLAndLevelOffOptions(object):
    """Interface used to access the altitude MSL and Level off options for an Aviator procedure."""
    _uuid = "{c7939666-f5a2-44fa-9a4b-9e2d84e93aa5}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMSLAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMSLAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAltitudeMSLAndLevelOffOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAltitudeMSLAndLevelOffOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAltitudeMSLAndLevelOffOptions = agcom.GUID(IAltitudeMSLAndLevelOffOptions._uuid)
        vtable_offset_local = IAltitudeMSLAndLevelOffOptions._vtable_offset - 1
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLAndLevelOffOptions, vtable_offset_local+8, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAltitudeMSLAndLevelOffOptions.__dict__ and type(IAltitudeMSLAndLevelOffOptions.__dict__[attrname]) == property:
            return IAltitudeMSLAndLevelOffOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAltitudeMSLAndLevelOffOptions.")
    
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMSLAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMSLAltitude"](arg_newVal.COM_val))

    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMustLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMustLevelOff"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{c7939666-f5a2-44fa-9a4b-9e2d84e93aa5}", IAltitudeMSLAndLevelOffOptions)
agcls.AgTypeNameMap["IAltitudeMSLAndLevelOffOptions"] = IAltitudeMSLAndLevelOffOptions

class IAltitudeMSLOptions(object):
    """Interface used to access the altitude MSL options for an Aviator procedure."""
    _uuid = "{bde058f8-a355-4a4f-9884-7e2961b212e7}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMSLAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMSLAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAltitudeMSLOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAltitudeMSLOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAltitudeMSLOptions = agcom.GUID(IAltitudeMSLOptions._uuid)
        vtable_offset_local = IAltitudeMSLOptions._vtable_offset - 1
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeMSLOptions, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAltitudeMSLOptions.__dict__ and type(IAltitudeMSLOptions.__dict__[attrname]) == property:
            return IAltitudeMSLOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAltitudeMSLOptions.")
    
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMSLAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMSLAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{bde058f8-a355-4a4f-9884-7e2961b212e7}", IAltitudeMSLOptions)
agcls.AgTypeNameMap["IAltitudeMSLOptions"] = IAltitudeMSLOptions

class IAltitudeOptions(object):
    """Interface used to access the altitude options for an Aviator procedure."""
    _uuid = "{be4fccc8-7fe4-443b-9dc9-c337369c4560}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAltitudeOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAltitudeOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAltitudeOptions = agcom.GUID(IAltitudeOptions._uuid)
        vtable_offset_local = IAltitudeOptions._vtable_offset - 1
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAltitudeOptions, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAltitudeOptions.__dict__ and type(IAltitudeOptions.__dict__[attrname]) == property:
            return IAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAltitudeOptions.")
    
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeReference"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeReference"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{be4fccc8-7fe4-443b-9dc9-c337369c4560}", IAltitudeOptions)
agcls.AgTypeNameMap["IAltitudeOptions"] = IAltitudeOptions

class IHoverAltitudeOptions(object):
    """Interface used to access the altitude options for VTOL procedure."""
    _uuid = "{61d092fc-5b7c-4056-9f82-ac024ea4d4bd}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetFinalAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetFinalAltitudeRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IHoverAltitudeOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IHoverAltitudeOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IHoverAltitudeOptions = agcom.GUID(IHoverAltitudeOptions._uuid)
        vtable_offset_local = IHoverAltitudeOptions._vtable_offset - 1
        self.__dict__["_GetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IHoverAltitudeOptions, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IHoverAltitudeOptions.__dict__ and type(IHoverAltitudeOptions.__dict__[attrname]) == property:
            return IHoverAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IHoverAltitudeOptions.")
    
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeReference"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeReference"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalAltitudeRate"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{61d092fc-5b7c-4056-9f82-ac024ea4d4bd}", IHoverAltitudeOptions)
agcls.AgTypeNameMap["IHoverAltitudeOptions"] = IHoverAltitudeOptions

class IArcAltitudeOptions(object):
    """Interface used to access the altitude options for an Arc procedure."""
    _uuid = "{5aa7a535-fbc0-49b5-99e7-c93309863a6d}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetStartArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetStartArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetStopArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetStopArcAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IArcAltitudeOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IArcAltitudeOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IArcAltitudeOptions = agcom.GUID(IArcAltitudeOptions._uuid)
        vtable_offset_local = IArcAltitudeOptions._vtable_offset - 1
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetStartArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStartArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetStopArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeOptions, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IArcAltitudeOptions.__dict__ and type(IArcAltitudeOptions.__dict__[attrname]) == property:
            return IArcAltitudeOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IArcAltitudeOptions.")
    
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def StartArcAltitude(self) -> float:
        """The altitude at the beginning of the arc."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartArcAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartArcAltitude.setter
    def StartArcAltitude(self, newVal:float) -> None:
        """The altitude at the beginning of the arc."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartArcAltitude"](arg_newVal.COM_val))

    @property
    def StopArcAltitude(self) -> float:
        """The altitude at the end of the arc."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopArcAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopArcAltitude.setter
    def StopArcAltitude(self, newVal:float) -> None:
        """The altitude at the end of the arc."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopArcAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5aa7a535-fbc0-49b5-99e7-c93309863a6d}", IArcAltitudeOptions)
agcls.AgTypeNameMap["IArcAltitudeOptions"] = IArcAltitudeOptions

class IArcAltitudeAndDelayOptions(object):
    """Interface used to access the altitude options for an Arc procedure."""
    _uuid = "{826dc7a9-7fad-46a9-8587-7b879ea6d53e}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDelayArcClimbDescents"] = _raise_uninitialized_error
        self.__dict__["_SetDelayArcClimbDescents"] = _raise_uninitialized_error
        self.__dict__["_GetStartArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetStartArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetStopArcAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetStopArcAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IArcAltitudeAndDelayOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IArcAltitudeAndDelayOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IArcAltitudeAndDelayOptions = agcom.GUID(IArcAltitudeAndDelayOptions._uuid)
        vtable_offset_local = IArcAltitudeAndDelayOptions._vtable_offset - 1
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDelayArcClimbDescents"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDelayArcClimbDescents"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetStartArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStartArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetStopArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopArcAltitude"] = IAGFUNCTYPE(pUnk, IID_IArcAltitudeAndDelayOptions, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IArcAltitudeAndDelayOptions.__dict__ and type(IArcAltitudeAndDelayOptions.__dict__[attrname]) == property:
            return IArcAltitudeAndDelayOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IArcAltitudeAndDelayOptions.")
    
    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def DelayArcClimbDescents(self) -> bool:
        """Delay the climb/descend such that the stop arc altitude will be achieved by the end of the procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelayArcClimbDescents"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelayArcClimbDescents.setter
    def DelayArcClimbDescents(self, newVal:bool) -> None:
        """Delay the climb/descend such that the stop arc altitude will be achieved by the end of the procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelayArcClimbDescents"](arg_newVal.COM_val))

    @property
    def StartArcAltitude(self) -> float:
        """The altitude at the beginning of the arc."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartArcAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartArcAltitude.setter
    def StartArcAltitude(self, newVal:float) -> None:
        """The altitude at the beginning of the arc."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartArcAltitude"](arg_newVal.COM_val))

    @property
    def StopArcAltitude(self) -> float:
        """The altitude at the end of the arc."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopArcAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopArcAltitude.setter
    def StopArcAltitude(self, newVal:float) -> None:
        """The altitude at the end of the arc."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopArcAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{826dc7a9-7fad-46a9-8587-7b879ea6d53e}", IArcAltitudeAndDelayOptions)
agcls.AgTypeNameMap["IArcAltitudeAndDelayOptions"] = IArcAltitudeAndDelayOptions

class IArcOptions(object):
    """Interface used to access the arc options for a procedure."""
    _uuid = "{436c4ca7-5994-43bf-a975-a9c29c328ec0}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetStartBearing"] = _raise_uninitialized_error
        self.__dict__["_SetStartBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        self.__dict__["_SetRadius"] = _raise_uninitialized_error
        self.__dict__["_GetTurnAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTurnAngle"] = _raise_uninitialized_error
        self.__dict__["_GetJoinArc"] = _raise_uninitialized_error
        self.__dict__["_SetJoinArc"] = _raise_uninitialized_error
        self.__dict__["_GetExitArc"] = _raise_uninitialized_error
        self.__dict__["_SetExitArc"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IArcOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IArcOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IArcOptions = agcom.GUID(IArcOptions._uuid)
        vtable_offset_local = IArcOptions._vtable_offset - 1
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetStartBearing"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartBearing"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadius"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetTurnAngle"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetTurnAngle"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetJoinArc"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetJoinArc"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetExitArc"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetExitArc"] = IAGFUNCTYPE(pUnk, IID_IArcOptions, vtable_offset_local+14, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IArcOptions.__dict__ and type(IArcOptions.__dict__[attrname]) == property:
            return IArcOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IArcOptions.")
    
    @property
    def TurnDirection(self) -> "AgEAvtrTurnDirection":
        """The turn direction to the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrTurnDirection") -> None:
        """The turn direction to the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnDirection, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def StartBearing(self) -> typing.Any:
        """The bearing from the site to the arc."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartBearing.setter
    def StartBearing(self, newVal:typing.Any) -> None:
        """The bearing from the site to the arc."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the start bearing."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the start bearing."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def Radius(self) -> float:
        """The radius of the arc."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Radius.setter
    def Radius(self, newVal:float) -> None:
        """The radius of the arc."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadius"](arg_newVal.COM_val))

    @property
    def TurnAngle(self) -> typing.Any:
        """The length of the arc the aircraft will fly."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnAngle.setter
    def TurnAngle(self, newVal:typing.Any) -> None:
        """The length of the arc the aircraft will fly."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnAngle"](arg_newVal.COM_val))

    @property
    def JoinArc(self) -> "AgEAvtrJoinExitArcMethod":
        """The method to join the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJoinArc"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @JoinArc.setter
    def JoinArc(self, newVal:"AgEAvtrJoinExitArcMethod") -> None:
        """The method to join the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJoinArc"](arg_newVal.COM_val))

    @property
    def ExitArc(self) -> "AgEAvtrJoinExitArcMethod":
        """The method to exit the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetExitArc"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ExitArc.setter
    def ExitArc(self, newVal:"AgEAvtrJoinExitArcMethod") -> None:
        """The method to exit the arc."""
        with agmarshall.AgEnum_arg(AgEAvtrJoinExitArcMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetExitArc"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{436c4ca7-5994-43bf-a975-a9c29c328ec0}", IArcOptions)
agcls.AgTypeNameMap["IArcOptions"] = IArcOptions

class IVerticalPlaneOptions(object):
    """Interface used to access the Vertical Plane options for an Aviator procedure."""
    _uuid = "{2f4e9933-f0e0-4c9c-96ad-7b210faf7a05}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IVerticalPlaneOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IVerticalPlaneOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IVerticalPlaneOptions = agcom.GUID(IVerticalPlaneOptions._uuid)
        vtable_offset_local = IVerticalPlaneOptions._vtable_offset - 1
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneOptions, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IVerticalPlaneOptions.__dict__ and type(IVerticalPlaneOptions.__dict__[attrname]) == property:
            return IVerticalPlaneOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IVerticalPlaneOptions.")
    
    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxVertPlaneRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxVertPlaneRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2f4e9933-f0e0-4c9c-96ad-7b210faf7a05}", IVerticalPlaneOptions)
agcls.AgTypeNameMap["IVerticalPlaneOptions"] = IVerticalPlaneOptions

class IVerticalPlaneAndFlightPathOptions(object):
    """Interface used to access the Vertical Plane and Final Flight Path Angle options for an Aviator procedure."""
    _uuid = "{4a177d89-4a7d-4388-a5db-05a9b35ebece}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFinalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFinalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IVerticalPlaneAndFlightPathOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IVerticalPlaneAndFlightPathOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IVerticalPlaneAndFlightPathOptions = agcom.GUID(IVerticalPlaneAndFlightPathOptions._uuid)
        vtable_offset_local = IVerticalPlaneAndFlightPathOptions._vtable_offset - 1
        self.__dict__["_GetFinalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetFinalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IVerticalPlaneAndFlightPathOptions, vtable_offset_local+8, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IVerticalPlaneAndFlightPathOptions.__dict__ and type(IVerticalPlaneAndFlightPathOptions.__dict__[attrname]) == property:
            return IVerticalPlaneAndFlightPathOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IVerticalPlaneAndFlightPathOptions.")
    
    @property
    def FinalFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalFlightPathAngle.setter
    def FinalFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxVertPlaneRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxVertPlaneRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4a177d89-4a7d-4388-a5db-05a9b35ebece}", IVerticalPlaneAndFlightPathOptions)
agcls.AgTypeNameMap["IVerticalPlaneAndFlightPathOptions"] = IVerticalPlaneAndFlightPathOptions

class IArcVerticalPlaneOptions(object):
    """Interface used to access the Vertical Plane options for an arc procedure."""
    _uuid = "{402feacd-0f43-4af6-8c56-9aa61240e2b0}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStartArcFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStartArcFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetStopArcFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStopArcFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IArcVerticalPlaneOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IArcVerticalPlaneOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IArcVerticalPlaneOptions = agcom.GUID(IArcVerticalPlaneOptions._uuid)
        vtable_offset_local = IArcVerticalPlaneOptions._vtable_offset - 1
        self.__dict__["_GetStartArcFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartArcFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetStopArcFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopArcFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetMinEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxEnrouteFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxVertPlaneRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IArcVerticalPlaneOptions, vtable_offset_local+10, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IArcVerticalPlaneOptions.__dict__ and type(IArcVerticalPlaneOptions.__dict__[attrname]) == property:
            return IArcVerticalPlaneOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IArcVerticalPlaneOptions.")
    
    @property
    def StartArcFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the start of the arc."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartArcFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartArcFlightPathAngle.setter
    def StartArcFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the start of the arc."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartArcFlightPathAngle"](arg_newVal.COM_val))

    @property
    def StopArcFlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the arc."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopArcFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopArcFlightPathAngle.setter
    def StopArcFlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the arc."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopArcFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MinEnrouteFlightPathAngle(self) -> typing.Any:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinEnrouteFlightPathAngle.setter
    def MinEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The minimum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxEnrouteFlightPathAngle(self) -> typing.Any:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnrouteFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnrouteFlightPathAngle.setter
    def MaxEnrouteFlightPathAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle of the flight path during enroute segments of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnrouteFlightPathAngle"](arg_newVal.COM_val))

    @property
    def MaxVertPlaneRadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxVertPlaneRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxVertPlaneRadiusFactor.setter
    def MaxVertPlaneRadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxVertPlaneRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{402feacd-0f43-4af6-8c56-9aa61240e2b0}", IArcVerticalPlaneOptions)
agcls.AgTypeNameMap["IArcVerticalPlaneOptions"] = IArcVerticalPlaneOptions

class IEnrouteOptions(object):
    """Interface used to access the Enroute options for an Aviator procedure."""
    _uuid = "{cd8774fa-5dd0-4ac6-8292-0914fa1cff61}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseMaxSpeedTurns"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxSpeedTurns"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTurnRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTurnRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IEnrouteOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IEnrouteOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IEnrouteOptions = agcom.GUID(IEnrouteOptions._uuid)
        vtable_offset_local = IEnrouteOptions._vtable_offset - 1
        self.__dict__["_GetUseMaxSpeedTurns"] = IAGFUNCTYPE(pUnk, IID_IEnrouteOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxSpeedTurns"] = IAGFUNCTYPE(pUnk, IID_IEnrouteOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IEnrouteOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IEnrouteOptions, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IEnrouteOptions.__dict__ and type(IEnrouteOptions.__dict__[attrname]) == property:
            return IEnrouteOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IEnrouteOptions.")
    
    @property
    def UseMaxSpeedTurns(self) -> bool:
        """Opt whether to use the max speed turns."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxSpeedTurns"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxSpeedTurns.setter
    def UseMaxSpeedTurns(self, newVal:bool) -> None:
        """Opt whether to use the max speed turns."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxSpeedTurns"](arg_newVal.COM_val))

    @property
    def MaxTurnRadiusFactor(self) -> float:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTurnRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTurnRadiusFactor.setter
    def MaxTurnRadiusFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTurnRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{cd8774fa-5dd0-4ac6-8292-0914fa1cff61}", IEnrouteOptions)
agcls.AgTypeNameMap["IEnrouteOptions"] = IEnrouteOptions

class IEnrouteAndDelayOptions(object):
    """Interface used to access the Enroute options for an Aviator procedure."""
    _uuid = "{cabcbefb-211d-4657-a9eb-fec703b42b11}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDelayEnrouteClimbDescents"] = _raise_uninitialized_error
        self.__dict__["_SetDelayEnrouteClimbDescents"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxSpeedTurns"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxSpeedTurns"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTurnRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTurnRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IEnrouteAndDelayOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IEnrouteAndDelayOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IEnrouteAndDelayOptions = agcom.GUID(IEnrouteAndDelayOptions._uuid)
        vtable_offset_local = IEnrouteAndDelayOptions._vtable_offset - 1
        self.__dict__["_GetDelayEnrouteClimbDescents"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDelayEnrouteClimbDescents"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxSpeedTurns"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxSpeedTurns"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IEnrouteAndDelayOptions, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IEnrouteAndDelayOptions.__dict__ and type(IEnrouteAndDelayOptions.__dict__[attrname]) == property:
            return IEnrouteAndDelayOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IEnrouteAndDelayOptions.")
    
    @property
    def DelayEnrouteClimbDescents(self) -> bool:
        """Opt whether to delay the enroute climb or descent."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelayEnrouteClimbDescents"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelayEnrouteClimbDescents.setter
    def DelayEnrouteClimbDescents(self, newVal:bool) -> None:
        """Opt whether to delay the enroute climb or descent."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelayEnrouteClimbDescents"](arg_newVal.COM_val))

    @property
    def UseMaxSpeedTurns(self) -> bool:
        """Opt whether to use the max speed turns."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxSpeedTurns"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxSpeedTurns.setter
    def UseMaxSpeedTurns(self, newVal:bool) -> None:
        """Opt whether to use the max speed turns."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxSpeedTurns"](arg_newVal.COM_val))

    @property
    def MaxTurnRadiusFactor(self) -> float:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTurnRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTurnRadiusFactor.setter
    def MaxTurnRadiusFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTurnRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{cabcbefb-211d-4657-a9eb-fec703b42b11}", IEnrouteAndDelayOptions)
agcls.AgTypeNameMap["IEnrouteAndDelayOptions"] = IEnrouteAndDelayOptions

class IEnrouteTurnDirectionOptions(object):
    """Interface used to access the Enroute Turn Direction options for an Aviator procedure."""
    _uuid = "{cfb34c54-d768-42f8-a7bc-1a079bdea24e}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnrouteFirstTurn"] = _raise_uninitialized_error
        self.__dict__["_SetEnrouteFirstTurn"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteSecondTurn"] = _raise_uninitialized_error
        self.__dict__["_SetEnrouteSecondTurn"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IEnrouteTurnDirectionOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IEnrouteTurnDirectionOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IEnrouteTurnDirectionOptions = agcom.GUID(IEnrouteTurnDirectionOptions._uuid)
        vtable_offset_local = IEnrouteTurnDirectionOptions._vtable_offset - 1
        self.__dict__["_GetEnrouteFirstTurn"] = IAGFUNCTYPE(pUnk, IID_IEnrouteTurnDirectionOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetEnrouteFirstTurn"] = IAGFUNCTYPE(pUnk, IID_IEnrouteTurnDirectionOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetEnrouteSecondTurn"] = IAGFUNCTYPE(pUnk, IID_IEnrouteTurnDirectionOptions, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetEnrouteSecondTurn"] = IAGFUNCTYPE(pUnk, IID_IEnrouteTurnDirectionOptions, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IEnrouteTurnDirectionOptions.__dict__ and type(IEnrouteTurnDirectionOptions.__dict__[attrname]) == property:
            return IEnrouteTurnDirectionOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IEnrouteTurnDirectionOptions.")
    
    @property
    def EnrouteFirstTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the first turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteFirstTurn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnrouteFirstTurn.setter
    def EnrouteFirstTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the first turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnrouteFirstTurn"](arg_newVal.COM_val))

    @property
    def EnrouteSecondTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """Option for the second turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteSecondTurn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnrouteSecondTurn.setter
    def EnrouteSecondTurn(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """Option for the second turn."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnrouteSecondTurn"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{cfb34c54-d768-42f8-a7bc-1a079bdea24e}", IEnrouteTurnDirectionOptions)
agcls.AgTypeNameMap["IEnrouteTurnDirectionOptions"] = IEnrouteTurnDirectionOptions

class ICruiseAirspeedOptions(object):
    """Interface used to access the Cruise Airspeed options for an Aviator procedure."""
    _uuid = "{8c88b752-5739-4244-9db7-9fd404b3c0c6}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCruiseSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetCruiseSpeedType"] = _raise_uninitialized_error
        self.__dict__["_GetOtherAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetOtherAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetOtherAirspeed"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICruiseAirspeedOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICruiseAirspeedOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICruiseAirspeedOptions = agcom.GUID(ICruiseAirspeedOptions._uuid)
        vtable_offset_local = ICruiseAirspeedOptions._vtable_offset - 1
        self.__dict__["_GetCruiseSpeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetCruiseSpeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetOtherAirspeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedOptions, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetOtherAirspeed"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedOptions, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOtherAirspeed"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedOptions, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICruiseAirspeedOptions.__dict__ and type(ICruiseAirspeedOptions.__dict__[attrname]) == property:
            return ICruiseAirspeedOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICruiseAirspeedOptions.")
    
    @property
    def CruiseSpeedType(self) -> "AgEAvtrCruiseSpeed":
        """The method for determining the aircraft's airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CruiseSpeedType.setter
    def CruiseSpeedType(self, newVal:"AgEAvtrCruiseSpeed") -> None:
        """The method for determining the aircraft's airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCruiseSpeedType"](arg_newVal.COM_val))

    @property
    def OtherAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the other airspeed option."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OtherAirspeed(self) -> float:
        """The airspeed for the other airspeed option."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetOtherAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the cruise airspeed. This option is only enabled if the cruise speed type is set to other."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetOtherAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8c88b752-5739-4244-9db7-9fd404b3c0c6}", ICruiseAirspeedOptions)
agcls.AgTypeNameMap["ICruiseAirspeedOptions"] = ICruiseAirspeedOptions

class ICruiseAirspeedProfile(object):
    """Interface used to access the Cruise Profile options for an Aviator procedure"""
    _uuid = "{fc8fb409-7067-4474-9c5e-4a77ac894426}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICruiseAirspeedProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICruiseAirspeedProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICruiseAirspeedProfile = agcom.GUID(ICruiseAirspeedProfile._uuid)
        vtable_offset_local = ICruiseAirspeedProfile._vtable_offset - 1
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedProfile, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedProfile, vtable_offset_local+2, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICruiseAirspeedProfile.__dict__ and type(ICruiseAirspeedProfile.__dict__[attrname]) == property:
            return ICruiseAirspeedProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICruiseAirspeedProfile.")
    
    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyCruiseAirspeedProfile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, newVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyCruiseAirspeedProfile"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fc8fb409-7067-4474-9c5e-4a77ac894426}", ICruiseAirspeedProfile)
agcls.AgTypeNameMap["ICruiseAirspeedProfile"] = ICruiseAirspeedProfile

class ICruiseAirspeedAndProfileOptions(object):
    """Interface used to access the cruise airspeed options that also include a profile field."""
    _uuid = "{639730b3-bc2b-4615-afd6-8184af1fb948}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCruiseSpeedType"] = _raise_uninitialized_error
        self.__dict__["_SetCruiseSpeedType"] = _raise_uninitialized_error
        self.__dict__["_GetOtherAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetOtherAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetOtherAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ICruiseAirspeedAndProfileOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ICruiseAirspeedAndProfileOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ICruiseAirspeedAndProfileOptions = agcom.GUID(ICruiseAirspeedAndProfileOptions._uuid)
        vtable_offset_local = ICruiseAirspeedAndProfileOptions._vtable_offset - 1
        self.__dict__["_GetCruiseSpeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetCruiseSpeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetOtherAirspeedType"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetOtherAirspeed"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOtherAirspeed"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_ICruiseAirspeedAndProfileOptions, vtable_offset_local+7, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ICruiseAirspeedAndProfileOptions.__dict__ and type(ICruiseAirspeedAndProfileOptions.__dict__[attrname]) == property:
            return ICruiseAirspeedAndProfileOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ICruiseAirspeedAndProfileOptions.")
    
    @property
    def CruiseSpeedType(self) -> "AgEAvtrCruiseSpeed":
        """The method for determining the aircraft's airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseSpeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CruiseSpeedType.setter
    def CruiseSpeedType(self, newVal:"AgEAvtrCruiseSpeed") -> None:
        """The method for determining the aircraft's airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrCruiseSpeed, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCruiseSpeedType"](arg_newVal.COM_val))

    @property
    def OtherAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the other airspeed option."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OtherAirspeed(self) -> float:
        """The airspeed for the other airspeed option."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetOtherAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the cruise airspeed. This option is only enabled if the cruise speed type is set to other."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetOtherAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyCruiseAirspeedProfile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, newVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyCruiseAirspeedProfile"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{639730b3-bc2b-4615-afd6-8184af1fb948}", ICruiseAirspeedAndProfileOptions)
agcls.AgTypeNameMap["ICruiseAirspeedAndProfileOptions"] = ICruiseAirspeedAndProfileOptions

class IAutomationStrategyFactory(object):
    """Interface used to send connect commands to Aviator objects."""
    _uuid = "{310e51d5-81bf-4fc5-8260-b2eb2de0e1ed}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ConstructStrategy"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAutomationStrategyFactory._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAutomationStrategyFactory from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAutomationStrategyFactory = agcom.GUID(IAutomationStrategyFactory._uuid)
        vtable_offset_local = IAutomationStrategyFactory._vtable_offset - 1
        self.__dict__["_ConstructStrategy"] = IAGFUNCTYPE(pUnk, IID_IAutomationStrategyFactory, vtable_offset_local+1, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAutomationStrategyFactory.__dict__ and type(IAutomationStrategyFactory.__dict__[attrname]) == property:
            return IAutomationStrategyFactory.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAutomationStrategyFactory.")
    
    def ConstructStrategy(self, pUnk:"IUnknown") -> "IBasicManeuverStrategy":
        """Construct the strategy."""
        with agmarshall.AgInterface_in_arg(pUnk, IUnknown) as arg_pUnk, \
             agmarshall.AgInterface_out_arg() as arg_ppBasicManeuverStrategy:
            agcls.evaluate_hresult(self.__dict__["_ConstructStrategy"](arg_pUnk.COM_val, byref(arg_ppBasicManeuverStrategy.COM_val)))
            return arg_ppBasicManeuverStrategy.python_val


agcls.AgClassCatalog.add_catalog_entry("{310e51d5-81bf-4fc5-8260-b2eb2de0e1ed}", IAutomationStrategyFactory)
agcls.AgTypeNameMap["IAutomationStrategyFactory"] = IAutomationStrategyFactory

class IConnect(object):
    """Interface used to send connect commands to Aviator objects."""
    _uuid = "{beb8d5ff-ae82-49d9-bff6-aa88fa3125ed}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_ExecuteCommand"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IConnect._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IConnect from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IConnect = agcom.GUID(IConnect._uuid)
        vtable_offset_local = IConnect._vtable_offset - 1
        self.__dict__["_ExecuteCommand"] = IAGFUNCTYPE(pUnk, IID_IConnect, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IConnect.__dict__ and type(IConnect.__dict__[attrname]) == property:
            return IConnect.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IConnect.")
    
    def ExecuteCommand(self, command:str) -> typing.Any:
        """Send a connect command to an Aviator object."""
        with agmarshall.BSTR_arg(command) as arg_command, \
             agmarshall.AgInterface_out_arg() as arg_ppExecCmdRes:
            agcls.evaluate_hresult(self.__dict__["_ExecuteCommand"](arg_command.COM_val, byref(arg_ppExecCmdRes.COM_val)))
            return arg_ppExecCmdRes.python_val


agcls.AgClassCatalog.add_catalog_entry("{beb8d5ff-ae82-49d9-bff6-aa88fa3125ed}", IConnect)
agcls.AgTypeNameMap["IConnect"] = IConnect

class IRunwayHeadingOptions(object):
    """Interface for the Runway Heading Options found in a Takeoff or Landing procedure."""
    _uuid = "{8e456b0d-eb7a-423c-acc3-467bc13b6375}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRunwayMode"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayMode"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRunwayHeadingOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRunwayHeadingOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRunwayHeadingOptions = agcom.GUID(IRunwayHeadingOptions._uuid)
        vtable_offset_local = IRunwayHeadingOptions._vtable_offset - 1
        self.__dict__["_GetRunwayMode"] = IAGFUNCTYPE(pUnk, IID_IRunwayHeadingOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetRunwayMode"] = IAGFUNCTYPE(pUnk, IID_IRunwayHeadingOptions, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRunwayHeadingOptions.__dict__ and type(IRunwayHeadingOptions.__dict__[attrname]) == property:
            return IRunwayHeadingOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRunwayHeadingOptions.")
    
    @property
    def RunwayMode(self) -> "AgEAvtrRunwayHighLowEnd":
        """The runway heading that the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrRunwayHighLowEnd) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RunwayMode.setter
    def RunwayMode(self, newVal:"AgEAvtrRunwayHighLowEnd") -> None:
        """The runway heading that the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrRunwayHighLowEnd, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayMode"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8e456b0d-eb7a-423c-acc3-467bc13b6375}", IRunwayHeadingOptions)
agcls.AgTypeNameMap["IRunwayHeadingOptions"] = IRunwayHeadingOptions

class IProcedure(object):
    """Interface used to access the options for a procedure. Use this interface to get the Site and Get the time options for the current procedure."""
    _uuid = "{df1aaedb-6f1c-4a50-9fdb-9fda3d56d3db}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetSite"] = _raise_uninitialized_error
        self.__dict__["_GetTimeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetWindModel"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosphereModel"] = _raise_uninitialized_error
        self.__dict__["_GetCalculationOptions"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpIsSupported"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpProperties"] = _raise_uninitialized_error
        self.__dict__["_GetFastTimeOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedure = agcom.GUID(IProcedure._uuid)
        vtable_offset_local = IProcedure._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSite"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetWindModel"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetAtmosphereModel"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetCalculationOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetRefuelDumpIsSupported"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRefuelDumpProperties"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetFastTimeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedure, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedure.__dict__ and type(IProcedure.__dict__[attrname]) == property:
            return IProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedure.")
    
    @property
    def Name(self) -> str:
        """The name of the procedure."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the procedure."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def Site(self) -> "ISite":
        """Get the site of the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val

    @property
    def TimeOptions(self) -> "IProcedureTimeOptions":
        """Get the time options for the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppTimeOptions:
            agcls.evaluate_hresult(self.__dict__["_GetTimeOptions"](byref(arg_ppTimeOptions.COM_val)))
            return arg_ppTimeOptions.python_val

    @property
    def WindModel(self) -> "IWindModel":
        """Get the wind model for the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppWindModel:
            agcls.evaluate_hresult(self.__dict__["_GetWindModel"](byref(arg_ppWindModel.COM_val)))
            return arg_ppWindModel.python_val

    @property
    def AtmosphereModel(self) -> "IAtmosphereModel":
        """Get the mission atmosphere model."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrAtmos:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosphereModel"](byref(arg_ppAvtrAtmos.COM_val)))
            return arg_ppAvtrAtmos.python_val

    @property
    def CalculationOptions(self) -> "ICalculationOptions":
        """Get the calculation options for the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrCalcOptions:
            agcls.evaluate_hresult(self.__dict__["_GetCalculationOptions"](byref(arg_ppAvtrCalcOptions.COM_val)))
            return arg_ppAvtrCalcOptions.python_val

    @property
    def RefuelDumpIsSupported(self) -> bool:
        """Refuel/dump is supported for the current procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRefuelDumpIsSupported:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpIsSupported"](byref(arg_pRefuelDumpIsSupported.COM_val)))
            return arg_pRefuelDumpIsSupported.python_val

    @property
    def RefuelDumpProperties(self) -> "IRefuelDumpProperties":
        """Get the refuel/dump properties for the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrRefuelDumpProperties:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpProperties"](byref(arg_ppAvtrRefuelDumpProperties.COM_val)))
            return arg_ppAvtrRefuelDumpProperties.python_val

    @property
    def FastTimeOptions(self) -> "IProcedureFastTimeOptions":
        """Get the fast time options (without validation or constraints) for the current procedure."""
        with agmarshall.AgInterface_out_arg() as arg_ppTimeOptions:
            agcls.evaluate_hresult(self.__dict__["_GetFastTimeOptions"](byref(arg_ppTimeOptions.COM_val)))
            return arg_ppTimeOptions.python_val


agcls.AgClassCatalog.add_catalog_entry("{df1aaedb-6f1c-4a50-9fdb-9fda3d56d3db}", IProcedure)
agcls.AgTypeNameMap["IProcedure"] = IProcedure

class IProcedureCollection(object):
    """Interface used to access the collection of procedures for a given phase in a mission. Use this interface to Get, Add, or Remove a procedure."""
    _uuid = "{27c58de8-b8f8-40d6-ae6d-4e31cbbd8a43}"
    _num_methods = 9
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAtIndex"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAtIndex"] = _raise_uninitialized_error
        self.__dict__["_EnableAutoPropagate"] = _raise_uninitialized_error
        self.__dict__["_DisableAutoPropagate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureCollection = agcom.GUID(IProcedureCollection._uuid)
        vtable_offset_local = IProcedureCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+4, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_AddAtIndex"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+5, agcom.LONG, agcom.LONG, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_RemoveAtIndex"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_EnableAutoPropagate"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+8, )
        self.__dict__["_DisableAutoPropagate"] = IAGFUNCTYPE(pUnk, IID_IProcedureCollection, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureCollection.__dict__ and type(IProcedureCollection.__dict__[attrname]) == property:
            return IProcedureCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IProcedure":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IProcedure":
        """Given an index, returns an element in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that can iterate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Add(self, siteType:"AgEAvtrSiteType", procedureType:"AgEAvtrProcedureType") -> "IProcedure":
        """Adds a procedure with the specified site at the end of the current phase."""
        with agmarshall.AgEnum_arg(AgEAvtrSiteType, siteType) as arg_siteType, \
             agmarshall.AgEnum_arg(AgEAvtrProcedureType, procedureType) as arg_procedureType, \
             agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_siteType.COM_val, arg_procedureType.COM_val, byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    def AddAtIndex(self, index:int, siteType:"AgEAvtrSiteType", procedureType:"AgEAvtrProcedureType") -> "IProcedure":
        """Adds a procedure with the specified site at the given index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgEnum_arg(AgEAvtrSiteType, siteType) as arg_siteType, \
             agmarshall.AgEnum_arg(AgEAvtrProcedureType, procedureType) as arg_procedureType, \
             agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_AddAtIndex"](arg_index.COM_val, arg_siteType.COM_val, arg_procedureType.COM_val, byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    def Remove(self, procedure:"IProcedure") -> None:
        """Remove given procedure."""
        with agmarshall.AgInterface_in_arg(procedure, IProcedure) as arg_procedure:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_procedure.COM_val))

    def RemoveAtIndex(self, index:int) -> None:
        """Remove procedure at the given index."""
        with agmarshall.LONG_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAtIndex"](arg_index.COM_val))

    def EnableAutoPropagate(self) -> None:
        """Enable automatically propagating the mission. Aviator will automatically propagate before adding a procedure, ensuring a valid initial state for the new procedure."""
        agcls.evaluate_hresult(self.__dict__["_EnableAutoPropagate"]())

    def DisableAutoPropagate(self) -> None:
        """Disable automatically propagating the mission. Use with caution. Aviator will not automatically propagate before adding new procedures."""
        agcls.evaluate_hresult(self.__dict__["_DisableAutoPropagate"]())

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{27c58de8-b8f8-40d6-ae6d-4e31cbbd8a43}", IProcedureCollection)
agcls.AgTypeNameMap["IProcedureCollection"] = IProcedureCollection

class IPhase(object):
    """Interface used to access the phase options for a mission."""
    _uuid = "{1979f1b5-fe60-464b-af70-eb47fd5c096b}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetProcedures"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetPerformanceModelByType"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultPerfModels"] = _raise_uninitialized_error
        self.__dict__["_CopyPerformanceModels"] = _raise_uninitialized_error
        self.__dict__["_PastePerformanceModels"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPhase._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPhase from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPhase = agcom.GUID(IPhase._uuid)
        vtable_offset_local = IPhase._vtable_offset - 1
        self.__dict__["_GetProcedures"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_GetPerformanceModelByType"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_SetDefaultPerfModels"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+5, )
        self.__dict__["_CopyPerformanceModels"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+6, )
        self.__dict__["_PastePerformanceModels"] = IAGFUNCTYPE(pUnk, IID_IPhase, vtable_offset_local+7, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPhase.__dict__ and type(IPhase.__dict__[attrname]) == property:
            return IPhase.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPhase.")
    
    @property
    def Procedures(self) -> "IProcedureCollection":
        """Returns the procedure collection."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrProcedureCollection:
            agcls.evaluate_hresult(self.__dict__["_GetProcedures"](byref(arg_ppAvtrProcedureCollection.COM_val)))
            return arg_ppAvtrProcedureCollection.python_val

    @property
    def Name(self) -> str:
        """The name of the phase."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        """The name of the phase."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    def GetPerformanceModelByType(self, type:str) -> "IPerformanceModelOptions":
        """Get the active performance model for the given category type."""
        with agmarshall.BSTR_arg(type) as arg_type, \
             agmarshall.AgInterface_out_arg() as arg_ppPerformanceModel:
            agcls.evaluate_hresult(self.__dict__["_GetPerformanceModelByType"](arg_type.COM_val, byref(arg_ppPerformanceModel.COM_val)))
            return arg_ppPerformanceModel.python_val

    def SetDefaultPerfModels(self) -> None:
        """Set the phase to use the default performance models of the aircraft."""
        agcls.evaluate_hresult(self.__dict__["_SetDefaultPerfModels"]())

    def CopyPerformanceModels(self) -> None:
        """Create a copy of the active performance models for the current phase."""
        agcls.evaluate_hresult(self.__dict__["_CopyPerformanceModels"]())

    def PastePerformanceModels(self) -> None:
        """Paste the performance models."""
        agcls.evaluate_hresult(self.__dict__["_PastePerformanceModels"]())


agcls.AgClassCatalog.add_catalog_entry("{1979f1b5-fe60-464b-af70-eb47fd5c096b}", IPhase)
agcls.AgTypeNameMap["IPhase"] = IPhase

class IPhaseCollection(object):
    """Interface used to access the collection of phases for a mission."""
    _uuid = "{d7309dde-9887-48e6-9a10-dfadfaa3c48b}"
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_AddAtIndex"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAtIndex"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPhaseCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPhaseCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPhaseCollection = agcom.GUID(IPhaseCollection._uuid)
        vtable_offset_local = IPhaseCollection._vtable_offset - 1
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+2, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_AddAtIndex"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+5, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_RemoveAtIndex"] = IAGFUNCTYPE(pUnk, IID_IPhaseCollection, vtable_offset_local+7, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPhaseCollection.__dict__ and type(IPhaseCollection.__dict__[attrname]) == property:
            return IPhaseCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPhaseCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IPhase":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    @property
    def Count(self) -> int:
        """Returns the number of elements in a collection."""
        with agmarshall.LONG_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Item(self, index:int) -> "IPhase":
        """Given an index, returns an element in the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Returns an enumerator that can iterate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Add(self) -> "IPhase":
        """Adds a phase at the end of the mission."""
        with agmarshall.AgInterface_out_arg() as arg_ppPhase:
            agcls.evaluate_hresult(self.__dict__["_Add"](byref(arg_ppPhase.COM_val)))
            return arg_ppPhase.python_val

    def AddAtIndex(self, index:int) -> "IPhase":
        """Adds a phase at the given index."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppPhase:
            agcls.evaluate_hresult(self.__dict__["_AddAtIndex"](arg_index.COM_val, byref(arg_ppPhase.COM_val)))
            return arg_ppPhase.python_val

    def Remove(self, phase:"IPhase") -> None:
        """Remove given phase."""
        with agmarshall.AgInterface_in_arg(phase, IPhase) as arg_phase:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_phase.COM_val))

    def RemoveAtIndex(self, index:int) -> None:
        """Remove phase at the given index."""
        with agmarshall.LONG_arg(index) as arg_index:
            agcls.evaluate_hresult(self.__dict__["_RemoveAtIndex"](arg_index.COM_val))

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{d7309dde-9887-48e6-9a10-dfadfaa3c48b}", IPhaseCollection)
agcls.AgTypeNameMap["IPhaseCollection"] = IPhaseCollection

class IMission(object):
    """Interface for the mission of an aircraft using the Aviator propagator."""
    _uuid = "{e4467d52-6a09-47b2-943c-7e24ae375f6b}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPhases"] = _raise_uninitialized_error
        self.__dict__["_GetVehicle"] = _raise_uninitialized_error
        self.__dict__["_SetVehicle"] = _raise_uninitialized_error
        self.__dict__["_GetConfiguration"] = _raise_uninitialized_error
        self.__dict__["_GetWindModel"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosphereModel"] = _raise_uninitialized_error
        self.__dict__["_GetIsValid"] = _raise_uninitialized_error
        self.__dict__["_GetFirstInvalidProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IMission._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IMission from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IMission = agcom.GUID(IMission._uuid)
        vtable_offset_local = IMission._vtable_offset - 1
        self.__dict__["_GetPhases"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetVehicle"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_SetVehicle"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetConfiguration"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetWindModel"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetAtmosphereModel"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetIsValid"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetFirstInvalidProcedure"] = IAGFUNCTYPE(pUnk, IID_IMission, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IMission.__dict__ and type(IMission.__dict__[attrname]) == property:
            return IMission.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IMission.")
    
    @property
    def Phases(self) -> "IPhaseCollection":
        """Get the mission phases."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrPhaseCollection:
            agcls.evaluate_hresult(self.__dict__["_GetPhases"](byref(arg_ppAvtrPhaseCollection.COM_val)))
            return arg_ppAvtrPhaseCollection.python_val

    @property
    def Vehicle(self) -> "IAviatorVehicle":
        """The vehicle used in the mission."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrVehicle:
            agcls.evaluate_hresult(self.__dict__["_GetVehicle"](byref(arg_ppAvtrVehicle.COM_val)))
            return arg_ppAvtrVehicle.python_val

    @Vehicle.setter
    def Vehicle(self, pAvtrVehicle:"IAviatorVehicle") -> None:
        """The vehicle used in the mission."""
        with agmarshall.AgInterface_in_arg(pAvtrVehicle, IAviatorVehicle) as arg_pAvtrVehicle:
            agcls.evaluate_hresult(self.__dict__["_SetVehicle"](arg_pAvtrVehicle.COM_val))

    @property
    def Configuration(self) -> "IConfiguration":
        """The aircraft's configuration for the mission."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrConfig:
            agcls.evaluate_hresult(self.__dict__["_GetConfiguration"](byref(arg_ppAvtrConfig.COM_val)))
            return arg_ppAvtrConfig.python_val

    @property
    def WindModel(self) -> "IWindModel":
        """Get the mission wind model."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrW:
            agcls.evaluate_hresult(self.__dict__["_GetWindModel"](byref(arg_ppAvtrW.COM_val)))
            return arg_ppAvtrW.python_val

    @property
    def AtmosphereModel(self) -> "IAtmosphereModel":
        """Get the mission atmosphere model."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrAtmos:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosphereModel"](byref(arg_ppAvtrAtmos.COM_val)))
            return arg_ppAvtrAtmos.python_val

    @property
    def IsValid(self) -> bool:
        """Check whether the mission is valid. Calling this property will propagate the mission."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsValid"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetFirstInvalidProcedure(self) -> "IProcedure":
        """Get the first invalid procedure in the mission. Calling this method will propagate the mission."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetFirstInvalidProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{e4467d52-6a09-47b2-943c-7e24ae375f6b}", IMission)
agcls.AgTypeNameMap["IMission"] = IMission

class IAviatorPropagator(object):
    """Interface used to access the Aviator interface for an aircraft. Use this interface to get the mission or Aviator catalog."""
    _uuid = "{f7e3993a-52ed-4e91-8655-79063c0a3e94}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAvtrMission"] = _raise_uninitialized_error
        self.__dict__["_Propagate"] = _raise_uninitialized_error
        self.__dict__["_GetAutoRecalculate"] = _raise_uninitialized_error
        self.__dict__["_SetAutoRecalculate"] = _raise_uninitialized_error
        self.__dict__["_GetAvtrCatalog"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAviatorPropagator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAviatorPropagator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAviatorPropagator = agcom.GUID(IAviatorPropagator._uuid)
        vtable_offset_local = IAviatorPropagator._vtable_offset - 1
        self.__dict__["_GetAvtrMission"] = IAGFUNCTYPE(pUnk, IID_IAviatorPropagator, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_Propagate"] = IAGFUNCTYPE(pUnk, IID_IAviatorPropagator, vtable_offset_local+2, )
        self.__dict__["_GetAutoRecalculate"] = IAGFUNCTYPE(pUnk, IID_IAviatorPropagator, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAutoRecalculate"] = IAGFUNCTYPE(pUnk, IID_IAviatorPropagator, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetAvtrCatalog"] = IAGFUNCTYPE(pUnk, IID_IAviatorPropagator, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAviatorPropagator.__dict__ and type(IAviatorPropagator.__dict__[attrname]) == property:
            return IAviatorPropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAviatorPropagator.")
    
    @property
    def AvtrMission(self) -> "IMission":
        """The Aviator mission."""
        with agmarshall.AgInterface_out_arg() as arg_ppAvtrMission:
            agcls.evaluate_hresult(self.__dict__["_GetAvtrMission"](byref(arg_ppAvtrMission.COM_val)))
            return arg_ppAvtrMission.python_val

    def Propagate(self) -> None:
        """Applies All Change."""
        agcls.evaluate_hresult(self.__dict__["_Propagate"]())

    @property
    def AutoRecalculate(self) -> bool:
        """Opt whether to have the propagator auto recalculate."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAutoRecalculate"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AutoRecalculate.setter
    def AutoRecalculate(self, vbAutoRecalc:bool) -> None:
        """Opt whether to have the propagator auto recalculate."""
        with agmarshall.VARIANT_BOOL_arg(vbAutoRecalc) as arg_vbAutoRecalc:
            agcls.evaluate_hresult(self.__dict__["_SetAutoRecalculate"](arg_vbAutoRecalc.COM_val))

    @property
    def AvtrCatalog(self) -> "ICatalog":
        """The Aviator catalog."""
        with agmarshall.AgInterface_out_arg() as arg_ppCatalog:
            agcls.evaluate_hresult(self.__dict__["_GetAvtrCatalog"](byref(arg_ppCatalog.COM_val)))
            return arg_ppCatalog.python_val


agcls.AgClassCatalog.add_catalog_entry("{f7e3993a-52ed-4e91-8655-79063c0a3e94}", IAviatorPropagator)
agcls.AgTypeNameMap["IAviatorPropagator"] = IAviatorPropagator

class IPerformanceModel(object):
    """Interface for a performance model of an Aviator vehicle."""
    _uuid = "{8fb55502-c401-4188-adc9-7a889fdbe996}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPerformanceModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPerformanceModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPerformanceModel = agcom.GUID(IPerformanceModel._uuid)
        vtable_offset_local = IPerformanceModel._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPerformanceModel.__dict__ and type(IPerformanceModel.__dict__[attrname]) == property:
            return IPerformanceModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPerformanceModel.")
    

agcls.AgClassCatalog.add_catalog_entry("{8fb55502-c401-4188-adc9-7a889fdbe996}", IPerformanceModel)
agcls.AgTypeNameMap["IPerformanceModel"] = IPerformanceModel

class IAdvFixedWingGeometry(object):
    """Interface used to access the options for the wing geometry in the advanced fixed wing tool."""
    _uuid = "{d3b3af6e-7b5a-4491-aaca-c05eb901afa0}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingGeometry._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingGeometry from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingGeometry = agcom.GUID(IAdvFixedWingGeometry._uuid)
        vtable_offset_local = IAdvFixedWingGeometry._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingGeometry.__dict__ and type(IAdvFixedWingGeometry.__dict__[attrname]) == property:
            return IAdvFixedWingGeometry.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingGeometry.")
    

agcls.AgClassCatalog.add_catalog_entry("{d3b3af6e-7b5a-4491-aaca-c05eb901afa0}", IAdvFixedWingGeometry)
agcls.AgTypeNameMap["IAdvFixedWingGeometry"] = IAdvFixedWingGeometry

class IAdvFixedWingTurbofanBasicABPowerplant(object):
    """This interface is deprecated. Use IAgAvtrAdvFixedWingTurbofanBasicABProp instead."""
    _uuid = "{9bc7e978-48ec-487d-8460-014c8fe376bd}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTurbofanBasicABPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTurbofanBasicABPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTurbofanBasicABPowerplant = agcom.GUID(IAdvFixedWingTurbofanBasicABPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingTurbofanBasicABPowerplant._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTurbofanBasicABPowerplant.__dict__ and type(IAdvFixedWingTurbofanBasicABPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingTurbofanBasicABPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTurbofanBasicABPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{9bc7e978-48ec-487d-8460-014c8fe376bd}", IAdvFixedWingTurbofanBasicABPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingTurbofanBasicABPowerplant"] = IAdvFixedWingTurbofanBasicABPowerplant

class IAdvFixedWingTurbojetBasicABPowerplant(object):
    """This interface is deprecated. Use IAgAvtrAdvFixedWingTurbojetBasicABProp instead."""
    _uuid = "{552db5f4-fe5d-4709-80b4-7ba074c673ff}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingTurbojetBasicABPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingTurbojetBasicABPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingTurbojetBasicABPowerplant = agcom.GUID(IAdvFixedWingTurbojetBasicABPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingTurbojetBasicABPowerplant._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingTurbojetBasicABPowerplant.__dict__ and type(IAdvFixedWingTurbojetBasicABPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingTurbojetBasicABPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingTurbojetBasicABPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{552db5f4-fe5d-4709-80b4-7ba074c673ff}", IAdvFixedWingTurbojetBasicABPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingTurbojetBasicABPowerplant"] = IAdvFixedWingTurbojetBasicABPowerplant

class IAdvFixedWingPowerplant(object):
    """Interface for a powerplant strategy in the advanced fixed wing tool."""
    _uuid = "{79824361-d702-4f4b-81ac-001876fb51ef}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAdvFixedWingPowerplant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAdvFixedWingPowerplant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAdvFixedWingPowerplant = agcom.GUID(IAdvFixedWingPowerplant._uuid)
        vtable_offset_local = IAdvFixedWingPowerplant._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAdvFixedWingPowerplant.__dict__ and type(IAdvFixedWingPowerplant.__dict__[attrname]) == property:
            return IAdvFixedWingPowerplant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAdvFixedWingPowerplant.")
    

agcls.AgClassCatalog.add_catalog_entry("{79824361-d702-4f4b-81ac-001876fb51ef}", IAdvFixedWingPowerplant)
agcls.AgTypeNameMap["IAdvFixedWingPowerplant"] = IAdvFixedWingPowerplant

class ISiteUnknown(object):
    """Interface of an unknown site."""
    _uuid = "{0921dbaf-ee11-4460-8355-01fc207a6803}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteUnknown._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteUnknown from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteUnknown = agcom.GUID(ISiteUnknown._uuid)
        vtable_offset_local = ISiteUnknown._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteUnknown.__dict__ and type(ISiteUnknown.__dict__[attrname]) == property:
            return ISiteUnknown.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteUnknown.")
    

agcls.AgClassCatalog.add_catalog_entry("{0921dbaf-ee11-4460-8355-01fc207a6803}", ISiteUnknown)
agcls.AgTypeNameMap["ISiteUnknown"] = ISiteUnknown

class IAircraftTerrainFollowModel(object):
    """Interface used to access the options for a TerrainFollow performance model of an aircraft."""
    _uuid = "{34e47cb6-b418-468b-b5bf-df98428b7691}"
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_SetUseAeroPropFuel"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnduranceAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnduranceAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRangeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRangeAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPerfAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxEnduranceFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxEnduranceFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRangeFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRangeFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPerfAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPerfAirspeedFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainWindow"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainWindow"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLoadFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAircraftTerrainFollowModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAircraftTerrainFollowModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAircraftTerrainFollowModel = agcom.GUID(IAircraftTerrainFollowModel._uuid)
        vtable_offset_local = IAircraftTerrainFollowModel._vtable_offset - 1
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAeroPropFuel"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlowByNonStdDensity"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxEnduranceAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxEnduranceAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMaxRangeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRangeAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPerfAirspeed"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMinAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetMaxEnduranceFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxEnduranceFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetMaxRangeFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRangeFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetMaxPerfAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPerfAirspeedFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetMaxPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetTerrainWindow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTerrainWindow"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetMaxLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IAircraftTerrainFollowModel, vtable_offset_local+31, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAircraftTerrainFollowModel.__dict__ and type(IAircraftTerrainFollowModel.__dict__[attrname]) == property:
            return IAircraftTerrainFollowModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAircraftTerrainFollowModel.")
    
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AirspeedType.setter
    def AirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedType"](arg_newVal.COM_val))

    @property
    def UseAeroPropFuel(self) -> bool:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAeroPropFuel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAeroPropFuel.setter
    def UseAeroPropFuel(self, newVal:bool) -> None:
        """Opt to use the fuel flow calculated by the acceleration performance model."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAeroPropFuel"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlowByNonStdDensity(self) -> bool:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlowByNonStdDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlowByNonStdDensity.setter
    def ScaleFuelFlowByNonStdDensity(self, newVal:bool) -> None:
        """Opt to scale the fuel flow by the aircraft's actual altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlowByNonStdDensity"](arg_newVal.COM_val))

    @property
    def MinAirspeed(self) -> float:
        """The minimum airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinAirspeed.setter
    def MinAirspeed(self, newVal:float) -> None:
        """The minimum airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeed"](arg_newVal.COM_val))

    @property
    def MaxEnduranceAirspeed(self) -> float:
        """The airspeed that will provide the maximum flying time for the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnduranceAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnduranceAirspeed.setter
    def MaxEnduranceAirspeed(self, newVal:float) -> None:
        """The airspeed that will provide the maximum flying time for the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnduranceAirspeed"](arg_newVal.COM_val))

    @property
    def MaxRangeAirspeed(self) -> float:
        """The maximum range airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRangeAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRangeAirspeed.setter
    def MaxRangeAirspeed(self, newVal:float) -> None:
        """The maximum range airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRangeAirspeed"](arg_newVal.COM_val))

    @property
    def MaxAirspeed(self) -> float:
        """The maximum airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAirspeed.setter
    def MaxAirspeed(self, newVal:float) -> None:
        """The maximum airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeed"](arg_newVal.COM_val))

    @property
    def MaxPerfAirspeed(self) -> float:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPerfAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPerfAirspeed.setter
    def MaxPerfAirspeed(self, newVal:float) -> None:
        """A custom performance airspeed that can be used to model specific flight conditions."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPerfAirspeed"](arg_newVal.COM_val))

    @property
    def MinAirspeedFuelFlow(self) -> float:
        """The fuel flow for the minimum airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinAirspeedFuelFlow.setter
    def MinAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the minimum airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeedFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxEnduranceFuelFlow(self) -> float:
        """The fuel flow for the maximum endurance airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxEnduranceFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxEnduranceFuelFlow.setter
    def MaxEnduranceFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum endurance airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxEnduranceFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxRangeFuelFlow(self) -> float:
        """The fuel flow for the maximum range airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRangeFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRangeFuelFlow.setter
    def MaxRangeFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum range airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRangeFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAirspeedFuelFlow.setter
    def MaxAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeedFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxPerfAirspeedFuelFlow(self) -> float:
        """The fuel flow for the maximum performance airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPerfAirspeedFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPerfAirspeedFuelFlow.setter
    def MaxPerfAirspeedFuelFlow(self, newVal:float) -> None:
        """The fuel flow for the maximum performance airspeed."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPerfAirspeedFuelFlow"](arg_newVal.COM_val))

    @property
    def MaxPitchAngle(self) -> typing.Any:
        """The maximum pitch angle the aircraft will be allowed to use."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPitchAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPitchAngle.setter
    def MaxPitchAngle(self, newVal:typing.Any) -> None:
        """The maximum pitch angle the aircraft will be allowed to use."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPitchAngle"](arg_newVal.COM_val))

    @property
    def TerrainWindow(self) -> float:
        """The time interval over which terrain points are sampled."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainWindow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TerrainWindow.setter
    def TerrainWindow(self, newVal:float) -> None:
        """The time interval over which terrain points are sampled."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainWindow"](arg_newVal.COM_val))

    @property
    def MaxLoadFactor(self) -> float:
        """The maximum load factor - during straight and level flight - that the aircraft can bear."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{34e47cb6-b418-468b-b5bf-df98428b7691}", IAircraftTerrainFollowModel)
agcls.AgTypeNameMap["IAircraftTerrainFollowModel"] = IAircraftTerrainFollowModel

class IPropulsionThrust(object):
    """Interface used to access airspeed options for basic maneuver strategies."""
    _uuid = "{fea63cff-6fa0-406e-ad12-8b17617cb34d}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseConstantThrust"] = _raise_uninitialized_error
        self.__dict__["_SetUseConstantThrust"] = _raise_uninitialized_error
        self.__dict__["_GetConstantThrust"] = _raise_uninitialized_error
        self.__dict__["_SetConstantThrust"] = _raise_uninitialized_error
        self.__dict__["_GetBoostThrust"] = _raise_uninitialized_error
        self.__dict__["_SetBoostThrust"] = _raise_uninitialized_error
        self.__dict__["_GetBoostThrustTimeLimit"] = _raise_uninitialized_error
        self.__dict__["_SetBoostThrustTimeLimit"] = _raise_uninitialized_error
        self.__dict__["_GetSustainThrust"] = _raise_uninitialized_error
        self.__dict__["_SetSustainThrust"] = _raise_uninitialized_error
        self.__dict__["_GetSustainThrustTimeLimit"] = _raise_uninitialized_error
        self.__dict__["_SetSustainThrustTimeLimit"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeed"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IPropulsionThrust._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IPropulsionThrust from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IPropulsionThrust = agcom.GUID(IPropulsionThrust._uuid)
        vtable_offset_local = IPropulsionThrust._vtable_offset - 1
        self.__dict__["_GetUseConstantThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseConstantThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetConstantThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetConstantThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetBoostThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoostThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetBoostThrustTimeLimit"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoostThrustTimeLimit"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetSustainThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSustainThrust"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetSustainThrustTimeLimit"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSustainThrustTimeLimit"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMinAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_GetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+15, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_GetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IPropulsionThrust, vtable_offset_local+18, agcom.LONG, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IPropulsionThrust.__dict__ and type(IPropulsionThrust.__dict__[attrname]) == property:
            return IPropulsionThrust.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IPropulsionThrust.")
    
    @property
    def UseConstantThrust(self) -> bool:
        """The option to use a constant thrust for a thrust model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseConstantThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseConstantThrust.setter
    def UseConstantThrust(self, newVal:bool) -> None:
        """The option to use a constant thrust for a thrust model."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseConstantThrust"](arg_newVal.COM_val))

    @property
    def ConstantThrust(self) -> float:
        """The constant thrust value for a thrust model set to Constant Thrust mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstantThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConstantThrust.setter
    def ConstantThrust(self, newVal:float) -> None:
        """The constant thrust value for a thrust model set to Constant Thrust mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConstantThrust"](arg_newVal.COM_val))

    @property
    def BoostThrust(self) -> float:
        """The boost thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoostThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BoostThrust.setter
    def BoostThrust(self, newVal:float) -> None:
        """The boost thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBoostThrust"](arg_newVal.COM_val))

    @property
    def BoostThrustTimeLimit(self) -> float:
        """The boost thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoostThrustTimeLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BoostThrustTimeLimit.setter
    def BoostThrustTimeLimit(self, newVal:float) -> None:
        """The boost thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBoostThrustTimeLimit"](arg_newVal.COM_val))

    @property
    def SustainThrust(self) -> float:
        """The sustain thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSustainThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SustainThrust.setter
    def SustainThrust(self, newVal:float) -> None:
        """The sustain thrust value for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSustainThrust"](arg_newVal.COM_val))

    @property
    def SustainThrustTimeLimit(self) -> float:
        """The sustain thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSustainThrustTimeLimit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SustainThrustTimeLimit.setter
    def SustainThrustTimeLimit(self, newVal:float) -> None:
        """The sustain thrust time limit for a thrust model set to Boost/Sustain Thrust mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSustainThrustTimeLimit"](arg_newVal.COM_val))

    @property
    def MinAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The min airspeed type for a thrust model."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MinAirspeed(self) -> float:
        """The min airspeed for a thrust model."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMinAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the min airspeed type and value for a thrust model."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def MaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The max airspeed type for a thrust model."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxAirspeed(self) -> float:
        """The max airspeed for a thrust model."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the max airspeed type and value for a thrust model."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fea63cff-6fa0-406e-ad12-8b17617cb34d}", IPropulsionThrust)
agcls.AgTypeNameMap["IPropulsionThrust"] = IPropulsionThrust

class IBasicManeuverAirspeedOptions(object):
    """Interface used to access airspeed options for basic maneuver strategies."""
    _uuid = "{9c4162c8-e759-4bd7-abfa-05bf5dbe816c}"
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAirspeedMode"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedMode"] = _raise_uninitialized_error
        self.__dict__["_GetMinSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_SetMinSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifiedAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifiedAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifiedAccelDecelMode"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifiedAccelDecelMode"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifiedAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifiedAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifiedAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifiedAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_GetAccelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelG"] = _raise_uninitialized_error
        self.__dict__["_GetDecelG"] = _raise_uninitialized_error
        self.__dict__["_SetDecelG"] = _raise_uninitialized_error
        self.__dict__["_GetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_SetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_GetDecelMode"] = _raise_uninitialized_error
        self.__dict__["_SetDecelMode"] = _raise_uninitialized_error
        self.__dict__["_GetThrottle"] = _raise_uninitialized_error
        self.__dict__["_SetThrottle"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolateInitG"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolateInitG"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolateEndG"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolateEndG"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolateEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolateEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolateStopAtEndTime"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolateStopAtEndTime"] = _raise_uninitialized_error
        self.__dict__["_GetThrust"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverAirspeedOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverAirspeedOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverAirspeedOptions = agcom.GUID(IBasicManeuverAirspeedOptions._uuid)
        vtable_offset_local = IBasicManeuverAirspeedOptions._vtable_offset - 1
        self.__dict__["_GetAirspeedMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeedMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMinSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetMinSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetMaxSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetMaxSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMaintainAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMaintainAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetSpecifiedAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetSpecifiedAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetSpecifiedAccelDecelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetSpecifiedAccelDecelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetSpecifiedAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpecifiedAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetSpecifiedAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSpecifiedAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAccelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDecelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetDecelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetThrottle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetThrottle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetInterpolateInitG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInterpolateInitG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetInterpolateEndG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInterpolateEndG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetInterpolateEndTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInterpolateEndTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetInterpolateStopAtEndTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+33, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInterpolateStopAtEndTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+34, agcom.VARIANT_BOOL)
        self.__dict__["_GetThrust"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverAirspeedOptions, vtable_offset_local+35, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverAirspeedOptions.__dict__ and type(IBasicManeuverAirspeedOptions.__dict__[attrname]) == property:
            return IBasicManeuverAirspeedOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverAirspeedOptions.")
    
    @property
    def AirspeedMode(self) -> "AgEAvtrBasicManeuverAirspeedMode":
        """The active airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAirspeedMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AirspeedMode.setter
    def AirspeedMode(self, newVal:"AgEAvtrBasicManeuverAirspeedMode") -> None:
        """The active airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAirspeedMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedMode"](arg_newVal.COM_val))

    @property
    def MinSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The minimum speed limit type to enforce."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinSpeedLimits"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinSpeedLimits.setter
    def MinSpeedLimits(self, newVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        """The minimum speed limit type to enforce."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinSpeedLimits"](arg_newVal.COM_val))

    @property
    def MaxSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The maximum speed limit type to enforce."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSpeedLimits"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSpeedLimits.setter
    def MaxSpeedLimits(self, newVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        """The maximum speed limit type to enforce."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSpeedLimits"](arg_newVal.COM_val))

    @property
    def MaintainAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type option in the Maintain Current Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaintainAirspeedType.setter
    def MaintainAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type option in the Maintain Current Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainAirspeedType"](arg_newVal.COM_val))

    @property
    def SpecifiedAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type option in the Maintain Specified Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifiedAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifiedAirspeedType.setter
    def SpecifiedAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type option in the Maintain Specified Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifiedAirspeedType"](arg_newVal.COM_val))

    @property
    def SpecifiedAccelDecelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel/decel mode for the Maintain Specified Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifiedAccelDecelMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifiedAccelDecelMode.setter
    def SpecifiedAccelDecelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel/decel mode for the Maintain Specified Airspeed mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifiedAccelDecelMode"](arg_newVal.COM_val))

    @property
    def SpecifiedAirspeed(self) -> float:
        """The airspeed for the Maintain Specified Airspeed mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifiedAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifiedAirspeed.setter
    def SpecifiedAirspeed(self, newVal:float) -> None:
        """The airspeed for the Maintain Specified Airspeed mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifiedAirspeed"](arg_newVal.COM_val))

    @property
    def SpecifiedAccelDecelG(self) -> float:
        """The accel/decel G for the Maintain Specified Airspeed mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifiedAccelDecelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifiedAccelDecelG.setter
    def SpecifiedAccelDecelG(self, newVal:float) -> None:
        """The accel/decel G for the Maintain Specified Airspeed mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifiedAccelDecelG"](arg_newVal.COM_val))

    @property
    def AccelG(self) -> float:
        """The accel G for the Accelerate at mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The accel G for the Accelerate at mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelG"](arg_newVal.COM_val))

    @property
    def DecelG(self) -> float:
        """The decel G for the Decelerate at mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDecelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DecelG.setter
    def DecelG(self, newVal:float) -> None:
        """The decel G for the Decelerate at mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDecelG"](arg_newVal.COM_val))

    @property
    def AccelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel mode for the Accelerate at mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel mode for the Accelerate at mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelMode"](arg_newVal.COM_val))

    @property
    def DecelMode(self) -> "AgEAvtrPerfModelOverride":
        """The accel mode for the Decelerate at mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDecelMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DecelMode.setter
    def DecelMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The accel mode for the Decelerate at mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDecelMode"](arg_newVal.COM_val))

    @property
    def Throttle(self) -> float:
        """The throttle setting for the Accel/Decel using Aero/Propulsion at mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrottle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Throttle.setter
    def Throttle(self, newVal:float) -> None:
        """The throttle setting for the Accel/Decel using Aero/Propulsion at mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrottle"](arg_newVal.COM_val))

    @property
    def InterpolateInitG(self) -> float:
        """The initial G for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolateInitG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolateInitG.setter
    def InterpolateInitG(self, newVal:float) -> None:
        """The initial G for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolateInitG"](arg_newVal.COM_val))

    @property
    def InterpolateEndG(self) -> float:
        """The end G for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolateEndG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolateEndG.setter
    def InterpolateEndG(self, newVal:float) -> None:
        """The end G for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolateEndG"](arg_newVal.COM_val))

    @property
    def InterpolateEndTime(self) -> float:
        """The end time for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolateEndTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolateEndTime.setter
    def InterpolateEndTime(self, newVal:float) -> None:
        """The end time for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolateEndTime"](arg_newVal.COM_val))

    @property
    def InterpolateStopAtEndTime(self) -> bool:
        """The option to stop at the end time for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolateStopAtEndTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolateStopAtEndTime.setter
    def InterpolateStopAtEndTime(self, newVal:bool) -> None:
        """The option to stop at the end time for the Interpolate Accel/Decel over Interval mode."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolateStopAtEndTime"](arg_newVal.COM_val))

    @property
    def Thrust(self) -> "IPropulsionThrust":
        """Get the thrust options for the Specify Thrust mode."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrust"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9c4162c8-e759-4bd7-abfa-05bf5dbe816c}", IBasicManeuverAirspeedOptions)
agcls.AgTypeNameMap["IBasicManeuverAirspeedOptions"] = IBasicManeuverAirspeedOptions

class IBasicManeuverStrategyAileronRoll(object):
    """Interface used to access options for a Aileron Roll Strategy of a Basic Maneuver Procedure."""
    _uuid = "{75e11578-6c8f-4875-8b72-e678d80510d7}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFlightPathOption"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathOption"] = _raise_uninitialized_error
        self.__dict__["_GetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_SetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_GetActiveTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetActiveTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetActiveAngle"] = _raise_uninitialized_error
        self.__dict__["_SetActiveAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRollOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetRollOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyAileronRoll._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyAileronRoll from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyAileronRoll = agcom.GUID(IBasicManeuverStrategyAileronRoll._uuid)
        vtable_offset_local = IBasicManeuverStrategyAileronRoll._vtable_offset - 1
        self.__dict__["_GetFlightPathOption"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetFlightPathOption"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetActiveTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetActiveTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetActiveAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetActiveAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetRollOrientation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetRollOrientation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAileronRoll, vtable_offset_local+15, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyAileronRoll.__dict__ and type(IBasicManeuverStrategyAileronRoll.__dict__[attrname]) == property:
            return IBasicManeuverStrategyAileronRoll.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyAileronRoll.")
    
    @property
    def FlightPathOption(self) -> "AgEAvtrAileronRollFlightPath":
        """The flight path option."""
        with agmarshall.AgEnum_arg(AgEAvtrAileronRollFlightPath) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathOption"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightPathOption.setter
    def FlightPathOption(self, newVal:"AgEAvtrAileronRollFlightPath") -> None:
        """The flight path option."""
        with agmarshall.AgEnum_arg(AgEAvtrAileronRollFlightPath, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathOption"](arg_newVal.COM_val))

    @property
    def ActiveMode(self) -> "AgEAvtrAileronRollMode":
        """The aileron roll mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAileronRollMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrAileronRollMode") -> None:
        """The aileron roll mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAileronRollMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveMode"](arg_newVal.COM_val))

    @property
    def ActiveTurnDirection(self) -> "AgEAvtrRollLeftRight":
        """The roll turn direction for the active roll mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollLeftRight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveTurnDirection.setter
    def ActiveTurnDirection(self, newVal:"AgEAvtrRollLeftRight") -> None:
        """The roll turn direction for the active roll mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollLeftRight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveTurnDirection"](arg_newVal.COM_val))

    @property
    def ActiveAngle(self) -> typing.Any:
        """The roll angle for the active roll mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveAngle.setter
    def ActiveAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the active roll mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveAngle"](arg_newVal.COM_val))

    @property
    def RollOrientation(self) -> "AgEAvtrRollUprightInverted":
        """The orientation to roll to for the roll to orientation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollOrientation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollOrientation.setter
    def RollOrientation(self, newVal:"AgEAvtrRollUprightInverted") -> None:
        """The orientation to roll to for the roll to orientation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollOrientation"](arg_newVal.COM_val))

    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the aileron roll."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the aileron roll."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateMode"](arg_newVal.COM_val))

    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the aileron roll turn. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the aileron roll turn. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideRollRate"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{75e11578-6c8f-4875-8b72-e678d80510d7}", IBasicManeuverStrategyAileronRoll)
agcls.AgTypeNameMap["IBasicManeuverStrategyAileronRoll"] = IBasicManeuverStrategyAileronRoll

class IBasicManeuverStrategyAutopilotNav(object):
    """Interface used to access options for the Autopilot - Horizontal Plane Strategy of a Basic Maneuver Procedure."""
    _uuid = "{80382b4b-412a-4c57-8685-7d88a0100cb6}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_SetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_GetActiveHeadingCourseValue"] = _raise_uninitialized_error
        self.__dict__["_SetActiveHeadingCourseValue"] = _raise_uninitialized_error
        self.__dict__["_GetDampingRatio"] = _raise_uninitialized_error
        self.__dict__["_SetDampingRatio"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyAutopilotNav._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyAutopilotNav from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyAutopilotNav = agcom.GUID(IBasicManeuverStrategyAutopilotNav._uuid)
        vtable_offset_local = IBasicManeuverStrategyAutopilotNav._vtable_offset - 1
        self.__dict__["_GetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetActiveHeadingCourseValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetActiveHeadingCourseValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetDampingRatio"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDampingRatio"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotNav, vtable_offset_local+13, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyAutopilotNav.__dict__ and type(IBasicManeuverStrategyAutopilotNav.__dict__[attrname]) == property:
            return IBasicManeuverStrategyAutopilotNav.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyAutopilotNav.")
    
    @property
    def ActiveMode(self) -> "AgEAvtrAutopilotHorizPlaneMode":
        """The autopilot - horizontal plane mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotHorizPlaneMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrAutopilotHorizPlaneMode") -> None:
        """The autopilot - horizontal plane mode."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotHorizPlaneMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveMode"](arg_newVal.COM_val))

    @property
    def ActiveHeadingCourseValue(self) -> typing.Any:
        """The heading/course angle or rate for the active mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveHeadingCourseValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveHeadingCourseValue.setter
    def ActiveHeadingCourseValue(self, newVal:typing.Any) -> None:
        """The heading/course angle or rate for the active mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveHeadingCourseValue"](arg_newVal.COM_val))

    @property
    def DampingRatio(self) -> float:
        """The damping ratio of the control law."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDampingRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DampingRatio.setter
    def DampingRatio(self, newVal:float) -> None:
        """The damping ratio of the control law."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDampingRatio"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{80382b4b-412a-4c57-8685-7d88a0100cb6}", IBasicManeuverStrategyAutopilotNav)
agcls.AgTypeNameMap["IBasicManeuverStrategyAutopilotNav"] = IBasicManeuverStrategyAutopilotNav

class IBasicManeuverStrategyAutopilotProf(object):
    """Interface used to access options for the Autopilot - Vertical Plane Strategy of a Basic Maneuver Procedure."""
    _uuid = "{762406eb-338d-40c1-9ba5-44c38fb65456}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeAltitudeChange"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeAltitudeChange"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetFPA"] = _raise_uninitialized_error
        self.__dict__["_SetFPA"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeControlMode"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeControlMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlAltitudeRateValue"] = _raise_uninitialized_error
        self.__dict__["_SetControlAltitudeRateValue"] = _raise_uninitialized_error
        self.__dict__["_GetControlFPAValue"] = _raise_uninitialized_error
        self.__dict__["_SetControlFPAValue"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPitchRate"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetFlyBallistic"] = _raise_uninitialized_error
        self.__dict__["_SetFlyBallistic"] = _raise_uninitialized_error
        self.__dict__["_GetDampingRatio"] = _raise_uninitialized_error
        self.__dict__["_SetDampingRatio"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyAutopilotProf._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyAutopilotProf from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyAutopilotProf = agcom.GUID(IBasicManeuverStrategyAutopilotProf._uuid)
        vtable_offset_local = IBasicManeuverStrategyAutopilotProf._vtable_offset - 1
        self.__dict__["_GetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetRelativeAltitudeChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelativeAltitudeChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetAltitudeControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetControlAltitudeRateValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlAltitudeRateValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetControlFPAValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetControlFPAValue"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+16, agcom.VARIANT)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetMaxPitchRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+19, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxPitchRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+20, agcom.VARIANT)
        self.__dict__["_GetFlyBallistic"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyBallistic"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+22, agcom.VARIANT_BOOL)
        self.__dict__["_GetDampingRatio"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDampingRatio"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+26, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyAutopilotProf, vtable_offset_local+27, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyAutopilotProf.__dict__ and type(IBasicManeuverStrategyAutopilotProf.__dict__[attrname]) == property:
            return IBasicManeuverStrategyAutopilotProf.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyAutopilotProf.")
    
    @property
    def AltitudeMode(self) -> "AgEAvtrAutopilotAltitudeMode":
        """The altitude mode of the autopilot - vertical plane strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrAutopilotAltitudeMode") -> None:
        """The altitude mode of the autopilot - vertical plane strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeMode"](arg_newVal.COM_val))

    @property
    def AbsoluteAltitude(self) -> float:
        """The absolute altitude for the specify altitude mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AbsoluteAltitude.setter
    def AbsoluteAltitude(self, newVal:float) -> None:
        """The absolute altitude for the specify altitude mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteAltitude"](arg_newVal.COM_val))

    @property
    def RelativeAltitudeChange(self) -> float:
        """The relative altitude change for the specify altitude change mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeAltitudeChange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeAltitudeChange.setter
    def RelativeAltitudeChange(self, newVal:float) -> None:
        """The relative altitude change for the specify altitude change mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeAltitudeChange"](arg_newVal.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The altitude rate for the specify altitude rate mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The altitude rate for the specify altitude rate mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def FPA(self) -> typing.Any:
        """The flight path angle for the specify wind frame flight path angle mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FPA.setter
    def FPA(self, newVal:typing.Any) -> None:
        """The flight path angle for the specify wind frame flight path angle mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFPA"](arg_newVal.COM_val))

    @property
    def AltitudeControlMode(self) -> "AgEAvtrAutopilotAltitudeControlMode":
        """The altitude control mode for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeControlMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeControlMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeControlMode.setter
    def AltitudeControlMode(self, newVal:"AgEAvtrAutopilotAltitudeControlMode") -> None:
        """The altitude control mode for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.AgEnum_arg(AgEAvtrAutopilotAltitudeControlMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeControlMode"](arg_newVal.COM_val))

    @property
    def ControlAltitudeRateValue(self) -> float:
        """The altitude rate control value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlAltitudeRateValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlAltitudeRateValue.setter
    def ControlAltitudeRateValue(self, newVal:float) -> None:
        """The altitude rate control value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlAltitudeRateValue"](arg_newVal.COM_val))

    @property
    def ControlFPAValue(self) -> typing.Any:
        """The control flight path angle value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlFPAValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlFPAValue.setter
    def ControlFPAValue(self, newVal:typing.Any) -> None:
        """The control flight path angle value for the hold initial altitude, specify altitude, and specify altitude change modes."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlFPAValue"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrPerfModelOverride":
        """The control limits mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlLimitMode.setter
    def ControlLimitMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The control limits mode."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimitMode"](arg_newVal.COM_val))

    @property
    def MaxPitchRate(self) -> typing.Any:
        """The max pitch rate for the control limits."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPitchRate.setter
    def MaxPitchRate(self, newVal:typing.Any) -> None:
        """The max pitch rate for the control limits."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPitchRate"](arg_newVal.COM_val))

    @property
    def FlyBallistic(self) -> bool:
        """The option to fly a ballistic trajectory when the performance is insufficient."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyBallistic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyBallistic.setter
    def FlyBallistic(self, newVal:bool) -> None:
        """The option to fly a ballistic trajectory when the performance is insufficient."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyBallistic"](arg_newVal.COM_val))

    @property
    def DampingRatio(self) -> float:
        """The damping ratio of the control law."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDampingRatio"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DampingRatio.setter
    def DampingRatio(self, newVal:float) -> None:
        """The damping ratio of the control law."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDampingRatio"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{762406eb-338d-40c1-9ba5-44c38fb65456}", IBasicManeuverStrategyAutopilotProf)
agcls.AgTypeNameMap["IBasicManeuverStrategyAutopilotProf"] = IBasicManeuverStrategyAutopilotProf

class IBasicManeuverStrategyBarrelRoll(object):
    """Interface used to access options for a Barrel Roll Strategy of a Basic Maneuver Procedure."""
    _uuid = "{7709326e-8835-4118-bf07-714c5983ec58}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetHelixAngle"] = _raise_uninitialized_error
        self.__dict__["_SetHelixAngle"] = _raise_uninitialized_error
        self.__dict__["_GetHelixAngleMode"] = _raise_uninitialized_error
        self.__dict__["_SetHelixAngleMode"] = _raise_uninitialized_error
        self.__dict__["_GetTopLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTopLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetBottomLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetBottomLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetTorsionAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTorsionAngle"] = _raise_uninitialized_error
        self.__dict__["_GetHoldInitTAS"] = _raise_uninitialized_error
        self.__dict__["_SetHoldInitTAS"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetTopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetBottomAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeeds"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyBarrelRoll._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyBarrelRoll from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyBarrelRoll = agcom.GUID(IBasicManeuverStrategyBarrelRoll._uuid)
        vtable_offset_local = IBasicManeuverStrategyBarrelRoll._vtable_offset - 1
        self.__dict__["_GetHelixAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetHelixAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetHelixAngleMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetHelixAngleMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetTopLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTopLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetBottomLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBottomLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetTorsionAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetTorsionAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetHoldInitTAS"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHoldInitTAS"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_GetTopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_GetBottomAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeeds"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBarrelRoll, vtable_offset_local+16, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyBarrelRoll.__dict__ and type(IBasicManeuverStrategyBarrelRoll.__dict__[attrname]) == property:
            return IBasicManeuverStrategyBarrelRoll.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyBarrelRoll.")
    
    @property
    def HelixAngle(self) -> typing.Any:
        """The helix angle for the barrel roll. The angle that the aircraft travels around the velocity vector."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHelixAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HelixAngle.setter
    def HelixAngle(self, newVal:typing.Any) -> None:
        """The helix angle for the barrel roll. The angle that the aircraft travels around the velocity vector."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHelixAngle"](arg_newVal.COM_val))

    @property
    def HelixAngleMode(self) -> "AgEAvtrAngleMode":
        """The helix angle mode for the barrel roll."""
        with agmarshall.AgEnum_arg(AgEAvtrAngleMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHelixAngleMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HelixAngleMode.setter
    def HelixAngleMode(self, newVal:"AgEAvtrAngleMode") -> None:
        """The helix angle mode for the barrel roll."""
        with agmarshall.AgEnum_arg(AgEAvtrAngleMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHelixAngleMode"](arg_newVal.COM_val))

    @property
    def TopLoadFactor(self) -> float:
        """The load factor at the top of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TopLoadFactor.setter
    def TopLoadFactor(self, newVal:float) -> None:
        """The load factor at the top of the loop."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTopLoadFactor"](arg_newVal.COM_val))

    @property
    def BottomLoadFactor(self) -> float:
        """The load factor at the bottom of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BottomLoadFactor.setter
    def BottomLoadFactor(self, newVal:float) -> None:
        """The load factor at the bottom of the loop."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBottomLoadFactor"](arg_newVal.COM_val))

    @property
    def TorsionAngle(self) -> typing.Any:
        """The torsion angle for the barrel roll. The angle of the turn from the aircraft's velocity vector."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTorsionAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TorsionAngle.setter
    def TorsionAngle(self, newVal:typing.Any) -> None:
        """The torsion angle for the barrel roll. The angle of the turn from the aircraft's velocity vector."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTorsionAngle"](arg_newVal.COM_val))

    @property
    def HoldInitTAS(self) -> bool:
        """The option to hold the initial true airspeed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldInitTAS"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoldInitTAS.setter
    def HoldInitTAS(self, newVal:bool) -> None:
        """The option to hold the initial true airspeed."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldInitTAS"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TopAirspeed(self) -> float:
        """The speed at the top of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def BottomAirspeed(self) -> float:
        """The speed at the bottom of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeeds(self, airspeedType:"AgEAvtrAirspeedType", topAirspeed:float, bottomAirspeed:float) -> None:
        """Set the speeds at the top and bottom of the loop."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(topAirspeed) as arg_topAirspeed, \
             agmarshall.DOUBLE_arg(bottomAirspeed) as arg_bottomAirspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeeds"](arg_airspeedType.COM_val, arg_topAirspeed.COM_val, arg_bottomAirspeed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7709326e-8835-4118-bf07-714c5983ec58}", IBasicManeuverStrategyBarrelRoll)
agcls.AgTypeNameMap["IBasicManeuverStrategyBarrelRoll"] = IBasicManeuverStrategyBarrelRoll

class IBasicManeuverStrategyLoop(object):
    """Interface used to access options for a Loop Strategy of a Basic Maneuver Procedure."""
    _uuid = "{812dd3a8-77ec-44eb-8a7d-e51b6e9e4942}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLoopAngle"] = _raise_uninitialized_error
        self.__dict__["_SetLoopAngle"] = _raise_uninitialized_error
        self.__dict__["_GetLoopAngleMode"] = _raise_uninitialized_error
        self.__dict__["_SetLoopAngleMode"] = _raise_uninitialized_error
        self.__dict__["_GetTopLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTopLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetBottomLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetBottomLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetHoldInitTAS"] = _raise_uninitialized_error
        self.__dict__["_SetHoldInitTAS"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetTopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetBottomAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeeds"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyLoop._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyLoop from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyLoop = agcom.GUID(IBasicManeuverStrategyLoop._uuid)
        vtable_offset_local = IBasicManeuverStrategyLoop._vtable_offset - 1
        self.__dict__["_GetLoopAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLoopAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLoopAngleMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetLoopAngleMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetTopLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTopLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetBottomLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBottomLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetHoldInitTAS"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHoldInitTAS"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_GetTopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetBottomAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeeds"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLoop, vtable_offset_local+14, agcom.LONG, agcom.DOUBLE, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyLoop.__dict__ and type(IBasicManeuverStrategyLoop.__dict__[attrname]) == property:
            return IBasicManeuverStrategyLoop.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyLoop.")
    
    @property
    def LoopAngle(self) -> typing.Any:
        """The loop angle for maneuver. The total change in pitch angle the aircraft flies."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoopAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LoopAngle.setter
    def LoopAngle(self, newVal:typing.Any) -> None:
        """The loop angle for maneuver. The total change in pitch angle the aircraft flies."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoopAngle"](arg_newVal.COM_val))

    @property
    def LoopAngleMode(self) -> "AgEAvtrAngleMode":
        """The loop angle mode for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAngleMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoopAngleMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LoopAngleMode.setter
    def LoopAngleMode(self, newVal:"AgEAvtrAngleMode") -> None:
        """The loop angle mode for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAngleMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoopAngleMode"](arg_newVal.COM_val))

    @property
    def TopLoadFactor(self) -> float:
        """The load factor at the top of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TopLoadFactor.setter
    def TopLoadFactor(self, newVal:float) -> None:
        """The load factor at the top of the loop."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTopLoadFactor"](arg_newVal.COM_val))

    @property
    def BottomLoadFactor(self) -> float:
        """The load factor at the bottom of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BottomLoadFactor.setter
    def BottomLoadFactor(self, newVal:float) -> None:
        """The load factor at the bottom of the loop."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBottomLoadFactor"](arg_newVal.COM_val))

    @property
    def HoldInitTAS(self) -> bool:
        """The option to hold the initial true airspeed."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldInitTAS"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoldInitTAS.setter
    def HoldInitTAS(self, newVal:bool) -> None:
        """The option to hold the initial true airspeed."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldInitTAS"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TopAirspeed(self) -> float:
        """The speed at the top of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTopAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def BottomAirspeed(self) -> float:
        """The speed at the bottom of the loop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBottomAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeeds(self, airspeedType:"AgEAvtrAirspeedType", topAirspeed:float, bottomAirspeed:float) -> None:
        """Set the speeds at the top and bottom of the loop."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(topAirspeed) as arg_topAirspeed, \
             agmarshall.DOUBLE_arg(bottomAirspeed) as arg_bottomAirspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeeds"](arg_airspeedType.COM_val, arg_topAirspeed.COM_val, arg_bottomAirspeed.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{812dd3a8-77ec-44eb-8a7d-e51b6e9e4942}", IBasicManeuverStrategyLoop)
agcls.AgTypeNameMap["IBasicManeuverStrategyLoop"] = IBasicManeuverStrategyLoop

class IBasicManeuverStrategyLTAHover(object):
    """Interface used to access options for a Lighter than Air Hover Strategy of a Basic Maneuver Procedure."""
    _uuid = "{d3684b67-cb9c-4b8a-a774-226363c4f090}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeHeading"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeHeading"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteHeading"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteHeading"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeAltitudeChange"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeAltitudeChange"] = _raise_uninitialized_error
        self.__dict__["_GetControlAltRate"] = _raise_uninitialized_error
        self.__dict__["_SetControlAltRate"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetParachuteArea"] = _raise_uninitialized_error
        self.__dict__["_SetParachuteArea"] = _raise_uninitialized_error
        self.__dict__["_GetParachuteCd"] = _raise_uninitialized_error
        self.__dict__["_SetParachuteCd"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyLTAHover._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyLTAHover from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyLTAHover = agcom.GUID(IBasicManeuverStrategyLTAHover._uuid)
        vtable_offset_local = IBasicManeuverStrategyLTAHover._vtable_offset - 1
        self.__dict__["_GetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetRelativeHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetRelativeHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAbsoluteHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetAbsoluteHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetRelativeAltitudeChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelativeAltitudeChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetControlAltRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlAltRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetParachuteArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetParachuteArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetParachuteCd"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetParachuteCd"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyLTAHover, vtable_offset_local+24, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyLTAHover.__dict__ and type(IBasicManeuverStrategyLTAHover.__dict__[attrname]) == property:
            return IBasicManeuverStrategyLTAHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyLTAHover.")
    
    @property
    def HeadingMode(self) -> "AgEAvtrHoverHeadingMode":
        """The heading mode for the lighter than air hover."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverHeadingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrHoverHeadingMode") -> None:
        """The heading mode for the lighter than air hover."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverHeadingMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingMode"](arg_newVal.COM_val))

    @property
    def RelativeHeading(self) -> typing.Any:
        """The relative heading for the relative to start heading mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeHeading.setter
    def RelativeHeading(self, newVal:typing.Any) -> None:
        """The relative heading for the relative to start heading mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeHeading"](arg_newVal.COM_val))

    @property
    def AbsoluteHeading(self) -> typing.Any:
        """The absolute heading for the absolute heading mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AbsoluteHeading.setter
    def AbsoluteHeading(self, newVal:typing.Any) -> None:
        """The absolute heading for the absolute heading mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteHeading"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magentic heading for the absolute heading mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magentic heading for the absolute heading mode."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def HeadingRate(self) -> typing.Any:
        """The maximum heading rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingRate.setter
    def HeadingRate(self, newVal:typing.Any) -> None:
        """The maximum heading rate."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingRate"](arg_newVal.COM_val))

    @property
    def AltitudeMode(self) -> "AgEAvtrHoverAltitudeMode":
        """The altitude mode for the lighter than air hover."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverAltitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrHoverAltitudeMode") -> None:
        """The altitude mode for the lighter than air hover."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverAltitudeMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeMode"](arg_newVal.COM_val))

    @property
    def AbsoluteAltitude(self) -> float:
        """The absolute altitude for the Specify Altitude mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AbsoluteAltitude.setter
    def AbsoluteAltitude(self, newVal:float) -> None:
        """The absolute altitude for the Specify Altitude mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteAltitude"](arg_newVal.COM_val))

    @property
    def RelativeAltitudeChange(self) -> float:
        """The relative altitude change for the Specify Altitude Change mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeAltitudeChange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeAltitudeChange.setter
    def RelativeAltitudeChange(self, newVal:float) -> None:
        """The relative altitude change for the Specify Altitude Change mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeAltitudeChange"](arg_newVal.COM_val))

    @property
    def ControlAltRate(self) -> float:
        """The controlled altitude rate for the Specify Altitude or Specify Altitude Change mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlAltRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlAltRate.setter
    def ControlAltRate(self, newVal:float) -> None:
        """The controlled altitude rate for the Specify Altitude or Specify Altitude Change mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlAltRate"](arg_newVal.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The altitude rate for the Specify Altitude Rate mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The altitude rate for the Specify Altitude Rate mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def ParachuteArea(self) -> float:
        """The parachute area for the Parachute mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParachuteArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParachuteArea.setter
    def ParachuteArea(self, newVal:float) -> None:
        """The parachute area for the Parachute mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetParachuteArea"](arg_newVal.COM_val))

    @property
    def ParachuteCd(self) -> float:
        """The parachute drag coefficient for the Parachute mode."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParachuteCd"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParachuteCd.setter
    def ParachuteCd(self, newVal:float) -> None:
        """The parachute drag coefficient for the Parachute mode."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetParachuteCd"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d3684b67-cb9c-4b8a-a774-226363c4f090}", IBasicManeuverStrategyLTAHover)
agcls.AgTypeNameMap["IBasicManeuverStrategyLTAHover"] = IBasicManeuverStrategyLTAHover

class IBasicManeuverStrategyFlyAOA(object):
    """Interface used to access options for a Fly AOA Strategy of a Basic Maneuver Procedure."""
    _uuid = "{aac777b5-967c-4e54-b09a-2ec30898fc53}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateDot"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateDot"] = _raise_uninitialized_error
        self.__dict__["_GetControlRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetControlRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetStopOnRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStopOnRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAOA"] = _raise_uninitialized_error
        self.__dict__["_SetAOA"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyFlyAOA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyFlyAOA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyFlyAOA = agcom.GUID(IBasicManeuverStrategyFlyAOA._uuid)
        vtable_offset_local = IBasicManeuverStrategyFlyAOA._vtable_offset - 1
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetRollRateDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollRateDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetControlRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetControlRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetStopOnRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopOnRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetAOA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetAOA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+16, agcom.VARIANT)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyFlyAOA, vtable_offset_local+17, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyFlyAOA.__dict__ and type(IBasicManeuverStrategyFlyAOA.__dict__[attrname]) == property:
            return IBasicManeuverStrategyFlyAOA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyFlyAOA.")
    
    @property
    def TurnDirection(self) -> "AgEAvtrFlyAOALeftRight":
        """The roll turn direction for a Fly AOA basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrFlyAOALeftRight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrFlyAOALeftRight") -> None:
        """The roll turn direction for a Fly AOA basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrFlyAOALeftRight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for a Fly AOA basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for a Fly AOA basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateMode"](arg_newVal.COM_val))

    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the Fly AOA basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the Fly AOA basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideRollRate"](arg_newVal.COM_val))

    @property
    def RollRateDot(self) -> typing.Any:
        """The rate of change of the roll rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateDot.setter
    def RollRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the roll rate."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateDot"](arg_newVal.COM_val))

    @property
    def ControlRollAngle(self) -> bool:
        """The option to define a goal value for the aircraft's roll angle."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlRollAngle.setter
    def ControlRollAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's roll angle."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlRollAngle"](arg_newVal.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The goal value for the roll angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The goal value for the roll angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def StopOnRollAngle(self) -> bool:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopOnRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopOnRollAngle.setter
    def StopOnRollAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopOnRollAngle"](arg_newVal.COM_val))

    @property
    def AOA(self) -> typing.Any:
        """The angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The angle of attack."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAOA"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{aac777b5-967c-4e54-b09a-2ec30898fc53}", IBasicManeuverStrategyFlyAOA)
agcls.AgTypeNameMap["IBasicManeuverStrategyFlyAOA"] = IBasicManeuverStrategyFlyAOA

class IBasicManeuverStrategyPull(object):
    """Interface used to access options for a Pull Strategy of a Basic Maneuver Procedure."""
    _uuid = "{53ecb06b-3d2f-4e3b-b179-95686a71c7e1}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_SetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_GetActiveAngle"] = _raise_uninitialized_error
        self.__dict__["_SetActiveAngle"] = _raise_uninitialized_error
        self.__dict__["_GetPullGMode"] = _raise_uninitialized_error
        self.__dict__["_SetPullGMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverridePullG"] = _raise_uninitialized_error
        self.__dict__["_SetOverridePullG"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyPull._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyPull from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyPull = agcom.GUID(IBasicManeuverStrategyPull._uuid)
        vtable_offset_local = IBasicManeuverStrategyPull._vtable_offset - 1
        self.__dict__["_GetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetActiveAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetActiveAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetPullGMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetPullGMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetOverridePullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverridePullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPull, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyPull.__dict__ and type(IBasicManeuverStrategyPull.__dict__[attrname]) == property:
            return IBasicManeuverStrategyPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyPull.")
    
    @property
    def ActiveMode(self) -> "AgEAvtrPullMode":
        """The pull mode for the pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPullMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrPullMode") -> None:
        """The pull mode for the pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPullMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveMode"](arg_newVal.COM_val))

    @property
    def ActiveAngle(self) -> typing.Any:
        """The pull angle for the active mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveAngle.setter
    def ActiveAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the active mode."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveAngle"](arg_newVal.COM_val))

    @property
    def PullGMode(self) -> "AgEAvtrPerfModelOverride":
        """The pull G mode for a pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPullGMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PullGMode.setter
    def PullGMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The pull G mode for a pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPullGMode"](arg_newVal.COM_val))

    @property
    def OverridePullG(self) -> float:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverridePullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverridePullG.setter
    def OverridePullG(self, newVal:float) -> None:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverridePullG"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{53ecb06b-3d2f-4e3b-b179-95686a71c7e1}", IBasicManeuverStrategyPull)
agcls.AgTypeNameMap["IBasicManeuverStrategyPull"] = IBasicManeuverStrategyPull

class IBasicManeuverStrategyRollingPull(object):
    """Interface used to access options for a Rolling Pull Strategy of a Basic Maneuver Procedure."""
    _uuid = "{1481380c-fbad-46f2-bab0-8bba39fb3edc}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_SetActiveMode"] = _raise_uninitialized_error
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetAngle"] = _raise_uninitialized_error
        self.__dict__["_SetAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRollOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetRollOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetPullGMode"] = _raise_uninitialized_error
        self.__dict__["_SetPullGMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverridePullG"] = _raise_uninitialized_error
        self.__dict__["_SetOverridePullG"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRollingPull._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRollingPull from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRollingPull = agcom.GUID(IBasicManeuverStrategyRollingPull._uuid)
        vtable_offset_local = IBasicManeuverStrategyRollingPull._vtable_offset - 1
        self.__dict__["_GetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetActiveMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetRollOrientation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetRollOrientation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetPullGMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetPullGMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetOverridePullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverridePullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRollingPull, vtable_offset_local+17, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRollingPull.__dict__ and type(IBasicManeuverStrategyRollingPull.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRollingPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRollingPull.")
    
    @property
    def ActiveMode(self) -> "AgEAvtrRollingPullMode":
        """The active mode for the rolling pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrRollingPullMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ActiveMode.setter
    def ActiveMode(self, newVal:"AgEAvtrRollingPullMode") -> None:
        """The active mode for the rolling pull basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrRollingPullMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActiveMode"](arg_newVal.COM_val))

    @property
    def TurnDirection(self) -> "AgEAvtrRollLeftRight":
        """The turn direction for the active mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollLeftRight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrRollLeftRight") -> None:
        """The turn direction for the active mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollLeftRight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def Angle(self) -> typing.Any:
        """The angle value for the active mode."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Angle.setter
    def Angle(self, newVal:typing.Any) -> None:
        """The angle value for the active mode"""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAngle"](arg_newVal.COM_val))

    @property
    def RollOrientation(self) -> "AgEAvtrRollUprightInverted":
        """The orientation to roll to for the roll to orientation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollOrientation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollOrientation.setter
    def RollOrientation(self, newVal:"AgEAvtrRollUprightInverted") -> None:
        """The orientation to roll to for the roll to orientation mode."""
        with agmarshall.AgEnum_arg(AgEAvtrRollUprightInverted, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollOrientation"](arg_newVal.COM_val))

    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the rolling pull."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the rolling pull."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateMode"](arg_newVal.COM_val))

    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideRollRate"](arg_newVal.COM_val))

    @property
    def PullGMode(self) -> "AgEAvtrPerfModelOverride":
        """The pull G mode for a rolling pull."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPullGMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PullGMode.setter
    def PullGMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The pull G mode for a rolling pull."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPullGMode"](arg_newVal.COM_val))

    @property
    def OverridePullG(self) -> float:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverridePullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverridePullG.setter
    def OverridePullG(self, newVal:float) -> None:
        """The pull G override value. The pull G mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverridePullG"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1481380c-fbad-46f2-bab0-8bba39fb3edc}", IBasicManeuverStrategyRollingPull)
agcls.AgTypeNameMap["IBasicManeuverStrategyRollingPull"] = IBasicManeuverStrategyRollingPull

class IBasicManeuverStrategySmoothAccel(object):
    """Interface used to access options for a Smooth Accel Strategy of a Basic Maneuver Procedure."""
    _uuid = "{b7dbc9ce-b749-4d60-bea1-d6f88415bc6e}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateDot"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateDot"] = _raise_uninitialized_error
        self.__dict__["_GetControlRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetControlRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetLoadFactorMode"] = _raise_uninitialized_error
        self.__dict__["_SetLoadFactorMode"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetLoadFactorDot"] = _raise_uninitialized_error
        self.__dict__["_SetLoadFactorDot"] = _raise_uninitialized_error
        self.__dict__["_GetControlPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_SetControlPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_GetPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_SetPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_GetStopConditions"] = _raise_uninitialized_error
        self.__dict__["_SetStopConditions"] = _raise_uninitialized_error
        self.__dict__["_GetStopOnRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStopOnRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetStopOnPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStopOnPitchAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategySmoothAccel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategySmoothAccel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategySmoothAccel = agcom.GUID(IBasicManeuverStrategySmoothAccel._uuid)
        vtable_offset_local = IBasicManeuverStrategySmoothAccel._vtable_offset - 1
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetRollRateDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollRateDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetControlRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetControlRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetLoadFactorMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetLoadFactorMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetOverrideLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetLoadFactorDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLoadFactorDot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetControlPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetControlPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_SetPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+22, agcom.VARIANT)
        self.__dict__["_GetStopConditions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetStopConditions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetStopOnRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+25, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopOnRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+26, agcom.VARIANT_BOOL)
        self.__dict__["_GetStopOnPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopOnPitchAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothAccel, vtable_offset_local+29, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategySmoothAccel.__dict__ and type(IBasicManeuverStrategySmoothAccel.__dict__[attrname]) == property:
            return IBasicManeuverStrategySmoothAccel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategySmoothAccel.")
    
    @property
    def TurnDirection(self) -> "AgEAvtrSmoothAccelLeftRight":
        """The roll turn direction for a Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothAccelLeftRight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrSmoothAccelLeftRight") -> None:
        """The roll turn direction for a Smooth Accel  basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothAccelLeftRight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for a Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for a Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateMode"](arg_newVal.COM_val))

    @property
    def OverrideRollRate(self) -> typing.Any:
        """The roll rate override value for the Smooth Accel basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The roll rate override value for the Smooth Accel basic maneuver strategy. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideRollRate"](arg_newVal.COM_val))

    @property
    def RollRateDot(self) -> typing.Any:
        """The rate of change of the roll rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateDot.setter
    def RollRateDot(self, newVal:typing.Any) -> None:
        """The rate of change of the roll rate."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateDot"](arg_newVal.COM_val))

    @property
    def ControlRollAngle(self) -> bool:
        """The option to define a goal value for the aircraft's roll angle."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlRollAngle.setter
    def ControlRollAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's roll angle."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlRollAngle"](arg_newVal.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The goal value for the roll angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The goal value for the roll angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def LoadFactorMode(self) -> "AgEAvtrPerfModelOverride":
        """The load factor mode for the Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoadFactorMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LoadFactorMode.setter
    def LoadFactorMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The load factormode for the Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoadFactorMode"](arg_newVal.COM_val))

    @property
    def OverrideLoadFactor(self) -> float:
        """The load factor override value for the smooth accel. The load factor mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideLoadFactor.setter
    def OverrideLoadFactor(self, newVal:float) -> None:
        """The load factor override value for the smooth accel. The load factor mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideLoadFactor"](arg_newVal.COM_val))

    @property
    def LoadFactorDot(self) -> float:
        """The rate of change of the load factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoadFactorDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LoadFactorDot.setter
    def LoadFactorDot(self, newVal:float) -> None:
        """The rate of change of the load factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoadFactorDot"](arg_newVal.COM_val))

    @property
    def ControlPitchAngle(self) -> bool:
        """The option to define a goal value for the aircraft's pitch angle."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlPitchAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlPitchAngle.setter
    def ControlPitchAngle(self, newVal:bool) -> None:
        """The option to define a goal value for the aircraft's pitch angle."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlPitchAngle"](arg_newVal.COM_val))

    @property
    def PitchAngle(self) -> typing.Any:
        """The goal value for the pitch angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PitchAngle.setter
    def PitchAngle(self, newVal:typing.Any) -> None:
        """The goal value for the pitch angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPitchAngle"](arg_newVal.COM_val))

    @property
    def StopConditions(self) -> "AgEAvtrSmoothAccelStopConditions":
        """The stop condition for the Smooth Accel basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothAccelStopConditions) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopConditions.setter
    def StopConditions(self, newVal:"AgEAvtrSmoothAccelStopConditions") -> None:
        """The stop condition for the Smooth Accel  basic maneuver strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothAccelStopConditions, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopConditions"](arg_newVal.COM_val))

    @property
    def StopOnRollAngle(self) -> bool:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopOnRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopOnRollAngle.setter
    def StopOnRollAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified roll angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopOnRollAngle"](arg_newVal.COM_val))

    @property
    def StopOnPitchAngle(self) -> bool:
        """The option to stop the maneuver if the specified pitch angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopOnPitchAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopOnPitchAngle.setter
    def StopOnPitchAngle(self, newVal:bool) -> None:
        """The option to stop the maneuver if the specified pitch angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopOnPitchAngle"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{b7dbc9ce-b749-4d60-bea1-d6f88415bc6e}", IBasicManeuverStrategySmoothAccel)
agcls.AgTypeNameMap["IBasicManeuverStrategySmoothAccel"] = IBasicManeuverStrategySmoothAccel

class IBasicManeuverStrategySmoothTurn(object):
    """Interface used to access options for a Smooth Turn Strategy of a Basic Maneuver Procedure."""
    _uuid = "{888b4f4a-ffe2-4c3b-a8b0-5cdd45e4adcd}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetHeadingChange"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingChange"] = _raise_uninitialized_error
        self.__dict__["_GetTurnMode"] = _raise_uninitialized_error
        self.__dict__["_SetTurnMode"] = _raise_uninitialized_error
        self.__dict__["_GetLoadFactorMode"] = _raise_uninitialized_error
        self.__dict__["_SetLoadFactorMode"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLoadFactorRate"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLoadFactorRate"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideLoadFactor"] = _raise_uninitialized_error
        self.__dict__["_GetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_SetRollRateMode"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideRollRate"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetFPAMode"] = _raise_uninitialized_error
        self.__dict__["_SetFPAMode"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategySmoothTurn._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategySmoothTurn from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategySmoothTurn = agcom.GUID(IBasicManeuverStrategySmoothTurn._uuid)
        vtable_offset_local = IBasicManeuverStrategySmoothTurn._vtable_offset - 1
        self.__dict__["_GetHeadingChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeadingChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetTurnMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetTurnMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetLoadFactorMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetLoadFactorMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMaxLoadFactorRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLoadFactorRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetOverrideLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideLoadFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetRollRateMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetOverrideRollRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+16, agcom.VARIANT)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetFPAMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetFPAMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySmoothTurn, vtable_offset_local+19, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategySmoothTurn.__dict__ and type(IBasicManeuverStrategySmoothTurn.__dict__[attrname]) == property:
            return IBasicManeuverStrategySmoothTurn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategySmoothTurn.")
    
    @property
    def HeadingChange(self) -> typing.Any:
        """The heading change for the smooth turn."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingChange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingChange.setter
    def HeadingChange(self, newVal:typing.Any) -> None:
        """The heading change for the smooth turn."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingChange"](arg_newVal.COM_val))

    @property
    def TurnMode(self) -> "AgEAvtrSmoothTurnMode":
        """The turn mode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothTurnMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnMode.setter
    def TurnMode(self, newVal:"AgEAvtrSmoothTurnMode") -> None:
        """The turn mode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothTurnMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnMode"](arg_newVal.COM_val))

    @property
    def LoadFactorMode(self) -> "AgEAvtrPerfModelOverride":
        """The load factor mode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoadFactorMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LoadFactorMode.setter
    def LoadFactorMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The load factormode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoadFactorMode"](arg_newVal.COM_val))

    @property
    def MaxLoadFactorRate(self) -> float:
        """The max load factor rate for the smooth turn."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactorRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLoadFactorRate.setter
    def MaxLoadFactorRate(self, newVal:float) -> None:
        """The max load factor rate for the smooth turn."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLoadFactorRate"](arg_newVal.COM_val))

    @property
    def OverrideLoadFactor(self) -> float:
        """The max load factor override value for the smooth turn. The load factor mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideLoadFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideLoadFactor.setter
    def OverrideLoadFactor(self, newVal:float) -> None:
        """The max load factor override value for the smooth turn. The load factor mode must be set to override to access this property."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideLoadFactor"](arg_newVal.COM_val))

    @property
    def RollRateMode(self) -> "AgEAvtrPerfModelOverride":
        """The roll rate mode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollRateMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollRateMode.setter
    def RollRateMode(self, newVal:"AgEAvtrPerfModelOverride") -> None:
        """The roll rate mode for the smooth turn."""
        with agmarshall.AgEnum_arg(AgEAvtrPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollRateMode"](arg_newVal.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The roll angle for the smooth turn."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The roll angle for the smooth turn."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def OverrideRollRate(self) -> typing.Any:
        """The max roll rate override value for the smooth turn. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideRollRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideRollRate.setter
    def OverrideRollRate(self, newVal:typing.Any) -> None:
        """The max roll rate override value for the smooth turn. The roll rate mode must be set to override to access this property."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideRollRate"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FPAMode(self) -> "AgEAvtrSmoothTurnFPAMode":
        """The flight path angle mode."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothTurnFPAMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFPAMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FPAMode.setter
    def FPAMode(self, newVal:"AgEAvtrSmoothTurnFPAMode") -> None:
        """The flight path angle mode."""
        with agmarshall.AgEnum_arg(AgEAvtrSmoothTurnFPAMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFPAMode"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{888b4f4a-ffe2-4c3b-a8b0-5cdd45e4adcd}", IBasicManeuverStrategySmoothTurn)
agcls.AgTypeNameMap["IBasicManeuverStrategySmoothTurn"] = IBasicManeuverStrategySmoothTurn

class IBasicManeuverStrategySimpleTurn(object):
    """Interface used to access options for a Simple Turn Strategy of a Basic Maneuver Procedure."""
    _uuid = "{3bae3110-3f6a-4c3d-914d-8592f3886f66}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetTurnAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTurnAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTurnRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTurnRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategySimpleTurn._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategySimpleTurn from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategySimpleTurn = agcom.GUID(IBasicManeuverStrategySimpleTurn._uuid)
        vtable_offset_local = IBasicManeuverStrategySimpleTurn._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetTurnAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetTurnAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategySimpleTurn, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategySimpleTurn.__dict__ and type(IBasicManeuverStrategySimpleTurn.__dict__[attrname]) == property:
            return IBasicManeuverStrategySimpleTurn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategySimpleTurn.")
    
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame for the simple turn."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, inVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame for the simple turn."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_inVal.COM_val))

    @property
    def TurnAngle(self) -> typing.Any:
        """The turn angle for the simple turn."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnAngle.setter
    def TurnAngle(self, newVal:typing.Any) -> None:
        """The turn angle for the simple turn."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnAngle"](arg_newVal.COM_val))

    @property
    def TurnRadiusFactor(self) -> float:
        """The turn radius factor for the simple turn."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnRadiusFactor.setter
    def TurnRadiusFactor(self, newVal:float) -> None:
        """The turn radius factor for the simple turn."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnRadiusFactor"](arg_newVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3bae3110-3f6a-4c3d-914d-8592f3886f66}", IBasicManeuverStrategySimpleTurn)
agcls.AgTypeNameMap["IBasicManeuverStrategySimpleTurn"] = IBasicManeuverStrategySimpleTurn

class IBasicManeuverStrategyIntercept(object):
    """Interface used to access options for an Intercept Strategy of a Basic Maneuver Procedure."""
    _uuid = "{ab1da5c8-fd9b-49bc-adfd-69754a5376f5}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopTimeToGo"] = _raise_uninitialized_error
        self.__dict__["_GetStopTimeToGo"] = _raise_uninitialized_error
        self.__dict__["_SetStopTimeToGo"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopSlantRange"] = _raise_uninitialized_error
        self.__dict__["_GetStopSlantRange"] = _raise_uninitialized_error
        self.__dict__["_SetStopSlantRange"] = _raise_uninitialized_error
        self.__dict__["_GetInterceptMode"] = _raise_uninitialized_error
        self.__dict__["_SetInterceptMode"] = _raise_uninitialized_error
        self.__dict__["_GetTargetAspect"] = _raise_uninitialized_error
        self.__dict__["_SetTargetAspect"] = _raise_uninitialized_error
        self.__dict__["_GetLateralSeparation"] = _raise_uninitialized_error
        self.__dict__["_SetLateralSeparation"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetClosureMode"] = _raise_uninitialized_error
        self.__dict__["_SetClosureMode"] = _raise_uninitialized_error
        self.__dict__["_GetHOBSMaxAngle"] = _raise_uninitialized_error
        self.__dict__["_SetHOBSMaxAngle"] = _raise_uninitialized_error
        self.__dict__["_GetHOBSAngleTol"] = _raise_uninitialized_error
        self.__dict__["_SetHOBSAngleTol"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyIntercept._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyIntercept from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyIntercept = agcom.GUID(IBasicManeuverStrategyIntercept._uuid)
        vtable_offset_local = IBasicManeuverStrategyIntercept._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetUseStopTimeToGo"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopTimeToGo"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopTimeToGo"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+8, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetUseStopSlantRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopSlantRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopSlantRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+11, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetInterceptMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetInterceptMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetTargetAspect"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetTargetAspect"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+15, agcom.VARIANT)
        self.__dict__["_GetLateralSeparation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLateralSeparation"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+22, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+24, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetClosureMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+25, POINTER(agcom.LONG))
        self.__dict__["_SetClosureMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+26, agcom.LONG)
        self.__dict__["_GetHOBSMaxAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetHOBSMaxAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetHOBSAngleTol"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+29, POINTER(agcom.VARIANT))
        self.__dict__["_SetHOBSAngleTol"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+30, agcom.VARIANT)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyIntercept, vtable_offset_local+32, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyIntercept.__dict__ and type(IBasicManeuverStrategyIntercept.__dict__[attrname]) == property:
            return IBasicManeuverStrategyIntercept.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyIntercept.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def UseStopTimeToGo(self) -> bool:
        """The option to specify a time to go stopping condition."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopTimeToGo"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopTimeToGo(self) -> float:
        """The stop time from the target at which the maneuver will stop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopTimeToGo"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopTimeToGo(self, enable:bool, time:float) -> None:
        """Set the option to use the stop time from target stopping condition and set the according value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(time) as arg_time:
            agcls.evaluate_hresult(self.__dict__["_SetStopTimeToGo"](arg_enable.COM_val, arg_time.COM_val))

    @property
    def UseStopSlantRange(self) -> bool:
        """The option to specify a range from target stopping condition."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopSlantRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopSlantRange(self) -> float:
        """The range from the target at which the maneuver will stop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopSlantRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopSlantRange(self, enable:bool, range:float) -> None:
        """Set the option to use the stop slant range stopping condition and set the according value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(range) as arg_range:
            agcls.evaluate_hresult(self.__dict__["_SetStopSlantRange"](arg_enable.COM_val, arg_range.COM_val))

    @property
    def InterceptMode(self) -> "AgEAvtrInterceptMode":
        """The intercept mode."""
        with agmarshall.AgEnum_arg(AgEAvtrInterceptMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterceptMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterceptMode.setter
    def InterceptMode(self, newVal:"AgEAvtrInterceptMode") -> None:
        """The intercept mode."""
        with agmarshall.AgEnum_arg(AgEAvtrInterceptMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterceptMode"](arg_newVal.COM_val))

    @property
    def TargetAspect(self) -> typing.Any:
        """The angle relative to the target that the aircraft should maintain until intercept."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetAspect"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetAspect.setter
    def TargetAspect(self, newVal:typing.Any) -> None:
        """The angle relative to the target that the aircraft should maintain until intercept."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetAspect"](arg_newVal.COM_val))

    @property
    def LateralSeparation(self) -> float:
        """The distance from the target that the aircraft will guide to before intercepting."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLateralSeparation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LateralSeparation.setter
    def LateralSeparation(self, newVal:float) -> None:
        """The distance from the target that the aircraft will guide to before intercepting."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLateralSeparation"](arg_newVal.COM_val))

    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverFactor"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def ClosureMode(self) -> "AgEAvtrClosureMode":
        """The closure mode for the guidance strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrClosureMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClosureMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClosureMode.setter
    def ClosureMode(self, newVal:"AgEAvtrClosureMode") -> None:
        """The closure mode for the guidance strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrClosureMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClosureMode"](arg_newVal.COM_val))

    @property
    def HOBSMaxAngle(self) -> typing.Any:
        """The closure high off boresight max angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHOBSMaxAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HOBSMaxAngle.setter
    def HOBSMaxAngle(self, newVal:typing.Any) -> None:
        """The closure high off boresight max angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHOBSMaxAngle"](arg_newVal.COM_val))

    @property
    def HOBSAngleTol(self) -> typing.Any:
        """The closure high off boresight angle tolerance."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHOBSAngleTol"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HOBSAngleTol.setter
    def HOBSAngleTol(self, newVal:typing.Any) -> None:
        """The closure high off boresight angle tolerance."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHOBSAngleTol"](arg_newVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ab1da5c8-fd9b-49bc-adfd-69754a5376f5}", IBasicManeuverStrategyIntercept)
agcls.AgTypeNameMap["IBasicManeuverStrategyIntercept"] = IBasicManeuverStrategyIntercept

class IBasicManeuverStrategyRelativeBearing(object):
    """Interface used to access options for a Relative Bearing Strategy of a Basic Maneuver Procedure."""
    _uuid = "{2fefbc0f-5a8a-4388-9bb9-0376305315c8}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetRelBearing"] = _raise_uninitialized_error
        self.__dict__["_SetRelBearing"] = _raise_uninitialized_error
        self.__dict__["_GetMinRange"] = _raise_uninitialized_error
        self.__dict__["_SetMinRange"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRelativeBearing._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRelativeBearing from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRelativeBearing = agcom.GUID(IBasicManeuverStrategyRelativeBearing._uuid)
        vtable_offset_local = IBasicManeuverStrategyRelativeBearing._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetRelBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetRelBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetMinRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+14, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeBearing, vtable_offset_local+16, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRelativeBearing.__dict__ and type(IBasicManeuverStrategyRelativeBearing.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRelativeBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRelativeBearing.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def RelBearing(self) -> typing.Any:
        """The relative bearing angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelBearing.setter
    def RelBearing(self, newVal:typing.Any) -> None:
        """The relative bearing angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelBearing"](arg_newVal.COM_val))

    @property
    def MinRange(self) -> float:
        """The range from the target at which the aircraft will stop."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinRange.setter
    def MinRange(self, newVal:float) -> None:
        """The range from the target at which the aircraft will stop."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinRange"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2fefbc0f-5a8a-4388-9bb9-0376305315c8}", IBasicManeuverStrategyRelativeBearing)
agcls.AgTypeNameMap["IBasicManeuverStrategyRelativeBearing"] = IBasicManeuverStrategyRelativeBearing

class IBasicManeuverStrategyRelativeCourse(object):
    """Interface used to access options for a Relative Course Strategy of a Basic Maneuver Procedure."""
    _uuid = "{3b0436c1-b6c4-4623-aeeb-db55f1fce56f}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetUseRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_SetUseRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetCourse"] = _raise_uninitialized_error
        self.__dict__["_SetCourse"] = _raise_uninitialized_error
        self.__dict__["_GetInTrack"] = _raise_uninitialized_error
        self.__dict__["_SetInTrack"] = _raise_uninitialized_error
        self.__dict__["_GetCrossTrack"] = _raise_uninitialized_error
        self.__dict__["_SetCrossTrack"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_GetUseApproachTurnMode"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproachTurnMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetClosureMode"] = _raise_uninitialized_error
        self.__dict__["_SetClosureMode"] = _raise_uninitialized_error
        self.__dict__["_GetDownrangeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetDownrangeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetHOBSMaxAngle"] = _raise_uninitialized_error
        self.__dict__["_SetHOBSMaxAngle"] = _raise_uninitialized_error
        self.__dict__["_GetHOBSAngleTol"] = _raise_uninitialized_error
        self.__dict__["_SetHOBSAngleTol"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRelativeCourse._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRelativeCourse from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRelativeCourse = agcom.GUID(IBasicManeuverStrategyRelativeCourse._uuid)
        vtable_offset_local = IBasicManeuverStrategyRelativeCourse._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetUseRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetInTrack"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInTrack"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetCrossTrack"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCrossTrack"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetUseApproachTurnMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproachTurnMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+20, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+22, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetClosureMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetClosureMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetDownrangeOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDownrangeOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetHOBSMaxAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetHOBSMaxAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetHOBSAngleTol"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+29, POINTER(agcom.VARIANT))
        self.__dict__["_SetHOBSAngleTol"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+30, agcom.VARIANT)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeCourse, vtable_offset_local+32, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRelativeCourse.__dict__ and type(IBasicManeuverStrategyRelativeCourse.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRelativeCourse.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRelativeCourse.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def UseRelativeCourse(self) -> bool:
        """The option to specify a relative course as opposed to a true course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRelativeCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseRelativeCourse.setter
    def UseRelativeCourse(self, newVal:bool) -> None:
        """The option to specify a relative course as opposed to a true course."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRelativeCourse"](arg_newVal.COM_val))

    @property
    def Course(self) -> typing.Any:
        """The course value."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The course value."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourse"](arg_newVal.COM_val))

    @property
    def InTrack(self) -> float:
        """The in track offset from the center of the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInTrack"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InTrack.setter
    def InTrack(self, newVal:float) -> None:
        """The in track offset from the center of the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInTrack"](arg_newVal.COM_val))

    @property
    def CrossTrack(self) -> float:
        """The cross track offset from the center of the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCrossTrack"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CrossTrack.setter
    def CrossTrack(self, newVal:float) -> None:
        """The cross track offset from the center of the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCrossTrack"](arg_newVal.COM_val))

    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverFactor"](arg_newVal.COM_val))

    @property
    def UseApproachTurnMode(self) -> bool:
        """The option to fly the base leg of the maneuver with a constant radius turn."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproachTurnMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproachTurnMode.setter
    def UseApproachTurnMode(self, newVal:bool) -> None:
        """The option to fly the base leg of the maneuver with a constant radius turn."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproachTurnMode"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def ClosureMode(self) -> "AgEAvtrClosureMode":
        """The closure mode for the guidance strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrClosureMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClosureMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClosureMode.setter
    def ClosureMode(self, newVal:"AgEAvtrClosureMode") -> None:
        """The closure mode for the guidance strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrClosureMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClosureMode"](arg_newVal.COM_val))

    @property
    def DownrangeOffset(self) -> float:
        """The downrange offset for the closure options."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDownrangeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DownrangeOffset.setter
    def DownrangeOffset(self, newVal:float) -> None:
        """The downrange offset for the closure options."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDownrangeOffset"](arg_newVal.COM_val))

    @property
    def HOBSMaxAngle(self) -> typing.Any:
        """The closure high off boresight max angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHOBSMaxAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HOBSMaxAngle.setter
    def HOBSMaxAngle(self, newVal:typing.Any) -> None:
        """The closure high off boresight max angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHOBSMaxAngle"](arg_newVal.COM_val))

    @property
    def HOBSAngleTol(self) -> typing.Any:
        """The closure high off boresight angle tolerance."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHOBSAngleTol"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HOBSAngleTol.setter
    def HOBSAngleTol(self, newVal:typing.Any) -> None:
        """The closure high off boresight angle tolerance."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHOBSAngleTol"](arg_newVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3b0436c1-b6c4-4623-aeeb-db55f1fce56f}", IBasicManeuverStrategyRelativeCourse)
agcls.AgTypeNameMap["IBasicManeuverStrategyRelativeCourse"] = IBasicManeuverStrategyRelativeCourse

class IBasicManeuverStrategyRendezvous(object):
    """Interface used to access options for a Rendezvous Formation Strategy of a Basic Maneuver Procedure."""
    _uuid = "{49b4a1d7-e2dd-4956-892e-e3d042b5c3ae}"
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetUseCounterTurnLogic"] = _raise_uninitialized_error
        self.__dict__["_SetUseCounterTurnLogic"] = _raise_uninitialized_error
        self.__dict__["_GetEnableCollisionAvoidance"] = _raise_uninitialized_error
        self.__dict__["_GetCPA"] = _raise_uninitialized_error
        self.__dict__["_SetCPA"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeBearing"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeRange"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeRange"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeSplit"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeSplit"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_GetUsePerfModelLimits"] = _raise_uninitialized_error
        self.__dict__["_SetUsePerfModelLimits"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRateControl"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRateControl"] = _raise_uninitialized_error
        self.__dict__["_GetMinLoadFactorG"] = _raise_uninitialized_error
        self.__dict__["_SetMinLoadFactorG"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLoadFactorG"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLoadFactorG"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSpeedAdvantage"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSpeedAdvantage"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedControlMode"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedControlMode"] = _raise_uninitialized_error
        self.__dict__["_GetAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_GetUseSeparateAirspeedControl"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedFactor"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedFactor"] = _raise_uninitialized_error
        self.__dict__["_GetStopCondition"] = _raise_uninitialized_error
        self.__dict__["_SetStopCondition"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRendezvous._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRendezvous from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRendezvous = agcom.GUID(IBasicManeuverStrategyRendezvous._uuid)
        vtable_offset_local = IBasicManeuverStrategyRendezvous._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetUseCounterTurnLogic"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCounterTurnLogic"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableCollisionAvoidance"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetCPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+10, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetRelativeBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetRelativeBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetRelativeRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelativeRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAltitudeSplit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeSplit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetUsePerfModelLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUsePerfModelLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeRateControl"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRateControl"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetMinLoadFactorG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinLoadFactorG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetMaxLoadFactorG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxLoadFactorG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetMaxSpeedAdvantage"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSpeedAdvantage"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetAirspeedControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+29, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeedControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+30, agcom.LONG)
        self.__dict__["_GetAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetUseSeparateAirspeedControl"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+33, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetAirspeedFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+34, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeedFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+35, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+36, POINTER(agcom.LONG))
        self.__dict__["_SetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRendezvous, vtable_offset_local+37, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRendezvous.__dict__ and type(IBasicManeuverStrategyRendezvous.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRendezvous.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRendezvous.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def UseCounterTurnLogic(self) -> bool:
        """The option to improve performance when flying with a target on a straight and level flight path."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCounterTurnLogic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCounterTurnLogic.setter
    def UseCounterTurnLogic(self, newVal:bool) -> None:
        """The option to improve performance when flying with a target on a straight and level flight path."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCounterTurnLogic"](arg_newVal.COM_val))

    @property
    def EnableCollisionAvoidance(self) -> bool:
        """The option to enable collision avoidance."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableCollisionAvoidance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CPA(self) -> float:
        """The minimum distance between this aircraft and the target aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetCPA(self, enable:bool, cPA:float) -> None:
        """Set whether to enable collision avoidance and the corresponding minimum distance between this aircraft and the target aircraft."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(cPA) as arg_cPA:
            agcls.evaluate_hresult(self.__dict__["_SetCPA"](arg_enable.COM_val, arg_cPA.COM_val))

    @property
    def RelativeBearing(self) -> typing.Any:
        """The bearing relative to the target the aircraft will achieve and maintain."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeBearing.setter
    def RelativeBearing(self, newVal:typing.Any) -> None:
        """The bearing relative to the target the aircraft will achieve and maintain."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeBearing"](arg_newVal.COM_val))

    @property
    def RelativeRange(self) -> float:
        """The range to the target the aircraft will achieve and maintain."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeRange.setter
    def RelativeRange(self, newVal:float) -> None:
        """The range to the target the aircraft will achieve and maintain."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeRange"](arg_newVal.COM_val))

    @property
    def AltitudeSplit(self) -> float:
        """The altitude difference between the aircraft and target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeSplit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeSplit.setter
    def AltitudeSplit(self, newVal:float) -> None:
        """The altitude difference between the aircraft and target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeSplit"](arg_newVal.COM_val))

    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverFactor"](arg_newVal.COM_val))

    @property
    def UsePerfModelLimits(self) -> bool:
        """The option to derive the control limits of the aircraft from the applicable performance model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUsePerfModelLimits"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UsePerfModelLimits.setter
    def UsePerfModelLimits(self, newVal:bool) -> None:
        """The option to derive the control limits of the aircraft from the applicable performance model."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUsePerfModelLimits"](arg_newVal.COM_val))

    @property
    def AltitudeRateControl(self) -> float:
        """The rate at which the aircraft will change altitude to achieve or maintain the ALtitude Split."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRateControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRateControl.setter
    def AltitudeRateControl(self, newVal:float) -> None:
        """The rate at which the aircraft will change altitude to achieve or maintain the ALtitude Split."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRateControl"](arg_newVal.COM_val))

    @property
    def MinLoadFactorG(self) -> float:
        """The minimum load factor the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinLoadFactorG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinLoadFactorG.setter
    def MinLoadFactorG(self, newVal:float) -> None:
        """The minimum load factor the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinLoadFactorG"](arg_newVal.COM_val))

    @property
    def MaxLoadFactorG(self) -> float:
        """The maximum load factor the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLoadFactorG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLoadFactorG.setter
    def MaxLoadFactorG(self, newVal:float) -> None:
        """The maximum load factor the aircraft can bear while maneuvering in formation."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLoadFactorG"](arg_newVal.COM_val))

    @property
    def MaxSpeedAdvantage(self) -> float:
        """The limit to the airspeed difference between the aircraft and target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSpeedAdvantage"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSpeedAdvantage.setter
    def MaxSpeedAdvantage(self, newVal:float) -> None:
        """The limit to the airspeed difference between the aircraft and target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSpeedAdvantage"](arg_newVal.COM_val))

    @property
    def AirspeedControlMode(self) -> "AgEAvtrAccelPerfModelOverride":
        """The method to define the aircraft's acceleration performance in formation."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelPerfModelOverride) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedControlMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AirspeedControlMode.setter
    def AirspeedControlMode(self, newVal:"AgEAvtrAccelPerfModelOverride") -> None:
        """The method to define the aircraft's acceleration performance in formation."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelPerfModelOverride, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedControlMode"](arg_newVal.COM_val))

    @property
    def AccelDecelG(self) -> float:
        """The aircraft's specified acceleration rate for an airspeed control mode set to override."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelDecelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelDecelG.setter
    def AccelDecelG(self, newVal:float) -> None:
        """The aircraft's specified acceleration rate for an airspeed control mode set to override."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelDecelG"](arg_newVal.COM_val))

    @property
    def UseSeparateAirspeedControl(self) -> bool:
        """The option to control how fine the control is over the airspeed adjustments in formation flight."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSeparateAirspeedControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedFactor(self) -> float:
        """A dimensionless factor defining how fine the control is over airspeed adjustments in formation flight."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeedFactor(self, enable:bool, airspeedFactor:float) -> None:
        """Set whether to enable the option to control how fine the control is and the corresponding dimensionless factor."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(airspeedFactor) as arg_airspeedFactor:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedFactor"](arg_enable.COM_val, arg_airspeedFactor.COM_val))

    @property
    def StopCondition(self) -> "AgEAvtrRendezvousStopCondition":
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRendezvousStopCondition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopCondition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrRendezvousStopCondition") -> None:
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRendezvousStopCondition, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopCondition"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{49b4a1d7-e2dd-4956-892e-e3d042b5c3ae}", IBasicManeuverStrategyRendezvous)
agcls.AgTypeNameMap["IBasicManeuverStrategyRendezvous"] = IBasicManeuverStrategyRendezvous

class IBasicManeuverStrategyStationkeeping(object):
    """Interface used to access options for a Stationkeeping Strategy of a Basic Maneuver Procedure."""
    _uuid = "{b6ab25a8-fcef-49c4-a804-c55471f61f76}"
    _num_methods = 36
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTargetSpeedFraction"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTargetSpeedFraction"] = _raise_uninitialized_error
        self.__dict__["_GetRelBearing"] = _raise_uninitialized_error
        self.__dict__["_SetRelBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRelRange"] = _raise_uninitialized_error
        self.__dict__["_SetRelRange"] = _raise_uninitialized_error
        self.__dict__["_GetDesiredRadius"] = _raise_uninitialized_error
        self.__dict__["_SetDesiredRadius"] = _raise_uninitialized_error
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_GetStopCondition"] = _raise_uninitialized_error
        self.__dict__["_SetStopCondition"] = _raise_uninitialized_error
        self.__dict__["_GetUseRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_SetUseRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetStopCourse"] = _raise_uninitialized_error
        self.__dict__["_SetStopCourse"] = _raise_uninitialized_error
        self.__dict__["_GetStopAfterTurnCount"] = _raise_uninitialized_error
        self.__dict__["_SetStopAfterTurnCount"] = _raise_uninitialized_error
        self.__dict__["_GetStopAfterDuration"] = _raise_uninitialized_error
        self.__dict__["_SetStopAfterDuration"] = _raise_uninitialized_error
        self.__dict__["_GetStopAfterTime"] = _raise_uninitialized_error
        self.__dict__["_SetStopAfterTime"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyStationkeeping._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyStationkeeping from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyStationkeeping = agcom.GUID(IBasicManeuverStrategyStationkeeping._uuid)
        vtable_offset_local = IBasicManeuverStrategyStationkeeping._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetMaxTargetSpeedFraction"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTargetSpeedFraction"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetRelBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetRelBearing"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetRelRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRelRange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetDesiredRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDesiredRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_GetUseRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+21, agcom.VARIANT_BOOL)
        self.__dict__["_GetStopCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+22, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopCourse"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+23, agcom.VARIANT)
        self.__dict__["_GetStopAfterTurnCount"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetStopAfterTurnCount"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetStopAfterDuration"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopAfterDuration"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+27, agcom.DOUBLE)
        self.__dict__["_GetStopAfterTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+28, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopAfterTime"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+29, agcom.VARIANT)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+30, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+32, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+34, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+35, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStationkeeping, vtable_offset_local+36, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyStationkeeping.__dict__ and type(IBasicManeuverStrategyStationkeeping.__dict__[attrname]) == property:
            return IBasicManeuverStrategyStationkeeping.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyStationkeeping.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def MaxTargetSpeedFraction(self) -> float:
        """The maximum speed relative to the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTargetSpeedFraction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTargetSpeedFraction.setter
    def MaxTargetSpeedFraction(self, newVal:float) -> None:
        """The maximum speed relative to the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTargetSpeedFraction"](arg_newVal.COM_val))

    @property
    def RelBearing(self) -> typing.Any:
        """The bearing relative to the target that the aircraft will hold."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelBearing.setter
    def RelBearing(self, newVal:typing.Any) -> None:
        """The bearing relative to the target that the aircraft will hold."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelBearing"](arg_newVal.COM_val))

    @property
    def RelRange(self) -> float:
        """The range from the target where the aircraft will hold."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelRange.setter
    def RelRange(self, newVal:float) -> None:
        """The range from the target where the aircraft will hold."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelRange"](arg_newVal.COM_val))

    @property
    def DesiredRadius(self) -> float:
        """The goal radius of the holding circle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesiredRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesiredRadius.setter
    def DesiredRadius(self, newVal:float) -> None:
        """The goal radius of the holding circle."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesiredRadius"](arg_newVal.COM_val))

    @property
    def TurnDirection(self) -> "AgEAvtrTurnDirection":
        """Define if the aircraft turns left or right into the holding circle."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrTurnDirection") -> None:
        """Define if the aircraft turns left or right into the holding circle."""
        with agmarshall.AgEnum_arg(AgEAvtrTurnDirection, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverFactor"](arg_newVal.COM_val))

    @property
    def StopCondition(self) -> "AgEAvtrStationkeepingStopCondition":
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrStationkeepingStopCondition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopCondition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrStationkeepingStopCondition") -> None:
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrStationkeepingStopCondition, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopCondition"](arg_newVal.COM_val))

    @property
    def UseRelativeCourse(self) -> bool:
        """Option to use a relative course as opposed to an absolute course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRelativeCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseRelativeCourse.setter
    def UseRelativeCourse(self, newVal:bool) -> None:
        """Option to use a relative course as opposed to an absolute course."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRelativeCourse"](arg_newVal.COM_val))

    @property
    def StopCourse(self) -> typing.Any:
        """The course stop condition."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopCourse.setter
    def StopCourse(self, newVal:typing.Any) -> None:
        """The course stop condition."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopCourse"](arg_newVal.COM_val))

    @property
    def StopAfterTurnCount(self) -> int:
        """The number of turns stop condition."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAfterTurnCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopAfterTurnCount.setter
    def StopAfterTurnCount(self, newVal:int) -> None:
        """The number of turns stop condition."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopAfterTurnCount"](arg_newVal.COM_val))

    @property
    def StopAfterDuration(self) -> float:
        """The duration stop condition."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAfterDuration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopAfterDuration.setter
    def StopAfterDuration(self, newVal:float) -> None:
        """The duration stop condition."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopAfterDuration"](arg_newVal.COM_val))

    @property
    def StopAfterTime(self) -> typing.Any:
        """The time stop condition."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAfterTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopAfterTime.setter
    def StopAfterTime(self, newVal:typing.Any) -> None:
        """The time stop condition."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopAfterTime"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b6ab25a8-fcef-49c4-a804-c55471f61f76}", IBasicManeuverStrategyStationkeeping)
agcls.AgTypeNameMap["IBasicManeuverStrategyStationkeeping"] = IBasicManeuverStrategyStationkeeping

class IBasicManeuverStrategyRelativeFPA(object):
    """Interface used to access options for the Relative Flight Path Angle Strategy of a Basic Maneuver Procedure."""
    _uuid = "{d2066432-a9ef-48f0-aeb2-e75f6b4323e2}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFPA"] = _raise_uninitialized_error
        self.__dict__["_SetFPA"] = _raise_uninitialized_error
        self.__dict__["_GetAnchorAltOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAnchorAltOffset"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverFactor"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitPitchRate"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetMinAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMinAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsoluteAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMinAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_SetMinAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAltitudeRelAnchor"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRelativeFPA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRelativeFPA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRelativeFPA = agcom.GUID(IBasicManeuverStrategyRelativeFPA._uuid)
        vtable_offset_local = IBasicManeuverStrategyRelativeFPA._vtable_offset - 1
        self.__dict__["_GetFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetAnchorAltOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAnchorAltOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetManeuverFactor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitPitchRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+9, agcom.LONG, agcom.VARIANT)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetMinAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetUseMinAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMinAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+13, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_GetUseMaxAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMaxAbsoluteAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+16, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetMinAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_GetUseMinAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMinAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+19, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetMaxAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_GetUseMaxAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMaxAltitudeRelAnchor"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+22, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+23, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelativeFPA, vtable_offset_local+24, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRelativeFPA.__dict__ and type(IBasicManeuverStrategyRelativeFPA.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRelativeFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRelativeFPA.")
    
    @property
    def FPA(self) -> typing.Any:
        """The flight path angle for the maneuver."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FPA.setter
    def FPA(self, newVal:typing.Any) -> None:
        """The flight path angle for the maneuver."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFPA"](arg_newVal.COM_val))

    @property
    def AnchorAltOffset(self) -> float:
        """The goal height above or below the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAnchorAltOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AnchorAltOffset.setter
    def AnchorAltOffset(self, newVal:float) -> None:
        """The goal height above or below the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAnchorAltOffset"](arg_newVal.COM_val))

    @property
    def ManeuverFactor(self) -> float:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverFactor.setter
    def ManeuverFactor(self, newVal:float) -> None:
        """A dimensionless factor that determines how tightly or gently the aircraft will maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverFactor"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrProfileControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrProfileControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitPitchRate(self) -> typing.Any:
        """The specified pitch rate for a control limit mode of specify max pitch rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrProfileControlLimit", controlLimitValue:typing.Any) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrProfileControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.VARIANT_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinAbsoluteAltitude(self) -> float:
        """The minimum absolute altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMinAbsoluteAltitude(self) -> bool:
        """The option to specify a minimum absolute altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMinAbsoluteAltitude(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the minimum absolute altitude."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetMinAbsoluteAltitude"](arg_enable.COM_val, arg_altitude.COM_val))

    @property
    def MaxAbsoluteAltitude(self) -> float:
        """The maximum absolute altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMaxAbsoluteAltitude(self) -> bool:
        """The option to specify a maximum absolute altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxAbsoluteAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxAbsoluteAltitude(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the maximum absolute altitude."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsoluteAltitude"](arg_enable.COM_val, arg_altitude.COM_val))

    @property
    def MinAltitudeRelAnchor(self) -> float:
        """The minimum altitude offset from the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAltitudeRelAnchor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMinAltitudeRelAnchor(self) -> bool:
        """The option to specify a minimum altitude offset from the target."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinAltitudeRelAnchor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMinAltitudeRelAnchor(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the minimum altitude offset from the target."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetMinAltitudeRelAnchor"](arg_enable.COM_val, arg_altitude.COM_val))

    @property
    def MaxAltitudeRelAnchor(self) -> float:
        """The maximum altitude offset from the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAltitudeRelAnchor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMaxAltitudeRelAnchor(self) -> bool:
        """The option to specify a maximum altitude offset from the target."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxAltitudeRelAnchor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxAltitudeRelAnchor(self, enable:bool, altitude:float) -> None:
        """Set whether to enable and a value for the maximum altitude offset from the target."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitude) as arg_altitude:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAltitudeRelAnchor"](arg_enable.COM_val, arg_altitude.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d2066432-a9ef-48f0-aeb2-e75f6b4323e2}", IBasicManeuverStrategyRelativeFPA)
agcls.AgTypeNameMap["IBasicManeuverStrategyRelativeFPA"] = IBasicManeuverStrategyRelativeFPA

class IBasicManeuverStrategyRelSpeedAlt(object):
    """Interface used to access options for a Relative Speed/Altitude Strategy of a Basic Maneuver Procedure."""
    _uuid = "{1770600b-1329-4efb-8836-200a0d8ed802}"
    _num_methods = 36
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetName"] = _raise_uninitialized_error
        self.__dict__["_GetValidTargetNames"] = _raise_uninitialized_error
        self.__dict__["_GetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_SetTargetResolution"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetElevationAngle"] = _raise_uninitialized_error
        self.__dict__["_SetElevationAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOffsetType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeedOffset"] = _raise_uninitialized_error
        self.__dict__["_GetUseTgtAspectForAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetUseTgtAspectForAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetUsePerfModelLimits"] = _raise_uninitialized_error
        self.__dict__["_SetUsePerfModelLimits"] = _raise_uninitialized_error
        self.__dict__["_GetRangeForEqualSpeed"] = _raise_uninitialized_error
        self.__dict__["_SetRangeForEqualSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetRangeToTransitionSpeed"] = _raise_uninitialized_error
        self.__dict__["_SetRangeToTransitionSpeed"] = _raise_uninitialized_error
        self.__dict__["_GetMinAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMinAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMinAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMinAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopCondition"] = _raise_uninitialized_error
        self.__dict__["_SetStopCondition"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyRelSpeedAlt._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyRelSpeedAlt from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyRelSpeedAlt = agcom.GUID(IBasicManeuverStrategyRelSpeedAlt._uuid)
        vtable_offset_local = IBasicManeuverStrategyRelSpeedAlt._vtable_offset - 1
        self.__dict__["_GetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetName"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidTargetNames"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetResolution"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetRelativeAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetRelativeAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetElevationAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetElevationAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetAirspeedOffsetType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeedOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeedOffset"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+14, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetUseTgtAspectForAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseTgtAspectForAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetUsePerfModelLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUsePerfModelLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetRangeForEqualSpeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRangeForEqualSpeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetRangeToTransitionSpeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRangeToTransitionSpeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetMinAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMinAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+28, POINTER(agcom.LONG))
        self.__dict__["_SetMinAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+29, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+30, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMaxAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+31, POINTER(agcom.LONG))
        self.__dict__["_SetMaxAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+32, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+33, POINTER(agcom.LONG))
        self.__dict__["_SetStopCondition"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+34, agcom.LONG)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+35, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyRelSpeedAlt, vtable_offset_local+36, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyRelSpeedAlt.__dict__ and type(IBasicManeuverStrategyRelSpeedAlt.__dict__[attrname]) == property:
            return IBasicManeuverStrategyRelSpeedAlt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyRelSpeedAlt.")
    
    @property
    def TargetName(self) -> str:
        """The target name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetName.setter
    def TargetName(self, newVal:str) -> None:
        """The target name."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetName"](arg_newVal.COM_val))

    @property
    def ValidTargetNames(self) -> list:
        """Returns the valid target names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidTargetNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TargetResolution(self) -> float:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetResolution"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetResolution.setter
    def TargetResolution(self, newVal:float) -> None:
        """The target position/velocity sampling resolution."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetResolution"](arg_newVal.COM_val))

    @property
    def RelativeAltitudeMode(self) -> "AgEAvtrRelativeAltitudeMode":
        """The mode to define the hold objective for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRelativeAltitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeAltitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativeAltitudeMode.setter
    def RelativeAltitudeMode(self, newVal:"AgEAvtrRelativeAltitudeMode") -> None:
        """The mode to define the hold objective for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRelativeAltitudeMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeAltitudeMode"](arg_newVal.COM_val))

    @property
    def ElevationAngle(self) -> typing.Any:
        """The goal elevation angle from the target to the aircraft."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElevationAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElevationAngle.setter
    def ElevationAngle(self, newVal:typing.Any) -> None:
        """The goal elevation angle from the target to the aircraft."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetElevationAngle"](arg_newVal.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """The goal altitude offset from the target to the aircraft."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The goal altitude offset from the target to the aircraft."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_newVal.COM_val))

    @property
    def AirspeedOffsetType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOffsetType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedOffset(self) -> float:
        """The airspeed offset from the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeedOffset(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the airspeed offset value and type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeedOffset"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def UseTgtAspectForAirspeed(self) -> bool:
        """The option to use the target aspect to compute the enforced airspeed difference."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseTgtAspectForAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseTgtAspectForAirspeed.setter
    def UseTgtAspectForAirspeed(self, newVal:bool) -> None:
        """The option to use the target aspect to compute the enforced airspeed difference."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseTgtAspectForAirspeed"](arg_newVal.COM_val))

    @property
    def UsePerfModelLimits(self) -> bool:
        """The option to use the performance model limits for the aircraft."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUsePerfModelLimits"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UsePerfModelLimits.setter
    def UsePerfModelLimits(self, newVal:bool) -> None:
        """The option to use the performance model limits for the aircraft."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUsePerfModelLimits"](arg_newVal.COM_val))

    @property
    def RangeForEqualSpeed(self) -> float:
        """The range at which the aircraft will achieve the same airspeed as the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRangeForEqualSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RangeForEqualSpeed.setter
    def RangeForEqualSpeed(self, newVal:float) -> None:
        """The range at which the aircraft will achieve the same airspeed as the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRangeForEqualSpeed"](arg_newVal.COM_val))

    @property
    def RangeToTransitionSpeed(self) -> float:
        """The range at which the aircraft will begin to slow down to match the speed of the target."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRangeToTransitionSpeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RangeToTransitionSpeed.setter
    def RangeToTransitionSpeed(self, newVal:float) -> None:
        """The range at which the aircraft will begin to slow down to match the speed of the target."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRangeToTransitionSpeed"](arg_newVal.COM_val))

    @property
    def MinAltitude(self) -> float:
        """The minimum altitude boundary for the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinAltitude.setter
    def MinAltitude(self, newVal:float) -> None:
        """The minimum altitude boundary for the maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinAltitude"](arg_newVal.COM_val))

    @property
    def MaxAltitude(self) -> float:
        """The maximum altitude boundary for the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAltitude.setter
    def MaxAltitude(self, newVal:float) -> None:
        """The maximum altitude boundary for the maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAltitude"](arg_newVal.COM_val))

    @property
    def MinAirspeed(self) -> float:
        """The minimum airspeed limit for the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MinAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMinAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the minimum airspeed value and type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMinAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def MaxAirspeed(self) -> float:
        """The maximum airspeed limit for the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetMaxAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the maximum airspeed value and type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def StopCondition(self) -> "AgEAvtrRelSpeedAltStopCondition":
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRelSpeedAltStopCondition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopCondition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopCondition.setter
    def StopCondition(self, newVal:"AgEAvtrRelSpeedAltStopCondition") -> None:
        """The stopping condition for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrRelSpeedAltStopCondition, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopCondition"](arg_newVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1770600b-1329-4efb-8836-200a0d8ed802}", IBasicManeuverStrategyRelSpeedAlt)
agcls.AgTypeNameMap["IBasicManeuverStrategyRelSpeedAlt"] = IBasicManeuverStrategyRelSpeedAlt

class IBasicManeuverStrategyBezier(object):
    """Interface used to access options for a Bezier Strategy of a Basic Maneuver Procedure."""
    _uuid = "{fe815e13-cfab-4da7-8beb-9d8efd93d9f3}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDownrange"] = _raise_uninitialized_error
        self.__dict__["_SetDownrange"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalVelocityMode"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetVerticalVelocity"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopAtAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetStopAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetStopAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopAtAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetStopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyBezier._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyBezier from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyBezier = agcom.GUID(IBasicManeuverStrategyBezier._uuid)
        vtable_offset_local = IBasicManeuverStrategyBezier._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDownrange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDownrange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+9, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetVerticalVelocityMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVerticalVelocity"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+13, agcom.LONG, agcom.VARIANT)
        self.__dict__["_GetUseStopAtAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+16, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetUseStopAtAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_GetStopAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetStopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+20, agcom.VARIANT_BOOL, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBezier, vtable_offset_local+22, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyBezier.__dict__ and type(IBasicManeuverStrategyBezier.__dict__[attrname]) == property:
            return IBasicManeuverStrategyBezier.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyBezier.")
    
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The aircraft's altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The aircraft's altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def Downrange(self) -> float:
        """The ground distance from the beginning of the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDownrange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Downrange.setter
    def Downrange(self, newVal:float) -> None:
        """The ground distance from the beginning of the maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDownrange"](arg_newVal.COM_val))

    @property
    def Airspeed(self) -> float:
        """The aircraft's airspeed."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the fly to airspeed value and type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def VerticalVelocityMode(self) -> "AgEAvtrFlyToFlightPathAngleMode":
        """The option to specify the flight path angle or the altitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrFlyToFlightPathAngleMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalVelocityMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AltitudeRate(self) -> float:
        """The constant rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetVerticalVelocity(self, mode:"AgEAvtrFlyToFlightPathAngleMode", value:typing.Any) -> None:
        """Set the flight path angle or altitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrFlyToFlightPathAngleMode, mode) as arg_mode, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetVerticalVelocity"](arg_mode.COM_val, arg_value.COM_val))

    @property
    def UseStopAtAltitudeRate(self) -> bool:
        """The option to stop the maneuver if a specified altitude rate is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopAtAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAltitudeRate(self) -> float:
        """The altitude rate stopping condition."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopAltitudeRate(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude rate stopping condition and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitudeRate) as arg_altitudeRate:
            agcls.evaluate_hresult(self.__dict__["_SetStopAltitudeRate"](arg_enable.COM_val, arg_altitudeRate.COM_val))

    @property
    def UseStopAtAirspeed(self) -> bool:
        """The option to stop the maneuver if a specified airspeed is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopAtAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAirspeed(self) -> float:
        """The airspeed stopping condition."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the airspeed stopping condition."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopAirspeed(self, enable:bool, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set whether to enable the airspeed stopping condition and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetStopAirspeed"](arg_enable.COM_val, arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{fe815e13-cfab-4da7-8beb-9d8efd93d9f3}", IBasicManeuverStrategyBezier)
agcls.AgTypeNameMap["IBasicManeuverStrategyBezier"] = IBasicManeuverStrategyBezier

class IBasicManeuverStrategyPushPull(object):
    """Interface used to access options for a Push/Pull Strategy of a Basic Maneuver Procedure."""
    _uuid = "{8000621a-e9ce-4aa7-bf8e-565f579a4675}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetPushPull"] = _raise_uninitialized_error
        self.__dict__["_SetPushPull"] = _raise_uninitialized_error
        self.__dict__["_GetPushPullG"] = _raise_uninitialized_error
        self.__dict__["_SetPushPullG"] = _raise_uninitialized_error
        self.__dict__["_GetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_SetAccelMode"] = _raise_uninitialized_error
        self.__dict__["_GetAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelDecelG"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetMaintainAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetMaintainAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetStopFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopAtAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetStopAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetStopAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopAtAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetStopAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetStopAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopAtAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetStopAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_SetStopAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyPushPull._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyPushPull from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyPushPull = agcom.GUID(IBasicManeuverStrategyPushPull._uuid)
        vtable_offset_local = IBasicManeuverStrategyPushPull._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetPushPull"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetPushPull"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetPushPullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPushPullG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAccelMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelDecelG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMaintainAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetMaintainAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetMaintainAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_GetStopFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetStopFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+15, agcom.VARIANT)
        self.__dict__["_GetUseStopAtAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+18, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetUseStopAtAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+21, agcom.VARIANT_BOOL, agcom.DOUBLE)
        self.__dict__["_GetUseStopAtAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+22, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetStopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_GetStopAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetStopAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+25, agcom.VARIANT_BOOL, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+26, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPushPull, vtable_offset_local+27, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyPushPull.__dict__ and type(IBasicManeuverStrategyPushPull.__dict__[attrname]) == property:
            return IBasicManeuverStrategyPushPull.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyPushPull.")
    
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_newVal.COM_val))

    @property
    def PushPull(self) -> "AgEAvtrPushPull":
        """The option to push over or pull up."""
        with agmarshall.AgEnum_arg(AgEAvtrPushPull) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPushPull"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PushPull.setter
    def PushPull(self, newVal:"AgEAvtrPushPull") -> None:
        """The option to push over or pull up."""
        with agmarshall.AgEnum_arg(AgEAvtrPushPull, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPushPull"](arg_newVal.COM_val))

    @property
    def PushPullG(self) -> float:
        """The G force of the maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPushPullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PushPullG.setter
    def PushPullG(self, newVal:float) -> None:
        """The G force of the maneuver."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPushPullG"](arg_newVal.COM_val))

    @property
    def AccelMode(self) -> "AgEAvtrAccelMode":
        """The option to accelerate, decelerate, or maintain the current airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelMode.setter
    def AccelMode(self, newVal:"AgEAvtrAccelMode") -> None:
        """The option to accelerate, decelerate, or maintain the current airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAccelMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelMode"](arg_newVal.COM_val))

    @property
    def AccelDecelG(self) -> float:
        """The specific G force rate to accelerate/decelerate at."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelDecelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelDecelG.setter
    def AccelDecelG(self, newVal:float) -> None:
        """The specific G force rate to accelerate/decelerate at."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelDecelG"](arg_newVal.COM_val))

    @property
    def MaintainAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the maintain airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaintainAirspeedType.setter
    def MaintainAirspeedType(self, newVal:"AgEAvtrAirspeedType") -> None:
        """The airspeed type for the maintain airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaintainAirspeedType"](arg_newVal.COM_val))

    @property
    def MaintainAirspeed(self) -> float:
        """The airspeed to maintain."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaintainAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopFlightPathAngle(self) -> typing.Any:
        """The flight path angle the maneuver will stop at if achieved."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopFlightPathAngle.setter
    def StopFlightPathAngle(self, newVal:typing.Any) -> None:
        """The flight path angle the maneuver will stop at if achieved."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopFlightPathAngle"](arg_newVal.COM_val))

    @property
    def UseStopAtAltitude(self) -> bool:
        """The option to stop the maneuver if a specified altitude is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopAtAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAltitude(self) -> float:
        """The altitude stopping condition"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopAltitude(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude stopping condition and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitudeRate) as arg_altitudeRate:
            agcls.evaluate_hresult(self.__dict__["_SetStopAltitude"](arg_enable.COM_val, arg_altitudeRate.COM_val))

    @property
    def UseStopAtAltitudeRate(self) -> bool:
        """The option to stop the maneuver if a specified altitude rate is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopAtAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAltitudeRate(self) -> float:
        """The altitude rate stopping condition."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopAltitudeRate(self, enable:bool, altitudeRate:float) -> None:
        """Set whether to enable the altitude rate stopping condition and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.DOUBLE_arg(altitudeRate) as arg_altitudeRate:
            agcls.evaluate_hresult(self.__dict__["_SetStopAltitudeRate"](arg_enable.COM_val, arg_altitudeRate.COM_val))

    @property
    def UseStopAtAirspeed(self) -> bool:
        """The option to stop the maneuver if a specified airspeed is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopAtAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAirspeed(self) -> float:
        """The airspeed stopping condition."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StopAirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type for the airspeed stopping condition."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetStopAirspeed(self, enable:bool, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set whether to enable the airspeed stopping condition and the corresponding value."""
        with agmarshall.VARIANT_BOOL_arg(enable) as arg_enable, \
             agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetStopAirspeed"](arg_enable.COM_val, arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8000621a-e9ce-4aa7-bf8e-565f579a4675}", IBasicManeuverStrategyPushPull)
agcls.AgTypeNameMap["IBasicManeuverStrategyPushPull"] = IBasicManeuverStrategyPushPull

class IBasicManeuverStrategyGlideProfile(object):
    """Interface used to access options for a Glide Profile Strategy of a Basic Maneuver Procedure."""
    _uuid = "{7c0a4dd8-59ed-403d-96bb-8f45d3e71ca6}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetHoldInitialAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetHoldInitialAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetMinG"] = _raise_uninitialized_error
        self.__dict__["_SetMinG"] = _raise_uninitialized_error
        self.__dict__["_GetMaxG"] = _raise_uninitialized_error
        self.__dict__["_SetMaxG"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSpeedLimits"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyGlideProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyGlideProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyGlideProfile = agcom.GUID(IBasicManeuverStrategyGlideProfile._uuid)
        vtable_offset_local = IBasicManeuverStrategyGlideProfile._vtable_offset - 1
        self.__dict__["_GetHoldInitialAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHoldInitialAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetMinG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxG"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMaxSpeedLimits"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyGlideProfile, vtable_offset_local+13, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyGlideProfile.__dict__ and type(IBasicManeuverStrategyGlideProfile.__dict__[attrname]) == property:
            return IBasicManeuverStrategyGlideProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyGlideProfile.")
    
    @property
    def HoldInitialAirspeed(self) -> bool:
        """Select whether to maintain the airspeed of the aircraft at the beginning of the procedure throughout the maneuver."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldInitialAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoldInitialAirspeed.setter
    def HoldInitialAirspeed(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldInitialAirspeed"](arg_pVal.COM_val))

    @property
    def Airspeed(self) -> float:
        """Get the airspeed the aircraft will attempt to achieve and maintain if the hold initial airspeed option is not enabled."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """Get the airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MinG(self) -> float:
        """The minimum load factor the aircraft can withstand."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinG.setter
    def MinG(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinG"](arg_pVal.COM_val))

    @property
    def MaxG(self) -> float:
        """The maximum load factor the aircraft can withstand."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxG.setter
    def MaxG(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxG"](arg_pVal.COM_val))

    @property
    def MaxSpeedLimits(self) -> "AgEAvtrBasicManeuverStrategyAirspeedPerfLimits":
        """The options of what the procedure will do if the aircraft has exceeded the maximum speed limits."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSpeedLimits"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSpeedLimits.setter
    def MaxSpeedLimits(self, pVal:"AgEAvtrBasicManeuverStrategyAirspeedPerfLimits") -> None:
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyAirspeedPerfLimits, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSpeedLimits"](arg_pVal.COM_val))

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the airspeed and airspeed type that the aircraft will attempt to achieve and maintain if the hold initial airspeed option is not enabled."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7c0a4dd8-59ed-403d-96bb-8f45d3e71ca6}", IBasicManeuverStrategyGlideProfile)
agcls.AgTypeNameMap["IBasicManeuverStrategyGlideProfile"] = IBasicManeuverStrategyGlideProfile

class IBasicManeuverStrategyCruiseProfile(object):
    """Interface used to access options for a Cruise Profile Strategy of a Basic Maneuver Procedure."""
    _uuid = "{bd2d3a58-6602-4909-bb0f-98fa9c84d535}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetRequestedAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetRequestedAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetStopAfterLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetStopAfterLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyCruiseProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyCruiseProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyCruiseProfile = agcom.GUID(IBasicManeuverStrategyCruiseProfile._uuid)
        vtable_offset_local = IBasicManeuverStrategyCruiseProfile._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetLevelOff"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLevelOff"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetRequestedAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRequestedAltitude"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetStopAfterLevelOff"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopAfterLevelOff"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyCruiseProfile, vtable_offset_local+13, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyCruiseProfile.__dict__ and type(IBasicManeuverStrategyCruiseProfile.__dict__[attrname]) == property:
            return IBasicManeuverStrategyCruiseProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyCruiseProfile.")
    
    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use. Earth Frame will force the aircraft to overcome wind effects. Wind frame will allow the maneuver to be perturbed by wind."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, pVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_pVal.COM_val))

    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the aircraft's default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_pVal.COM_val))

    @property
    def LevelOff(self) -> bool:
        """Opt whether to require the aircraft to level off at the specified altitude. This altitude is only enabled of the Default Cruise Altitude option is not selected."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOff.setter
    def LevelOff(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOff"](arg_pVal.COM_val))

    @property
    def RequestedAltitude(self) -> float:
        """The desired MSL Altitude for the maneuver. This altitude is only enabled of the Default Cruise Altitude option is not selected."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRequestedAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RequestedAltitude.setter
    def RequestedAltitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRequestedAltitude"](arg_newVal.COM_val))

    @property
    def CruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the interface for the cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def StopAfterLevelOff(self) -> bool:
        """Select to stop the maneuver as soon as the aircraft achieves its goal altitude and levels off, regardless if any basic stopping conditions have been triggered."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopAfterLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopAfterLevelOff.setter
    def StopAfterLevelOff(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopAfterLevelOff"](arg_pVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{bd2d3a58-6602-4909-bb0f-98fa9c84d535}", IBasicManeuverStrategyCruiseProfile)
agcls.AgTypeNameMap["IBasicManeuverStrategyCruiseProfile"] = IBasicManeuverStrategyCruiseProfile

class IBasicManeuverStrategyStraightAhead(object):
    """Interface used to access options for a Straight Ahead Strategy of a Basic Maneuver Procedure."""
    _uuid = "{b20bf35c-8f9c-4a09-9b2c-b57124e657aa}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyStraightAhead._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyStraightAhead from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyStraightAhead = agcom.GUID(IBasicManeuverStrategyStraightAhead._uuid)
        vtable_offset_local = IBasicManeuverStrategyStraightAhead._vtable_offset - 1
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStraightAhead, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStraightAhead, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStraightAhead, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyStraightAhead, vtable_offset_local+4, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyStraightAhead.__dict__ and type(IBasicManeuverStrategyStraightAhead.__dict__[attrname]) == property:
            return IBasicManeuverStrategyStraightAhead.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyStraightAhead.")
    
    @property
    def ReferenceFrame(self) -> "AgEAvtrStraightAheadRefFrame":
        """The reference frame the aircraft will use to fly straight ahead."""
        with agmarshall.AgEnum_arg(AgEAvtrStraightAheadRefFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, pVal:"AgEAvtrStraightAheadRefFrame") -> None:
        with agmarshall.AgEnum_arg(AgEAvtrStraightAheadRefFrame, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_pVal.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b20bf35c-8f9c-4a09-9b2c-b57124e657aa}", IBasicManeuverStrategyStraightAhead)
agcls.AgTypeNameMap["IBasicManeuverStrategyStraightAhead"] = IBasicManeuverStrategyStraightAhead

class IBasicManeuverStrategyWeave(object):
    """Interface used to access options for a weave strategy of a basic maneuver procedure."""
    _uuid = "{3ec446e4-6454-4c4d-936c-7094ec85ddd0}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetHeadingChange"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingChange"] = _raise_uninitialized_error
        self.__dict__["_GetMaxNumCycles"] = _raise_uninitialized_error
        self.__dict__["_SetMaxNumCycles"] = _raise_uninitialized_error
        self.__dict__["_GetMaxDistance"] = _raise_uninitialized_error
        self.__dict__["_SetMaxDistance"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRadius"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitTurnRate"] = _raise_uninitialized_error
        self.__dict__["_GetControlLimitHorizAccel"] = _raise_uninitialized_error
        self.__dict__["_SetControlLimit"] = _raise_uninitialized_error
        self.__dict__["_GetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        self.__dict__["_SetCompensateForCoriolisAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyWeave._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyWeave from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyWeave = agcom.GUID(IBasicManeuverStrategyWeave._uuid)
        vtable_offset_local = IBasicManeuverStrategyWeave._vtable_offset - 1
        self.__dict__["_GetHeadingChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeadingChange"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetMaxNumCycles"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxNumCycles"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMaxDistance"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxDistance"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetControlLimitMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetControlLimitTurnRadius"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetControlLimitTurnRate"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_GetControlLimitHorizAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlLimit"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCompensateForCoriolisAccel"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyWeave, vtable_offset_local+13, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyWeave.__dict__ and type(IBasicManeuverStrategyWeave.__dict__[attrname]) == property:
            return IBasicManeuverStrategyWeave.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyWeave.")
    
    @property
    def HeadingChange(self) -> typing.Any:
        """The direction in which the aircraft will begin the weave pattern."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingChange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingChange.setter
    def HeadingChange(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingChange"](arg_newVal.COM_val))

    @property
    def MaxNumCycles(self) -> float:
        """The number of times the aircraft will fly the pattern."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxNumCycles"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxNumCycles.setter
    def MaxNumCycles(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxNumCycles"](arg_newVal.COM_val))

    @property
    def MaxDistance(self) -> float:
        """The maximum ground distance the aircraft will travel while performing the weave cyces."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxDistance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxDistance.setter
    def MaxDistance(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxDistance"](arg_newVal.COM_val))

    @property
    def ControlLimitMode(self) -> "AgEAvtrBasicManeuverStrategyNavControlLimit":
        """Get the method to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRadius(self) -> float:
        """The specified turn radius for a control limit mode of specify min turn radius."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitTurnRate(self) -> typing.Any:
        """The specified turn rate for a control limit mode of specify max turn rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitTurnRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlLimitHorizAccel(self) -> float:
        """The specified horizontal acceleration for a control limit mode of specify max horiz accel."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlLimitHorizAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetControlLimit(self, controlLimitMode:"AgEAvtrBasicManeuverStrategyNavControlLimit", controlLimitValue:float) -> None:
        """Set the method and corresponding value to define the control limits of the aircraft during the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverStrategyNavControlLimit, controlLimitMode) as arg_controlLimitMode, \
             agmarshall.DOUBLE_arg(controlLimitValue) as arg_controlLimitValue:
            agcls.evaluate_hresult(self.__dict__["_SetControlLimit"](arg_controlLimitMode.COM_val, arg_controlLimitValue.COM_val))

    @property
    def CompensateForCoriolisAccel(self) -> bool:
        """The option to compensate for the acceleration due to the Coriolis effect."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCompensateForCoriolisAccel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CompensateForCoriolisAccel.setter
    def CompensateForCoriolisAccel(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCompensateForCoriolisAccel"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3ec446e4-6454-4c4d-936c-7094ec85ddd0}", IBasicManeuverStrategyWeave)
agcls.AgTypeNameMap["IBasicManeuverStrategyWeave"] = IBasicManeuverStrategyWeave

class IBasicManeuverStrategyBallistic3D(object):
    """Interface used to access options for a balistic 3D strategy of a basic maneuver procedure."""
    _uuid = "{49C1E15C-785F-4C84-AA50-2B29256811A6}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlMode"] = _raise_uninitialized_error
        self.__dict__["_SetControlMode"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetParachuteArea"] = _raise_uninitialized_error
        self.__dict__["_SetParachuteArea"] = _raise_uninitialized_error
        self.__dict__["_GetParachuteCd"] = _raise_uninitialized_error
        self.__dict__["_SetParachuteCd"] = _raise_uninitialized_error
        self.__dict__["_GetWindForceEffectiveArea"] = _raise_uninitialized_error
        self.__dict__["_SetWindForceEffectiveArea"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyBallistic3D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyBallistic3D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyBallistic3D = agcom.GUID(IBasicManeuverStrategyBallistic3D._uuid)
        vtable_offset_local = IBasicManeuverStrategyBallistic3D._vtable_offset - 1
        self.__dict__["_GetControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetParachuteArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetParachuteArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetParachuteCd"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetParachuteCd"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetWindForceEffectiveArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWindForceEffectiveArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyBallistic3D, vtable_offset_local+9, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyBallistic3D.__dict__ and type(IBasicManeuverStrategyBallistic3D.__dict__[attrname]) == property:
            return IBasicManeuverStrategyBallistic3D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyBallistic3D.")
    
    @property
    def ControlMode(self) -> "AgEAvtrBallistic3DControlMode":
        """The control mode for the ballistic 3D strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrBallistic3DControlMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlMode.setter
    def ControlMode(self, newVal:"AgEAvtrBallistic3DControlMode") -> None:
        """The control mode for the ballistic 3D strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrBallistic3DControlMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlMode"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ParachuteArea(self) -> float:
        """The parachute area used as part of the Parachute control mode for the ballistic 3D strategy."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParachuteArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParachuteArea.setter
    def ParachuteArea(self, newVal:float) -> None:
        """The parachute area used as part of the Parachute control mode for the ballistic 3D strategy."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetParachuteArea"](arg_newVal.COM_val))

    @property
    def ParachuteCd(self) -> float:
        """The parachute coefficient of drag used as part of the Parachute control mode for the ballistic 3D strategy."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParachuteCd"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParachuteCd.setter
    def ParachuteCd(self, newVal:float) -> None:
        """The parachute coefficient of drag used as part of the Parachute control mode for the ballistic 3D strategy."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetParachuteCd"](arg_newVal.COM_val))

    @property
    def WindForceEffectiveArea(self) -> float:
        """The vehicle's wind force effective area."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindForceEffectiveArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WindForceEffectiveArea.setter
    def WindForceEffectiveArea(self, newVal:float) -> None:
        """The vehicle's wind force effective area."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindForceEffectiveArea"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{49C1E15C-785F-4C84-AA50-2B29256811A6}", IBasicManeuverStrategyBallistic3D)
agcls.AgTypeNameMap["IBasicManeuverStrategyBallistic3D"] = IBasicManeuverStrategyBallistic3D

class IBasicManeuverStrategyPitch3D(object):
    """Interface used to access options for a pitch 3D strategy of a basic maneuver procedure."""
    _uuid = "{FF7B545D-B15A-46D9-BFB3-204C38672231}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlMode"] = _raise_uninitialized_error
        self.__dict__["_SetControlMode"] = _raise_uninitialized_error
        self.__dict__["_GetCommandFPA"] = _raise_uninitialized_error
        self.__dict__["_SetCommandFPA"] = _raise_uninitialized_error
        self.__dict__["_GetControlFPADot"] = _raise_uninitialized_error
        self.__dict__["_SetControlFPADot"] = _raise_uninitialized_error
        self.__dict__["_GetStopWhenFPAAchieved"] = _raise_uninitialized_error
        self.__dict__["_SetStopWhenFPAAchieved"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetWindForceEffectiveArea"] = _raise_uninitialized_error
        self.__dict__["_SetWindForceEffectiveArea"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IBasicManeuverStrategyPitch3D._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IBasicManeuverStrategyPitch3D from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IBasicManeuverStrategyPitch3D = agcom.GUID(IBasicManeuverStrategyPitch3D._uuid)
        vtable_offset_local = IBasicManeuverStrategyPitch3D._vtable_offset - 1
        self.__dict__["_GetControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetControlMode"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetCommandFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetCommandFPA"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetControlFPADot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetControlFPADot"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetStopWhenFPAAchieved"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopWhenFPAAchieved"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetWindForceEffectiveArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWindForceEffectiveArea"] = IAGFUNCTYPE(pUnk, IID_IBasicManeuverStrategyPitch3D, vtable_offset_local+11, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IBasicManeuverStrategyPitch3D.__dict__ and type(IBasicManeuverStrategyPitch3D.__dict__[attrname]) == property:
            return IBasicManeuverStrategyPitch3D.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IBasicManeuverStrategyPitch3D.")
    
    @property
    def ControlMode(self) -> "AgEAvtrPitch3DControlMode":
        """The control mode for the pitch 3D strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPitch3DControlMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlMode.setter
    def ControlMode(self, newVal:"AgEAvtrPitch3DControlMode") -> None:
        """The control mode for the pitch 3D strategy."""
        with agmarshall.AgEnum_arg(AgEAvtrPitch3DControlMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlMode"](arg_newVal.COM_val))

    @property
    def CommandFPA(self) -> typing.Any:
        """The commanded flight path angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCommandFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CommandFPA.setter
    def CommandFPA(self, newVal:typing.Any) -> None:
        """The commanded flight path angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCommandFPA"](arg_newVal.COM_val))

    @property
    def ControlFPADot(self) -> typing.Any:
        """The flight path angle rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlFPADot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlFPADot.setter
    def ControlFPADot(self, newVal:typing.Any) -> None:
        """The flight path angle rate."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlFPADot"](arg_newVal.COM_val))

    @property
    def StopWhenFPAAchieved(self) -> bool:
        """Stop when the commanded flight path angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopWhenFPAAchieved"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopWhenFPAAchieved.setter
    def StopWhenFPAAchieved(self, newVal:bool) -> None:
        """Stop when the commanded flight path angle is achieved."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopWhenFPAAchieved"](arg_newVal.COM_val))

    @property
    def AirspeedOptions(self) -> "IBasicManeuverAirspeedOptions":
        """Get the airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedOptions"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def WindForceEffectiveArea(self) -> float:
        """The vehicle's wind force effective area."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWindForceEffectiveArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WindForceEffectiveArea.setter
    def WindForceEffectiveArea(self, newVal:float) -> None:
        """The vehicle's wind force effective area."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWindForceEffectiveArea"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FF7B545D-B15A-46D9-BFB3-204C38672231}", IBasicManeuverStrategyPitch3D)
agcls.AgTypeNameMap["IBasicManeuverStrategyPitch3D"] = IBasicManeuverStrategyPitch3D

class ITakeoffNormal(object):
    """The interface used to access the options for a Normal takeoff mode. The mode must be set to Normal to access this interface."""
    _uuid = "{0a373629-d29b-4c4f-a59f-54fc567022cb}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTakeoffClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetHoldOnDeck"] = _raise_uninitialized_error
        self.__dict__["_SetHoldOnDeck"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ITakeoffNormal._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ITakeoffNormal from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ITakeoffNormal = agcom.GUID(ITakeoffNormal._uuid)
        vtable_offset_local = ITakeoffNormal._vtable_offset - 1
        self.__dict__["_GetTakeoffClimbAngle"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetTakeoffClimbAngle"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDepartureAltitude"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDepartureAltitude"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffNormal, vtable_offset_local+10, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ITakeoffNormal.__dict__ and type(ITakeoffNormal.__dict__[attrname]) == property:
            return ITakeoffNormal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ITakeoffNormal.")
    
    @property
    def TakeoffClimbAngle(self) -> typing.Any:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffClimbAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TakeoffClimbAngle.setter
    def TakeoffClimbAngle(self, inVal:typing.Any) -> None:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffClimbAngle"](arg_inVal.COM_val))

    @property
    def DepartureAltitude(self) -> float:
        """The aircraft's altitude when it departs the runway."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DepartureAltitude.setter
    def DepartureAltitude(self, inVal:float) -> None:
        """The aircraft's altitude when it departs the runway."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureAltitude"](arg_inVal.COM_val))

    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldOnDeck"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldOnDeck"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0a373629-d29b-4c4f-a59f-54fc567022cb}", ITakeoffNormal)
agcls.AgTypeNameMap["ITakeoffNormal"] = ITakeoffNormal

class ITakeoffDeparturePoint(object):
    """The interface used to access the options for a Departure Point takeoff mode. The mode must be set to Departure Point to access this interface."""
    _uuid = "{24e5949d-456b-4abb-9d46-7095d8ad0fb3}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTakeoffClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffClimbAngle"] = _raise_uninitialized_error
        self.__dict__["_GetDepartureAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetDepartureAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDeparturePointRange"] = _raise_uninitialized_error
        self.__dict__["_SetDeparturePointRange"] = _raise_uninitialized_error
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetHoldOnDeck"] = _raise_uninitialized_error
        self.__dict__["_SetHoldOnDeck"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ITakeoffDeparturePoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ITakeoffDeparturePoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ITakeoffDeparturePoint = agcom.GUID(ITakeoffDeparturePoint._uuid)
        vtable_offset_local = ITakeoffDeparturePoint._vtable_offset - 1
        self.__dict__["_GetTakeoffClimbAngle"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetTakeoffClimbAngle"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDepartureAltitude"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDepartureAltitude"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDeparturePointRange"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeparturePointRange"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffDeparturePoint, vtable_offset_local+12, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ITakeoffDeparturePoint.__dict__ and type(ITakeoffDeparturePoint.__dict__[attrname]) == property:
            return ITakeoffDeparturePoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ITakeoffDeparturePoint.")
    
    @property
    def TakeoffClimbAngle(self) -> typing.Any:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffClimbAngle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TakeoffClimbAngle.setter
    def TakeoffClimbAngle(self, inVal:typing.Any) -> None:
        """The angle at which the aircraft will climb from the procedure site to the departure point."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffClimbAngle"](arg_inVal.COM_val))

    @property
    def DepartureAltitude(self) -> float:
        """The aircraft's altitude when it departs the runway."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDepartureAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DepartureAltitude.setter
    def DepartureAltitude(self, inVal:float) -> None:
        """The aircraft's altitude when it departs the runway."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDepartureAltitude"](arg_inVal.COM_val))

    @property
    def DeparturePointRange(self) -> float:
        """The downrange distance the aircraft will travel when departing the runway."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeparturePointRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @DeparturePointRange.setter
    def DeparturePointRange(self, inVal:float) -> None:
        """The downrange distance the aircraft will travel when departing the runway."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeparturePointRange"](arg_inVal.COM_val))

    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldOnDeck"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldOnDeck"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{24e5949d-456b-4abb-9d46-7095d8ad0fb3}", ITakeoffDeparturePoint)
agcls.AgTypeNameMap["ITakeoffDeparturePoint"] = ITakeoffDeparturePoint

class ITakeoffLowTransition(object):
    """The interface used to access the options for a Low Transition takeoff mode. The mode must be set to Low Transition to access this interface."""
    _uuid = "{f205a7c2-5797-4e9f-aac6-7dfe110bcec0}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetHoldOnDeck"] = _raise_uninitialized_error
        self.__dict__["_SetHoldOnDeck"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ITakeoffLowTransition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ITakeoffLowTransition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ITakeoffLowTransition = agcom.GUID(ITakeoffLowTransition._uuid)
        vtable_offset_local = ITakeoffLowTransition._vtable_offset - 1
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_ITakeoffLowTransition, vtable_offset_local+6, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ITakeoffLowTransition.__dict__ and type(ITakeoffLowTransition.__dict__[attrname]) == property:
            return ITakeoffLowTransition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ITakeoffLowTransition.")
    
    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldOnDeck"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldOnDeck"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f205a7c2-5797-4e9f-aac6-7dfe110bcec0}", ITakeoffLowTransition)
agcls.AgTypeNameMap["ITakeoffLowTransition"] = ITakeoffLowTransition

class IRefStateForwardFlightOptions(object):
    """Interface used to access the forward flight options for a reference state procedure."""
    _uuid = "{f5baa380-d776-4591-a9c6-4836d6919165}"
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTASDot"] = _raise_uninitialized_error
        self.__dict__["_GetGroundspeedDot"] = _raise_uninitialized_error
        self.__dict__["_GetLongitudinalAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLongitudinalAccel"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetCourse"] = _raise_uninitialized_error
        self.__dict__["_SetCourse"] = _raise_uninitialized_error
        self.__dict__["_GetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingDot"] = _raise_uninitialized_error
        self.__dict__["_GetCourseDot"] = _raise_uninitialized_error
        self.__dict__["_GetLateralAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLateralAccel"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAOA"] = _raise_uninitialized_error
        self.__dict__["_SetAOA"] = _raise_uninitialized_error
        self.__dict__["_GetSideslip"] = _raise_uninitialized_error
        self.__dict__["_SetSideslip"] = _raise_uninitialized_error
        self.__dict__["_GetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetPushPullG"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeRateType"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRefStateForwardFlightOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRefStateForwardFlightOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRefStateForwardFlightOptions = agcom.GUID(IRefStateForwardFlightOptions._uuid)
        vtable_offset_local = IRefStateForwardFlightOptions._vtable_offset - 1
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+3, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetTASDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetGroundspeedDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLongitudinalAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetLongitudinalAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+16, POINTER(agcom.VARIANT))
        self.__dict__["_SetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+17, agcom.VARIANT)
        self.__dict__["_GetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeadingDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+20, POINTER(agcom.VARIANT))
        self.__dict__["_GetCourseDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_GetLateralAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetLateralAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+23, agcom.LONG, agcom.VARIANT)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+24, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+25, agcom.VARIANT)
        self.__dict__["_GetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+26, POINTER(agcom.VARIANT))
        self.__dict__["_SetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+27, agcom.VARIANT)
        self.__dict__["_GetSideslip"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+28, POINTER(agcom.VARIANT))
        self.__dict__["_SetSideslip"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+29, agcom.VARIANT)
        self.__dict__["_GetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+30, POINTER(agcom.VARIANT))
        self.__dict__["_GetPushPullG"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAttitudeRateType"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+32, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateForwardFlightOptions, vtable_offset_local+33, agcom.LONG, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRefStateForwardFlightOptions.__dict__ and type(IRefStateForwardFlightOptions.__dict__[attrname]) == property:
            return IRefStateForwardFlightOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRefStateForwardFlightOptions.")
    
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The initial pitch angle of the flight path."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathAngle"](arg_newVal.COM_val))

    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTASDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeedDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitudinalAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode, accelType) as arg_accelType, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLongitudinalAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_newVal.COM_val))

    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingIsMagnetic"](arg_newVal.COM_val))

    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourse"](arg_newVal.COM_val))

    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourseIsMagnetic"](arg_newVal.COM_val))

    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLateralAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode, accelType) as arg_accelType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLateralAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAOA"](arg_newVal.COM_val))

    @property
    def Sideslip(self) -> typing.Any:
        """The aircraft's yaw angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSideslip"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sideslip.setter
    def Sideslip(self, newVal:typing.Any) -> None:
        """The aircraft's yaw angle"""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSideslip"](arg_newVal.COM_val))

    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPushPullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeRateType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode, attitudeRateType) as arg_attitudeRateType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeRate"](arg_attitudeRateType.COM_val, arg_value.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f5baa380-d776-4591-a9c6-4836d6919165}", IRefStateForwardFlightOptions)
agcls.AgTypeNameMap["IRefStateForwardFlightOptions"] = IRefStateForwardFlightOptions

class IRefStateHoverOptions(object):
    """Interface used to access the hover options for a reference state procedure."""
    _uuid = "{42eb7689-e629-44f0-b832-44dcbecbeb3e}"
    _num_methods = 28
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGroundspeed"] = _raise_uninitialized_error
        self.__dict__["_SetGroundspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetTASDot"] = _raise_uninitialized_error
        self.__dict__["_GetGroundspeedDot"] = _raise_uninitialized_error
        self.__dict__["_GetLongitudinalAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLongitudinalAccel"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetCourse"] = _raise_uninitialized_error
        self.__dict__["_SetCourse"] = _raise_uninitialized_error
        self.__dict__["_GetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingDot"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingDot"] = _raise_uninitialized_error
        self.__dict__["_GetCourseDot"] = _raise_uninitialized_error
        self.__dict__["_SetCourseDot"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAOA"] = _raise_uninitialized_error
        self.__dict__["_SetAOA"] = _raise_uninitialized_error
        self.__dict__["_GetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetPushPullG"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeRateType"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRefStateHoverOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRefStateHoverOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRefStateHoverOptions = agcom.GUID(IRefStateHoverOptions._uuid)
        vtable_offset_local = IRefStateHoverOptions._vtable_offset - 1
        self.__dict__["_GetGroundspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGroundspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetTASDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetGroundspeedDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLongitudinalAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetLongitudinalAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+8, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeadingDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+17, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeadingDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+18, agcom.VARIANT)
        self.__dict__["_GetCourseDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+19, POINTER(agcom.VARIANT))
        self.__dict__["_SetCourseDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+20, agcom.VARIANT)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+22, agcom.VARIANT)
        self.__dict__["_GetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+23, POINTER(agcom.VARIANT))
        self.__dict__["_SetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+24, agcom.VARIANT)
        self.__dict__["_GetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_GetPushPullG"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAttitudeRateType"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+27, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateHoverOptions, vtable_offset_local+28, agcom.LONG, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRefStateHoverOptions.__dict__ and type(IRefStateHoverOptions.__dict__[attrname]) == property:
            return IRefStateHoverOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRefStateHoverOptions.")
    
    @property
    def Groundspeed(self) -> float:
        """The aircraft's speed relative to the ground."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Groundspeed.setter
    def Groundspeed(self, newVal:float) -> None:
        """The aircraft's speed relative to the ground."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGroundspeed"](arg_newVal.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTASDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeedDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitudinalAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode, accelType) as arg_accelType, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLongitudinalAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_newVal.COM_val))

    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingIsMagnetic"](arg_newVal.COM_val))

    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourse"](arg_newVal.COM_val))

    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourseIsMagnetic"](arg_newVal.COM_val))

    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingDot.setter
    def HeadingDot(self, newVal:typing.Any) -> None:
        """The heading rate of change."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingDot"](arg_newVal.COM_val))

    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CourseDot.setter
    def CourseDot(self, newVal:typing.Any) -> None:
        """The course rate of change."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourseDot"](arg_newVal.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAOA"](arg_newVal.COM_val))

    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPushPullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeRateType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode, attitudeRateType) as arg_attitudeRateType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeRate"](arg_attitudeRateType.COM_val, arg_value.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{42eb7689-e629-44f0-b832-44dcbecbeb3e}", IRefStateHoverOptions)
agcls.AgTypeNameMap["IRefStateHoverOptions"] = IRefStateHoverOptions

class IRefStateWeightOnWheelsOptions(object):
    """Interface used to access the weight on wheels options for a reference state procedure."""
    _uuid = "{14db8803-47cd-4009-b496-13caaa53babe}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGroundspeed"] = _raise_uninitialized_error
        self.__dict__["_SetGroundspeed"] = _raise_uninitialized_error
        self.__dict__["_GetTASDot"] = _raise_uninitialized_error
        self.__dict__["_GetGroundspeedDot"] = _raise_uninitialized_error
        self.__dict__["_GetLongitudinalAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLongitudinalAccel"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingDot"] = _raise_uninitialized_error
        self.__dict__["_GetCourseDot"] = _raise_uninitialized_error
        self.__dict__["_GetLateralAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLateralAccel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRefStateWeightOnWheelsOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRefStateWeightOnWheelsOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRefStateWeightOnWheelsOptions = agcom.GUID(IRefStateWeightOnWheelsOptions._uuid)
        vtable_offset_local = IRefStateWeightOnWheelsOptions._vtable_offset - 1
        self.__dict__["_GetGroundspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGroundspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetTASDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetGroundspeedDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLongitudinalAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetLongitudinalAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+6, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeadingDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_GetCourseDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_GetLateralAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetLateralAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateWeightOnWheelsOptions, vtable_offset_local+14, agcom.LONG, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRefStateWeightOnWheelsOptions.__dict__ and type(IRefStateWeightOnWheelsOptions.__dict__[attrname]) == property:
            return IRefStateWeightOnWheelsOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRefStateWeightOnWheelsOptions.")
    
    @property
    def Groundspeed(self) -> float:
        """The aircraft's speed relative to the ground."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Groundspeed.setter
    def Groundspeed(self, newVal:float) -> None:
        """The aircraft's speed relative to the ground."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGroundspeed"](arg_newVal.COM_val))

    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTASDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeedDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitudinalAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode, accelType) as arg_accelType, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLongitudinalAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_newVal.COM_val))

    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingIsMagnetic"](arg_newVal.COM_val))

    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLateralAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode, accelType) as arg_accelType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLateralAccel"](arg_accelType.COM_val, arg_value.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{14db8803-47cd-4009-b496-13caaa53babe}", IRefStateWeightOnWheelsOptions)
agcls.AgTypeNameMap["IRefStateWeightOnWheelsOptions"] = IRefStateWeightOnWheelsOptions

class IRefStateTakeoffLandingOptions(object):
    """Interface used to access the takeoff or landing options for a reference state procedure."""
    _uuid = "{b510a16b-3a33-408e-bed8-33dd61b76617}"
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetTASDot"] = _raise_uninitialized_error
        self.__dict__["_GetGroundspeedDot"] = _raise_uninitialized_error
        self.__dict__["_GetLongitudinalAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLongitudinalAccel"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetCourse"] = _raise_uninitialized_error
        self.__dict__["_SetCourse"] = _raise_uninitialized_error
        self.__dict__["_GetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetCourseIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingDot"] = _raise_uninitialized_error
        self.__dict__["_GetCourseDot"] = _raise_uninitialized_error
        self.__dict__["_GetLateralAccelType"] = _raise_uninitialized_error
        self.__dict__["_SetLateralAccel"] = _raise_uninitialized_error
        self.__dict__["_GetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_SetRollAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAOA"] = _raise_uninitialized_error
        self.__dict__["_SetAOA"] = _raise_uninitialized_error
        self.__dict__["_GetSideslip"] = _raise_uninitialized_error
        self.__dict__["_SetSideslip"] = _raise_uninitialized_error
        self.__dict__["_GetPitchRate"] = _raise_uninitialized_error
        self.__dict__["_GetPushPullG"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeRateType"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IRefStateTakeoffLandingOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IRefStateTakeoffLandingOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IRefStateTakeoffLandingOptions = agcom.GUID(IRefStateTakeoffLandingOptions._uuid)
        vtable_offset_local = IRefStateTakeoffLandingOptions._vtable_offset - 1
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+3, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetTASDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetGroundspeedDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_GetLongitudinalAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetLongitudinalAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+11, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHeadingIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+16, POINTER(agcom.VARIANT))
        self.__dict__["_SetCourse"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+17, agcom.VARIANT)
        self.__dict__["_GetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetCourseIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeadingDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+20, POINTER(agcom.VARIANT))
        self.__dict__["_GetCourseDot"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_GetLateralAccelType"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetLateralAccel"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+23, agcom.LONG, agcom.VARIANT)
        self.__dict__["_GetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+24, POINTER(agcom.VARIANT))
        self.__dict__["_SetRollAngle"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+25, agcom.VARIANT)
        self.__dict__["_GetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+26, POINTER(agcom.VARIANT))
        self.__dict__["_SetAOA"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+27, agcom.VARIANT)
        self.__dict__["_GetSideslip"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+28, POINTER(agcom.VARIANT))
        self.__dict__["_SetSideslip"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+29, agcom.VARIANT)
        self.__dict__["_GetPitchRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+30, POINTER(agcom.VARIANT))
        self.__dict__["_GetPushPullG"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAttitudeRateType"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+32, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeRate"] = IAGFUNCTYPE(pUnk, IID_IRefStateTakeoffLandingOptions, vtable_offset_local+33, agcom.LONG, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IRefStateTakeoffLandingOptions.__dict__ and type(IRefStateTakeoffLandingOptions.__dict__[attrname]) == property:
            return IRefStateTakeoffLandingOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IRefStateTakeoffLandingOptions.")
    
    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        """The rate at which the aircraft will climb or descend."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def FlightPathAngle(self) -> typing.Any:
        """The initial pitch angle of the flight path."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The initial pitch angle of the flight path."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathAngle"](arg_newVal.COM_val))

    @property
    def TASDot(self) -> float:
        """The true airspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTASDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def GroundspeedDot(self) -> float:
        """The groundspeed acceleration."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundspeedDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LongitudinalAccelType(self) -> "AgEAvtrRefStateLongitudinalAccelMode":
        """The mode to specify the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitudinalAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLongitudinalAccel(self, accelType:"AgEAvtrRefStateLongitudinalAccelMode", value:float) -> None:
        """Set the longitudinal acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLongitudinalAccelMode, accelType) as arg_accelType, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLongitudinalAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Heading.setter
    def Heading(self, newVal:typing.Any) -> None:
        """The direction the aircraft is pointing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_newVal.COM_val))

    @property
    def HeadingIsMagnetic(self) -> bool:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingIsMagnetic.setter
    def HeadingIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the heading using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingIsMagnetic"](arg_newVal.COM_val))

    @property
    def Course(self) -> typing.Any:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Course.setter
    def Course(self, newVal:typing.Any) -> None:
        """The direction the aircraft is traveling."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourse"](arg_newVal.COM_val))

    @property
    def CourseIsMagnetic(self) -> bool:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CourseIsMagnetic.setter
    def CourseIsMagnetic(self, newVal:bool) -> None:
        """Opt whether to specify the course using magnetic North."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourseIsMagnetic"](arg_newVal.COM_val))

    @property
    def HeadingDot(self) -> typing.Any:
        """The heading rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CourseDot(self) -> typing.Any:
        """The course rate of change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseDot"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LateralAccelType(self) -> "AgEAvtrRefStateLateralAccelMode":
        """The mode to specify the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLateralAccelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetLateralAccel(self, accelType:"AgEAvtrRefStateLateralAccelMode", value:typing.Any) -> None:
        """Set the lateral acceleration."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateLateralAccelMode, accelType) as arg_accelType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetLateralAccel"](arg_accelType.COM_val, arg_value.COM_val))

    @property
    def RollAngle(self) -> typing.Any:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRollAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RollAngle.setter
    def RollAngle(self, newVal:typing.Any) -> None:
        """The aircraft's bank angle."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRollAngle"](arg_newVal.COM_val))

    @property
    def AOA(self) -> typing.Any:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAOA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AOA.setter
    def AOA(self, newVal:typing.Any) -> None:
        """The aircraft's angle of attack."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAOA"](arg_newVal.COM_val))

    @property
    def Sideslip(self) -> typing.Any:
        """The aircraft's yaw angle."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSideslip"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sideslip.setter
    def Sideslip(self, newVal:typing.Any) -> None:
        """The aircraft's yaw angle"""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSideslip"](arg_newVal.COM_val))

    @property
    def PitchRate(self) -> typing.Any:
        """The aircraft's pitch rate."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPitchRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PushPullG(self) -> float:
        """The G force on the aircraft resulting from its attitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPushPullG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AttitudeRateType(self) -> "AgEAvtrRefStateAttitudeMode":
        """The mode to specify the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeRateType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAttitudeRate(self, attitudeRateType:"AgEAvtrRefStateAttitudeMode", value:typing.Any) -> None:
        """Set the vertical attitude rate."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStateAttitudeMode, attitudeRateType) as arg_attitudeRateType, \
             agmarshall.VARIANT_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeRate"](arg_attitudeRateType.COM_val, arg_value.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{b510a16b-3a33-408e-bed8-33dd61b76617}", IRefStateTakeoffLandingOptions)
agcls.AgTypeNameMap["IRefStateTakeoffLandingOptions"] = IRefStateTakeoffLandingOptions

class ILandingEnterDownwindPattern(object):
    """The interface used to access the options for a Downwind Pattern approach mode for a landing procedure. The approach mode must be set to Downwind Pattern to access this interface."""
    _uuid = "{6206fdbf-5eb3-41b4-8792-d562bb2ec92a}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_GetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_GetAbeamDistance"] = _raise_uninitialized_error
        self.__dict__["_SetAbeamDistance"] = _raise_uninitialized_error
        self.__dict__["_GetAbeamAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAbeamAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetFinalTurn"] = _raise_uninitialized_error
        self.__dict__["_SetFinalTurn"] = _raise_uninitialized_error
        self.__dict__["_GetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_SetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetTouchAndGo"] = _raise_uninitialized_error
        self.__dict__["_SetTouchAndGo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ILandingEnterDownwindPattern._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ILandingEnterDownwindPattern from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ILandingEnterDownwindPattern = agcom.GUID(ILandingEnterDownwindPattern._uuid)
        vtable_offset_local = ILandingEnterDownwindPattern._vtable_offset - 1
        self.__dict__["_GetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAbeamDistance"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAbeamDistance"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAbeamAltitude"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAbeamAltitude"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFinalTurn"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetFinalTurn"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingEnterDownwindPattern, vtable_offset_local+18, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ILandingEnterDownwindPattern.__dict__ and type(ILandingEnterDownwindPattern.__dict__[attrname]) == property:
            return ILandingEnterDownwindPattern.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ILandingEnterDownwindPattern.")
    
    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRange"](arg_inVal.COM_val))

    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRangeMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRangeMode"](arg_inVal.COM_val))

    @property
    def AbeamDistance(self) -> float:
        """The distance from the runway that the aircraft will fly the parallel leg of the landing pattern."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbeamDistance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AbeamDistance.setter
    def AbeamDistance(self, inVal:float) -> None:
        """The distance from the runway that the aircraft will fly the parallel leg of the landing pattern."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAbeamDistance"](arg_inVal.COM_val))

    @property
    def AbeamAltitude(self) -> float:
        """The altitude at which the aircraft will fly the parallel leg of the landing pattern."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbeamAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @AbeamAltitude.setter
    def AbeamAltitude(self, inVal:float) -> None:
        """The altitude at which the aircraft will fly the parallel leg of the landing pattern."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAbeamAltitude"](arg_inVal.COM_val))

    @property
    def FinalTurn(self) -> "AgEAvtrNavigatorTurnDir":
        """The direction of the turn that the aircraft will make when it lines up over the runway to land."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalTurn"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @FinalTurn.setter
    def FinalTurn(self, inVal:"AgEAvtrNavigatorTurnDir") -> None:
        """The direction of the turn that the aircraft will make when it lines up over the runway to land."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalTurn"](arg_inVal.COM_val))

    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlideslope"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGlideslope"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTouchAndGo"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTouchAndGo"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6206fdbf-5eb3-41b4-8792-d562bb2ec92a}", ILandingEnterDownwindPattern)
agcls.AgTypeNameMap["ILandingEnterDownwindPattern"] = ILandingEnterDownwindPattern

class ILandingInterceptGlideslope(object):
    """The interface used to access the options for an Intercept Glideslope approach mode for a landing procedure. The approach mode must be set to Intercept Glideslope to access this interface."""
    _uuid = "{534bfa1e-99e8-4188-a66a-53166e8d6536}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_GetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_GetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_SetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetTouchAndGo"] = _raise_uninitialized_error
        self.__dict__["_SetTouchAndGo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ILandingInterceptGlideslope._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ILandingInterceptGlideslope from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ILandingInterceptGlideslope = agcom.GUID(ILandingInterceptGlideslope._uuid)
        vtable_offset_local = ILandingInterceptGlideslope._vtable_offset - 1
        self.__dict__["_GetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingInterceptGlideslope, vtable_offset_local+12, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ILandingInterceptGlideslope.__dict__ and type(ILandingInterceptGlideslope.__dict__[attrname]) == property:
            return ILandingInterceptGlideslope.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ILandingInterceptGlideslope.")
    
    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRange"](arg_inVal.COM_val))

    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRangeMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRangeMode"](arg_inVal.COM_val))

    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlideslope"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGlideslope"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTouchAndGo"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTouchAndGo"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{534bfa1e-99e8-4188-a66a-53166e8d6536}", ILandingInterceptGlideslope)
agcls.AgTypeNameMap["ILandingInterceptGlideslope"] = ILandingInterceptGlideslope

class ILandingStandardInstrumentApproach(object):
    """The interface used to access the options for a Standard Instrument Approach mode for a landing procedure. The approach mode must be set to Standard Instrument Approach to access this interface."""
    _uuid = "{28c196c4-2768-49ce-a384-d0c37394be0f}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetApproachAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetApproachAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRange"] = _raise_uninitialized_error
        self.__dict__["_GetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_SetApproachFixRangeMode"] = _raise_uninitialized_error
        self.__dict__["_GetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_SetGlideslope"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRunwayAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_SetUseRunwayTerrain"] = _raise_uninitialized_error
        self.__dict__["_GetTouchAndGo"] = _raise_uninitialized_error
        self.__dict__["_SetTouchAndGo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ILandingStandardInstrumentApproach._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ILandingStandardInstrumentApproach from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ILandingStandardInstrumentApproach = agcom.GUID(ILandingStandardInstrumentApproach._uuid)
        vtable_offset_local = ILandingStandardInstrumentApproach._vtable_offset - 1
        self.__dict__["_GetApproachAltitude"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApproachAltitude"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApproachFixRange"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetApproachFixRangeMode"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetGlideslope"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRunwayAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRunwayTerrain"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTouchAndGo"] = IAGFUNCTYPE(pUnk, IID_ILandingStandardInstrumentApproach, vtable_offset_local+16, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ILandingStandardInstrumentApproach.__dict__ and type(ILandingStandardInstrumentApproach.__dict__[attrname]) == property:
            return ILandingStandardInstrumentApproach.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ILandingStandardInstrumentApproach.")
    
    @property
    def ApproachAltitude(self) -> float:
        """The aircraft's altitude at the Initial Approach Fix Range."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachAltitude"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachAltitude.setter
    def ApproachAltitude(self, inVal:float) -> None:
        """The aircraft's altitude at the Initial Approach Fix Range."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachAltitude"](arg_inVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, inVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_inVal.COM_val))

    @property
    def ApproachFixRange(self) -> float:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRange"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRange.setter
    def ApproachFixRange(self, inVal:float) -> None:
        """The range from the reference point of the runway at which the aircraft begins its landing approach."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRange"](arg_inVal.COM_val))

    @property
    def ApproachFixRangeMode(self) -> "AgEAvtrLandingApproachFixRangeMode":
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachFixRangeMode"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ApproachFixRangeMode.setter
    def ApproachFixRangeMode(self, inVal:"AgEAvtrLandingApproachFixRangeMode") -> None:
        """The reference point on the runway for the Approach Fix Range."""
        with agmarshall.AgEnum_arg(AgEAvtrLandingApproachFixRangeMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachFixRangeMode"](arg_inVal.COM_val))

    @property
    def Glideslope(self) -> typing.Any:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGlideslope"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Glideslope.setter
    def Glideslope(self, inVal:typing.Any) -> None:
        """The angle from the horizontal on which the aircraft descends to touchdown."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGlideslope"](arg_inVal.COM_val))

    @property
    def RunwayAltitudeOffset(self) -> float:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayAltitudeOffset"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @RunwayAltitudeOffset.setter
    def RunwayAltitudeOffset(self, inVal:float) -> None:
        """The altitude offset above the ground level."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunwayAltitudeOffset"](arg_inVal.COM_val))

    @property
    def UseRunwayTerrain(self) -> bool:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRunwayTerrain"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @UseRunwayTerrain.setter
    def UseRunwayTerrain(self, inVal:bool) -> None:
        """Opt whether to use terrain data to define the runway's ground level attitude."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRunwayTerrain"](arg_inVal.COM_val))

    @property
    def TouchAndGo(self) -> bool:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTouchAndGo"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @TouchAndGo.setter
    def TouchAndGo(self, inVal:bool) -> None:
        """Opt whether to perform a Touch and Go landing. The procedure will stop at wheels down and can be immediately followed by a takeoff procedure."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTouchAndGo"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{28c196c4-2768-49ce-a384-d0c37394be0f}", ILandingStandardInstrumentApproach)
agcls.AgTypeNameMap["ILandingStandardInstrumentApproach"] = ILandingStandardInstrumentApproach

class IProcedureBasicManeuver(object):
    """Interface used to access the options for a Basic Maneuver procedure"""
    _uuid = "{7cf58344-514c-44a6-aaf0-a45c4472e299}"
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_GetStopFuelState"] = _raise_uninitialized_error
        self.__dict__["_SetStopFuelState"] = _raise_uninitialized_error
        self.__dict__["_GetUseStopFuelState"] = _raise_uninitialized_error
        self.__dict__["_SetUseStopFuelState"] = _raise_uninitialized_error
        self.__dict__["_GetMaxDownrange"] = _raise_uninitialized_error
        self.__dict__["_SetMaxDownrange"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxDownrange"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxDownrange"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeLimitMode"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeLimitMode"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainImpactMode"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainImpactMode"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainImpactTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetTerrainImpactTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetNavigationStrategyType"] = _raise_uninitialized_error
        self.__dict__["_SetNavigationStrategyType"] = _raise_uninitialized_error
        self.__dict__["_GetNavigation"] = _raise_uninitialized_error
        self.__dict__["_GetProfileStrategyType"] = _raise_uninitialized_error
        self.__dict__["_SetProfileStrategyType"] = _raise_uninitialized_error
        self.__dict__["_GetProfile"] = _raise_uninitialized_error
        self.__dict__["_GetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_SetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_GetScaleFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetScaleFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeBlendTime"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeBlendTime"] = _raise_uninitialized_error
        self.__dict__["_GetControlTimeConstant"] = _raise_uninitialized_error
        self.__dict__["_SetControlTimeConstant"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureBasicManeuver._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureBasicManeuver from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureBasicManeuver = agcom.GUID(IProcedureBasicManeuver._uuid)
        vtable_offset_local = IProcedureBasicManeuver._vtable_offset - 1
        self.__dict__["_GetMaxTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetUseMaxTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetStopFuelState"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStopFuelState"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetUseStopFuelState"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseStopFuelState"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxDownrange"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxDownrange"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetUseMaxDownrange"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxDownrange"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeLimitMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeLimitMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetTerrainImpactMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetTerrainImpactMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetTerrainImpactTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTerrainImpactTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetNavigationStrategyType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetNavigationStrategyType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetNavigation"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+21, POINTER(agcom.PVOID))
        self.__dict__["_GetProfileStrategyType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+22, POINTER(agcom.BSTR))
        self.__dict__["_SetProfileStrategyType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+23, agcom.BSTR)
        self.__dict__["_GetProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+25, POINTER(agcom.LONG))
        self.__dict__["_SetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+26, agcom.LONG)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+27, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+28, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetScaleFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+31, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetScaleFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+32, agcom.VARIANT_BOOL)
        self.__dict__["_GetAttitudeBlendTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAttitudeBlendTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+34, agcom.DOUBLE)
        self.__dict__["_GetControlTimeConstant"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+35, POINTER(agcom.DOUBLE))
        self.__dict__["_SetControlTimeConstant"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+36, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicManeuver, vtable_offset_local+37, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureBasicManeuver.__dict__ and type(IProcedureBasicManeuver.__dict__[attrname]) == property:
            return IProcedureBasicManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureBasicManeuver.")
    
    @property
    def MaxTimeOfFlight(self) -> typing.Any:
        """Get the max time of flight."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTimeOfFlight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTimeOfFlight.setter
    def MaxTimeOfFlight(self, newVal:typing.Any) -> None:
        """Set the max time of flight."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTimeOfFlight"](arg_newVal.COM_val))

    @property
    def UseMaxTimeOfFlight(self) -> bool:
        """Get whether to use max time of flight."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxTimeOfFlight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxTimeOfFlight.setter
    def UseMaxTimeOfFlight(self, newVal:bool) -> None:
        """Set whether to use max time of flight."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxTimeOfFlight"](arg_newVal.COM_val))

    @property
    def StopFuelState(self) -> float:
        """Get the stop fuel state value."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopFuelState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopFuelState.setter
    def StopFuelState(self, newVal:float) -> None:
        """Set the stop fuel state value."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopFuelState"](arg_newVal.COM_val))

    @property
    def UseStopFuelState(self) -> bool:
        """Get whether to use stop fuel state."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseStopFuelState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseStopFuelState.setter
    def UseStopFuelState(self, newVal:bool) -> None:
        """Set whether to use stop fuel state."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseStopFuelState"](arg_newVal.COM_val))

    @property
    def MaxDownrange(self) -> float:
        """Get the max down range."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxDownrange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxDownrange.setter
    def MaxDownrange(self, newVal:float) -> None:
        """Set the max down range."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxDownrange"](arg_newVal.COM_val))

    @property
    def UseMaxDownrange(self) -> bool:
        """Get whether to use max down range."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxDownrange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxDownrange.setter
    def UseMaxDownrange(self, newVal:bool) -> None:
        """Set whether to use max down range."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxDownrange"](arg_newVal.COM_val))

    @property
    def AltitudeLimitMode(self) -> "AgEAvtrBasicManeuverAltitudeLimit":
        """Get the altitude limit mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeLimitMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeLimitMode.setter
    def AltitudeLimitMode(self, newVal:"AgEAvtrBasicManeuverAltitudeLimit") -> None:
        """Set the altitude limit mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeLimitMode"](arg_newVal.COM_val))

    @property
    def TerrainImpactMode(self) -> "AgEAvtrBasicManeuverAltitudeLimit":
        """Get the terrain impact mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainImpactMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TerrainImpactMode.setter
    def TerrainImpactMode(self, newVal:"AgEAvtrBasicManeuverAltitudeLimit") -> None:
        """Set the terrain impact mode."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverAltitudeLimit, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainImpactMode"](arg_newVal.COM_val))

    @property
    def TerrainImpactTimeOffset(self) -> float:
        """Get the terrain impact time offset."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainImpactTimeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TerrainImpactTimeOffset.setter
    def TerrainImpactTimeOffset(self, newVal:float) -> None:
        """Set the terrain impact time offset."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTerrainImpactTimeOffset"](arg_newVal.COM_val))

    @property
    def NavigationStrategyType(self) -> str:
        """Get the navigation strategy type."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavigationStrategyType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NavigationStrategyType.setter
    def NavigationStrategyType(self, newVal:str) -> None:
        """Set the navigation strategy type."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNavigationStrategyType"](arg_newVal.COM_val))

    @property
    def Navigation(self) -> "IBasicManeuverStrategy":
        """Get the interface for the navigation strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavigation"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProfileStrategyType(self) -> str:
        """Get the profile strategy type."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProfileStrategyType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProfileStrategyType.setter
    def ProfileStrategyType(self, newVal:str) -> None:
        """Set the profile strategy type."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProfileStrategyType"](arg_newVal.COM_val))

    @property
    def Profile(self) -> "IBasicManeuverStrategy":
        """Get the interface for the profile strategy."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetProfile"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model  that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightMode"](arg_newVal.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrBasicManeuverFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrBasicManeuverFuelFlowType") -> None:
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlowValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlowValue"](arg_newVal.COM_val))

    @property
    def ScaleFuelFlow(self) -> bool:
        """Opt whether to scale the fuel flow based on the aircraft's actual attitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleFuelFlow.setter
    def ScaleFuelFlow(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleFuelFlow"](arg_pVal.COM_val))

    @property
    def AttitudeBlendTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the attitude of the previous maneuver to the attitude at the beginning of the current maneuver."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeBlendTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeBlendTime.setter
    def AttitudeBlendTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeBlendTime"](arg_newVal.COM_val))

    @property
    def ControlTimeConstant(self) -> float:
        """A smoothing constant for the performance of control surfaces."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlTimeConstant"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ControlTimeConstant.setter
    def ControlTimeConstant(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetControlTimeConstant"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{7cf58344-514c-44a6-aaf0-a45c4472e299}", IProcedureBasicManeuver)
agcls.AgTypeNameMap["IProcedureBasicManeuver"] = IProcedureBasicManeuver

class ISiteWaypoint(object):
    """Interface used to access the options for a waypoint site."""
    _uuid = "{caca5c56-6c49-4de7-ae28-8361d3f8cdee}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteWaypoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteWaypoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteWaypoint = agcom.GUID(ISiteWaypoint._uuid)
        vtable_offset_local = ISiteWaypoint._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypoint, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypoint, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypoint, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypoint, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypoint, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteWaypoint.__dict__ and type(ISiteWaypoint.__dict__[attrname]) == property:
            return ISiteWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteWaypoint.")
    
    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{caca5c56-6c49-4de7-ae28-8361d3f8cdee}", ISiteWaypoint)
agcls.AgTypeNameMap["ISiteWaypoint"] = ISiteWaypoint

class ISiteEndOfPrevProcedure(object):
    """Interface used to access the options for an End of Previous Procedure site type."""
    _uuid = "{338fad56-1c3d-4572-97e4-24e01b1d7e65}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteEndOfPrevProcedure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteEndOfPrevProcedure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteEndOfPrevProcedure = agcom.GUID(ISiteEndOfPrevProcedure._uuid)
        vtable_offset_local = ISiteEndOfPrevProcedure._vtable_offset - 1
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteEndOfPrevProcedure, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteEndOfPrevProcedure.__dict__ and type(ISiteEndOfPrevProcedure.__dict__[attrname]) == property:
            return ISiteEndOfPrevProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteEndOfPrevProcedure.")
    
    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{338fad56-1c3d-4572-97e4-24e01b1d7e65}", ISiteEndOfPrevProcedure)
agcls.AgTypeNameMap["ISiteEndOfPrevProcedure"] = ISiteEndOfPrevProcedure

class ISiteVTOLPoint(object):
    """Interface used to access the options for a VTOL Point site."""
    _uuid = "{168a5693-2f2c-4db8-822e-dd3571fe8fac}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteVTOLPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteVTOLPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteVTOLPoint = agcom.GUID(ISiteVTOLPoint._uuid)
        vtable_offset_local = ISiteVTOLPoint._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPoint, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteVTOLPoint.__dict__ and type(ISiteVTOLPoint.__dict__[attrname]) == property:
            return ISiteVTOLPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteVTOLPoint.")
    
    @property
    def Latitude(self) -> typing.Any:
        """The VTOL Point latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The VTOL Point latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The VTOL Point longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The VTOL Point longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude for the site."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the site."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeReference"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeReference"](arg_newVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{168a5693-2f2c-4db8-822e-dd3571fe8fac}", ISiteVTOLPoint)
agcls.AgTypeNameMap["ISiteVTOLPoint"] = ISiteVTOLPoint

class ISiteSTKVehicle(object):
    """Interface used to access the options for a STK Vehicle site."""
    _uuid = "{a0260a3b-b3fc-48e8-8708-01c1d9edc6c5}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteSTKVehicle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteSTKVehicle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteSTKVehicle = agcom.GUID(ISiteSTKVehicle._uuid)
        vtable_offset_local = ISiteSTKVehicle._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKVehicle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKVehicle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKVehicle, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKVehicle, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteSTKVehicle.__dict__ and type(ISiteSTKVehicle.__dict__[attrname]) == property:
            return ISiteSTKVehicle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteSTKVehicle.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{a0260a3b-b3fc-48e8-8708-01c1d9edc6c5}", ISiteSTKVehicle)
agcls.AgTypeNameMap["ISiteSTKVehicle"] = ISiteSTKVehicle

class ISiteReferenceState(object):
    """Interface used to access the options for a Reference State site."""
    _uuid = "{3366da2b-74d8-47ef-8578-a304409e9401}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteReferenceState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteReferenceState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteReferenceState = agcom.GUID(ISiteReferenceState._uuid)
        vtable_offset_local = ISiteReferenceState._vtable_offset - 1
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteReferenceState, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteReferenceState.__dict__ and type(ISiteReferenceState.__dict__[attrname]) == property:
            return ISiteReferenceState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteReferenceState.")
    
    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{3366da2b-74d8-47ef-8578-a304409e9401}", ISiteReferenceState)
agcls.AgTypeNameMap["ISiteReferenceState"] = ISiteReferenceState

class ISiteSuperProcedure(object):
    """Interface used to access the options for a Super Procedure site."""
    _uuid = "{0f56f3fe-b661-4d53-84f6-14df85184626}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteSuperProcedure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteSuperProcedure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteSuperProcedure = agcom.GUID(ISiteSuperProcedure._uuid)
        vtable_offset_local = ISiteSuperProcedure._vtable_offset - 1
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteSuperProcedure, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteSuperProcedure.__dict__ and type(ISiteSuperProcedure.__dict__[attrname]) == property:
            return ISiteSuperProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteSuperProcedure.")
    
    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{0f56f3fe-b661-4d53-84f6-14df85184626}", ISiteSuperProcedure)
agcls.AgTypeNameMap["ISiteSuperProcedure"] = ISiteSuperProcedure

class ISiteRelToPrevProcedure(object):
    """Interface used to access the options for a Relative to Previous Procedure site."""
    _uuid = "{5875fefc-17f1-4fed-a7d8-cde213515f2b}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBearingMode"] = _raise_uninitialized_error
        self.__dict__["_SetBearingMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteRelToPrevProcedure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteRelToPrevProcedure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteRelToPrevProcedure = agcom.GUID(ISiteRelToPrevProcedure._uuid)
        vtable_offset_local = ISiteRelToPrevProcedure._vtable_offset - 1
        self.__dict__["_GetBearingMode"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetBearingMode"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToPrevProcedure, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteRelToPrevProcedure.__dict__ and type(ISiteRelToPrevProcedure.__dict__[attrname]) == property:
            return ISiteRelToPrevProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteRelToPrevProcedure.")
    
    @property
    def BearingMode(self) -> "AgEAvtrRelAbsBearing":
        """The bearing reference."""
        with agmarshall.AgEnum_arg(AgEAvtrRelAbsBearing) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BearingMode.setter
    def BearingMode(self, newVal:"AgEAvtrRelAbsBearing") -> None:
        """The bearing reference."""
        with agmarshall.AgEnum_arg(AgEAvtrRelAbsBearing, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearingMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing to define the site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing to define the site."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The range from the previous procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range from the previous procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{5875fefc-17f1-4fed-a7d8-cde213515f2b}", ISiteRelToPrevProcedure)
agcls.AgTypeNameMap["ISiteRelToPrevProcedure"] = ISiteRelToPrevProcedure

class ISiteSTKObjectWaypoint(object):
    """Interface used to access the options for a STK Object Waypoint site."""
    _uuid = "{b6021d54-bf89-41b2-a5bc-0ee0c064a0f3}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetMinTime"] = _raise_uninitialized_error
        self.__dict__["_GetWaypointTime"] = _raise_uninitialized_error
        self.__dict__["_SetWaypointTime"] = _raise_uninitialized_error
        self.__dict__["_GetMinimizeSiteProcTimeDiff"] = _raise_uninitialized_error
        self.__dict__["_SetMinimizeSiteProcTimeDiff"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTime"] = _raise_uninitialized_error
        self.__dict__["_GetOffsetMode"] = _raise_uninitialized_error
        self.__dict__["_SetOffsetMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetVGTPoint"] = _raise_uninitialized_error
        self.__dict__["_SetVGTPoint"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteSTKObjectWaypoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteSTKObjectWaypoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteSTKObjectWaypoint = agcom.GUID(ISiteSTKObjectWaypoint._uuid)
        vtable_offset_local = ISiteSTKObjectWaypoint._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetMinTime"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_GetWaypointTime"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetWaypointTime"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetMinimizeSiteProcTimeDiff"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMinimizeSiteProcTimeDiff"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetMaxTime"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_GetOffsetMode"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetOffsetMode"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetVGTPoint"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+18, POINTER(agcom.BSTR))
        self.__dict__["_SetVGTPoint"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+19, agcom.BSTR)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKObjectWaypoint, vtable_offset_local+20, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteSTKObjectWaypoint.__dict__ and type(ISiteSTKObjectWaypoint.__dict__[attrname]) == property:
            return ISiteSTKObjectWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteSTKObjectWaypoint.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def MinTime(self) -> typing.Any:
        """The earliest time that the object is available as a site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def WaypointTime(self) -> typing.Any:
        """The time at which the object's position will be used as a waypoint."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWaypointTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WaypointTime.setter
    def WaypointTime(self, newVal:typing.Any) -> None:
        """The time at which the object's position will be used as a waypoint."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWaypointTime"](arg_newVal.COM_val))

    @property
    def MinimizeSiteProcTimeDiff(self) -> "AgEAvtrMinimizeSiteProcTimeDiff":
        """The mode to minimize the time difference between the procedure and site times."""
        with agmarshall.AgEnum_arg(AgEAvtrMinimizeSiteProcTimeDiff) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimizeSiteProcTimeDiff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinimizeSiteProcTimeDiff.setter
    def MinimizeSiteProcTimeDiff(self, newVal:"AgEAvtrMinimizeSiteProcTimeDiff") -> None:
        """The mode to minimize the time difference between the procedure and site times."""
        with agmarshall.AgEnum_arg(AgEAvtrMinimizeSiteProcTimeDiff, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinimizeSiteProcTimeDiff"](arg_newVal.COM_val))

    @property
    def MaxTime(self) -> typing.Any:
        """The latest time that the object is available as a site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OffsetMode(self) -> "AgEAvtrSTKObjectWaypointOffsetMode":
        """The mode to offset the site location relative from the STK Object."""
        with agmarshall.AgEnum_arg(AgEAvtrSTKObjectWaypointOffsetMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOffsetMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OffsetMode.setter
    def OffsetMode(self, newVal:"AgEAvtrSTKObjectWaypointOffsetMode") -> None:
        """The mode to offset the site location relative from the STK Object."""
        with agmarshall.AgEnum_arg(AgEAvtrSTKObjectWaypointOffsetMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOffsetMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing offset of the site location relative to the object's position."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing offset of the site location relative to the object's position."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic heading for the bearing."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the bearing."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticBearing"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The range offset of the site location relative to the object's position."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range offset of the site location relative to the object's position."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    @property
    def VGTPoint(self) -> str:
        """The reference VGT Point."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVGTPoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VGTPoint.setter
    def VGTPoint(self, newVal:str) -> None:
        """The reference VGT Point."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVGTPoint"](arg_newVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{b6021d54-bf89-41b2-a5bc-0ee0c064a0f3}", ISiteSTKObjectWaypoint)
agcls.AgTypeNameMap["ISiteSTKObjectWaypoint"] = ISiteSTKObjectWaypoint

class ISiteSTKStaticObject(object):
    """Interface used to access the options for a STK Static Object site."""
    _uuid = "{b9b132d7-25a7-49c2-8f68-945ef572a4fe}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteSTKStaticObject._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteSTKStaticObject from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteSTKStaticObject = agcom.GUID(ISiteSTKStaticObject._uuid)
        vtable_offset_local = ISiteSTKStaticObject._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKStaticObject, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKStaticObject, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKStaticObject, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKStaticObject, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteSTKStaticObject.__dict__ and type(ISiteSTKStaticObject.__dict__[attrname]) == property:
            return ISiteSTKStaticObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteSTKStaticObject.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{b9b132d7-25a7-49c2-8f68-945ef572a4fe}", ISiteSTKStaticObject)
agcls.AgTypeNameMap["ISiteSTKStaticObject"] = ISiteSTKStaticObject

class ISiteRelToSTKObject(object):
    """Interface used to access the options for a Relative to Stationary STK Object site."""
    _uuid = "{b0257931-faca-477d-a0a1-9f36cbbb5c7f}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteRelToSTKObject._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteRelToSTKObject from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteRelToSTKObject = agcom.GUID(ISiteRelToSTKObject._uuid)
        vtable_offset_local = ISiteRelToSTKObject._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteRelToSTKObject, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteRelToSTKObject.__dict__ and type(ISiteRelToSTKObject.__dict__[attrname]) == property:
            return ISiteRelToSTKObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteRelToSTKObject.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Bearing(self) -> typing.Any:
        """The bearing from the STK object."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing from the STK object."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic bearing."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic bearing."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticBearing"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The range from the STK object."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range from the STK object."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{b0257931-faca-477d-a0a1-9f36cbbb5c7f}", ISiteRelToSTKObject)
agcls.AgTypeNameMap["ISiteRelToSTKObject"] = ISiteRelToSTKObject

class ISiteSTKAreaTarget(object):
    """Interface used to access the options for a STK Area Target site."""
    _uuid = "{38dbad68-357f-4129-b8fb-3fbecd506e23}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteSTKAreaTarget._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteSTKAreaTarget from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteSTKAreaTarget = agcom.GUID(ISiteSTKAreaTarget._uuid)
        vtable_offset_local = ISiteSTKAreaTarget._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKAreaTarget, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKAreaTarget, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKAreaTarget, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteSTKAreaTarget, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteSTKAreaTarget.__dict__ and type(ISiteSTKAreaTarget.__dict__[attrname]) == property:
            return ISiteSTKAreaTarget.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteSTKAreaTarget.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{38dbad68-357f-4129-b8fb-3fbecd506e23}", ISiteSTKAreaTarget)
agcls.AgTypeNameMap["ISiteSTKAreaTarget"] = ISiteSTKAreaTarget

class ISiteRunway(object):
    """Interface used to access the options for a Runway site type."""
    _uuid = "{5b6661c4-9722-49ab-9236-ffbfe2821e86}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRef"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRef"] = _raise_uninitialized_error
        self.__dict__["_GetLowEndHeading"] = _raise_uninitialized_error
        self.__dict__["_SetLowEndHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHighEndHeading"] = _raise_uninitialized_error
        self.__dict__["_SetHighEndHeading"] = _raise_uninitialized_error
        self.__dict__["_GetIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_SetIsMagnetic"] = _raise_uninitialized_error
        self.__dict__["_AddToCatalog"] = _raise_uninitialized_error
        self.__dict__["_CopyFromCatalog"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteRunway._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteRunway from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteRunway = agcom.GUID(ISiteRunway._uuid)
        vtable_offset_local = ISiteRunway._vtable_offset - 1
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRef"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeRef"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetLowEndHeading"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowEndHeading"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetHighEndHeading"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetHighEndHeading"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIsMagnetic"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_AddToCatalog"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_CopyFromCatalog"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+18, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteRunway, vtable_offset_local+19, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteRunway.__dict__ and type(ISiteRunway.__dict__[attrname]) == property:
            return ISiteRunway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteRunway.")
    
    @property
    def Altitude(self) -> float:
        """The runway altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The runway altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def Latitude(self) -> typing.Any:
        """The runway latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The runway latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The runway longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The runway longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Length(self) -> float:
        """The length of the runway"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Length.setter
    def Length(self, newVal:float) -> None:
        """The length of the runway"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_newVal.COM_val))

    @property
    def AltitudeRef(self) -> "AgEAvtrAGLMSL":
        """The altitude reference for the runway."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRef"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRef.setter
    def AltitudeRef(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference for the runway."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRef"](arg_newVal.COM_val))

    @property
    def LowEndHeading(self) -> typing.Any:
        """The low end heading of the runway."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowEndHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowEndHeading.setter
    def LowEndHeading(self, newVal:typing.Any) -> None:
        """The low end heading of the runway."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowEndHeading"](arg_newVal.COM_val))

    @property
    def HighEndHeading(self) -> typing.Any:
        """The high end heading of the runway."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighEndHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighEndHeading.setter
    def HighEndHeading(self, newVal:typing.Any) -> None:
        """The high end heading of the runway."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighEndHeading"](arg_newVal.COM_val))

    @property
    def IsMagnetic(self) -> bool:
        """Opt whether to use a magnetic heading for the runway heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsMagnetic"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IsMagnetic.setter
    def IsMagnetic(self, newVal:bool) -> None:
        """Opt whether to use a magnetic heading for the runway heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetIsMagnetic"](arg_newVal.COM_val))

    def AddToCatalog(self, overwrite:bool) -> None:
        """Add the runway to the catalog."""
        with agmarshall.VARIANT_BOOL_arg(overwrite) as arg_overwrite:
            agcls.evaluate_hresult(self.__dict__["_AddToCatalog"](arg_overwrite.COM_val))

    def CopyFromCatalog(self, runway:"ICatalogRunway") -> None:
        """Copy the information from the runway stored in the catalog."""
        with agmarshall.AgInterface_in_arg(runway, ICatalogRunway) as arg_runway:
            agcls.evaluate_hresult(self.__dict__["_CopyFromCatalog"](arg_runway.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{5b6661c4-9722-49ab-9236-ffbfe2821e86}", ISiteRunway)
agcls.AgTypeNameMap["ISiteRunway"] = ISiteRunway

class IProcedureLanding(object):
    """Interface used to access the options for a landing procedure."""
    _uuid = "{b3541a24-1ba3-47cd-86a9-4dc90b7d0c14}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetModeAsStandardInstrumentApproach"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsInterceptGlideslope"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsEnterDownwindPattern"] = _raise_uninitialized_error
        self.__dict__["_GetRunwayHeadingOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalPlaneOptions"] = _raise_uninitialized_error
        self.__dict__["_GetApproachMode"] = _raise_uninitialized_error
        self.__dict__["_SetApproachMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureLanding._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureLanding from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureLanding = agcom.GUID(IProcedureLanding._uuid)
        vtable_offset_local = IProcedureLanding._vtable_offset - 1
        self.__dict__["_GetModeAsStandardInstrumentApproach"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsInterceptGlideslope"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsEnterDownwindPattern"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetRunwayHeadingOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetVerticalPlaneOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetApproachMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetApproachMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureLanding, vtable_offset_local+11, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureLanding.__dict__ and type(IProcedureLanding.__dict__[attrname]) == property:
            return IProcedureLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureLanding.")
    
    @property
    def ModeAsStandardInstrumentApproach(self) -> "ILandingStandardInstrumentApproach":
        """Get the interface for a standard instrument approach landing."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsStandardInstrumentApproach"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsInterceptGlideslope(self) -> "ILandingInterceptGlideslope":
        """Get the interface for an intercept glideslope landing."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsInterceptGlideslope"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsEnterDownwindPattern(self) -> "ILandingEnterDownwindPattern":
        """Get the interface for a downwind pattern landing."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsEnterDownwindPattern"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def RunwayHeadingOptions(self) -> "IRunwayHeadingOptions":
        """Get the runway heading options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayHeadingOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def VerticalPlaneOptions(self) -> "IVerticalPlaneOptions":
        """Get the vertical plane options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalPlaneOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ApproachMode(self) -> "AgEAvtrApproachMode":
        """The type of landing the aircraft will perform."""
        with agmarshall.AgEnum_arg(AgEAvtrApproachMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproachMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ApproachMode.setter
    def ApproachMode(self, newVal:"AgEAvtrApproachMode") -> None:
        """The type of landing the aircraft will perform."""
        with agmarshall.AgEnum_arg(AgEAvtrApproachMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetApproachMode"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{b3541a24-1ba3-47cd-86a9-4dc90b7d0c14}", IProcedureLanding)
agcls.AgTypeNameMap["IProcedureLanding"] = IProcedureLanding

class IProcedureEnroute(object):
    """Interface used to access the options for an enroute procedure."""
    _uuid = "{a35c59ac-496b-4b6c-aa8a-fd55e9992a97}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeMSLOptions"] = _raise_uninitialized_error
        self.__dict__["_GetNavigationOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureEnroute._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureEnroute from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureEnroute = agcom.GUID(IProcedureEnroute._uuid)
        vtable_offset_local = IProcedureEnroute._vtable_offset - 1
        self.__dict__["_GetAltitudeMSLOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureEnroute, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetNavigationOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureEnroute, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureEnroute, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureEnroute, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureEnroute, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureEnroute.__dict__ and type(IProcedureEnroute.__dict__[attrname]) == property:
            return IProcedureEnroute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureEnroute.")
    
    @property
    def AltitudeMSLOptions(self) -> "IAltitudeMSLAndLevelOffOptions":
        """Get the altitude MSL options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeMSLOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def NavigationOptions(self) -> "INavigationOptions":
        """Get the navigation options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavigationOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{a35c59ac-496b-4b6c-aa8a-fd55e9992a97}", IProcedureEnroute)
agcls.AgTypeNameMap["IProcedureEnroute"] = IProcedureEnroute

class IProcedureBasicPointToPoint(object):
    """Interface used to access the options for a basic point to point procedure."""
    _uuid = "{e6e53440-4d07-4808-be87-ed2bf3908208}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetNavigationOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalPlaneOptions"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureBasicPointToPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureBasicPointToPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureBasicPointToPoint = agcom.GUID(IProcedureBasicPointToPoint._uuid)
        vtable_offset_local = IProcedureBasicPointToPoint._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetNavigationOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetVerticalPlaneOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureBasicPointToPoint, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureBasicPointToPoint.__dict__ and type(IProcedureBasicPointToPoint.__dict__[attrname]) == property:
            return IProcedureBasicPointToPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureBasicPointToPoint.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def NavigationOptions(self) -> "INavigationOptions":
        """Get the navigation options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavigationOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def VerticalPlaneOptions(self) -> "IVerticalPlaneAndFlightPathOptions":
        """Get the vertical plane options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalPlaneOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{e6e53440-4d07-4808-be87-ed2bf3908208}", IProcedureBasicPointToPoint)
agcls.AgTypeNameMap["IProcedureBasicPointToPoint"] = IProcedureBasicPointToPoint

class IProcedureDelay(object):
    """Interface used to access the options for a delay procedure."""
    _uuid = "{0196f260-017d-4f54-af50-7ca1ed1056b0}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetTurnRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTurnRadiusFactor"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureDelay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureDelay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureDelay = agcom.GUID(IProcedureDelay._uuid)
        vtable_offset_local = IProcedureDelay._vtable_offset - 1
        self.__dict__["_GetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTurnRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureDelay, vtable_offset_local+9, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureDelay.__dict__ and type(IProcedureDelay.__dict__[attrname]) == property:
            return IProcedureDelay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureDelay.")
    
    @property
    def AltitudeMode(self) -> "AgEAvtrDelayAltMode":
        """The mode for handling the altitude of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrDelayAltMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeMode.setter
    def AltitudeMode(self, newVal:"AgEAvtrDelayAltMode") -> None:
        """The mode for handling the altitude of the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrDelayAltMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeMode"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The requested altitude of the procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The requested altitude of the procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def CruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the interface for the cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def TurnDirection(self) -> "AgEAvtrNavigatorTurnDir":
        """The turn direction of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrNavigatorTurnDir") -> None:
        """The turn direction of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrNavigatorTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def TurnRadiusFactor(self) -> float:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnRadiusFactor.setter
    def TurnRadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnRadiusFactor"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0196f260-017d-4f54-af50-7ca1ed1056b0}", IProcedureDelay)
agcls.AgTypeNameMap["IProcedureDelay"] = IProcedureDelay

class IProcedureTakeoff(object):
    """Interface used to access the options for a takeoff procedure."""
    _uuid = "{2f8f0f66-d7ea-41df-ad48-bcd5bfcd90b7}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRunwayHeadingOptions"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsNormal"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsDeparturePoint"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsLowTransition"] = _raise_uninitialized_error
        self.__dict__["_GetTakeoffMode"] = _raise_uninitialized_error
        self.__dict__["_SetTakeoffMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureTakeoff._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureTakeoff from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureTakeoff = agcom.GUID(IProcedureTakeoff._uuid)
        vtable_offset_local = IProcedureTakeoff._vtable_offset - 1
        self.__dict__["_GetRunwayHeadingOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsNormal"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsDeparturePoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsLowTransition"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetTakeoffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetTakeoffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureTakeoff, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureTakeoff.__dict__ and type(IProcedureTakeoff.__dict__[attrname]) == property:
            return IProcedureTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureTakeoff.")
    
    @property
    def RunwayHeadingOptions(self) -> "IRunwayHeadingOptions":
        """Get the runway heading options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunwayHeadingOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsNormal(self) -> "ITakeoffNormal":
        """Get the interface for a normal takeoff."""
        with agmarshall.AgInterface_out_arg() as arg_ppTakeoffNormal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsNormal"](byref(arg_ppTakeoffNormal.COM_val)))
            return arg_ppTakeoffNormal.python_val

    @property
    def ModeAsDeparturePoint(self) -> "ITakeoffDeparturePoint":
        """Get the interface for a departure point takeoff."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsDeparturePoint"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsLowTransition(self) -> "ITakeoffLowTransition":
        """Get the interface for a low transition takeoff."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsLowTransition"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def TakeoffMode(self) -> "AgEAvtrTakeoffMode":
        """The type of takeoff the aircraft will perform."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTakeoffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TakeoffMode.setter
    def TakeoffMode(self, newVal:"AgEAvtrTakeoffMode") -> None:
        """The type of takeoff the aircraft will perform."""
        with agmarshall.AgEnum_arg(AgEAvtrTakeoffMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTakeoffMode"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{2f8f0f66-d7ea-41df-ad48-bcd5bfcd90b7}", IProcedureTakeoff)
agcls.AgTypeNameMap["IProcedureTakeoff"] = IProcedureTakeoff

class IProcedureArcEnroute(object):
    """Interface used to access the options for an arc enroute procedure."""
    _uuid = "{e4073986-cdc3-47de-994d-e731e309f7a2}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetArcOptions"] = _raise_uninitialized_error
        self.__dict__["_GetArcCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureArcEnroute._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureArcEnroute from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureArcEnroute = agcom.GUID(IProcedureArcEnroute._uuid)
        vtable_offset_local = IProcedureArcEnroute._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetArcOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetArcCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcEnroute, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureArcEnroute.__dict__ and type(IProcedureArcEnroute.__dict__[attrname]) == property:
            return IProcedureArcEnroute.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureArcEnroute.")
    
    @property
    def AltitudeOptions(self) -> "IArcAltitudeAndDelayOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ArcOptions(self) -> "IArcOptions":
        """Get the arc options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetArcOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ArcCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the arc cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetArcCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{e4073986-cdc3-47de-994d-e731e309f7a2}", IProcedureArcEnroute)
agcls.AgTypeNameMap["IProcedureArcEnroute"] = IProcedureArcEnroute

class IProcedureArcPointToPoint(object):
    """Interface used to access the options for an arc point to point procedure."""
    _uuid = "{0b5eaf53-8f72-4039-b469-18cfccedc1ef}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetArcOptions"] = _raise_uninitialized_error
        self.__dict__["_GetArcCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalPlaneOptions"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureArcPointToPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureArcPointToPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureArcPointToPoint = agcom.GUID(IProcedureArcPointToPoint._uuid)
        vtable_offset_local = IProcedureArcPointToPoint._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetArcOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetArcCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetVerticalPlaneOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureArcPointToPoint, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureArcPointToPoint.__dict__ and type(IProcedureArcPointToPoint.__dict__[attrname]) == property:
            return IProcedureArcPointToPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureArcPointToPoint.")
    
    @property
    def AltitudeOptions(self) -> "IArcAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ArcOptions(self) -> "IArcOptions":
        """Get the arc options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetArcOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ArcCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the arc cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetArcCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyCruiseAirspeedProfile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyCruiseAirspeedProfile"](arg_pVal.COM_val))

    @property
    def VerticalPlaneOptions(self) -> "IArcVerticalPlaneOptions":
        """Get the vertical plane options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalPlaneOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{0b5eaf53-8f72-4039-b469-18cfccedc1ef}", IProcedureArcPointToPoint)
agcls.AgTypeNameMap["IProcedureArcPointToPoint"] = IProcedureArcPointToPoint

class IProcedureFlightLine(object):
    """Interface used to access the options for a flight line procedure."""
    _uuid = "{cfa301c6-3326-4e4b-8973-5e74d00b7553}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_GetFlightLineAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_SetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_GetOutboundCourse"] = _raise_uninitialized_error
        self.__dict__["_SetOutboundCourse"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetLegLength"] = _raise_uninitialized_error
        self.__dict__["_SetLegLength"] = _raise_uninitialized_error
        self.__dict__["_GetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureFlightLine._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureFlightLine from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureFlightLine = agcom.GUID(IProcedureFlightLine._uuid)
        vtable_offset_local = IProcedureFlightLine._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+2, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+3, agcom.VARIANT_BOOL)
        self.__dict__["_GetFlightLineAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetOutboundCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetOutboundCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_GetLegLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLegLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureFlightLine, vtable_offset_local+20, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureFlightLine.__dict__ and type(IProcedureFlightLine.__dict__[attrname]) == property:
            return IProcedureFlightLine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureFlightLine.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyCruiseAirspeedProfile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyCruiseAirspeedProfile"](arg_pVal.COM_val))

    @property
    def FlightLineAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the flight line airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightLineAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProcedureType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProcedureType"](arg_newVal.COM_val))

    @property
    def OutboundCourse(self) -> typing.Any:
        """The outbound course."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOutboundCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OutboundCourse.setter
    def OutboundCourse(self, newVal:typing.Any) -> None:
        """The outbound course."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOutboundCourse"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def LegLength(self) -> float:
        """The length of the flight line."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLegLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LegLength.setter
    def LegLength(self, newVal:float) -> None:
        """The length of the flight line."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLegLength"](arg_newVal.COM_val))

    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMustLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMustLevelOff"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{cfa301c6-3326-4e4b-8973-5e74d00b7553}", IProcedureFlightLine)
agcls.AgTypeNameMap["IProcedureFlightLine"] = IProcedureFlightLine

class IProcedureHoldingCircular(object):
    """Interface used to access the options for a holding circular procedure."""
    _uuid = "{ecb689b1-ebcb-45f2-832a-ed36734601ae}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_SetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetDiameter"] = _raise_uninitialized_error
        self.__dict__["_SetDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetUseAlternateEntryPoints"] = _raise_uninitialized_error
        self.__dict__["_SetUseAlternateEntryPoints"] = _raise_uninitialized_error
        self.__dict__["_GetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_SetTurnDirection"] = _raise_uninitialized_error
        self.__dict__["_GetTurns"] = _raise_uninitialized_error
        self.__dict__["_SetTurns"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumDiameter"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureHoldingCircular._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureHoldingCircular from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureHoldingCircular = agcom.GUID(IProcedureHoldingCircular._uuid)
        vtable_offset_local = IProcedureHoldingCircular._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetDiameter"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDiameter"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetUseAlternateEntryPoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAlternateEntryPoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_SetTurnDirection"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_GetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumDiameter"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingCircular, vtable_offset_local+27, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureHoldingCircular.__dict__ and type(IProcedureHoldingCircular.__dict__[attrname]) == property:
            return IProcedureHoldingCircular.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureHoldingCircular.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeMSLOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProfileMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProfileMode"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    @property
    def Diameter(self) -> float:
        """The diameter of the holding pattern."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Diameter.setter
    def Diameter(self, newVal:float) -> None:
        """The diameter of the holding pattern."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDiameter"](arg_newVal.COM_val))

    @property
    def UseAlternateEntryPoints(self) -> bool:
        """The option to enter the holding pattern from an alternate point."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAlternateEntryPoints"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAlternateEntryPoints.setter
    def UseAlternateEntryPoints(self, newVal:bool) -> None:
        """The option to enter the holding pattern from an alternate point."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAlternateEntryPoints"](arg_newVal.COM_val))

    @property
    def TurnDirection(self) -> "AgEAvtrHoldingDirection":
        """The turn direction to enter the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnDirection.setter
    def TurnDirection(self, newVal:"AgEAvtrHoldingDirection") -> None:
        """The turn direction to enter the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingDirection, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnDirection"](arg_newVal.COM_val))

    @property
    def Turns(self) -> int:
        """The number of full turns."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurns"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurns"](arg_newVal.COM_val))

    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpMode"](arg_newVal.COM_val))

    @property
    def HoldCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetMinimumDiameter(self) -> float:
        """The aircraft's minimum diameter at this altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumDiameter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{ecb689b1-ebcb-45f2-832a-ed36734601ae}", IProcedureHoldingCircular)
agcls.AgTypeNameMap["IProcedureHoldingCircular"] = IProcedureHoldingCircular

class IProcedureHoldingFigure8(object):
    """Interface used to access the options for a holding figure 8 procedure."""
    _uuid = "{5b4e19a2-dd75-462f-b4da-ed23c6c16de3}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_SetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetUseAlternateEntryPoints"] = _raise_uninitialized_error
        self.__dict__["_SetUseAlternateEntryPoints"] = _raise_uninitialized_error
        self.__dict__["_GetTurns"] = _raise_uninitialized_error
        self.__dict__["_SetTurns"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidth"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureHoldingFigure8._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureHoldingFigure8 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureHoldingFigure8 = agcom.GUID(IProcedureHoldingFigure8._uuid)
        vtable_offset_local = IProcedureHoldingFigure8._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetUseAlternateEntryPoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAlternateEntryPoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_GetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingFigure8, vtable_offset_local+27, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureHoldingFigure8.__dict__ and type(IProcedureHoldingFigure8.__dict__[attrname]) == property:
            return IProcedureHoldingFigure8.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureHoldingFigure8.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeMSLOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProfileMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProfileMode"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    @property
    def Length(self) -> float:
        """The distance between the centers of the pattern's arcs."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Length.setter
    def Length(self, newVal:float) -> None:
        """The distance between the centers of the pattern's arcs."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_newVal.COM_val))

    @property
    def Width(self) -> float:
        """The width of the holding pattern."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Width.setter
    def Width(self, newVal:float) -> None:
        """The width of the holding pattern."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_newVal.COM_val))

    @property
    def UseAlternateEntryPoints(self) -> bool:
        """The option to enter the holding pattern from an alternate point."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAlternateEntryPoints"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAlternateEntryPoints.setter
    def UseAlternateEntryPoints(self, newVal:bool) -> None:
        """The option to enter the holding pattern from an alternate point."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAlternateEntryPoints"](arg_newVal.COM_val))

    @property
    def Turns(self) -> int:
        """The number of full turns."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurns"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurns"](arg_newVal.COM_val))

    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpMode"](arg_newVal.COM_val))

    @property
    def HoldCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetMinimumWidth(self) -> float:
        """The minimum allowable width based on the aircraft's minimum diameter at this altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{5b4e19a2-dd75-462f-b4da-ed23c6c16de3}", IProcedureHoldingFigure8)
agcls.AgTypeNameMap["IProcedureHoldingFigure8"] = IProcedureHoldingFigure8

class IProcedureHoldingRacetrack(object):
    """Interface used to access the options for a holding racetrack procedure."""
    _uuid = "{f4b0bbae-3a2b-4333-949c-ab5fc5a232b4}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_SetProfileMode"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetLength"] = _raise_uninitialized_error
        self.__dict__["_SetLength"] = _raise_uninitialized_error
        self.__dict__["_GetWidth"] = _raise_uninitialized_error
        self.__dict__["_SetWidth"] = _raise_uninitialized_error
        self.__dict__["_GetEntryManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEntryManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetTurns"] = _raise_uninitialized_error
        self.__dict__["_SetTurns"] = _raise_uninitialized_error
        self.__dict__["_GetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_SetRefuelDumpMode"] = _raise_uninitialized_error
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumWidth"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureHoldingRacetrack._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureHoldingRacetrack from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureHoldingRacetrack = agcom.GUID(IProcedureHoldingRacetrack._uuid)
        vtable_offset_local = IProcedureHoldingRacetrack._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetProfileMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetEntryManeuver"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_SetEntryManeuver"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_SetTurns"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_GetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetRefuelDumpMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetHoldCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+22, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumWidth"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoldingRacetrack, vtable_offset_local+27, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureHoldingRacetrack.__dict__ and type(IProcedureHoldingRacetrack.__dict__[attrname]) == property:
            return IProcedureHoldingRacetrack.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureHoldingRacetrack.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeMSLOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProfileMode(self) -> "AgEAvtrHoldingProfileMode":
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProfileMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProfileMode.setter
    def ProfileMode(self, newVal:"AgEAvtrHoldingProfileMode") -> None:
        """The mode defines how the aircraft will perform the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingProfileMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProfileMode"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The mode for the level off maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the holding point from the site."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticHeading.setter
    def UseMagneticHeading(self, newVal:bool) -> None:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticHeading"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The distance to the holding point from the site."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    @property
    def Length(self) -> float:
        """The distance between the centers of the pattern's arcs."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Length.setter
    def Length(self, newVal:float) -> None:
        """The distance between the centers of the pattern's arcs."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLength"](arg_newVal.COM_val))

    @property
    def Width(self) -> float:
        """The width of the holding pattern."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWidth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Width.setter
    def Width(self, newVal:float) -> None:
        """The width of the holding pattern."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWidth"](arg_newVal.COM_val))

    @property
    def EntryManeuver(self) -> "AgEAvtrHoldingEntryManeuver":
        """Defines how the aircraft will enter the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingEntryManeuver) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEntryManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EntryManeuver.setter
    def EntryManeuver(self, newVal:"AgEAvtrHoldingEntryManeuver") -> None:
        """Defines how the aircraft will enter the holding pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldingEntryManeuver, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEntryManeuver"](arg_newVal.COM_val))

    @property
    def Turns(self) -> int:
        """The number of full turns."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurns"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Turns.setter
    def Turns(self, newVal:int) -> None:
        """The number of full turns."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurns"](arg_newVal.COM_val))

    @property
    def RefuelDumpMode(self) -> "AgEAvtrHoldRefuelDumpMode":
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefuelDumpMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefuelDumpMode.setter
    def RefuelDumpMode(self, newVal:"AgEAvtrHoldRefuelDumpMode") -> None:
        """The mode that defines when the aircraft will leave the holding pattern for a Refuel/Dump operation."""
        with agmarshall.AgEnum_arg(AgEAvtrHoldRefuelDumpMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefuelDumpMode"](arg_newVal.COM_val))

    @property
    def HoldCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the hold cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteAndDelayOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetMinimumWidth(self) -> float:
        """The minimum allowable width based on the aircraft's minimum diameter at this altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumWidth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{f4b0bbae-3a2b-4333-949c-ab5fc5a232b4}", IProcedureHoldingRacetrack)
agcls.AgTypeNameMap["IProcedureHoldingRacetrack"] = IProcedureHoldingRacetrack

class IProcedureTransitionToHover(object):
    """Interface used to access the options for a transition to hover procedure."""
    _uuid = "{06667f6e-68d3-4a3f-b285-64c556aac5c0}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeReference"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetCourse"] = _raise_uninitialized_error
        self.__dict__["_GetTransitionIntoWind"] = _raise_uninitialized_error
        self.__dict__["_SetTransitionCourse"] = _raise_uninitialized_error
        self.__dict__["_SetTransitionIntoWind"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalPlaneOptions"] = _raise_uninitialized_error
        self.__dict__["_GetSmoothTransitionMode"] = _raise_uninitialized_error
        self.__dict__["_SetSmoothTransitionMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureTransitionToHover._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureTransitionToHover from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureTransitionToHover = agcom.GUID(IProcedureTransitionToHover._uuid)
        vtable_offset_local = IProcedureTransitionToHover._vtable_offset - 1
        self.__dict__["_GetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeReference"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_GetTransitionIntoWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTransitionCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+8, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_SetTransitionIntoWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+9, )
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetVerticalPlaneOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_GetSmoothTransitionMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetSmoothTransitionMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToHover, vtable_offset_local+15, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureTransitionToHover.__dict__ and type(IProcedureTransitionToHover.__dict__[attrname]) == property:
            return IProcedureTransitionToHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureTransitionToHover.")
    
    @property
    def AltitudeReference(self) -> "AgEAvtrAGLMSL":
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeReference"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeReference.setter
    def AltitudeReference(self, newVal:"AgEAvtrAGLMSL") -> None:
        """The altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAGLMSL, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeReference"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        """The altitude for the procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Course(self) -> typing.Any:
        """The course for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TransitionIntoWind(self) -> bool:
        """The option to transition into the wind."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransitionIntoWind"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTransitionCourse(self, course:typing.Any, useMagneticCourse:bool) -> None:
        """Set the course and heading reference."""
        with agmarshall.VARIANT_arg(course) as arg_course, \
             agmarshall.VARIANT_BOOL_arg(useMagneticCourse) as arg_useMagneticCourse:
            agcls.evaluate_hresult(self.__dict__["_SetTransitionCourse"](arg_course.COM_val, arg_useMagneticCourse.COM_val))

    def SetTransitionIntoWind(self) -> None:
        """Set the option to transition into the wind to true."""
        agcls.evaluate_hresult(self.__dict__["_SetTransitionIntoWind"]())

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def VerticalPlaneOptions(self) -> "IVerticalPlaneAndFlightPathOptions":
        """Get the vertical plane options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalPlaneOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def SmoothTransitionMode(self) -> "AgEAvtrTransitionToHoverMode":
        """The transition mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrTransitionToHoverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSmoothTransitionMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SmoothTransitionMode.setter
    def SmoothTransitionMode(self, newVal:"AgEAvtrTransitionToHoverMode") -> None:
        """The transition mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrTransitionToHoverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSmoothTransitionMode"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{06667f6e-68d3-4a3f-b285-64c556aac5c0}", IProcedureTransitionToHover)
agcls.AgTypeNameMap["IProcedureTransitionToHover"] = IProcedureTransitionToHover

class IProcedureTerrainFollow(object):
    """Interface used to access the options for a terrain following procedure."""
    _uuid = "{4c79076e-a174-469f-8370-0cb2271446ec}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeAGL"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeAGL"] = _raise_uninitialized_error
        self.__dict__["_GetNavigationOptions"] = _raise_uninitialized_error
        self.__dict__["_GetTerrainFollowingAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetReduceTurnRadii"] = _raise_uninitialized_error
        self.__dict__["_SetReduceTurnRadii"] = _raise_uninitialized_error
        self.__dict__["_GetTurnFactor"] = _raise_uninitialized_error
        self.__dict__["_SetTurnFactor"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureTerrainFollow._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureTerrainFollow from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureTerrainFollow = agcom.GUID(IProcedureTerrainFollow._uuid)
        vtable_offset_local = IProcedureTerrainFollow._vtable_offset - 1
        self.__dict__["_GetAltitudeAGL"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeAGL"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetNavigationOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetTerrainFollowingAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetReduceTurnRadii"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetReduceTurnRadii"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetTurnFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTurnFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureTerrainFollow, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureTerrainFollow.__dict__ and type(IProcedureTerrainFollow.__dict__[attrname]) == property:
            return IProcedureTerrainFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureTerrainFollow.")
    
    @property
    def AltitudeAGL(self) -> float:
        """The altitude above ground level the aircraft will fly."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeAGL"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeAGL.setter
    def AltitudeAGL(self, newVal:float) -> None:
        """The altitude above ground level the aircraft will fly."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeAGL"](arg_newVal.COM_val))

    @property
    def NavigationOptions(self) -> "INavigationOptions":
        """Get the navigation options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetNavigationOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def TerrainFollowingAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the terrain following airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetTerrainFollowingAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ReduceTurnRadii(self) -> bool:
        """Option to use the minimum speed to compute the turn radius."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReduceTurnRadii"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReduceTurnRadii.setter
    def ReduceTurnRadii(self, newVal:bool) -> None:
        """Option to use the minimum speed to compute the turn radius."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetReduceTurnRadii"](arg_newVal.COM_val))

    @property
    def TurnFactor(self) -> float:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTurnFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TurnFactor.setter
    def TurnFactor(self, newVal:float) -> None:
        """The maximum turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTurnFactor"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{4c79076e-a174-469f-8370-0cb2271446ec}", IProcedureTerrainFollow)
agcls.AgTypeNameMap["IProcedureTerrainFollow"] = IProcedureTerrainFollow

class IProcedureHover(object):
    """Interface used to access the options for a hover procedure."""
    _uuid = "{9e58b1a4-ae09-41dd-aadb-fd1886d01fff}"
    _num_methods = 31
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetHoverMode"] = _raise_uninitialized_error
        self.__dict__["_SetHoverMode"] = _raise_uninitialized_error
        self.__dict__["_GetFixedTime"] = _raise_uninitialized_error
        self.__dict__["_SetFixedTime"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_GetFinalHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_SetFinalTranslationCourse"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetFinalHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_SetFinalHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_GetTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_SetTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_GetBearing"] = _raise_uninitialized_error
        self.__dict__["_SetBearing"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_SetUseMagneticBearing"] = _raise_uninitialized_error
        self.__dict__["_GetRange"] = _raise_uninitialized_error
        self.__dict__["_SetRange"] = _raise_uninitialized_error
        self.__dict__["_GetFinalCourseMode"] = _raise_uninitialized_error
        self.__dict__["_SetFinalCourseMode"] = _raise_uninitialized_error
        self.__dict__["_GetSmoothTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_SetSmoothTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureHover._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureHover from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureHover = agcom.GUID(IProcedureHover._uuid)
        vtable_offset_local = IProcedureHover._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetHoverMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetHoverMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetFixedTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetFixedTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetFinalHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_SetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+10, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_SetFinalTranslationCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+11, )
        self.__dict__["_GetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_GetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetFinalHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetFinalHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+19, POINTER(agcom.VARIANT))
        self.__dict__["_SetBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+20, agcom.VARIANT)
        self.__dict__["_GetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMagneticBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+22, agcom.VARIANT_BOOL)
        self.__dict__["_GetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetFinalCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+25, POINTER(agcom.LONG))
        self.__dict__["_SetFinalCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+26, agcom.LONG)
        self.__dict__["_GetSmoothTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+27, POINTER(agcom.LONG))
        self.__dict__["_SetSmoothTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+28, agcom.LONG)
        self.__dict__["_GetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureHover, vtable_offset_local+31, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureHover.__dict__ and type(IProcedureHover.__dict__[attrname]) == property:
            return IProcedureHover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureHover.")
    
    @property
    def AltitudeOptions(self) -> "IHoverAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def HoverMode(self) -> "AgEAvtrHoverMode":
        """The option to have the aircraft hover in place for a fixed time or to perform a hovering maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoverMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoverMode.setter
    def HoverMode(self, newVal:"AgEAvtrHoverMode") -> None:
        """The option to have the aircraft hover in place for a fixed time or to perform a hovering maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrHoverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoverMode"](arg_newVal.COM_val))

    @property
    def FixedTime(self) -> typing.Any:
        """The time to hover in place."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFixedTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FixedTime.setter
    def FixedTime(self, newVal:typing.Any) -> None:
        """The time to hover in place."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFixedTime"](arg_newVal.COM_val))

    @property
    def HeadingMode(self) -> "AgEAvtrVTOLHeadingMode":
        """The heading mode for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVTOLHeadingMode") -> None:
        """The heading mode for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingMode"](arg_newVal.COM_val))

    @property
    def FinalHeadingMode(self) -> "AgEAvtrVTOLFinalHeadingMode":
        """The mode to define the heading at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLFinalHeadingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the relative heading change."""
        with agmarshall.VARIANT_arg(headingChange) as arg_headingChange:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeCourse"](arg_headingChange.COM_val))

    def SetAbsoluteCourse(self, course:typing.Any, isMagnetic:bool) -> None:
        """Set the absolute heading and reference."""
        with agmarshall.VARIANT_arg(course) as arg_course, \
             agmarshall.VARIANT_BOOL_arg(isMagnetic) as arg_isMagnetic:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteCourse"](arg_course.COM_val, arg_isMagnetic.COM_val))

    def SetFinalTranslationCourse(self) -> None:
        """The option to have the final heading to match the translation bearing."""
        agcls.evaluate_hresult(self.__dict__["_SetFinalTranslationCourse"]())

    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the heading."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative heading change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the heading course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FinalHeadingRate(self) -> "AgEAvtrVTOLRateMode":
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalHeadingRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalHeadingRate.setter
    def FinalHeadingRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalHeadingRate"](arg_newVal.COM_val))

    @property
    def TranslationMode(self) -> "AgEAvtrVTOLTranslationMode":
        """Define how the aircraft will translate during the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTranslationMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TranslationMode.setter
    def TranslationMode(self, newVal:"AgEAvtrVTOLTranslationMode") -> None:
        """Define how the aircraft will translate during the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTranslationMode"](arg_newVal.COM_val))

    @property
    def Bearing(self) -> typing.Any:
        """The bearing of the translation during the hover."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bearing.setter
    def Bearing(self, newVal:typing.Any) -> None:
        """The bearing of the translation during the hover."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearing"](arg_newVal.COM_val))

    @property
    def UseMagneticBearing(self) -> bool:
        """The option to use a magnetic heading for the translation bearing."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMagneticBearing.setter
    def UseMagneticBearing(self, newVal:bool) -> None:
        """The option to use a magnetic heading for the translation bearing."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMagneticBearing"](arg_newVal.COM_val))

    @property
    def Range(self) -> float:
        """The range to translate during the hover."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Range.setter
    def Range(self, newVal:float) -> None:
        """The range to translate during the hover."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRange"](arg_newVal.COM_val))

    @property
    def FinalCourseMode(self) -> "AgEAvtrVTOLTranslationFinalCourseMode":
        """The mode to specify the final course at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalCourseMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalCourseMode.setter
    def FinalCourseMode(self, newVal:"AgEAvtrVTOLTranslationFinalCourseMode") -> None:
        """The mode to specify the final course at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalCourseMode"](arg_newVal.COM_val))

    @property
    def SmoothTranslationMode(self) -> "AgEAvtrVTOLRateMode":
        """The translation mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSmoothTranslationMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SmoothTranslationMode.setter
    def SmoothTranslationMode(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The translation mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSmoothTranslationMode"](arg_newVal.COM_val))

    @property
    def RadiusFactor(self) -> float:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusFactor"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{9e58b1a4-ae09-41dd-aadb-fd1886d01fff}", IProcedureHover)
agcls.AgTypeNameMap["IProcedureHover"] = IProcedureHover

class IProcedureHoverTranslate(object):
    """Interface used to access the options for a hover translate procedure."""
    _uuid = "{7c58df50-e3d1-4e96-bb3c-8cc2b2c58343}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_GetFinalHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_SetFinalTranslationCourse"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetFinalHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_SetFinalHeadingRate"] = _raise_uninitialized_error
        self.__dict__["_GetFinalCourseMode"] = _raise_uninitialized_error
        self.__dict__["_SetFinalCourseMode"] = _raise_uninitialized_error
        self.__dict__["_GetSmoothTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_SetSmoothTranslationMode"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureHoverTranslate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureHoverTranslate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureHoverTranslate = agcom.GUID(IProcedureHoverTranslate._uuid)
        vtable_offset_local = IProcedureHoverTranslate._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetFinalHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_SetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+6, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_SetFinalTranslationCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+7, )
        self.__dict__["_GetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_GetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetFinalHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetFinalHeadingRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetFinalCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetFinalCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetSmoothTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetSmoothTranslationMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureHoverTranslate, vtable_offset_local+19, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureHoverTranslate.__dict__ and type(IProcedureHoverTranslate.__dict__[attrname]) == property:
            return IProcedureHoverTranslate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureHoverTranslate.")
    
    @property
    def AltitudeOptions(self) -> "IHoverAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def HeadingMode(self) -> "AgEAvtrVTOLHeadingMode":
        """The heading mode for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVTOLHeadingMode") -> None:
        """The heading mode for the aircraft."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLHeadingMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingMode"](arg_newVal.COM_val))

    @property
    def FinalHeadingMode(self) -> "AgEAvtrVTOLFinalHeadingMode":
        """The mode to define the heading at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLFinalHeadingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the relative heading change."""
        with agmarshall.VARIANT_arg(headingChange) as arg_headingChange:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeCourse"](arg_headingChange.COM_val))

    def SetAbsoluteCourse(self, course:typing.Any, isMagnetic:bool) -> None:
        """Set the absolute heading and reference."""
        with agmarshall.VARIANT_arg(course) as arg_course, \
             agmarshall.VARIANT_BOOL_arg(isMagnetic) as arg_isMagnetic:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteCourse"](arg_course.COM_val, arg_isMagnetic.COM_val))

    def SetFinalTranslationCourse(self) -> None:
        """The option to have the final heading to match the translation bearing."""
        agcls.evaluate_hresult(self.__dict__["_SetFinalTranslationCourse"]())

    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the heading."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative heading change."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the heading course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FinalHeadingRate(self) -> "AgEAvtrVTOLRateMode":
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalHeadingRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalHeadingRate.setter
    def FinalHeadingRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The options to define the heading rate of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalHeadingRate"](arg_newVal.COM_val))

    @property
    def FinalCourseMode(self) -> "AgEAvtrVTOLTranslationFinalCourseMode":
        """The mode to specify the final course at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalCourseMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalCourseMode.setter
    def FinalCourseMode(self, newVal:"AgEAvtrVTOLTranslationFinalCourseMode") -> None:
        """The mode to specify the final course at the end of the hover."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTranslationFinalCourseMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalCourseMode"](arg_newVal.COM_val))

    @property
    def SmoothTranslationMode(self) -> "AgEAvtrVTOLRateMode":
        """The translation mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSmoothTranslationMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SmoothTranslationMode.setter
    def SmoothTranslationMode(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The translation mode of the aircraft at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSmoothTranslationMode"](arg_newVal.COM_val))

    @property
    def RadiusFactor(self) -> float:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The turn radius factor."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusFactor"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{7c58df50-e3d1-4e96-bb3c-8cc2b2c58343}", IProcedureHoverTranslate)
agcls.AgTypeNameMap["IProcedureHoverTranslate"] = IProcedureHoverTranslate

class IProcedureTransitionToForwardFlight(object):
    """Interface used to access the options for a transition to forward flight procedure."""
    _uuid = "{5dbdb660-3320-47c7-ac2b-f1ebd3b0eeae}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTransitionCourseMode"] = _raise_uninitialized_error
        self.__dict__["_SetTransitionIntoWind"] = _raise_uninitialized_error
        self.__dict__["_SetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_SetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetAbsoluteCourse"] = _raise_uninitialized_error
        self.__dict__["_GetRelativeCourse"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureTransitionToForwardFlight._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureTransitionToForwardFlight from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureTransitionToForwardFlight = agcom.GUID(IProcedureTransitionToForwardFlight._uuid)
        vtable_offset_local = IProcedureTransitionToForwardFlight._vtable_offset - 1
        self.__dict__["_GetTransitionCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetTransitionIntoWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+2, )
        self.__dict__["_SetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+3, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_SetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetAbsoluteCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_GetRelativeCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureTransitionToForwardFlight, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureTransitionToForwardFlight.__dict__ and type(IProcedureTransitionToForwardFlight.__dict__[attrname]) == property:
            return IProcedureTransitionToForwardFlight.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureTransitionToForwardFlight.")
    
    @property
    def TransitionCourseMode(self) -> "AgEAvtrVTOLTransitionMode":
        """The mode to specify the course of the transition maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLTransitionMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransitionCourseMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTransitionIntoWind(self) -> None:
        """Set the option to transition into the wind to true."""
        agcls.evaluate_hresult(self.__dict__["_SetTransitionIntoWind"]())

    def SetAbsoluteCourse(self, course:typing.Any, useMagneticCourse:bool) -> None:
        """Set the mode to absolute and specify the course and heading reference."""
        with agmarshall.VARIANT_arg(course) as arg_course, \
             agmarshall.VARIANT_BOOL_arg(useMagneticCourse) as arg_useMagneticCourse:
            agcls.evaluate_hresult(self.__dict__["_SetAbsoluteCourse"](arg_course.COM_val, arg_useMagneticCourse.COM_val))

    def SetRelativeCourse(self, headingChange:typing.Any) -> None:
        """Set the mode to relative and specify the heading change."""
        with agmarshall.VARIANT_arg(headingChange) as arg_headingChange:
            agcls.evaluate_hresult(self.__dict__["_SetRelativeCourse"](arg_headingChange.COM_val))

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading for the course."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AbsoluteCourse(self) -> typing.Any:
        """The absolute course for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAbsoluteCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RelativeCourse(self) -> typing.Any:
        """The relative course for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativeCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FlightPathAngle(self) -> typing.Any:
        """The pitch angle of the flight path at the end of the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The pitch angle of the flight path at the end of the procedure."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathAngle"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{5dbdb660-3320-47c7-ac2b-f1ebd3b0eeae}", IProcedureTransitionToForwardFlight)
agcls.AgTypeNameMap["IProcedureTransitionToForwardFlight"] = IProcedureTransitionToForwardFlight

class IProcedureVerticalTakeoff(object):
    """Interface used to access the options for a vertical takeoff procedure."""
    _uuid = "{1d8d4dbd-b18b-4fc7-862f-0afbdff5054c}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeAbovePoint"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeAbovePoint"] = _raise_uninitialized_error
        self.__dict__["_GetFinalAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetFinalAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingIntoWind"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingIntoWind"] = _raise_uninitialized_error
        self.__dict__["_GetHoldOnDeck"] = _raise_uninitialized_error
        self.__dict__["_SetHoldOnDeck"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureVerticalTakeoff._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureVerticalTakeoff from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureVerticalTakeoff = agcom.GUID(IProcedureVerticalTakeoff._uuid)
        vtable_offset_local = IProcedureVerticalTakeoff._vtable_offset - 1
        self.__dict__["_GetAltitudeAbovePoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeAbovePoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+7, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetHeadingIntoWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHeadingIntoWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetHoldOnDeck"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalTakeoff, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureVerticalTakeoff.__dict__ and type(IProcedureVerticalTakeoff.__dict__[attrname]) == property:
            return IProcedureVerticalTakeoff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureVerticalTakeoff.")
    
    @property
    def AltitudeAbovePoint(self) -> float:
        """The altitude the aircraft will takeoff to."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeAbovePoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeAbovePoint.setter
    def AltitudeAbovePoint(self, newVal:float) -> None:
        """The altitude the aircraft will takeoff to."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeAbovePoint"](arg_newVal.COM_val))

    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalAltitudeRate"](arg_newVal.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """The altitude offset from the site to begin the vertical takeoff."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude offset from the site to begin the vertical takeoff."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_newVal.COM_val))

    def SetHeading(self, heading:typing.Any, isMagnetic:bool) -> None:
        """Set the heading and heading reference."""
        with agmarshall.VARIANT_arg(heading) as arg_heading, \
             agmarshall.VARIANT_BOOL_arg(isMagnetic) as arg_isMagnetic:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_heading.COM_val, arg_isMagnetic.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The heading for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def HeadingIntoWind(self) -> bool:
        """The option to define the heading according to the wind direction."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingIntoWind"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingIntoWind.setter
    def HeadingIntoWind(self, pVal:bool) -> None:
        """The option to define the heading according to the wind direction."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingIntoWind"](arg_pVal.COM_val))

    @property
    def HoldOnDeck(self) -> typing.Any:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldOnDeck"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @HoldOnDeck.setter
    def HoldOnDeck(self, inVal:typing.Any) -> None:
        """The duration the aircraft will wait before beginning the takeoff."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldOnDeck"](arg_inVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{1d8d4dbd-b18b-4fc7-862f-0afbdff5054c}", IProcedureVerticalTakeoff)
agcls.AgTypeNameMap["IProcedureVerticalTakeoff"] = IProcedureVerticalTakeoff

class IProcedureVerticalLanding(object):
    """Interface used to access the options for a vertical landing procedure."""
    _uuid = "{22009a25-626b-4677-aac4-668cc62a6d9f}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeAbovePoint"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeAbovePoint"] = _raise_uninitialized_error
        self.__dict__["_GetFinalAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetFinalAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetHeadingMode"] = _raise_uninitialized_error
        self.__dict__["_SetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetHeading"] = _raise_uninitialized_error
        self.__dict__["_GetUseMagneticHeading"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureVerticalLanding._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureVerticalLanding from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureVerticalLanding = agcom.GUID(IProcedureVerticalLanding._uuid)
        vtable_offset_local = IProcedureVerticalLanding._vtable_offset - 1
        self.__dict__["_GetAltitudeAbovePoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeAbovePoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetFinalAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetHeadingMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_SetHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+9, agcom.VARIANT, agcom.VARIANT_BOOL)
        self.__dict__["_GetHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_GetUseMagneticHeading"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureVerticalLanding, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureVerticalLanding.__dict__ and type(IProcedureVerticalLanding.__dict__[attrname]) == property:
            return IProcedureVerticalLanding.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureVerticalLanding.")
    
    @property
    def AltitudeAbovePoint(self) -> float:
        """The altitude the aircraft will takeoff to."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeAbovePoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeAbovePoint.setter
    def AltitudeAbovePoint(self, newVal:float) -> None:
        """The altitude the aircraft will takeoff to."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeAbovePoint"](arg_newVal.COM_val))

    @property
    def FinalAltitudeRate(self) -> "AgEAvtrVTOLRateMode":
        """The altitude rate at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalAltitudeRate.setter
    def FinalAltitudeRate(self, newVal:"AgEAvtrVTOLRateMode") -> None:
        """The altitude rate at the end of the procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrVTOLRateMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalAltitudeRate"](arg_newVal.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """The altitude offset from the site to begin the vertical takeoff."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude offset from the site to begin the vertical takeoff."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_newVal.COM_val))

    @property
    def HeadingMode(self) -> "AgEAvtrVertLandingMode":
        """The mode to define the heading during the landing."""
        with agmarshall.AgEnum_arg(AgEAvtrVertLandingMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeadingMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HeadingMode.setter
    def HeadingMode(self, newVal:"AgEAvtrVertLandingMode") -> None:
        """The mode to define the heading during the landing."""
        with agmarshall.AgEnum_arg(AgEAvtrVertLandingMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHeadingMode"](arg_newVal.COM_val))

    def SetHeading(self, heading:typing.Any, isMagnetic:bool) -> None:
        """Set the heading and heading reference."""
        with agmarshall.VARIANT_arg(heading) as arg_heading, \
             agmarshall.VARIANT_BOOL_arg(isMagnetic) as arg_isMagnetic:
            agcls.evaluate_hresult(self.__dict__["_SetHeading"](arg_heading.COM_val, arg_isMagnetic.COM_val))

    @property
    def Heading(self) -> typing.Any:
        """The heading for the procedure."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseMagneticHeading(self) -> bool:
        """The option to use a magnetic heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMagneticHeading"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RadiusFactor(self) -> float:
        """The radius factor for turns performed while translating to the hover point."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The radius factor for turns performed while translating to the hover point."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusFactor"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{22009a25-626b-4677-aac4-668cc62a6d9f}", IProcedureVerticalLanding)
agcls.AgTypeNameMap["IProcedureVerticalLanding"] = IProcedureVerticalLanding

class IProcedureReferenceState(object):
    """Interface used to access the options for a reference state procedure."""
    _uuid = "{729bb865-8651-4e35-beac-db80804116bb}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseDefaultCruiseAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetMSLAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetMSLAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetPerformanceMode"] = _raise_uninitialized_error
        self.__dict__["_SetPerformanceMode"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceFrame"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsForwardFlight"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsTakeoffLanding"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsHover"] = _raise_uninitialized_error
        self.__dict__["_GetModeAsWeightOnWheels"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureReferenceState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureReferenceState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureReferenceState = agcom.GUID(IProcedureReferenceState._uuid)
        vtable_offset_local = IProcedureReferenceState._vtable_offset - 1
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDefaultCruiseAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMSLAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetPerformanceMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetPerformanceMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceFrame"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetModeAsForwardFlight"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsTakeoffLanding"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsHover"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+20, POINTER(agcom.PVOID))
        self.__dict__["_GetModeAsWeightOnWheels"] = IAGFUNCTYPE(pUnk, IID_IProcedureReferenceState, vtable_offset_local+21, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureReferenceState.__dict__ and type(IProcedureReferenceState.__dict__[attrname]) == property:
            return IProcedureReferenceState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureReferenceState.")
    
    @property
    def StartTime(self) -> typing.Any:
        """The start time of the reference state."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The start time of the reference state."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def Latitude(self) -> typing.Any:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        """The waypoint latitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        """The waypoint longitude."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def UseDefaultCruiseAltitude(self) -> bool:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDefaultCruiseAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDefaultCruiseAltitude.setter
    def UseDefaultCruiseAltitude(self, newVal:bool) -> None:
        """Opt whether to use the default cruise altitude."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDefaultCruiseAltitude"](arg_newVal.COM_val))

    @property
    def MSLAltitude(self) -> float:
        """The MSL altitude. Can only be used when the option to use the default cruise altitude is off."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMSLAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MSLAltitude.setter
    def MSLAltitude(self, newVal:float) -> None:
        """Set the MSLAltitude"""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMSLAltitude"](arg_newVal.COM_val))

    @property
    def PerformanceMode(self) -> "AgEAvtrRefStatePerfMode":
        """The type of motion the aircraft is engaged in."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStatePerfMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerformanceMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PerformanceMode.setter
    def PerformanceMode(self, newVal:"AgEAvtrRefStatePerfMode") -> None:
        """The type of motion the aircraft is engaged in."""
        with agmarshall.AgEnum_arg(AgEAvtrRefStatePerfMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPerformanceMode"](arg_newVal.COM_val))

    @property
    def ReferenceFrame(self) -> "AgEAvtrBasicManeuverRefFrame":
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceFrame.setter
    def ReferenceFrame(self, newVal:"AgEAvtrBasicManeuverRefFrame") -> None:
        """The reference frame the aircraft will use."""
        with agmarshall.AgEnum_arg(AgEAvtrBasicManeuverRefFrame, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceFrame"](arg_newVal.COM_val))

    @property
    def FuelFlow(self) -> float:
        """The rate of fuel consumption."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlow.setter
    def FuelFlow(self, newVal:float) -> None:
        """The rate of fuel consumption."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlow"](arg_newVal.COM_val))

    @property
    def ModeAsForwardFlight(self) -> "IRefStateForwardFlightOptions":
        """Get the forward flight options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsForwardFlight"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsTakeoffLanding(self) -> "IRefStateTakeoffLandingOptions":
        """Get the takeoff and landing options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsTakeoffLanding"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsHover(self) -> "IRefStateHoverOptions":
        """Get the hover options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsHover"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ModeAsWeightOnWheels(self) -> "IRefStateWeightOnWheelsOptions":
        """Get the weight on wheels options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeAsWeightOnWheels"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{729bb865-8651-4e35-beac-db80804116bb}", IProcedureReferenceState)
agcls.AgTypeNameMap["IProcedureReferenceState"] = IProcedureReferenceState

class IProcedureSuperProcedure(object):
    """Interface used to access the options for a super procedure."""
    _uuid = "{47fee7c5-8e6d-4510-b70d-6d234b4db640}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_LoadProceduresFromClipboard"] = _raise_uninitialized_error
        self.__dict__["_LoadProceduresFromFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureSuperProcedure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureSuperProcedure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureSuperProcedure = agcom.GUID(IProcedureSuperProcedure._uuid)
        vtable_offset_local = IProcedureSuperProcedure._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureSuperProcedure, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_LoadProceduresFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IProcedureSuperProcedure, vtable_offset_local+2, )
        self.__dict__["_LoadProceduresFromFile"] = IAGFUNCTYPE(pUnk, IID_IProcedureSuperProcedure, vtable_offset_local+3, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureSuperProcedure.__dict__ and type(IProcedureSuperProcedure.__dict__[attrname]) == property:
            return IProcedureSuperProcedure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureSuperProcedure.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    def LoadProceduresFromClipboard(self) -> None:
        """Load procedures from the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_LoadProceduresFromClipboard"]())

    def LoadProceduresFromFile(self, filepath:str) -> None:
        """Load procedures from a file."""
        with agmarshall.BSTR_arg(filepath) as arg_filepath:
            agcls.evaluate_hresult(self.__dict__["_LoadProceduresFromFile"](arg_filepath.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{47fee7c5-8e6d-4510-b70d-6d234b4db640}", IProcedureSuperProcedure)
agcls.AgTypeNameMap["IProcedureSuperProcedure"] = IProcedureSuperProcedure

class IProcedureLaunch(object):
    """Interface used to access the options for a launch procedure."""
    _uuid = "{f74d4c55-51c8-4559-ad0f-3236b5764f12}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_GetPositionPointName"] = _raise_uninitialized_error
        self.__dict__["_SetPositionPointName"] = _raise_uninitialized_error
        self.__dict__["_GetDirectionVecName"] = _raise_uninitialized_error
        self.__dict__["_SetDirectionVecName"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifyLaunchAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifyLaunchAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAccelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelG"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetTrueCourseHint"] = _raise_uninitialized_error
        self.__dict__["_SetTrueCourseHint"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureLaunch._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureLaunch from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureLaunch = agcom.GUID(IProcedureLaunch._uuid)
        vtable_offset_local = IProcedureLaunch._vtable_offset - 1
        self.__dict__["_GetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetPositionPointName"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetPositionPointName"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDirectionVecName"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetDirectionVecName"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetAttitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetSpecifyLaunchAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSpecifyLaunchAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+15, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+20, POINTER(agcom.PVOID))
        self.__dict__["_GetTrueCourseHint"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrueCourseHint"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunch, vtable_offset_local+22, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureLaunch.__dict__ and type(IProcedureLaunch.__dict__[attrname]) == property:
            return IProcedureLaunch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureLaunch.")
    
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchTime"](arg_newVal.COM_val))

    @property
    def PositionPointName(self) -> str:
        """The name of the point used for the launch position."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPositionPointName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PositionPointName.setter
    def PositionPointName(self, pVal:str) -> None:
        """The name of the point used for the launch position."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetPositionPointName"](arg_pVal.COM_val))

    @property
    def DirectionVecName(self) -> str:
        """The name of the vector used for the launch direction."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirectionVecName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DirectionVecName.setter
    def DirectionVecName(self, pVal:str) -> None:
        """The name of the vector used for the launch direction."""
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDirectionVecName"](arg_pVal.COM_val))

    @property
    def AttitudeMode(self) -> "AgEAvtrLaunchAttitudeMode":
        """The attitude mode during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeMode.setter
    def AttitudeMode(self, newVal:"AgEAvtrLaunchAttitudeMode") -> None:
        """The attitude mode during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeMode"](arg_newVal.COM_val))

    @property
    def SpecifyLaunchAirspeed(self) -> bool:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifyLaunchAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifyLaunchAirspeed.setter
    def SpecifyLaunchAirspeed(self, newVal:bool) -> None:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifyLaunchAirspeed"](arg_newVal.COM_val))

    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelG"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlow"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def TrueCourseHint(self) -> typing.Any:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueCourseHint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrueCourseHint.setter
    def TrueCourseHint(self, newVal:typing.Any) -> None:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrueCourseHint"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{f74d4c55-51c8-4559-ad0f-3236b5764f12}", IProcedureLaunch)
agcls.AgTypeNameMap["IProcedureLaunch"] = IProcedureLaunch

class IProcedureAirway(object):
    """Interface used to access the options for an Airway procedure."""
    _uuid = "{49483b87-39de-46f6-b61b-633ada0c7970}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetRouter"] = _raise_uninitialized_error
        self.__dict__["_SetRouter"] = _raise_uninitialized_error
        self.__dict__["_GetAirwayID"] = _raise_uninitialized_error
        self.__dict__["_SetAirwayID"] = _raise_uninitialized_error
        self.__dict__["_GetAirwayNames"] = _raise_uninitialized_error
        self.__dict__["_GetSequence"] = _raise_uninitialized_error
        self.__dict__["_SetSequence"] = _raise_uninitialized_error
        self.__dict__["_GetSequences"] = _raise_uninitialized_error
        self.__dict__["_GetEntryID"] = _raise_uninitialized_error
        self.__dict__["_SetEntryID"] = _raise_uninitialized_error
        self.__dict__["_GetExitID"] = _raise_uninitialized_error
        self.__dict__["_SetExitID"] = _raise_uninitialized_error
        self.__dict__["_GetWaypoints"] = _raise_uninitialized_error
        self.__dict__["_CopyProcedures"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureAirway._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureAirway from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureAirway = agcom.GUID(IProcedureAirway._uuid)
        vtable_offset_local = IProcedureAirway._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetRouter"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetRouter"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetAirwayID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetAirwayID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetAirwayNames"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+9, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetSequence"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetSequence"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+11, agcom.BSTR)
        self.__dict__["_GetSequences"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+12, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetEntryID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetEntryID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetExitID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_SetExitID"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+16, agcom.BSTR)
        self.__dict__["_GetWaypoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+17, POINTER(agcom.SAFEARRAY))
        self.__dict__["_CopyProcedures"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirway, vtable_offset_local+18, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureAirway.__dict__ and type(IProcedureAirway.__dict__[attrname]) == property:
            return IProcedureAirway.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureAirway.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def AltitudeOptions(self) -> "IAltitudeMSLOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def Router(self) -> str:
        """The router used to provide available airways."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRouter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Router.setter
    def Router(self, newVal:str) -> None:
        """The router used to provide available airways."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRouter"](arg_newVal.COM_val))

    @property
    def AirwayID(self) -> str:
        """The airway ID."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirwayID"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AirwayID.setter
    def AirwayID(self, newVal:str) -> None:
        """The airway ID."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAirwayID"](arg_newVal.COM_val))

    def GetAirwayNames(self) -> list:
        """Get the a list of names of the available airways."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirwayNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Sequence(self) -> str:
        """The direction the aircraft will fly the route."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        """The direction the aircraft will fly the route."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequence"](arg_newVal.COM_val))

    def GetSequences(self) -> list:
        """Get a list of sequence options."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequences"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def EntryID(self) -> str:
        """The ID of the entry waypoint."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEntryID"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EntryID.setter
    def EntryID(self, newVal:str) -> None:
        """The ID of the entry waypoint."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEntryID"](arg_newVal.COM_val))

    @property
    def ExitID(self) -> str:
        """The ID of the exit waypoint."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetExitID"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ExitID.setter
    def ExitID(self, newVal:str) -> None:
        """The ID of the exit waypoint."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetExitID"](arg_newVal.COM_val))

    def GetWaypoints(self) -> list:
        """Get a list of available waypoints for the airway."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWaypoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopyProcedures(self) -> None:
        """Copy the airway route as a set of procedures to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyProcedures"]())


agcls.AgClassCatalog.add_catalog_entry("{49483b87-39de-46f6-b61b-633ada0c7970}", IProcedureAirway)
agcls.AgTypeNameMap["IProcedureAirway"] = IProcedureAirway

class IProcedureAirwayRouter(object):
    """Interface used to access the options for an Airway Router procedure."""
    _uuid = "{5f3240be-4a51-4580-976b-f8ca68855608}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetRouter"] = _raise_uninitialized_error
        self.__dict__["_GetOptimizeForWind"] = _raise_uninitialized_error
        self.__dict__["_SetOptimizeForWind"] = _raise_uninitialized_error
        self.__dict__["_GetBoundingBoxPad"] = _raise_uninitialized_error
        self.__dict__["_SetBoundingBoxPad"] = _raise_uninitialized_error
        self.__dict__["_GetMaxWaypointRange"] = _raise_uninitialized_error
        self.__dict__["_SetMaxWaypointRange"] = _raise_uninitialized_error
        self.__dict__["_GetEntryExitAndOr"] = _raise_uninitialized_error
        self.__dict__["_SetEntryExitAndOr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxWaypointCount"] = _raise_uninitialized_error
        self.__dict__["_SetMaxWaypointCount"] = _raise_uninitialized_error
        self.__dict__["_UpdateRoute"] = _raise_uninitialized_error
        self.__dict__["_GetWaypoints"] = _raise_uninitialized_error
        self.__dict__["_GetSegments"] = _raise_uninitialized_error
        self.__dict__["_CopyProcedures"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureAirwayRouter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureAirwayRouter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureAirwayRouter = agcom.GUID(IProcedureAirwayRouter._uuid)
        vtable_offset_local = IProcedureAirwayRouter._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetRouter"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetOptimizeForWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOptimizeForWind"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetBoundingBoxPad"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBoundingBoxPad"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetMaxWaypointRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxWaypointRange"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetEntryExitAndOr"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetEntryExitAndOr"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetMaxWaypointCount"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetMaxWaypointCount"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_UpdateRoute"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+16, )
        self.__dict__["_GetWaypoints"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+17, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetSegments"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
        self.__dict__["_CopyProcedures"] = IAGFUNCTYPE(pUnk, IID_IProcedureAirwayRouter, vtable_offset_local+19, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureAirwayRouter.__dict__ and type(IProcedureAirwayRouter.__dict__[attrname]) == property:
            return IProcedureAirwayRouter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureAirwayRouter.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def AltitudeOptions(self) -> "IAltitudeMSLOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def Router(self) -> str:
        """The router used to provide available airways."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRouter"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OptimizeForWind(self) -> bool:
        """Opt to account for the wind when calculating the most efficient route."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOptimizeForWind"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OptimizeForWind.setter
    def OptimizeForWind(self, newVal:bool) -> None:
        """Opt to account for the wind when calculating the most efficient route."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOptimizeForWind"](arg_newVal.COM_val))

    @property
    def BoundingBoxPad(self) -> float:
        """The maximum distance beyond the bounding box that a waypoint will be considered for the final route."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBoundingBoxPad"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BoundingBoxPad.setter
    def BoundingBoxPad(self, newVal:float) -> None:
        """The maximum distance beyond the bounding box that a waypoint will be considered for the final route."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBoundingBoxPad"](arg_newVal.COM_val))

    @property
    def MaxWaypointRange(self) -> float:
        """The maximum distance from the end of the previous procedure that an airway waypoint will be considered."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxWaypointRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxWaypointRange.setter
    def MaxWaypointRange(self, newVal:float) -> None:
        """The maximum distance from the end of the previous procedure that an airway waypoint will be considered."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxWaypointRange"](arg_newVal.COM_val))

    @property
    def EntryExitAndOr(self) -> "AgEAvtrAndOr":
        """Define how the two Entry/Exit Waypoint constraints will be considered."""
        with agmarshall.AgEnum_arg(AgEAvtrAndOr) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEntryExitAndOr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EntryExitAndOr.setter
    def EntryExitAndOr(self, newVal:"AgEAvtrAndOr") -> None:
        """Define how the two Entry/Exit Waypoint constraints will be considered."""
        with agmarshall.AgEnum_arg(AgEAvtrAndOr, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEntryExitAndOr"](arg_newVal.COM_val))

    @property
    def MaxWaypointCount(self) -> int:
        """The maximum number of airway waypoints that the procedure will consider for each segment."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxWaypointCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxWaypointCount.setter
    def MaxWaypointCount(self, newVal:int) -> None:
        """The maximum number of airway waypoints that the procedure will consider for each segment."""
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxWaypointCount"](arg_newVal.COM_val))

    def UpdateRoute(self) -> None:
        """Recalculate the route."""
        agcls.evaluate_hresult(self.__dict__["_UpdateRoute"]())

    def GetWaypoints(self) -> list:
        """Get a list of the current route's waypoints."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetWaypoints"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetSegments(self) -> list:
        """Get a list of the current route's individual procedures."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegments"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def CopyProcedures(self) -> None:
        """Copy the route as a set of procedures to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyProcedures"]())


agcls.AgClassCatalog.add_catalog_entry("{5f3240be-4a51-4580-976b-f8ca68855608}", IProcedureAirwayRouter)
agcls.AgTypeNameMap["IProcedureAirwayRouter"] = IProcedureAirwayRouter

class IProcedureAreaTargetSearch(object):
    """Interface used to access the options for an Area Target Search procedure."""
    _uuid = "{ad0dc4ce-a6b1-499b-9a60-54dd5b6266ac}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_SetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSeparation"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSeparation"] = _raise_uninitialized_error
        self.__dict__["_GetCourseMode"] = _raise_uninitialized_error
        self.__dict__["_SetCourseMode"] = _raise_uninitialized_error
        self.__dict__["_GetFirstLegRetrograde"] = _raise_uninitialized_error
        self.__dict__["_SetFirstLegRetrograde"] = _raise_uninitialized_error
        self.__dict__["_GetCentroidTrueCourse"] = _raise_uninitialized_error
        self.__dict__["_SetCentroidTrueCourse"] = _raise_uninitialized_error
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = _raise_uninitialized_error
        self.__dict__["_GetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_CopyProcedures"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureAreaTargetSearch._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureAreaTargetSearch from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureAreaTargetSearch = agcom.GUID(IProcedureAreaTargetSearch._uuid)
        vtable_offset_local = IProcedureAreaTargetSearch._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMaxSeparation"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxSeparation"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetCourseMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetFirstLegRetrograde"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFirstLegRetrograde"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetCentroidTrueCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetCentroidTrueCourse"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetFlyCruiseAirspeedProfile"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_CopyProcedures"] = IAGFUNCTYPE(pUnk, IID_IProcedureAreaTargetSearch, vtable_offset_local+21, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureAreaTargetSearch.__dict__ and type(IProcedureAreaTargetSearch.__dict__[attrname]) == property:
            return IProcedureAreaTargetSearch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureAreaTargetSearch.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def AltitudeOptions(self) -> "IAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProcedureType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProcedureType"](arg_newVal.COM_val))

    @property
    def MaxSeparation(self) -> float:
        """The maximum distance between the parallel flight lines of the search pattern."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSeparation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSeparation.setter
    def MaxSeparation(self, newVal:float) -> None:
        """The maximum distance between the parallel flight lines of the search pattern."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSeparation"](arg_newVal.COM_val))

    @property
    def CourseMode(self) -> "AgEAvtrSearchPatternCourseMode":
        """The mode to determine the course of the search pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrSearchPatternCourseMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCourseMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CourseMode.setter
    def CourseMode(self, newVal:"AgEAvtrSearchPatternCourseMode") -> None:
        """The mode to determine the course of the search pattern."""
        with agmarshall.AgEnum_arg(AgEAvtrSearchPatternCourseMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCourseMode"](arg_newVal.COM_val))

    @property
    def FirstLegRetrograde(self) -> bool:
        """The option to fly the first leg of the search pattern on the reverse heading."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstLegRetrograde"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstLegRetrograde.setter
    def FirstLegRetrograde(self, newVal:bool) -> None:
        """The option to fly the first leg of the search pattern on the reverse heading."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstLegRetrograde"](arg_newVal.COM_val))

    @property
    def CentroidTrueCourse(self) -> typing.Any:
        """The specific course of the search pattern."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentroidTrueCourse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentroidTrueCourse.setter
    def CentroidTrueCourse(self, newVal:typing.Any) -> None:
        """The specific course of the search pattern."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentroidTrueCourse"](arg_newVal.COM_val))

    @property
    def FlyCruiseAirspeedProfile(self) -> bool:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlyCruiseAirspeedProfile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlyCruiseAirspeedProfile.setter
    def FlyCruiseAirspeedProfile(self, pVal:bool) -> None:
        """Opt whether the aircraft immediately adopts the selected cruise airspeed or gradually begins accelerating/decelerating in the previous procedure."""
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlyCruiseAirspeedProfile"](arg_pVal.COM_val))

    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMustLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMustLevelOff"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    def CopyProcedures(self) -> None:
        """Copy the search pattern maneuvers as a set of procedures to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyProcedures"]())


agcls.AgClassCatalog.add_catalog_entry("{ad0dc4ce-a6b1-499b-9a60-54dd5b6266ac}", IProcedureAreaTargetSearch)
agcls.AgTypeNameMap["IProcedureAreaTargetSearch"] = IProcedureAreaTargetSearch

class IProcedureFormationRecover(object):
    """Interface used to access the options for a Formation Recover procedure."""
    _uuid = "{d96375bc-d2b6-4397-81bc-35a923b5b883}"
    _num_methods = 38
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetDelayCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_FindFirstValidStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumTime"] = _raise_uninitialized_error
        self.__dict__["_GetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_SetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolatePointPosVel"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolatePointPosVel"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_GetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetFirstPause"] = _raise_uninitialized_error
        self.__dict__["_SetFirstPause"] = _raise_uninitialized_error
        self.__dict__["_GetTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_GetSecondPause"] = _raise_uninitialized_error
        self.__dict__["_SetSecondPause"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayStepTime"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayStepTime"] = _raise_uninitialized_error
        self.__dict__["_GetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_SetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_GetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusFactor"] = _raise_uninitialized_error
        self.__dict__["_GetUseDelay"] = _raise_uninitialized_error
        self.__dict__["_SetUseDelay"] = _raise_uninitialized_error
        self.__dict__["_GetDelayTurnDir"] = _raise_uninitialized_error
        self.__dict__["_SetDelayTurnDir"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureFormationRecover._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureFormationRecover from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureFormationRecover = agcom.GUID(IProcedureFormationRecover._uuid)
        vtable_offset_local = IProcedureFormationRecover._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetDelayCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+4, agcom.VARIANT_BOOL, POINTER(agcom.VARIANT))
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_FindFirstValidStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+7, agcom.VARIANT, agcom.VARIANT, agcom.DOUBLE, POINTER(agcom.VARIANT))
        self.__dict__["_GetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_GetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetInterpolatePointPosVel"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInterpolatePointPosVel"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetFirstPause"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+21, POINTER(agcom.VARIANT))
        self.__dict__["_SetFirstPause"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+22, agcom.VARIANT)
        self.__dict__["_GetTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetSecondPause"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_SetSecondPause"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+26, agcom.VARIANT)
        self.__dict__["_GetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+29, POINTER(agcom.LONG))
        self.__dict__["_SetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+30, agcom.LONG)
        self.__dict__["_GetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+31, POINTER(agcom.VARIANT))
        self.__dict__["_SetFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+32, agcom.VARIANT)
        self.__dict__["_GetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusFactor"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+34, agcom.DOUBLE)
        self.__dict__["_GetUseDelay"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+35, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseDelay"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+36, agcom.VARIANT_BOOL)
        self.__dict__["_GetDelayTurnDir"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetDelayTurnDir"] = IAGFUNCTYPE(pUnk, IID_IProcedureFormationRecover, vtable_offset_local+38, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureFormationRecover.__dict__ and type(IProcedureFormationRecover.__dict__[attrname]) == property:
            return IProcedureFormationRecover.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureFormationRecover.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def DelayCruiseAirspeedOptions(self) -> "ICruiseAirspeedOptions":
        """Get the delay cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelayCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def GetMinimumTime(self, considerPrevProc:bool) -> typing.Any:
        """Get the minimum time at which formation might be possible. Opt whether to consider previous procedure(s) for the minimum time."""
        with agmarshall.VARIANT_BOOL_arg(considerPrevProc) as arg_considerPrevProc, \
             agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumTime"](arg_considerPrevProc.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StartTime(self) -> typing.Any:
        """The time at which the formation begins."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The time at which the formation begins."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_newVal.COM_val))

    def FindFirstValidStartTime(self, minTime:typing.Any, maxTime:typing.Any, stepTime:float) -> typing.Any:
        """Have Aviator calculate the earliest valid formation time."""
        with agmarshall.VARIANT_arg(minTime) as arg_minTime, \
             agmarshall.VARIANT_arg(maxTime) as arg_maxTime, \
             agmarshall.DOUBLE_arg(stepTime) as arg_stepTime, \
             agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_FindFirstValidStartTime"](arg_minTime.COM_val, arg_maxTime.COM_val, arg_stepTime.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaximumTime(self) -> typing.Any:
        """The maximum time at which formation might be possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormationPoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFormationPoint"](arg_newVal.COM_val))

    @property
    def InterpolatePointPosVel(self) -> bool:
        """The option to use interpolation to determine the formation point's speed and position."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolatePointPosVel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolatePointPosVel.setter
    def InterpolatePointPosVel(self, newVal:bool) -> None:
        """The option to use interpolation to determine the formation point's speed and position."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolatePointPosVel"](arg_newVal.COM_val))

    @property
    def AltitudeOffset(self) -> float:
        """The altitude distance between the aircraft and the formation point during the first or second pause."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeOffset.setter
    def AltitudeOffset(self, newVal:float) -> None:
        """The altitude distance between the aircraft and the formation point during the first or second pause."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeOffset"](arg_newVal.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlowValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlowValue"](arg_newVal.COM_val))

    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConsiderAccelForFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConsiderAccelForFuelFlow"](arg_newVal.COM_val))

    @property
    def FirstPause(self) -> typing.Any:
        """The amount of time that the aircraft will pause at the specified altitude offset."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstPause"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstPause.setter
    def FirstPause(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at the specified altitude offset."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstPause"](arg_newVal.COM_val))

    @property
    def TransitionTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the specified altitude offset to a zero altitude offset."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransitionTime.setter
    def TransitionTime(self, newVal:float) -> None:
        """The amount of time that the aircraft will spend transitioning from the specified altitude offset to a zero altitude offset."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransitionTime"](arg_newVal.COM_val))

    @property
    def SecondPause(self) -> typing.Any:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondPause"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondPause.setter
    def SecondPause(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondPause"](arg_newVal.COM_val))

    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayStepTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayStepTime"](arg_newVal.COM_val))

    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightMode"](arg_newVal.COM_val))

    @property
    def FlightPathAngle(self) -> typing.Any:
        """The flight path angle at the beginning of the first pause."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightPathAngle.setter
    def FlightPathAngle(self, newVal:typing.Any) -> None:
        """The flight path angle at the beginning of the first pause."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightPathAngle"](arg_newVal.COM_val))

    @property
    def RadiusFactor(self) -> float:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusFactor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusFactor.setter
    def RadiusFactor(self, newVal:float) -> None:
        """The maximum amount the radius of vertical curve will be increased to minimize the flight path angle required to complete it."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusFactor"](arg_newVal.COM_val))

    @property
    def UseDelay(self) -> bool:
        """The option to insert a delay at the beginning of the procedure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseDelay"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseDelay.setter
    def UseDelay(self, newVal:bool) -> None:
        """The option to insert a delay at the beginning of the procedure."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseDelay"](arg_newVal.COM_val))

    @property
    def DelayTurnDir(self) -> "AgEAvtrDelayTurnDir":
        """The turn direction of the delay."""
        with agmarshall.AgEnum_arg(AgEAvtrDelayTurnDir) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelayTurnDir"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelayTurnDir.setter
    def DelayTurnDir(self, newVal:"AgEAvtrDelayTurnDir") -> None:
        """The turn direction of the delay."""
        with agmarshall.AgEnum_arg(AgEAvtrDelayTurnDir, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelayTurnDir"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{d96375bc-d2b6-4397-81bc-35a923b5b883}", IProcedureFormationRecover)
agcls.AgTypeNameMap["IProcedureFormationRecover"] = IProcedureFormationRecover

class IProcedureInFormation(object):
    """Interface used to access the options for an In Formation procedure."""
    _uuid = "{7d5aa09b-b2d4-4984-b930-f4b55acf3219}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_SetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_GetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_SetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_GetTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_SetTransitionTime"] = _raise_uninitialized_error
        self.__dict__["_GetHoldTime"] = _raise_uninitialized_error
        self.__dict__["_SetHoldTime"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayStepTime"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayStepTime"] = _raise_uninitialized_error
        self.__dict__["_GetTrajectoryBlending"] = _raise_uninitialized_error
        self.__dict__["_SetTrajectoryBlending"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_GetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureInFormation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureInFormation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureInFormation = agcom.GUID(IProcedureInFormation._uuid)
        vtable_offset_local = IProcedureInFormation._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_SetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_SetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+5, agcom.BSTR)
        self.__dict__["_GetTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTransitionTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetHoldTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetHoldTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetTrajectoryBlending"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetTrajectoryBlending"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureInFormation, vtable_offset_local+19, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureInFormation.__dict__ and type(IProcedureInFormation.__dict__[attrname]) == property:
            return IProcedureInFormation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureInFormation.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightMode"](arg_newVal.COM_val))

    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormationPoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFormationPoint"](arg_newVal.COM_val))

    @property
    def TransitionTime(self) -> float:
        """The amount of time that the aircraft will spend transitioning from the altitude offset to a zero altitude offset."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTransitionTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TransitionTime.setter
    def TransitionTime(self, newVal:float) -> None:
        """The amount of time that the aircraft will spend transitioning from the altitude offset to a zero altitude offset."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTransitionTime"](arg_newVal.COM_val))

    @property
    def HoldTime(self) -> typing.Any:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoldTime.setter
    def HoldTime(self, newVal:typing.Any) -> None:
        """The amount of time that the aircraft will pause at a zero altitude offset."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldTime"](arg_newVal.COM_val))

    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayStepTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayStepTime"](arg_newVal.COM_val))

    @property
    def TrajectoryBlending(self) -> "AgEAvtrTrajectoryBlendMode":
        """The interpolation mode to determine the aircraft's position and velocity."""
        with agmarshall.AgEnum_arg(AgEAvtrTrajectoryBlendMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrajectoryBlending"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrajectoryBlending.setter
    def TrajectoryBlending(self, newVal:"AgEAvtrTrajectoryBlendMode") -> None:
        """The interpolation mode to determine the aircraft's position and velocity."""
        with agmarshall.AgEnum_arg(AgEAvtrTrajectoryBlendMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrajectoryBlending"](arg_newVal.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlowValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlowValue"](arg_newVal.COM_val))

    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConsiderAccelForFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConsiderAccelForFuelFlow"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7d5aa09b-b2d4-4984-b930-f4b55acf3219}", IProcedureInFormation)
agcls.AgTypeNameMap["IProcedureInFormation"] = IProcedureInFormation

class IProcedureParallelFlightLine(object):
    """Interface used to access the options for a Parallel Flight Line procedure."""
    _uuid = "{4c911a89-bad8-457e-9dca-64c1adf59603}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAltitudeOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = _raise_uninitialized_error
        self.__dict__["_GetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_SetProcedureType"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        self.__dict__["_SetOrientation"] = _raise_uninitialized_error
        self.__dict__["_GetSeparation"] = _raise_uninitialized_error
        self.__dict__["_SetSeparation"] = _raise_uninitialized_error
        self.__dict__["_GetOffset"] = _raise_uninitialized_error
        self.__dict__["_SetOffset"] = _raise_uninitialized_error
        self.__dict__["_GetLegLength"] = _raise_uninitialized_error
        self.__dict__["_SetLegLength"] = _raise_uninitialized_error
        self.__dict__["_GetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_SetMustLevelOff"] = _raise_uninitialized_error
        self.__dict__["_GetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_SetLevelOffMode"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureParallelFlightLine._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureParallelFlightLine from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureParallelFlightLine = agcom.GUID(IProcedureParallelFlightLine._uuid)
        vtable_offset_local = IProcedureParallelFlightLine._vtable_offset - 1
        self.__dict__["_GetAltitudeOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteCruiseAirspeedOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEnrouteTurnDirectionOptions"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetProcedureType"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetOrientation"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetSeparation"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSeparation"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOffset"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetLegLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLegLength"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetMustLevelOff"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetLevelOffMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureParallelFlightLine, vtable_offset_local+19, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureParallelFlightLine.__dict__ and type(IProcedureParallelFlightLine.__dict__[attrname]) == property:
            return IProcedureParallelFlightLine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureParallelFlightLine.")
    
    @property
    def AltitudeOptions(self) -> "IAltitudeOptions":
        """Get the altitude options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteOptions(self) -> "IEnrouteOptions":
        """Get the enroute options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteCruiseAirspeedOptions(self) -> "ICruiseAirspeedAndProfileOptions":
        """Get the enroute cruise airspeed options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteCruiseAirspeedOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def EnrouteTurnDirectionOptions(self) -> "IEnrouteTurnDirectionOptions":
        """Get the enroute turn direction options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnrouteTurnDirectionOptions"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def ProcedureType(self) -> "AgEAvtrFlightLineProcType":
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetProcedureType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ProcedureType.setter
    def ProcedureType(self, newVal:"AgEAvtrFlightLineProcType") -> None:
        """The procedure methodology used to calculate the flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrFlightLineProcType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetProcedureType"](arg_newVal.COM_val))

    @property
    def Orientation(self) -> "AgEAvtrLineOrientation":
        """The placement of the procedure with respect to the previous flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrLineOrientation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Orientation.setter
    def Orientation(self, newVal:"AgEAvtrLineOrientation") -> None:
        """The placement of the procedure with respect to the previous flight line."""
        with agmarshall.AgEnum_arg(AgEAvtrLineOrientation, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrientation"](arg_newVal.COM_val))

    @property
    def Separation(self) -> float:
        """The distance between the flight line and the previous flight line."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSeparation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Separation.setter
    def Separation(self, newVal:float) -> None:
        """The distance between the flight line and the previous flight line."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSeparation"](arg_newVal.COM_val))

    @property
    def Offset(self) -> float:
        """The distance from the end of the previous procedure to the beginning of the flight line."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Offset.setter
    def Offset(self, newVal:float) -> None:
        """The distance from the end of the previous procedure to the beginning of the flight line."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOffset"](arg_newVal.COM_val))

    @property
    def LegLength(self) -> float:
        """The length of the flight line."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLegLength"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LegLength.setter
    def LegLength(self, newVal:float) -> None:
        """The length of the flight line."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLegLength"](arg_newVal.COM_val))

    @property
    def MustLevelOff(self) -> bool:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMustLevelOff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MustLevelOff.setter
    def MustLevelOff(self, newVal:bool) -> None:
        """Opt whether the procedure must level off."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMustLevelOff"](arg_newVal.COM_val))

    @property
    def LevelOffMode(self) -> "AgEAvtrAltitudeConstraintManeuverMode":
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLevelOffMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LevelOffMode.setter
    def LevelOffMode(self, newVal:"AgEAvtrAltitudeConstraintManeuverMode") -> None:
        """The level off mode. This is only used when the must level off option is on."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeConstraintManeuverMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLevelOffMode"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{4c911a89-bad8-457e-9dca-64c1adf59603}", IProcedureParallelFlightLine)
agcls.AgTypeNameMap["IProcedureParallelFlightLine"] = IProcedureParallelFlightLine

class IProcedureVGTPoint(object):
    """Interface used to access the options for a VGT Point procedure."""
    _uuid = "{36159f4d-5c80-4a49-bdf8-ccfdda28100b}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        self.__dict__["_GetMinimumTime"] = _raise_uninitialized_error
        self.__dict__["_GetStartTime"] = _raise_uninitialized_error
        self.__dict__["_SetStartTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumTime"] = _raise_uninitialized_error
        self.__dict__["_GetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_SetFormationPoint"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolatePointPosVel"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolatePointPosVel"] = _raise_uninitialized_error
        self.__dict__["_GetDuration"] = _raise_uninitialized_error
        self.__dict__["_SetDuration"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxPointStopTime"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxPointStopTime"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlowValue"] = _raise_uninitialized_error
        self.__dict__["_GetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetConsiderAccelForFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_SetFlightMode"] = _raise_uninitialized_error
        self.__dict__["_GetDisplayStepTime"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayStepTime"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureVGTPoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureVGTPoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureVGTPoint = agcom.GUID(IProcedureVGTPoint._uuid)
        vtable_offset_local = IProcedureVGTPoint._vtable_offset - 1
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetMinimumTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+2, POINTER(agcom.VARIANT))
        self.__dict__["_GetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetStartTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetMaximumTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_SetFormationPoint"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_GetInterpolatePointPosVel"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInterpolatePointPosVel"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetDuration"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDuration"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetUseMaxPointStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxPointStopTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlowValue"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetConsiderAccelForFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetFlightMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDisplayStepTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureVGTPoint, vtable_offset_local+23, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureVGTPoint.__dict__ and type(IProcedureVGTPoint.__dict__[attrname]) == property:
            return IProcedureVGTPoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureVGTPoint.")
    
    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val

    @property
    def MinimumTime(self) -> typing.Any:
        """The minimum time at which formation might be possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinimumTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def StartTime(self) -> typing.Any:
        """The time at which the formation begins."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStartTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StartTime.setter
    def StartTime(self, newVal:typing.Any) -> None:
        """The time at which the formation begins."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStartTime"](arg_newVal.COM_val))

    @property
    def MaximumTime(self) -> typing.Any:
        """The maximum time at which formation might be possible."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FormationPoint(self) -> str:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormationPoint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FormationPoint.setter
    def FormationPoint(self, newVal:str) -> None:
        """The position that the aircraft will be locked onto while in formation."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFormationPoint"](arg_newVal.COM_val))

    @property
    def InterpolatePointPosVel(self) -> bool:
        """The option to use interpolation to determine the formation point's speed and position."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolatePointPosVel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolatePointPosVel.setter
    def InterpolatePointPosVel(self, newVal:bool) -> None:
        """The option to use interpolation to determine the formation point's speed and position."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolatePointPosVel"](arg_newVal.COM_val))

    @property
    def Duration(self) -> float:
        """The duration of the procedure."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDuration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Duration.setter
    def Duration(self, newVal:float) -> None:
        """The duration of the procedure."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDuration"](arg_newVal.COM_val))

    @property
    def UseMaxPointStopTime(self) -> bool:
        """Opt to limit the duration to the maximum possible time if the duration exceeds the time limit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxPointStopTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxPointStopTime.setter
    def UseMaxPointStopTime(self, newVal:bool) -> None:
        """Opt to limit the duration to the maximum possible time if the duration exceeds the time limit."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxPointStopTime"](arg_newVal.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The source used to calculate the fuel flow for the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlowValue(self) -> float:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlowValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlowValue.setter
    def OverrideFuelFlowValue(self, newVal:float) -> None:
        """The value used for the Override Fuel Flow type. The fuel flow type must be set to Override to access this value."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlowValue"](arg_newVal.COM_val))

    @property
    def ConsiderAccelForFuelFlow(self) -> bool:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConsiderAccelForFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConsiderAccelForFuelFlow.setter
    def ConsiderAccelForFuelFlow(self, newVal:bool) -> None:
        """The option to calculate the fuel flow rate according to the acceleration of the aircraft."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConsiderAccelForFuelFlow"](arg_newVal.COM_val))

    @property
    def FlightMode(self) -> "AgEAvtrPhaseOfFlight":
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlightMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FlightMode.setter
    def FlightMode(self, newVal:"AgEAvtrPhaseOfFlight") -> None:
        """The type of performance model that the aircraft will use to fly the maneuver."""
        with agmarshall.AgEnum_arg(AgEAvtrPhaseOfFlight, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFlightMode"](arg_newVal.COM_val))

    @property
    def DisplayStepTime(self) -> float:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayStepTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisplayStepTime.setter
    def DisplayStepTime(self, newVal:float) -> None:
        """The time interval at which ephemeris is generated for display purposes."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayStepTime"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{36159f4d-5c80-4a49-bdf8-ccfdda28100b}", IProcedureVGTPoint)
agcls.AgTypeNameMap["IProcedureVGTPoint"] = IProcedureVGTPoint

class ISiteRunwayFromCatalog(object):
    """Interface used to access the options for a Runway From Catalog site type."""
    _uuid = "{56a06eb2-be85-4e31-b850-7c0485566739}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCatalogRunway"] = _raise_uninitialized_error
        self.__dict__["_SetCatalogRunway"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteRunwayFromCatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteRunwayFromCatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteRunwayFromCatalog = agcom.GUID(ISiteRunwayFromCatalog._uuid)
        vtable_offset_local = ISiteRunwayFromCatalog._vtable_offset - 1
        self.__dict__["_GetCatalogRunway"] = IAGFUNCTYPE(pUnk, IID_ISiteRunwayFromCatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetCatalogRunway"] = IAGFUNCTYPE(pUnk, IID_ISiteRunwayFromCatalog, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteRunwayFromCatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteRunwayFromCatalog.__dict__ and type(ISiteRunwayFromCatalog.__dict__[attrname]) == property:
            return ISiteRunwayFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteRunwayFromCatalog.")
    
    def GetCatalogRunway(self) -> "ICatalogRunway":
        """Get the catalog runway."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCatalogRunway"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def SetCatalogRunway(self, pVal:"ICatalogRunway") -> None:
        """Set the catalog runway."""
        with agmarshall.AgInterface_in_arg(pVal, ICatalogRunway) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCatalogRunway"](arg_pVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{56a06eb2-be85-4e31-b850-7c0485566739}", ISiteRunwayFromCatalog)
agcls.AgTypeNameMap["ISiteRunwayFromCatalog"] = ISiteRunwayFromCatalog

class ISiteAirportFromCatalog(object):
    """Interface used to access the options for a airport From Catalog site type."""
    _uuid = "{8cf3e110-d619-4769-894a-b23cb32baa7f}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCatalogAirport"] = _raise_uninitialized_error
        self.__dict__["_SetCatalogAirport"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteAirportFromCatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteAirportFromCatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteAirportFromCatalog = agcom.GUID(ISiteAirportFromCatalog._uuid)
        vtable_offset_local = ISiteAirportFromCatalog._vtable_offset - 1
        self.__dict__["_GetCatalogAirport"] = IAGFUNCTYPE(pUnk, IID_ISiteAirportFromCatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetCatalogAirport"] = IAGFUNCTYPE(pUnk, IID_ISiteAirportFromCatalog, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteAirportFromCatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteAirportFromCatalog.__dict__ and type(ISiteAirportFromCatalog.__dict__[attrname]) == property:
            return ISiteAirportFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteAirportFromCatalog.")
    
    def GetCatalogAirport(self) -> "ICatalogAirport":
        """Get the catalog airport."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCatalogAirport"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def SetCatalogAirport(self, pVal:"ICatalogAirport") -> None:
        """Set the catalog airport."""
        with agmarshall.AgInterface_in_arg(pVal, ICatalogAirport) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCatalogAirport"](arg_pVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{8cf3e110-d619-4769-894a-b23cb32baa7f}", ISiteAirportFromCatalog)
agcls.AgTypeNameMap["ISiteAirportFromCatalog"] = ISiteAirportFromCatalog

class ISiteNavaidFromCatalog(object):
    """Interface used to access the options for a navaid From Catalog site type."""
    _uuid = "{960e8584-5349-44cc-8b49-9a00c209f9a5}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCatalogNavaid"] = _raise_uninitialized_error
        self.__dict__["_SetCatalogNavaid"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteNavaidFromCatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteNavaidFromCatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteNavaidFromCatalog = agcom.GUID(ISiteNavaidFromCatalog._uuid)
        vtable_offset_local = ISiteNavaidFromCatalog._vtable_offset - 1
        self.__dict__["_GetCatalogNavaid"] = IAGFUNCTYPE(pUnk, IID_ISiteNavaidFromCatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetCatalogNavaid"] = IAGFUNCTYPE(pUnk, IID_ISiteNavaidFromCatalog, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteNavaidFromCatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteNavaidFromCatalog.__dict__ and type(ISiteNavaidFromCatalog.__dict__[attrname]) == property:
            return ISiteNavaidFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteNavaidFromCatalog.")
    
    def GetCatalogNavaid(self) -> "ICatalogNavaid":
        """Get the catalog navaid."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCatalogNavaid"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def SetCatalogNavaid(self, pVal:"ICatalogNavaid") -> None:
        """Set the catalog navaid."""
        with agmarshall.AgInterface_in_arg(pVal, ICatalogNavaid) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCatalogNavaid"](arg_pVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{960e8584-5349-44cc-8b49-9a00c209f9a5}", ISiteNavaidFromCatalog)
agcls.AgTypeNameMap["ISiteNavaidFromCatalog"] = ISiteNavaidFromCatalog

class ISiteVTOLPointFromCatalog(object):
    """Interface used to access the options for a VTOL Point From Catalog site type."""
    _uuid = "{f0556822-9ba9-45ca-9cd2-e965d442d997}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCatalogVTOLPoint"] = _raise_uninitialized_error
        self.__dict__["_SetCatalogVTOLPoint"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteVTOLPointFromCatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteVTOLPointFromCatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteVTOLPointFromCatalog = agcom.GUID(ISiteVTOLPointFromCatalog._uuid)
        vtable_offset_local = ISiteVTOLPointFromCatalog._vtable_offset - 1
        self.__dict__["_GetCatalogVTOLPoint"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPointFromCatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetCatalogVTOLPoint"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPointFromCatalog, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteVTOLPointFromCatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteVTOLPointFromCatalog.__dict__ and type(ISiteVTOLPointFromCatalog.__dict__[attrname]) == property:
            return ISiteVTOLPointFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteVTOLPointFromCatalog.")
    
    def GetCatalogVTOLPoint(self) -> "ICatalogVTOLPoint":
        """Get the catalog VTOL point."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCatalogVTOLPoint"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def SetCatalogVTOLPoint(self, pVal:"ICatalogVTOLPoint") -> None:
        """Set the catalog VTOL point."""
        with agmarshall.AgInterface_in_arg(pVal, ICatalogVTOLPoint) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCatalogVTOLPoint"](arg_pVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{f0556822-9ba9-45ca-9cd2-e965d442d997}", ISiteVTOLPointFromCatalog)
agcls.AgTypeNameMap["ISiteVTOLPointFromCatalog"] = ISiteVTOLPointFromCatalog

class ISiteWaypointFromCatalog(object):
    """Interface used to access the options for a waypoint From Catalog site type."""
    _uuid = "{89b1a048-7b22-45ab-bd5c-34584de7b2b7}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCatalogWaypoint"] = _raise_uninitialized_error
        self.__dict__["_SetCatalogWaypoint"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteWaypointFromCatalog._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteWaypointFromCatalog from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteWaypointFromCatalog = agcom.GUID(ISiteWaypointFromCatalog._uuid)
        vtable_offset_local = ISiteWaypointFromCatalog._vtable_offset - 1
        self.__dict__["_GetCatalogWaypoint"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypointFromCatalog, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetCatalogWaypoint"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypointFromCatalog, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteWaypointFromCatalog, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteWaypointFromCatalog.__dict__ and type(ISiteWaypointFromCatalog.__dict__[attrname]) == property:
            return ISiteWaypointFromCatalog.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteWaypointFromCatalog.")
    
    def GetCatalogWaypoint(self) -> "ICatalogWaypoint":
        """Get the catalog waypoint."""
        with agmarshall.AgInterface_out_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_GetCatalogWaypoint"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    def SetCatalogWaypoint(self, pVal:"ICatalogWaypoint") -> None:
        """Set the catalog waypoint."""
        with agmarshall.AgInterface_in_arg(pVal, ICatalogWaypoint) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCatalogWaypoint"](arg_pVal.COM_val))

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{89b1a048-7b22-45ab-bd5c-34584de7b2b7}", ISiteWaypointFromCatalog)
agcls.AgTypeNameMap["ISiteWaypointFromCatalog"] = ISiteWaypointFromCatalog

class IProcedureLaunchDynState(object):
    """Interface used to access the options for a dyn state launch procedure."""
    _uuid = "{BC0541E2-248E-4B42-8A7F-E9C411E40073}"
    _num_methods = 26
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_GetCoordFrame"] = _raise_uninitialized_error
        self.__dict__["_SetCoordFrame"] = _raise_uninitialized_error
        self.__dict__["_GetBearingRef"] = _raise_uninitialized_error
        self.__dict__["_SetBearingRef"] = _raise_uninitialized_error
        self.__dict__["_GetLaunchBearing"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchBearing"] = _raise_uninitialized_error
        self.__dict__["_GetLaunchElevation"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchElevation"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeMode"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeMode"] = _raise_uninitialized_error
        self.__dict__["_GetSpecifyLaunchAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetSpecifyLaunchAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetAccelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelG"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetTrueCourseHint"] = _raise_uninitialized_error
        self.__dict__["_SetTrueCourseHint"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureLaunchDynState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureLaunchDynState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureLaunchDynState = agcom.GUID(IProcedureLaunchDynState._uuid)
        vtable_offset_local = IProcedureLaunchDynState._vtable_offset - 1
        self.__dict__["_GetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetCoordFrame"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetCoordFrame"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetBearingRef"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetBearingRef"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetLaunchBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetLaunchElevation"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchElevation"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetAttitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeMode"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetSpecifyLaunchAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSpecifyLaunchAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+19, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetTrueCourseHint"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+24, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrueCourseHint"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+25, agcom.VARIANT)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchDynState, vtable_offset_local+26, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureLaunchDynState.__dict__ and type(IProcedureLaunchDynState.__dict__[attrname]) == property:
            return IProcedureLaunchDynState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureLaunchDynState.")
    
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchTime"](arg_newVal.COM_val))

    @property
    def CoordFrame(self) -> "AgEAvtrLaunchDynStateCoordFrame":
        """The reference coordinate frame for the dyn state launch procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateCoordFrame) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordFrame"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordFrame.setter
    def CoordFrame(self, pVal:"AgEAvtrLaunchDynStateCoordFrame") -> None:
        """The reference coordinate frame for the dyn state launch procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateCoordFrame, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordFrame"](arg_pVal.COM_val))

    @property
    def BearingRef(self) -> "AgEAvtrLaunchDynStateBearingRef":
        """The bearing reference for the dyn state launch procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateBearingRef) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBearingRef"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BearingRef.setter
    def BearingRef(self, pVal:"AgEAvtrLaunchDynStateBearingRef") -> None:
        """The bearing reference for the dyn state launch procedure."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchDynStateBearingRef, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetBearingRef"](arg_pVal.COM_val))

    @property
    def LaunchBearing(self) -> typing.Any:
        """The launch direction bearing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchBearing.setter
    def LaunchBearing(self, newVal:typing.Any) -> None:
        """The launch direction bearing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchBearing"](arg_newVal.COM_val))

    @property
    def LaunchElevation(self) -> typing.Any:
        """The launch direction elevation."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchElevation.setter
    def LaunchElevation(self, newVal:typing.Any) -> None:
        """The launch direction elevation."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchElevation"](arg_newVal.COM_val))

    @property
    def AttitudeMode(self) -> "AgEAvtrLaunchAttitudeMode":
        """The attitude mode during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeMode.setter
    def AttitudeMode(self, newVal:"AgEAvtrLaunchAttitudeMode") -> None:
        """The attitude mode during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrLaunchAttitudeMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeMode"](arg_newVal.COM_val))

    @property
    def SpecifyLaunchAirspeed(self) -> bool:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpecifyLaunchAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpecifyLaunchAirspeed.setter
    def SpecifyLaunchAirspeed(self, newVal:bool) -> None:
        """Opt to specify a minimum launch speed the aircraft will accelerate to."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpecifyLaunchAirspeed"](arg_newVal.COM_val))

    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelG"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlow"](arg_newVal.COM_val))

    @property
    def TrueCourseHint(self) -> typing.Any:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueCourseHint"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrueCourseHint.setter
    def TrueCourseHint(self, newVal:typing.Any) -> None:
        """The true course used when the vehicle's direction vector is set to Zenith."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrueCourseHint"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{BC0541E2-248E-4B42-8A7F-E9C411E40073}", IProcedureLaunchDynState)
agcls.AgTypeNameMap["IProcedureLaunchDynState"] = IProcedureLaunchDynState

class IProcedureLaunchWaypoint(object):
    """Interface used to access the options for a waypoint launch procedure."""
    _uuid = "{6154839D-55D1-4A31-9B03-330411C54D24}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRef"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRef"] = _raise_uninitialized_error
        self.__dict__["_GetLaunchAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetLaunchTrueBearing"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchTrueBearing"] = _raise_uninitialized_error
        self.__dict__["_GetLaunchElevation"] = _raise_uninitialized_error
        self.__dict__["_SetLaunchElevation"] = _raise_uninitialized_error
        self.__dict__["_GetAccelG"] = _raise_uninitialized_error
        self.__dict__["_SetAccelG"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeedType"] = _raise_uninitialized_error
        self.__dict__["_GetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_SetAirspeed"] = _raise_uninitialized_error
        self.__dict__["_GetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_SetFuelFlowType"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideFuelFlow"] = _raise_uninitialized_error
        self.__dict__["_GetAsProcedure"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IProcedureLaunchWaypoint._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IProcedureLaunchWaypoint from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IProcedureLaunchWaypoint = agcom.GUID(IProcedureLaunchWaypoint._uuid)
        vtable_offset_local = IProcedureLaunchWaypoint._vtable_offset - 1
        self.__dict__["_GetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetAltitudeRef"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetAltitudeRef"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetLaunchAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLaunchAltitude"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetLaunchTrueBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchTrueBearing"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetLaunchElevation"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetLaunchElevation"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAccelG"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetAirspeedType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_GetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAirspeed"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+15, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_SetFuelFlowType"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOverrideFuelFlow"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetAsProcedure"] = IAGFUNCTYPE(pUnk, IID_IProcedureLaunchWaypoint, vtable_offset_local+20, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IProcedureLaunchWaypoint.__dict__ and type(IProcedureLaunchWaypoint.__dict__[attrname]) == property:
            return IProcedureLaunchWaypoint.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IProcedureLaunchWaypoint.")
    
    @property
    def LaunchTime(self) -> typing.Any:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchTime.setter
    def LaunchTime(self, newVal:typing.Any) -> None:
        """The launch time of the aircraft."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchTime"](arg_newVal.COM_val))

    @property
    def AltitudeRef(self) -> "AgEAvtrAltitudeRef":
        """The launch altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeRef) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRef"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRef.setter
    def AltitudeRef(self, newVal:"AgEAvtrAltitudeRef") -> None:
        """The launch altitude reference."""
        with agmarshall.AgEnum_arg(AgEAvtrAltitudeRef, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRef"](arg_newVal.COM_val))

    @property
    def LaunchAltitude(self) -> float:
        """The launch altitude."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchAltitude.setter
    def LaunchAltitude(self, newVal:float) -> None:
        """The launch altitude."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchAltitude"](arg_newVal.COM_val))

    @property
    def LaunchTrueBearing(self) -> typing.Any:
        """The launch direction bearing."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchTrueBearing"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchTrueBearing.setter
    def LaunchTrueBearing(self, newVal:typing.Any) -> None:
        """The launch direction bearing."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchTrueBearing"](arg_newVal.COM_val))

    @property
    def LaunchElevation(self) -> typing.Any:
        """The launch direction elevation."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLaunchElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LaunchElevation.setter
    def LaunchElevation(self, newVal:typing.Any) -> None:
        """The launch direction elevation."""
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLaunchElevation"](arg_newVal.COM_val))

    @property
    def AccelG(self) -> float:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAccelG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AccelG.setter
    def AccelG(self, newVal:float) -> None:
        """The acceleration of the aircraft during the launch."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAccelG"](arg_newVal.COM_val))

    @property
    def AirspeedType(self) -> "AgEAvtrAirspeedType":
        """The airspeed type."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeedType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Airspeed(self) -> float:
        """The goal airspeed for the launch."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAirspeed"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAirspeed(self, airspeedType:"AgEAvtrAirspeedType", airspeed:float) -> None:
        """Set the launch airspeed."""
        with agmarshall.AgEnum_arg(AgEAvtrAirspeedType, airspeedType) as arg_airspeedType, \
             agmarshall.DOUBLE_arg(airspeed) as arg_airspeed:
            agcls.evaluate_hresult(self.__dict__["_SetAirspeed"](arg_airspeedType.COM_val, arg_airspeed.COM_val))

    @property
    def FuelFlowType(self) -> "AgEAvtrFuelFlowType":
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelFlowType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelFlowType.setter
    def FuelFlowType(self, newVal:"AgEAvtrFuelFlowType") -> None:
        """The fuel flow type of the aircraft during the launch."""
        with agmarshall.AgEnum_arg(AgEAvtrFuelFlowType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelFlowType"](arg_newVal.COM_val))

    @property
    def OverrideFuelFlow(self) -> float:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideFuelFlow"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideFuelFlow.setter
    def OverrideFuelFlow(self, newVal:float) -> None:
        """The fuel flow value for a fuel flow type set to Override."""
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideFuelFlow"](arg_newVal.COM_val))

    def GetAsProcedure(self) -> "IProcedure":
        """Get the procedure interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppProcedure:
            agcls.evaluate_hresult(self.__dict__["_GetAsProcedure"](byref(arg_ppProcedure.COM_val)))
            return arg_ppProcedure.python_val


agcls.AgClassCatalog.add_catalog_entry("{6154839D-55D1-4A31-9B03-330411C54D24}", IProcedureLaunchWaypoint)
agcls.AgTypeNameMap["IProcedureLaunchWaypoint"] = IProcedureLaunchWaypoint

class ISiteDynState(object):
    """Interface used to access the options for a dyn state site type."""
    _uuid = "{06485268-3338-46D7-8F0C-7BCA35CE9589}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValidObjectNames"] = _raise_uninitialized_error
        self.__dict__["_GetAsSite"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(ISiteDynState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create ISiteDynState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_ISiteDynState = agcom.GUID(ISiteDynState._uuid)
        vtable_offset_local = ISiteDynState._vtable_offset - 1
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteDynState, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_ISiteDynState, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValidObjectNames"] = IAGFUNCTYPE(pUnk, IID_ISiteDynState, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAsSite"] = IAGFUNCTYPE(pUnk, IID_ISiteDynState, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in ISiteDynState.__dict__ and type(ISiteDynState.__dict__[attrname]) == property:
            return ISiteDynState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ISiteDynState.")
    
    @property
    def ObjectName(self) -> str:
        """The object name to link to."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, newVal:str) -> None:
        """The object name to link to."""
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_newVal.COM_val))

    @property
    def ValidObjectNames(self) -> list:
        """Returns the valid object names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValidObjectNames"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetAsSite(self) -> "ISite":
        """Get the site interface."""
        with agmarshall.AgInterface_out_arg() as arg_ppSite:
            agcls.evaluate_hresult(self.__dict__["_GetAsSite"](byref(arg_ppSite.COM_val)))
            return arg_ppSite.python_val


agcls.AgClassCatalog.add_catalog_entry("{06485268-3338-46D7-8F0C-7BCA35CE9589}", ISiteDynState)
agcls.AgTypeNameMap["ISiteDynState"] = ISiteDynState



class SiteWaypoint(ISiteWaypoint, ISite):
    """Class defining a waypoint site."""
    def __init__(self, sourceObject=None):
        ISiteWaypoint.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteWaypoint._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteWaypoint._get_property(self, attrname) is not None: found_prop = ISiteWaypoint._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteWaypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{6d98e9b3-6766-46e5-98e2-b1f859b2ce92}", SiteWaypoint)


class SiteEndOfPrevProcedure(ISiteEndOfPrevProcedure, ISite):
    """Class defining an End of Previous Procedure site."""
    def __init__(self, sourceObject=None):
        ISiteEndOfPrevProcedure.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteEndOfPrevProcedure._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteEndOfPrevProcedure._get_property(self, attrname) is not None: found_prop = ISiteEndOfPrevProcedure._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteEndOfPrevProcedure.")
        
agcls.AgClassCatalog.add_catalog_entry("{24d8e613-5ce5-4e04-9251-fe44414caa14}", SiteEndOfPrevProcedure)


class SiteVTOLPoint(ISiteVTOLPoint, ISite):
    """Class defining a VTOL Point site."""
    def __init__(self, sourceObject=None):
        ISiteVTOLPoint.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteVTOLPoint._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteVTOLPoint._get_property(self, attrname) is not None: found_prop = ISiteVTOLPoint._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteVTOLPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{4f9d9e04-fa7e-4335-b1f4-15788a01c7ea}", SiteVTOLPoint)


class SiteReferenceState(ISiteReferenceState, ISite):
    """Class defining a Reference State site."""
    def __init__(self, sourceObject=None):
        ISiteReferenceState.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteReferenceState._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteReferenceState._get_property(self, attrname) is not None: found_prop = ISiteReferenceState._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteReferenceState.")
        
agcls.AgClassCatalog.add_catalog_entry("{978180ff-3f87-4ead-9405-e12e915c27e1}", SiteReferenceState)


class SiteSTKVehicle(ISiteSTKVehicle, ISite):
    """Class defining a STK Vehicle site."""
    def __init__(self, sourceObject=None):
        ISiteSTKVehicle.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteSTKVehicle._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteSTKVehicle._get_property(self, attrname) is not None: found_prop = ISiteSTKVehicle._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteSTKVehicle.")
        
agcls.AgClassCatalog.add_catalog_entry("{01b272ac-3b19-4daf-825f-88c0ff0e10bb}", SiteSTKVehicle)


class SiteSuperProcedure(ISiteSuperProcedure, ISite):
    """Class defining a Super Procedure site."""
    def __init__(self, sourceObject=None):
        ISiteSuperProcedure.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteSuperProcedure._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteSuperProcedure._get_property(self, attrname) is not None: found_prop = ISiteSuperProcedure._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteSuperProcedure.")
        
agcls.AgClassCatalog.add_catalog_entry("{0faf9c77-17bc-4a8d-b490-d4dcd2326ca9}", SiteSuperProcedure)


class SiteRelToPrevProcedure(ISiteRelToPrevProcedure, ISite):
    """Class defining a Relative to Previous Procedure site."""
    def __init__(self, sourceObject=None):
        ISiteRelToPrevProcedure.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteRelToPrevProcedure._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteRelToPrevProcedure._get_property(self, attrname) is not None: found_prop = ISiteRelToPrevProcedure._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteRelToPrevProcedure.")
        
agcls.AgClassCatalog.add_catalog_entry("{aa8dc548-3b50-44d0-b340-f1fca98283ee}", SiteRelToPrevProcedure)


class SiteSTKObjectWaypoint(ISiteSTKObjectWaypoint, ISite):
    """Class defining a STK Object Waypoint site."""
    def __init__(self, sourceObject=None):
        ISiteSTKObjectWaypoint.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteSTKObjectWaypoint._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteSTKObjectWaypoint._get_property(self, attrname) is not None: found_prop = ISiteSTKObjectWaypoint._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteSTKObjectWaypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{0b1f12ad-e7be-4158-abb4-39efb21a87d3}", SiteSTKObjectWaypoint)


class SiteSTKStaticObject(ISiteSTKStaticObject, ISite):
    """Class defining a STK Static Object site."""
    def __init__(self, sourceObject=None):
        ISiteSTKStaticObject.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteSTKStaticObject._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteSTKStaticObject._get_property(self, attrname) is not None: found_prop = ISiteSTKStaticObject._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteSTKStaticObject.")
        
agcls.AgClassCatalog.add_catalog_entry("{16bc1a6a-6cf6-4e2a-b73f-82e6e0928c61}", SiteSTKStaticObject)


class SiteRelToSTKObject(ISiteRelToSTKObject, ISite):
    """Class defining a Relative to Stationary STK Object site."""
    def __init__(self, sourceObject=None):
        ISiteRelToSTKObject.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteRelToSTKObject._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteRelToSTKObject._get_property(self, attrname) is not None: found_prop = ISiteRelToSTKObject._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteRelToSTKObject.")
        
agcls.AgClassCatalog.add_catalog_entry("{0c4677b4-f09b-4f8c-a170-3d4f0e1bf7f9}", SiteRelToSTKObject)


class SiteSTKAreaTarget(ISiteSTKAreaTarget, ISite):
    """Class defining a STK Area Target site."""
    def __init__(self, sourceObject=None):
        ISiteSTKAreaTarget.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteSTKAreaTarget._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteSTKAreaTarget._get_property(self, attrname) is not None: found_prop = ISiteSTKAreaTarget._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteSTKAreaTarget.")
        
agcls.AgClassCatalog.add_catalog_entry("{8ae70236-0185-4072-b230-da6e68e122f1}", SiteSTKAreaTarget)


class SiteRunway(ISiteRunway, ISite):
    """Class defining a runway site."""
    def __init__(self, sourceObject=None):
        ISiteRunway.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteRunway._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteRunway._get_property(self, attrname) is not None: found_prop = ISiteRunway._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteRunway.")
        
agcls.AgClassCatalog.add_catalog_entry("{6bbd87f1-83bc-4750-8128-8ba51a48b4ed}", SiteRunway)


class Site(ISite, ISiteUnknown):
    """Class defining an unknown site type."""
    def __init__(self, sourceObject=None):
        ISite.__init__(self, sourceObject)
        ISiteUnknown.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISite._private_init(self, pUnk)
        ISiteUnknown._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if ISiteUnknown._get_property(self, attrname) is not None: found_prop = ISiteUnknown._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Site.")
        
agcls.AgClassCatalog.add_catalog_entry("{445bad6d-6125-446d-bce6-ac9233f11706}", Site)


class ProcedureLanding(IProcedureLanding, IProcedure):
    """Class defining a landing procedure."""
    def __init__(self, sourceObject=None):
        IProcedureLanding.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureLanding._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureLanding._get_property(self, attrname) is not None: found_prop = IProcedureLanding._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureLanding.")
        
agcls.AgClassCatalog.add_catalog_entry("{bde94020-cc95-4868-b5f1-da680baf4aeb}", ProcedureLanding)


class ProcedureEnroute(IProcedureEnroute, IProcedure):
    """Class defining an enroute procedure."""
    def __init__(self, sourceObject=None):
        IProcedureEnroute.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureEnroute._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureEnroute._get_property(self, attrname) is not None: found_prop = IProcedureEnroute._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureEnroute.")
        
agcls.AgClassCatalog.add_catalog_entry("{f073011a-bfc1-4c9a-bd43-1a99bed41390}", ProcedureEnroute)


class ProcedureBasicPointToPoint(IProcedureBasicPointToPoint, IProcedure):
    """Class defining a basic point to point procedure."""
    def __init__(self, sourceObject=None):
        IProcedureBasicPointToPoint.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureBasicPointToPoint._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureBasicPointToPoint._get_property(self, attrname) is not None: found_prop = IProcedureBasicPointToPoint._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureBasicPointToPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{36ce90e9-da71-40a6-aff9-db4aecab63bd}", ProcedureBasicPointToPoint)


class ProcedureArcEnroute(IProcedureArcEnroute, IProcedure):
    """Class defining a arc enroute procedure."""
    def __init__(self, sourceObject=None):
        IProcedureArcEnroute.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureArcEnroute._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureArcEnroute._get_property(self, attrname) is not None: found_prop = IProcedureArcEnroute._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureArcEnroute.")
        
agcls.AgClassCatalog.add_catalog_entry("{7466bbc5-38eb-48ee-aec6-d45c69c562c1}", ProcedureArcEnroute)


class ProcedureArcPointToPoint(IProcedureArcPointToPoint, IProcedure):
    """Class defining a arc point to point procedure."""
    def __init__(self, sourceObject=None):
        IProcedureArcPointToPoint.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureArcPointToPoint._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureArcPointToPoint._get_property(self, attrname) is not None: found_prop = IProcedureArcPointToPoint._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureArcPointToPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{c8026c77-0b69-413a-9903-bff5e40f44b8}", ProcedureArcPointToPoint)


class ProcedureFlightLine(IProcedureFlightLine, IProcedure):
    """Class defining a flight line procedure."""
    def __init__(self, sourceObject=None):
        IProcedureFlightLine.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureFlightLine._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureFlightLine._get_property(self, attrname) is not None: found_prop = IProcedureFlightLine._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureFlightLine.")
        
agcls.AgClassCatalog.add_catalog_entry("{5079d60a-789b-489e-b1ba-749d7a888eba}", ProcedureFlightLine)


class ProcedureDelay(IProcedureDelay, IProcedure):
    """Class defining a delay procedure."""
    def __init__(self, sourceObject=None):
        IProcedureDelay.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureDelay._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureDelay._get_property(self, attrname) is not None: found_prop = IProcedureDelay._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureDelay.")
        
agcls.AgClassCatalog.add_catalog_entry("{bf773446-cf9e-4f29-8c9e-57d62abbdb09}", ProcedureDelay)


class ProcedureTakeoff(IProcedureTakeoff, IProcedure):
    """Class defining a takeoff procedure."""
    def __init__(self, sourceObject=None):
        IProcedureTakeoff.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureTakeoff._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureTakeoff._get_property(self, attrname) is not None: found_prop = IProcedureTakeoff._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureTakeoff.")
        
agcls.AgClassCatalog.add_catalog_entry("{52f322eb-31ca-4026-910d-ce46cc0830ee}", ProcedureTakeoff)


class ProcedureCollection(IProcedureCollection):
    """Class defining the collection of procedures in the phase of an Aviator mission."""
    def __init__(self, sourceObject=None):
        IProcedureCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureCollection._get_property(self, attrname) is not None: found_prop = IProcedureCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{02be4f36-f12f-4df0-86f4-3740e53fafe9}", ProcedureCollection)


class Phase(IPhase):
    """Class defining a phase in an Aviator mission."""
    def __init__(self, sourceObject=None):
        IPhase.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPhase._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPhase._get_property(self, attrname) is not None: found_prop = IPhase._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Phase.")
        
agcls.AgClassCatalog.add_catalog_entry("{ff7ca84a-39d9-49ee-9629-0e3d46183fbf}", Phase)


class PhaseCollection(IPhaseCollection):
    """Class defining the collection of phases."""
    def __init__(self, sourceObject=None):
        IPhaseCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPhaseCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPhaseCollection._get_property(self, attrname) is not None: found_prop = IPhaseCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PhaseCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{6518b03b-1889-4b4e-86d0-403939b71a21}", PhaseCollection)


class Mission(IMission):
    """Class defining the Aviator mission."""
    def __init__(self, sourceObject=None):
        IMission.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMission._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMission._get_property(self, attrname) is not None: found_prop = IMission._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Mission.")
        
agcls.AgClassCatalog.add_catalog_entry("{26840b17-5789-4690-96be-c8637b15f434}", Mission)


class AviatorPropagator(IAviatorPropagator):
    """Class defining the Aviator propagator."""
    def __init__(self, sourceObject=None):
        IAviatorPropagator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAviatorPropagator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAviatorPropagator._get_property(self, attrname) is not None: found_prop = IAviatorPropagator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AviatorPropagator.")
        
agcls.AgClassCatalog.add_catalog_entry("{e20f6939-fe05-44eb-a175-d63fa503526f}", AviatorPropagator)


class ProcedureBasicManeuver(IProcedureBasicManeuver, IProcedure):
    """Class defining a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IProcedureBasicManeuver.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureBasicManeuver._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureBasicManeuver._get_property(self, attrname) is not None: found_prop = IProcedureBasicManeuver._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureBasicManeuver.")
        
agcls.AgClassCatalog.add_catalog_entry("{7eb66528-bec8-4b78-a9c7-45333edbda52}", ProcedureBasicManeuver)


class BasicManeuverStrategyWeave(IBasicManeuverStrategyWeave, IBasicManeuverStrategy):
    """Class defining Weave strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyWeave.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyWeave._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyWeave._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyWeave._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyWeave.")
        
agcls.AgClassCatalog.add_catalog_entry("{46876894-f405-41cc-b071-9368b2d615f8}", BasicManeuverStrategyWeave)


class ProcedureTimeOptions(IProcedureTimeOptions):
    """Class defining the time options for the current procedure."""
    def __init__(self, sourceObject=None):
        IProcedureTimeOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureTimeOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureTimeOptions._get_property(self, attrname) is not None: found_prop = IProcedureTimeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureTimeOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{8f9d3e7e-4531-42b5-b066-44a87d6afc8c}", ProcedureTimeOptions)


class CalculationOptions(ICalculationOptions):
    """Class defining the calculation options for a procedure or phase."""
    def __init__(self, sourceObject=None):
        ICalculationOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICalculationOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICalculationOptions._get_property(self, attrname) is not None: found_prop = ICalculationOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in CalculationOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0538ece7-c599-4fc2-9d5b-3750f6712233}", CalculationOptions)


class AircraftCategory(IAircraftCategory):
    """Class defining the aircraft category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAircraftCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftCategory._get_property(self, attrname) is not None: found_prop = IAircraftCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{7c68c433-7123-45ec-9e3d-3bc4d999c6f3}", AircraftCategory)


class Catalog(ICatalog):
    """Class defining the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        ICatalog.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICatalog._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICatalog._get_property(self, attrname) is not None: found_prop = ICatalog._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Catalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{3ac28f35-5412-4419-ac35-24dfd086a210}", Catalog)


class AircraftModel(IAircraftModel, IAviatorVehicle, ICatalogItem):
    """Class defining an aircraft in Aviator."""
    def __init__(self, sourceObject=None):
        IAircraftModel.__init__(self, sourceObject)
        IAviatorVehicle.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftModel._private_init(self, pUnk)
        IAviatorVehicle._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftModel._get_property(self, attrname) is not None: found_prop = IAircraftModel._get_property(self, attrname)
        if IAviatorVehicle._get_property(self, attrname) is not None: found_prop = IAviatorVehicle._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{063a922a-36a4-492c-8b6b-7b9cd7c29e8d}", AircraftModel)


class MissileModel(IMissileModel, IAviatorVehicle, ICatalogItem):
    """Class defining a missile in Aviator."""
    def __init__(self, sourceObject=None):
        IMissileModel.__init__(self, sourceObject)
        IAviatorVehicle.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileModel._private_init(self, pUnk)
        IAviatorVehicle._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileModel._get_property(self, attrname) is not None: found_prop = IMissileModel._get_property(self, attrname)
        if IAviatorVehicle._get_property(self, attrname) is not None: found_prop = IAviatorVehicle._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{4b46d7a8-3e2b-4cd9-a927-2e49e1b9ab5c}", MissileModel)


class RotorcraftModel(IRotorcraftModel, IAviatorVehicle, ICatalogItem):
    """Class defining a rotorcraft in Aviator."""
    def __init__(self, sourceObject=None):
        IRotorcraftModel.__init__(self, sourceObject)
        IAviatorVehicle.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRotorcraftModel._private_init(self, pUnk)
        IAviatorVehicle._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRotorcraftModel._get_property(self, attrname) is not None: found_prop = IRotorcraftModel._get_property(self, attrname)
        if IAviatorVehicle._get_property(self, attrname) is not None: found_prop = IAviatorVehicle._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RotorcraftModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{a10ff662-0083-473b-90c7-5ff75d3144c9}", RotorcraftModel)


class RotorcraftAero(IRotorcraftAero):
    """Class defining the aerodynamic options for a rotorcraft."""
    def __init__(self, sourceObject=None):
        IRotorcraftAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRotorcraftAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRotorcraftAero._get_property(self, attrname) is not None: found_prop = IRotorcraftAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RotorcraftAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{df267da7-689f-48eb-bd92-1bdfebc51435}", RotorcraftAero)


class RotorcraftProp(IRotorcraftProp):
    """Class defining the propulsion options for a rotorcraft."""
    def __init__(self, sourceObject=None):
        IRotorcraftProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRotorcraftProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRotorcraftProp._get_property(self, attrname) is not None: found_prop = IRotorcraftProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RotorcraftProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{c0734618-529f-4ff2-9a14-3e4bd14cd601}", RotorcraftProp)


class AircraftAcceleration(IAircraftAcceleration, ICatalogItem):
    """Class defining the aircraft acceleration category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAcceleration.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAcceleration._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAcceleration._get_property(self, attrname) is not None: found_prop = IAircraftAcceleration._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAcceleration.")
        
agcls.AgClassCatalog.add_catalog_entry("{574f37f4-4889-4c85-baf5-8359e847acfa}", AircraftAcceleration)


class AircraftBasicAccelerationModel(IAircraftBasicAccelerationModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic acceleration performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicAccelerationModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicAccelerationModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicAccelerationModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicAccelerationModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicAccelerationModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{e33469ad-d69d-48a2-9fc0-3fce97a2b98e}", AircraftBasicAccelerationModel)


class AircraftClimb(IAircraftClimb, ICatalogItem):
    """Class defining the aircraft climb category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftClimb.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftClimb._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftClimb._get_property(self, attrname) is not None: found_prop = IAircraftClimb._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftClimb.")
        
agcls.AgClassCatalog.add_catalog_entry("{2f0086b2-66d4-4df6-9711-ee2524ba1ed0}", AircraftClimb)


class AircraftCruise(IAircraftCruise, ICatalogItem):
    """Class defining the aircraft cruise category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftCruise.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftCruise._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftCruise._get_property(self, attrname) is not None: found_prop = IAircraftCruise._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftCruise.")
        
agcls.AgClassCatalog.add_catalog_entry("{efe9b334-9261-44bb-9834-8e7207ca6e05}", AircraftCruise)


class AircraftDescent(IAircraftDescent, ICatalogItem):
    """Class defining the aircraft descent category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftDescent.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftDescent._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftDescent._get_property(self, attrname) is not None: found_prop = IAircraftDescent._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftDescent.")
        
agcls.AgClassCatalog.add_catalog_entry("{d76fa881-77b3-486a-976c-8184e9cb91fd}", AircraftDescent)


class AircraftLanding(IAircraftLanding, ICatalogItem):
    """Class defining the aircraft landing category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftLanding.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftLanding._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftLanding._get_property(self, attrname) is not None: found_prop = IAircraftLanding._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftLanding.")
        
agcls.AgClassCatalog.add_catalog_entry("{8371480b-53cf-41ca-b749-41623f6d380a}", AircraftLanding)


class AircraftTakeoff(IAircraftTakeoff, ICatalogItem):
    """Class defining the aircraft takeoff category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftTakeoff.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftTakeoff._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftTakeoff._get_property(self, attrname) is not None: found_prop = IAircraftTakeoff._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftTakeoff.")
        
agcls.AgClassCatalog.add_catalog_entry("{aeef7451-7456-4d8c-aabf-147a466149cd}", AircraftTakeoff)


class AircraftBasicClimbModel(IAircraftBasicClimbModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic climb performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicClimbModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicClimbModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicClimbModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicClimbModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicClimbModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{2950de29-1009-4c2a-8db5-378b41c6d48d}", AircraftBasicClimbModel)


class AircraftAdvClimbModel(IAircraftAdvClimbModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced climb performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvClimbModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvClimbModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvClimbModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvClimbModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvClimbModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{C1C87503-2B8E-41BC-8BA9-02B7CC1E02C2}", AircraftAdvClimbModel)


class AircraftBasicCruiseModel(IAircraftBasicCruiseModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic cruise performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicCruiseModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicCruiseModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicCruiseModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicCruiseModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicCruiseModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{c6090ace-e557-4bef-adf3-2e56387015a8}", AircraftBasicCruiseModel)


class AircraftAdvCruiseModel(IAircraftAdvCruiseModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced cruise performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvCruiseModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvCruiseModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvCruiseModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvCruiseModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvCruiseModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{ead08117-2561-4bb7-a82b-86057f506090}", AircraftAdvCruiseModel)


class AircraftBasicDescentModel(IAircraftBasicDescentModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic descent performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicDescentModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicDescentModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicDescentModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicDescentModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicDescentModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{30cb8d6f-afe5-4275-8479-4ce73b93a758}", AircraftBasicDescentModel)


class AircraftAdvDescentModel(IAircraftAdvDescentModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced descent performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvDescentModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvDescentModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvDescentModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvDescentModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvDescentModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{40ee1832-9491-49e5-bd27-40d40fefb326}", AircraftAdvDescentModel)


class AircraftBasicTakeoffModel(IAircraftBasicTakeoffModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic takeoff performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicTakeoffModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicTakeoffModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicTakeoffModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicTakeoffModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicTakeoffModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{3d9380c9-1aa0-4dcf-86bb-ded3b6b656e8}", AircraftBasicTakeoffModel)


class AircraftAdvTakeoffModel(IAircraftAdvTakeoffModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced takeoff performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvTakeoffModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvTakeoffModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvTakeoffModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvTakeoffModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvTakeoffModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{fc3190a3-fbeb-46bb-8395-22405fbf5b80}", AircraftAdvTakeoffModel)


class AircraftBasicLandingModel(IAircraftBasicLandingModel, IPerformanceModel, ICatalogItem):
    """Class defining the basic landing performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicLandingModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicLandingModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicLandingModel._get_property(self, attrname) is not None: found_prop = IAircraftBasicLandingModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicLandingModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{bd4e5100-7e2c-40ca-815a-02a618a4321d}", AircraftBasicLandingModel)


class AircraftAdvLandingModel(IAircraftAdvLandingModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced landing performance model for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvLandingModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvLandingModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvLandingModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvLandingModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvLandingModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{fb7534d7-1f9b-4133-9712-66728255532b}", AircraftAdvLandingModel)


class AirportCategory(IAirportCategory):
    """Class defining the airport category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IAirportCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAirportCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAirportCategory._get_property(self, attrname) is not None: found_prop = IAirportCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AirportCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{d497aeeb-3c6a-44ad-9f1a-6af1504c9a99}", AirportCategory)


class ARINC424Airport(IARINC424Item, ICatalogAirport, ICatalogWaypoint, ICatalogItem):
    """Class defining an ARINC424 Airport."""
    def __init__(self, sourceObject=None):
        IARINC424Item.__init__(self, sourceObject)
        ICatalogAirport.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Item._private_init(self, pUnk)
        ICatalogAirport._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Item._get_property(self, attrname) is not None: found_prop = IARINC424Item._get_property(self, attrname)
        if ICatalogAirport._get_property(self, attrname) is not None: found_prop = ICatalogAirport._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Airport.")
        
agcls.AgClassCatalog.add_catalog_entry("{1d942d58-5b4d-4784-8ec9-435008352423}", ARINC424Airport)


class ARINC424Runway(IARINC424Runway, IARINC424Item, ICatalogRunway, ICatalogWaypoint, ICatalogItem):
    """Class defining an ARINC424 Runway."""
    def __init__(self, sourceObject=None):
        IARINC424Runway.__init__(self, sourceObject)
        IARINC424Item.__init__(self, sourceObject)
        ICatalogRunway.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Runway._private_init(self, pUnk)
        IARINC424Item._private_init(self, pUnk)
        ICatalogRunway._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Runway._get_property(self, attrname) is not None: found_prop = IARINC424Runway._get_property(self, attrname)
        if IARINC424Item._get_property(self, attrname) is not None: found_prop = IARINC424Item._get_property(self, attrname)
        if ICatalogRunway._get_property(self, attrname) is not None: found_prop = ICatalogRunway._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Runway.")
        
agcls.AgClassCatalog.add_catalog_entry("{20c6f0ee-a2d5-4447-8d9a-3b67fe759266}", ARINC424Runway)


class DAFIFRunway(IDAFIFItem, ICatalogRunway, ICatalogWaypoint, ICatalogItem):
    """Class defining an DAFIF Runway."""
    def __init__(self, sourceObject=None):
        IDAFIFItem.__init__(self, sourceObject)
        ICatalogRunway.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IDAFIFItem._private_init(self, pUnk)
        ICatalogRunway._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IDAFIFItem._get_property(self, attrname) is not None: found_prop = IDAFIFItem._get_property(self, attrname)
        if ICatalogRunway._get_property(self, attrname) is not None: found_prop = ICatalogRunway._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in DAFIFRunway.")
        
agcls.AgClassCatalog.add_catalog_entry("{95867fe1-39fa-41cf-aa24-c6068c2cd86a}", DAFIFRunway)


class DAFIFHelipad(IDAFIFItem, ICatalogVTOLPoint, ICatalogWaypoint, ICatalogItem):
    """Class defining an DAFIF Helipad."""
    def __init__(self, sourceObject=None):
        IDAFIFItem.__init__(self, sourceObject)
        ICatalogVTOLPoint.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IDAFIFItem._private_init(self, pUnk)
        ICatalogVTOLPoint._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IDAFIFItem._get_property(self, attrname) is not None: found_prop = IDAFIFItem._get_property(self, attrname)
        if ICatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = ICatalogVTOLPoint._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in DAFIFHelipad.")
        
agcls.AgClassCatalog.add_catalog_entry("{6973673c-7c51-48c2-8931-614aa2ab1da5}", DAFIFHelipad)


class DAFIFWaypoint(IDAFIFItem, ICatalogWaypoint, ICatalogItem):
    """Class defining an DAFIF Waypoint."""
    def __init__(self, sourceObject=None):
        IDAFIFItem.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IDAFIFItem._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IDAFIFItem._get_property(self, attrname) is not None: found_prop = IDAFIFItem._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in DAFIFWaypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{62195e59-a4fc-40f9-ab7d-4229c79c0e8f}", DAFIFWaypoint)


class RunwayCategory(IRunwayCategory):
    """Class defining the runway category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IRunwayCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRunwayCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRunwayCategory._get_property(self, attrname) is not None: found_prop = IRunwayCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RunwayCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{69b1b664-f8d4-4be5-bfe9-8760573b2c72}", RunwayCategory)


class UserRunwaySource(IUserRunwaySource, ICatalogSource):
    """Class defining the user runways in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserRunwaySource.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserRunwaySource._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserRunwaySource._get_property(self, attrname) is not None: found_prop = IUserRunwaySource._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserRunwaySource.")
        
agcls.AgClassCatalog.add_catalog_entry("{7b8c1764-ce59-4e35-940a-24d99c2953ef}", UserRunwaySource)


class UserRunway(IUserRunway, ICatalogRunway, ICatalogItem, ICatalogWaypoint):
    """Class defining the user runway in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserRunway.__init__(self, sourceObject)
        ICatalogRunway.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserRunway._private_init(self, pUnk)
        ICatalogRunway._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserRunway._get_property(self, attrname) is not None: found_prop = IUserRunway._get_property(self, attrname)
        if ICatalogRunway._get_property(self, attrname) is not None: found_prop = ICatalogRunway._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserRunway.")
        
agcls.AgClassCatalog.add_catalog_entry("{693bdacd-4c8d-4efd-bb23-3f14c83d3b04}", UserRunway)


class AltitudeMSLOptions(IAltitudeMSLOptions):
    """Class defining the altitude MSL options in a procedure."""
    def __init__(self, sourceObject=None):
        IAltitudeMSLOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAltitudeMSLOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAltitudeMSLOptions._get_property(self, attrname) is not None: found_prop = IAltitudeMSLOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AltitudeMSLOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{c866a6dd-1070-4162-bff2-4339ab28f6b2}", AltitudeMSLOptions)


class AltitudeOptions(IAltitudeOptions):
    """Class defining the altitude options in a procedure."""
    def __init__(self, sourceObject=None):
        IAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAltitudeOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAltitudeOptions._get_property(self, attrname) is not None: found_prop = IAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AltitudeOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{4d5d82b7-e342-4dcb-9af1-7cbfa909fc23}", AltitudeOptions)


class ArcAltitudeOptions(IArcAltitudeOptions):
    """Class defining the altitude options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IArcAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IArcAltitudeOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IArcAltitudeOptions._get_property(self, attrname) is not None: found_prop = IArcAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ArcAltitudeOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{1c4f7491-db5d-4e52-ba8e-e64ddfc687fe}", ArcAltitudeOptions)


class ArcAltitudeAndDelayOptions(IArcAltitudeAndDelayOptions):
    """Class defining the altitude and delay options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IArcAltitudeAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IArcAltitudeAndDelayOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IArcAltitudeAndDelayOptions._get_property(self, attrname) is not None: found_prop = IArcAltitudeAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ArcAltitudeAndDelayOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{fdf04fa7-1588-4e15-a0ab-37b9586c878f}", ArcAltitudeAndDelayOptions)


class ArcOptions(IArcOptions):
    """Class defining the arc options for a procedure."""
    def __init__(self, sourceObject=None):
        IArcOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IArcOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IArcOptions._get_property(self, attrname) is not None: found_prop = IArcOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ArcOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{41af67f7-489f-452e-858a-bd8cc0bf782d}", ArcOptions)


class AltitudeMSLAndLevelOffOptions(IAltitudeMSLAndLevelOffOptions):
    """Class defining the altitude MSL and Level off options in a procedure."""
    def __init__(self, sourceObject=None):
        IAltitudeMSLAndLevelOffOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAltitudeMSLAndLevelOffOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAltitudeMSLAndLevelOffOptions._get_property(self, attrname) is not None: found_prop = IAltitudeMSLAndLevelOffOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AltitudeMSLAndLevelOffOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0a38e533-78b2-402b-aed6-0ff04a62fcce}", AltitudeMSLAndLevelOffOptions)


class CruiseAirspeedOptions(ICruiseAirspeedOptions):
    """Class defining the cruise airspeed options in a procedure."""
    def __init__(self, sourceObject=None):
        ICruiseAirspeedOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICruiseAirspeedOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICruiseAirspeedOptions._get_property(self, attrname) is not None: found_prop = ICruiseAirspeedOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in CruiseAirspeedOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{05251788-e43e-4d91-84ad-3d2bcfc2087a}", CruiseAirspeedOptions)


class CruiseAirspeedProfile(ICruiseAirspeedProfile):
    """Class defining the cruise profile options in a procedure."""
    def __init__(self, sourceObject=None):
        ICruiseAirspeedProfile.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICruiseAirspeedProfile._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICruiseAirspeedProfile._get_property(self, attrname) is not None: found_prop = ICruiseAirspeedProfile._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in CruiseAirspeedProfile.")
        
agcls.AgClassCatalog.add_catalog_entry("{5afc99d6-3a02-45f9-b6f5-87690d8f9702}", CruiseAirspeedProfile)


class CruiseAirspeedAndProfileOptions(ICruiseAirspeedAndProfileOptions):
    """Class defining the cruise airspeed and profile options in a procedure."""
    def __init__(self, sourceObject=None):
        ICruiseAirspeedAndProfileOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICruiseAirspeedAndProfileOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICruiseAirspeedAndProfileOptions._get_property(self, attrname) is not None: found_prop = ICruiseAirspeedAndProfileOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in CruiseAirspeedAndProfileOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{ee439155-cd45-45b5-b7f8-eae4f5e51b8e}", CruiseAirspeedAndProfileOptions)


class LandingCruiseAirspeedAndProfileOptions(ICruiseAirspeedAndProfileOptions):
    """Class defining the cruise airspeed and profile options for a landing procedure."""
    def __init__(self, sourceObject=None):
        ICruiseAirspeedAndProfileOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ICruiseAirspeedAndProfileOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ICruiseAirspeedAndProfileOptions._get_property(self, attrname) is not None: found_prop = ICruiseAirspeedAndProfileOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingCruiseAirspeedAndProfileOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{cb47399c-3316-494f-959c-4f84b4c4936c}", LandingCruiseAirspeedAndProfileOptions)


class EnrouteOptions(IEnrouteOptions):
    """Class defining the enroute options in a procedure."""
    def __init__(self, sourceObject=None):
        IEnrouteOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IEnrouteOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IEnrouteOptions._get_property(self, attrname) is not None: found_prop = IEnrouteOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in EnrouteOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{cb708621-5036-4dbc-a900-a3b3a3fa7124}", EnrouteOptions)


class EnrouteAndDelayOptions(IEnrouteAndDelayOptions):
    """Class defining the enroute and delay options in a procedure."""
    def __init__(self, sourceObject=None):
        IEnrouteAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IEnrouteAndDelayOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IEnrouteAndDelayOptions._get_property(self, attrname) is not None: found_prop = IEnrouteAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in EnrouteAndDelayOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{fc46b909-c927-4e2d-9d82-79c6980807d8}", EnrouteAndDelayOptions)


class LandingEnrouteOptions(IEnrouteAndDelayOptions):
    """Class defining the enroute options in a landing procedure."""
    def __init__(self, sourceObject=None):
        IEnrouteAndDelayOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IEnrouteAndDelayOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IEnrouteAndDelayOptions._get_property(self, attrname) is not None: found_prop = IEnrouteAndDelayOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingEnrouteOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{42ec119b-2661-4c68-b807-a5ed2a3af018}", LandingEnrouteOptions)


class EnrouteTurnDirectionOptions(IEnrouteTurnDirectionOptions):
    """Class defining the enroute turn direction options in a procedure."""
    def __init__(self, sourceObject=None):
        IEnrouteTurnDirectionOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IEnrouteTurnDirectionOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IEnrouteTurnDirectionOptions._get_property(self, attrname) is not None: found_prop = IEnrouteTurnDirectionOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in EnrouteTurnDirectionOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{16e895f3-5a65-4caf-960e-691f904ca66c}", EnrouteTurnDirectionOptions)


class NavigationOptions(INavigationOptions):
    """Class defining the navigation options in a procedure."""
    def __init__(self, sourceObject=None):
        INavigationOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        INavigationOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if INavigationOptions._get_property(self, attrname) is not None: found_prop = INavigationOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in NavigationOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{ce90add8-b152-4984-b864-0f6e61e680d4}", NavigationOptions)


class VerticalPlaneOptions(IVerticalPlaneOptions):
    """Class defining the vertical plane options in a procedure."""
    def __init__(self, sourceObject=None):
        IVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IVerticalPlaneOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in VerticalPlaneOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{a902b408-0141-4280-b6cf-e1cb18dae4f6}", VerticalPlaneOptions)


class ArcVerticalPlaneOptions(IArcVerticalPlaneOptions):
    """Class defining the vertical plane options in a procedure."""
    def __init__(self, sourceObject=None):
        IArcVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IArcVerticalPlaneOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IArcVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IArcVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ArcVerticalPlaneOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{eae3a835-4897-408f-91dc-59b9a2fbcb5c}", ArcVerticalPlaneOptions)


class VerticalPlaneAndFlightPathOptions(IVerticalPlaneAndFlightPathOptions):
    """Class defining the vertical plane options for an arc procedure."""
    def __init__(self, sourceObject=None):
        IVerticalPlaneAndFlightPathOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IVerticalPlaneAndFlightPathOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IVerticalPlaneAndFlightPathOptions._get_property(self, attrname) is not None: found_prop = IVerticalPlaneAndFlightPathOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in VerticalPlaneAndFlightPathOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{7db61c31-a562-43b9-b3fa-76dc120bdd74}", VerticalPlaneAndFlightPathOptions)


class LandingVerticalPlaneOptions(IVerticalPlaneOptions):
    """Class defining the vertical plane options in a landing procedure."""
    def __init__(self, sourceObject=None):
        IVerticalPlaneOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IVerticalPlaneOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IVerticalPlaneOptions._get_property(self, attrname) is not None: found_prop = IVerticalPlaneOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingVerticalPlaneOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{846a07a8-230c-4036-a43b-c61ccd1bde69}", LandingVerticalPlaneOptions)


class RunwayHeadingOptions(IRunwayHeadingOptions):
    """Class defining the runway heading options in a takeoff or landing procedure."""
    def __init__(self, sourceObject=None):
        IRunwayHeadingOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRunwayHeadingOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRunwayHeadingOptions._get_property(self, attrname) is not None: found_prop = IRunwayHeadingOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RunwayHeadingOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{167457be-4afe-477d-af6d-4e49413f4863}", RunwayHeadingOptions)


class LandingEnterDownwindPattern(ILandingEnterDownwindPattern):
    """Class defining the enter downwind pattern options for a landing procedure."""
    def __init__(self, sourceObject=None):
        ILandingEnterDownwindPattern.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ILandingEnterDownwindPattern._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ILandingEnterDownwindPattern._get_property(self, attrname) is not None: found_prop = ILandingEnterDownwindPattern._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingEnterDownwindPattern.")
        
agcls.AgClassCatalog.add_catalog_entry("{7fd1f000-c683-490f-9eea-a30062392898}", LandingEnterDownwindPattern)


class LandingInterceptGlideslope(ILandingInterceptGlideslope):
    """Class defining the intercept glideslope options for a landing procedure."""
    def __init__(self, sourceObject=None):
        ILandingInterceptGlideslope.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ILandingInterceptGlideslope._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ILandingInterceptGlideslope._get_property(self, attrname) is not None: found_prop = ILandingInterceptGlideslope._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingInterceptGlideslope.")
        
agcls.AgClassCatalog.add_catalog_entry("{f9735637-159f-4a79-9b1c-05d88d8437ac}", LandingInterceptGlideslope)


class LandingStandardInstrumentApproach(ILandingStandardInstrumentApproach):
    """Class defining the standard instrument approach options for a landing procedure."""
    def __init__(self, sourceObject=None):
        ILandingStandardInstrumentApproach.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ILandingStandardInstrumentApproach._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ILandingStandardInstrumentApproach._get_property(self, attrname) is not None: found_prop = ILandingStandardInstrumentApproach._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LandingStandardInstrumentApproach.")
        
agcls.AgClassCatalog.add_catalog_entry("{6463a94a-8a78-432d-b155-d9d6d436c748}", LandingStandardInstrumentApproach)


class TakeoffDeparturePoint(ITakeoffDeparturePoint):
    """Class defining the departure point options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        ITakeoffDeparturePoint.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ITakeoffDeparturePoint._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ITakeoffDeparturePoint._get_property(self, attrname) is not None: found_prop = ITakeoffDeparturePoint._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in TakeoffDeparturePoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{59ebf9c6-d1de-47c0-bd56-b3d455c5c335}", TakeoffDeparturePoint)


class TakeoffLowTransition(ITakeoffLowTransition):
    """Class defining the low transition options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        ITakeoffLowTransition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ITakeoffLowTransition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ITakeoffLowTransition._get_property(self, attrname) is not None: found_prop = ITakeoffLowTransition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in TakeoffLowTransition.")
        
agcls.AgClassCatalog.add_catalog_entry("{c8f9161b-97e3-4eab-b5e9-6a5aebaddaea}", TakeoffLowTransition)


class TakeoffNormal(ITakeoffNormal):
    """Class defining the normal options for a takeoff procedure."""
    def __init__(self, sourceObject=None):
        ITakeoffNormal.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ITakeoffNormal._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ITakeoffNormal._get_property(self, attrname) is not None: found_prop = ITakeoffNormal._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in TakeoffNormal.")
        
agcls.AgClassCatalog.add_catalog_entry("{4951950f-59cb-4524-a2c6-5d8b6f35922d}", TakeoffNormal)


class LevelTurns(ILevelTurns):
    """Class defining the level turns options for an acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        ILevelTurns.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ILevelTurns._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ILevelTurns._get_property(self, attrname) is not None: found_prop = ILevelTurns._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in LevelTurns.")
        
agcls.AgClassCatalog.add_catalog_entry("{8c955be7-5999-4332-bb80-4151d864d1d4}", LevelTurns)


class AttitudeTransitions(IAttitudeTransitions):
    """Class defining the attitude transition options for an acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAttitudeTransitions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAttitudeTransitions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAttitudeTransitions._get_property(self, attrname) is not None: found_prop = IAttitudeTransitions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AttitudeTransitions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0fc49614-6fbf-4d80-94ae-f8a338d8e7ab}", AttitudeTransitions)


class ClimbAndDescentTransitions(IClimbAndDescentTransitions):
    """Class defining the climb and descent transition options for an Acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IClimbAndDescentTransitions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IClimbAndDescentTransitions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IClimbAndDescentTransitions._get_property(self, attrname) is not None: found_prop = IClimbAndDescentTransitions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ClimbAndDescentTransitions.")
        
agcls.AgClassCatalog.add_catalog_entry("{c8d87c4a-ee0c-4a96-b7f4-9dbe84a7b2aa}", ClimbAndDescentTransitions)


class AeroPropManeuverModeHelper(IAeroPropManeuverModeHelper):
    """Class defining the The calculation mode for the Aero/Prop maneuver mode helper. Helper for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAeroPropManeuverModeHelper.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAeroPropManeuverModeHelper._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAeroPropManeuverModeHelper._get_property(self, attrname) is not None: found_prop = IAeroPropManeuverModeHelper._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AeroPropManeuverModeHelper.")
        
agcls.AgClassCatalog.add_catalog_entry("{854b3e50-7d20-4d15-a58d-b1f36dac5c77}", AeroPropManeuverModeHelper)


class AircraftAdvAccelerationModel(IAircraftAdvAccelerationModel, IPerformanceModel, ICatalogItem):
    """Class defining the advanced acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAdvAccelerationModel.__init__(self, sourceObject)
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAdvAccelerationModel._private_init(self, pUnk)
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAdvAccelerationModel._get_property(self, attrname) is not None: found_prop = IAircraftAdvAccelerationModel._get_property(self, attrname)
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAdvAccelerationModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{e55e8521-3091-4a5d-afe0-57f7e7ee698e}", AircraftAdvAccelerationModel)


class AircraftAccelerationMode(IAircraftAccelerationMode):
    """Class defining the acceleration mode options for an advanced acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAccelerationMode.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAccelerationMode._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAccelerationMode._get_property(self, attrname) is not None: found_prop = IAircraftAccelerationMode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAccelerationMode.")
        
agcls.AgClassCatalog.add_catalog_entry("{551999ee-51a5-4863-a244-0030899884ee}", AircraftAccelerationMode)


class AircraftSimpleAero(IAircraftSimpleAero):
    """Class defining the simple aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftSimpleAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftSimpleAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftSimpleAero._get_property(self, attrname) is not None: found_prop = IAircraftSimpleAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftSimpleAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{54bb15cb-5b0e-44af-9605-0b646efebaeb}", AircraftSimpleAero)


class AircraftExternalAero(IAircraftExternalAero):
    """Class defining the external file aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftExternalAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftExternalAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftExternalAero._get_property(self, attrname) is not None: found_prop = IAircraftExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftExternalAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{f79db172-f8c6-4dc9-84c7-dfff374156bc}", AircraftExternalAero)


class AircraftAero(IAircraftAero):
    """Class defining the aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftAero._get_property(self, attrname) is not None: found_prop = IAircraftAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{6005f6fd-9923-4688-a60f-6179d5cec1f3}", AircraftAero)


class AircraftBasicFixedWingAero(IAircraftBasicFixedWingAero):
    """Class defining the basic fixed wing aerodynamic options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicFixedWingAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicFixedWingAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicFixedWingAero._get_property(self, attrname) is not None: found_prop = IAircraftBasicFixedWingAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicFixedWingAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{3e05b32c-25ac-400d-ae1c-e1628b2e6ebb}", AircraftBasicFixedWingAero)


class AircraftProp(IAircraftProp):
    """Class defining the propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftProp._get_property(self, attrname) is not None: found_prop = IAircraftProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{8773e358-a871-4d66-b7b2-25a473f22bdb}", AircraftProp)


class AircraftSimpleProp(IAircraftSimpleProp):
    """Class defining the basic fixed wing propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftSimpleProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftSimpleProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftSimpleProp._get_property(self, attrname) is not None: found_prop = IAircraftSimpleProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftSimpleProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{359cf55e-59da-4f34-93fe-010180c2a415}", AircraftSimpleProp)


class AircraftExternalProp(IAircraftExternalProp):
    """Class defining the external propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftExternalProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftExternalProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftExternalProp._get_property(self, attrname) is not None: found_prop = IAircraftExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftExternalProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{9a59b51f-6133-446f-9f7c-04bfa1e8c69a}", AircraftExternalProp)


class AircraftBasicFixedWingProp(IAircraftBasicFixedWingProp):
    """Class defining the basic fixed wing propulsion options for a basic acceleration performance model of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftBasicFixedWingProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftBasicFixedWingProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftBasicFixedWingProp._get_property(self, attrname) is not None: found_prop = IAircraftBasicFixedWingProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftBasicFixedWingProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{b4158163-51d7-4eb6-956a-14740ae523b3}", AircraftBasicFixedWingProp)


class ARINC424Source(IARINC424Source, ICatalogSource):
    """Class defining an ARINC424 source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IARINC424Source.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Source._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Source._get_property(self, attrname) is not None: found_prop = IARINC424Source._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Source.")
        
agcls.AgClassCatalog.add_catalog_entry("{e4f5b464-d93a-4541-8a1e-737ece8b120c}", ARINC424Source)


class DAFIFSource(IDAFIFSource, ICatalogSource):
    """Class defining an DAFIF source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IDAFIFSource.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IDAFIFSource._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IDAFIFSource._get_property(self, attrname) is not None: found_prop = IDAFIFSource._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in DAFIFSource.")
        
agcls.AgClassCatalog.add_catalog_entry("{4325ae72-1155-40cd-a708-0cf4da0b653c}", DAFIFSource)


class BasicFixedWingFwdFlightLiftHelper(IBasicFixedWingLiftHelper):
    """Class defining the Lift Coefficient Helper for Forward Flight in the Basic Fixed Wing Aerodynamics interface for the Basic Acceleration Model of an aircraft."""
    def __init__(self, sourceObject=None):
        IBasicFixedWingLiftHelper.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicFixedWingLiftHelper._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicFixedWingLiftHelper._get_property(self, attrname) is not None: found_prop = IBasicFixedWingLiftHelper._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicFixedWingFwdFlightLiftHelper.")
        
agcls.AgClassCatalog.add_catalog_entry("{507fa67b-cebe-431c-a109-fb6d77b6b026}", BasicFixedWingFwdFlightLiftHelper)


class BasicManeuverStrategyStraightAhead(IBasicManeuverStrategyStraightAhead, IBasicManeuverStrategy):
    """Class defining the Straight Ahead strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyStraightAhead.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyStraightAhead._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyStraightAhead._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyStraightAhead._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyStraightAhead.")
        
agcls.AgClassCatalog.add_catalog_entry("{beae703c-6b09-4ff9-a7d0-3e6513848c84}", BasicManeuverStrategyStraightAhead)


class BasicManeuverStrategyCruiseProfile(IBasicManeuverStrategyCruiseProfile, IBasicManeuverStrategy):
    """Class defining the Cruise profile strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyCruiseProfile.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyCruiseProfile._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyCruiseProfile._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyCruiseProfile._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyCruiseProfile.")
        
agcls.AgClassCatalog.add_catalog_entry("{00a0e796-7322-478b-9ad6-b8f1d6ef81e1}", BasicManeuverStrategyCruiseProfile)


class BasicManeuverStrategyGlideProfile(IBasicManeuverStrategyGlideProfile, IBasicManeuverStrategy):
    """Class defining the Glide profile strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyGlideProfile.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyGlideProfile._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyGlideProfile._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyGlideProfile._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyGlideProfile.")
        
agcls.AgClassCatalog.add_catalog_entry("{0e60df52-4bb8-40a1-90a8-ecf7a57bca0a}", BasicManeuverStrategyGlideProfile)


class AircraftModels(IAircraftModels, ICatalogSource):
    """Class defining the User Aircraft Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IAircraftModels.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftModels._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftModels._get_property(self, attrname) is not None: found_prop = IAircraftModels._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftModels.")
        
agcls.AgClassCatalog.add_catalog_entry("{47dd19b1-0ce7-458b-bdb2-2ec0d337231b}", AircraftModels)


class MissileModels(IMissileModels, ICatalogSource):
    """Class defining the User Missile Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IMissileModels.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileModels._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileModels._get_property(self, attrname) is not None: found_prop = IMissileModels._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileModels.")
        
agcls.AgClassCatalog.add_catalog_entry("{038a565a-efe0-4bc0-8a22-eb1c2d88d87a}", MissileModels)


class RotorcraftModels(IRotorcraftModels, ICatalogSource):
    """Class defining the User Rotorcraft Models in the Aviator Catalog."""
    def __init__(self, sourceObject=None):
        IRotorcraftModels.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRotorcraftModels._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRotorcraftModels._get_property(self, attrname) is not None: found_prop = IRotorcraftModels._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RotorcraftModels.")
        
agcls.AgClassCatalog.add_catalog_entry("{f85cc088-0dc1-4436-bc2e-a985bfd4dfb4}", RotorcraftModels)


class Configuration(IConfiguration):
    """Class defining the aircraft configuration for an Aviator mission."""
    def __init__(self, sourceObject=None):
        IConfiguration.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IConfiguration._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IConfiguration._get_property(self, attrname) is not None: found_prop = IConfiguration._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Configuration.")
        
agcls.AgClassCatalog.add_catalog_entry("{823e96a0-a485-4c5b-9abc-7d6658432f99}", Configuration)


class FuelTankInternal(IFuelTankInternal, IStation):
    """Class defining an internal fuel tank for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IFuelTankInternal.__init__(self, sourceObject)
        IStation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IFuelTankInternal._private_init(self, pUnk)
        IStation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IFuelTankInternal._get_property(self, attrname) is not None: found_prop = IFuelTankInternal._get_property(self, attrname)
        if IStation._get_property(self, attrname) is not None: found_prop = IStation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in FuelTankInternal.")
        
agcls.AgClassCatalog.add_catalog_entry("{64fd434a-e313-4f15-a236-f25f10461444}", FuelTankInternal)


class FuelTankExternal(IFuelTankExternal):
    """Class defining an external fuel tank for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IFuelTankExternal.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IFuelTankExternal._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IFuelTankExternal._get_property(self, attrname) is not None: found_prop = IFuelTankExternal._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in FuelTankExternal.")
        
agcls.AgClassCatalog.add_catalog_entry("{8037f407-784e-469e-b92d-2a0fff148e86}", FuelTankExternal)


class PayloadStation(IPayloadStation, IStation):
    """Class defining a payload station for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IPayloadStation.__init__(self, sourceObject)
        IStation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPayloadStation._private_init(self, pUnk)
        IStation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPayloadStation._get_property(self, attrname) is not None: found_prop = IPayloadStation._get_property(self, attrname)
        if IStation._get_property(self, attrname) is not None: found_prop = IStation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PayloadStation.")
        
agcls.AgClassCatalog.add_catalog_entry("{13423a45-1732-438b-a96a-502bc40f0827}", PayloadStation)


class StationCollection(IStationCollection):
    """Class defining a collection of payload stations for an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IStationCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IStationCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IStationCollection._get_property(self, attrname) is not None: found_prop = IStationCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in StationCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{e81ed53f-b172-46c4-85b1-e80fe06e211a}", StationCollection)


class WindModel(IWindModel):
    """Class defining the wind model for a mission, scenario, or procedure."""
    def __init__(self, sourceObject=None):
        IWindModel.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IWindModel._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IWindModel._get_property(self, attrname) is not None: found_prop = IWindModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in WindModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{8c0e170c-1818-4bd9-8bbf-e578065ea2a8}", WindModel)


class WindModelConstant(IWindModelConstant):
    """Class defining a constant bearing/speed wind model for a mission."""
    def __init__(self, sourceObject=None):
        IWindModelConstant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IWindModelConstant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IWindModelConstant._get_property(self, attrname) is not None: found_prop = IWindModelConstant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in WindModelConstant.")
        
agcls.AgClassCatalog.add_catalog_entry("{079a1206-8ed3-423d-8f1d-855551f0435c}", WindModelConstant)


class WindModelADDS(IWindModelADDS):
    """Class defining a wind model using the NOAA ADDS service for a mission."""
    def __init__(self, sourceObject=None):
        IWindModelADDS.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IWindModelADDS._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IWindModelADDS._get_property(self, attrname) is not None: found_prop = IWindModelADDS._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in WindModelADDS.")
        
agcls.AgClassCatalog.add_catalog_entry("{1e2024ff-d594-49bf-8ea7-a110213078ba}", WindModelADDS)


class ADDSMessage(IADDSMessage):
    """Class defining a message from the NOAA ADDS service."""
    def __init__(self, sourceObject=None):
        IADDSMessage.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IADDSMessage._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IADDSMessage._get_property(self, attrname) is not None: found_prop = IADDSMessage._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ADDSMessage.")
        
agcls.AgClassCatalog.add_catalog_entry("{22e44fa2-cfe7-456a-900c-0916f1d88cec}", ADDSMessage)


class ADDSMessageCollection(IADDSMessageCollection):
    """Class defining a collection of messages from the NOAA ADDS service."""
    def __init__(self, sourceObject=None):
        IADDSMessageCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IADDSMessageCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IADDSMessageCollection._get_property(self, attrname) is not None: found_prop = IADDSMessageCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ADDSMessageCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{f5e634eb-3433-4336-9c0d-73b3d0e9674a}", ADDSMessageCollection)


class Procedure(IProcedure, IConnect):
    """Class defining an unknown procedure type."""
    def __init__(self, sourceObject=None):
        IProcedure.__init__(self, sourceObject)
        IConnect.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedure._private_init(self, pUnk)
        IConnect._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if IConnect._get_property(self, attrname) is not None: found_prop = IConnect._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in Procedure.")
        
agcls.AgClassCatalog.add_catalog_entry("{c744fb3a-e51d-4b87-8006-ed9dd4d48495}", Procedure)


class AtmosphereModel(IAtmosphereModel):
    """Class defining the atmosphere model for a mission, scenario, or procedure."""
    def __init__(self, sourceObject=None):
        IAtmosphereModel.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAtmosphereModel._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAtmosphereModel._get_property(self, attrname) is not None: found_prop = IAtmosphereModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AtmosphereModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{43ce46bb-52dc-42d7-818a-5bd4d13dd15d}", AtmosphereModel)


class AtmosphereModelBasic(IAtmosphereModelBasic):
    """Class defining the basic atmosphere model."""
    def __init__(self, sourceObject=None):
        IAtmosphereModelBasic.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAtmosphereModelBasic._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAtmosphereModelBasic._get_property(self, attrname) is not None: found_prop = IAtmosphereModelBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AtmosphereModelBasic.")
        
agcls.AgClassCatalog.add_catalog_entry("{9c9a3976-e898-4e98-b2ce-26d045ab4d46}", AtmosphereModelBasic)


class BasicManeuverStrategySimpleTurn(IBasicManeuverStrategySimpleTurn, IBasicManeuverStrategy):
    """Class defining the simple turn strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategySimpleTurn.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategySimpleTurn._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategySimpleTurn._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategySimpleTurn._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategySimpleTurn.")
        
agcls.AgClassCatalog.add_catalog_entry("{5a0fd768-cf78-47cb-8a85-ccb1fbe68cee}", BasicManeuverStrategySimpleTurn)


class BasicManeuverStrategyAileronRoll(IBasicManeuverStrategyAileronRoll, IBasicManeuverStrategy):
    """Class defining the aileron roll strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyAileronRoll.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyAileronRoll._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyAileronRoll._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyAileronRoll._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyAileronRoll.")
        
agcls.AgClassCatalog.add_catalog_entry("{b8979539-00bf-46af-a412-9a16ebb57ac7}", BasicManeuverStrategyAileronRoll)


class BasicManeuverStrategyFlyAOA(IBasicManeuverStrategyFlyAOA, IBasicManeuverStrategy):
    """Class defining the fly AOA strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyFlyAOA.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyFlyAOA._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyFlyAOA._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyFlyAOA._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyFlyAOA.")
        
agcls.AgClassCatalog.add_catalog_entry("{f3c56de2-f58f-4292-a05b-d6e8f2756a55}", BasicManeuverStrategyFlyAOA)


class BasicManeuverStrategyPull(IBasicManeuverStrategyPull, IBasicManeuverStrategy):
    """Class defining the pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyPull.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyPull._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyPull._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyPull._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyPull.")
        
agcls.AgClassCatalog.add_catalog_entry("{7f14c043-4c1d-46f2-a3fd-112b17a27e82}", BasicManeuverStrategyPull)


class BasicManeuverStrategyRollingPull(IBasicManeuverStrategyRollingPull, IBasicManeuverStrategy):
    """Class defining the rolling pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRollingPull.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRollingPull._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRollingPull._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRollingPull._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRollingPull.")
        
agcls.AgClassCatalog.add_catalog_entry("{abb3d02b-ae1f-482e-a903-cdc6bcb7bde1}", BasicManeuverStrategyRollingPull)


class BasicManeuverStrategySmoothAccel(IBasicManeuverStrategySmoothAccel, IBasicManeuverStrategy):
    """Class defining the smooth accel strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategySmoothAccel.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategySmoothAccel._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategySmoothAccel._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategySmoothAccel._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategySmoothAccel.")
        
agcls.AgClassCatalog.add_catalog_entry("{e5277844-1d1b-49ae-9a08-553e55823581}", BasicManeuverStrategySmoothAccel)


class BasicManeuverStrategySmoothTurn(IBasicManeuverStrategySmoothTurn, IBasicManeuverStrategy):
    """Class defining the smooth turn strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategySmoothTurn.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategySmoothTurn._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategySmoothTurn._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategySmoothTurn._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategySmoothTurn.")
        
agcls.AgClassCatalog.add_catalog_entry("{d55e7e13-72e2-4046-b7c7-a0702d951b03}", BasicManeuverStrategySmoothTurn)


class BasicManeuverAirspeedOptions(IBasicManeuverAirspeedOptions):
    """Class defining the airspeed options for basic maneuver strategies."""
    def __init__(self, sourceObject=None):
        IBasicManeuverAirspeedOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverAirspeedOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverAirspeedOptions._get_property(self, attrname) is not None: found_prop = IBasicManeuverAirspeedOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverAirspeedOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0eb776dc-78a8-42db-b8c0-8c62611d7e44}", BasicManeuverAirspeedOptions)


class PropulsionThrust(IPropulsionThrust):
    """Class defining the the thrust propulsion used in basic maneuver procedures."""
    def __init__(self, sourceObject=None):
        IPropulsionThrust.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPropulsionThrust._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPropulsionThrust._get_property(self, attrname) is not None: found_prop = IPropulsionThrust._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PropulsionThrust.")
        
agcls.AgClassCatalog.add_catalog_entry("{50e5309a-e9f9-4dc0-8296-b3bf43a9b1a5}", PropulsionThrust)


class BasicManeuverStrategyAutopilotNav(IBasicManeuverStrategyAutopilotNav, IBasicManeuverStrategy):
    """Class defining the autopilot - horizontal plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyAutopilotNav.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyAutopilotNav._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyAutopilotNav._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyAutopilotNav._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyAutopilotNav.")
        
agcls.AgClassCatalog.add_catalog_entry("{129c0672-05c6-41ae-ae30-3aa82d83783a}", BasicManeuverStrategyAutopilotNav)


class BasicManeuverStrategyAutopilotProf(IBasicManeuverStrategyAutopilotProf, IBasicManeuverStrategy):
    """Class defining the autopiloc - vertical plane strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyAutopilotProf.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyAutopilotProf._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyAutopilotProf._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyAutopilotProf._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyAutopilotProf.")
        
agcls.AgClassCatalog.add_catalog_entry("{a86d3f81-6bd4-4f3d-8747-c1b31d7b06e9}", BasicManeuverStrategyAutopilotProf)


class BasicManeuverStrategyBarrelRoll(IBasicManeuverStrategyBarrelRoll, IBasicManeuverStrategy):
    """Class defining the barrel roll strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyBarrelRoll.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyBarrelRoll._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyBarrelRoll._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyBarrelRoll._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyBarrelRoll.")
        
agcls.AgClassCatalog.add_catalog_entry("{3ee92041-1fb9-4a53-ad71-9045d738fe7d}", BasicManeuverStrategyBarrelRoll)


class BasicManeuverStrategyLoop(IBasicManeuverStrategyLoop, IBasicManeuverStrategy):
    """Class defining the loop strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyLoop.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyLoop._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyLoop._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyLoop._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyLoop.")
        
agcls.AgClassCatalog.add_catalog_entry("{77780df4-1f0f-411c-a4eb-edfeb5d44d82}", BasicManeuverStrategyLoop)


class BasicManeuverStrategyLTAHover(IBasicManeuverStrategyLTAHover, IBasicManeuverStrategy):
    """Class defining the lighter than air hover strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyLTAHover.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyLTAHover._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyLTAHover._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyLTAHover._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyLTAHover.")
        
agcls.AgClassCatalog.add_catalog_entry("{5dfffe06-20ce-4e0e-903e-90ca3e60c273}", BasicManeuverStrategyLTAHover)


class BasicManeuverStrategyIntercept(IBasicManeuverStrategyIntercept, IBasicManeuverStrategy):
    """Class defining the Intercept strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyIntercept.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyIntercept._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyIntercept._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyIntercept._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyIntercept.")
        
agcls.AgClassCatalog.add_catalog_entry("{015abd40-d52a-479b-b9ef-92aadb650a42}", BasicManeuverStrategyIntercept)


class BasicManeuverStrategyRelativeBearing(IBasicManeuverStrategyRelativeBearing, IBasicManeuverStrategy):
    """Class defining the Relative Bearing strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRelativeBearing.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRelativeBearing._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRelativeBearing._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRelativeBearing._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRelativeBearing.")
        
agcls.AgClassCatalog.add_catalog_entry("{e2ffd4c9-cab5-4e7d-972f-d7b0f6983a04}", BasicManeuverStrategyRelativeBearing)


class BasicManeuverStrategyRelativeCourse(IBasicManeuverStrategyRelativeCourse, IBasicManeuverStrategy):
    """Class defining the Relative Course strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRelativeCourse.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRelativeCourse._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRelativeCourse._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRelativeCourse._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRelativeCourse.")
        
agcls.AgClassCatalog.add_catalog_entry("{b38ed3c1-d896-476f-8b6d-c5b6d72b4590}", BasicManeuverStrategyRelativeCourse)


class BasicManeuverStrategyRendezvous(IBasicManeuverStrategyRendezvous, IBasicManeuverStrategy):
    """Class defining the Rendezvous/Formation strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRendezvous.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRendezvous._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRendezvous._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRendezvous._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRendezvous.")
        
agcls.AgClassCatalog.add_catalog_entry("{bb5fdd2b-8e95-40e1-8048-86547b0daff0}", BasicManeuverStrategyRendezvous)


class BasicManeuverStrategyStationkeeping(IBasicManeuverStrategyStationkeeping, IBasicManeuverStrategy):
    """Class defining the Stationkeeping strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyStationkeeping.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyStationkeeping._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyStationkeeping._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyStationkeeping._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyStationkeeping.")
        
agcls.AgClassCatalog.add_catalog_entry("{949ee147-7b1f-4f22-b721-aea0725b9116}", BasicManeuverStrategyStationkeeping)


class BasicManeuverStrategyRelativeFPA(IBasicManeuverStrategyRelativeFPA, IBasicManeuverStrategy):
    """Class defining the Relative Flight Path Angle strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRelativeFPA.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRelativeFPA._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRelativeFPA._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRelativeFPA._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRelativeFPA.")
        
agcls.AgClassCatalog.add_catalog_entry("{dd290505-55b9-48a9-a800-451bcc816dd6}", BasicManeuverStrategyRelativeFPA)


class BasicManeuverStrategyRelSpeedAlt(IBasicManeuverStrategyRelSpeedAlt, IBasicManeuverStrategy):
    """Class defining the Relative Speed/Altitude strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyRelSpeedAlt.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyRelSpeedAlt._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyRelSpeedAlt._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyRelSpeedAlt._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyRelSpeedAlt.")
        
agcls.AgClassCatalog.add_catalog_entry("{72d18bdd-ad36-43ed-a8d6-6c25a7d88078}", BasicManeuverStrategyRelSpeedAlt)


class BasicManeuverStrategyBezier(IBasicManeuverStrategyBezier, IBasicManeuverStrategy):
    """Class defining the Bezier strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyBezier.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyBezier._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyBezier._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyBezier._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyBezier.")
        
agcls.AgClassCatalog.add_catalog_entry("{84f1131f-4e28-4879-902c-bf5c2cbfff5b}", BasicManeuverStrategyBezier)


class BasicManeuverStrategyPushPull(IBasicManeuverStrategyPushPull, IBasicManeuverStrategy):
    """Class defining the Push/Pull strategy for a basic maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyPushPull.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyPushPull._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyPushPull._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyPushPull._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyPushPull.")
        
agcls.AgClassCatalog.add_catalog_entry("{6184d781-4842-4e83-8211-fc4baab53395}", BasicManeuverStrategyPushPull)


class ProcedureHoldingCircular(IProcedureHoldingCircular, IProcedure):
    """Class defining a holding circular procedure."""
    def __init__(self, sourceObject=None):
        IProcedureHoldingCircular.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureHoldingCircular._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureHoldingCircular._get_property(self, attrname) is not None: found_prop = IProcedureHoldingCircular._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureHoldingCircular.")
        
agcls.AgClassCatalog.add_catalog_entry("{dec98be5-d1d2-4a97-bbcd-5a1f7ca5f158}", ProcedureHoldingCircular)


class ProcedureHoldingFigure8(IProcedureHoldingFigure8, IProcedure):
    """Class defining a holding figure 8 procedure."""
    def __init__(self, sourceObject=None):
        IProcedureHoldingFigure8.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureHoldingFigure8._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureHoldingFigure8._get_property(self, attrname) is not None: found_prop = IProcedureHoldingFigure8._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureHoldingFigure8.")
        
agcls.AgClassCatalog.add_catalog_entry("{cdd17fce-e24c-45f4-8b7c-b313f490e124}", ProcedureHoldingFigure8)


class ProcedureHoldingRacetrack(IProcedureHoldingRacetrack, IProcedure):
    """Class defining a holding racetrack procedure."""
    def __init__(self, sourceObject=None):
        IProcedureHoldingRacetrack.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureHoldingRacetrack._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureHoldingRacetrack._get_property(self, attrname) is not None: found_prop = IProcedureHoldingRacetrack._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureHoldingRacetrack.")
        
agcls.AgClassCatalog.add_catalog_entry("{d2aa71dd-b167-4eea-be1d-665e4fd586da}", ProcedureHoldingRacetrack)


class ProcedureTransitionToHover(IProcedureTransitionToHover, IProcedure):
    """Class defining a transition to hover procedure."""
    def __init__(self, sourceObject=None):
        IProcedureTransitionToHover.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureTransitionToHover._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureTransitionToHover._get_property(self, attrname) is not None: found_prop = IProcedureTransitionToHover._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureTransitionToHover.")
        
agcls.AgClassCatalog.add_catalog_entry("{4cc8f381-2118-4c51-a1f4-68db53833efc}", ProcedureTransitionToHover)


class ProcedureTerrainFollow(IProcedureTerrainFollow, IProcedure):
    """Class defining a terrain following procedure."""
    def __init__(self, sourceObject=None):
        IProcedureTerrainFollow.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureTerrainFollow._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureTerrainFollow._get_property(self, attrname) is not None: found_prop = IProcedureTerrainFollow._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureTerrainFollow.")
        
agcls.AgClassCatalog.add_catalog_entry("{3ab3ca3e-70dd-405c-a470-9bfbdfa23734}", ProcedureTerrainFollow)


class ProcedureHover(IProcedureHover, IProcedure):
    """Class defining a hover procedure."""
    def __init__(self, sourceObject=None):
        IProcedureHover.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureHover._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureHover._get_property(self, attrname) is not None: found_prop = IProcedureHover._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureHover.")
        
agcls.AgClassCatalog.add_catalog_entry("{2af73325-a00b-405c-987c-af5f4e7f60cf}", ProcedureHover)


class ProcedureHoverTranslate(IProcedureHoverTranslate, IProcedure):
    """Class defining a hover translate procedure."""
    def __init__(self, sourceObject=None):
        IProcedureHoverTranslate.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureHoverTranslate._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureHoverTranslate._get_property(self, attrname) is not None: found_prop = IProcedureHoverTranslate._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureHoverTranslate.")
        
agcls.AgClassCatalog.add_catalog_entry("{fde61d2d-7896-4b38-a0cb-f3a2776c8cfb}", ProcedureHoverTranslate)


class ProcedureTransitionToForwardFlight(IProcedureTransitionToForwardFlight, IProcedure):
    """Class defining a transition to forward flight procedure."""
    def __init__(self, sourceObject=None):
        IProcedureTransitionToForwardFlight.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureTransitionToForwardFlight._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureTransitionToForwardFlight._get_property(self, attrname) is not None: found_prop = IProcedureTransitionToForwardFlight._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureTransitionToForwardFlight.")
        
agcls.AgClassCatalog.add_catalog_entry("{f4e5896e-1457-4909-8b6f-0740d9852278}", ProcedureTransitionToForwardFlight)


class HoverAltitudeOptions(IHoverAltitudeOptions):
    """Class defining the altitude options for a VTOL procedure."""
    def __init__(self, sourceObject=None):
        IHoverAltitudeOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IHoverAltitudeOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IHoverAltitudeOptions._get_property(self, attrname) is not None: found_prop = IHoverAltitudeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in HoverAltitudeOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{feb66c2d-f9c7-472d-a389-4764db1d37bf}", HoverAltitudeOptions)


class ProcedureVerticalTakeoff(IProcedureVerticalTakeoff, IProcedure):
    """Class defining a vertical takeoff procedure."""
    def __init__(self, sourceObject=None):
        IProcedureVerticalTakeoff.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureVerticalTakeoff._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureVerticalTakeoff._get_property(self, attrname) is not None: found_prop = IProcedureVerticalTakeoff._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureVerticalTakeoff.")
        
agcls.AgClassCatalog.add_catalog_entry("{518b6d80-31d5-427e-b55f-8b299ba082b9}", ProcedureVerticalTakeoff)


class ProcedureVerticalLanding(IProcedureVerticalLanding, IProcedure):
    """Class defining a vertical landing procedure."""
    def __init__(self, sourceObject=None):
        IProcedureVerticalLanding.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureVerticalLanding._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureVerticalLanding._get_property(self, attrname) is not None: found_prop = IProcedureVerticalLanding._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureVerticalLanding.")
        
agcls.AgClassCatalog.add_catalog_entry("{68401463-90f1-4a74-9346-6e1e99906906}", ProcedureVerticalLanding)


class ProcedureReferenceState(IProcedureReferenceState, IProcedure):
    """Class defining a reference state procedure."""
    def __init__(self, sourceObject=None):
        IProcedureReferenceState.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureReferenceState._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureReferenceState._get_property(self, attrname) is not None: found_prop = IProcedureReferenceState._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureReferenceState.")
        
agcls.AgClassCatalog.add_catalog_entry("{44f22ac8-6eec-42ca-a433-dbf8b9fdaabf}", ProcedureReferenceState)


class ProcedureSuperProcedure(IProcedureSuperProcedure, IProcedure):
    """Class defining a super procedure."""
    def __init__(self, sourceObject=None):
        IProcedureSuperProcedure.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureSuperProcedure._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureSuperProcedure._get_property(self, attrname) is not None: found_prop = IProcedureSuperProcedure._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureSuperProcedure.")
        
agcls.AgClassCatalog.add_catalog_entry("{b49011b5-9b02-48df-9ddd-9936e7903017}", ProcedureSuperProcedure)


class ProcedureLaunch(IProcedureLaunch, IProcedure):
    """Class defining a launch procedure."""
    def __init__(self, sourceObject=None):
        IProcedureLaunch.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureLaunch._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureLaunch._get_property(self, attrname) is not None: found_prop = IProcedureLaunch._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureLaunch.")
        
agcls.AgClassCatalog.add_catalog_entry("{4121a688-337a-4436-999f-9e1de57aab96}", ProcedureLaunch)


class ProcedureAirway(IProcedureAirway, IProcedure):
    """Class defining an Airway procedure."""
    def __init__(self, sourceObject=None):
        IProcedureAirway.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureAirway._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureAirway._get_property(self, attrname) is not None: found_prop = IProcedureAirway._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureAirway.")
        
agcls.AgClassCatalog.add_catalog_entry("{66c4d604-dac9-4eff-a18d-be1efb81f1f0}", ProcedureAirway)


class ProcedureAirwayRouter(IProcedureAirwayRouter, IProcedure):
    """Class defining an Airway Router procedure."""
    def __init__(self, sourceObject=None):
        IProcedureAirwayRouter.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureAirwayRouter._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureAirwayRouter._get_property(self, attrname) is not None: found_prop = IProcedureAirwayRouter._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureAirwayRouter.")
        
agcls.AgClassCatalog.add_catalog_entry("{c240ee52-dee2-42e0-a8c1-17f52b665f39}", ProcedureAirwayRouter)


class ProcedureAreaTargetSearch(IProcedureAreaTargetSearch, IProcedure):
    """Class defining an Area Target Search procedure."""
    def __init__(self, sourceObject=None):
        IProcedureAreaTargetSearch.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureAreaTargetSearch._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureAreaTargetSearch._get_property(self, attrname) is not None: found_prop = IProcedureAreaTargetSearch._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureAreaTargetSearch.")
        
agcls.AgClassCatalog.add_catalog_entry("{d065a50b-ba9e-4f25-831e-bb691df5cc71}", ProcedureAreaTargetSearch)


class ProcedureFormationRecover(IProcedureFormationRecover, IProcedure):
    """Class defining a Formation/Recover procedure."""
    def __init__(self, sourceObject=None):
        IProcedureFormationRecover.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureFormationRecover._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureFormationRecover._get_property(self, attrname) is not None: found_prop = IProcedureFormationRecover._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureFormationRecover.")
        
agcls.AgClassCatalog.add_catalog_entry("{c3ca901a-fcb0-407b-a8d7-0f6972ebcd85}", ProcedureFormationRecover)


class ProcedureInFormation(IProcedureInFormation, IProcedure):
    """Class defining an In Formation procedure."""
    def __init__(self, sourceObject=None):
        IProcedureInFormation.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureInFormation._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureInFormation._get_property(self, attrname) is not None: found_prop = IProcedureInFormation._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureInFormation.")
        
agcls.AgClassCatalog.add_catalog_entry("{5f09f987-b896-4cc7-b356-732d0c1500b8}", ProcedureInFormation)


class ProcedureParallelFlightLine(IProcedureParallelFlightLine, IProcedure):
    """Class defining a Parallel Flight Line procedure."""
    def __init__(self, sourceObject=None):
        IProcedureParallelFlightLine.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureParallelFlightLine._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureParallelFlightLine._get_property(self, attrname) is not None: found_prop = IProcedureParallelFlightLine._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureParallelFlightLine.")
        
agcls.AgClassCatalog.add_catalog_entry("{3d83878f-7cda-46e8-b93f-9cbdc117244b}", ProcedureParallelFlightLine)


class ProcedureVGTPoint(IProcedureVGTPoint, IProcedure):
    """Class defining a VGT Point procedure."""
    def __init__(self, sourceObject=None):
        IProcedureVGTPoint.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureVGTPoint._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureVGTPoint._get_property(self, attrname) is not None: found_prop = IProcedureVGTPoint._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureVGTPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{c1c57b66-ecf6-47f5-be6a-36075f83917a}", ProcedureVGTPoint)


class PerformanceModelOptions(IPerformanceModelOptions):
    """Class defining the options for the active performance model in a phase."""
    def __init__(self, sourceObject=None):
        IPerformanceModelOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPerformanceModelOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPerformanceModelOptions._get_property(self, attrname) is not None: found_prop = IPerformanceModelOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PerformanceModelOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{d37c0417-9eab-4d38-8a3f-a70e144b5368}", PerformanceModelOptions)


class AdvFixedWingTool(IAdvFixedWingTool):
    """Class defining the options for the Advanced Fixed Wing Tool of an aircraft."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTool.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTool._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTool._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTool._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTool.")
        
agcls.AgClassCatalog.add_catalog_entry("{e250469c-80a2-44d2-b53d-2712363d7b47}", AdvFixedWingTool)


class AdvFixedWingExternalAero(IAdvFixedWingExternalAero):
    """Class defining the External Aero File aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingExternalAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingExternalAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingExternalAero._get_property(self, attrname) is not None: found_prop = IAdvFixedWingExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingExternalAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{0938800e-fa5d-446d-bf7b-3d79283da798}", AdvFixedWingExternalAero)


class AdvFixedWingSubsonicAero(IAdvFixedWingSubsonicAero):
    """Class defining the subsonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingSubsonicAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingSubsonicAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingSubsonicAero._get_property(self, attrname) is not None: found_prop = IAdvFixedWingSubsonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingSubsonicAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{ced4d6ca-5a7e-4640-936f-e0db35949454}", AdvFixedWingSubsonicAero)


class AdvFixedWingSubSuperHypersonicAero(IAdvFixedWingSubSuperHypersonicAero):
    """Class defining the Sub/Super/Hypersonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingSubSuperHypersonicAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingSubSuperHypersonicAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingSubSuperHypersonicAero._get_property(self, attrname) is not None: found_prop = IAdvFixedWingSubSuperHypersonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingSubSuperHypersonicAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{aa686d0d-7a40-44bb-b340-a5a5470ed81f}", AdvFixedWingSubSuperHypersonicAero)


class AdvFixedWingSupersonicAero(IAdvFixedWingSupersonicAero):
    """Class defining the supersonic aerodynamic strategy in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingSupersonicAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingSupersonicAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingSupersonicAero._get_property(self, attrname) is not None: found_prop = IAdvFixedWingSupersonicAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingSupersonicAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{00683dc3-fc6d-4ba2-9d0b-306363523e17}", AdvFixedWingSupersonicAero)


class PerformanceModel(IPerformanceModel, ICatalogItem):
    """Class defining an unknown performance model."""
    def __init__(self, sourceObject=None):
        IPerformanceModel.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPerformanceModel._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPerformanceModel._get_property(self, attrname) is not None: found_prop = IPerformanceModel._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PerformanceModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{07c21222-ddfa-4417-8739-aa7e41a6091a}", PerformanceModel)


class AdvFixedWingGeometryBasic(IAdvFixedWingGeometryBasic, IAdvFixedWingGeometry):
    """Class defining a basic geometry wing in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingGeometryBasic.__init__(self, sourceObject)
        IAdvFixedWingGeometry.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingGeometryBasic._private_init(self, pUnk)
        IAdvFixedWingGeometry._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingGeometryBasic._get_property(self, attrname) is not None: found_prop = IAdvFixedWingGeometryBasic._get_property(self, attrname)
        if IAdvFixedWingGeometry._get_property(self, attrname) is not None: found_prop = IAdvFixedWingGeometry._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingGeometryBasic.")
        
agcls.AgClassCatalog.add_catalog_entry("{3fccd7b1-9fd7-424e-a251-cadcc2d44a0a}", AdvFixedWingGeometryBasic)


class AdvFixedWingGeometryVariable(IAdvFixedWingGeometryVariable, IAdvFixedWingGeometry):
    """Class defining a variable geometry wing in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingGeometryVariable.__init__(self, sourceObject)
        IAdvFixedWingGeometry.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingGeometryVariable._private_init(self, pUnk)
        IAdvFixedWingGeometry._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingGeometryVariable._get_property(self, attrname) is not None: found_prop = IAdvFixedWingGeometryVariable._get_property(self, attrname)
        if IAdvFixedWingGeometry._get_property(self, attrname) is not None: found_prop = IAdvFixedWingGeometry._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingGeometryVariable.")
        
agcls.AgClassCatalog.add_catalog_entry("{a7cb26ac-fa5b-416d-b81b-8a5975937740}", AdvFixedWingGeometryVariable)


class AdvFixedWingElectricPowerplant(IAdvFixedWingElectricPowerplant):
    """Class defining an Electric powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingElectricPowerplant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingElectricPowerplant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingElectricPowerplant._get_property(self, attrname) is not None: found_prop = IAdvFixedWingElectricPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingElectricPowerplant.")
        
agcls.AgClassCatalog.add_catalog_entry("{64f956f4-4b87-4b13-b459-efef51191309}", AdvFixedWingElectricPowerplant)


class AdvFixedWingExternalProp(IAdvFixedWingExternalProp):
    """Class defining an External Prop File powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingExternalProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingExternalProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingExternalProp._get_property(self, attrname) is not None: found_prop = IAdvFixedWingExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingExternalProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{86d612c4-8537-48d7-912b-931a2c939c8e}", AdvFixedWingExternalProp)


class AdvFixedWingSubSuperHypersonicProp(IAdvFixedWingSubSuperHypersonicProp):
    """Class defining a Sub/Super/Hypersonic powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingSubSuperHypersonicProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingSubSuperHypersonicProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingSubSuperHypersonicProp._get_property(self, attrname) is not None: found_prop = IAdvFixedWingSubSuperHypersonicProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingSubSuperHypersonicProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{15279d03-0f3b-458d-957c-2cdee97bc0a8}", AdvFixedWingSubSuperHypersonicProp)


class AdvFixedWingPistonPowerplant(IAdvFixedWingPistonPowerplant):
    """Class defining a Piston powerplant in the Advanced Fixed Wing Tool."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingPistonPowerplant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingPistonPowerplant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingPistonPowerplant._get_property(self, attrname) is not None: found_prop = IAdvFixedWingPistonPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingPistonPowerplant.")
        
agcls.AgClassCatalog.add_catalog_entry("{dd383e2b-f1e9-4afe-9241-4d89e95db034}", AdvFixedWingPistonPowerplant)


class AdvFixedWingEmpiricalJetEngine(IAdvFixedWingEmpiricalJetEngine):
    """Class defining the Turbojet and Turbofan empirical models in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAdvFixedWingEmpiricalJetEngine.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingEmpiricalJetEngine._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingEmpiricalJetEngine._get_property(self, attrname) is not None: found_prop = IAdvFixedWingEmpiricalJetEngine._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingEmpiricalJetEngine.")
        
agcls.AgClassCatalog.add_catalog_entry("{cf86965f-eacf-47ca-a6b8-5c69a1f9612f}", AdvFixedWingEmpiricalJetEngine)


class AdvFixedWingTurbofanBasicABPowerplant(IAdvFixedWingTurbofanBasicABPowerplant):
    """This class is deprecated. Use AgAvtrAdvFixedWingTurbofanBasicABProp instead."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTurbofanBasicABPowerplant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTurbofanBasicABPowerplant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTurbofanBasicABPowerplant._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTurbofanBasicABPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTurbofanBasicABPowerplant.")
        
agcls.AgClassCatalog.add_catalog_entry("{27a6cd0b-bd9b-4af7-9367-9d2ce3fa39cd}", AdvFixedWingTurbofanBasicABPowerplant)


class AdvFixedWingTurbojetBasicABPowerplant(IAdvFixedWingTurbojetBasicABPowerplant):
    """This class is deprecated. Use AgAvtrAdvFixedWingTurbojetBasicABProp instead."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTurbojetBasicABPowerplant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTurbojetBasicABPowerplant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTurbojetBasicABPowerplant._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTurbojetBasicABPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTurbojetBasicABPowerplant.")
        
agcls.AgClassCatalog.add_catalog_entry("{65230337-ecdc-4b80-92aa-107af1bcfdbe}", AdvFixedWingTurbojetBasicABPowerplant)


class AdvFixedWingTurbofanBasicABProp(IAdvFixedWingTurbofanBasicABProp):
    """Class defining the Turbofan - Basic w/AB (Thermodynamic model) powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTurbofanBasicABProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTurbofanBasicABProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTurbofanBasicABProp._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTurbofanBasicABProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTurbofanBasicABProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{327e3a7a-ecce-445e-b105-2dbec0239e6d}", AdvFixedWingTurbofanBasicABProp)


class AdvFixedWingTurbojetBasicABProp(IAdvFixedWingTurbojetBasicABProp):
    """Class defining the Turbojet - Basic w/AB (Thermodynamic model) powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTurbojetBasicABProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTurbojetBasicABProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTurbojetBasicABProp._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTurbojetBasicABProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTurbojetBasicABProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{c60f96fa-5802-4d89-b522-2a1dd5e03ca0}", AdvFixedWingTurbojetBasicABProp)


class AdvFixedWingTurbopropPowerplant(IAdvFixedWingTurbopropPowerplant):
    """Class defining the Turboprop powerplant in the Advanced Fixed Wing Tool"""
    def __init__(self, sourceObject=None):
        IAdvFixedWingTurbopropPowerplant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingTurbopropPowerplant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingTurbopropPowerplant._get_property(self, attrname) is not None: found_prop = IAdvFixedWingTurbopropPowerplant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingTurbopropPowerplant.")
        
agcls.AgClassCatalog.add_catalog_entry("{7ac5402a-9b5d-4fc9-94b5-365e9bc1e25e}", AdvFixedWingTurbopropPowerplant)


class MissileSimpleAero(IMissileSimpleAero):
    """Class defining the simple aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileSimpleAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileSimpleAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileSimpleAero._get_property(self, attrname) is not None: found_prop = IMissileSimpleAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileSimpleAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{99dff5f7-c73c-414d-9c38-2e7b35c93f5e}", MissileSimpleAero)


class MissileExternalAero(IMissileExternalAero):
    """Class defining the external aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileExternalAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileExternalAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileExternalAero._get_property(self, attrname) is not None: found_prop = IMissileExternalAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileExternalAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{92940e34-6d78-4e39-b774-4a865e9d0bc0}", MissileExternalAero)


class MissileAdvancedAero(IMissileAdvancedAero):
    """Class defining the advanced aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileAdvancedAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileAdvancedAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileAdvancedAero._get_property(self, attrname) is not None: found_prop = IMissileAdvancedAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileAdvancedAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{becfe264-7b70-461f-9f64-b0d23aa59f1e}", MissileAdvancedAero)


class MissileAero(IMissileAero):
    """Class defining the aerodynamic options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileAero.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileAero._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileAero._get_property(self, attrname) is not None: found_prop = IMissileAero._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileAero.")
        
agcls.AgClassCatalog.add_catalog_entry("{bc518434-5a42-49e0-8a54-8212a797c728}", MissileAero)


class MissileProp(IMissileProp):
    """Class defining the propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileProp._get_property(self, attrname) is not None: found_prop = IMissileProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{544b60ce-22da-4e8b-a222-ffd4bc070a01}", MissileProp)


class MissileSimpleProp(IMissileSimpleProp):
    """Class defining the Simple propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileSimpleProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileSimpleProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileSimpleProp._get_property(self, attrname) is not None: found_prop = IMissileSimpleProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileSimpleProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{e92e2a28-9614-4afe-97ee-8e0d90e4ee3b}", MissileSimpleProp)


class MissileExternalProp(IMissileExternalProp):
    """Class defining the External propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileExternalProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileExternalProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileExternalProp._get_property(self, attrname) is not None: found_prop = IMissileExternalProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileExternalProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{4b7a80c7-e7a6-453b-a423-1c53ac68c0bc}", MissileExternalProp)


class MissileRamjetProp(IMissileRamjetProp):
    """Class defining the Ramjet propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileRamjetProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileRamjetProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileRamjetProp._get_property(self, attrname) is not None: found_prop = IMissileRamjetProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileRamjetProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{0bef31b2-9f2c-4dea-b475-e2feeb55052e}", MissileRamjetProp)


class MissileRocketProp(IMissileRocketProp):
    """Class defining the Rocket propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileRocketProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileRocketProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileRocketProp._get_property(self, attrname) is not None: found_prop = IMissileRocketProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileRocketProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{68296bb7-edd5-4305-8b51-3f3d0c7d4428}", MissileRocketProp)


class MissileTurbojetProp(IMissileTurbojetProp):
    """Class defining the Turbojet propulsion options for a missile."""
    def __init__(self, sourceObject=None):
        IMissileTurbojetProp.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IMissileTurbojetProp._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IMissileTurbojetProp._get_property(self, attrname) is not None: found_prop = IMissileTurbojetProp._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in MissileTurbojetProp.")
        
agcls.AgClassCatalog.add_catalog_entry("{6024d1a7-768e-4015-abb3-e0539d431ff9}", MissileTurbojetProp)


class RefStateForwardFlightOptions(IRefStateForwardFlightOptions):
    """Class defining the Forward Flight options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IRefStateForwardFlightOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRefStateForwardFlightOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRefStateForwardFlightOptions._get_property(self, attrname) is not None: found_prop = IRefStateForwardFlightOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RefStateForwardFlightOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{6f60fd0b-6c79-48a5-908b-b5d697552b94}", RefStateForwardFlightOptions)


class RefStateTakeoffLandingOptions(IRefStateTakeoffLandingOptions):
    """Class defining the Takeoff or Landing options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IRefStateTakeoffLandingOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRefStateTakeoffLandingOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRefStateTakeoffLandingOptions._get_property(self, attrname) is not None: found_prop = IRefStateTakeoffLandingOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RefStateTakeoffLandingOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{5a54840f-128e-411c-af24-2e2c49fbd922}", RefStateTakeoffLandingOptions)


class RefStateHoverOptions(IRefStateHoverOptions):
    """Class defining the Hover options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IRefStateHoverOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRefStateHoverOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRefStateHoverOptions._get_property(self, attrname) is not None: found_prop = IRefStateHoverOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RefStateHoverOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0767b34e-3bc9-447d-956e-5e0939cc9bfc}", RefStateHoverOptions)


class RefStateWeightOnWheelsOptions(IRefStateWeightOnWheelsOptions):
    """Class defining the Weight on Wheels options for a Reference State procedure."""
    def __init__(self, sourceObject=None):
        IRefStateWeightOnWheelsOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRefStateWeightOnWheelsOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRefStateWeightOnWheelsOptions._get_property(self, attrname) is not None: found_prop = IRefStateWeightOnWheelsOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RefStateWeightOnWheelsOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{de32d95c-707b-41dd-a7de-072506f171b9}", RefStateWeightOnWheelsOptions)


class SiteRunwayFromCatalog(ISiteRunwayFromCatalog, ISite):
    """Class defining a runway from catalog site."""
    def __init__(self, sourceObject=None):
        ISiteRunwayFromCatalog.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteRunwayFromCatalog._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteRunwayFromCatalog._get_property(self, attrname) is not None: found_prop = ISiteRunwayFromCatalog._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteRunwayFromCatalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{9220ceaa-69a7-4b64-8dfe-ec4ca0083d3e}", SiteRunwayFromCatalog)


class SiteAirportFromCatalog(ISiteAirportFromCatalog, ISite):
    """Class defining a airport from catalog site."""
    def __init__(self, sourceObject=None):
        ISiteAirportFromCatalog.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteAirportFromCatalog._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteAirportFromCatalog._get_property(self, attrname) is not None: found_prop = ISiteAirportFromCatalog._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteAirportFromCatalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{b5a44f89-2af4-41bd-8ebc-8e503f43f912}", SiteAirportFromCatalog)


class SiteNavaidFromCatalog(ISiteNavaidFromCatalog, ISite):
    """Class defining a navaid from catalog site."""
    def __init__(self, sourceObject=None):
        ISiteNavaidFromCatalog.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteNavaidFromCatalog._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteNavaidFromCatalog._get_property(self, attrname) is not None: found_prop = ISiteNavaidFromCatalog._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteNavaidFromCatalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{59135b93-5164-4c35-8128-de6a6376a66f}", SiteNavaidFromCatalog)


class SiteVTOLPointFromCatalog(ISiteVTOLPointFromCatalog, ISite):
    """Class defining a VTOL point from catalog site."""
    def __init__(self, sourceObject=None):
        ISiteVTOLPointFromCatalog.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteVTOLPointFromCatalog._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteVTOLPointFromCatalog._get_property(self, attrname) is not None: found_prop = ISiteVTOLPointFromCatalog._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteVTOLPointFromCatalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{189c8c0a-c6a4-424f-b2ff-b1e466c38cd4}", SiteVTOLPointFromCatalog)


class SiteWaypointFromCatalog(ISiteWaypointFromCatalog, ISite):
    """Class defining a waypoint from catalog site."""
    def __init__(self, sourceObject=None):
        ISiteWaypointFromCatalog.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteWaypointFromCatalog._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteWaypointFromCatalog._get_property(self, attrname) is not None: found_prop = ISiteWaypointFromCatalog._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteWaypointFromCatalog.")
        
agcls.AgClassCatalog.add_catalog_entry("{d620651a-2526-43c8-8715-122ad6d6eb40}", SiteWaypointFromCatalog)


class NavaidCategory(INavaidCategory):
    """Class defining the navaid category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        INavaidCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        INavaidCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if INavaidCategory._get_property(self, attrname) is not None: found_prop = INavaidCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in NavaidCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{9cab926c-f92d-4b63-9588-d5e849f047bf}", NavaidCategory)


class VTOLPointCategory(IVTOLPointCategory):
    """Class defining the VTOL point category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IVTOLPointCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IVTOLPointCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IVTOLPointCategory._get_property(self, attrname) is not None: found_prop = IVTOLPointCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in VTOLPointCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{35a0a9ce-18bd-47b5-927a-1cb825edab22}", VTOLPointCategory)


class WaypointCategory(IWaypointCategory):
    """Class defining the waypoint category in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IWaypointCategory.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IWaypointCategory._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IWaypointCategory._get_property(self, attrname) is not None: found_prop = IWaypointCategory._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in WaypointCategory.")
        
agcls.AgClassCatalog.add_catalog_entry("{502442da-96cc-4a07-9124-9d4e4c287801}", WaypointCategory)


class ARINC424Navaid(IARINC424Item, ICatalogNavaid, ICatalogWaypoint, ICatalogItem):
    """Class defining an ARINC424 Navaid."""
    def __init__(self, sourceObject=None):
        IARINC424Item.__init__(self, sourceObject)
        ICatalogNavaid.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Item._private_init(self, pUnk)
        ICatalogNavaid._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Item._get_property(self, attrname) is not None: found_prop = IARINC424Item._get_property(self, attrname)
        if ICatalogNavaid._get_property(self, attrname) is not None: found_prop = ICatalogNavaid._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Navaid.")
        
agcls.AgClassCatalog.add_catalog_entry("{18308bdb-0318-4820-87c7-59e4ad432c0f}", ARINC424Navaid)


class ARINC424Helipad(IARINC424Item, ICatalogVTOLPoint, ICatalogWaypoint, ICatalogItem):
    """Class defining an ARINC424 Helipad."""
    def __init__(self, sourceObject=None):
        IARINC424Item.__init__(self, sourceObject)
        ICatalogVTOLPoint.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Item._private_init(self, pUnk)
        ICatalogVTOLPoint._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Item._get_property(self, attrname) is not None: found_prop = IARINC424Item._get_property(self, attrname)
        if ICatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = ICatalogVTOLPoint._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Helipad.")
        
agcls.AgClassCatalog.add_catalog_entry("{6cf2bbc6-dcf3-493e-ad3d-bf58879edd2d}", ARINC424Helipad)


class ARINC424Waypoint(IARINC424Item, ICatalogWaypoint, ICatalogItem):
    """Class defining an ARINC424 Waypoint."""
    def __init__(self, sourceObject=None):
        IARINC424Item.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IARINC424Item._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IARINC424Item._get_property(self, attrname) is not None: found_prop = IARINC424Item._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ARINC424Waypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{55d1b405-651f-4687-a34a-f0bb64ec8814}", ARINC424Waypoint)


class UserVTOLPointSource(IUserVTOLPointSource, ICatalogSource):
    """Class defining the user VTOL Point source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserVTOLPointSource.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserVTOLPointSource._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserVTOLPointSource._get_property(self, attrname) is not None: found_prop = IUserVTOLPointSource._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserVTOLPointSource.")
        
agcls.AgClassCatalog.add_catalog_entry("{dfc0b12b-f8c4-4d99-bb5c-6aecebe0ea7d}", UserVTOLPointSource)


class UserVTOLPoint(IUserVTOLPoint, ICatalogVTOLPoint, ICatalogWaypoint, ICatalogItem):
    """Class defining the user VTOL Point in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserVTOLPoint.__init__(self, sourceObject)
        ICatalogVTOLPoint.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserVTOLPoint._private_init(self, pUnk)
        ICatalogVTOLPoint._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserVTOLPoint._get_property(self, attrname) is not None: found_prop = IUserVTOLPoint._get_property(self, attrname)
        if ICatalogVTOLPoint._get_property(self, attrname) is not None: found_prop = ICatalogVTOLPoint._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserVTOLPoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{748a44bd-4d22-4800-a311-fc8c95901638}", UserVTOLPoint)


class UserWaypointSource(IUserWaypointSource, ICatalogSource):
    """Class defining the user waypoint source in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserWaypointSource.__init__(self, sourceObject)
        ICatalogSource.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserWaypointSource._private_init(self, pUnk)
        ICatalogSource._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserWaypointSource._get_property(self, attrname) is not None: found_prop = IUserWaypointSource._get_property(self, attrname)
        if ICatalogSource._get_property(self, attrname) is not None: found_prop = ICatalogSource._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserWaypointSource.")
        
agcls.AgClassCatalog.add_catalog_entry("{7f85e32f-b5a1-4d12-b7ac-a817dd7162d0}", UserWaypointSource)


class UserWaypoint(IUserWaypoint, ICatalogWaypoint, ICatalogItem):
    """Class defining the user waypoint in the Aviator catalog."""
    def __init__(self, sourceObject=None):
        IUserWaypoint.__init__(self, sourceObject)
        ICatalogWaypoint.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IUserWaypoint._private_init(self, pUnk)
        ICatalogWaypoint._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IUserWaypoint._get_property(self, attrname) is not None: found_prop = IUserWaypoint._get_property(self, attrname)
        if ICatalogWaypoint._get_property(self, attrname) is not None: found_prop = ICatalogWaypoint._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in UserWaypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{ca33c45d-2eba-409b-aa44-b57b5a57e3b3}", UserWaypoint)


class PropulsionEfficiencies(IPropulsionEfficiencies):
    """Class defining the Propulsion Efficiencies and Losses of a jet engine powerplant in the advanced fixed wing tool."""
    def __init__(self, sourceObject=None):
        IPropulsionEfficiencies.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IPropulsionEfficiencies._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IPropulsionEfficiencies._get_property(self, attrname) is not None: found_prop = IPropulsionEfficiencies._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in PropulsionEfficiencies.")
        
agcls.AgClassCatalog.add_catalog_entry("{0af7363a-b62a-4eaf-a4b5-4103197bc6b1}", PropulsionEfficiencies)


class FuelModelKeroseneAFPROP(IFuelModelKeroseneAFPROP):
    """Class defining the Kerosense - AFPROP fuel type for a thermodynamic jet engine model."""
    def __init__(self, sourceObject=None):
        IFuelModelKeroseneAFPROP.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IFuelModelKeroseneAFPROP._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IFuelModelKeroseneAFPROP._get_property(self, attrname) is not None: found_prop = IFuelModelKeroseneAFPROP._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in FuelModelKeroseneAFPROP.")
        
agcls.AgClassCatalog.add_catalog_entry("{fb23d809-5785-4a45-b914-415015e6d9eb}", FuelModelKeroseneAFPROP)


class FuelModelKeroseneCEA(IFuelModelKeroseneCEA):
    """Class defining the Kerosense - CEA fuel type for a thermodynamic jet engine model."""
    def __init__(self, sourceObject=None):
        IFuelModelKeroseneCEA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IFuelModelKeroseneCEA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IFuelModelKeroseneCEA._get_property(self, attrname) is not None: found_prop = IFuelModelKeroseneCEA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in FuelModelKeroseneCEA.")
        
agcls.AgClassCatalog.add_catalog_entry("{6df7fa84-6983-4ed2-9447-a11d0fbd0fac}", FuelModelKeroseneCEA)


class AdvFixedWingRamjetBasic(IAdvFixedWingRamjetBasic):
    """Class defining the basic Ramjet model."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingRamjetBasic.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingRamjetBasic._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingRamjetBasic._get_property(self, attrname) is not None: found_prop = IAdvFixedWingRamjetBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingRamjetBasic.")
        
agcls.AgClassCatalog.add_catalog_entry("{9f333e9b-3d22-429d-9880-940122216dde}", AdvFixedWingRamjetBasic)


class AdvFixedWingScramjetBasic(IAdvFixedWingScramjetBasic):
    """Class defining the basic Scramjet model."""
    def __init__(self, sourceObject=None):
        IAdvFixedWingScramjetBasic.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAdvFixedWingScramjetBasic._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAdvFixedWingScramjetBasic._get_property(self, attrname) is not None: found_prop = IAdvFixedWingScramjetBasic._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AdvFixedWingScramjetBasic.")
        
agcls.AgClassCatalog.add_catalog_entry("{6caec1e6-8cf4-4752-89c6-42b55473f144}", AdvFixedWingScramjetBasic)


class AircraftVTOLModel(IAircraftVTOLModel):
    """Class defining the VTOL performance model of an aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftVTOLModel.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftVTOLModel._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftVTOLModel._get_property(self, attrname) is not None: found_prop = IAircraftVTOLModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftVTOLModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{5fb18d9d-20cb-408e-a0d0-60f5cdd9dc2c}", AircraftVTOLModel)


class AircraftVTOL(IAircraftVTOL, ICatalogItem):
    """Class defining the VTOL category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftVTOL.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftVTOL._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftVTOL._get_property(self, attrname) is not None: found_prop = IAircraftVTOL._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftVTOL.")
        
agcls.AgClassCatalog.add_catalog_entry("{c1bd235a-6ffc-435c-900d-0ff6a7ca5422}", AircraftVTOL)


class AircraftTerrainFollowModel(IAircraftTerrainFollowModel):
    """Class defining the TerrainFollow performance model of an aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftTerrainFollowModel.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftTerrainFollowModel._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftTerrainFollowModel._get_property(self, attrname) is not None: found_prop = IAircraftTerrainFollowModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftTerrainFollowModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{27d2c971-cdce-4465-a3df-eaf526de6c01}", AircraftTerrainFollowModel)


class AircraftTerrainFollow(IAircraftTerrainFollow, ICatalogItem):
    """Class defining the TerrainFollow category of an Aviator aircraft."""
    def __init__(self, sourceObject=None):
        IAircraftTerrainFollow.__init__(self, sourceObject)
        ICatalogItem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAircraftTerrainFollow._private_init(self, pUnk)
        ICatalogItem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAircraftTerrainFollow._get_property(self, attrname) is not None: found_prop = IAircraftTerrainFollow._get_property(self, attrname)
        if ICatalogItem._get_property(self, attrname) is not None: found_prop = ICatalogItem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AircraftTerrainFollow.")
        
agcls.AgClassCatalog.add_catalog_entry("{683bec0d-293d-4afa-a1ab-b23b123d62e4}", AircraftTerrainFollow)


class BasicManeuverStrategyBallistic3D(IBasicManeuverStrategyBallistic3D, IBasicManeuverStrategy):
    """Class defining Ballistic 3D strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyBallistic3D.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyBallistic3D._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyBallistic3D._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyBallistic3D._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyBallistic3D.")
        
agcls.AgClassCatalog.add_catalog_entry("{ec8f88ae-2944-459b-90aa-f8df3e74bf89}", BasicManeuverStrategyBallistic3D)


class ProcedureLaunchDynState(IProcedureLaunchDynState, IProcedure):
    """Class defining a Launch Dyn State procedure."""
    def __init__(self, sourceObject=None):
        IProcedureLaunchDynState.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureLaunchDynState._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureLaunchDynState._get_property(self, attrname) is not None: found_prop = IProcedureLaunchDynState._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureLaunchDynState.")
        
agcls.AgClassCatalog.add_catalog_entry("{AA90861B-C8E1-46D1-BA87-47F27D731B84}", ProcedureLaunchDynState)


class ProcedureLaunchWaypoint(IProcedureLaunchWaypoint, IProcedure):
    """Class defining a Launch Waypoint procedure."""
    def __init__(self, sourceObject=None):
        IProcedureLaunchWaypoint.__init__(self, sourceObject)
        IProcedure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureLaunchWaypoint._private_init(self, pUnk)
        IProcedure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureLaunchWaypoint._get_property(self, attrname) is not None: found_prop = IProcedureLaunchWaypoint._get_property(self, attrname)
        if IProcedure._get_property(self, attrname) is not None: found_prop = IProcedure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureLaunchWaypoint.")
        
agcls.AgClassCatalog.add_catalog_entry("{05730C66-FF4D-4A05-A821-C541134119CE}", ProcedureLaunchWaypoint)


class SiteDynState(ISiteDynState, ISite):
    """Class defining a Dyn State site."""
    def __init__(self, sourceObject=None):
        ISiteDynState.__init__(self, sourceObject)
        ISite.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        ISiteDynState._private_init(self, pUnk)
        ISite._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if ISiteDynState._get_property(self, attrname) is not None: found_prop = ISiteDynState._get_property(self, attrname)
        if ISite._get_property(self, attrname) is not None: found_prop = ISite._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in SiteDynState.")
        
agcls.AgClassCatalog.add_catalog_entry("{DF907297-E5CC-4346-9E97-95A3AFEE02FD}", SiteDynState)


class BasicManeuverStrategyPitch3D(IBasicManeuverStrategyPitch3D, IBasicManeuverStrategy):
    """Class defining Pitch 3D strategy for a Basic Maneuver procedure."""
    def __init__(self, sourceObject=None):
        IBasicManeuverStrategyPitch3D.__init__(self, sourceObject)
        IBasicManeuverStrategy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IBasicManeuverStrategyPitch3D._private_init(self, pUnk)
        IBasicManeuverStrategy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IBasicManeuverStrategyPitch3D._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategyPitch3D._get_property(self, attrname)
        if IBasicManeuverStrategy._get_property(self, attrname) is not None: found_prop = IBasicManeuverStrategy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in BasicManeuverStrategyPitch3D.")
        
agcls.AgClassCatalog.add_catalog_entry("{A10EDD83-CED6-4747-AFBA-948653338437}", BasicManeuverStrategyPitch3D)


class RefuelDumpProperties(IRefuelDumpProperties):
    """Class defining the refuel/dump properties for the current procedure."""
    def __init__(self, sourceObject=None):
        IRefuelDumpProperties.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IRefuelDumpProperties._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IRefuelDumpProperties._get_property(self, attrname) is not None: found_prop = IRefuelDumpProperties._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in RefuelDumpProperties.")
        
agcls.AgClassCatalog.add_catalog_entry("{9CB1E862-FDED-463D-B449-C39030B149D6}", RefuelDumpProperties)


class ProcedureFastTimeOptions(IProcedureFastTimeOptions):
    """Class defining fast operations (without error or constraint checks) for time options for the current procedure."""
    def __init__(self, sourceObject=None):
        IProcedureFastTimeOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IProcedureFastTimeOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IProcedureFastTimeOptions._get_property(self, attrname) is not None: found_prop = IProcedureFastTimeOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in ProcedureFastTimeOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{D69CF956-3A04-48F1-B553-7A10412253A0}", ProcedureFastTimeOptions)



################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################
