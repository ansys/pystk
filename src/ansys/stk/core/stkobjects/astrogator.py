################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################ 

__all__ = ["ACCESS_CRITERION", "ASCENT_TYPE", "ATMOS_DATA_SOURCE", "ATTITUDE_CONTROL", "ATTITUDE_UPDATE", "AccessStoppingCondition", 
"AsTriggerCondition", "AstrogatorCentralBody", "AttitudeControlFiniteAntiVelocityVector", "AttitudeControlFiniteAttitude", 
"AttitudeControlFiniteFile", "AttitudeControlFinitePlugin", "AttitudeControlFiniteThrustVector", "AttitudeControlFiniteTimeVarying", 
"AttitudeControlFiniteVelocityVector", "AttitudeControlImpulsiveAntiVelocityVector", "AttitudeControlImpulsiveAttitude", 
"AttitudeControlImpulsiveFile", "AttitudeControlImpulsiveThrustVector", "AttitudeControlImpulsiveVelocityVector", "AttitudeControlOptimalFiniteLagrange", 
"AutomaticSequence", "AutomaticSequenceCollection", "BASE_SELECTION", "BDotRCalc", "BDotTCalc", "BMagnitudeCalc", "BODY_AXIS", 
"BPlaneCollection", "BThetaCalc", "BURNOUT_OPTIONS", "BURNOUT_TYPE", "BisectionControl", "BisectionControlCollection", "BisectionResult", 
"BisectionResultCollection", "BlendedDensity", "BulirschStoerIntegrator", "BurnoutCBFCartesian", "BurnoutGeocentric", "BurnoutGeodetic", 
"BurnoutLaunchAzAltitude", "BurnoutLaunchAzRadius", "BurnoutVelocity", "CALC_OBJECT_ANGLE_SIGN", "CALC_OBJECT_CENTRAL_BODY_REFERENCE", 
"CALC_OBJECT_DIRECTION", "CALC_OBJECT_ELEM", "CALC_OBJECT_LOCATION_SOURCE", "CALC_OBJECT_ORBIT_PLANE_SOURCE", "CALC_OBJECT_REFERENCE", 
"CALC_OBJECT_REFERENCE_DIRECTION", "CALC_OBJECT_REFERENCE_ELLIPSE", "CALC_OBJECT_RELATIVE_POSITION", "CALC_OBJECT_SUN_POSITION", 
"CENTRAL_BODY_ATTITUDE", "CENTRAL_BODY_EPHEMERIS", "CENTRAL_BODY_GRAVITY_MODEL", "CENTRAL_BODY_SHAPE", "CLEAR_EPHEMERIS_DIRECTION", 
"COEFF_RUNGE_KUTTA_V_8TH_9TH", "COMPLEX_NUMBER", "CONSTRAINT_SIGN", "CONTROL_ADVANCED", "CONTROL_ENGINE_CONSTANT", "CONTROL_ENGINE_CONST_ACC", 
"CONTROL_ENGINE_CUSTOM", "CONTROL_ENGINE_ION", "CONTROL_ENGINE_MODEL_POLY", "CONTROL_ENGINE_THROTTLE_TABLE", "CONTROL_FOLLOW", 
"CONTROL_INIT_STATE", "CONTROL_LAUNCH", "CONTROL_MANEUVER", "CONTROL_ORBIT_STATE_VALUE", "CONTROL_POWER_INTERNAL", "CONTROL_POWER_PROCESSED", 
"CONTROL_POWER_SOLAR_ARRAY", "CONTROL_REPEATING_GROUND_TRACK_ERR", "CONTROL_STOPPING_CONDITION", "CONTROL_THRUSTERS", "CONTROL_UPDATE", 
"CONVERGENCE_CRITERIA", "CR3BPFunc", "CRITERIA", "CRITERION", "CUSTOM_FUNCTION", "CalcObjectCollection", "CalcObjectLinkEmbedControlCollection", 
"CalculationGraphCollection", "CentralBodyAttitudeIAU1994", "CentralBodyAttitudeRotationCoefficientsFile", "CentralBodyCollection", 
"CentralBodyEphemerisAnalyticOrbit", "CentralBodyEphemerisFile", "CentralBodyEphemerisJPLDesignExplorerOptimizer", "CentralBodyEphemerisJPLSpice", 
"CentralBodyEphemerisPlanetary", "CentralBodyGravityModel", "CentralBodyShapeOblateSpheroid", "CentralBodyShapeSphere", 
"CentralBodyShapeTriaxialEllipsoid", "Cira72Function", "ConstraintCollection", "CustomFunctionScriptEngine", "DERIVE_CALC_METHOD", 
"DIFFERENCE_ORDER", "DIFFERENTIAL_CORRECTOR_SCALING_METHOD", "DRAG_MODEL_TYPE", "DRAW_PERTURBATION", "DTM2012", "DTM2020", 
"DensityModelPlugin", "DesignCR3BPObject", "DesignCR3BPObjectCollection", "DesignCR3BPSetup", "DifferentialCorrectorControl", 
"DifferentialCorrectorControlCollection", "DifferentialCorrectorResult", "DifferentialCorrectorResultCollection", "DisplaySystemGeocentric", 
"DisplaySystemGeodetic", "DragModelPlugin", "DriverMissionControlSequence", "ECLIPSING_BODIES_SOURCE", "ELEMENT", "ELEMENT_TYPE", 
"ENGINE_MODEL_FUNCTION", "EOMFuncPluginFunction", "EPHEM_SOURCE", "ERROR_CONTROL", "ElementBPlane", "ElementCartesian", 
"ElementDelaunay", "ElementEquinoctial", "ElementGeodetic", "ElementKeplerian", "ElementMixedSpherical", "ElementSpherical", 
"ElementTargetVectorIncomingAsymptote", "ElementTargetVectorOutgoingAsymptote", "EngineConstAcc", "EngineConstant", "EngineCustom", 
"EngineDefinition", "EngineIon", "EngineModelIspCoefficients", "EngineModelPoly", "EngineModelThrustCoefficients", "EnginePlugin", 
"EngineThrottleTable", "Exponential", "FOLLOW_JOIN", "FOLLOW_SEPARATION", "FOLLOW_SPACECRAFT_AND_FUEL_TANK", "FORMULATION", 
"FuelTank", "GEO_MAGNETIC_FLUX_SOURCE", "GEO_MAGNETIC_FLUX_UPDATE_RATE", "GEO_STATIONARY_DRIFT_RATE_MODEL", "GEO_STATIONARY_INCLINATION_MAGNITUDE", 
"GOLDEN_SECTION_DESIRED_OPERATION", "GRAPH_OPTION", "GRAVITATIONAL_PARAMETER_SOURCE", "GRAV_COEFF_COEFFICIENT_TYPE", "GRAV_COEFF_NORMALIZATION_TYPE", 
"GRAV_PARAM_SOURCE", "GRID_SEARCH_DESIRED_OPERATION", "GaussJacksonIntegrator", "GeneralRelativityFunction", "GoldenSectionControl", 
"GoldenSectionControlCollection", "GoldenSectionResult", "GoldenSectionResultCollection", "GravityFieldFunction", "GridSearchControl", 
"GridSearchControlCollection", "GridSearchResult", "GridSearchResultCollection", "HPOPPluginFunction", "HarrisPriester", 
"IAccessStoppingCondition", "IAsTriggerCondition", "IAstrogatorCentralBody", "IAttitudeControl", "IAttitudeControlFinite", 
"IAttitudeControlFiniteAntiVelocityVector", "IAttitudeControlFiniteAttitude", "IAttitudeControlFiniteFile", "IAttitudeControlFinitePlugin", 
"IAttitudeControlFiniteThrustVector", "IAttitudeControlFiniteTimeVarying", "IAttitudeControlFiniteVelocityVector", "IAttitudeControlImpulsive", 
"IAttitudeControlImpulsiveAntiVelocityVector", "IAttitudeControlImpulsiveAttitude", "IAttitudeControlImpulsiveFile", "IAttitudeControlImpulsiveThrustVector", 
"IAttitudeControlImpulsiveVelocityVector", "IAttitudeControlOptimalFinite", "IAttitudeControlOptimalFiniteLagrange", "IAutomaticSequence", 
"IAutomaticSequenceCollection", "IBDotRCalc", "IBDotTCalc", "IBMagnitudeCalc", "IBPlaneCollection", "IBThetaCalc", "IBisectionControl", 
"IBisectionControlCollection", "IBisectionResult", "IBisectionResultCollection", "IBlendedDensity", "IBulirschStoerIntegrator", 
"IBurnout", "IBurnoutCBFCartesian", "IBurnoutGeocentric", "IBurnoutGeodetic", "IBurnoutLaunchAzAltitude", "IBurnoutLaunchAzRadius", 
"IBurnoutVelocity", "ICR3BPFunc", "ICalcObjectCollection", "ICalcObjectLinkEmbedControlCollection", "ICalculationGraphCollection", 
"ICentralBodyAttitude", "ICentralBodyAttitudeIAU1994", "ICentralBodyAttitudeRotationCoefficientsFile", "ICentralBodyCollection", 
"ICentralBodyEphemeris", "ICentralBodyEphemerisAnalyticOrbit", "ICentralBodyEphemerisFile", "ICentralBodyEphemerisJPLDesignExplorerOptimizer", 
"ICentralBodyEphemerisJPLSpice", "ICentralBodyEphemerisPlanetary", "ICentralBodyGravityModel", "ICentralBodyShape", "ICentralBodyShapeOblateSpheroid", 
"ICentralBodyShapeSphere", "ICentralBodyShapeTriaxialEllipsoid", "ICira72Function", "IConstraintCollection", "ICustomFunctionScriptEngine", 
"IDEAL_ORBIT_RADIUS", "IDTM2012", "IDTM2020", "IDensityModelPlugin", "IDesignCR3BPObject", "IDesignCR3BPObjectCollection", 
"IDesignCR3BPSetup", "IDifferentialCorrectorControl", "IDifferentialCorrectorControlCollection", "IDifferentialCorrectorResult", 
"IDifferentialCorrectorResultCollection", "IDisplaySystem", "IDisplaySystemGeocentric", "IDisplaySystemGeodetic", "IDragModelPlugin", 
"IDriverMissionControlSequence", "IEOMFuncPluginFunction", "IElement", "IElementBPlane", "IElementCartesian", "IElementDelaunay", 
"IElementEquinoctial", "IElementGeodetic", "IElementKeplerian", "IElementMixedSpherical", "IElementSpherical", "IElementTargetVectorIncomingAsymptote", 
"IElementTargetVectorOutgoingAsymptote", "IEngineConstAcc", "IEngineConstant", "IEngineCustom", "IEngineDefinition", "IEngineIon", 
"IEngineModelIspCoefficients", "IEngineModelPoly", "IEngineModelThrustCoefficients", "IEnginePlugin", "IEngineThrottleTable", 
"IExponential", "IFuelTank", "IGaussJacksonIntegrator", "IGeneralRelativityFunction", "IGoldenSectionControl", "IGoldenSectionControlCollection", 
"IGoldenSectionResult", "IGoldenSectionResultCollection", "IGravityFieldFunction", "IGridSearchControl", "IGridSearchControlCollection", 
"IGridSearchResult", "IGridSearchResultCollection", "IHPOPPluginFunction", "IHarrisPriester", "IIPOPTControl", "IIPOPTControlCollection", 
"IIPOPTResult", "IIPOPTResultCollection", "IJacchiaBowman2008", "IJacchiaRoberts", "IJacchia_1960", "IJacchia_1970", "IJacchia_1971", 
"ILightingStoppingCondition", "IMP_DELTA_V_REP", "IMSISE_1990", "IMSIS_1986", "IManeuver", "IManeuverFinite", "IManeuverFinitePropagator", 
"IManeuverImpulsive", "IManeuverOptimalFinite", "IManeuverOptimalFiniteBounds", "IManeuverOptimalFiniteFinalBoundaryConditions", 
"IManeuverOptimalFiniteInitialBoundaryConditions", "IManeuverOptimalFinitePathBoundaryConditions", "IManeuverOptimalFiniteSNOPTOptimizer", 
"IManeuverOptimalFiniteSteeringNodeCollection", "IManeuverOptimalFiniteSteeringNodeElement", "IMarsGRAM2000", "IMarsGRAM2001", 
"IMarsGRAM2005", "IMarsGRAM2010", "IMarsGRAM37", "IMissionControlSequenceBackwardSequence", "IMissionControlSequenceEnd", 
"IMissionControlSequenceFollow", "IMissionControlSequenceHold", "IMissionControlSequenceInitialState", "IMissionControlSequenceLaunch", 
"IMissionControlSequenceManeuver", "IMissionControlSequenceOptions", "IMissionControlSequencePropagate", "IMissionControlSequenceReturn", 
"IMissionControlSequenceSegment", "IMissionControlSequenceSegmentCollection", "IMissionControlSequenceSegmentProperties", 
"IMissionControlSequenceSequence", "IMissionControlSequenceStop", "IMissionControlSequenceTargetSequence", "IMissionControlSequenceUpdate", 
"INRLMSISE_2000", "INumericalIntegrator", "INumericalPropagatorWrapper", "INumericalPropagatorWrapperCR3BP", "IPOPTControl", 
"IPOPTControlCollection", "IPOPTResult", "IPOPTResultCollection", "IPOPT_GOAL", "IPluginProperties", "IPointMassFunction", 
"IPowerInternal", "IPowerProcessed", "IPowerSolarArray", "IProfile", "IProfileBisection", "IProfileChangeManeuverType", 
"IProfileChangePropagator", "IProfileChangeReturnSegment", "IProfileChangeStopSegment", "IProfileChangeStoppingConditionState", 
"IProfileCollection", "IProfileDifferentialCorrector", "IProfileGoldenSection", "IProfileGridSearch", "IProfileIPOPTOptimizer", 
"IProfileLambertProfile", "IProfileLambertSearchProfile", "IProfileRunOnce", "IProfileSNOPTOptimizer", "IProfileScriptingTool", 
"IProfileSearchPlugin", "IProfileSeedFiniteManeuver", "IPropagatorFunctionCollection", "IRadiationPressureFunction", "IRungeKutta2nd3rd", 
"IRungeKutta4th", "IRungeKutta4th5th", "IRungeKutta4thAdapt", "IRungeKuttaF7th8th", "IRungeKuttaV8th9th", "ISNOPTControl", 
"ISNOPTControlCollection", "ISNOPTResult", "ISNOPTResultCollection", "ISRPAeroT20", "ISRPAeroT30", "ISRPGSPM04aIIA", "ISRPGSPM04aIIR", 
"ISRPGSPM04aeIIA", "ISRPGSPM04aeIIR", "ISRPNPlate", "ISRPReflectionPlugin", "ISRPSpherical", "ISRPTabAreaVec", "ISRPVariableArea", 
"IScriptingCalcObject", "IScriptingCalcObjectCollection", "IScriptingParameter", "IScriptingParameterCollection", "IScriptingParameterEnumerationChoice", 
"IScriptingParameterEnumerationChoiceCollection", "IScriptingSegment", "IScriptingSegmentCollection", "IScriptingTool", 
"ISearchPluginControl", "ISearchPluginControlCollection", "ISearchPluginResult", "ISearchPluginResultCollection", "ISpacecraftParameters", 
"IState", "IStateCalcAbsoluteValue", "IStateCalcAltitudeOfApoapsis", "IStateCalcAltitudeOfPeriapsis", "IStateCalcAngle", 
"IStateCalcApparentSolarTime", "IStateCalcArgOfLat", "IStateCalcArgOfPeriapsis", "IStateCalcBetaAngle", "IStateCalcC3Energy", 
"IStateCalcCartSTMElem", "IStateCalcCartesianElem", "IStateCalcCd", "IStateCalcCloseApproachBearing", "IStateCalcCloseApproachCosBearing", 
"IStateCalcCloseApproachMagnitude", "IStateCalcCloseApproachTheta", "IStateCalcCloseApproachX", "IStateCalcCloseApproachY", 
"IStateCalcCosOfVerticalFPA", "IStateCalcCr", "IStateCalcCurvilinearRelMotion", "IStateCalcCustomFunction", "IStateCalcDamageFlux", 
"IStateCalcDamageMassFlux", "IStateCalcDec", "IStateCalcDecRate", "IStateCalcDeltaDec", "IStateCalcDeltaFromMaster", "IStateCalcDeltaRA", 
"IStateCalcDeltaV", "IStateCalcDeltaVSquared", "IStateCalcDensity", "IStateCalcDifference", "IStateCalcDifferenceAcrossSegmentsOtherSat", 
"IStateCalcDifferenceOtherSegment", "IStateCalcDotProduct", "IStateCalcDragArea", "IStateCalcDriftRateFactor", "IStateCalcDuration", 
"IStateCalcEarthMeanLocTimeAN", "IStateCalcEarthMeanSolarTime", "IStateCalcEccentricity", "IStateCalcEccentricityAnomaly", 
"IStateCalcEccentricityX", "IStateCalcEccentricityY", "IStateCalcEnvironment", "IStateCalcEpoch", "IStateCalcEquinoctialElem", 
"IStateCalcFPA", "IStateCalcFuelMass", "IStateCalcGeodeticElem", "IStateCalcGeodeticMeanRightAscension", "IStateCalcGeodeticTrueLongitude", 
"IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee", "IStateCalcGravCoeff", "IStateCalcGravitationalParameter", "IStateCalcHeightAboveTerrain", 
"IStateCalcImpactFlux", "IStateCalcImpactMassFlux", "IStateCalcInAsympDec", "IStateCalcInAsympRA", "IStateCalcInVelAzAtPeriapsis", 
"IStateCalcInclination", "IStateCalcInclinationX", "IStateCalcInclinationY", "IStateCalcInertialDeltaVMagnitude", "IStateCalcInertialDeltaVx", 
"IStateCalcInertialDeltaVy", "IStateCalcInertialDeltaVz", "IStateCalcJacobiConstant", "IStateCalcLocalApparentSolarLon", 
"IStateCalcLonDriftRate", "IStateCalcLonOfAscNode", "IStateCalcLonOfPeriapsis", "IStateCalcMagnitudeFieldDipoleL", "IStateCalcManeuverSpecificImpulse", 
"IStateCalcManeuverTotalMassFlowRate", "IStateCalcMass", "IStateCalcMaxValue", "IStateCalcMeanAnomaly", "IStateCalcMeanEarthLon", 
"IStateCalcMeanMotion", "IStateCalcMeanRightAscension", "IStateCalcMeanValue", "IStateCalcMedianValue", "IStateCalcMinValue", 
"IStateCalcMissionControlSequenceDeltaV", "IStateCalcMissionControlSequenceDeltaVSquared", "IStateCalcNegative", "IStateCalcNumRevs", 
"IStateCalcOnePointAccess", "IStateCalcOrbitDelaunayG", "IStateCalcOrbitDelaunayH", "IStateCalcOrbitDelaunayL", "IStateCalcOrbitPeriod", 
"IStateCalcOrbitSemiLatusRectum", "IStateCalcOrbitStateValue", "IStateCalcOutAsympDec", "IStateCalcOutAsympRA", "IStateCalcOutVelAzAtPeriapsis", 
"IStateCalcPi", "IStateCalcPositionDifferenceOtherSegment", "IStateCalcPositionVelDifferenceOtherSegment", "IStateCalcPower", 
"IStateCalcPressure", "IStateCalcRA", "IStateCalcRAAN", "IStateCalcRARate", "IStateCalcRMagnitude", "IStateCalcRadOfApoapsis", 
"IStateCalcRadOfPeriapsis", "IStateCalcRadiationPressureArea", "IStateCalcRadiationPressureCoefficient", "IStateCalcRectifiedLon", 
"IStateCalcReferenceRadius", "IStateCalcRelAtAOLMaster", "IStateCalcRelGroundTrackError", "IStateCalcRelMotion", "IStateCalcRelPositionDecAngle", 
"IStateCalcRelPositionInPlaneAngle", "IStateCalcRelativeInclination", "IStateCalcRepeatingGroundTrackErr", "IStateCalcSEETMagnitudeFieldFieldLineSepAngle", 
"IStateCalcSEETSAAFlux", "IStateCalcSEETVehTemp", "IStateCalcSRPArea", "IStateCalcSTMEigenval", "IStateCalcSTMEigenvecElem", 
"IStateCalcScalar", "IStateCalcScript", "IStateCalcSemiMajorAxis", "IStateCalcSequenceDeltaV", "IStateCalcSequenceDeltaVSquared", 
"IStateCalcSignedEccentricity", "IStateCalcSolarBetaAngle", "IStateCalcSolarInPlaneAngle", "IStateCalcSpeedOfLight", "IStateCalcStandardDeviation", 
"IStateCalcTemperature", "IStateCalcTimePastAscNode", "IStateCalcTimePastPeriapsis", "IStateCalcTrueAnomaly", "IStateCalcTrueLon", 
"IStateCalcTrueLongitude", "IStateCalcTwoBodyDriftRate", "IStateCalcUnitAngularMomentumX", "IStateCalcUnitAngularMomentumY", 
"IStateCalcUnitAngularMomentumZ", "IStateCalcUserValue", "IStateCalcVMagnitude", "IStateCalcValueAtSegment", "IStateCalcValueAtSegmentOtherSat", 
"IStateCalcVectorDec", "IStateCalcVectorGeometryToolAngle", "IStateCalcVectorMagnitude", "IStateCalcVectorRA", "IStateCalcVectorX", 
"IStateCalcVectorY", "IStateCalcVectorZ", "IStateCalcVelAz", "IStateCalcVelDifferenceOtherSegment", "IStateTransformationFunction", 
"IStoppingCondition", "IStoppingConditionCollection", "IStoppingConditionComponent", "IStoppingConditionElement", "ITargeterGraph", 
"ITargeterGraphActiveControl", "ITargeterGraphActiveControlCollection", "ITargeterGraphCollection", "ITargeterGraphResult", 
"ITargeterGraphResultCollection", "IThirdBodyFunction", "IThruster", "IThrusterSet", "IThrusterSetCollection", "ITwoBodyFunction", 
"IUS_Standard_Atmosphere", "IUserVariable", "IUserVariableCollection", "IUserVariableDefinition", "IUserVariableDefinitionCollection", 
"IUserVariableUpdate", "IUserVariableUpdateCollection", "IVenusGRAM2005", "IYarkovskyFunc", "JacchiaBowman2008", "JacchiaRoberts", 
"Jacchia_1960", "Jacchia_1970", "Jacchia_1971", "LAMBERT_DIRECTION_OF_MOTION_TYPE", "LAMBERT_ORBITAL_ENERGY_TYPE", "LAMBERT_SOLUTION_OPTION_TYPE", 
"LAMBERT_TARGET_COORD_TYPE", "LANGUAGE", "LAUNCH_DISPLAY_SYSTEM", "LIGHTING_CONDITION", "LightingStoppingCondition", "MANEUVER_TYPE", 
"MARS_GRAM_DENSITY_TYPE", "MSISE_1990", "MSIS_1986", "ManeuverFinite", "ManeuverFinitePropagator", "ManeuverImpulsive", 
"ManeuverOptimalFinite", "ManeuverOptimalFiniteBounds", "ManeuverOptimalFiniteFinalBoundaryConditions", "ManeuverOptimalFiniteInitialBoundaryConditions", 
"ManeuverOptimalFinitePathBoundaryConditions", "ManeuverOptimalFiniteSNOPTOptimizer", "ManeuverOptimalFiniteSteeringNodeCollection", 
"ManeuverOptimalFiniteSteeringNodeElement", "MarsGRAM2000", "MarsGRAM2001", "MarsGRAM2005", "MarsGRAM2010", "MarsGRAM37", 
"MissionControlSequenceBackwardSequence", "MissionControlSequenceEnd", "MissionControlSequenceFollow", "MissionControlSequenceHold", 
"MissionControlSequenceInitialState", "MissionControlSequenceLaunch", "MissionControlSequenceManeuver", "MissionControlSequenceOptions", 
"MissionControlSequencePropagate", "MissionControlSequenceReturn", "MissionControlSequenceSegmentCollection", "MissionControlSequenceSegmentProperties", 
"MissionControlSequenceSequence", "MissionControlSequenceStop", "MissionControlSequenceTargetSequence", "MissionControlSequenceUpdate", 
"NRLMSISE_2000", "NUMERICAL_INTEGRATOR", "NumericalPropagatorWrapper", "NumericalPropagatorWrapperCR3BP", "OPTIMAL_FINITE_DISCRETIZATION_STRATEGY", 
"OPTIMAL_FINITE_EXPORT_NODES_FORMAT", "OPTIMAL_FINITE_GUESS_METHOD", "OPTIMAL_FINITE_RUN_MODE", "OPTIMAL_FINITE_SCALING_OPTIONS", 
"OPTIMAL_FINITE_SEED_METHOD", "OPTIMAL_FINITE_SNOPT_OBJECTIVE", "OPTIMAL_FINITE_SNOPT_SCALING", "OPTIMAL_FINITE_WORKING_VARIABLES", 
"PREDICTOR_CORRECTOR", "PRESSURE_MODE", "PROFILE", "PROFILES_FINISH", "PROFILE_INSERT_DIRECTION", "PROFILE_MODE", "PROPULSION_METHOD", 
"PluginProperties", "PointMassFunction", "PowerInternal", "PowerProcessed", "PowerSolarArray", "ProfileBisection", "ProfileChangeManeuverType", 
"ProfileChangePropagator", "ProfileChangeReturnSegment", "ProfileChangeStopSegment", "ProfileChangeStoppingConditionState", 
"ProfileCollection", "ProfileDifferentialCorrector", "ProfileGoldenSection", "ProfileGridSearch", "ProfileIPOPTOptimizer", 
"ProfileLambertProfile", "ProfileLambertSearchProfile", "ProfileRunOnce", "ProfileSNOPTOptimizer", "ProfileScriptingTool", 
"ProfileSearchPlugin", "ProfileSeedFiniteManeuver", "PropagatorFunctionCollection", "REFERENCE_RADIUS_SOURCE", "RETURN_CONTROL", 
"ROOT_FINDING_ALGORITHM", "ROTATING_COORDINATE_SYSTEM", "RUN_CODE", "RadiationPressureFunction", "RungeKutta2nd3rd", "RungeKutta4th", 
"RungeKutta4th5th", "RungeKutta4thAdapt", "RungeKuttaF7th8th", "RungeKuttaV8th9th", "SCRIPTING_PARAMETER_TYPE", "SEGMENT_DIFFERENCE_ORDER", 
"SEGMENT_STATE", "SEGMENT_TYPE", "SEQUENCE_STATE_TO_PASS", "SHADOW_MODEL", "SMART_RUN_MODE", "SNOPTControl", "SNOPTControlCollection", 
"SNOPTResult", "SNOPTResultCollection", "SNOPT_GOAL", "SOLAR_FORCE_METHOD", "SQUARED_TYPE", "SRPAeroT20", "SRPAeroT30", 
"SRPGSPM04aIIA", "SRPGSPM04aIIR", "SRPGSPM04aeIIA", "SRPGSPM04aeIIR", "SRPNPlate", "SRPReflectionPlugin", "SRPSpherical", 
"SRPTabAreaVec", "SRPVariableArea", "STATE", "STM_EIGEN_NUMBER", "STM_PERT_VARIABLES", "STOPPING_CONDITION", "SUN_POSITION", 
"ScriptingCalcObject", "ScriptingCalcObjectCollection", "ScriptingParameter", "ScriptingParameterCollection", "ScriptingParameterEnumerationChoice", 
"ScriptingParameterEnumerationChoiceCollection", "ScriptingSegment", "ScriptingSegmentCollection", "ScriptingTool", "SearchPluginControl", 
"SearchPluginControlCollection", "SearchPluginResult", "SearchPluginResultCollection", "SpacecraftParameters", "State", 
"StateCalcAbsoluteValue", "StateCalcAltitudeOfApoapsis", "StateCalcAltitudeOfPeriapsis", "StateCalcAngle", "StateCalcApparentSolarTime", 
"StateCalcArgOfLat", "StateCalcArgOfPeriapsis", "StateCalcBetaAngle", "StateCalcC3Energy", "StateCalcCartSTMElem", "StateCalcCartesianElem", 
"StateCalcCd", "StateCalcCloseApproachBearing", "StateCalcCloseApproachCosBearing", "StateCalcCloseApproachMagnitude", "StateCalcCloseApproachTheta", 
"StateCalcCloseApproachX", "StateCalcCloseApproachY", "StateCalcCosOfVerticalFPA", "StateCalcCr", "StateCalcCurvilinearRelMotion", 
"StateCalcCustomFunction", "StateCalcDamageFlux", "StateCalcDamageMassFlux", "StateCalcDec", "StateCalcDecRate", "StateCalcDeltaDec", 
"StateCalcDeltaFromMaster", "StateCalcDeltaRA", "StateCalcDeltaV", "StateCalcDeltaVSquared", "StateCalcDensity", "StateCalcDifference", 
"StateCalcDifferenceAcrossSegmentsOtherSat", "StateCalcDifferenceOtherSegment", "StateCalcDotProduct", "StateCalcDragArea", 
"StateCalcDriftRateFactor", "StateCalcDuration", "StateCalcEarthMeanLocTimeAN", "StateCalcEarthMeanSolarTime", "StateCalcEccentricity", 
"StateCalcEccentricityAnomaly", "StateCalcEccentricityX", "StateCalcEccentricityY", "StateCalcEnvironment", "StateCalcEpoch", 
"StateCalcEquinoctialElem", "StateCalcFPA", "StateCalcFuelMass", "StateCalcGeodeticElem", "StateCalcGeodeticMeanRightAscension", 
"StateCalcGeodeticTrueLongitude", "StateCalcGeodeticTrueLongitudeAtTimeOfPerigee", "StateCalcGravCoeff", "StateCalcGravitationalParameter", 
"StateCalcHeightAboveTerrain", "StateCalcImpactFlux", "StateCalcImpactMassFlux", "StateCalcInAsympDec", "StateCalcInAsympRA", 
"StateCalcInVelAzAtPeriapsis", "StateCalcInclination", "StateCalcInclinationX", "StateCalcInclinationY", "StateCalcInertialDeltaVMagnitude", 
"StateCalcInertialDeltaVx", "StateCalcInertialDeltaVy", "StateCalcInertialDeltaVz", "StateCalcJacobiConstant", "StateCalcLocalApparentSolarLon", 
"StateCalcLonDriftRate", "StateCalcLonOfAscNode", "StateCalcLonOfPeriapsis", "StateCalcMagnitudeFieldDipoleL", "StateCalcManeuverSpecificImpulse", 
"StateCalcManeuverTotalMassFlowRate", "StateCalcMass", "StateCalcMaxValue", "StateCalcMeanAnomaly", "StateCalcMeanEarthLon", 
"StateCalcMeanMotion", "StateCalcMeanRightAscension", "StateCalcMeanValue", "StateCalcMedianValue", "StateCalcMinValue", 
"StateCalcMissionControlSequenceDeltaV", "StateCalcMissionControlSequenceDeltaVSquared", "StateCalcNegative", "StateCalcNumRevs", 
"StateCalcOnePointAccess", "StateCalcOrbitDelaunayG", "StateCalcOrbitDelaunayH", "StateCalcOrbitDelaunayL", "StateCalcOrbitPeriod", 
"StateCalcOrbitSemiLatusRectum", "StateCalcOrbitStateValue", "StateCalcOutAsympDec", "StateCalcOutAsympRA", "StateCalcOutVelAzAtPeriapsis", 
"StateCalcPi", "StateCalcPositionDifferenceOtherSegment", "StateCalcPositionVelDifferenceOtherSegment", "StateCalcPower", 
"StateCalcPressure", "StateCalcRA", "StateCalcRAAN", "StateCalcRARate", "StateCalcRMagnitude", "StateCalcRadOfApoapsis", 
"StateCalcRadOfPeriapsis", "StateCalcRadiationPressureArea", "StateCalcRadiationPressureCoefficient", "StateCalcRectifiedLon", 
"StateCalcReferenceRadius", "StateCalcRelAtAOLMaster", "StateCalcRelGroundTrackError", "StateCalcRelMotion", "StateCalcRelPositionDecAngle", 
"StateCalcRelPositionInPlaneAngle", "StateCalcRelativeInclination", "StateCalcRepeatingGroundTrackErr", "StateCalcSEETMagnitudeFieldFieldLineSepAngle", 
"StateCalcSEETSAAFlux", "StateCalcSEETVehTemp", "StateCalcSRPArea", "StateCalcSTMEigenval", "StateCalcSTMEigenvecElem", 
"StateCalcScalar", "StateCalcScript", "StateCalcSemiMajorAxis", "StateCalcSequenceDeltaV", "StateCalcSequenceDeltaVSquared", 
"StateCalcSignedEccentricity", "StateCalcSolarBetaAngle", "StateCalcSolarInPlaneAngle", "StateCalcSpeedOfLight", "StateCalcStandardDeviation", 
"StateCalcTemperature", "StateCalcTimePastAscNode", "StateCalcTimePastPeriapsis", "StateCalcTrueAnomaly", "StateCalcTrueLon", 
"StateCalcTrueLongitude", "StateCalcTwoBodyDriftRate", "StateCalcUnitAngularMomentumX", "StateCalcUnitAngularMomentumY", 
"StateCalcUnitAngularMomentumZ", "StateCalcUserValue", "StateCalcVMagnitude", "StateCalcValueAtSegment", "StateCalcValueAtSegmentOtherSat", 
"StateCalcVectorDec", "StateCalcVectorGeometryToolAngle", "StateCalcVectorMagnitude", "StateCalcVectorRA", "StateCalcVectorX", 
"StateCalcVectorY", "StateCalcVectorZ", "StateCalcVelAz", "StateCalcVelDifferenceOtherSegment", "StateTransformationFunction", 
"StoppingCondition", "StoppingConditionCollection", "StoppingConditionElement", "TAB_VEC_INTERP_METHOD", "TARGET_SEQ_ACTION", 
"THIRD_BODY_MODE", "THROTTLE_TABLE_OPERATION_MODE", "THRUSTER_DIRECTION", "THRUST_TYPE", "TargeterGraph", "TargeterGraphActiveControl", 
"TargeterGraphActiveControlCollection", "TargeterGraphCollection", "TargeterGraphResult", "TargeterGraphResultCollection", 
"ThirdBodyFunction", "Thruster", "ThrusterSet", "ThrusterSetCollection", "TwoBodyFunction", "UPDATE_ACTION", "UPDATE_PARAM", 
"US_Standard_Atmosphere", "UserVariable", "UserVariableCollection", "UserVariableDefinition", "UserVariableDefinitionCollection", 
"UserVariableUpdate", "UserVariableUpdateCollection", "VENUS_GRAM_DENSITY_TYPE", "VenusGRAM2005", "YarkovskyFunc"]

import typing

from ctypes   import POINTER
from enum     import IntEnum

from ..internal  import comutil          as agcom
from ..internal  import coclassutil      as agcls
from ..internal  import marshall         as agmarshall
from ..utilities import colors           as agcolor
from ..internal.comutil     import IUnknown, IDispatch
from ..internal.apiutil     import (interface_proxy, enumerator_proxy, out_arg, 
    initialize_from_source_object, get_interface_property, set_interface_attribute, 
    set_class_attribute)
from ..internal.eventutil   import *
from ..utilities.exceptions import *

from ..stkutil import *
from ..stkobjects import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class GRAPH_OPTION(IntEnum):
    """Mode that the mcs will run in."""
    NO_GRAPH = 0
    """Don't graph."""
    GRAPH_DIFFERENCE = 1
    """Graph the difference."""
    GRAPH_VALUE = 2
    """Graph the value."""

GRAPH_OPTION.NO_GRAPH.__doc__ = "Don't graph."
GRAPH_OPTION.GRAPH_DIFFERENCE.__doc__ = "Graph the difference."
GRAPH_OPTION.GRAPH_VALUE.__doc__ = "Graph the value."

agcls.AgTypeNameMap["GRAPH_OPTION"] = GRAPH_OPTION

class SMART_RUN_MODE(IntEnum):
    """Mode that the mcs will run in."""
    ENTIRE_MISSION_CONTROL_SEQUENCE = 0
    """Run Entire Mission Control Sequence"""
    ONLY_CHANGED = 1
    """Run Only Changed Segments"""

SMART_RUN_MODE.ENTIRE_MISSION_CONTROL_SEQUENCE.__doc__ = "Run Entire Mission Control Sequence"
SMART_RUN_MODE.ONLY_CHANGED.__doc__ = "Run Only Changed Segments"

agcls.AgTypeNameMap["SMART_RUN_MODE"] = SMART_RUN_MODE

class FORMULATION(IntEnum):
    """Equinoctial Formulation."""
    POSIGRADE = 0
    """Posigrade."""
    RETROGRADE = 1
    """Retrograde."""

FORMULATION.POSIGRADE.__doc__ = "Posigrade."
FORMULATION.RETROGRADE.__doc__ = "Retrograde."

agcls.AgTypeNameMap["FORMULATION"] = FORMULATION

class LIGHTING_CONDITION(IntEnum):
    """The criteria of a Lighting stopping condition."""
    CRITERION_ENTER_DIRECT_SUN = 0
    """The Enter Direct Sun criterion."""
    CRITERION_EXIT_DIRECT_SUN = 1
    """The Exit Direct Sun criterion."""
    CRITERION_ENTER_UMBRA = 2
    """The Enter Umbra criterion."""
    CRITERION_EXIT_UMBRA = 3
    """The Exit Umbra criterion."""

LIGHTING_CONDITION.CRITERION_ENTER_DIRECT_SUN.__doc__ = "The Enter Direct Sun criterion."
LIGHTING_CONDITION.CRITERION_EXIT_DIRECT_SUN.__doc__ = "The Exit Direct Sun criterion."
LIGHTING_CONDITION.CRITERION_ENTER_UMBRA.__doc__ = "The Enter Umbra criterion."
LIGHTING_CONDITION.CRITERION_EXIT_UMBRA.__doc__ = "The Exit Umbra criterion."

agcls.AgTypeNameMap["LIGHTING_CONDITION"] = LIGHTING_CONDITION

class PROFILE(IntEnum):
    """Type of profile."""
    SEARCH_PLUGIN = 0
    """Plugin search profile."""
    DIFFERENTIAL_CORRECTOR = 2
    """Differential corrector profile."""
    CHANGE_MANEUVER_TYPE = 3
    """Change maneuver type profile."""
    SCRIPTING_TOOL = 4
    """Scripting tool profile."""
    CHANGE_RETURN_SEGMENT = 5
    """Change return segment profile."""
    CHANGE_PROPAGATOR = 6
    """Change propagator profile."""
    CHANGE_STOP_SEGMENT = 7
    """Change stop segment profile."""
    CHANGE_STOPPING_CONDITION_STATE = 8
    """Change stopping condition state profile."""
    SEED_FINITE_MANEUVER = 9
    """Change seed finite maneuver profile."""
    RUN_ONCE = 10
    """Run once profile."""
    SNOPT_OPTIMIZER = 11
    """SNOPT Optimizer profile."""
    IPOPT_OPTIMIZER = 12
    """IPOPT Optimizer profile."""
    LAMBERT_PROFILE = 13
    """Lambert profile."""
    LAMBERT_SEARCH_PROFILE = 14
    """Lambert Search profile."""
    GOLDEN_SECTION = 15
    """Golden Section profile."""
    GRID_SEARCH = 16
    """grid Search profile."""
    BISECTION = 17
    """Single Parameter Bisection profile."""

PROFILE.SEARCH_PLUGIN.__doc__ = "Plugin search profile."
PROFILE.DIFFERENTIAL_CORRECTOR.__doc__ = "Differential corrector profile."
PROFILE.CHANGE_MANEUVER_TYPE.__doc__ = "Change maneuver type profile."
PROFILE.SCRIPTING_TOOL.__doc__ = "Scripting tool profile."
PROFILE.CHANGE_RETURN_SEGMENT.__doc__ = "Change return segment profile."
PROFILE.CHANGE_PROPAGATOR.__doc__ = "Change propagator profile."
PROFILE.CHANGE_STOP_SEGMENT.__doc__ = "Change stop segment profile."
PROFILE.CHANGE_STOPPING_CONDITION_STATE.__doc__ = "Change stopping condition state profile."
PROFILE.SEED_FINITE_MANEUVER.__doc__ = "Change seed finite maneuver profile."
PROFILE.RUN_ONCE.__doc__ = "Run once profile."
PROFILE.SNOPT_OPTIMIZER.__doc__ = "SNOPT Optimizer profile."
PROFILE.IPOPT_OPTIMIZER.__doc__ = "IPOPT Optimizer profile."
PROFILE.LAMBERT_PROFILE.__doc__ = "Lambert profile."
PROFILE.LAMBERT_SEARCH_PROFILE.__doc__ = "Lambert Search profile."
PROFILE.GOLDEN_SECTION.__doc__ = "Golden Section profile."
PROFILE.GRID_SEARCH.__doc__ = "grid Search profile."
PROFILE.BISECTION.__doc__ = "Single Parameter Bisection profile."

agcls.AgTypeNameMap["PROFILE"] = PROFILE

class ACCESS_CRITERION(IntEnum):
    """The criteria of an Access stopping condition."""
    GAIN = 0
    """The Gain Access criterion."""
    LOSE = 1
    """The Lose Access criterion."""
    EITHER = 2
    """The Either criterion."""

ACCESS_CRITERION.GAIN.__doc__ = "The Gain Access criterion."
ACCESS_CRITERION.LOSE.__doc__ = "The Lose Access criterion."
ACCESS_CRITERION.EITHER.__doc__ = "The Either criterion."

agcls.AgTypeNameMap["ACCESS_CRITERION"] = ACCESS_CRITERION

class ECLIPSING_BODIES_SOURCE(IntEnum):
    """The source types of the eclipsing bodies list."""
    PROPAGATOR_CENTRAL_BODY = 0
    """The eclipsing bodies list of the propagator's central body."""
    USER_DEFINED = 1
    """A user-defined eclipsing bodies list related to the propagator's central body."""
    VEHICLE_CENTRAL_BODY = 2
    """The eclipsing bodies list of the vehicle's central body."""
    VEHICLE_USER_DEFINED = 3
    """A list of eclipsing bodies from the vehicle's Basic Properties->Eclipse Bodies list."""

ECLIPSING_BODIES_SOURCE.PROPAGATOR_CENTRAL_BODY.__doc__ = "The eclipsing bodies list of the propagator's central body."
ECLIPSING_BODIES_SOURCE.USER_DEFINED.__doc__ = "A user-defined eclipsing bodies list related to the propagator's central body."
ECLIPSING_BODIES_SOURCE.VEHICLE_CENTRAL_BODY.__doc__ = "The eclipsing bodies list of the vehicle's central body."
ECLIPSING_BODIES_SOURCE.VEHICLE_USER_DEFINED.__doc__ = "A list of eclipsing bodies from the vehicle's Basic Properties->Eclipse Bodies list."

agcls.AgTypeNameMap["ECLIPSING_BODIES_SOURCE"] = ECLIPSING_BODIES_SOURCE

class CRITERION(IntEnum):
    """The stopping condition criterion types."""
    CROSS_DECREASING = 0
    """The Cross Decreasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while decreasing."""
    CROSS_EITHER = 1
    """The Cross Either criterion - the stopping condition is satisfied when either of the above situations occurs."""
    CROSS_INCREASING = 2
    """The Cross Increasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while increasing."""

CRITERION.CROSS_DECREASING.__doc__ = "The Cross Decreasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while decreasing."
CRITERION.CROSS_EITHER.__doc__ = "The Cross Either criterion - the stopping condition is satisfied when either of the above situations occurs."
CRITERION.CROSS_INCREASING.__doc__ = "The Cross Increasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while increasing."

agcls.AgTypeNameMap["CRITERION"] = CRITERION

class CALC_OBJECT_REFERENCE(IntEnum):
    """The calculation object Reference Selection types."""
    BASIC = 0
    """The Use Basic Reference type - uses the current satellite as the reference vehicle."""
    SPECIFIED = 1
    """The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."""

CALC_OBJECT_REFERENCE.BASIC.__doc__ = "The Use Basic Reference type - uses the current satellite as the reference vehicle."
CALC_OBJECT_REFERENCE.SPECIFIED.__doc__ = "The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."

agcls.AgTypeNameMap["CALC_OBJECT_REFERENCE"] = CALC_OBJECT_REFERENCE

class CALC_OBJECT_CENTRAL_BODY_REFERENCE(IntEnum):
    """The calculation object Central Body Reference Selection types."""
    SPECIFIED = 0
    """The Use Basic Reference type - uses the current satellite as the reference vehicle."""
    PARENT = 1
    """The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."""

CALC_OBJECT_CENTRAL_BODY_REFERENCE.SPECIFIED.__doc__ = "The Use Basic Reference type - uses the current satellite as the reference vehicle."
CALC_OBJECT_CENTRAL_BODY_REFERENCE.PARENT.__doc__ = "The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle."

agcls.AgTypeNameMap["CALC_OBJECT_CENTRAL_BODY_REFERENCE"] = CALC_OBJECT_CENTRAL_BODY_REFERENCE

class CALC_OBJECT_ELEM(IntEnum):
    """The calculation object Element Types."""
    BROUWER_LYDDANE_MEAN_LONG = 0
    """Brouwer-Lyddane mean elements considering both the short and long period terms (i.e. resulting from averaging over the rotation of periapse). The perturbation terms are the J2, J3, J4 and J5 oblateness terms and it considers the term involving J2^2."""
    BROUWER_LYDDANE_MEAN_SHORT = 1
    """Brouwer-Lyddane Mean Short - Brouwer-Lyddane mean elements considering only the short period terms (i.e. those involving averaging over the period of the orbit) where the only perturbation force is the oblateness arising from the J2 gravity term."""
    KOZAI_IZSAK_MEAN = 2
    """Kozai-Izsak Mean - Kozai-Izsak mean elements for which only the short period terms (i.e. those involving averaging over the period of the orbit) are considered. The only perturbation force considered is the oblateness arising from the J2 gravity term."""
    OSCULATING = 3
    """Osculating."""

CALC_OBJECT_ELEM.BROUWER_LYDDANE_MEAN_LONG.__doc__ = "Brouwer-Lyddane mean elements considering both the short and long period terms (i.e. resulting from averaging over the rotation of periapse). The perturbation terms are the J2, J3, J4 and J5 oblateness terms and it considers the term involving J2^2."
CALC_OBJECT_ELEM.BROUWER_LYDDANE_MEAN_SHORT.__doc__ = "Brouwer-Lyddane Mean Short - Brouwer-Lyddane mean elements considering only the short period terms (i.e. those involving averaging over the period of the orbit) where the only perturbation force is the oblateness arising from the J2 gravity term."
CALC_OBJECT_ELEM.KOZAI_IZSAK_MEAN.__doc__ = "Kozai-Izsak Mean - Kozai-Izsak mean elements for which only the short period terms (i.e. those involving averaging over the period of the orbit) are considered. The only perturbation force considered is the oblateness arising from the J2 gravity term."
CALC_OBJECT_ELEM.OSCULATING.__doc__ = "Osculating."

agcls.AgTypeNameMap["CALC_OBJECT_ELEM"] = CALC_OBJECT_ELEM

class PROFILE_MODE(IntEnum):
    """The Target Sequence profile modes."""
    ITERATE = 0
    """Iterate - the Target Sequence will run the profile as it is configured in an attempt to attain the desired solution."""
    NOT_ACTIVE = 1
    """Not Active - the Target Sequence will ignore the profile when running."""
    RUN_ONCE = 2
    """Run Once - the Target Sequence will run the profile once according to its current configuration."""
    ACTIVE = 3
    """Active - the Target Sequence will apply the change that the profile passes when running."""

PROFILE_MODE.ITERATE.__doc__ = "Iterate - the Target Sequence will run the profile as it is configured in an attempt to attain the desired solution."
PROFILE_MODE.NOT_ACTIVE.__doc__ = "Not Active - the Target Sequence will ignore the profile when running."
PROFILE_MODE.RUN_ONCE.__doc__ = "Run Once - the Target Sequence will run the profile once according to its current configuration."
PROFILE_MODE.ACTIVE.__doc__ = "Active - the Target Sequence will apply the change that the profile passes when running."

agcls.AgTypeNameMap["PROFILE_MODE"] = PROFILE_MODE

class CONTROL_STOPPING_CONDITION(IntEnum):
    """The stopping condition control types."""
    TRIP_VALUE = 0
    """Trip - the value at which the stopping condition will be satisfied."""

CONTROL_STOPPING_CONDITION.TRIP_VALUE.__doc__ = "Trip - the value at which the stopping condition will be satisfied."

agcls.AgTypeNameMap["CONTROL_STOPPING_CONDITION"] = CONTROL_STOPPING_CONDITION

class STATE(IntEnum):
    """The Stop segment state types."""
    ENABLED = 0
    """Enabled - the segment stops the run of the MCS."""
    DISABLED = 1
    """Disabled - the MCS ignores this segment and continues to run."""

STATE.ENABLED.__doc__ = "Enabled - the segment stops the run of the MCS."
STATE.DISABLED.__doc__ = "Disabled - the MCS ignores this segment and continues to run."

agcls.AgTypeNameMap["STATE"] = STATE

class RETURN_CONTROL(IntEnum):
    """The Return segment control types"""
    ENABLE = 0
    """Enable - returns control of the MCS run to the parent segment."""
    DISABLE = 1
    """Disable - the MCS ignores this segment and continues to run."""
    ENABLE_EXCEPT_PROFILES_BYPASS = 2
    """Enable (except Profiles bypass)- functions as enabled except when run from a Target Sequence profile (e.g., a differential corrector), which will ignore it."""

RETURN_CONTROL.ENABLE.__doc__ = "Enable - returns control of the MCS run to the parent segment."
RETURN_CONTROL.DISABLE.__doc__ = "Disable - the MCS ignores this segment and continues to run."
RETURN_CONTROL.ENABLE_EXCEPT_PROFILES_BYPASS.__doc__ = "Enable (except Profiles bypass)- functions as enabled except when run from a Target Sequence profile (e.g., a differential corrector), which will ignore it."

agcls.AgTypeNameMap["RETURN_CONTROL"] = RETURN_CONTROL

class DRAW_PERTURBATION(IntEnum):
    """The Draw Perturbation types for a Differential Corrector profile."""
    SEGMENT_COLOR = 0
    """Segment Color - perturbations will be displayed in the trajectory color defined for the individual segments within the target sequence."""
    DONT_DRAW = 1
    """Don't Draw - perturbations will not be drawn, which may decrease the run time of the target sequence."""
    TARGETER_COLOR = 2
    """Targeter Color - perturbations will be displayed in the trajectory color defined for the target sequence."""

DRAW_PERTURBATION.SEGMENT_COLOR.__doc__ = "Segment Color - perturbations will be displayed in the trajectory color defined for the individual segments within the target sequence."
DRAW_PERTURBATION.DONT_DRAW.__doc__ = "Don't Draw - perturbations will not be drawn, which may decrease the run time of the target sequence."
DRAW_PERTURBATION.TARGETER_COLOR.__doc__ = "Targeter Color - perturbations will be displayed in the trajectory color defined for the target sequence."

agcls.AgTypeNameMap["DRAW_PERTURBATION"] = DRAW_PERTURBATION

class DERIVE_CALC_METHOD(IntEnum):
    """The Derivative Calculation method types for a Differential Corrector profile."""
    FORWARD = 0
    """Forward Difference - (f(x + delta) - f(x))/ delta"""
    CENTRAL = 1
    """Central Difference - (f(x + delta) - f(x - delta)) / 2delta"""
    SIGNED = 2
    """Signed Difference - if x is positive, use the forward difference; if x is negative, use the backward difference."""

DERIVE_CALC_METHOD.FORWARD.__doc__ = "Forward Difference - (f(x + delta) - f(x))/ delta"
DERIVE_CALC_METHOD.CENTRAL.__doc__ = "Central Difference - (f(x + delta) - f(x - delta)) / 2delta"
DERIVE_CALC_METHOD.SIGNED.__doc__ = "Signed Difference - if x is positive, use the forward difference; if x is negative, use the backward difference."

agcls.AgTypeNameMap["DERIVE_CALC_METHOD"] = DERIVE_CALC_METHOD

class CONVERGENCE_CRITERIA(IntEnum):
    """The Convergence Criteria types for a Differential Corrector profile."""
    EQUALITY_CONSTRAINT_WITHIN_TOLERANCE = 0
    """Equality Constraints Satisfied - the differences between the achieved and desired equality constraint values must be within the specified tolerances for convergence."""
    CONVERVENCE_CRITERIA_EITHER_EQUALITY_CONSTRAINTS_OR_CONTROL_PARAMS = 1
    """Equality Constraints Satisfied or Parameter Variations within Tolerance - the differences between the achieved and desired EC values must be within tolerances, or the last updates to the control parameters must be within tolerances for convergence."""

CONVERGENCE_CRITERIA.EQUALITY_CONSTRAINT_WITHIN_TOLERANCE.__doc__ = "Equality Constraints Satisfied - the differences between the achieved and desired equality constraint values must be within the specified tolerances for convergence."
CONVERGENCE_CRITERIA.CONVERVENCE_CRITERIA_EITHER_EQUALITY_CONSTRAINTS_OR_CONTROL_PARAMS.__doc__ = "Equality Constraints Satisfied or Parameter Variations within Tolerance - the differences between the achieved and desired EC values must be within tolerances, or the last updates to the control parameters must be within tolerances for convergence."

agcls.AgTypeNameMap["CONVERGENCE_CRITERIA"] = CONVERGENCE_CRITERIA

class DIFFERENTIAL_CORRECTOR_SCALING_METHOD(IntEnum):
    """The Scaling Method types for a Differential Corrector profile."""
    INITIAL_VALUE = 0
    """By initial value."""
    ONE_NO_SCALING = 1
    """By one (no scaling)."""
    SPECIFIED_VALUE = 2
    """By specified value."""
    TOLERANCE = 3
    """By tolerance."""

DIFFERENTIAL_CORRECTOR_SCALING_METHOD.INITIAL_VALUE.__doc__ = "By initial value."
DIFFERENTIAL_CORRECTOR_SCALING_METHOD.ONE_NO_SCALING.__doc__ = "By one (no scaling)."
DIFFERENTIAL_CORRECTOR_SCALING_METHOD.SPECIFIED_VALUE.__doc__ = "By specified value."
DIFFERENTIAL_CORRECTOR_SCALING_METHOD.TOLERANCE.__doc__ = "By tolerance."

agcls.AgTypeNameMap["DIFFERENTIAL_CORRECTOR_SCALING_METHOD"] = DIFFERENTIAL_CORRECTOR_SCALING_METHOD

class CONTROL_UPDATE(IntEnum):
    """Update segment properties that can be selected as control parameters for a Target Sequence."""
    CD_VAL = 100
    """Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."""
    CR_VAL = 101
    """Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    DRAG_AREA_VAL = 102
    """Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."""
    DRY_MASS_VAL = 103
    """Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."""
    FUEL_DENSITY_VAL = 104
    """Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."""
    FUEL_MASS_VAL = 105
    """Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."""
    RADIATION_PRESSURE_AREA_VAL = 106
    """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."""
    RADIATION_PRESSURE_COEFFICIENT_VAL = 107
    """Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    SRP_AREA_VAL = 108
    """Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."""
    TANK_PRESSURE_VAL = 109
    """Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."""
    TANK_TEMP_VAL = 110
    """Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."""

CONTROL_UPDATE.CD_VAL.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
CONTROL_UPDATE.CR_VAL.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_UPDATE.DRAG_AREA_VAL.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
CONTROL_UPDATE.DRY_MASS_VAL.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_UPDATE.FUEL_DENSITY_VAL.__doc__ = "Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."
CONTROL_UPDATE.FUEL_MASS_VAL.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_UPDATE.RADIATION_PRESSURE_AREA_VAL.__doc__ = "The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."
CONTROL_UPDATE.RADIATION_PRESSURE_COEFFICIENT_VAL.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_UPDATE.SRP_AREA_VAL.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."
CONTROL_UPDATE.TANK_PRESSURE_VAL.__doc__ = "Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."
CONTROL_UPDATE.TANK_TEMP_VAL.__doc__ = "Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."

agcls.AgTypeNameMap["CONTROL_UPDATE"] = CONTROL_UPDATE

class CONTROL_FOLLOW(IntEnum):
    """Follow segment properties that can be selected as control parameters for a Target Sequence."""
    FUEL_MASS = 200
    """Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."""
    CD = 201
    """Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."""
    CR = 202
    """Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    DRAG_AREA = 203
    """Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."""
    DRY_MASS = 204
    """Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."""
    FUEL_DENSITY = 205
    """Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."""
    K1 = 206
    """GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."""
    K2 = 207
    """GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."""
    RADIATION_PRESSURE_AREA = 208
    """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."""
    CK = 209
    """Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    SRP_AREA = 210
    """Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."""
    TANK_PRESSURE = 211
    """Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."""
    TANK_TEMP = 212
    """Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."""
    MAX_FUEL_MASS = 213
    """Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Enter a value in the selected mass unit (e.g. kg)."""
    TANK_VOLUME = 214
    """Tank Volume - the volume of the fuel tank. Enter a value in the selected distance unit cubed (e.g. m^3). The minimum value is 1e-019 m^3."""
    X_OFFSET = 215
    """X Offset - the distance that the spacecraft will be offset from the leader's body frame along the X axis."""
    Y_OFFSET = 216
    """Y Offset - the distance that the spacecraft will be offset from the leader's body frame along the Y axis."""
    Z_OFFSET = 217
    """Z Offset - the distance that the spacecraft will be offset from the leader's body frame along the Z axis."""

CONTROL_FOLLOW.FUEL_MASS.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_FOLLOW.CD.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
CONTROL_FOLLOW.CR.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_FOLLOW.DRAG_AREA.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
CONTROL_FOLLOW.DRY_MASS.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_FOLLOW.FUEL_DENSITY.__doc__ = "Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3)."
CONTROL_FOLLOW.K1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
CONTROL_FOLLOW.K2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."
CONTROL_FOLLOW.RADIATION_PRESSURE_AREA.__doc__ = "The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared."
CONTROL_FOLLOW.CK.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_FOLLOW.SRP_AREA.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared."
CONTROL_FOLLOW.TANK_PRESSURE.__doc__ = "Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa)."
CONTROL_FOLLOW.TANK_TEMP.__doc__ = "Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit."
CONTROL_FOLLOW.MAX_FUEL_MASS.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_FOLLOW.TANK_VOLUME.__doc__ = "Tank Volume - the volume of the fuel tank. Enter a value in the selected distance unit cubed (e.g. m^3). The minimum value is 1e-019 m^3."
CONTROL_FOLLOW.X_OFFSET.__doc__ = "X Offset - the distance that the spacecraft will be offset from the leader's body frame along the X axis."
CONTROL_FOLLOW.Y_OFFSET.__doc__ = "Y Offset - the distance that the spacecraft will be offset from the leader's body frame along the Y axis."
CONTROL_FOLLOW.Z_OFFSET.__doc__ = "Z Offset - the distance that the spacecraft will be offset from the leader's body frame along the Z axis."

agcls.AgTypeNameMap["CONTROL_FOLLOW"] = CONTROL_FOLLOW

class CONTROL_INIT_STATE(IntEnum):
    """Initial State segment properties that can be selected as control parameters for a Target Sequence."""
    FUEL_MASS = 300
    """Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."""
    CARTESIAN_VX = 301
    """Vx Component - the X component of the spacecraft velocity vector."""
    CARTESIAN_VY = 302
    """Vy Component - the Y component of the spacecraft velocity vector."""
    CARTESIAN_VZ = 303
    """Vz Component - the Z component of the spacecraft velocity vector."""
    CARTESIAN_X = 304
    """X Component - the X component of the spacecraft position vector."""
    CARTESIAN_Y = 305
    """Y Component - the Y component of the spacecraft position vector."""
    CARTESIAN_Z = 306
    """Z Component - the Z component of the spacecraft position vector."""
    CD = 307
    """Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."""
    CR = 308
    """Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    DRAG_AREA = 309
    """Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."""
    DRY_MASS = 310
    """Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."""
    EPOCH = 311
    """Epoch - the orbit epoch."""
    FUEL_DENSITY = 312
    """Fuel Density - the density of the fuel tank."""
    K1 = 313
    """GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."""
    K2 = 314
    """GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."""
    KEPLERIAN_ECCENTRICITY = 315
    """Eccentricity - the ratio of the distance between the foci to the major axis of the orbital ellipse. Dimensionless."""
    KEPLERIAN_INC = 316
    """Inclination - the angle from the +Z axis of the coordinate system to the angular momentum vector of the spacecraft's orbit."""
    KEPLERIAN_RAAN = 317
    """Right Ascension of Ascending Node - the angle between the X direction of the coordinate system and the point where the orbit crosses the X-Y plane in the +Z direction."""
    KEPLERIAN_SMA = 318
    """Semimajor Axis - half the length of the major (longest) axis of the orbital ellipse."""
    KEPLERIAN_TA = 319
    """True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."""
    KEPLERIAN_W = 320
    """Argument of Periapsis - the angle measured in the direction of spacecraft motion, in the orbit plane, from the ascending node to the periapsis of the orbit."""
    RADIATION_PRESSURE_AREA = 327
    """Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."""
    CK = 328
    """Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    SPHERICAL_AZ = 329
    """Velocity Azimuth - the angle in the spacecraft local horizontal plane between the projection of the velocity vector onto that plane and the local +Z direction measured as positive in the clockwise direction from north."""
    SPHERICAL_DEC = 330
    """Declination - the angle from the X-Y plane of the coordinate system to the spacecraft position vector."""
    SPHERICAL_HORIZ_FPA = 331
    """Horizontal Flight Path Angle - the complement of the angle between the spacecraft velocity vector and the radius vector (90 deg minus the vertical flight path angle)."""
    SPHERICAL_RA = 332
    """Right Ascension - angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spacecraft position vector."""
    SPHERICAL_R_MAGNITUDE = 333
    """Radius Magnitude - the magnitude of the spacecraft position vector."""
    SPHERICAL_V_MAGNITUDE = 334
    """Velocity Magnitude - the magnitude of the spacecraft velocity vector."""
    SRP_AREA = 335
    """Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."""
    TANK_PRESSURE = 336
    """Tank Pressure - the fuel tank pressure."""
    TANK_TEMP = 337
    """Tank Temperature - the temperature of the fuel tank."""
    TARGET_VEC_IN_ASYMP_DEC = 338
    """Declination of Incoming Asymptote - the declination of the incoming asymptote in the selected coordinate system."""
    TARGET_VEC_IN_ASYMP_RA = 339
    """Right Ascension of Incoming Asymptote - the right ascension of the hyperbolic incoming asymptote in the selected coordinate system."""
    TARGET_VEC_IN_VEL_AZ_AT_PERIAPSIS = 340
    """Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."""
    TARGET_VEC_IN_C3 = 341
    """C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."""
    TARGET_VEC_IN_RAD_OF_PERIAPSIS = 342
    """Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."""
    TARGET_VEC_IN_TRUE_ANOMALY = 343
    """True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."""
    TARGET_VEC_OUT_ASYMP_DEC = 344
    """Declination of Outgoing Asymptote - the declination of the outgoing asymptote in the selected coordinate system."""
    TARGET_VEC_OUT_ASYMP_RA = 345
    """Right Ascension of Outgoing Asymptote - the right ascension of the hyperbolic outgoing asymptote in the selected coordinate system."""
    TARGET_VEC_OUT_VEL_AZ_AT_PERIAPSIS = 346
    """Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."""
    TARGET_VEC_OUT_C3 = 347
    """C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."""
    TARGET_VEC_OUT_RAD_OF_PERIAPSIS = 348
    """Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."""
    TARGET_VEC_OUT_TRUE_ANOMALY = 349
    """True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."""
    MAX_FUEL_MASS = 350
    """Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."""
    TANK_VOLUME = 351
    """Tank Volume - the volume of the fuel tank."""
    DELAUNAY_G = 352
    """G - Magnitude of orbital angular momentum, sqrt(GM * p)."""
    DELAUNAY_H = 353
    """H - Z component of orbital angular momentum, G cos(inc)."""
    DELAUNAY_INC = 354
    """Inclination - The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis."""
    DELAUNAY_L = 355
    """L - Related to two-body orbital energy, sqrt(GM * a)"""
    DELAUNAY_MEAN_ANOMALY = 356
    """Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."""
    DELAUNAY_RAAN = 357
    """Right Ascension of Ascending Node - The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane."""
    DELAUNAY_SEMI_LATUS_RECTUM = 358
    """Semi-latus Rectum - Distance from focus to orbit at true anomaly of 90 degrees"""
    DELAUNAY_SMA = 359
    """Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."""
    DELAUNAY_W = 360
    """Argument of Periapsis - The angle from the ascending node to the eccentricity vector measured in the direction of the satellite's motion and in the orbit plane."""
    EQUINOCTIAL_H = 361
    """H - With K, describe the shape and position of periapsis of the orbit, ecc * sin(RAAN + w)"""
    EQUINOCTIAL_K = 362
    """K - With H, describe the shape and position of periapsis of the orbit, ecc * cos(RAAN + w)"""
    EQUINOCTIAL_MEAN_LONGITUDE = 363
    """Mean Longitude - RAAN + w + M"""
    EQUINOCTIAL_MEAN_MOTION = 364
    """Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."""
    EQUINOCTIAL_P = 365
    """P - With Q, describes the orientation of the orbit plane, tan(inc/2) * sin(RAAN)"""
    EQUINOCTIAL_Q = 366
    """Q - With P, describes the orientation of the orbit plane, tan(inc/2) * cos(RAAN)"""
    EQUINOCTIAL_SMA = 367
    """Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."""
    MIXED_SPHERICAL_ALTITUDE = 368
    """Altitude - The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid."""
    MIXED_SPHERICAL_AZIMUTH = 369
    """Azimuth - The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction."""
    MIXED_SPHERICAL_HORIZ_FPA = 370
    """Horizontal Flight Path Angle - The complement of the angle between the inertial velocity vector and the radius vector."""
    MIXED_SPHERICAL_LATITUDE = 371
    """Latitude - The geodetic latitude of a point is the angle between the normal to the reference ellipsoid that passes through the satellite position and the equatorial plane."""
    MIXED_SPHERICAL_LONGITUDE = 372
    """Longitude"""
    MIXED_SPHERICAL_VERTICAL_FPA = 373
    """Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."""
    MIXED_SPHERICAL_V_MAGNITUDE = 374
    """Velocity Magnitude - The magnitude of the inertial velocity vector."""
    SPHERICAL_VERTICAL_FPA = 375
    """Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."""
    KEPLERIAN_APOAPSIS_ALTITUDE_SHAPE = 376
    """Apoapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."""
    KEPLERIAN_APOAPSIS_ALTITUDE_SIZE = 377
    """Apoapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."""
    KEPLERIAN_APOAPSIS_RAD_SHAPE = 378
    """Apoapsis Radius - Shape Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."""
    KEPLERIAN_APOAPSIS_RAD_SIZE = 379
    """Apoapsis Radius - Size Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."""
    KEPLERIAN_ARG_LAT = 380
    """Argument of Latitude - The sum of the True Anomaly and the Argument of Perigee."""
    KEPLERIAN_ECCENTRICITY_ANOMALY = 381
    """Eccentric Anomaly - Angle measured with an origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse."""
    KEPLERIAN_LAN = 382
    """Longitude of Ascending Node - Longitude of the Ascending Node is the Earth-fixed longitude where the satellite has crossed the inertial equator from south to north based on an assumption of two-body motion."""
    KEPLERIAN_MEAN_ANOMALY = 383
    """Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."""
    KEPLERIAN_MEAN_MOTION = 384
    """Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."""
    KEPLERIAN_PERIAPSIS_ALTITUDE_SHAPE = 385
    """Periapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."""
    KEPLERIAN_PERIAPSIS_ALTITUDE_SIZE = 386
    """Periapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."""
    KEPLERIAN_PERIAPSIS_RAD_SHAPE = 387
    """Periapsis Radius - Shape Parameter - Distance from the center of the central body to the point of minimum radius in the orbit."""
    KEPLERIAN_PERIAPSIS_RAD_SIZE = 388
    """Periapsis Radius - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."""
    KEPLERIAN_PERIOD = 389
    """Period - The duration of one orbit, based on assumed two-body motion."""
    KEPLERIAN_TIME_PAST_AN = 390
    """Time Past Ascending Node - The elapsed time since the last ascending node crossing based on assumed two-body motion."""
    KEPLERIAN_TIME_PAST_PERIAPSIS = 391
    """Time Past Periapsis - The elapsed time since the last perigee passage based on assumed two-body motion."""

CONTROL_INIT_STATE.FUEL_MASS.__doc__ = "Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_INIT_STATE.CARTESIAN_VX.__doc__ = "Vx Component - the X component of the spacecraft velocity vector."
CONTROL_INIT_STATE.CARTESIAN_VY.__doc__ = "Vy Component - the Y component of the spacecraft velocity vector."
CONTROL_INIT_STATE.CARTESIAN_VZ.__doc__ = "Vz Component - the Z component of the spacecraft velocity vector."
CONTROL_INIT_STATE.CARTESIAN_X.__doc__ = "X Component - the X component of the spacecraft position vector."
CONTROL_INIT_STATE.CARTESIAN_Y.__doc__ = "Y Component - the Y component of the spacecraft position vector."
CONTROL_INIT_STATE.CARTESIAN_Z.__doc__ = "Z Component - the Z component of the spacecraft position vector."
CONTROL_INIT_STATE.CD.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
CONTROL_INIT_STATE.CR.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_INIT_STATE.DRAG_AREA.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared."
CONTROL_INIT_STATE.DRY_MASS.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg)."
CONTROL_INIT_STATE.EPOCH.__doc__ = "Epoch - the orbit epoch."
CONTROL_INIT_STATE.FUEL_DENSITY.__doc__ = "Fuel Density - the density of the fuel tank."
CONTROL_INIT_STATE.K1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
CONTROL_INIT_STATE.K2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value."
CONTROL_INIT_STATE.KEPLERIAN_ECCENTRICITY.__doc__ = "Eccentricity - the ratio of the distance between the foci to the major axis of the orbital ellipse. Dimensionless."
CONTROL_INIT_STATE.KEPLERIAN_INC.__doc__ = "Inclination - the angle from the +Z axis of the coordinate system to the angular momentum vector of the spacecraft's orbit."
CONTROL_INIT_STATE.KEPLERIAN_RAAN.__doc__ = "Right Ascension of Ascending Node - the angle between the X direction of the coordinate system and the point where the orbit crosses the X-Y plane in the +Z direction."
CONTROL_INIT_STATE.KEPLERIAN_SMA.__doc__ = "Semimajor Axis - half the length of the major (longest) axis of the orbital ellipse."
CONTROL_INIT_STATE.KEPLERIAN_TA.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
CONTROL_INIT_STATE.KEPLERIAN_W.__doc__ = "Argument of Periapsis - the angle measured in the direction of spacecraft motion, in the orbit plane, from the ascending node to the periapsis of the orbit."
CONTROL_INIT_STATE.RADIATION_PRESSURE_AREA.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."
CONTROL_INIT_STATE.CK.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_INIT_STATE.SPHERICAL_AZ.__doc__ = "Velocity Azimuth - the angle in the spacecraft local horizontal plane between the projection of the velocity vector onto that plane and the local +Z direction measured as positive in the clockwise direction from north."
CONTROL_INIT_STATE.SPHERICAL_DEC.__doc__ = "Declination - the angle from the X-Y plane of the coordinate system to the spacecraft position vector."
CONTROL_INIT_STATE.SPHERICAL_HORIZ_FPA.__doc__ = "Horizontal Flight Path Angle - the complement of the angle between the spacecraft velocity vector and the radius vector (90 deg minus the vertical flight path angle)."
CONTROL_INIT_STATE.SPHERICAL_RA.__doc__ = "Right Ascension - angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spacecraft position vector."
CONTROL_INIT_STATE.SPHERICAL_R_MAGNITUDE.__doc__ = "Radius Magnitude - the magnitude of the spacecraft position vector."
CONTROL_INIT_STATE.SPHERICAL_V_MAGNITUDE.__doc__ = "Velocity Magnitude - the magnitude of the spacecraft velocity vector."
CONTROL_INIT_STATE.SRP_AREA.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
CONTROL_INIT_STATE.TANK_PRESSURE.__doc__ = "Tank Pressure - the fuel tank pressure."
CONTROL_INIT_STATE.TANK_TEMP.__doc__ = "Tank Temperature - the temperature of the fuel tank."
CONTROL_INIT_STATE.TARGET_VEC_IN_ASYMP_DEC.__doc__ = "Declination of Incoming Asymptote - the declination of the incoming asymptote in the selected coordinate system."
CONTROL_INIT_STATE.TARGET_VEC_IN_ASYMP_RA.__doc__ = "Right Ascension of Incoming Asymptote - the right ascension of the hyperbolic incoming asymptote in the selected coordinate system."
CONTROL_INIT_STATE.TARGET_VEC_IN_VEL_AZ_AT_PERIAPSIS.__doc__ = "Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."
CONTROL_INIT_STATE.TARGET_VEC_IN_C3.__doc__ = "C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."
CONTROL_INIT_STATE.TARGET_VEC_IN_RAD_OF_PERIAPSIS.__doc__ = "Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."
CONTROL_INIT_STATE.TARGET_VEC_IN_TRUE_ANOMALY.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
CONTROL_INIT_STATE.TARGET_VEC_OUT_ASYMP_DEC.__doc__ = "Declination of Outgoing Asymptote - the declination of the outgoing asymptote in the selected coordinate system."
CONTROL_INIT_STATE.TARGET_VEC_OUT_ASYMP_RA.__doc__ = "Right Ascension of Outgoing Asymptote - the right ascension of the hyperbolic outgoing asymptote in the selected coordinate system."
CONTROL_INIT_STATE.TARGET_VEC_OUT_VEL_AZ_AT_PERIAPSIS.__doc__ = "Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis."
CONTROL_INIT_STATE.TARGET_VEC_OUT_C3.__doc__ = "C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis."
CONTROL_INIT_STATE.TARGET_VEC_OUT_RAD_OF_PERIAPSIS.__doc__ = "Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit."
CONTROL_INIT_STATE.TARGET_VEC_OUT_TRUE_ANOMALY.__doc__ = "True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion."
CONTROL_INIT_STATE.MAX_FUEL_MASS.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."
CONTROL_INIT_STATE.TANK_VOLUME.__doc__ = "Tank Volume - the volume of the fuel tank."
CONTROL_INIT_STATE.DELAUNAY_G.__doc__ = "G - Magnitude of orbital angular momentum, sqrt(GM * p)."
CONTROL_INIT_STATE.DELAUNAY_H.__doc__ = "H - Z component of orbital angular momentum, G cos(inc)."
CONTROL_INIT_STATE.DELAUNAY_INC.__doc__ = "Inclination - The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis."
CONTROL_INIT_STATE.DELAUNAY_L.__doc__ = "L - Related to two-body orbital energy, sqrt(GM * a)"
CONTROL_INIT_STATE.DELAUNAY_MEAN_ANOMALY.__doc__ = "Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."
CONTROL_INIT_STATE.DELAUNAY_RAAN.__doc__ = "Right Ascension of Ascending Node - The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane."
CONTROL_INIT_STATE.DELAUNAY_SEMI_LATUS_RECTUM.__doc__ = "Semi-latus Rectum - Distance from focus to orbit at true anomaly of 90 degrees"
CONTROL_INIT_STATE.DELAUNAY_SMA.__doc__ = "Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."
CONTROL_INIT_STATE.DELAUNAY_W.__doc__ = "Argument of Periapsis - The angle from the ascending node to the eccentricity vector measured in the direction of the satellite's motion and in the orbit plane."
CONTROL_INIT_STATE.EQUINOCTIAL_H.__doc__ = "H - With K, describe the shape and position of periapsis of the orbit, ecc * sin(RAAN + w)"
CONTROL_INIT_STATE.EQUINOCTIAL_K.__doc__ = "K - With H, describe the shape and position of periapsis of the orbit, ecc * cos(RAAN + w)"
CONTROL_INIT_STATE.EQUINOCTIAL_MEAN_LONGITUDE.__doc__ = "Mean Longitude - RAAN + w + M"
CONTROL_INIT_STATE.EQUINOCTIAL_MEAN_MOTION.__doc__ = "Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."
CONTROL_INIT_STATE.EQUINOCTIAL_P.__doc__ = "P - With Q, describes the orientation of the orbit plane, tan(inc/2) * sin(RAAN)"
CONTROL_INIT_STATE.EQUINOCTIAL_Q.__doc__ = "Q - With P, describes the orientation of the orbit plane, tan(inc/2) * cos(RAAN)"
CONTROL_INIT_STATE.EQUINOCTIAL_SMA.__doc__ = "Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse."
CONTROL_INIT_STATE.MIXED_SPHERICAL_ALTITUDE.__doc__ = "Altitude - The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid."
CONTROL_INIT_STATE.MIXED_SPHERICAL_AZIMUTH.__doc__ = "Azimuth - The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction."
CONTROL_INIT_STATE.MIXED_SPHERICAL_HORIZ_FPA.__doc__ = "Horizontal Flight Path Angle - The complement of the angle between the inertial velocity vector and the radius vector."
CONTROL_INIT_STATE.MIXED_SPHERICAL_LATITUDE.__doc__ = "Latitude - The geodetic latitude of a point is the angle between the normal to the reference ellipsoid that passes through the satellite position and the equatorial plane."
CONTROL_INIT_STATE.MIXED_SPHERICAL_LONGITUDE.__doc__ = "Longitude"
CONTROL_INIT_STATE.MIXED_SPHERICAL_VERTICAL_FPA.__doc__ = "Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."
CONTROL_INIT_STATE.MIXED_SPHERICAL_V_MAGNITUDE.__doc__ = "Velocity Magnitude - The magnitude of the inertial velocity vector."
CONTROL_INIT_STATE.SPHERICAL_VERTICAL_FPA.__doc__ = "Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector."
CONTROL_INIT_STATE.KEPLERIAN_APOAPSIS_ALTITUDE_SHAPE.__doc__ = "Apoapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_APOAPSIS_ALTITUDE_SIZE.__doc__ = "Apoapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_APOAPSIS_RAD_SHAPE.__doc__ = "Apoapsis Radius - Shape Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_APOAPSIS_RAD_SIZE.__doc__ = "Apoapsis Radius - Size Parameter - Distance from the center of the central body to the point of maximum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_ARG_LAT.__doc__ = "Argument of Latitude - The sum of the True Anomaly and the Argument of Perigee."
CONTROL_INIT_STATE.KEPLERIAN_ECCENTRICITY_ANOMALY.__doc__ = "Eccentric Anomaly - Angle measured with an origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse."
CONTROL_INIT_STATE.KEPLERIAN_LAN.__doc__ = "Longitude of Ascending Node - Longitude of the Ascending Node is the Earth-fixed longitude where the satellite has crossed the inertial equator from south to north based on an assumption of two-body motion."
CONTROL_INIT_STATE.KEPLERIAN_MEAN_ANOMALY.__doc__ = "Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate."
CONTROL_INIT_STATE.KEPLERIAN_MEAN_MOTION.__doc__ = "Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion."
CONTROL_INIT_STATE.KEPLERIAN_PERIAPSIS_ALTITUDE_SHAPE.__doc__ = "Periapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_PERIAPSIS_ALTITUDE_SIZE.__doc__ = "Periapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_PERIAPSIS_RAD_SHAPE.__doc__ = "Periapsis Radius - Shape Parameter - Distance from the center of the central body to the point of minimum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_PERIAPSIS_RAD_SIZE.__doc__ = "Periapsis Radius - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit."
CONTROL_INIT_STATE.KEPLERIAN_PERIOD.__doc__ = "Period - The duration of one orbit, based on assumed two-body motion."
CONTROL_INIT_STATE.KEPLERIAN_TIME_PAST_AN.__doc__ = "Time Past Ascending Node - The elapsed time since the last ascending node crossing based on assumed two-body motion."
CONTROL_INIT_STATE.KEPLERIAN_TIME_PAST_PERIAPSIS.__doc__ = "Time Past Periapsis - The elapsed time since the last perigee passage based on assumed two-body motion."

agcls.AgTypeNameMap["CONTROL_INIT_STATE"] = CONTROL_INIT_STATE

class CONTROL_MANEUVER(IntEnum):
    """Maneuver segment properties that can be selected as control parameters for a Target Sequence."""
    FINITE_CARTESIAN_X = 400
    """The Cartesian X component of the thrust vector."""
    FINITE_CARTESIAN_Y = 401
    """The Cartesian Y component of the thrust vector."""
    FINITE_CARTESIAN_Z = 402
    """The Cartesian Z component of the thrust vector."""
    FINITE_EULER_ANGLES1 = 403
    """The Euler A (Phi) component of the rotation from the reference axes to the body frame."""
    FINITE_EULER_ANGLES2 = 404
    """The Euler B (Theta) component of the rotation from the reference axes to the body frame."""
    FINITE_EULER_ANGLES3 = 405
    """The Euler C (Psi) component of the rotation from the reference axes to the body frame."""
    FINITE_SPHERICAL_AZ = 406
    """The spherical azimuth component of the thrust vector."""
    FINITE_SPHERICAL_ELEV = 407
    """The spherical elevation component of the thrust vector."""
    IMPULSIVE_CARTESIAN_X = 408
    """The Cartesian X component of the thrust vector."""
    IMPULSIVE_CARTESIAN_Y = 409
    """The Cartesian Y component of the thrust vector."""
    IMPULSIVE_CARTESIAN_Z = 410
    """The Cartesian Z component of the thrust vector."""
    IMPULSIVE_EULER_ANGLES1 = 411
    """The Euler A (Phi) component of the rotation from the reference axes to the body frame."""
    IMPULSIVE_EULER_ANGLES2 = 412
    """The Euler B (Theta) component of the rotation from the reference axes to the body frame."""
    IMPULSIVE_EULER_ANGLES3 = 413
    """The Euler C (Psi) component of the rotation from the reference axes to the body frame."""
    IMPULSIVE_SPHERICAL_AZ = 414
    """The spherical azimuth component of the thrust vector."""
    IMPULSIVE_SPHERICAL_ELEV = 415
    """The spherical elevation component of the thrust vector."""
    IMPULSIVE_SPHERICAL_MAGNITUDE = 416
    """The spherical magnitude component of the thrust vector."""
    FINITE_BURN_CENTER_BIAS = 417
    """The burn center bias of the thrust."""
    FINITE_THRUST_EFFICIENCY = 418
    """The thrust efficiency value."""
    FINITE_AZ0 = 419
    """The time varying azimuth polynomial constant term."""
    FINITE_AZ1 = 420
    """The time varying azimuth polynomial linear term."""
    FINITE_AZ2 = 421
    """The time varying azimuth polynomial quadratic term."""
    FINITE_AZ3 = 422
    """The time varying azimuth polynomial cubic term."""
    FINITE_AZ4 = 423
    """The time varying azimuth polynomial quartic term."""
    FINITE_AZ_A = 424
    """The time varying azimuth sine amplitude term."""
    FINITE_AZ_F = 425
    """The time varying azimuth sine frequency term."""
    FINITE_AZ_P = 426
    """The time varying azimuth sine phase term."""
    FINITE_EL0 = 427
    """The time varying elevation polynomial constant term."""
    FINITE_EL1 = 428
    """The time varying elevation polynomial linear term."""
    FINITE_EL2 = 429
    """The time varying elevation polynomial quadratic term."""
    FINITE_EL3 = 430
    """The time varying elevation polynomial cubic term."""
    FINITE_EL4 = 431
    """The time varying elevation polynomial quartic term."""
    FINITE_EL_A = 432
    """The time varying elevation sine amplitude term."""
    FINITE_EL_F = 433
    """The time varying elevation sine frequency term."""
    FINITE_EL_P = 434
    """The time varying elevation sine phase term."""

CONTROL_MANEUVER.FINITE_CARTESIAN_X.__doc__ = "The Cartesian X component of the thrust vector."
CONTROL_MANEUVER.FINITE_CARTESIAN_Y.__doc__ = "The Cartesian Y component of the thrust vector."
CONTROL_MANEUVER.FINITE_CARTESIAN_Z.__doc__ = "The Cartesian Z component of the thrust vector."
CONTROL_MANEUVER.FINITE_EULER_ANGLES1.__doc__ = "The Euler A (Phi) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.FINITE_EULER_ANGLES2.__doc__ = "The Euler B (Theta) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.FINITE_EULER_ANGLES3.__doc__ = "The Euler C (Psi) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.FINITE_SPHERICAL_AZ.__doc__ = "The spherical azimuth component of the thrust vector."
CONTROL_MANEUVER.FINITE_SPHERICAL_ELEV.__doc__ = "The spherical elevation component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_CARTESIAN_X.__doc__ = "The Cartesian X component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_CARTESIAN_Y.__doc__ = "The Cartesian Y component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_CARTESIAN_Z.__doc__ = "The Cartesian Z component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_EULER_ANGLES1.__doc__ = "The Euler A (Phi) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.IMPULSIVE_EULER_ANGLES2.__doc__ = "The Euler B (Theta) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.IMPULSIVE_EULER_ANGLES3.__doc__ = "The Euler C (Psi) component of the rotation from the reference axes to the body frame."
CONTROL_MANEUVER.IMPULSIVE_SPHERICAL_AZ.__doc__ = "The spherical azimuth component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_SPHERICAL_ELEV.__doc__ = "The spherical elevation component of the thrust vector."
CONTROL_MANEUVER.IMPULSIVE_SPHERICAL_MAGNITUDE.__doc__ = "The spherical magnitude component of the thrust vector."
CONTROL_MANEUVER.FINITE_BURN_CENTER_BIAS.__doc__ = "The burn center bias of the thrust."
CONTROL_MANEUVER.FINITE_THRUST_EFFICIENCY.__doc__ = "The thrust efficiency value."
CONTROL_MANEUVER.FINITE_AZ0.__doc__ = "The time varying azimuth polynomial constant term."
CONTROL_MANEUVER.FINITE_AZ1.__doc__ = "The time varying azimuth polynomial linear term."
CONTROL_MANEUVER.FINITE_AZ2.__doc__ = "The time varying azimuth polynomial quadratic term."
CONTROL_MANEUVER.FINITE_AZ3.__doc__ = "The time varying azimuth polynomial cubic term."
CONTROL_MANEUVER.FINITE_AZ4.__doc__ = "The time varying azimuth polynomial quartic term."
CONTROL_MANEUVER.FINITE_AZ_A.__doc__ = "The time varying azimuth sine amplitude term."
CONTROL_MANEUVER.FINITE_AZ_F.__doc__ = "The time varying azimuth sine frequency term."
CONTROL_MANEUVER.FINITE_AZ_P.__doc__ = "The time varying azimuth sine phase term."
CONTROL_MANEUVER.FINITE_EL0.__doc__ = "The time varying elevation polynomial constant term."
CONTROL_MANEUVER.FINITE_EL1.__doc__ = "The time varying elevation polynomial linear term."
CONTROL_MANEUVER.FINITE_EL2.__doc__ = "The time varying elevation polynomial quadratic term."
CONTROL_MANEUVER.FINITE_EL3.__doc__ = "The time varying elevation polynomial cubic term."
CONTROL_MANEUVER.FINITE_EL4.__doc__ = "The time varying elevation polynomial quartic term."
CONTROL_MANEUVER.FINITE_EL_A.__doc__ = "The time varying elevation sine amplitude term."
CONTROL_MANEUVER.FINITE_EL_F.__doc__ = "The time varying elevation sine frequency term."
CONTROL_MANEUVER.FINITE_EL_P.__doc__ = "The time varying elevation sine phase term."

agcls.AgTypeNameMap["CONTROL_MANEUVER"] = CONTROL_MANEUVER

class CONTROL_LAUNCH(IntEnum):
    """Launch segment properties that can be selected as control parameters for a Target Sequence."""
    EPOCH = 500
    """The date and time of the launch."""
    GEODETIC_LAT = 501
    """The geodetic latitude of the launch location."""
    GEODETIC_LON = 502
    """The geodetic longitude of the launch location."""
    GEODETIC_ALTITUDE = 503
    """The geodetic altitude of the launch location."""
    GEOCENTRIC_LAT = 504
    """The geocentric latitude of the launch location."""
    GEOCENTRIC_LON = 505
    """The geocentric longitude of the launch location."""
    GEOCENTRIC_RAD = 506
    """The geocentric radius of the launch location."""
    TIME_OF_FLIGHT = 507
    """The time of flight, from launch until burnout."""
    BURNOUT_GEOCENTRIC_LAT = 508
    """The geocentric latitude of the burnout point."""
    BURNOUT_GEOCENTRIC_LON = 509
    """The geocentric longitude of the burnout point."""
    BURNOUT_GEOCENTRIC_RAD = 510
    """The geocentric radius of the burnout point."""
    BURNOUT_GEODETIC_LAT = 511
    """The geodetic latitude of the burnout point."""
    BURNOUT_GEODETIC_LON = 512
    """The geodetic longitude of the burnout point."""
    BURNOUT_GEODETIC_ALTITUDE = 513
    """The geodetic altitude of the burnout point."""
    BURNOUT_AZ_ALTITUDE_AZ = 514
    """The geodetic azimuth of the launch trajectory."""
    BURNOUT_AZ_ALTITUDE_DOWNRANGE_DIST = 515
    """The geodetic downrange distance of the burnout point."""
    BURNOUT_AZ_ALTITUDE_ALTITUDE = 516
    """The geodetic altitude of the burnout point."""
    BURNOUT_AZ_RAD_AZ = 517
    """The geocentric azimuth of the launch trajectory."""
    BURNOUT_AZ_RAD_DOWNRANGE_DIST = 518
    """The geocentric downrange distance of the burnout point."""
    BURNOUT_AZ_RAD_RAD = 519
    """The geocentric radius of the burnout point."""
    BURNOUT_FIXED_VELOCITY = 520
    """The burnout velocity in the fixed frame."""
    BURNOUT_INERTIAL_VELOCITY = 521
    """The burnout velocity in the inertial frame."""
    BURNOUT_INERTIAL_VELOCITY_AZIMUTH = 522
    """Inertial Velocity Azimuth - the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed."""
    BURNOUT_INERTIAL_HORIZONTAL_FPA = 523
    """Inertial Horizontal FPA - the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle."""
    DRY_MASS = 524
    """Dry Mass - the mass of the spacecraft exclusive of propellant."""
    CD = 525
    """Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."""
    DRAG_AREA = 526
    """Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."""
    CR = 527
    """Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    SRP_AREA = 528
    """Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."""
    CK = 529
    """Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    RADIATION_PRESSURE_AREA = 530
    """Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."""
    K1 = 531
    """GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."""
    K2 = 532
    """GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (scale) value."""
    TANK_PRESSURE = 533
    """The fuel tank pressure."""
    TANK_VOLUME = 534
    """The volume of the fuel tank."""
    TANK_TEMP = 535
    """The fuel tank temperature."""
    FUEL_DENSITY = 536
    """The density of the fuel tank."""
    FUEL_MASS = 537
    """The mass of the spacecraft propellant."""
    MAX_FUEL_MASS = 538
    """Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."""

CONTROL_LAUNCH.EPOCH.__doc__ = "The date and time of the launch."
CONTROL_LAUNCH.GEODETIC_LAT.__doc__ = "The geodetic latitude of the launch location."
CONTROL_LAUNCH.GEODETIC_LON.__doc__ = "The geodetic longitude of the launch location."
CONTROL_LAUNCH.GEODETIC_ALTITUDE.__doc__ = "The geodetic altitude of the launch location."
CONTROL_LAUNCH.GEOCENTRIC_LAT.__doc__ = "The geocentric latitude of the launch location."
CONTROL_LAUNCH.GEOCENTRIC_LON.__doc__ = "The geocentric longitude of the launch location."
CONTROL_LAUNCH.GEOCENTRIC_RAD.__doc__ = "The geocentric radius of the launch location."
CONTROL_LAUNCH.TIME_OF_FLIGHT.__doc__ = "The time of flight, from launch until burnout."
CONTROL_LAUNCH.BURNOUT_GEOCENTRIC_LAT.__doc__ = "The geocentric latitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_GEOCENTRIC_LON.__doc__ = "The geocentric longitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_GEOCENTRIC_RAD.__doc__ = "The geocentric radius of the burnout point."
CONTROL_LAUNCH.BURNOUT_GEODETIC_LAT.__doc__ = "The geodetic latitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_GEODETIC_LON.__doc__ = "The geodetic longitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_GEODETIC_ALTITUDE.__doc__ = "The geodetic altitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_AZ_ALTITUDE_AZ.__doc__ = "The geodetic azimuth of the launch trajectory."
CONTROL_LAUNCH.BURNOUT_AZ_ALTITUDE_DOWNRANGE_DIST.__doc__ = "The geodetic downrange distance of the burnout point."
CONTROL_LAUNCH.BURNOUT_AZ_ALTITUDE_ALTITUDE.__doc__ = "The geodetic altitude of the burnout point."
CONTROL_LAUNCH.BURNOUT_AZ_RAD_AZ.__doc__ = "The geocentric azimuth of the launch trajectory."
CONTROL_LAUNCH.BURNOUT_AZ_RAD_DOWNRANGE_DIST.__doc__ = "The geocentric downrange distance of the burnout point."
CONTROL_LAUNCH.BURNOUT_AZ_RAD_RAD.__doc__ = "The geocentric radius of the burnout point."
CONTROL_LAUNCH.BURNOUT_FIXED_VELOCITY.__doc__ = "The burnout velocity in the fixed frame."
CONTROL_LAUNCH.BURNOUT_INERTIAL_VELOCITY.__doc__ = "The burnout velocity in the inertial frame."
CONTROL_LAUNCH.BURNOUT_INERTIAL_VELOCITY_AZIMUTH.__doc__ = "Inertial Velocity Azimuth - the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed."
CONTROL_LAUNCH.BURNOUT_INERTIAL_HORIZONTAL_FPA.__doc__ = "Inertial Horizontal FPA - the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle."
CONTROL_LAUNCH.DRY_MASS.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant."
CONTROL_LAUNCH.CD.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
CONTROL_LAUNCH.DRAG_AREA.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."
CONTROL_LAUNCH.CR.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_LAUNCH.SRP_AREA.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
CONTROL_LAUNCH.CK.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
CONTROL_LAUNCH.RADIATION_PRESSURE_AREA.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."
CONTROL_LAUNCH.K1.__doc__ = "GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value."
CONTROL_LAUNCH.K2.__doc__ = "GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (scale) value."
CONTROL_LAUNCH.TANK_PRESSURE.__doc__ = "The fuel tank pressure."
CONTROL_LAUNCH.TANK_VOLUME.__doc__ = "The volume of the fuel tank."
CONTROL_LAUNCH.TANK_TEMP.__doc__ = "The fuel tank temperature."
CONTROL_LAUNCH.FUEL_DENSITY.__doc__ = "The density of the fuel tank."
CONTROL_LAUNCH.FUEL_MASS.__doc__ = "The mass of the spacecraft propellant."
CONTROL_LAUNCH.MAX_FUEL_MASS.__doc__ = "Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences."

agcls.AgTypeNameMap["CONTROL_LAUNCH"] = CONTROL_LAUNCH

class CONTROL_ADVANCED(IntEnum):
    """Propagate segment properties that can be selected as control parameters for a Target Sequence."""
    PROPAGATE_MAX_PROP_TIME = 600
    """The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied."""
    PROPAGATE_MIN_PROP_TIME = 601
    """The minimum propagation time - minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction."""

CONTROL_ADVANCED.PROPAGATE_MAX_PROP_TIME.__doc__ = "The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied."
CONTROL_ADVANCED.PROPAGATE_MIN_PROP_TIME.__doc__ = "The minimum propagation time - minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction."

agcls.AgTypeNameMap["CONTROL_ADVANCED"] = CONTROL_ADVANCED

class TARGET_SEQ_ACTION(IntEnum):
    """Action options for Target Sequence profiles."""
    RUN_NOMINAL_SEQ = 0
    """Run Nominal Sequence - runs the mission control sequence."""
    RUN_ACTIVE_PROFILES = 1
    """Run Active Profiles - runs the mission control sequence allowing the active profiles to operate."""
    RUN_ACTIVE_PROFILES_ONCE = 2
    """Run Active Profiles Once - runs the profile with corrections applied to control parameters."""

TARGET_SEQ_ACTION.RUN_NOMINAL_SEQ.__doc__ = "Run Nominal Sequence - runs the mission control sequence."
TARGET_SEQ_ACTION.RUN_ACTIVE_PROFILES.__doc__ = "Run Active Profiles - runs the mission control sequence allowing the active profiles to operate."
TARGET_SEQ_ACTION.RUN_ACTIVE_PROFILES_ONCE.__doc__ = "Run Active Profiles Once - runs the profile with corrections applied to control parameters."

agcls.AgTypeNameMap["TARGET_SEQ_ACTION"] = TARGET_SEQ_ACTION

class PROFILES_FINISH(IntEnum):
    """Action options for Target Sequence profiles convergence."""
    RUN_TO_RETURN_AND_CONTINUE = 0
    """Run To Return And Continue - run to the first Return segment in the sequence, then pass control to the next segment after this target sequence. Often, the only Return is at the end of the target sequence."""
    RUN_TO_RETURN_AND_STOP = 1
    """Run To Return And Stop - run the target sequence to the first Return segment, and then stop running the MCS altogether."""
    STOP = 2
    """Stop - stop the MCS as soon as the target sequence has converged."""

PROFILES_FINISH.RUN_TO_RETURN_AND_CONTINUE.__doc__ = "Run To Return And Continue - run to the first Return segment in the sequence, then pass control to the next segment after this target sequence. Often, the only Return is at the end of the target sequence."
PROFILES_FINISH.RUN_TO_RETURN_AND_STOP.__doc__ = "Run To Return And Stop - run the target sequence to the first Return segment, and then stop running the MCS altogether."
PROFILES_FINISH.STOP.__doc__ = "Stop - stop the MCS as soon as the target sequence has converged."

agcls.AgTypeNameMap["PROFILES_FINISH"] = PROFILES_FINISH

class UPDATE_PARAM(IntEnum):
    """Spacecraft parameters that can be modified by an Update segment."""
    DRAG_AREA = 0
    """Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."""
    SRP_AREA = 1
    """Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."""
    DRY_MASS = 2
    """Dry Mass - the mass of the spacecraft exclusive of propellant."""
    FUEL_MASS = 3
    """The mass of the spacecraft propellant."""
    FUEL_DENSITY = 4
    """The density of the fuel tank."""
    TANK_PRESSURE = 5
    """The fuel tank pressure."""
    TANK_TEMP = 6
    """The temperature of the fuel tank."""
    CR = 7
    """Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    CD = 8
    """Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."""
    CK = 9
    """Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."""
    RADIATION_PRESSURE_AREA = 10
    """Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."""

UPDATE_PARAM.DRAG_AREA.__doc__ = "Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations."
UPDATE_PARAM.SRP_AREA.__doc__ = "Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations."
UPDATE_PARAM.DRY_MASS.__doc__ = "Dry Mass - the mass of the spacecraft exclusive of propellant."
UPDATE_PARAM.FUEL_MASS.__doc__ = "The mass of the spacecraft propellant."
UPDATE_PARAM.FUEL_DENSITY.__doc__ = "The density of the fuel tank."
UPDATE_PARAM.TANK_PRESSURE.__doc__ = "The fuel tank pressure."
UPDATE_PARAM.TANK_TEMP.__doc__ = "The temperature of the fuel tank."
UPDATE_PARAM.CR.__doc__ = "Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
UPDATE_PARAM.CD.__doc__ = "Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area."
UPDATE_PARAM.CK.__doc__ = "Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all."
UPDATE_PARAM.RADIATION_PRESSURE_AREA.__doc__ = "Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations."

agcls.AgTypeNameMap["UPDATE_PARAM"] = UPDATE_PARAM

class UPDATE_ACTION(IntEnum):
    """Actions for the Update segment."""
    NO_CHANGE = 0
    """No change in value - leave the current value for this parameter unchanged (ignoring any quantity that may appear in the Value column)."""
    ADD_VALUE = 1
    """Add value - add the quantity entered in the Value column to the current value for this parameter."""
    SUBTRACT_VALUE = 2
    """Subtract value - subtract the quantity entered in the Value column from the current value for this parameter."""
    SET_TO_NEW_VALUE = 3
    """Set to new value - replace the current value for this parameter with the quantity entered in the Value column."""

UPDATE_ACTION.NO_CHANGE.__doc__ = "No change in value - leave the current value for this parameter unchanged (ignoring any quantity that may appear in the Value column)."
UPDATE_ACTION.ADD_VALUE.__doc__ = "Add value - add the quantity entered in the Value column to the current value for this parameter."
UPDATE_ACTION.SUBTRACT_VALUE.__doc__ = "Subtract value - subtract the quantity entered in the Value column from the current value for this parameter."
UPDATE_ACTION.SET_TO_NEW_VALUE.__doc__ = "Set to new value - replace the current value for this parameter with the quantity entered in the Value column."

agcls.AgTypeNameMap["UPDATE_ACTION"] = UPDATE_ACTION

class PRESSURE_MODE(IntEnum):
    """Pressure Mode options."""
    BLOW_DOWN = 0
    """Blow-Down - pressure decreases as propellant is consumed and the volume occupied by the pressurant gas consequently increases. This is based on the ideal gas law."""
    PRESSURE_REGULATED = 1
    """Pressure-Regulated - constant pressure is maintained in the fuel tank through some pressurization mechanism as the propellant mass decreases."""

PRESSURE_MODE.BLOW_DOWN.__doc__ = "Blow-Down - pressure decreases as propellant is consumed and the volume occupied by the pressurant gas consequently increases. This is based on the ideal gas law."
PRESSURE_MODE.PRESSURE_REGULATED.__doc__ = "Pressure-Regulated - constant pressure is maintained in the fuel tank through some pressurization mechanism as the propellant mass decreases."

agcls.AgTypeNameMap["PRESSURE_MODE"] = PRESSURE_MODE

class THRUST_TYPE(IntEnum):
    """Thrust options."""
    AFFECTS_ACCEL_AND_MASS_FLOW = 0
    """Affects Acceleration and Mass Flow Calculations - may represent an inefficiency in the propulsion tanks and feed lines."""
    AFFECTS_ACCEL_ONLY = 1
    """Affects Acceleration Only - an efficiency of 0.98 means that only 98% of the fuel will be spent to get 98% thrust. For example, a thrust efficiency affecting acceleration only may represent some problem in the combustion chamber."""

THRUST_TYPE.AFFECTS_ACCEL_AND_MASS_FLOW.__doc__ = "Affects Acceleration and Mass Flow Calculations - may represent an inefficiency in the propulsion tanks and feed lines."
THRUST_TYPE.AFFECTS_ACCEL_ONLY.__doc__ = "Affects Acceleration Only - an efficiency of 0.98 means that only 98% of the fuel will be spent to get 98% thrust. For example, a thrust efficiency affecting acceleration only may represent some problem in the combustion chamber."

agcls.AgTypeNameMap["THRUST_TYPE"] = THRUST_TYPE

class ATTITUDE_UPDATE(IntEnum):
    """Attitude Update."""
    DURING_BURN = 0
    """Update during burn - updated throughout the maneuver so as to maintain the required thrust direction. This forces the thrust vector to the specified direction at every instant throughout the burn."""
    INERTIAL_AT_IGNITION = 1
    """Inertial at ignition - specified by Attitude Control at ignition and remains the same throughout the maneuver. This fixes the thrust direction in the inertial direction calculated at the beginning of the burn and is used for inertially fixed spacecraft."""
    INERTIAL_AT_START = 2
    """Inertial at start - specified by Attitude Control at the beginning of the maneuver segment and remains the same throughout the maneuver."""

ATTITUDE_UPDATE.DURING_BURN.__doc__ = "Update during burn - updated throughout the maneuver so as to maintain the required thrust direction. This forces the thrust vector to the specified direction at every instant throughout the burn."
ATTITUDE_UPDATE.INERTIAL_AT_IGNITION.__doc__ = "Inertial at ignition - specified by Attitude Control at ignition and remains the same throughout the maneuver. This fixes the thrust direction in the inertial direction calculated at the beginning of the burn and is used for inertially fixed spacecraft."
ATTITUDE_UPDATE.INERTIAL_AT_START.__doc__ = "Inertial at start - specified by Attitude Control at the beginning of the maneuver segment and remains the same throughout the maneuver."

agcls.AgTypeNameMap["ATTITUDE_UPDATE"] = ATTITUDE_UPDATE

class PROPULSION_METHOD(IntEnum):
    """Propulsion method options."""
    ENGINE_MODEL = 0
    """Engine Model - can be used to quickly model the firing of a single engine."""
    THRUSTER_SET = 1
    """Thruster Set - used to fire multiple engines simultaneously, and to simulate off-pulsing or complex engine pointing."""

PROPULSION_METHOD.ENGINE_MODEL.__doc__ = "Engine Model - can be used to quickly model the firing of a single engine."
PROPULSION_METHOD.THRUSTER_SET.__doc__ = "Thruster Set - used to fire multiple engines simultaneously, and to simulate off-pulsing or complex engine pointing."

agcls.AgTypeNameMap["PROPULSION_METHOD"] = PROPULSION_METHOD

class CUSTOM_FUNCTION(IntEnum):
    """Attitude definition options for other STK functions."""
    ENABLE_PAGE_DEFINITION = 0
    """Use attitude page definition for other STK functions - the actual attitude during the maneuver is ignored and the satellite is considered to always be in the attitude specified by the page for all other calculations in STK."""
    ENABLE_MANEUVER_ATTITUDE = 1
    """Maneuver attitude will be used for the satellite during the time at the maneuver, and during the specified lead and trail times. This attitude will also show up in reports, graphs, sensor access calculations, and in the 3D Graphics window."""

CUSTOM_FUNCTION.ENABLE_PAGE_DEFINITION.__doc__ = "Use attitude page definition for other STK functions - the actual attitude during the maneuver is ignored and the satellite is considered to always be in the attitude specified by the page for all other calculations in STK."
CUSTOM_FUNCTION.ENABLE_MANEUVER_ATTITUDE.__doc__ = "Maneuver attitude will be used for the satellite during the time at the maneuver, and during the specified lead and trail times. This attitude will also show up in reports, graphs, sensor access calculations, and in the 3D Graphics window."

agcls.AgTypeNameMap["CUSTOM_FUNCTION"] = CUSTOM_FUNCTION

class BODY_AXIS(IntEnum):
    """Attitude body axis options."""
    PLUS_X = 0
    """The positive X engine acceleration direction."""
    PLUS_Y = 1
    """The positive Y engine acceleration direction."""
    PLUS_Z = 2
    """The positive Z engine acceleration direction."""
    MINUS_X = 3
    """The negative X engine acceleration direction."""
    MINUS_Y = 4
    """The negative Y engine acceleration direction."""
    MINUS_Z = 5
    """The negative Z engine acceleration direction."""

BODY_AXIS.PLUS_X.__doc__ = "The positive X engine acceleration direction."
BODY_AXIS.PLUS_Y.__doc__ = "The positive Y engine acceleration direction."
BODY_AXIS.PLUS_Z.__doc__ = "The positive Z engine acceleration direction."
BODY_AXIS.MINUS_X.__doc__ = "The negative X engine acceleration direction."
BODY_AXIS.MINUS_Y.__doc__ = "The negative Y engine acceleration direction."
BODY_AXIS.MINUS_Z.__doc__ = "The negative Z engine acceleration direction."

agcls.AgTypeNameMap["BODY_AXIS"] = BODY_AXIS

class CONSTRAINT_SIGN(IntEnum):
    """Constraint vector sign options."""
    PLUS = 0
    """Positive."""
    MINUS = 1
    """Negative."""

CONSTRAINT_SIGN.PLUS.__doc__ = "Positive."
CONSTRAINT_SIGN.MINUS.__doc__ = "Negative."

agcls.AgTypeNameMap["CONSTRAINT_SIGN"] = CONSTRAINT_SIGN

class ATTITUDE_CONTROL(IntEnum):
    """Attitude Control options."""
    VELOCITY_VECTOR = 0
    """Along Velocity Vector (impulsive/finite) - the total thrust vector is aligned with the spacecraft's velocity vector."""
    ANTI_VELOCITY_VECTOR = 1
    """Anti-Velocity Vector (impulsive/finite) - the total thrust vector is opposite to the spacecraft's velocity vector."""
    ATTITUDE = 2
    """Attitude (impulsive/finite) - the thrust vector direction is defined using Euler Angles or a Quaternion. """
    FILE = 3
    """File (impulsive/finite) - uses an attitude file to set the thrust vector direction."""
    THRUST_VECTOR = 4
    """Thrust Vector (impulsive/finite) - the total thrust vector is explicitly specified in Cartesian or spherical form with respect to the thrust axes."""
    PLUGIN = 5
    """Plugin (finite) - thrust vector direction is defined using a COM plugin."""
    TIME_VARYING = 6
    """Time Varying (finite) - polynomial and sine representations for the azimuth and elevation of the thrust vector."""
    LAGRANGE_INTERPOLATION = 7
    """Lagrange Interpolation (optimal finite, always set) - supports the 'Run current nodes' execution mode of the Optimal Finite Maneuver."""

ATTITUDE_CONTROL.VELOCITY_VECTOR.__doc__ = "Along Velocity Vector (impulsive/finite) - the total thrust vector is aligned with the spacecraft's velocity vector."
ATTITUDE_CONTROL.ANTI_VELOCITY_VECTOR.__doc__ = "Anti-Velocity Vector (impulsive/finite) - the total thrust vector is opposite to the spacecraft's velocity vector."
ATTITUDE_CONTROL.ATTITUDE.__doc__ = "Attitude (impulsive/finite) - the thrust vector direction is defined using Euler Angles or a Quaternion. "
ATTITUDE_CONTROL.FILE.__doc__ = "File (impulsive/finite) - uses an attitude file to set the thrust vector direction."
ATTITUDE_CONTROL.THRUST_VECTOR.__doc__ = "Thrust Vector (impulsive/finite) - the total thrust vector is explicitly specified in Cartesian or spherical form with respect to the thrust axes."
ATTITUDE_CONTROL.PLUGIN.__doc__ = "Plugin (finite) - thrust vector direction is defined using a COM plugin."
ATTITUDE_CONTROL.TIME_VARYING.__doc__ = "Time Varying (finite) - polynomial and sine representations for the azimuth and elevation of the thrust vector."
ATTITUDE_CONTROL.LAGRANGE_INTERPOLATION.__doc__ = "Lagrange Interpolation (optimal finite, always set) - supports the 'Run current nodes' execution mode of the Optimal Finite Maneuver."

agcls.AgTypeNameMap["ATTITUDE_CONTROL"] = ATTITUDE_CONTROL

class FOLLOW_JOIN(IntEnum):
    """Joining options for the Follow segment."""
    SPECIFY = 0
    """Specify Joining Conditions - specify joining conditions to define when the spacecraft will begin to follow the leader. Joining conditions will become apparent on a new tab - Joining."""
    AT_BEGINNING = 1
    """Join at Beginning of Leader's Ephemeris - the spacecraft will follow the leader from the beginning of the leader's ephemeris."""
    AT_END = 2
    """Join at End of Leader's Ephemeris - the spacecraft will use the leader's final ephemeris point as the initial and final state of the Follow segment; the separation parameter will automatically be set to 'Separate at End of Leader's Ephemeris'."""
    AT_FINAL_EPOCH_OF_PREVIOUS_SEG = 3
    """Join at Final Epoch of Previous Segment - the spacecraft will follow the leader from the final epoch at the end of the previous segment."""

FOLLOW_JOIN.SPECIFY.__doc__ = "Specify Joining Conditions - specify joining conditions to define when the spacecraft will begin to follow the leader. Joining conditions will become apparent on a new tab - Joining."
FOLLOW_JOIN.AT_BEGINNING.__doc__ = "Join at Beginning of Leader's Ephemeris - the spacecraft will follow the leader from the beginning of the leader's ephemeris."
FOLLOW_JOIN.AT_END.__doc__ = "Join at End of Leader's Ephemeris - the spacecraft will use the leader's final ephemeris point as the initial and final state of the Follow segment; the separation parameter will automatically be set to 'Separate at End of Leader's Ephemeris'."
FOLLOW_JOIN.AT_FINAL_EPOCH_OF_PREVIOUS_SEG.__doc__ = "Join at Final Epoch of Previous Segment - the spacecraft will follow the leader from the final epoch at the end of the previous segment."

agcls.AgTypeNameMap["FOLLOW_JOIN"] = FOLLOW_JOIN

class FOLLOW_SEPARATION(IntEnum):
    """Separation options for the Follow segment."""
    SPECIFY = 0
    """Specify Separation Conditions - specify separation conditions to define when the spacecraft will stop following the leader. Separation conditions will become apparent on a new tab - Separation."""
    AT_END_OF_LEADERS_EPHEM = 1
    """Separate at End of Leader's Ephemeris - the spacecraft will follow the leader to the end of the leader's ephemeris and then separate."""

FOLLOW_SEPARATION.SPECIFY.__doc__ = "Specify Separation Conditions - specify separation conditions to define when the spacecraft will stop following the leader. Separation conditions will become apparent on a new tab - Separation."
FOLLOW_SEPARATION.AT_END_OF_LEADERS_EPHEM.__doc__ = "Separate at End of Leader's Ephemeris - the spacecraft will follow the leader to the end of the leader's ephemeris and then separate."

agcls.AgTypeNameMap["FOLLOW_SEPARATION"] = FOLLOW_SEPARATION

class FOLLOW_SPACECRAFT_AND_FUEL_TANK(IntEnum):
    """Spacecraft parameter options for the Follow segment."""
    SPECIFY = 0
    """Specify Spacecraft Configuration - manually define the spacecraft for this segment. Spacecraft physical parameters will become apparent on new tabs - Spacecraft Parameters and Fuel Tank."""
    INHERIT = 1
    """Inherit Spacecraft Configuration From Previous Segment - the spacecraft will be defined by its configuration at the end of the previous segment. The configuration will not be changed by the Follow segment."""
    LEADER = 2
    """Inherit Spacecraft Configuration From Leader - if leader is an Astrogator satellite, configuration will be defined by the leader's configuration."""

FOLLOW_SPACECRAFT_AND_FUEL_TANK.SPECIFY.__doc__ = "Specify Spacecraft Configuration - manually define the spacecraft for this segment. Spacecraft physical parameters will become apparent on new tabs - Spacecraft Parameters and Fuel Tank."
FOLLOW_SPACECRAFT_AND_FUEL_TANK.INHERIT.__doc__ = "Inherit Spacecraft Configuration From Previous Segment - the spacecraft will be defined by its configuration at the end of the previous segment. The configuration will not be changed by the Follow segment."
FOLLOW_SPACECRAFT_AND_FUEL_TANK.LEADER.__doc__ = "Inherit Spacecraft Configuration From Leader - if leader is an Astrogator satellite, configuration will be defined by the leader's configuration."

agcls.AgTypeNameMap["FOLLOW_SPACECRAFT_AND_FUEL_TANK"] = FOLLOW_SPACECRAFT_AND_FUEL_TANK

class BURNOUT_OPTIONS(IntEnum):
    """Burnout options for the Launch segment."""
    FIXED_VELOCITY = 0
    """Use Fixed Velocity - the inclination of the final state of the launch segment is determined by the arc between the launch and insertion positions, and the horizontal flight path angle is set to zero."""
    INERTIAL_VELOCITY = 1
    """Use Inertial Velocity - the final state of the launch segment is solely and completely determined by the burnout position and velocity."""

BURNOUT_OPTIONS.FIXED_VELOCITY.__doc__ = "Use Fixed Velocity - the inclination of the final state of the launch segment is determined by the arc between the launch and insertion positions, and the horizontal flight path angle is set to zero."
BURNOUT_OPTIONS.INERTIAL_VELOCITY.__doc__ = "Use Inertial Velocity - the final state of the launch segment is solely and completely determined by the burnout position and velocity."

agcls.AgTypeNameMap["BURNOUT_OPTIONS"] = BURNOUT_OPTIONS

class BURNOUT_TYPE(IntEnum):
    """Burnout point definition types for the Launch segment."""
    GEOCENTRIC = 0
    """Geocentric (Planetocentric) - the burnout point is measured from the center of mass of the Earth or other central body."""
    GEODETIC = 1
    """Geodetic (Planetodetic) - the burnout point is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."""
    LAUNCH_AZ_RAD = 2
    """Launch Az / Radius - the burnout point is defined in reference to distance downrange along an azimuth, measured from the center of mass of the Earth or other central body."""
    LAUNCH_AZ_ALTITUDE = 3
    """Launch Az / Alt - the burnout point is defined in reference to distance downrange along an azimuth, measured from the surface of the Earth or other central body."""
    CBF_CARTESIAN = 4
    """Central Body Fixed Cartesian - the burnout state is specified in the central-body-fixed Cartesian coordinate system."""

BURNOUT_TYPE.GEOCENTRIC.__doc__ = "Geocentric (Planetocentric) - the burnout point is measured from the center of mass of the Earth or other central body."
BURNOUT_TYPE.GEODETIC.__doc__ = "Geodetic (Planetodetic) - the burnout point is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."
BURNOUT_TYPE.LAUNCH_AZ_RAD.__doc__ = "Launch Az / Radius - the burnout point is defined in reference to distance downrange along an azimuth, measured from the center of mass of the Earth or other central body."
BURNOUT_TYPE.LAUNCH_AZ_ALTITUDE.__doc__ = "Launch Az / Alt - the burnout point is defined in reference to distance downrange along an azimuth, measured from the surface of the Earth or other central body."
BURNOUT_TYPE.CBF_CARTESIAN.__doc__ = "Central Body Fixed Cartesian - the burnout state is specified in the central-body-fixed Cartesian coordinate system."

agcls.AgTypeNameMap["BURNOUT_TYPE"] = BURNOUT_TYPE

class ASCENT_TYPE(IntEnum):
    """Ascent types for the Launch segment."""
    ELLIPSE_CUBIC_MOTION = 0
    """Ellipse: Cubic Motion - the motion is computed on the basis of given positions and velocities."""
    ELLIPSE_QUARTIC_MOTION = 1
    """Ellipse: Quartic Motion - the motion is computed on the basis of given positions and velocities and initial acceleration."""

ASCENT_TYPE.ELLIPSE_CUBIC_MOTION.__doc__ = "Ellipse: Cubic Motion - the motion is computed on the basis of given positions and velocities."
ASCENT_TYPE.ELLIPSE_QUARTIC_MOTION.__doc__ = "Ellipse: Quartic Motion - the motion is computed on the basis of given positions and velocities and initial acceleration."

agcls.AgTypeNameMap["ASCENT_TYPE"] = ASCENT_TYPE

class LAUNCH_DISPLAY_SYSTEM(IntEnum):
    """Launch location coordinate types for the Launch segment."""
    DISPLAY_SYSTEM_GEODETIC = 0
    """Geocentric (Planetocentric) - the location is measured from the center of mass of the Earth or other central body."""
    DISPLAY_SYSTEM_GEOCENTRIC = 1
    """Geodetic (Planetodetic) - the location is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."""

LAUNCH_DISPLAY_SYSTEM.DISPLAY_SYSTEM_GEODETIC.__doc__ = "Geocentric (Planetocentric) - the location is measured from the center of mass of the Earth or other central body."
LAUNCH_DISPLAY_SYSTEM.DISPLAY_SYSTEM_GEOCENTRIC.__doc__ = "Geodetic (Planetodetic) - the location is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body)."

agcls.AgTypeNameMap["LAUNCH_DISPLAY_SYSTEM"] = LAUNCH_DISPLAY_SYSTEM

class RUN_CODE(IntEnum):
    """The run code returned after the MCS is run."""
    MARCHING = 0
    """Marching - a segment has run successfully."""
    PROFILE_FAILURE = 1
    """Profile Failure - a search profile failed to converge."""
    ERROR = 2
    """Error - encountered an error."""
    STOPPED = 3
    """Stopped - encountered a stop segment."""
    RETURNED = 4
    """Returned - encountered a return segment."""
    CANCELLED = 5
    """Cancelled - cancelled by user."""
    HIT_GLOBAL_STOP = 6
    """Global Stop - hit a global stopping condition."""

RUN_CODE.MARCHING.__doc__ = "Marching - a segment has run successfully."
RUN_CODE.PROFILE_FAILURE.__doc__ = "Profile Failure - a search profile failed to converge."
RUN_CODE.ERROR.__doc__ = "Error - encountered an error."
RUN_CODE.STOPPED.__doc__ = "Stopped - encountered a stop segment."
RUN_CODE.RETURNED.__doc__ = "Returned - encountered a return segment."
RUN_CODE.CANCELLED.__doc__ = "Cancelled - cancelled by user."
RUN_CODE.HIT_GLOBAL_STOP.__doc__ = "Global Stop - hit a global stopping condition."

agcls.AgTypeNameMap["RUN_CODE"] = RUN_CODE

class SEQUENCE_STATE_TO_PASS(IntEnum):
    """State To Pass options for the Sequence segment."""
    INITIAL = 0
    """The initial state of the sequence."""
    FINAL = 1
    """The final state of the sequence."""

SEQUENCE_STATE_TO_PASS.INITIAL.__doc__ = "The initial state of the sequence."
SEQUENCE_STATE_TO_PASS.FINAL.__doc__ = "The final state of the sequence."

agcls.AgTypeNameMap["SEQUENCE_STATE_TO_PASS"] = SEQUENCE_STATE_TO_PASS

class MANEUVER_TYPE(IntEnum):
    """Maneuver types for the maneuver segment."""
    IMPULSIVE = 0
    """Impulsive - calculates a state by adding the defined delta-V vector to the velocity of the final state of the previous segment, adds this new state to the ephemeris, and passes it to the next segment."""
    FINITE = 1
    """Finite - effectively a Propagate segment with thrust. Like Propagate segments, each point calculated by the propagator is added to the ephemeris, and propagation continues until a stopping condition is met."""
    OPTIMAL_FINITE = 2
    """Optimal Finite"""

MANEUVER_TYPE.IMPULSIVE.__doc__ = "Impulsive - calculates a state by adding the defined delta-V vector to the velocity of the final state of the previous segment, adds this new state to the ephemeris, and passes it to the next segment."
MANEUVER_TYPE.FINITE.__doc__ = "Finite - effectively a Propagate segment with thrust. Like Propagate segments, each point calculated by the propagator is added to the ephemeris, and propagation continues until a stopping condition is met."
MANEUVER_TYPE.OPTIMAL_FINITE.__doc__ = "Optimal Finite"

agcls.AgTypeNameMap["MANEUVER_TYPE"] = MANEUVER_TYPE

class SEGMENT_TYPE(IntEnum):
    """Segment types."""
    INITIAL_STATE = 0
    """Initial State - can be used to define the initial conditions of your MCS, or of a subsequence within the MCS."""
    LAUNCH = 1
    """Launch - can be used to model a simple spacecraft launch from Earth or another central body."""
    MANEUVER = 2
    """Maneuver - can be used to model a spacecraft maneuver."""
    FOLLOW = 3
    """Follow - can be used to set the spacecraft to follow another vehicle (Satellite, Launch Vehicle, Missile, Aircraft, Ship, or Ground Vehicle) at a specified offset, and to separate from that vehicle upon meeting specified conditions."""
    HOLD = 4
    """Hold - can be used to model landing or rendezvous operations by setting the spacecraft to maintain a fixed position in reference to another object or body, until meeting specified conditions."""
    PROPAGATE = 5
    """Propagate - can be used to model the movement of the spacecraft along its current trajectory until meeting specified stopping conditions."""
    SEQUENCE = 6
    """Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."""
    RETURN = 7
    """Return - can be used to control the execution of the Mission Control Sequence by returning control to its parent segment."""
    TARGET_SEQUENCE = 8
    """Target Sequence - can be used to define maneuvers and propagations in terms of the goals they are intended to achieve."""
    STOP = 9
    """Stop - can be used to control the execution of the Mission Control Sequence by halting execution of the MCS."""
    UPDATE = 10
    """Update - can be used to modify some of the satellite properties to reflect changes that occur during the mission."""
    BACKWARD_SEQUENCE = 11
    """Backward Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."""
    END = 12
    """End - The End segment is a default segment of the MCS that functions similarly to a Return segment; it returns control to the beginning of the MCS. The End segment cannot be disabled or deleted, nor can any segments be inserted into the MCS after it."""

SEGMENT_TYPE.INITIAL_STATE.__doc__ = "Initial State - can be used to define the initial conditions of your MCS, or of a subsequence within the MCS."
SEGMENT_TYPE.LAUNCH.__doc__ = "Launch - can be used to model a simple spacecraft launch from Earth or another central body."
SEGMENT_TYPE.MANEUVER.__doc__ = "Maneuver - can be used to model a spacecraft maneuver."
SEGMENT_TYPE.FOLLOW.__doc__ = "Follow - can be used to set the spacecraft to follow another vehicle (Satellite, Launch Vehicle, Missile, Aircraft, Ship, or Ground Vehicle) at a specified offset, and to separate from that vehicle upon meeting specified conditions."
SEGMENT_TYPE.HOLD.__doc__ = "Hold - can be used to model landing or rendezvous operations by setting the spacecraft to maintain a fixed position in reference to another object or body, until meeting specified conditions."
SEGMENT_TYPE.PROPAGATE.__doc__ = "Propagate - can be used to model the movement of the spacecraft along its current trajectory until meeting specified stopping conditions."
SEGMENT_TYPE.SEQUENCE.__doc__ = "Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."
SEGMENT_TYPE.RETURN.__doc__ = "Return - can be used to control the execution of the Mission Control Sequence by returning control to its parent segment."
SEGMENT_TYPE.TARGET_SEQUENCE.__doc__ = "Target Sequence - can be used to define maneuvers and propagations in terms of the goals they are intended to achieve."
SEGMENT_TYPE.STOP.__doc__ = "Stop - can be used to control the execution of the Mission Control Sequence by halting execution of the MCS."
SEGMENT_TYPE.UPDATE.__doc__ = "Update - can be used to modify some of the satellite properties to reflect changes that occur during the mission."
SEGMENT_TYPE.BACKWARD_SEQUENCE.__doc__ = "Backward Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS."
SEGMENT_TYPE.END.__doc__ = "End - The End segment is a default segment of the MCS that functions similarly to a Return segment; it returns control to the beginning of the MCS. The End segment cannot be disabled or deleted, nor can any segments be inserted into the MCS after it."

agcls.AgTypeNameMap["SEGMENT_TYPE"] = SEGMENT_TYPE

class ELEMENT_TYPE(IntEnum):
    """Types of orbit element sets."""
    CARTESIAN = 0
    """Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."""
    KEPLERIAN = 1
    """Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."""
    SPHERICAL = 3
    """Spherical - a system in which positions are specified as a radial distance from the origin and two angles relative to a fundamental plane."""
    TARGET_VECTOR_INCOMING_ASYMPTOTE = 4
    """Target Vector Incoming Asymptote - used for hyperbolic arrival trajectories."""
    TARGET_VECTOR_OUTGOING_ASYMPTOTE = 5
    """Target Vector Outgoing Asymptote - used for hyperbolic departure trajectories."""
    MIXED_SPHERICAL = 6
    """Mixed Spherical."""
    DELAUNAY = 7
    """Delaunay."""
    EQUINOCTIAL = 8
    """Equinoctial."""
    GEODETIC = 9
    """Geodetic."""
    B_PLANE = 10
    """BPlane."""

ELEMENT_TYPE.CARTESIAN.__doc__ = "Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."
ELEMENT_TYPE.KEPLERIAN.__doc__ = "Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."
ELEMENT_TYPE.SPHERICAL.__doc__ = "Spherical - a system in which positions are specified as a radial distance from the origin and two angles relative to a fundamental plane."
ELEMENT_TYPE.TARGET_VECTOR_INCOMING_ASYMPTOTE.__doc__ = "Target Vector Incoming Asymptote - used for hyperbolic arrival trajectories."
ELEMENT_TYPE.TARGET_VECTOR_OUTGOING_ASYMPTOTE.__doc__ = "Target Vector Outgoing Asymptote - used for hyperbolic departure trajectories."
ELEMENT_TYPE.MIXED_SPHERICAL.__doc__ = "Mixed Spherical."
ELEMENT_TYPE.DELAUNAY.__doc__ = "Delaunay."
ELEMENT_TYPE.EQUINOCTIAL.__doc__ = "Equinoctial."
ELEMENT_TYPE.GEODETIC.__doc__ = "Geodetic."
ELEMENT_TYPE.B_PLANE.__doc__ = "BPlane."

agcls.AgTypeNameMap["ELEMENT_TYPE"] = ELEMENT_TYPE

class LANGUAGE(IntEnum):
    """Scripting language types for the Scripting Tool."""
    VB_SCRIPT = 0
    """VBScript."""
    J_SCRIPT = 1
    """JScript."""
    MATLAB = 2
    """MATLAB."""

LANGUAGE.VB_SCRIPT.__doc__ = "VBScript."
LANGUAGE.J_SCRIPT.__doc__ = "JScript."
LANGUAGE.MATLAB.__doc__ = "MATLAB."

agcls.AgTypeNameMap["LANGUAGE"] = LANGUAGE

class STOPPING_CONDITION(IntEnum):
    """Type of stopping condition."""
    BASIC = 0
    """Basic Stopping Condition."""
    BEFORE = 1
    """Before Stopping Condition."""
    ONE_POINT_ACCESS = 2
    """One Point Access Stopping Condition."""
    LIGHTING = 3
    """Lighting Stopping Condition."""

STOPPING_CONDITION.BASIC.__doc__ = "Basic Stopping Condition."
STOPPING_CONDITION.BEFORE.__doc__ = "Before Stopping Condition."
STOPPING_CONDITION.ONE_POINT_ACCESS.__doc__ = "One Point Access Stopping Condition."
STOPPING_CONDITION.LIGHTING.__doc__ = "Lighting Stopping Condition."

agcls.AgTypeNameMap["STOPPING_CONDITION"] = STOPPING_CONDITION

class CLEAR_EPHEMERIS_DIRECTION(IntEnum):
    """Direction in which to clear ephemeris."""
    BEFORE = -1
    """Clear ephemeris before selected time or state."""
    NO_CLEAR = 0
    """Do not clear ephemeris."""
    AFTER = 1
    """Clear ephemeris after selected time or state."""

CLEAR_EPHEMERIS_DIRECTION.BEFORE.__doc__ = "Clear ephemeris before selected time or state."
CLEAR_EPHEMERIS_DIRECTION.NO_CLEAR.__doc__ = "Do not clear ephemeris."
CLEAR_EPHEMERIS_DIRECTION.AFTER.__doc__ = "Clear ephemeris after selected time or state."

agcls.AgTypeNameMap["CLEAR_EPHEMERIS_DIRECTION"] = CLEAR_EPHEMERIS_DIRECTION

class PROFILE_INSERT_DIRECTION(IntEnum):
    """Direction to insert profile."""
    BEFORE = 0
    """Insert profile before reference profile."""
    AFTER = 1
    """Insert profile after reference profile."""

PROFILE_INSERT_DIRECTION.BEFORE.__doc__ = "Insert profile before reference profile."
PROFILE_INSERT_DIRECTION.AFTER.__doc__ = "Insert profile after reference profile."

agcls.AgTypeNameMap["PROFILE_INSERT_DIRECTION"] = PROFILE_INSERT_DIRECTION

class ROOT_FINDING_ALGORITHM(IntEnum):
    """Root-finding algorithms."""
    SECANT_METHOD = 0
    """Secant method."""
    NEWTON_RAPHSON_METHOD = 1
    """Newton-Raphson method."""

ROOT_FINDING_ALGORITHM.SECANT_METHOD.__doc__ = "Secant method."
ROOT_FINDING_ALGORITHM.NEWTON_RAPHSON_METHOD.__doc__ = "Newton-Raphson method."

agcls.AgTypeNameMap["ROOT_FINDING_ALGORITHM"] = ROOT_FINDING_ALGORITHM

class SCRIPTING_PARAMETER_TYPE(IntEnum):
    """Scripting Tool parameter type."""
    DOUBLE = 0
    """Double."""
    QUANTITY = 1
    """Quantity."""
    DATE = 2
    """Date."""
    STRING = 3
    """String."""
    BOOLEAN = 4
    """Boolean."""
    INTEGER = 5
    """Integer."""
    ENUMERATION = 6
    """Enumeration."""

SCRIPTING_PARAMETER_TYPE.DOUBLE.__doc__ = "Double."
SCRIPTING_PARAMETER_TYPE.QUANTITY.__doc__ = "Quantity."
SCRIPTING_PARAMETER_TYPE.DATE.__doc__ = "Date."
SCRIPTING_PARAMETER_TYPE.STRING.__doc__ = "String."
SCRIPTING_PARAMETER_TYPE.BOOLEAN.__doc__ = "Boolean."
SCRIPTING_PARAMETER_TYPE.INTEGER.__doc__ = "Integer."
SCRIPTING_PARAMETER_TYPE.ENUMERATION.__doc__ = "Enumeration."

agcls.AgTypeNameMap["SCRIPTING_PARAMETER_TYPE"] = SCRIPTING_PARAMETER_TYPE

class SNOPT_GOAL(IntEnum):
    """The Goal types for a SNOPT profile."""
    MINIMIZE = 0
    """Minimize"""
    BOUND = 1
    """Bound"""

SNOPT_GOAL.MINIMIZE.__doc__ = "Minimize"
SNOPT_GOAL.BOUND.__doc__ = "Bound"

agcls.AgTypeNameMap["SNOPT_GOAL"] = SNOPT_GOAL

class IPOPT_GOAL(IntEnum):
    """The Goal types for a IPOPT profile."""
    MINIMIZE = 0
    """Minimize"""
    BOUND = 1
    """Bound"""

IPOPT_GOAL.MINIMIZE.__doc__ = "Minimize"
IPOPT_GOAL.BOUND.__doc__ = "Bound"

agcls.AgTypeNameMap["IPOPT_GOAL"] = IPOPT_GOAL

class OPTIMAL_FINITE_SEED_METHOD(IntEnum):
    """Seed methods."""
    INITIAL_GUESS_FILE = 0
    """Seed initial guess from file."""
    FINITE_MANEUVER = 1
    """Seed initial guess from finite maneuver."""

OPTIMAL_FINITE_SEED_METHOD.INITIAL_GUESS_FILE.__doc__ = "Seed initial guess from file."
OPTIMAL_FINITE_SEED_METHOD.FINITE_MANEUVER.__doc__ = "Seed initial guess from finite maneuver."

agcls.AgTypeNameMap["OPTIMAL_FINITE_SEED_METHOD"] = OPTIMAL_FINITE_SEED_METHOD

class OPTIMAL_FINITE_RUN_MODE(IntEnum):
    """Run modes."""
    RUN_CURRENT_NODES = 0
    """Run current nodes."""
    OPTIMIZE_VIA_DIRECT_TRANSCRIPTION = 1
    """Optimize via direct transcription."""

OPTIMAL_FINITE_RUN_MODE.RUN_CURRENT_NODES.__doc__ = "Run current nodes."
OPTIMAL_FINITE_RUN_MODE.OPTIMIZE_VIA_DIRECT_TRANSCRIPTION.__doc__ = "Optimize via direct transcription."

agcls.AgTypeNameMap["OPTIMAL_FINITE_RUN_MODE"] = OPTIMAL_FINITE_RUN_MODE

class OPTIMAL_FINITE_DISCRETIZATION_STRATEGY(IntEnum):
    """Discretization Strategy."""
    LEGENDRE_GAUSS_LOBATTO = 0
    """The Legendre-Gauss-Lobatto quadrature rule"""
    LEGENDRE_GAUSS_RADAU = 1
    """The Legendre-Gauss-Radau quadrature rule."""

OPTIMAL_FINITE_DISCRETIZATION_STRATEGY.LEGENDRE_GAUSS_LOBATTO.__doc__ = "The Legendre-Gauss-Lobatto quadrature rule"
OPTIMAL_FINITE_DISCRETIZATION_STRATEGY.LEGENDRE_GAUSS_RADAU.__doc__ = "The Legendre-Gauss-Radau quadrature rule."

agcls.AgTypeNameMap["OPTIMAL_FINITE_DISCRETIZATION_STRATEGY"] = OPTIMAL_FINITE_DISCRETIZATION_STRATEGY

class OPTIMAL_FINITE_WORKING_VARIABLES(IntEnum):
    """Working Variables."""
    EQUINOCTIAL = 0
    """Standard inertial equinoctial coordinates."""
    MODIFIED_EQUINOCTIAL = 1
    """Use semi-latus rectum instead of SMA and true longitude instead of mean longitude."""

OPTIMAL_FINITE_WORKING_VARIABLES.EQUINOCTIAL.__doc__ = "Standard inertial equinoctial coordinates."
OPTIMAL_FINITE_WORKING_VARIABLES.MODIFIED_EQUINOCTIAL.__doc__ = "Use semi-latus rectum instead of SMA and true longitude instead of mean longitude."

agcls.AgTypeNameMap["OPTIMAL_FINITE_WORKING_VARIABLES"] = OPTIMAL_FINITE_WORKING_VARIABLES

class OPTIMAL_FINITE_SCALING_OPTIONS(IntEnum):
    """Scaling Options."""
    NO_SCALING = 0
    """No scaling."""
    CANONICAL_UNITS = 1
    """Scale based on canonical units."""
    INITIAL_STATE_BASED = 2
    """Scale based on the initial state."""

OPTIMAL_FINITE_SCALING_OPTIONS.NO_SCALING.__doc__ = "No scaling."
OPTIMAL_FINITE_SCALING_OPTIONS.CANONICAL_UNITS.__doc__ = "Scale based on canonical units."
OPTIMAL_FINITE_SCALING_OPTIONS.INITIAL_STATE_BASED.__doc__ = "Scale based on the initial state."

agcls.AgTypeNameMap["OPTIMAL_FINITE_SCALING_OPTIONS"] = OPTIMAL_FINITE_SCALING_OPTIONS

class OPTIMAL_FINITE_SNOPT_OBJECTIVE(IntEnum):
    """Optimal Finite SNOPT objective."""
    MINIMIZE_TOF = 0
    """Minimize the total TOF along the collocation arc."""
    MAXIMIZE_FINAL_RAD = 1
    """Minimize the total calculated DeltaV along the collocation arc."""
    MINIMIZE_PROPELLANT_USE = 2
    """Maximize the final mass after the collocation arc."""

OPTIMAL_FINITE_SNOPT_OBJECTIVE.MINIMIZE_TOF.__doc__ = "Minimize the total TOF along the collocation arc."
OPTIMAL_FINITE_SNOPT_OBJECTIVE.MAXIMIZE_FINAL_RAD.__doc__ = "Minimize the total calculated DeltaV along the collocation arc."
OPTIMAL_FINITE_SNOPT_OBJECTIVE.MINIMIZE_PROPELLANT_USE.__doc__ = "Maximize the final mass after the collocation arc."

agcls.AgTypeNameMap["OPTIMAL_FINITE_SNOPT_OBJECTIVE"] = OPTIMAL_FINITE_SNOPT_OBJECTIVE

class OPTIMAL_FINITE_SNOPT_SCALING(IntEnum):
    """Optimal Finite SNOPT scaling option."""
    NONE = 0
    """No scaling."""
    LINEAR = 1
    """Scale linear constraints and variables."""
    ALL = 2
    """Scale all constraints and variables."""

OPTIMAL_FINITE_SNOPT_SCALING.NONE.__doc__ = "No scaling."
OPTIMAL_FINITE_SNOPT_SCALING.LINEAR.__doc__ = "Scale linear constraints and variables."
OPTIMAL_FINITE_SNOPT_SCALING.ALL.__doc__ = "Scale all constraints and variables."

agcls.AgTypeNameMap["OPTIMAL_FINITE_SNOPT_SCALING"] = OPTIMAL_FINITE_SNOPT_SCALING

class OPTIMAL_FINITE_EXPORT_NODES_FORMAT(IntEnum):
    """Steering nodes export format."""
    AZIMUTH_ELEVATION = 0
    """Export controls as Az/El = Ra/Dec angles."""
    UNIT_VECTOR = 1
    """Export controls as unit vectors = direction cosines."""

OPTIMAL_FINITE_EXPORT_NODES_FORMAT.AZIMUTH_ELEVATION.__doc__ = "Export controls as Az/El = Ra/Dec angles."
OPTIMAL_FINITE_EXPORT_NODES_FORMAT.UNIT_VECTOR.__doc__ = "Export controls as unit vectors = direction cosines."

agcls.AgTypeNameMap["OPTIMAL_FINITE_EXPORT_NODES_FORMAT"] = OPTIMAL_FINITE_EXPORT_NODES_FORMAT

class OPTIMAL_FINITE_GUESS_METHOD(IntEnum):
    """Guess interpolation method."""
    LAGRANGE_POLYNOMIAL = 0
    """Lagrange polynomial method."""
    PIECEWISE_LINEAR = 1
    """Piecewise linear method."""

OPTIMAL_FINITE_GUESS_METHOD.LAGRANGE_POLYNOMIAL.__doc__ = "Lagrange polynomial method."
OPTIMAL_FINITE_GUESS_METHOD.PIECEWISE_LINEAR.__doc__ = "Piecewise linear method."

agcls.AgTypeNameMap["OPTIMAL_FINITE_GUESS_METHOD"] = OPTIMAL_FINITE_GUESS_METHOD

class IMP_DELTA_V_REP(IntEnum):
    """Vector representations for impulsive DeltaV specification"""
    CARTESIAN_IMP_DELTA_V = 0
    """Cartesian - specify the impulsive DeltaV in Cartesian coordinates (X, Y, Z)."""
    SPHERICAL_IMP_DELTA_V = 1
    """Spherical - specify the impulsive DeltaV in spherical coordinates (Azimuth, Elevation, Magnitude)."""

IMP_DELTA_V_REP.CARTESIAN_IMP_DELTA_V.__doc__ = "Cartesian - specify the impulsive DeltaV in Cartesian coordinates (X, Y, Z)."
IMP_DELTA_V_REP.SPHERICAL_IMP_DELTA_V.__doc__ = "Spherical - specify the impulsive DeltaV in spherical coordinates (Azimuth, Elevation, Magnitude)."

agcls.AgTypeNameMap["IMP_DELTA_V_REP"] = IMP_DELTA_V_REP

class LAMBERT_TARGET_COORD_TYPE(IntEnum):
    """Lambert Target CoordType."""
    CARTESIAN = 0
    """Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."""
    KEPLERIAN = 1
    """Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."""

LAMBERT_TARGET_COORD_TYPE.CARTESIAN.__doc__ = "Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system."
LAMBERT_TARGET_COORD_TYPE.KEPLERIAN.__doc__ = "Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space."

agcls.AgTypeNameMap["LAMBERT_TARGET_COORD_TYPE"] = LAMBERT_TARGET_COORD_TYPE

class LAMBERT_SOLUTION_OPTION_TYPE(IntEnum):
    """Lambert Solution Option Type."""
    FIXED_TIME = 0
    """Fixed time - The type of Lambert solution to calculate."""
    MIN_ECCENTRICITY = 1
    """Minimum Eccentricity - The type of Lambert solution to calculate."""
    MIN_ENERGY = 2
    """Minimum Energy - The type of Lambert solution to calculate."""

LAMBERT_SOLUTION_OPTION_TYPE.FIXED_TIME.__doc__ = "Fixed time - The type of Lambert solution to calculate."
LAMBERT_SOLUTION_OPTION_TYPE.MIN_ECCENTRICITY.__doc__ = "Minimum Eccentricity - The type of Lambert solution to calculate."
LAMBERT_SOLUTION_OPTION_TYPE.MIN_ENERGY.__doc__ = "Minimum Energy - The type of Lambert solution to calculate."

agcls.AgTypeNameMap["LAMBERT_SOLUTION_OPTION_TYPE"] = LAMBERT_SOLUTION_OPTION_TYPE

class LAMBERT_ORBITAL_ENERGY_TYPE(IntEnum):
    """Lambert Orbital Energy Type."""
    LOW = 0
    """Low energy- This is the orbital energy for the Lambert solution that corresponds to the smaller semimajor axis solution."""
    HIGH = 1
    """High energy- This is the orbital energy for the Lambert solution that corresponds to the larger semimajor axis solution."""

LAMBERT_ORBITAL_ENERGY_TYPE.LOW.__doc__ = "Low energy- This is the orbital energy for the Lambert solution that corresponds to the smaller semimajor axis solution."
LAMBERT_ORBITAL_ENERGY_TYPE.HIGH.__doc__ = "High energy- This is the orbital energy for the Lambert solution that corresponds to the larger semimajor axis solution."

agcls.AgTypeNameMap["LAMBERT_ORBITAL_ENERGY_TYPE"] = LAMBERT_ORBITAL_ENERGY_TYPE

class LAMBERT_DIRECTION_OF_MOTION_TYPE(IntEnum):
    """Lambert Direction Of Motion Type."""
    SHORT = 0
    """The short direction of motion for the Lambert solution."""
    LONG = 1
    """The long direction of motion for the Lambert solution."""

LAMBERT_DIRECTION_OF_MOTION_TYPE.SHORT.__doc__ = "The short direction of motion for the Lambert solution."
LAMBERT_DIRECTION_OF_MOTION_TYPE.LONG.__doc__ = "The long direction of motion for the Lambert solution."

agcls.AgTypeNameMap["LAMBERT_DIRECTION_OF_MOTION_TYPE"] = LAMBERT_DIRECTION_OF_MOTION_TYPE

class GOLDEN_SECTION_DESIRED_OPERATION(IntEnum):
    """The types for Desired Operation/Objective of golden section profile."""
    MINIMIZE_VALUE = 0
    """Minimize value"""
    MAXIMIZE_VALUE = 1
    """Maximize value"""

GOLDEN_SECTION_DESIRED_OPERATION.MINIMIZE_VALUE.__doc__ = "Minimize value"
GOLDEN_SECTION_DESIRED_OPERATION.MAXIMIZE_VALUE.__doc__ = "Maximize value"

agcls.AgTypeNameMap["GOLDEN_SECTION_DESIRED_OPERATION"] = GOLDEN_SECTION_DESIRED_OPERATION

class GRID_SEARCH_DESIRED_OPERATION(IntEnum):
    """The types for Desired Operation/Objective of Grid Search profile."""
    MINIMIZE_VALUE = 0
    """Minimize value"""
    MAXIMIZE_VALUE = 1
    """Maximize value"""

GRID_SEARCH_DESIRED_OPERATION.MINIMIZE_VALUE.__doc__ = "Minimize value"
GRID_SEARCH_DESIRED_OPERATION.MAXIMIZE_VALUE.__doc__ = "Maximize value"

agcls.AgTypeNameMap["GRID_SEARCH_DESIRED_OPERATION"] = GRID_SEARCH_DESIRED_OPERATION

class ELEMENT(IntEnum):
    """Which type of elements (osculating or mean)"""
    OSCULATING = 0
    """Osculating."""
    KOZAI_IZSAK_MEAN = 1
    """Kozai-Izsak Mean."""
    BROUWER_LYDDANE_MEAN_LONG = 2
    """Brouwer-Lyddane Mean Long."""
    BROUWER_LYDDANE_MEAN_SHORT = 3
    """Brouwer-Lyddane Mean Short."""

ELEMENT.OSCULATING.__doc__ = "Osculating."
ELEMENT.KOZAI_IZSAK_MEAN.__doc__ = "Kozai-Izsak Mean."
ELEMENT.BROUWER_LYDDANE_MEAN_LONG.__doc__ = "Brouwer-Lyddane Mean Long."
ELEMENT.BROUWER_LYDDANE_MEAN_SHORT.__doc__ = "Brouwer-Lyddane Mean Short."

agcls.AgTypeNameMap["ELEMENT"] = ELEMENT

class BASE_SELECTION(IntEnum):
    """Access base object selections types."""
    SPECIFY = 0
    """An object in the current scenario."""
    CURRENT_SATELLITE = 1
    """The current satellite."""

BASE_SELECTION.SPECIFY.__doc__ = "An object in the current scenario."
BASE_SELECTION.CURRENT_SATELLITE.__doc__ = "The current satellite."

agcls.AgTypeNameMap["BASE_SELECTION"] = BASE_SELECTION

class CONTROL_ORBIT_STATE_VALUE(IntEnum):
    """Orbit State Value properties that can be selected as control parameters for a Target Sequence."""
    VX = 0
    """The Vx velocity component of the orbit state."""
    VY = 1
    """The Vy velocity component of the orbit state."""
    VZ = 2
    """The Vz velocity component of the orbit state."""
    X = 3
    """The x position component of the orbit state."""
    Y = 4
    """The y position component of the orbit state."""
    Z = 5
    """The z position component of the orbit state."""

CONTROL_ORBIT_STATE_VALUE.VX.__doc__ = "The Vx velocity component of the orbit state."
CONTROL_ORBIT_STATE_VALUE.VY.__doc__ = "The Vy velocity component of the orbit state."
CONTROL_ORBIT_STATE_VALUE.VZ.__doc__ = "The Vz velocity component of the orbit state."
CONTROL_ORBIT_STATE_VALUE.X.__doc__ = "The x position component of the orbit state."
CONTROL_ORBIT_STATE_VALUE.Y.__doc__ = "The y position component of the orbit state."
CONTROL_ORBIT_STATE_VALUE.Z.__doc__ = "The z position component of the orbit state."

agcls.AgTypeNameMap["CONTROL_ORBIT_STATE_VALUE"] = CONTROL_ORBIT_STATE_VALUE

class SEGMENT_STATE(IntEnum):
    """Segment state to use types."""
    INITIAL = 0
    """The segment initial state."""
    FINAL = 1
    """The segment final state."""

SEGMENT_STATE.INITIAL.__doc__ = "The segment initial state."
SEGMENT_STATE.FINAL.__doc__ = "The segment final state."

agcls.AgTypeNameMap["SEGMENT_STATE"] = SEGMENT_STATE

class DIFFERENCE_ORDER(IntEnum):
    """The Difference order types."""
    INITIAL_MINUS_CURRENT = 0
    """The initial minus current difference."""
    CURRENT_MINUS_INITIAL = 1
    """The current minus initial difference."""

DIFFERENCE_ORDER.INITIAL_MINUS_CURRENT.__doc__ = "The initial minus current difference."
DIFFERENCE_ORDER.CURRENT_MINUS_INITIAL.__doc__ = "The current minus initial difference."

agcls.AgTypeNameMap["DIFFERENCE_ORDER"] = DIFFERENCE_ORDER

class SEGMENT_DIFFERENCE_ORDER(IntEnum):
    """The Difference Across Segments order types."""
    CURRENT_MINUS_SEGMENT = 0
    """The current minus segment difference."""
    SEGMENT_MINUS_CURRENT = 1
    """The segment minus current difference."""

SEGMENT_DIFFERENCE_ORDER.CURRENT_MINUS_SEGMENT.__doc__ = "The current minus segment difference."
SEGMENT_DIFFERENCE_ORDER.SEGMENT_MINUS_CURRENT.__doc__ = "The segment minus current difference."

agcls.AgTypeNameMap["SEGMENT_DIFFERENCE_ORDER"] = SEGMENT_DIFFERENCE_ORDER

class CONTROL_REPEATING_GROUND_TRACK_ERR(IntEnum):
    """Repeating Ground Track Equator Error properties that can be selected as control parameters for a Target Sequence."""
    REFERENCE_LON = 0
    """The reference longitude."""
    REPEAT_COUNT = 1
    """The repeat count."""

CONTROL_REPEATING_GROUND_TRACK_ERR.REFERENCE_LON.__doc__ = "The reference longitude."
CONTROL_REPEATING_GROUND_TRACK_ERR.REPEAT_COUNT.__doc__ = "The repeat count."

agcls.AgTypeNameMap["CONTROL_REPEATING_GROUND_TRACK_ERR"] = CONTROL_REPEATING_GROUND_TRACK_ERR

class CALC_OBJECT_DIRECTION(IntEnum):
    """The direction to search for a desired value."""
    NEXT = 0
    """Search in the direction of the next calculation object."""
    PREVIOUS = 1
    """Search in the direction of the previous calculation object."""

CALC_OBJECT_DIRECTION.NEXT.__doc__ = "Search in the direction of the next calculation object."
CALC_OBJECT_DIRECTION.PREVIOUS.__doc__ = "Search in the direction of the previous calculation object."

agcls.AgTypeNameMap["CALC_OBJECT_DIRECTION"] = CALC_OBJECT_DIRECTION

class CALC_OBJECT_ORBIT_PLANE_SOURCE(IntEnum):
    """The calculation object orbit plane source Types."""
    REFERENCE_SATELLITE = 0
    """Use the reference satellite to generate the orbit plane."""
    SATELLITE = 1
    """Use the satellite to generate the orbit plane."""

CALC_OBJECT_ORBIT_PLANE_SOURCE.REFERENCE_SATELLITE.__doc__ = "Use the reference satellite to generate the orbit plane."
CALC_OBJECT_ORBIT_PLANE_SOURCE.SATELLITE.__doc__ = "Use the satellite to generate the orbit plane."

agcls.AgTypeNameMap["CALC_OBJECT_ORBIT_PLANE_SOURCE"] = CALC_OBJECT_ORBIT_PLANE_SOURCE

class CALC_OBJECT_SUN_POSITION(IntEnum):
    """The calculation object sun location Types."""
    APPARENT_FROM_SATELLITE = 0
    """Use the sun location apparent from satellite."""
    APPARENT_FROM_REFERENCE_SATELLITE = 1
    """Use the sun location apparent from reference satellite."""
    TRUE_FROM_SATELLITE = 2
    """Use the sun location true from satellite."""
    TRUE_FROM_REFERENCE_SATELLITE = 3
    """Use the sun location true from reference satellite."""

CALC_OBJECT_SUN_POSITION.APPARENT_FROM_SATELLITE.__doc__ = "Use the sun location apparent from satellite."
CALC_OBJECT_SUN_POSITION.APPARENT_FROM_REFERENCE_SATELLITE.__doc__ = "Use the sun location apparent from reference satellite."
CALC_OBJECT_SUN_POSITION.TRUE_FROM_SATELLITE.__doc__ = "Use the sun location true from satellite."
CALC_OBJECT_SUN_POSITION.TRUE_FROM_REFERENCE_SATELLITE.__doc__ = "Use the sun location true from reference satellite."

agcls.AgTypeNameMap["CALC_OBJECT_SUN_POSITION"] = CALC_OBJECT_SUN_POSITION

class CALC_OBJECT_ANGLE_SIGN(IntEnum):
    """The sign of the angle when the relative position has a component along the orbit normal."""
    POSITIVE = 0
    """Use the positive sign for the angle when the relative position has a positive component along the orbit normal."""
    NEGATIVE = 1
    """Use the negative sign for the angle when the relative position does not have a positive component along the orbit normal."""

CALC_OBJECT_ANGLE_SIGN.POSITIVE.__doc__ = "Use the positive sign for the angle when the relative position has a positive component along the orbit normal."
CALC_OBJECT_ANGLE_SIGN.NEGATIVE.__doc__ = "Use the negative sign for the angle when the relative position does not have a positive component along the orbit normal."

agcls.AgTypeNameMap["CALC_OBJECT_ANGLE_SIGN"] = CALC_OBJECT_ANGLE_SIGN

class CALC_OBJECT_REFERENCE_DIRECTION(IntEnum):
    """Direction that establishes the zero value when projected into the orbit plane."""
    REFERENCE_SATELLITE_POSITION = 0
    """Use the reference satellite position when projected into the orbit plane."""
    SATELLITE_POSITION = 1
    """Use the satellite position when projected into the orbit plane."""
    REFERENCE_SATELLITE_NADIR = 2
    """Use the reference satellite nadir (centric) when projected into the orbit plane."""
    SATELLITE_NADIR = 3
    """Use the satellite nadir (centric) position when projected into the orbit plane."""

CALC_OBJECT_REFERENCE_DIRECTION.REFERENCE_SATELLITE_POSITION.__doc__ = "Use the reference satellite position when projected into the orbit plane."
CALC_OBJECT_REFERENCE_DIRECTION.SATELLITE_POSITION.__doc__ = "Use the satellite position when projected into the orbit plane."
CALC_OBJECT_REFERENCE_DIRECTION.REFERENCE_SATELLITE_NADIR.__doc__ = "Use the reference satellite nadir (centric) when projected into the orbit plane."
CALC_OBJECT_REFERENCE_DIRECTION.SATELLITE_NADIR.__doc__ = "Use the satellite nadir (centric) position when projected into the orbit plane."

agcls.AgTypeNameMap["CALC_OBJECT_REFERENCE_DIRECTION"] = CALC_OBJECT_REFERENCE_DIRECTION

class CALC_OBJECT_RELATIVE_POSITION(IntEnum):
    """The calculation object relative position Types."""
    SATELLITE_TO_REFERENCE_SATELLITE = 0
    """Use the relative position satellite to reference satellite."""
    REFERENCE_SATELLITE_TO_SATELLITE = 1
    """Use the relative position reference satellite to satellite."""

CALC_OBJECT_RELATIVE_POSITION.SATELLITE_TO_REFERENCE_SATELLITE.__doc__ = "Use the relative position satellite to reference satellite."
CALC_OBJECT_RELATIVE_POSITION.REFERENCE_SATELLITE_TO_SATELLITE.__doc__ = "Use the relative position reference satellite to satellite."

agcls.AgTypeNameMap["CALC_OBJECT_RELATIVE_POSITION"] = CALC_OBJECT_RELATIVE_POSITION

class CALC_OBJECT_REFERENCE_ELLIPSE(IntEnum):
    """The calculation object reference ellipse Types."""
    REFERENCE_SAT_ORBIT = 0
    """Use the reference satellite orbit."""
    SATELLITE_ORBIT = 1
    """Use the satellite orbit."""

CALC_OBJECT_REFERENCE_ELLIPSE.REFERENCE_SAT_ORBIT.__doc__ = "Use the reference satellite orbit."
CALC_OBJECT_REFERENCE_ELLIPSE.SATELLITE_ORBIT.__doc__ = "Use the satellite orbit."

agcls.AgTypeNameMap["CALC_OBJECT_REFERENCE_ELLIPSE"] = CALC_OBJECT_REFERENCE_ELLIPSE

class CALC_OBJECT_LOCATION_SOURCE(IntEnum):
    """The calculation object location source Types."""
    REFERENCE_SAT = 0
    """Use the reference satellite."""
    SATELLITE = 1
    """Use the satellite."""

CALC_OBJECT_LOCATION_SOURCE.REFERENCE_SAT.__doc__ = "Use the reference satellite."
CALC_OBJECT_LOCATION_SOURCE.SATELLITE.__doc__ = "Use the satellite."

agcls.AgTypeNameMap["CALC_OBJECT_LOCATION_SOURCE"] = CALC_OBJECT_LOCATION_SOURCE

class GRAVITATIONAL_PARAMETER_SOURCE(IntEnum):
    """The source of the gravitational parameter for a CStateCalcGravitationalParameter calculation object."""
    CENTRAL_BODY_FILE = 0
    """Cb File."""
    CENTRAL_BODY_FILE_SYSTEM = 1
    """Cb File -  System."""
    DESIGN_EXPLORER_OPTIMIZER_FILE = 2
    """DE File."""
    GRAVITY_FILE = 3
    """Gravity File."""

GRAVITATIONAL_PARAMETER_SOURCE.CENTRAL_BODY_FILE.__doc__ = "Cb File."
GRAVITATIONAL_PARAMETER_SOURCE.CENTRAL_BODY_FILE_SYSTEM.__doc__ = "Cb File -  System."
GRAVITATIONAL_PARAMETER_SOURCE.DESIGN_EXPLORER_OPTIMIZER_FILE.__doc__ = "DE File."
GRAVITATIONAL_PARAMETER_SOURCE.GRAVITY_FILE.__doc__ = "Gravity File."

agcls.AgTypeNameMap["GRAVITATIONAL_PARAMETER_SOURCE"] = GRAVITATIONAL_PARAMETER_SOURCE

class REFERENCE_RADIUS_SOURCE(IntEnum):
    """The source of the reference radius for a CStateCalcReferenceRadius calculation object."""
    CENTRAL_BODY_FILE = 0
    """Cb File."""
    GRAVITY_FILE = 1
    """Gravity File."""

REFERENCE_RADIUS_SOURCE.CENTRAL_BODY_FILE.__doc__ = "Cb File."
REFERENCE_RADIUS_SOURCE.GRAVITY_FILE.__doc__ = "Gravity File."

agcls.AgTypeNameMap["REFERENCE_RADIUS_SOURCE"] = REFERENCE_RADIUS_SOURCE

class GRAV_COEFF_NORMALIZATION_TYPE(IntEnum):
    """The normalization type for the CStateCalcGravCoeff calculation object."""
    NORMALIZED = 0
    """Normalized."""
    UNNORMALIZED = 1
    """Unnormalized."""

GRAV_COEFF_NORMALIZATION_TYPE.NORMALIZED.__doc__ = "Normalized."
GRAV_COEFF_NORMALIZATION_TYPE.UNNORMALIZED.__doc__ = "Unnormalized."

agcls.AgTypeNameMap["GRAV_COEFF_NORMALIZATION_TYPE"] = GRAV_COEFF_NORMALIZATION_TYPE

class GRAV_COEFF_COEFFICIENT_TYPE(IntEnum):
    """The coefficient type for the CStateCalcGravCoeff calculation object."""
    ZONAL = 0
    """Zonal."""
    COSINE = 1
    """Cosine."""
    SINE = 2
    """Sine."""

GRAV_COEFF_COEFFICIENT_TYPE.ZONAL.__doc__ = "Zonal."
GRAV_COEFF_COEFFICIENT_TYPE.COSINE.__doc__ = "Cosine."
GRAV_COEFF_COEFFICIENT_TYPE.SINE.__doc__ = "Sine."

agcls.AgTypeNameMap["GRAV_COEFF_COEFFICIENT_TYPE"] = GRAV_COEFF_COEFFICIENT_TYPE

class STM_PERT_VARIABLES(IntEnum):
    """The initial and final Cartesian variational variables that describe an STM element."""
    POSITION_X = 0
    """Designates the initial or final variation in the 'x' component of position."""
    POSITION_Y = 1
    """Designates the initial or final variation in the 'y' component of position."""
    POSITION_Z = 2
    """Designates the initial or final variation in the 'z' component of position."""
    VEL_X = 3
    """Designates the initial or final variation in the 'x' component of velocity."""
    VEL_Y = 4
    """Designates the initial or final variation in the 'y' component of velocity."""
    VEL_Z = 5
    """Designates the initial or final variation in the 'z' component of velocity."""

STM_PERT_VARIABLES.POSITION_X.__doc__ = "Designates the initial or final variation in the 'x' component of position."
STM_PERT_VARIABLES.POSITION_Y.__doc__ = "Designates the initial or final variation in the 'y' component of position."
STM_PERT_VARIABLES.POSITION_Z.__doc__ = "Designates the initial or final variation in the 'z' component of position."
STM_PERT_VARIABLES.VEL_X.__doc__ = "Designates the initial or final variation in the 'x' component of velocity."
STM_PERT_VARIABLES.VEL_Y.__doc__ = "Designates the initial or final variation in the 'y' component of velocity."
STM_PERT_VARIABLES.VEL_Z.__doc__ = "Designates the initial or final variation in the 'z' component of velocity."

agcls.AgTypeNameMap["STM_PERT_VARIABLES"] = STM_PERT_VARIABLES

class STM_EIGEN_NUMBER(IntEnum):
    """The number that describes one of the 6 STM Eigenvalues or Eigenvectors."""
    NUMBER1 = 0
    """Designates the first Eigenvalue or Eigenvector."""
    NUMBER2 = 1
    """Designates the second Eigenvalue or Eigenvector."""
    NUMBER3 = 2
    """Designates the third Eigenvalue or Eigenvector."""
    NUMBER4 = 3
    """Designates the fourth Eigenvalue or Eigenvector."""
    NUMBER5 = 4
    """Designates the fifth Eigenvalue or Eigenvector."""
    NUMBER6 = 5
    """Designates the sixth Eigenvalue or Eigenvector."""

STM_EIGEN_NUMBER.NUMBER1.__doc__ = "Designates the first Eigenvalue or Eigenvector."
STM_EIGEN_NUMBER.NUMBER2.__doc__ = "Designates the second Eigenvalue or Eigenvector."
STM_EIGEN_NUMBER.NUMBER3.__doc__ = "Designates the third Eigenvalue or Eigenvector."
STM_EIGEN_NUMBER.NUMBER4.__doc__ = "Designates the fourth Eigenvalue or Eigenvector."
STM_EIGEN_NUMBER.NUMBER5.__doc__ = "Designates the fifth Eigenvalue or Eigenvector."
STM_EIGEN_NUMBER.NUMBER6.__doc__ = "Designates the sixth Eigenvalue or Eigenvector."

agcls.AgTypeNameMap["STM_EIGEN_NUMBER"] = STM_EIGEN_NUMBER

class COMPLEX_NUMBER(IntEnum):
    """Whether a value represents the real or imaginary portion of a number."""
    REAL = 0
    """Designates the value as the real part."""
    IMAGINARY = 1
    """Designates the value as the imaginary part."""

COMPLEX_NUMBER.REAL.__doc__ = "Designates the value as the real part."
COMPLEX_NUMBER.IMAGINARY.__doc__ = "Designates the value as the imaginary part."

agcls.AgTypeNameMap["COMPLEX_NUMBER"] = COMPLEX_NUMBER

class SQUARED_TYPE(IntEnum):
    """Whether to calculate the value as the square of the sum of each component or the sum of the squares."""
    SUM_OF_SQUARES = 0
    """Designates the calculation to be the sum of the squares."""
    OF_SUM = 1
    """Designates the calculation to be the square of the sum."""

SQUARED_TYPE.SUM_OF_SQUARES.__doc__ = "Designates the calculation to be the sum of the squares."
SQUARED_TYPE.OF_SUM.__doc__ = "Designates the calculation to be the square of the sum."

agcls.AgTypeNameMap["SQUARED_TYPE"] = SQUARED_TYPE

class GEO_STATIONARY_DRIFT_RATE_MODEL(IntEnum):
    """Gravity models used to compute geostationary drift rate."""
    POINT_MASS = 0
    """Compute drift rate using two-body point mass gravity model."""
    POINT_MASS_PLUS_J2 = 1
    """Compute drift rate using gravity model that includes point mass plus secular effect of J2."""

GEO_STATIONARY_DRIFT_RATE_MODEL.POINT_MASS.__doc__ = "Compute drift rate using two-body point mass gravity model."
GEO_STATIONARY_DRIFT_RATE_MODEL.POINT_MASS_PLUS_J2.__doc__ = "Compute drift rate using gravity model that includes point mass plus secular effect of J2."

agcls.AgTypeNameMap["GEO_STATIONARY_DRIFT_RATE_MODEL"] = GEO_STATIONARY_DRIFT_RATE_MODEL

class GEO_STATIONARY_INCLINATION_MAGNITUDE(IntEnum):
    """Magnitude to use when computing the inclination vector."""
    INCLINATION_ANGLE = 0
    """Compute inclination vector magnitude as the inclination angle itself (in radins)."""
    SIN_INCLINATION = 1
    """Compute inclination vector magnitude as sin(inclination)."""
    SIN_HALF_INCLINATION = 2
    """Compute inclination vector magnitude as sin(0.5*inclination)."""
    TWICE_SIN_HALF_INCLINATION = 3
    """Compute inclination vector magnitude as 2*sin(0.5*inclination)."""
    TAN_HALF_INCLINATION = 4
    """Compute inclination vector magnitude as tan(0.5*inclination)."""
    TWICE_TAN_HALF_INCLINATION = 5
    """Compute inclination vector magnitude as 2*tan(0.5*inclination)."""

GEO_STATIONARY_INCLINATION_MAGNITUDE.INCLINATION_ANGLE.__doc__ = "Compute inclination vector magnitude as the inclination angle itself (in radins)."
GEO_STATIONARY_INCLINATION_MAGNITUDE.SIN_INCLINATION.__doc__ = "Compute inclination vector magnitude as sin(inclination)."
GEO_STATIONARY_INCLINATION_MAGNITUDE.SIN_HALF_INCLINATION.__doc__ = "Compute inclination vector magnitude as sin(0.5*inclination)."
GEO_STATIONARY_INCLINATION_MAGNITUDE.TWICE_SIN_HALF_INCLINATION.__doc__ = "Compute inclination vector magnitude as 2*sin(0.5*inclination)."
GEO_STATIONARY_INCLINATION_MAGNITUDE.TAN_HALF_INCLINATION.__doc__ = "Compute inclination vector magnitude as tan(0.5*inclination)."
GEO_STATIONARY_INCLINATION_MAGNITUDE.TWICE_TAN_HALF_INCLINATION.__doc__ = "Compute inclination vector magnitude as 2*tan(0.5*inclination)."

agcls.AgTypeNameMap["GEO_STATIONARY_INCLINATION_MAGNITUDE"] = GEO_STATIONARY_INCLINATION_MAGNITUDE

class CENTRAL_BODY_GRAVITY_MODEL(IntEnum):
    """The gravity model."""
    ZONALS_TO_J4 = 0
    """ZonalsToJ4 - (various) Gravity model for all central bodies except Sun, Earth and Moon."""
    EARTH_SIMPLE = 1
    """Earth Simple gravity model."""
    WGS84 = 2
    """WGS84 - (Earth) World Geodetic System 1984; WGS 84 was created by the Defense Mapping Agency (DMA)."""
    EGM96 = 3
    """EGM96 - (Earth) Earth Gravity Model 1996, a geopotential model of the Earth consisting of spherical harmonic coefficients complete to degree and order 360. Developed jointly by NGA (formerly known as NIMA), NASA Goddard and Ohio State University."""
    GEMT1 = 4
    """GEMT1 - (Earth) Goddard Earth Model T1."""
    JGM2 = 5
    """JGM2 - (Earth) Joint Gravity Model version 2, a model that describes the Earth gravity field up to degree and order 70, developed by NASA/GSFC Space Geodesy Branch, the University of Texas Center for Space Research and CNES."""
    JGM3 = 6
    """JGM3 - (Earth) Joint Gravity Model version 3, a model that describes the Earth gravity field up to degree and order 70, developed by the University of Texas and NASA/GSFC."""
    WSG84EGM96 = 7
    """WGS84 EGM96 - (Earth) Uses the coefficients from EGM96 with the shape model of WGS84. This model is the recommended gravity model of the WGS84 definition document: NIMA TR8350.2, Third Edition, 4 July 1997."""
    WGS84_OLD = 8
    """WGS84 old - (Earth) Old version of WGS84."""
    GLGM2 = 9
    """GLGM2 - (Moon) GM = 4.9028029535968e+12, reference distance = 1,738,000 m."""
    LP165P = 10
    """LP165P - (Moon) GM = 4.902801056E+12, reference distance = 1,738,000.0 m."""
    ICARUS1987 = 11
    """Icarus1987 - (Mercury) GM = 2.203209e+013, reference distance = 2,439,000 m. Reference: Anderson, J. J., Colombo, G., Esposito, P. B., Lau E. L., and Trager, G. B. 'The Mass, Gravity Field, and Ephemeris of Mercury', Icarus 71, 337-349, 1987."""
    MGNP180U = 12
    """MGNP180U - (Venus) GM = 3.248585920790000E+14, reference distance = 6,051,000.0 m."""
    GMM1 = 13
    """GMM1 - (Mars) GM = 4.28283579647735e+13, reference distance = 3,394,200.0 m."""
    GMM2B = 14
    """GMM2B - (Mars) GM = 4.28283719012840e+13, reference distance = 3,397,000 m. Reference: These numbers came from the GMM-2B model published at `NASA <https://www.nasa.gov/>`_ and were gotten from Journal of Geophysical Research, November 2000."""
    MARS50_C = 15
    """Mars50c - (Mars) GM = 4.2828370371000e+13, reference distance = 3,394,200 m."""
    JUP230 = 16
    """JUP230 - (Jupiter) GM = 1.26686535e+017, reference distance = 71,492,000 m. Reference: Jacobson, R. A. The JUP230 orbit solution, 2003."""
    ASTRON2004 = 17
    """Astron2004 - (Saturn) GM = 3.7931284e+016, reference distance = 60,330,000 m."""
    ASTRON_ASTRO1991 = 18
    """AstronAstro1991 - (Neptune) GM = 6.835107e+015, reference distance = 25,225,000 m."""
    ICARUS2001 = 19
    """Icarus2001 - (Callisto) GM = 7.179292e+12, reference distance = 2,410,300 m."""
    SCIENCE1998 = 20
    """Science1998 - (Europa) GM =3.20272e+012, reference distance = 1,565,000 m."""
    NATURE1996 = 21
    """Nature1996 - (Ganymede) GM = 9.8866e+12, reference distance = 2,634,000 m."""
    J_GEO_RES2001 = 22
    """JGeoRes2001 - (Io) GM = 5.96e+12, reference distance = 1,821,600 m."""
    GGM01C = 23
    """GGM01C - (Earth)"""
    GGM02C = 24
    """GGM02C - (Earth)"""
    WGS72_ZONALS_TO_J4 = 25
    """WGS72 ZonalsToJ4 - (Earth)"""
    LP100J = 26
    """LP100J - (Moon)"""
    LP100K = 27
    """LP100K - (Moon)"""
    LP150Q = 28
    """LP150Q - (Moon)"""
    LP75G = 29
    """LP75G - (Moon)"""

CENTRAL_BODY_GRAVITY_MODEL.ZONALS_TO_J4.__doc__ = "ZonalsToJ4 - (various) Gravity model for all central bodies except Sun, Earth and Moon."
CENTRAL_BODY_GRAVITY_MODEL.EARTH_SIMPLE.__doc__ = "Earth Simple gravity model."
CENTRAL_BODY_GRAVITY_MODEL.WGS84.__doc__ = "WGS84 - (Earth) World Geodetic System 1984; WGS 84 was created by the Defense Mapping Agency (DMA)."
CENTRAL_BODY_GRAVITY_MODEL.EGM96.__doc__ = "EGM96 - (Earth) Earth Gravity Model 1996, a geopotential model of the Earth consisting of spherical harmonic coefficients complete to degree and order 360. Developed jointly by NGA (formerly known as NIMA), NASA Goddard and Ohio State University."
CENTRAL_BODY_GRAVITY_MODEL.GEMT1.__doc__ = "GEMT1 - (Earth) Goddard Earth Model T1."
CENTRAL_BODY_GRAVITY_MODEL.JGM2.__doc__ = "JGM2 - (Earth) Joint Gravity Model version 2, a model that describes the Earth gravity field up to degree and order 70, developed by NASA/GSFC Space Geodesy Branch, the University of Texas Center for Space Research and CNES."
CENTRAL_BODY_GRAVITY_MODEL.JGM3.__doc__ = "JGM3 - (Earth) Joint Gravity Model version 3, a model that describes the Earth gravity field up to degree and order 70, developed by the University of Texas and NASA/GSFC."
CENTRAL_BODY_GRAVITY_MODEL.WSG84EGM96.__doc__ = "WGS84 EGM96 - (Earth) Uses the coefficients from EGM96 with the shape model of WGS84. This model is the recommended gravity model of the WGS84 definition document: NIMA TR8350.2, Third Edition, 4 July 1997."
CENTRAL_BODY_GRAVITY_MODEL.WGS84_OLD.__doc__ = "WGS84 old - (Earth) Old version of WGS84."
CENTRAL_BODY_GRAVITY_MODEL.GLGM2.__doc__ = "GLGM2 - (Moon) GM = 4.9028029535968e+12, reference distance = 1,738,000 m."
CENTRAL_BODY_GRAVITY_MODEL.LP165P.__doc__ = "LP165P - (Moon) GM = 4.902801056E+12, reference distance = 1,738,000.0 m."
CENTRAL_BODY_GRAVITY_MODEL.ICARUS1987.__doc__ = "Icarus1987 - (Mercury) GM = 2.203209e+013, reference distance = 2,439,000 m. Reference: Anderson, J. J., Colombo, G., Esposito, P. B., Lau E. L., and Trager, G. B. 'The Mass, Gravity Field, and Ephemeris of Mercury', Icarus 71, 337-349, 1987."
CENTRAL_BODY_GRAVITY_MODEL.MGNP180U.__doc__ = "MGNP180U - (Venus) GM = 3.248585920790000E+14, reference distance = 6,051,000.0 m."
CENTRAL_BODY_GRAVITY_MODEL.GMM1.__doc__ = "GMM1 - (Mars) GM = 4.28283579647735e+13, reference distance = 3,394,200.0 m."
CENTRAL_BODY_GRAVITY_MODEL.GMM2B.__doc__ = "GMM2B - (Mars) GM = 4.28283719012840e+13, reference distance = 3,397,000 m. Reference: These numbers came from the GMM-2B model published at `NASA <https://www.nasa.gov/>`_ and were gotten from Journal of Geophysical Research, November 2000."
CENTRAL_BODY_GRAVITY_MODEL.MARS50_C.__doc__ = "Mars50c - (Mars) GM = 4.2828370371000e+13, reference distance = 3,394,200 m."
CENTRAL_BODY_GRAVITY_MODEL.JUP230.__doc__ = "JUP230 - (Jupiter) GM = 1.26686535e+017, reference distance = 71,492,000 m. Reference: Jacobson, R. A. The JUP230 orbit solution, 2003."
CENTRAL_BODY_GRAVITY_MODEL.ASTRON2004.__doc__ = "Astron2004 - (Saturn) GM = 3.7931284e+016, reference distance = 60,330,000 m."
CENTRAL_BODY_GRAVITY_MODEL.ASTRON_ASTRO1991.__doc__ = "AstronAstro1991 - (Neptune) GM = 6.835107e+015, reference distance = 25,225,000 m."
CENTRAL_BODY_GRAVITY_MODEL.ICARUS2001.__doc__ = "Icarus2001 - (Callisto) GM = 7.179292e+12, reference distance = 2,410,300 m."
CENTRAL_BODY_GRAVITY_MODEL.SCIENCE1998.__doc__ = "Science1998 - (Europa) GM =3.20272e+012, reference distance = 1,565,000 m."
CENTRAL_BODY_GRAVITY_MODEL.NATURE1996.__doc__ = "Nature1996 - (Ganymede) GM = 9.8866e+12, reference distance = 2,634,000 m."
CENTRAL_BODY_GRAVITY_MODEL.J_GEO_RES2001.__doc__ = "JGeoRes2001 - (Io) GM = 5.96e+12, reference distance = 1,821,600 m."
CENTRAL_BODY_GRAVITY_MODEL.GGM01C.__doc__ = "GGM01C - (Earth)"
CENTRAL_BODY_GRAVITY_MODEL.GGM02C.__doc__ = "GGM02C - (Earth)"
CENTRAL_BODY_GRAVITY_MODEL.WGS72_ZONALS_TO_J4.__doc__ = "WGS72 ZonalsToJ4 - (Earth)"
CENTRAL_BODY_GRAVITY_MODEL.LP100J.__doc__ = "LP100J - (Moon)"
CENTRAL_BODY_GRAVITY_MODEL.LP100K.__doc__ = "LP100K - (Moon)"
CENTRAL_BODY_GRAVITY_MODEL.LP150Q.__doc__ = "LP150Q - (Moon)"
CENTRAL_BODY_GRAVITY_MODEL.LP75G.__doc__ = "LP75G - (Moon)"

agcls.AgTypeNameMap["CENTRAL_BODY_GRAVITY_MODEL"] = CENTRAL_BODY_GRAVITY_MODEL

class CENTRAL_BODY_SHAPE(IntEnum):
    """The central body shape types."""
    TRIAXIAL_ELLIPSOID = 0
    """A triaxial ellipsoid defined by a semi-major axis, semi-mid axis and semi-minor axis."""
    OBLATE_SPHEROID = 1
    """An oblate spheroid defined by a minimum and maximum radii, and a derived flattening coefficient."""
    SPHERE = 2
    """A sphere defined by a radius."""

CENTRAL_BODY_SHAPE.TRIAXIAL_ELLIPSOID.__doc__ = "A triaxial ellipsoid defined by a semi-major axis, semi-mid axis and semi-minor axis."
CENTRAL_BODY_SHAPE.OBLATE_SPHEROID.__doc__ = "An oblate spheroid defined by a minimum and maximum radii, and a derived flattening coefficient."
CENTRAL_BODY_SHAPE.SPHERE.__doc__ = "A sphere defined by a radius."

agcls.AgTypeNameMap["CENTRAL_BODY_SHAPE"] = CENTRAL_BODY_SHAPE

class CENTRAL_BODY_ATTITUDE(IntEnum):
    """The central body attitude types."""
    IAU1994 = 0
    """An IAU 1994 attitude definition."""
    ROTATION_COEFFICIENTS_FILE = 1
    """A rotation coefficient file."""

CENTRAL_BODY_ATTITUDE.IAU1994.__doc__ = "An IAU 1994 attitude definition."
CENTRAL_BODY_ATTITUDE.ROTATION_COEFFICIENTS_FILE.__doc__ = "A rotation coefficient file."

agcls.AgTypeNameMap["CENTRAL_BODY_ATTITUDE"] = CENTRAL_BODY_ATTITUDE

class CENTRAL_BODY_EPHEMERIS(IntEnum):
    """The central body ephemeris types."""
    ANALYTIC_ORBIT = 0
    """Specified values and rates of change for the classical orbital elements."""
    FILE = 1
    """An external ephemeris (.e) file."""
    JPLDE = 2
    """Ephemerides from the Jet Propulsion Laboratory's JPL DE set are used."""
    JPLSPICE = 3
    """The SPICE propagator reads ephemeris from binary files that are in a standard format produced by the Jet Propulsion Laboratory for ephemeris for celestial bodies but can be used for spacecraft."""
    PLANETARY = 4
    """A planetary ephemeris (.pe) file."""

CENTRAL_BODY_EPHEMERIS.ANALYTIC_ORBIT.__doc__ = "Specified values and rates of change for the classical orbital elements."
CENTRAL_BODY_EPHEMERIS.FILE.__doc__ = "An external ephemeris (.e) file."
CENTRAL_BODY_EPHEMERIS.JPLDE.__doc__ = "Ephemerides from the Jet Propulsion Laboratory's JPL DE set are used."
CENTRAL_BODY_EPHEMERIS.JPLSPICE.__doc__ = "The SPICE propagator reads ephemeris from binary files that are in a standard format produced by the Jet Propulsion Laboratory for ephemeris for celestial bodies but can be used for spacecraft."
CENTRAL_BODY_EPHEMERIS.PLANETARY.__doc__ = "A planetary ephemeris (.pe) file."

agcls.AgTypeNameMap["CENTRAL_BODY_EPHEMERIS"] = CENTRAL_BODY_EPHEMERIS

class CONTROL_POWER_INTERNAL(IntEnum):
    """Internal Power properties that can be selected as control parameters for a Target Sequence."""
    GENERATED_POWER = 0
    """The power generated by the spacecraft from internal sources."""
    PERCENT_DEGRADATION = 1
    """The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."""
    EPOCH = 2
    """The date and time used as a reference epoch for degradation."""

CONTROL_POWER_INTERNAL.GENERATED_POWER.__doc__ = "The power generated by the spacecraft from internal sources."
CONTROL_POWER_INTERNAL.PERCENT_DEGRADATION.__doc__ = "The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."
CONTROL_POWER_INTERNAL.EPOCH.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["CONTROL_POWER_INTERNAL"] = CONTROL_POWER_INTERNAL

class CONTROL_POWER_PROCESSED(IntEnum):
    """Processed Power properties that can be selected as control parameters for a Target Sequence."""
    EFFICIENCY = 0
    """The efficiency of the power processing unit(PPU)."""
    LOAD = 1
    """The power diverted from the power source and unavailable to the power processing unit(PPU)."""

CONTROL_POWER_PROCESSED.EFFICIENCY.__doc__ = "The efficiency of the power processing unit(PPU)."
CONTROL_POWER_PROCESSED.LOAD.__doc__ = "The power diverted from the power source and unavailable to the power processing unit(PPU)."

agcls.AgTypeNameMap["CONTROL_POWER_PROCESSED"] = CONTROL_POWER_PROCESSED

class CONTROL_POWER_SOLAR_ARRAY(IntEnum):
    """Solar Array Power properties that can be selected as control parameters for a Target Sequence."""
    C0 = 0
    """The ThermalModel.C0 coefficient."""
    C1 = 1
    """The ThermalModel.C1 coefficient."""
    C2 = 2
    """The ThermalModel.C2 coefficient."""
    C3 = 3
    """The ThermalModel.C3 coefficient."""
    C4 = 4
    """The ThermalModel.C4 coefficient."""
    AREA = 5
    """The solar array panel area."""
    EFFICIENCY = 6
    """The array efficiency in producing output power from a collection of cells."""
    CELL_EFFICIENCY = 7
    """The cell efficiency in producing output power from incident sunlight."""
    CONCENTRATION = 8
    """The solar array concentration factor."""
    INCLINATION_TO_SUN_LINE = 9
    """The angle from the panel normal vector to the apparent sun line."""
    PERCENT_DEGRADATION = 10
    """The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."""
    EPOCH = 11
    """The date and time used as a reference epoch for degradation."""

CONTROL_POWER_SOLAR_ARRAY.C0.__doc__ = "The ThermalModel.C0 coefficient."
CONTROL_POWER_SOLAR_ARRAY.C1.__doc__ = "The ThermalModel.C1 coefficient."
CONTROL_POWER_SOLAR_ARRAY.C2.__doc__ = "The ThermalModel.C2 coefficient."
CONTROL_POWER_SOLAR_ARRAY.C3.__doc__ = "The ThermalModel.C3 coefficient."
CONTROL_POWER_SOLAR_ARRAY.C4.__doc__ = "The ThermalModel.C4 coefficient."
CONTROL_POWER_SOLAR_ARRAY.AREA.__doc__ = "The solar array panel area."
CONTROL_POWER_SOLAR_ARRAY.EFFICIENCY.__doc__ = "The array efficiency in producing output power from a collection of cells."
CONTROL_POWER_SOLAR_ARRAY.CELL_EFFICIENCY.__doc__ = "The cell efficiency in producing output power from incident sunlight."
CONTROL_POWER_SOLAR_ARRAY.CONCENTRATION.__doc__ = "The solar array concentration factor."
CONTROL_POWER_SOLAR_ARRAY.INCLINATION_TO_SUN_LINE.__doc__ = "The angle from the panel normal vector to the apparent sun line."
CONTROL_POWER_SOLAR_ARRAY.PERCENT_DEGRADATION.__doc__ = "The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch."
CONTROL_POWER_SOLAR_ARRAY.EPOCH.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["CONTROL_POWER_SOLAR_ARRAY"] = CONTROL_POWER_SOLAR_ARRAY

class THIRD_BODY_MODE(IntEnum):
    """The third body gravity mode."""
    GRAVITY_FIELD = 0
    """Define the gravitational effect as a full Gravitational Force model"""
    POINT_MASS = 1
    """Define the gravitational effect as a third body point mass effect."""

THIRD_BODY_MODE.GRAVITY_FIELD.__doc__ = "Define the gravitational effect as a full Gravitational Force model"
THIRD_BODY_MODE.POINT_MASS.__doc__ = "Define the gravitational effect as a third body point mass effect."

agcls.AgTypeNameMap["THIRD_BODY_MODE"] = THIRD_BODY_MODE

class GRAV_PARAM_SOURCE(IntEnum):
    """The gravity parameter source."""
    CENTRAL_BODY_FILE = 0
    """The Cb file provided with STK; uses the default, body centered gravity source for the central body."""
    DESIGN_EXPLORER_OPTIMIZER_FILE = 1
    """A DE file; body centered for the inner planets and barycentered for the outer planets."""
    USER = 2
    """User defined; requires you to specify the mu value of the Gravitational Parameter."""
    CENTRAL_BODY_FILE_SYSTEM = 3
    """The Cb file provided with STK; uses the default, barycentered gravity source for the central body."""

GRAV_PARAM_SOURCE.CENTRAL_BODY_FILE.__doc__ = "The Cb file provided with STK; uses the default, body centered gravity source for the central body."
GRAV_PARAM_SOURCE.DESIGN_EXPLORER_OPTIMIZER_FILE.__doc__ = "A DE file; body centered for the inner planets and barycentered for the outer planets."
GRAV_PARAM_SOURCE.USER.__doc__ = "User defined; requires you to specify the mu value of the Gravitational Parameter."
GRAV_PARAM_SOURCE.CENTRAL_BODY_FILE_SYSTEM.__doc__ = "The Cb file provided with STK; uses the default, barycentered gravity source for the central body."

agcls.AgTypeNameMap["GRAV_PARAM_SOURCE"] = GRAV_PARAM_SOURCE

class EPHEM_SOURCE(IntEnum):
    """The ephemeris source type."""
    CENTRAL_BODY_FILE = 0
    """The Cb file provided with STK; uses the default ephemeris source for that central body."""
    DESIGN_EXPLORER_OPTIMIZER_FILE = 1
    """A DE file; body centered for the inner planets and barycentered for the outer planets."""
    SPICE_BARY = 2
    """A SPICE file, barycentered; uses the entire planetary system as a single effect, with the system center as the point mass."""
    SPICE_BODY = 3
    """A SPICE file, body centered; uses only the planet as the effect, with the planet's center as the point mass."""

EPHEM_SOURCE.CENTRAL_BODY_FILE.__doc__ = "The Cb file provided with STK; uses the default ephemeris source for that central body."
EPHEM_SOURCE.DESIGN_EXPLORER_OPTIMIZER_FILE.__doc__ = "A DE file; body centered for the inner planets and barycentered for the outer planets."
EPHEM_SOURCE.SPICE_BARY.__doc__ = "A SPICE file, barycentered; uses the entire planetary system as a single effect, with the system center as the point mass."
EPHEM_SOURCE.SPICE_BODY.__doc__ = "A SPICE file, body centered; uses only the planet as the effect, with the planet's center as the point mass."

agcls.AgTypeNameMap["EPHEM_SOURCE"] = EPHEM_SOURCE

class SOLAR_FORCE_METHOD(IntEnum):
    """The solar force method type for a spherical or N-plate SRP model."""
    LUMINOSITY = 0
    """Luminosity - used as the value for solar flux at 1 AU in the Solar Radiation computation."""
    MEAN_FLUX = 1
    """Mean Flux - used as the value for solar flux at 1 AU in the Solar Radiation computation."""

SOLAR_FORCE_METHOD.LUMINOSITY.__doc__ = "Luminosity - used as the value for solar flux at 1 AU in the Solar Radiation computation."
SOLAR_FORCE_METHOD.MEAN_FLUX.__doc__ = "Mean Flux - used as the value for solar flux at 1 AU in the Solar Radiation computation."

agcls.AgTypeNameMap["SOLAR_FORCE_METHOD"] = SOLAR_FORCE_METHOD

class SHADOW_MODEL(IntEnum):
    """The shadow model type."""
    CYLINDRICAL = 0
    """Cylindrical - assumes the Sun to be at infinite distance so that all light coming from the Sun moves in a direction parallel to the Sun to satellite vector."""
    DUAL_CONE = 1
    """Dual Cone - uses the actual size and distance of the Sun to model regions of full, partial (penumbra) and zero (umbra) sunlight. The visible fraction of the solar disk is used to compute the acceleration during penumbra."""
    NONE = 2
    """None - turns off all shadowing of the satellite."""

SHADOW_MODEL.CYLINDRICAL.__doc__ = "Cylindrical - assumes the Sun to be at infinite distance so that all light coming from the Sun moves in a direction parallel to the Sun to satellite vector."
SHADOW_MODEL.DUAL_CONE.__doc__ = "Dual Cone - uses the actual size and distance of the Sun to model regions of full, partial (penumbra) and zero (umbra) sunlight. The visible fraction of the solar disk is used to compute the acceleration during penumbra."
SHADOW_MODEL.NONE.__doc__ = "None - turns off all shadowing of the satellite."

agcls.AgTypeNameMap["SHADOW_MODEL"] = SHADOW_MODEL

class SUN_POSITION(IntEnum):
    """The sun position type."""
    APPARENT = 0
    """Apparent - takes into account the time required for light to travel from the sun to the position of the spacecraft."""
    APPARENT_TO_TRUE_CENTRAL_BODY = 1
    """Apparent Sun to True Cb - takes into account the time required for light to travel from the sun to the central body."""
    TRUE = 2
    """True - assumes that light from the sun reaches the spacecraft instantaneously."""

SUN_POSITION.APPARENT.__doc__ = "Apparent - takes into account the time required for light to travel from the sun to the position of the spacecraft."
SUN_POSITION.APPARENT_TO_TRUE_CENTRAL_BODY.__doc__ = "Apparent Sun to True Cb - takes into account the time required for light to travel from the sun to the central body."
SUN_POSITION.TRUE.__doc__ = "True - assumes that light from the sun reaches the spacecraft instantaneously."

agcls.AgTypeNameMap["SUN_POSITION"] = SUN_POSITION

class ATMOS_DATA_SOURCE(IntEnum):
    """The Atmospheric data source type."""
    CONSTANT = 0
    """Constant Atmospheric data source."""
    FILE = 1
    """Atmopsheric data source from file."""

ATMOS_DATA_SOURCE.CONSTANT.__doc__ = "Constant Atmospheric data source."
ATMOS_DATA_SOURCE.FILE.__doc__ = "Atmopsheric data source from file."

agcls.AgTypeNameMap["ATMOS_DATA_SOURCE"] = ATMOS_DATA_SOURCE

class GEO_MAGNETIC_FLUX_SOURCE(IntEnum):
    """Whether to use Kp or Ap data from the flux file."""
    AP = 0
    """Read Ap from file."""
    KP = 1
    """Read Kp from file."""

GEO_MAGNETIC_FLUX_SOURCE.AP.__doc__ = "Read Ap from file."
GEO_MAGNETIC_FLUX_SOURCE.KP.__doc__ = "Read Kp from file."

agcls.AgTypeNameMap["GEO_MAGNETIC_FLUX_SOURCE"] = GEO_MAGNETIC_FLUX_SOURCE

class GEO_MAGNETIC_FLUX_UPDATE_RATE(IntEnum):
    """Method for using geomagnetic flux values from the flux file."""
    RATE3_HOURLY = 0
    """Three hourly"""
    RATE3_HOURLY_CUBIC_SPLINE = 1
    """Three hourly cubic spline"""
    RATE3_HOURLY_INTERPOLATED = 2
    """Three hourly interpolated"""
    DAILY = 3
    """Daily"""

GEO_MAGNETIC_FLUX_UPDATE_RATE.RATE3_HOURLY.__doc__ = "Three hourly"
GEO_MAGNETIC_FLUX_UPDATE_RATE.RATE3_HOURLY_CUBIC_SPLINE.__doc__ = "Three hourly cubic spline"
GEO_MAGNETIC_FLUX_UPDATE_RATE.RATE3_HOURLY_INTERPOLATED.__doc__ = "Three hourly interpolated"
GEO_MAGNETIC_FLUX_UPDATE_RATE.DAILY.__doc__ = "Daily"

agcls.AgTypeNameMap["GEO_MAGNETIC_FLUX_UPDATE_RATE"] = GEO_MAGNETIC_FLUX_UPDATE_RATE

class DRAG_MODEL_TYPE(IntEnum):
    """Type of Drag Model."""
    SPHERICAL = 0
    """Spherical"""
    PLUGIN = 1
    """Plugin"""
    VARIABLE_AREA = 2
    """Variable Area"""
    N_PLATE = 3
    """N-Plate"""

DRAG_MODEL_TYPE.SPHERICAL.__doc__ = "Spherical"
DRAG_MODEL_TYPE.PLUGIN.__doc__ = "Plugin"
DRAG_MODEL_TYPE.VARIABLE_AREA.__doc__ = "Variable Area"
DRAG_MODEL_TYPE.N_PLATE.__doc__ = "N-Plate"

agcls.AgTypeNameMap["DRAG_MODEL_TYPE"] = DRAG_MODEL_TYPE

class MARS_GRAM_DENSITY_TYPE(IntEnum):
    """Density Type for MarsGRAM Density Models"""
    LOW = 0
    """Low density"""
    MEAN = 1
    """Mean density"""
    HIGH = 2
    """High density"""
    RANDOMLY_PERTURBED = 3
    """Randomly perturbed density"""

MARS_GRAM_DENSITY_TYPE.LOW.__doc__ = "Low density"
MARS_GRAM_DENSITY_TYPE.MEAN.__doc__ = "Mean density"
MARS_GRAM_DENSITY_TYPE.HIGH.__doc__ = "High density"
MARS_GRAM_DENSITY_TYPE.RANDOMLY_PERTURBED.__doc__ = "Randomly perturbed density"

agcls.AgTypeNameMap["MARS_GRAM_DENSITY_TYPE"] = MARS_GRAM_DENSITY_TYPE

class VENUS_GRAM_DENSITY_TYPE(IntEnum):
    """Density Type for VenusGRAM Density Models"""
    LOW = 0
    """Low density"""
    MEAN = 1
    """Mean density"""
    HIGH = 2
    """High density"""
    RANDOMLY_PERTURBED = 3
    """Randomly perturbed density"""

VENUS_GRAM_DENSITY_TYPE.LOW.__doc__ = "Low density"
VENUS_GRAM_DENSITY_TYPE.MEAN.__doc__ = "Mean density"
VENUS_GRAM_DENSITY_TYPE.HIGH.__doc__ = "High density"
VENUS_GRAM_DENSITY_TYPE.RANDOMLY_PERTURBED.__doc__ = "Randomly perturbed density"

agcls.AgTypeNameMap["VENUS_GRAM_DENSITY_TYPE"] = VENUS_GRAM_DENSITY_TYPE

class TAB_VEC_INTERP_METHOD(IntEnum):
    """The interpolation method for tabulated area vector file."""
    CARTESIAN_INTERPOLATION = 0
    """Bilinear interpolation on the Cartesian grid."""
    MAGNITUDE_DIRECTION_INTERPOLATION = 1
    """Bilinear interpolation in magnitude and direction space."""

TAB_VEC_INTERP_METHOD.CARTESIAN_INTERPOLATION.__doc__ = "Bilinear interpolation on the Cartesian grid."
TAB_VEC_INTERP_METHOD.MAGNITUDE_DIRECTION_INTERPOLATION.__doc__ = "Bilinear interpolation in magnitude and direction space."

agcls.AgTypeNameMap["TAB_VEC_INTERP_METHOD"] = TAB_VEC_INTERP_METHOD

class CONTROL_ENGINE_CONST_ACC(IntEnum):
    """Constant Acceleration and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    GRAV = 0
    """The gravitational acceleration constant at sea level on the Earth."""
    ACCELERATION = 1
    """The acceleration for the engine."""
    ISP = 2
    """The specific impulse for the engine."""

CONTROL_ENGINE_CONST_ACC.GRAV.__doc__ = "The gravitational acceleration constant at sea level on the Earth."
CONTROL_ENGINE_CONST_ACC.ACCELERATION.__doc__ = "The acceleration for the engine."
CONTROL_ENGINE_CONST_ACC.ISP.__doc__ = "The specific impulse for the engine."

agcls.AgTypeNameMap["CONTROL_ENGINE_CONST_ACC"] = CONTROL_ENGINE_CONST_ACC

class CONTROL_ENGINE_CONSTANT(IntEnum):
    """Constant Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    GRAV = 0
    """The gravitational acceleration constant at sea level on the Earth."""
    THRUST = 1
    """The thrust for the engine."""
    ISP = 2
    """The specific impulse for the engine."""

CONTROL_ENGINE_CONSTANT.GRAV.__doc__ = "The gravitational acceleration constant at sea level on the Earth."
CONTROL_ENGINE_CONSTANT.THRUST.__doc__ = "The thrust for the engine."
CONTROL_ENGINE_CONSTANT.ISP.__doc__ = "The specific impulse for the engine."

agcls.AgTypeNameMap["CONTROL_ENGINE_CONSTANT"] = CONTROL_ENGINE_CONSTANT

class CONTROL_ENGINE_CUSTOM(IntEnum):
    """Custom engine model properties that can be selected as control parameters for a Target Sequence."""
    GRAV = 0
    """Earth surface gravity acceleration for Isp conversions."""

CONTROL_ENGINE_CUSTOM.GRAV.__doc__ = "Earth surface gravity acceleration for Isp conversions."

agcls.AgTypeNameMap["CONTROL_ENGINE_CUSTOM"] = CONTROL_ENGINE_CUSTOM

class CONTROL_ENGINE_THROTTLE_TABLE(IntEnum):
    """Throttle table engine model properties that can be selected as control parameters for a Target Sequence."""
    GRAV = 0
    """Gravitational acceleration constant at sea level on the Earth."""
    PERCENT_DEGRADATION_PER_YEAR = 1
    """The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."""
    REFERENCE_EPOCH = 2
    """The date and time used as a reference epoch for degradation."""

CONTROL_ENGINE_THROTTLE_TABLE.GRAV.__doc__ = "Gravitational acceleration constant at sea level on the Earth."
CONTROL_ENGINE_THROTTLE_TABLE.PERCENT_DEGRADATION_PER_YEAR.__doc__ = "The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."
CONTROL_ENGINE_THROTTLE_TABLE.REFERENCE_EPOCH.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["CONTROL_ENGINE_THROTTLE_TABLE"] = CONTROL_ENGINE_THROTTLE_TABLE

class CONTROL_ENGINE_ION(IntEnum):
    """Ion engine model properties that can be selected as control parameters for a Target Sequence."""
    FLOW_RATE_C0 = 0
    """FlowRateModel.C0 - the constant coefficient."""
    FLOW_RATE_C1 = 1
    """FlowRateModel.C1 - the linear coefficient."""
    FLOW_RATE_C2 = 2
    """FlowRateModel.C2 - the quadratic coefficient."""
    FLOW_RATE_C3 = 3
    """FlowRateModel.C3 - the cubic coefficient."""
    GRAV = 4
    """Gravitational acceleration constant at sea level on the Earth."""
    ISP_C0 = 5
    """IspModel.C0 - the constant coefficient."""
    ISP_C1 = 6
    """IspModel.C1 - the linear coefficient."""
    ISP_C2 = 7
    """IspModel.C2 - the quadratic coefficient."""
    ISP_C3 = 8
    """IspModel.C3 - the cubic coefficient."""
    MASS_FLOW_EFFICIENCY_C0 = 9
    """MassFlowEfficiencyModel.C0 - the constant coefficient."""
    MASS_FLOW_EFFICIENCY_C1 = 10
    """MassFlowEfficiencyModel.C1 - the linear coefficient."""
    MASS_FLOW_EFFICIENCY_C2 = 11
    """MassFlowEfficiencyModel.C2 - the quadratic coefficient."""
    MASS_FLOW_EFFICIENCY_C3 = 12
    """MassFlowEfficiencyModel.C3 - the cubic coefficient."""
    MAX_INPUT_POWER = 13
    """Minimum power required for the engine to produce thrust. """
    MIN_REQUIRED_POWER = 14
    """Maximum power that can be used by the engine to produce thrust."""
    PERCENT_DEGRADATION_PER_YEAR = 15
    """The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."""
    PERCENT_THROTTLE = 16
    """Percentage of available thrust to use (100 is full on, 0 is off)."""
    POWER_EFFICIENCY_C0 = 17
    """PowerEfficiencyModel.C0 - the constant coefficient."""
    POWER_EFFICIENCY_C1 = 18
    """PowerEfficiencyModel.C1 - the linear coefficient."""
    POWER_EFFICIENCY_C2 = 19
    """PowerEfficiencyModel.C2 - the quadratic coefficient."""
    POWER_EFFICIENCY_C3 = 20
    """PowerEfficiencyModel.C3 - the cubic coefficient."""
    REFERENCE_EPOCH = 21
    """The date and time used as a reference epoch for degradation."""

CONTROL_ENGINE_ION.FLOW_RATE_C0.__doc__ = "FlowRateModel.C0 - the constant coefficient."
CONTROL_ENGINE_ION.FLOW_RATE_C1.__doc__ = "FlowRateModel.C1 - the linear coefficient."
CONTROL_ENGINE_ION.FLOW_RATE_C2.__doc__ = "FlowRateModel.C2 - the quadratic coefficient."
CONTROL_ENGINE_ION.FLOW_RATE_C3.__doc__ = "FlowRateModel.C3 - the cubic coefficient."
CONTROL_ENGINE_ION.GRAV.__doc__ = "Gravitational acceleration constant at sea level on the Earth."
CONTROL_ENGINE_ION.ISP_C0.__doc__ = "IspModel.C0 - the constant coefficient."
CONTROL_ENGINE_ION.ISP_C1.__doc__ = "IspModel.C1 - the linear coefficient."
CONTROL_ENGINE_ION.ISP_C2.__doc__ = "IspModel.C2 - the quadratic coefficient."
CONTROL_ENGINE_ION.ISP_C3.__doc__ = "IspModel.C3 - the cubic coefficient."
CONTROL_ENGINE_ION.MASS_FLOW_EFFICIENCY_C0.__doc__ = "MassFlowEfficiencyModel.C0 - the constant coefficient."
CONTROL_ENGINE_ION.MASS_FLOW_EFFICIENCY_C1.__doc__ = "MassFlowEfficiencyModel.C1 - the linear coefficient."
CONTROL_ENGINE_ION.MASS_FLOW_EFFICIENCY_C2.__doc__ = "MassFlowEfficiencyModel.C2 - the quadratic coefficient."
CONTROL_ENGINE_ION.MASS_FLOW_EFFICIENCY_C3.__doc__ = "MassFlowEfficiencyModel.C3 - the cubic coefficient."
CONTROL_ENGINE_ION.MAX_INPUT_POWER.__doc__ = "Minimum power required for the engine to produce thrust. "
CONTROL_ENGINE_ION.MIN_REQUIRED_POWER.__doc__ = "Maximum power that can be used by the engine to produce thrust."
CONTROL_ENGINE_ION.PERCENT_DEGRADATION_PER_YEAR.__doc__ = "The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year."
CONTROL_ENGINE_ION.PERCENT_THROTTLE.__doc__ = "Percentage of available thrust to use (100 is full on, 0 is off)."
CONTROL_ENGINE_ION.POWER_EFFICIENCY_C0.__doc__ = "PowerEfficiencyModel.C0 - the constant coefficient."
CONTROL_ENGINE_ION.POWER_EFFICIENCY_C1.__doc__ = "PowerEfficiencyModel.C1 - the linear coefficient."
CONTROL_ENGINE_ION.POWER_EFFICIENCY_C2.__doc__ = "PowerEfficiencyModel.C2 - the quadratic coefficient."
CONTROL_ENGINE_ION.POWER_EFFICIENCY_C3.__doc__ = "PowerEfficiencyModel.C3 - the cubic coefficient."
CONTROL_ENGINE_ION.REFERENCE_EPOCH.__doc__ = "The date and time used as a reference epoch for degradation."

agcls.AgTypeNameMap["CONTROL_ENGINE_ION"] = CONTROL_ENGINE_ION

class CONTROL_ENGINE_MODEL_POLY(IntEnum):
    """Polynomial Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    THRUST_C0 = 0
    """The thrust C0 coefficient."""
    THRUST_C1 = 1
    """The thrust C1 coefficient."""
    THRUST_C2 = 2
    """The thrust C2 coefficient."""
    THRUST_C3 = 3
    """The thrust C3 coefficient."""
    THRUST_C4 = 4
    """The thrust C4 coefficient."""
    THRUST_C5 = 5
    """The thrust C5 coefficient."""
    THRUST_C6 = 6
    """The thrust C6 coefficient."""
    THRUST_C7 = 7
    """The thrust C7 coefficient."""
    THRUST_B7 = 8
    """The thrust B7 coefficient."""
    THRUST_E4 = 9
    """The thrust E4 coefficient."""
    THRUST_E5 = 10
    """The thrust E5 coefficient."""
    THRUST_E6 = 11
    """The thrust E6 coefficient."""
    THRUST_E7 = 12
    """The thrust E7 coefficient."""
    THRUST_K0 = 13
    """The thrust K0 coefficient."""
    THRUST_K1 = 14
    """The thrust K1 coefficient."""
    THRUST_REFERENCE_TEMP = 15
    """The thrust reference temperature, Tr."""
    ISP_C0 = 16
    """The specific impulse C0 coefficient."""
    ISP_C1 = 17
    """The specific impulse C1 coefficient."""
    ISP_C2 = 18
    """The specific impulse C2 coefficient."""
    ISP_C3 = 19
    """The specific impulse C3 coefficient."""
    ISP_C4 = 20
    """The specific impulse C4 coefficient."""
    ISP_C5 = 21
    """The specific impulse C5 coefficient."""
    ISP_C6 = 22
    """The specific impulse C6 coefficient."""
    ISP_C7 = 23
    """The specific impulse C7 coefficient."""
    ISP_B7 = 24
    """The specific impulse B7 coefficient."""
    ISP_E4 = 25
    """The specific impulse E4 coefficient."""
    ISP_E5 = 26
    """The specific impulse E5 coefficient."""
    ISP_E6 = 27
    """The specific impulse E6 coefficient."""
    ISP_E7 = 28
    """The specific impulse E7 coefficient."""
    ISP_K0 = 29
    """The specific impulse K0 coefficient."""
    ISP_K1 = 30
    """The specific impulse K1 coefficient."""
    ISP_REFERENCE_TEMP = 31
    """The specific impulse reference temperature, Tr."""
    GRAV = 32
    """The gravitational acceleration constant at sea level on the Earth."""

CONTROL_ENGINE_MODEL_POLY.THRUST_C0.__doc__ = "The thrust C0 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C1.__doc__ = "The thrust C1 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C2.__doc__ = "The thrust C2 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C3.__doc__ = "The thrust C3 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C4.__doc__ = "The thrust C4 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C5.__doc__ = "The thrust C5 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C6.__doc__ = "The thrust C6 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_C7.__doc__ = "The thrust C7 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_B7.__doc__ = "The thrust B7 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_E4.__doc__ = "The thrust E4 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_E5.__doc__ = "The thrust E5 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_E6.__doc__ = "The thrust E6 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_E7.__doc__ = "The thrust E7 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_K0.__doc__ = "The thrust K0 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_K1.__doc__ = "The thrust K1 coefficient."
CONTROL_ENGINE_MODEL_POLY.THRUST_REFERENCE_TEMP.__doc__ = "The thrust reference temperature, Tr."
CONTROL_ENGINE_MODEL_POLY.ISP_C0.__doc__ = "The specific impulse C0 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C1.__doc__ = "The specific impulse C1 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C2.__doc__ = "The specific impulse C2 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C3.__doc__ = "The specific impulse C3 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C4.__doc__ = "The specific impulse C4 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C5.__doc__ = "The specific impulse C5 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C6.__doc__ = "The specific impulse C6 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_C7.__doc__ = "The specific impulse C7 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_B7.__doc__ = "The specific impulse B7 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_E4.__doc__ = "The specific impulse E4 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_E5.__doc__ = "The specific impulse E5 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_E6.__doc__ = "The specific impulse E6 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_E7.__doc__ = "The specific impulse E7 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_K0.__doc__ = "The specific impulse K0 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_K1.__doc__ = "The specific impulse K1 coefficient."
CONTROL_ENGINE_MODEL_POLY.ISP_REFERENCE_TEMP.__doc__ = "The specific impulse reference temperature, Tr."
CONTROL_ENGINE_MODEL_POLY.GRAV.__doc__ = "The gravitational acceleration constant at sea level on the Earth."

agcls.AgTypeNameMap["CONTROL_ENGINE_MODEL_POLY"] = CONTROL_ENGINE_MODEL_POLY

class ENGINE_MODEL_FUNCTION(IntEnum):
    """The engine model function types."""
    ISP = 0
    """Isp as an independent variable of an equation."""
    POWER = 1
    """Power as an independent variable of an equation."""
    ISP_AND_POWER = 2
    """Isp and Power as independent variables of an equation."""

ENGINE_MODEL_FUNCTION.ISP.__doc__ = "Isp as an independent variable of an equation."
ENGINE_MODEL_FUNCTION.POWER.__doc__ = "Power as an independent variable of an equation."
ENGINE_MODEL_FUNCTION.ISP_AND_POWER.__doc__ = "Isp and Power as independent variables of an equation."

agcls.AgTypeNameMap["ENGINE_MODEL_FUNCTION"] = ENGINE_MODEL_FUNCTION

class THROTTLE_TABLE_OPERATION_MODE(IntEnum):
    """Engine operation mode."""
    ENGINE_OPERATION_REG_POLY = 0
    """Interpolation of engine performance data based on a regression polynomial model."""
    ENGINE_OPERATION_PIECEWISE_LINEAR = 1
    """Interpolation of engine performance data based on a piecewise linear model."""
    ENGINE_OPERATION_DISCRETE = 2
    """Discrete engine operation: piecewise constant engine performance as a function of available power."""

THROTTLE_TABLE_OPERATION_MODE.ENGINE_OPERATION_REG_POLY.__doc__ = "Interpolation of engine performance data based on a regression polynomial model."
THROTTLE_TABLE_OPERATION_MODE.ENGINE_OPERATION_PIECEWISE_LINEAR.__doc__ = "Interpolation of engine performance data based on a piecewise linear model."
THROTTLE_TABLE_OPERATION_MODE.ENGINE_OPERATION_DISCRETE.__doc__ = "Discrete engine operation: piecewise constant engine performance as a function of available power."

agcls.AgTypeNameMap["THROTTLE_TABLE_OPERATION_MODE"] = THROTTLE_TABLE_OPERATION_MODE

class IDEAL_ORBIT_RADIUS(IntEnum):
    """Ideal Orbit Radius."""
    EPOCH_CENTERED_AVG_SOURCE_RADIUS = 0
    """Epoch centered average source radius."""
    INSTANT_CHAR_DISTANCE = 1
    """Instantanous characteristic distance."""

IDEAL_ORBIT_RADIUS.EPOCH_CENTERED_AVG_SOURCE_RADIUS.__doc__ = "Epoch centered average source radius."
IDEAL_ORBIT_RADIUS.INSTANT_CHAR_DISTANCE.__doc__ = "Instantanous characteristic distance."

agcls.AgTypeNameMap["IDEAL_ORBIT_RADIUS"] = IDEAL_ORBIT_RADIUS

class ROTATING_COORDINATE_SYSTEM(IntEnum):
    """Barycenter centered rotating system."""
    BARYCENTER_CENTERED = 0
    """Barycenter centered rotating system."""
    PRIMARY_CENTERED = 1
    """Primary centered rotating system."""
    SECONDARY_CENTERED = 2
    """Secondary centered rotating system."""
    L1_CENTERED = 3
    """L1 centered rotating system."""
    L2_CENTERED = 4
    """L2 centered rotating system."""
    L3_CENTERED = 5
    """L3 centered rotating system."""
    L4_CENTERED = 6
    """L4 centered rotating system."""
    L5_CENTERED = 7
    """L5 centered rotating system."""

ROTATING_COORDINATE_SYSTEM.BARYCENTER_CENTERED.__doc__ = "Barycenter centered rotating system."
ROTATING_COORDINATE_SYSTEM.PRIMARY_CENTERED.__doc__ = "Primary centered rotating system."
ROTATING_COORDINATE_SYSTEM.SECONDARY_CENTERED.__doc__ = "Secondary centered rotating system."
ROTATING_COORDINATE_SYSTEM.L1_CENTERED.__doc__ = "L1 centered rotating system."
ROTATING_COORDINATE_SYSTEM.L2_CENTERED.__doc__ = "L2 centered rotating system."
ROTATING_COORDINATE_SYSTEM.L3_CENTERED.__doc__ = "L3 centered rotating system."
ROTATING_COORDINATE_SYSTEM.L4_CENTERED.__doc__ = "L4 centered rotating system."
ROTATING_COORDINATE_SYSTEM.L5_CENTERED.__doc__ = "L5 centered rotating system."

agcls.AgTypeNameMap["ROTATING_COORDINATE_SYSTEM"] = ROTATING_COORDINATE_SYSTEM

class CONTROL_THRUSTERS(IntEnum):
    """Thruster properties that can be selected as control parameters for a Target Sequence."""
    EQUIV_ON_TIME = 0
    """The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced."""
    THRUST_EFFICIENCY = 1
    """The thruster efficiency."""
    SPHERICAL_AZIMUTH = 2
    """Thruster direction defined as a vector in the body frame. Spherical azimuth value."""
    SPHERICAL_ELEVATION = 3
    """Thruster direction defined as a vector in the body frame. Spherical elevation value."""
    CARTESIAN_X = 4
    """Thruster direction defined as a vector in the body frame. Cartesian X value."""
    CARTESIAN_Y = 5
    """Thruster direction defined as a vector in the body frame. Cartesian Y value."""
    CARTESIAN_Z = 6
    """Thruster direction defined as a vector in the body frame. Cartesian Z value."""

CONTROL_THRUSTERS.EQUIV_ON_TIME.__doc__ = "The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced."
CONTROL_THRUSTERS.THRUST_EFFICIENCY.__doc__ = "The thruster efficiency."
CONTROL_THRUSTERS.SPHERICAL_AZIMUTH.__doc__ = "Thruster direction defined as a vector in the body frame. Spherical azimuth value."
CONTROL_THRUSTERS.SPHERICAL_ELEVATION.__doc__ = "Thruster direction defined as a vector in the body frame. Spherical elevation value."
CONTROL_THRUSTERS.CARTESIAN_X.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian X value."
CONTROL_THRUSTERS.CARTESIAN_Y.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian Y value."
CONTROL_THRUSTERS.CARTESIAN_Z.__doc__ = "Thruster direction defined as a vector in the body frame. Cartesian Z value."

agcls.AgTypeNameMap["CONTROL_THRUSTERS"] = CONTROL_THRUSTERS

class THRUSTER_DIRECTION(IntEnum):
    """The thruster direction type."""
    ACCELERATION = 0
    """The direction that is opposite the direction of the exhaust."""
    EXHAUST = 1
    """The direction of engine exhaust."""

THRUSTER_DIRECTION.ACCELERATION.__doc__ = "The direction that is opposite the direction of the exhaust."
THRUSTER_DIRECTION.EXHAUST.__doc__ = "The direction of engine exhaust."

agcls.AgTypeNameMap["THRUSTER_DIRECTION"] = THRUSTER_DIRECTION

class CRITERIA(IntEnum):
    """The criteria type."""
    EQUALS = 0
    """The test parameter must be equal (within the specified tolerance) to the specified value."""
    GREATER_THAN = 1
    """The test parameter must be greater than the specified value."""
    GREATER_THAN_MINIMUM = 2
    """The current value for the calculation object is greater by the specified tolerance than the minimum reached by that object during the segment."""
    LESS_THAN = 3
    """The test parameter must be less than the specified value."""
    LESS_THAN_MAXIMUM = 4
    """The current value for the calculation object is less by the specified tolerance than the maximum reached by that object during the segment."""
    NOT_EQUAL_TO = 5
    """The test parameter must be not equal (within the specified tolerance) to the specified value."""

CRITERIA.EQUALS.__doc__ = "The test parameter must be equal (within the specified tolerance) to the specified value."
CRITERIA.GREATER_THAN.__doc__ = "The test parameter must be greater than the specified value."
CRITERIA.GREATER_THAN_MINIMUM.__doc__ = "The current value for the calculation object is greater by the specified tolerance than the minimum reached by that object during the segment."
CRITERIA.LESS_THAN.__doc__ = "The test parameter must be less than the specified value."
CRITERIA.LESS_THAN_MAXIMUM.__doc__ = "The current value for the calculation object is less by the specified tolerance than the maximum reached by that object during the segment."
CRITERIA.NOT_EQUAL_TO.__doc__ = "The test parameter must be not equal (within the specified tolerance) to the specified value."

agcls.AgTypeNameMap["CRITERIA"] = CRITERIA

class ERROR_CONTROL(IntEnum):
    """Error Control for the numerical integrator."""
    ABSOLUTE = 0
    """The error estimate of each integrated component is compared to the absolute error tolerance. Error control with this method is based on absolute values, e.g. in meters for position, m/sec for velocity, etc."""
    RELATIVE_BY_COMPONENT = 1
    """The error estimate of each element being integrated relative to the element's value at the start of the step is compared to the relative error tolerance, and the absolute error estimate of each element is compared to the absolute error tolerance."""
    RELATIVE_TO_STATE = 2
    """Relative to State error control."""
    RELATIVE_TO_STEP = 3
    """Error estimate of each integrated component relative to the element's change in value over the step is compared to the relative error tolerance, and the absolute error estimate of each integrated component is compared to the absolute error tolerance."""

ERROR_CONTROL.ABSOLUTE.__doc__ = "The error estimate of each integrated component is compared to the absolute error tolerance. Error control with this method is based on absolute values, e.g. in meters for position, m/sec for velocity, etc."
ERROR_CONTROL.RELATIVE_BY_COMPONENT.__doc__ = "The error estimate of each element being integrated relative to the element's value at the start of the step is compared to the relative error tolerance, and the absolute error estimate of each element is compared to the absolute error tolerance."
ERROR_CONTROL.RELATIVE_TO_STATE.__doc__ = "Relative to State error control."
ERROR_CONTROL.RELATIVE_TO_STEP.__doc__ = "Error estimate of each integrated component relative to the element's change in value over the step is compared to the relative error tolerance, and the absolute error estimate of each integrated component is compared to the absolute error tolerance."

agcls.AgTypeNameMap["ERROR_CONTROL"] = ERROR_CONTROL

class PREDICTOR_CORRECTOR(IntEnum):
    """Predictor corrector scheme for the numerical integrator."""
    FULL = 0
    """All force models are re-evaluated at each corrector step."""
    PSEUDO = 1
    """Only the two-body acceleration is re-evaluated at each corrector step."""

PREDICTOR_CORRECTOR.FULL.__doc__ = "All force models are re-evaluated at each corrector step."
PREDICTOR_CORRECTOR.PSEUDO.__doc__ = "Only the two-body acceleration is re-evaluated at each corrector step."

agcls.AgTypeNameMap["PREDICTOR_CORRECTOR"] = PREDICTOR_CORRECTOR

class NUMERICAL_INTEGRATOR(IntEnum):
    """Numerical integrator type."""
    RUNGE_KUTTA4_TH_ADAPT = 0
    """A 4th order Runge-Kutta integrator, adapting step size by comparing one full step to two half steps. Although this technique can be quite slow compared to the other algorithms, it is very common and can be used for comparison."""
    RUNGE_KUTTA_F_7TH_8TH = 1
    """A 7th order Runge-Kutta-Fehlberg integrator with 8th order error control. This is the default integrator used in the HPOP propagator."""
    RUNGE_KUTTA_V_8TH_9TH = 2
    """A 9th order Runge-Kutta-Verner integrator with 8th order error control."""
    BULIRSCH_STOER = 3
    """An integrator based on Richardson extrapolation with automatic step size control."""
    GAUSS_JACKSON = 4
    """A 12th order Gauss-Jackson integrator for second order ODEs. There is currently no error control implemented for this method, meaning that a fixed step size is used."""
    RUNGE_KUTTA2_ND3_RD = 5
    """A 2nd order Runge-Kutta integrator with 3rd order error control, using Bogacki and Shampine coefficients."""
    RUNGE_KUTTA4_TH5_TH = 6
    """A 4th order Runge-Kutta integrator with 5th order error control, using Cash-Karp coefficients."""
    RUNGE_KUTTA4_TH = 7
    """A 4th order Runge-Kutta integrator that does not employ error control."""

NUMERICAL_INTEGRATOR.RUNGE_KUTTA4_TH_ADAPT.__doc__ = "A 4th order Runge-Kutta integrator, adapting step size by comparing one full step to two half steps. Although this technique can be quite slow compared to the other algorithms, it is very common and can be used for comparison."
NUMERICAL_INTEGRATOR.RUNGE_KUTTA_F_7TH_8TH.__doc__ = "A 7th order Runge-Kutta-Fehlberg integrator with 8th order error control. This is the default integrator used in the HPOP propagator."
NUMERICAL_INTEGRATOR.RUNGE_KUTTA_V_8TH_9TH.__doc__ = "A 9th order Runge-Kutta-Verner integrator with 8th order error control."
NUMERICAL_INTEGRATOR.BULIRSCH_STOER.__doc__ = "An integrator based on Richardson extrapolation with automatic step size control."
NUMERICAL_INTEGRATOR.GAUSS_JACKSON.__doc__ = "A 12th order Gauss-Jackson integrator for second order ODEs. There is currently no error control implemented for this method, meaning that a fixed step size is used."
NUMERICAL_INTEGRATOR.RUNGE_KUTTA2_ND3_RD.__doc__ = "A 2nd order Runge-Kutta integrator with 3rd order error control, using Bogacki and Shampine coefficients."
NUMERICAL_INTEGRATOR.RUNGE_KUTTA4_TH5_TH.__doc__ = "A 4th order Runge-Kutta integrator with 5th order error control, using Cash-Karp coefficients."
NUMERICAL_INTEGRATOR.RUNGE_KUTTA4_TH.__doc__ = "A 4th order Runge-Kutta integrator that does not employ error control."

agcls.AgTypeNameMap["NUMERICAL_INTEGRATOR"] = NUMERICAL_INTEGRATOR

class COEFF_RUNGE_KUTTA_V_8TH_9TH(IntEnum):
    """Coefficient sets for RKV8th(9th) integrator."""
    COEFF_1978 = 0
    """SIAM 1978."""
    EFFICIENT = 1
    """Efficient."""

COEFF_RUNGE_KUTTA_V_8TH_9TH.COEFF_1978.__doc__ = "SIAM 1978."
COEFF_RUNGE_KUTTA_V_8TH_9TH.EFFICIENT.__doc__ = "Efficient."

agcls.AgTypeNameMap["COEFF_RUNGE_KUTTA_V_8TH_9TH"] = COEFF_RUNGE_KUTTA_V_8TH_9TH


class IUserVariableDefinitionCollection(object):
    """The list of User Variables accessed through the Driver."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "remove_all" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6,
                             "get_item_by_index" : 7,
                             "get_item_by_name" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariableDefinitionCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariableDefinitionCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariableDefinitionCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IUserVariableDefinition":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "UserVariableDefinition":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, parameterName:str) -> "UserVariableDefinition":
        """Add a user variable to the collection."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._add_metadata, parameterName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a user variable."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all user variables."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._remove_all_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._get_count_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "UserVariableDefinition":
        """Retrieve a user variable definition in the collection by index."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "UserVariableDefinition":
        """Retrieve a user variable definition in the collection by name."""
        return self._intf.invoke(IUserVariableDefinitionCollection._metadata, IUserVariableDefinitionCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}", IUserVariableDefinitionCollection)
agcls.AgTypeNameMap["IUserVariableDefinitionCollection"] = IUserVariableDefinitionCollection

class IUserVariableCollection(object):
    """The list of User Variables accessed through a segment that sets initial conditions."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_item_by_index" : 4,
                             "get_item_by_name" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariableCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariableCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariableCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IUserVariable":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "UserVariable":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IUserVariableCollection._metadata, IUserVariableCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IUserVariableCollection._metadata, IUserVariableCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IUserVariableCollection._metadata, IUserVariableCollection._get_count_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "UserVariable":
        """Retrieve a user variable in the collection by index."""
        return self._intf.invoke(IUserVariableCollection._metadata, IUserVariableCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "UserVariable":
        """Retrieve a user variable in the collection by name."""
        return self._intf.invoke(IUserVariableCollection._metadata, IUserVariableCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}", IUserVariableCollection)
agcls.AgTypeNameMap["IUserVariableCollection"] = IUserVariableCollection

class IUserVariableUpdateCollection(object):
    """The list of User Variables accessed through an Update segment"""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{7DC1728B-C032-4810-BE7B-7801C5CF906C}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_item_by_index" : 4,
                             "get_item_by_name" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariableUpdateCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariableUpdateCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariableUpdateCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IUserVariableUpdate":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "UserVariableUpdate":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IUserVariableUpdateCollection._metadata, IUserVariableUpdateCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IUserVariableUpdateCollection._metadata, IUserVariableUpdateCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IUserVariableUpdateCollection._metadata, IUserVariableUpdateCollection._get_count_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "UserVariableUpdate":
        """Retrieve a user variable update in the collection by index."""
        return self._intf.invoke(IUserVariableUpdateCollection._metadata, IUserVariableUpdateCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "UserVariableUpdate":
        """Retrieve a user variable update in the collection by name."""
        return self._intf.invoke(IUserVariableUpdateCollection._metadata, IUserVariableUpdateCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{7DC1728B-C032-4810-BE7B-7801C5CF906C}", IUserVariableUpdateCollection)
agcls.AgTypeNameMap["IUserVariableUpdateCollection"] = IUserVariableUpdateCollection

class ICalculationGraphCollection(object):
    """The list of Calculations Graphs to display."""
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "add" : 3,
                             "remove" : 4,
                             "remove_all" : 5,
                             "get_count" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICalculationGraphCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICalculationGraphCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICalculationGraphCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> str:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.BSTR_arg,) }
    def item(self, index:int) -> str:
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ICalculationGraphCollection._metadata, ICalculationGraphCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ICalculationGraphCollection._metadata, ICalculationGraphCollection._get__NewEnum_metadata)

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def add(self, graphName:str) -> None:
        """Add a calculation graph"""
        return self._intf.invoke(ICalculationGraphCollection._metadata, ICalculationGraphCollection._add_metadata, graphName)

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove(self, graphName:str) -> None:
        """Remove a parameter."""
        return self._intf.invoke(ICalculationGraphCollection._metadata, ICalculationGraphCollection._remove_metadata, graphName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all parameters."""
        return self._intf.invoke(ICalculationGraphCollection._metadata, ICalculationGraphCollection._remove_all_metadata, )

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ICalculationGraphCollection._metadata, ICalculationGraphCollection._get_count_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}", ICalculationGraphCollection)
agcls.AgTypeNameMap["ICalculationGraphCollection"] = ICalculationGraphCollection

class IConstraintCollection(object):
    """The list of constraints assigned to a stopping condition."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "item" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "cut" : 6,
                             "paste" : 7,
                             "insert_copy" : 8,
                             "get_item_by_index" : 9,
                             "get_item_by_name" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IConstraintCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IConstraintCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IConstraintCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAsTriggerCondition":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, resultName:str) -> "AsTriggerCondition":
        """Add a constraint to the collection."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._add_metadata, resultName, out_arg())

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "AsTriggerCondition":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._item_metadata, indexOrName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a specified constraint from the collection."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IConstraintCollection._metadata, IConstraintCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IConstraintCollection._metadata, IConstraintCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the constraint into the clipboard and removes the constraint from the list."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "AsTriggerCondition":
        """Pastes the constraint from the clipboard and inserts into the list."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IAsTriggerCondition"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, cond:"IAsTriggerCondition") -> "AsTriggerCondition":
        """Copy the constraint and inserts the copy into the list."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._insert_copy_metadata, cond, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "AsTriggerCondition":
        """Retrieve a constraint from the collection by index."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "AsTriggerCondition":
        """Retrieve a constraint from the collection by name."""
        return self._intf.invoke(IConstraintCollection._metadata, IConstraintCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}", IConstraintCollection)
agcls.AgTypeNameMap["IConstraintCollection"] = IConstraintCollection

class IPluginProperties(object):
    """Properties of a plugin attitude control."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_property" : 1,
                             "set_property" : 2,
                             "get_available_properties" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPluginProperties)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPluginProperties)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPluginProperties, None)
    
    _get_property_metadata = { "name" : "get_property",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def get_property(self, path:str) -> typing.Any:
        """Method to get a property."""
        return self._intf.invoke(IPluginProperties._metadata, IPluginProperties._get_property_metadata, path, out_arg())

    _set_property_metadata = { "name" : "set_property",
            "arg_types" : (agcom.BSTR, agcom.VARIANT,),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def set_property(self, path:str, propertyValue:typing.Any) -> None:
        """Method to set a property."""
        return self._intf.invoke(IPluginProperties._metadata, IPluginProperties._set_property_metadata, path, propertyValue)

    _get_available_properties_metadata = { "name" : "available_properties",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def available_properties(self) -> list:
        """Return an array of all available properties."""
        return self._intf.get_property(IPluginProperties._metadata, IPluginProperties._get_available_properties_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}", IPluginProperties)
agcls.AgTypeNameMap["IPluginProperties"] = IPluginProperties

class ISNOPTControlCollection(object):
    """Properties for the list of SNOPT control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{2E9D2998-066F-4DC6-9672-8EDF9F604351}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISNOPTControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISNOPTControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISNOPTControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ISNOPTControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "SNOPTControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ISNOPTControlCollection._metadata, ISNOPTControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ISNOPTControlCollection._metadata, ISNOPTControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ISNOPTControlCollection._metadata, ISNOPTControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "SNOPTControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(ISNOPTControlCollection._metadata, ISNOPTControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{2E9D2998-066F-4DC6-9672-8EDF9F604351}", ISNOPTControlCollection)
agcls.AgTypeNameMap["ISNOPTControlCollection"] = ISNOPTControlCollection

class ISNOPTResultCollection(object):
    """SNOPT result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{53F7183C-7957-4C6F-8987-399A3F4C2A26}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISNOPTResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISNOPTResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISNOPTResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ISNOPTResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "SNOPTResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ISNOPTResultCollection._metadata, ISNOPTResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ISNOPTResultCollection._metadata, ISNOPTResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ISNOPTResultCollection._metadata, ISNOPTResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "SNOPTResult":
        """Return the result specified by the object/result names."""
        return self._intf.invoke(ISNOPTResultCollection._metadata, ISNOPTResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{53F7183C-7957-4C6F-8987-399A3F4C2A26}", ISNOPTResultCollection)
agcls.AgTypeNameMap["ISNOPTResultCollection"] = ISNOPTResultCollection

class IIPOPTControlCollection(object):
    """Properties for the list of IPOPT control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IIPOPTControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IIPOPTControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IIPOPTControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IIPOPTControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "IPOPTControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IIPOPTControlCollection._metadata, IIPOPTControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IIPOPTControlCollection._metadata, IIPOPTControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IIPOPTControlCollection._metadata, IIPOPTControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "IPOPTControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(IIPOPTControlCollection._metadata, IIPOPTControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}", IIPOPTControlCollection)
agcls.AgTypeNameMap["IIPOPTControlCollection"] = IIPOPTControlCollection

class IIPOPTResultCollection(object):
    """IPOPT result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IIPOPTResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IIPOPTResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IIPOPTResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IIPOPTResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "IPOPTResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IIPOPTResultCollection._metadata, IIPOPTResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IIPOPTResultCollection._metadata, IIPOPTResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IIPOPTResultCollection._metadata, IIPOPTResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "IPOPTResult":
        """Return the result specified by the object/result names."""
        return self._intf.invoke(IIPOPTResultCollection._metadata, IIPOPTResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}", IIPOPTResultCollection)
agcls.AgTypeNameMap["IIPOPTResultCollection"] = IIPOPTResultCollection

class IManeuverOptimalFiniteSNOPTOptimizer(object):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{176AB7BE-90C8-4558-8E24-9E9862CE18FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_objective" : 1,
                             "set_objective" : 2,
                             "get_max_major_iterations" : 3,
                             "set_max_major_iterations" : 4,
                             "get_tolerance_on_major_feasibility" : 5,
                             "set_tolerance_on_major_feasibility" : 6,
                             "get_tolerance_on_major_optimality" : 7,
                             "set_tolerance_on_major_optimality" : 8,
                             "get_max_minor_iterations" : 9,
                             "set_max_minor_iterations" : 10,
                             "get_tolerance_on_minor_feasibility" : 11,
                             "set_tolerance_on_minor_feasibility" : 12,
                             "get_options_filename" : 13,
                             "set_options_filename" : 14,
                             "get_provide_runtime_type_info" : 15,
                             "get_use_console_monitor" : 16,
                             "set_use_console_monitor" : 17,
                             "get_allow_internal_primal_infeasibility_measure_normalization" : 18,
                             "set_allow_internal_primal_infeasibility_measure_normalization" : 19,
                             "get_snopt_scaling" : 20,
                             "set_snopt_scaling" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteSNOPTOptimizer)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteSNOPTOptimizer)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteSNOPTOptimizer, None)
    
    _get_objective_metadata = { "name" : "objective",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SNOPT_OBJECTIVE),) }
    @property
    def objective(self) -> "OPTIMAL_FINITE_SNOPT_OBJECTIVE":
        """Objective."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_objective_metadata)

    _set_objective_metadata = { "name" : "objective",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SNOPT_OBJECTIVE),) }
    @objective.setter
    def objective(self, newVal:"OPTIMAL_FINITE_SNOPT_OBJECTIVE") -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_objective_metadata, newVal)

    _get_max_major_iterations_metadata = { "name" : "max_major_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_major_iterations(self) -> int:
        """The maximum number of major iterations allowed."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_max_major_iterations_metadata)

    _set_max_major_iterations_metadata = { "name" : "max_major_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_major_iterations.setter
    def max_major_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_max_major_iterations_metadata, newVal)

    _get_tolerance_on_major_feasibility_metadata = { "name" : "tolerance_on_major_feasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_major_feasibility(self) -> float:
        """Specify how accurately the nonlinear constraints should be satisfied."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_tolerance_on_major_feasibility_metadata)

    _set_tolerance_on_major_feasibility_metadata = { "name" : "tolerance_on_major_feasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_major_feasibility.setter
    def tolerance_on_major_feasibility(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_tolerance_on_major_feasibility_metadata, newVal)

    _get_tolerance_on_major_optimality_metadata = { "name" : "tolerance_on_major_optimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_major_optimality(self) -> float:
        """Specify the final accuracy of the dual variables."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_tolerance_on_major_optimality_metadata)

    _set_tolerance_on_major_optimality_metadata = { "name" : "tolerance_on_major_optimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_major_optimality.setter
    def tolerance_on_major_optimality(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_tolerance_on_major_optimality_metadata, newVal)

    _get_max_minor_iterations_metadata = { "name" : "max_minor_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_minor_iterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_max_minor_iterations_metadata)

    _set_max_minor_iterations_metadata = { "name" : "max_minor_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_minor_iterations.setter
    def max_minor_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_max_minor_iterations_metadata, newVal)

    _get_tolerance_on_minor_feasibility_metadata = { "name" : "tolerance_on_minor_feasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_minor_feasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_tolerance_on_minor_feasibility_metadata)

    _set_tolerance_on_minor_feasibility_metadata = { "name" : "tolerance_on_minor_feasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_minor_feasibility.setter
    def tolerance_on_minor_feasibility(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_tolerance_on_minor_feasibility_metadata, newVal)

    _get_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def options_filename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_options_filename_metadata)

    _set_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @options_filename.setter
    def options_filename(self, newVal:str) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_options_filename_metadata, newVal)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_provide_runtime_type_info_metadata)

    _get_use_console_monitor_metadata = { "name" : "use_console_monitor",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_console_monitor(self) -> bool:
        """Whether to use the out-of-process console monitor for the optimizer."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_use_console_monitor_metadata)

    _set_use_console_monitor_metadata = { "name" : "use_console_monitor",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_console_monitor.setter
    def use_console_monitor(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_use_console_monitor_metadata, newVal)

    _get_allow_internal_primal_infeasibility_measure_normalization_metadata = { "name" : "allow_internal_primal_infeasibility_measure_normalization",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def allow_internal_primal_infeasibility_measure_normalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_allow_internal_primal_infeasibility_measure_normalization_metadata)

    _set_allow_internal_primal_infeasibility_measure_normalization_metadata = { "name" : "allow_internal_primal_infeasibility_measure_normalization",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @allow_internal_primal_infeasibility_measure_normalization.setter
    def allow_internal_primal_infeasibility_measure_normalization(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_allow_internal_primal_infeasibility_measure_normalization_metadata, newVal)

    _get_snopt_scaling_metadata = { "name" : "snopt_scaling",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SNOPT_SCALING),) }
    @property
    def snopt_scaling(self) -> "OPTIMAL_FINITE_SNOPT_SCALING":
        """SNOPT scaling option."""
        return self._intf.get_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._get_snopt_scaling_metadata)

    _set_snopt_scaling_metadata = { "name" : "snopt_scaling",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SNOPT_SCALING),) }
    @snopt_scaling.setter
    def snopt_scaling(self, newVal:"OPTIMAL_FINITE_SNOPT_SCALING") -> None:
        return self._intf.set_property(IManeuverOptimalFiniteSNOPTOptimizer._metadata, IManeuverOptimalFiniteSNOPTOptimizer._set_snopt_scaling_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{176AB7BE-90C8-4558-8E24-9E9862CE18FD}", IManeuverOptimalFiniteSNOPTOptimizer)
agcls.AgTypeNameMap["IManeuverOptimalFiniteSNOPTOptimizer"] = IManeuverOptimalFiniteSNOPTOptimizer

class IManeuverOptimalFiniteInitialBoundaryConditions(object):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{872A109F-710B-49D4-9A7D-544E7044530B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_set_from_initial_guess" : 1,
                             "set_set_from_initial_guess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_l" : 8,
                             "get_provide_runtime_type_info" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteInitialBoundaryConditions)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteInitialBoundaryConditions)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteInitialBoundaryConditions, None)
    
    _get_set_from_initial_guess_metadata = { "name" : "set_from_initial_guess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def set_from_initial_guess(self) -> bool:
        """Set initial boundary conditions from initial guess."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_set_from_initial_guess_metadata)

    _set_set_from_initial_guess_metadata = { "name" : "set_from_initial_guess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @set_from_initial_guess.setter
    def set_from_initial_guess(self, newVal:bool) -> None:
        """Set initial boundary conditions from initial guess."""
        return self._intf.set_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._set_set_from_initial_guess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_q_metadata)

    _get_l_metadata = { "name" : "l",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def l(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_l_metadata)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IManeuverOptimalFiniteInitialBoundaryConditions._metadata, IManeuverOptimalFiniteInitialBoundaryConditions._get_provide_runtime_type_info_metadata)


agcls.AgClassCatalog.add_catalog_entry("{872A109F-710B-49D4-9A7D-544E7044530B}", IManeuverOptimalFiniteInitialBoundaryConditions)
agcls.AgTypeNameMap["IManeuverOptimalFiniteInitialBoundaryConditions"] = IManeuverOptimalFiniteInitialBoundaryConditions

class IManeuverOptimalFiniteFinalBoundaryConditions(object):
    """Properties of final boundary conditions for optimal finite maneuver."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_set_from_final_guess" : 1,
                             "set_set_from_final_guess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_l" : 8,
                             "get_lower_delta_final_time" : 9,
                             "set_lower_delta_final_time" : 10,
                             "get_upper_delta_final_time" : 11,
                             "set_upper_delta_final_time" : 12,
                             "get_provide_runtime_type_info" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteFinalBoundaryConditions)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteFinalBoundaryConditions)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteFinalBoundaryConditions, None)
    
    _get_set_from_final_guess_metadata = { "name" : "set_from_final_guess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def set_from_final_guess(self) -> bool:
        """Set initial boundary conditions from initial guess."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_set_from_final_guess_metadata)

    _set_set_from_final_guess_metadata = { "name" : "set_from_final_guess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @set_from_final_guess.setter
    def set_from_final_guess(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._set_set_from_final_guess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_q_metadata)

    _get_l_metadata = { "name" : "l",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def l(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_l_metadata)

    _get_lower_delta_final_time_metadata = { "name" : "lower_delta_final_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lower_delta_final_time(self) -> float:
        """Lower delta for final time"""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_lower_delta_final_time_metadata)

    _set_lower_delta_final_time_metadata = { "name" : "lower_delta_final_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @lower_delta_final_time.setter
    def lower_delta_final_time(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._set_lower_delta_final_time_metadata, newVal)

    _get_upper_delta_final_time_metadata = { "name" : "upper_delta_final_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def upper_delta_final_time(self) -> float:
        """Upper delta for final time"""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_upper_delta_final_time_metadata)

    _set_upper_delta_final_time_metadata = { "name" : "upper_delta_final_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @upper_delta_final_time.setter
    def upper_delta_final_time(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._set_upper_delta_final_time_metadata, newVal)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IManeuverOptimalFiniteFinalBoundaryConditions._metadata, IManeuverOptimalFiniteFinalBoundaryConditions._get_provide_runtime_type_info_metadata)


agcls.AgClassCatalog.add_catalog_entry("{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}", IManeuverOptimalFiniteFinalBoundaryConditions)
agcls.AgTypeNameMap["IManeuverOptimalFiniteFinalBoundaryConditions"] = IManeuverOptimalFiniteFinalBoundaryConditions

class IManeuverOptimalFinitePathBoundaryConditions(object):
    """Properties of path boundary conditions for optimal finite maneuver."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_compute_from_initial_guess" : 1,
                             "set_compute_from_initial_guess" : 2,
                             "get_a" : 3,
                             "get_h" : 4,
                             "get_k" : 5,
                             "get_p" : 6,
                             "get_q" : 7,
                             "get_l" : 8,
                             "get_lower_bound_azimuth" : 9,
                             "set_lower_bound_azimuth" : 10,
                             "get_upper_bound_azimuth" : 11,
                             "set_upper_bound_azimuth" : 12,
                             "get_lower_bound_elevation" : 13,
                             "set_lower_bound_elevation" : 14,
                             "get_upper_bound_elevation" : 15,
                             "set_upper_bound_elevation" : 16,
                             "get_provide_runtime_type_info" : 17, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFinitePathBoundaryConditions)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFinitePathBoundaryConditions)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFinitePathBoundaryConditions, None)
    
    _get_compute_from_initial_guess_metadata = { "name" : "compute_from_initial_guess",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def compute_from_initial_guess(self) -> bool:
        """Compute path boundary conditions from initial guess."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_compute_from_initial_guess_metadata)

    _set_compute_from_initial_guess_metadata = { "name" : "compute_from_initial_guess",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @compute_from_initial_guess.setter
    def compute_from_initial_guess(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._set_compute_from_initial_guess_metadata, newVal)

    _get_a_metadata = { "name" : "a",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def a(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_a_metadata)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def h(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_h_metadata)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def k(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_k_metadata)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def p(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_p_metadata)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def q(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_q_metadata)

    _get_l_metadata = { "name" : "l",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def l(self) -> "ManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_l_metadata)

    _get_lower_bound_azimuth_metadata = { "name" : "lower_bound_azimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lower_bound_azimuth(self) -> float:
        """Thrust direction azimuth lower bound along the path"""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_lower_bound_azimuth_metadata)

    _set_lower_bound_azimuth_metadata = { "name" : "lower_bound_azimuth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @lower_bound_azimuth.setter
    def lower_bound_azimuth(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._set_lower_bound_azimuth_metadata, newVal)

    _get_upper_bound_azimuth_metadata = { "name" : "upper_bound_azimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def upper_bound_azimuth(self) -> float:
        """Thrust direction azimuth upper bound along the path"""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_upper_bound_azimuth_metadata)

    _set_upper_bound_azimuth_metadata = { "name" : "upper_bound_azimuth",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @upper_bound_azimuth.setter
    def upper_bound_azimuth(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._set_upper_bound_azimuth_metadata, newVal)

    _get_lower_bound_elevation_metadata = { "name" : "lower_bound_elevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lower_bound_elevation(self) -> float:
        """Thrust direction elevation lower bound along the path"""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_lower_bound_elevation_metadata)

    _set_lower_bound_elevation_metadata = { "name" : "lower_bound_elevation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @lower_bound_elevation.setter
    def lower_bound_elevation(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._set_lower_bound_elevation_metadata, newVal)

    _get_upper_bound_elevation_metadata = { "name" : "upper_bound_elevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def upper_bound_elevation(self) -> float:
        """Thrust direction elevation upper bound along the path"""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_upper_bound_elevation_metadata)

    _set_upper_bound_elevation_metadata = { "name" : "upper_bound_elevation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @upper_bound_elevation.setter
    def upper_bound_elevation(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._set_upper_bound_elevation_metadata, newVal)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IManeuverOptimalFinitePathBoundaryConditions._metadata, IManeuverOptimalFinitePathBoundaryConditions._get_provide_runtime_type_info_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}", IManeuverOptimalFinitePathBoundaryConditions)
agcls.AgTypeNameMap["IManeuverOptimalFinitePathBoundaryConditions"] = IManeuverOptimalFinitePathBoundaryConditions

class IManeuverOptimalFiniteSteeringNodeCollection(object):
    """Steering/nodes collection."""
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1808D2D6-FAB4-4750-AE06-B37D95779815}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteSteeringNodeCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteSteeringNodeCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteSteeringNodeCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IManeuverOptimalFiniteSteeringNodeElement":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "ManeuverOptimalFiniteSteeringNodeElement":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IManeuverOptimalFiniteSteeringNodeCollection._metadata, IManeuverOptimalFiniteSteeringNodeCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeCollection._metadata, IManeuverOptimalFiniteSteeringNodeCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeCollection._metadata, IManeuverOptimalFiniteSteeringNodeCollection._get_count_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{1808D2D6-FAB4-4750-AE06-B37D95779815}", IManeuverOptimalFiniteSteeringNodeCollection)
agcls.AgTypeNameMap["IManeuverOptimalFiniteSteeringNodeCollection"] = IManeuverOptimalFiniteSteeringNodeCollection

class IManeuverOptimalFiniteBounds(object):
    """The bounds for boundary interfaces."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_lower_bound" : 1,
                             "set_lower_bound" : 2,
                             "get_upper_bound" : 3,
                             "set_upper_bound" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteBounds)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteBounds)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteBounds, None)
    
    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lower_bound(self) -> float:
        """Lower bound for a boundary element."""
        return self._intf.get_property(IManeuverOptimalFiniteBounds._metadata, IManeuverOptimalFiniteBounds._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteBounds._metadata, IManeuverOptimalFiniteBounds._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def upper_bound(self) -> float:
        """Upper bound for a boundary element."""
        return self._intf.get_property(IManeuverOptimalFiniteBounds._metadata, IManeuverOptimalFiniteBounds._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFiniteBounds._metadata, IManeuverOptimalFiniteBounds._set_upper_bound_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}", IManeuverOptimalFiniteBounds)
agcls.AgTypeNameMap["IManeuverOptimalFiniteBounds"] = IManeuverOptimalFiniteBounds

class IGoldenSectionControlCollection(object):
    """Properties for the list of Golden Section control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGoldenSectionControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGoldenSectionControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGoldenSectionControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IGoldenSectionControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "GoldenSectionControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IGoldenSectionControlCollection._metadata, IGoldenSectionControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IGoldenSectionControlCollection._metadata, IGoldenSectionControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IGoldenSectionControlCollection._metadata, IGoldenSectionControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "GoldenSectionControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(IGoldenSectionControlCollection._metadata, IGoldenSectionControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}", IGoldenSectionControlCollection)
agcls.AgTypeNameMap["IGoldenSectionControlCollection"] = IGoldenSectionControlCollection

class IGoldenSectionControl(object):
    """Properties for control parameters of a Golden Section profile."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{91407E31-8792-460C-AE98-32CF4690D53F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_current_value" : 5,
                             "get_lower_bound" : 6,
                             "set_lower_bound" : 7,
                             "get_upper_bound" : 8,
                             "set_upper_bound" : 9,
                             "get_use_custom_display_unit" : 10,
                             "set_use_custom_display_unit" : 11,
                             "get_custom_display_unit" : 12,
                             "set_custom_display_unit" : 13,
                             "get_tolerance" : 14,
                             "set_tolerance" : 15, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGoldenSectionControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGoldenSectionControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGoldenSectionControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_parent_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_current_value_metadata)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_upper_bound_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_custom_display_unit_metadata, newVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired. Dimension depends on context."""
        return self._intf.get_property(IGoldenSectionControl._metadata, IGoldenSectionControl._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @tolerance.setter
    def tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGoldenSectionControl._metadata, IGoldenSectionControl._set_tolerance_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{91407E31-8792-460C-AE98-32CF4690D53F}", IGoldenSectionControl)
agcls.AgTypeNameMap["IGoldenSectionControl"] = IGoldenSectionControl

class IGoldenSectionResultCollection(object):
    """Properties for the list of Golden Section result parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{50AD7420-2926-4B14-8C99-88E1942EF754}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGoldenSectionResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGoldenSectionResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGoldenSectionResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IGoldenSectionResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "GoldenSectionResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IGoldenSectionResultCollection._metadata, IGoldenSectionResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IGoldenSectionResultCollection._metadata, IGoldenSectionResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IGoldenSectionResultCollection._metadata, IGoldenSectionResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "GoldenSectionResult":
        """Return the result specified by the object/result path."""
        return self._intf.invoke(IGoldenSectionResultCollection._metadata, IGoldenSectionResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{50AD7420-2926-4B14-8C99-88E1942EF754}", IGoldenSectionResultCollection)
agcls.AgTypeNameMap["IGoldenSectionResultCollection"] = IGoldenSectionResultCollection

class IGoldenSectionResult(object):
    """Properties for result parameters of a Golden Section profile."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67461697-37E6-4342-978D-9C6143528607}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_current_value" : 5,
                             "get_desired_operation" : 6,
                             "set_desired_operation" : 7,
                             "get_use_custom_display_unit" : 8,
                             "set_use_custom_display_unit" : 9,
                             "get_custom_display_unit" : 10,
                             "set_custom_display_unit" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGoldenSectionResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGoldenSectionResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGoldenSectionResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IGoldenSectionResult._metadata, IGoldenSectionResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_parent_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_current_value_metadata)

    _get_desired_operation_metadata = { "name" : "desired_operation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GOLDEN_SECTION_DESIRED_OPERATION),) }
    @property
    def desired_operation(self) -> "GOLDEN_SECTION_DESIRED_OPERATION":
        """The Desired Operation/Objective of golden section."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_desired_operation_metadata)

    _set_desired_operation_metadata = { "name" : "desired_operation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GOLDEN_SECTION_DESIRED_OPERATION),) }
    @desired_operation.setter
    def desired_operation(self, inVal:"GOLDEN_SECTION_DESIRED_OPERATION") -> None:
        return self._intf.set_property(IGoldenSectionResult._metadata, IGoldenSectionResult._set_desired_operation_metadata, inVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IGoldenSectionResult._metadata, IGoldenSectionResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IGoldenSectionResult._metadata, IGoldenSectionResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IGoldenSectionResult._metadata, IGoldenSectionResult._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{67461697-37E6-4342-978D-9C6143528607}", IGoldenSectionResult)
agcls.AgTypeNameMap["IGoldenSectionResult"] = IGoldenSectionResult

class IGridSearchControlCollection(object):
    """Properties for the list of Grid Search control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BD562D00-ABDC-411B-813D-84C1E3597CEF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGridSearchControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGridSearchControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGridSearchControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IGridSearchControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "GridSearchControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IGridSearchControlCollection._metadata, IGridSearchControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IGridSearchControlCollection._metadata, IGridSearchControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IGridSearchControlCollection._metadata, IGridSearchControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "GridSearchControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(IGridSearchControlCollection._metadata, IGridSearchControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{BD562D00-ABDC-411B-813D-84C1E3597CEF}", IGridSearchControlCollection)
agcls.AgTypeNameMap["IGridSearchControlCollection"] = IGridSearchControlCollection

class IGridSearchControl(object):
    """Properties for control parameters of a Grid Search profile."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7E71EB52-998F-49E7-80BA-1B11574D59DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_current_value" : 5,
                             "get_lower_bound" : 6,
                             "set_lower_bound" : 7,
                             "get_upper_bound" : 8,
                             "set_upper_bound" : 9,
                             "get_use_custom_display_unit" : 10,
                             "set_use_custom_display_unit" : 11,
                             "get_custom_display_unit" : 12,
                             "set_custom_display_unit" : 13,
                             "get_step" : 14,
                             "set_step" : 15, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGridSearchControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGridSearchControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGridSearchControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_parent_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_current_value_metadata)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_upper_bound_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_custom_display_unit_metadata, newVal)

    _get_step_metadata = { "name" : "step",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def step(self) -> typing.Any:
        """Specify the step size to use when evaluating the grid search. Dimension depends on context."""
        return self._intf.get_property(IGridSearchControl._metadata, IGridSearchControl._get_step_metadata)

    _set_step_metadata = { "name" : "step",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @step.setter
    def step(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IGridSearchControl._metadata, IGridSearchControl._set_step_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7E71EB52-998F-49E7-80BA-1B11574D59DF}", IGridSearchControl)
agcls.AgTypeNameMap["IGridSearchControl"] = IGridSearchControl

class IGridSearchResultCollection(object):
    """Properties for the list of Grid Search result parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BCA009A8-29CD-420A-955E-DC95A251CD9E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGridSearchResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGridSearchResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGridSearchResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IGridSearchResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "GridSearchResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IGridSearchResultCollection._metadata, IGridSearchResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IGridSearchResultCollection._metadata, IGridSearchResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IGridSearchResultCollection._metadata, IGridSearchResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "GridSearchResult":
        """Return the result specified by the object/result path."""
        return self._intf.invoke(IGridSearchResultCollection._metadata, IGridSearchResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{BCA009A8-29CD-420A-955E-DC95A251CD9E}", IGridSearchResultCollection)
agcls.AgTypeNameMap["IGridSearchResultCollection"] = IGridSearchResultCollection

class IGridSearchResult(object):
    """Properties for result parameters of a Grid Search profile."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36F26633-D0C4-4692-A6D2-4D98451AB3A7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_current_value" : 5,
                             "get_desired_operation" : 6,
                             "set_desired_operation" : 7,
                             "get_use_custom_display_unit" : 8,
                             "set_use_custom_display_unit" : 9,
                             "get_custom_display_unit" : 10,
                             "set_custom_display_unit" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGridSearchResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGridSearchResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGridSearchResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IGridSearchResult._metadata, IGridSearchResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_parent_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_current_value_metadata)

    _get_desired_operation_metadata = { "name" : "desired_operation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRID_SEARCH_DESIRED_OPERATION),) }
    @property
    def desired_operation(self) -> "GRID_SEARCH_DESIRED_OPERATION":
        """The Desired Operation/Objective of grid search."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_desired_operation_metadata)

    _set_desired_operation_metadata = { "name" : "desired_operation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRID_SEARCH_DESIRED_OPERATION),) }
    @desired_operation.setter
    def desired_operation(self, inVal:"GRID_SEARCH_DESIRED_OPERATION") -> None:
        return self._intf.set_property(IGridSearchResult._metadata, IGridSearchResult._set_desired_operation_metadata, inVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IGridSearchResult._metadata, IGridSearchResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IGridSearchResult._metadata, IGridSearchResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IGridSearchResult._metadata, IGridSearchResult._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{36F26633-D0C4-4692-A6D2-4D98451AB3A7}", IGridSearchResult)
agcls.AgTypeNameMap["IGridSearchResult"] = IGridSearchResult

class IBisectionControlCollection(object):
    """Properties for the list of Bisection control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C6D33DA0-04F8-4655-88F9-6A3E70E0DFCB}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBisectionControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBisectionControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBisectionControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IBisectionControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "BisectionControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IBisectionControlCollection._metadata, IBisectionControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IBisectionControlCollection._metadata, IBisectionControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IBisectionControlCollection._metadata, IBisectionControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "BisectionControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(IBisectionControlCollection._metadata, IBisectionControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{C6D33DA0-04F8-4655-88F9-6A3E70E0DFCB}", IBisectionControlCollection)
agcls.AgTypeNameMap["IBisectionControlCollection"] = IBisectionControlCollection

class IBisectionResult(object):
    """Properties for result parameters of a Bisection profile."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{750F4B13-2B5E-456E-9969-76D5B82356C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_current_value" : 5,
                             "get_desired_value" : 6,
                             "set_desired_value" : 7,
                             "get_tolerance" : 8,
                             "set_tolerance" : 9,
                             "get_use_custom_display_unit" : 10,
                             "set_use_custom_display_unit" : 11,
                             "get_custom_display_unit" : 12,
                             "set_custom_display_unit" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBisectionResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBisectionResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBisectionResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IBisectionResult._metadata, IBisectionResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_parent_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_current_value_metadata)

    _get_desired_value_metadata = { "name" : "desired_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def desired_value(self) -> typing.Any:
        """The value that you want to achieve."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_desired_value_metadata)

    _set_desired_value_metadata = { "name" : "desired_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @desired_value.setter
    def desired_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBisectionResult._metadata, IBisectionResult._set_desired_value_metadata, newVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def tolerance(self) -> typing.Any:
        """The profile will stop when it achieves a value within this range of the Desired Value."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @tolerance.setter
    def tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBisectionResult._metadata, IBisectionResult._set_tolerance_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IBisectionResult._metadata, IBisectionResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IBisectionResult._metadata, IBisectionResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IBisectionResult._metadata, IBisectionResult._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{750F4B13-2B5E-456E-9969-76D5B82356C8}", IBisectionResult)
agcls.AgTypeNameMap["IBisectionResult"] = IBisectionResult

class IBisectionResultCollection(object):
    """Bisection result collection."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6D0F0277-92F2-4931-A497-EF39C81C72B5}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBisectionResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBisectionResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBisectionResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IBisectionResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "BisectionResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IBisectionResultCollection._metadata, IBisectionResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IBisectionResultCollection._metadata, IBisectionResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IBisectionResultCollection._metadata, IBisectionResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "BisectionResult":
        """Return the result specified by the object/result names."""
        return self._intf.invoke(IBisectionResultCollection._metadata, IBisectionResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{6D0F0277-92F2-4931-A497-EF39C81C72B5}", IBisectionResultCollection)
agcls.AgTypeNameMap["IBisectionResultCollection"] = IBisectionResultCollection

class IStoppingConditionElement(object):
    """The status of a stopping condition."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7508042C-1986-42AB-9B83-DE0AAA5626A0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_active" : 1,
                             "set_active" : 2,
                             "enable_control_parameter" : 3,
                             "disable_control_parameter" : 4,
                             "is_control_parameter_enabled" : 5,
                             "get_control_parameters_available" : 6,
                             "get_properties" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStoppingConditionElement)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStoppingConditionElement)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStoppingConditionElement, None)
    
    _get_active_metadata = { "name" : "active",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def active(self) -> bool:
        """If true, the stopping condition is active."""
        return self._intf.get_property(IStoppingConditionElement._metadata, IStoppingConditionElement._get_active_metadata)

    _set_active_metadata = { "name" : "active",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @active.setter
    def active(self, newVal:bool) -> None:
        return self._intf.set_property(IStoppingConditionElement._metadata, IStoppingConditionElement._set_active_metadata, newVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_STOPPING_CONDITION),) }
    def enable_control_parameter(self, param:"CONTROL_STOPPING_CONDITION") -> None:
        """Enable or disables the specified control parameter"""
        return self._intf.invoke(IStoppingConditionElement._metadata, IStoppingConditionElement._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_STOPPING_CONDITION),) }
    def disable_control_parameter(self, param:"CONTROL_STOPPING_CONDITION") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IStoppingConditionElement._metadata, IStoppingConditionElement._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_STOPPING_CONDITION), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_STOPPING_CONDITION") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IStoppingConditionElement._metadata, IStoppingConditionElement._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IStoppingConditionElement._metadata, IStoppingConditionElement._get_control_parameters_available_metadata)

    _get_properties_metadata = { "name" : "properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def properties(self) -> "IStoppingConditionComponent":
        """The properties available to the stopping condition."""
        return self._intf.get_property(IStoppingConditionElement._metadata, IStoppingConditionElement._get_properties_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7508042C-1986-42AB-9B83-DE0AAA5626A0}", IStoppingConditionElement)
agcls.AgTypeNameMap["IStoppingConditionElement"] = IStoppingConditionElement

class IStoppingConditionCollection(object):
    """The list of Stopping Conditions."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "cut" : 6,
                             "paste" : 7,
                             "insert_copy" : 8,
                             "get_item_by_index" : 9,
                             "get_item_by_name" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStoppingConditionCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStoppingConditionCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStoppingConditionCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IStoppingConditionElement":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "StoppingConditionElement":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, conditionName:str) -> "StoppingConditionElement":
        """Add a stopping condition."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._add_metadata, conditionName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a stopping condition."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IStoppingConditionCollection._metadata, IStoppingConditionCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IStoppingConditionCollection._metadata, IStoppingConditionCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the stopping condition into the clipboard and removes the stopping condition from the list."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "StoppingConditionElement":
        """Pastes the stopping condition from the clipboard and inserts into the list."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IStoppingConditionElement"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, stopCond:"IStoppingConditionElement") -> "StoppingConditionElement":
        """Copy the stopping condition and inserts the copy into the list."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._insert_copy_metadata, stopCond, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "StoppingConditionElement":
        """Retrieve a stopping condition in the collection by index."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "StoppingConditionElement":
        """Retrieve a stopping condition in the collection by name."""
        return self._intf.invoke(IStoppingConditionCollection._metadata, IStoppingConditionCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}", IStoppingConditionCollection)
agcls.AgTypeNameMap["IStoppingConditionCollection"] = IStoppingConditionCollection

class IMissionControlSequenceSegmentCollection(object):
    """Properties for a collection of segments."""
    _num_methods = 13
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{550AD0AB-FAB1-4632-895D-774CA07B120E}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "insert" : 2,
                             "remove" : 3,
                             "remove_all" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6,
                             "cut" : 7,
                             "paste" : 8,
                             "insert_copy" : 9,
                             "insert_by_name" : 10,
                             "get_provide_runtime_type_info" : 11,
                             "get_item_by_index" : 12,
                             "get_item_by_name" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceSegmentCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceSegmentCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceSegmentCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IMissionControlSequenceSegment":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "IMissionControlSequenceSegment":
        """Return the specified segment(using segment name or index number)."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._item_metadata, indexOrName, out_arg())

    _insert_metadata = { "name" : "insert",
            "arg_types" : (agcom.LONG, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_TYPE), agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def insert(self, segmentType:"SEGMENT_TYPE", segmentName:str, segmentToInsertBefore:str) -> "IMissionControlSequenceSegment":
        """Add a segment to the segment collection."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._insert_metadata, segmentType, segmentName, segmentToInsertBefore, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove(self, segmentNameToRemove:str) -> None:
        """Remove a segment; the End segment cannot be deleted."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._remove_metadata, segmentNameToRemove)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all segments; the End segment cannot be deleted."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._remove_all_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def cut(self, segmentNameToCut:str) -> None:
        """Copy the segment into the clipboard and removes the segment from the sequence."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._cut_metadata, segmentNameToCut)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def paste(self, segmentToPasteBefore:str) -> "IMissionControlSequenceSegment":
        """Pastes the segment from the clipboard and inserts in before the given segment name."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._paste_metadata, segmentToPasteBefore, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceSegment"), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, segment:"IMissionControlSequenceSegment", segmentToInsertBefore:str) -> "IMissionControlSequenceSegment":
        """Copy the segment pointer and inserts the copy before the given segment name."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._insert_copy_metadata, segment, segmentToInsertBefore, out_arg())

    _insert_by_name_metadata = { "name" : "insert_by_name",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def insert_by_name(self, segmentName:str, segmentToInsertBefore:str) -> "IMissionControlSequenceSegment":
        """Insert a segment by name to the segment collection."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._insert_by_name_metadata, segmentName, segmentToInsertBefore, out_arg())

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._get_provide_runtime_type_info_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "IMissionControlSequenceSegment":
        """Retrieve the specified segment(using segment index number)."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "IMissionControlSequenceSegment":
        """Retrieve the specified segment(using segment name)."""
        return self._intf.invoke(IMissionControlSequenceSegmentCollection._metadata, IMissionControlSequenceSegmentCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{550AD0AB-FAB1-4632-895D-774CA07B120E}", IMissionControlSequenceSegmentCollection)
agcls.AgTypeNameMap["IMissionControlSequenceSegmentCollection"] = IMissionControlSequenceSegmentCollection

class IState(object):
    """Spacecraft Parameters properties for the spacecraft configuration."""
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_element_type" : 1,
                             "set_element_type" : 2,
                             "get_element" : 3,
                             "get_epoch" : 4,
                             "set_epoch" : 5,
                             "get_coord_system_name" : 6,
                             "get_dry_mass" : 7,
                             "set_dry_mass" : 8,
                             "get_fuel_mass" : 9,
                             "set_fuel_mass" : 10,
                             "get_drag_area" : 11,
                             "set_drag_area" : 12,
                             "get_srp_area" : 13,
                             "set_srp_area" : 14,
                             "get_tank_pressure" : 15,
                             "set_tank_pressure" : 16,
                             "get_tank_temperature" : 17,
                             "set_tank_temperature" : 18,
                             "get_fuel_density" : 19,
                             "set_fuel_density" : 20,
                             "get_cr" : 21,
                             "set_cr" : 22,
                             "get_cd" : 23,
                             "set_cd" : 24,
                             "get_radiation_pressure_coeff" : 25,
                             "set_radiation_pressure_coeff" : 26,
                             "get_radiation_pressure_area" : 27,
                             "set_radiation_pressure_area" : 28,
                             "get_k1" : 29,
                             "set_k1" : 30,
                             "get_k2" : 31,
                             "set_k2" : 32,
                             "get_in_frame_name" : 33, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IState)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IState)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IState, None)
    
    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT_TYPE),) }
    @property
    def element_type(self) -> "ELEMENT_TYPE":
        """The element type."""
        return self._intf.get_property(IState._metadata, IState._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "set_element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT_TYPE),) }
    def set_element_type(self, elementType:"ELEMENT_TYPE") -> None:
        """Set the element type."""
        return self._intf.invoke(IState._metadata, IState._set_element_type_metadata, elementType)

    _get_element_metadata = { "name" : "element",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def element(self) -> "IElement":
        """Return the currently selected element type."""
        return self._intf.get_property(IState._metadata, IState._get_element_metadata)

    _get_epoch_metadata = { "name" : "epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def epoch(self) -> typing.Any:
        """The epoch of the Orbit State. Uses DateFormat Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_epoch_metadata)

    _set_epoch_metadata = { "name" : "epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @epoch.setter
    def epoch(self, epoch:typing.Any) -> None:
        return self._intf.set_property(IState._metadata, IState._set_epoch_metadata, epoch)

    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IState._metadata, IState._get_coord_system_name_metadata)

    _get_dry_mass_metadata = { "name" : "dry_mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def dry_mass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_dry_mass_metadata)

    _set_dry_mass_metadata = { "name" : "dry_mass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @dry_mass.setter
    def dry_mass(self, dryMass:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_dry_mass_metadata, dryMass)

    _get_fuel_mass_metadata = { "name" : "fuel_mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def fuel_mass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_fuel_mass_metadata)

    _set_fuel_mass_metadata = { "name" : "fuel_mass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @fuel_mass.setter
    def fuel_mass(self, fuelMass:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_fuel_mass_metadata, fuelMass)

    _get_drag_area_metadata = { "name" : "drag_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def drag_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_drag_area_metadata)

    _set_drag_area_metadata = { "name" : "drag_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @drag_area.setter
    def drag_area(self, fuelMass:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_drag_area_metadata, fuelMass)

    _get_srp_area_metadata = { "name" : "srp_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def srp_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_srp_area_metadata)

    _set_srp_area_metadata = { "name" : "srp_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @srp_area.setter
    def srp_area(self, sRPArea:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_srp_area_metadata, sRPArea)

    _get_tank_pressure_metadata = { "name" : "tank_pressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tank_pressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_tank_pressure_metadata)

    _set_tank_pressure_metadata = { "name" : "tank_pressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tank_pressure.setter
    def tank_pressure(self, tankPressure:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_tank_pressure_metadata, tankPressure)

    _get_tank_temperature_metadata = { "name" : "tank_temperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tank_temperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_tank_temperature_metadata)

    _set_tank_temperature_metadata = { "name" : "tank_temperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tank_temperature.setter
    def tank_temperature(self, tankTemperature:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_tank_temperature_metadata, tankTemperature)

    _get_fuel_density_metadata = { "name" : "fuel_density",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def fuel_density(self) -> float:
        """The density of the fuel tank. Uses SmallDensity Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_fuel_density_metadata)

    _set_fuel_density_metadata = { "name" : "fuel_density",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @fuel_density.setter
    def fuel_density(self, fuelDensity:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_fuel_density_metadata, fuelDensity)

    _get_cr_metadata = { "name" : "cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IState._metadata, IState._get_cr_metadata)

    _set_cr_metadata = { "name" : "cr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cr.setter
    def cr(self, cr:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_cr_metadata, cr)

    _get_cd_metadata = { "name" : "cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        return self._intf.get_property(IState._metadata, IState._get_cd_metadata)

    _set_cd_metadata = { "name" : "cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cd.setter
    def cd(self, cd:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_cd_metadata, cd)

    _get_radiation_pressure_coeff_metadata = { "name" : "radiation_pressure_coeff",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radiation_pressure_coeff(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(IState._metadata, IState._get_radiation_pressure_coeff_metadata)

    _set_radiation_pressure_coeff_metadata = { "name" : "radiation_pressure_coeff",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radiation_pressure_coeff.setter
    def radiation_pressure_coeff(self, radiationPressureCoeff:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_radiation_pressure_coeff_metadata, radiationPressureCoeff)

    _get_radiation_pressure_area_metadata = { "name" : "radiation_pressure_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radiation_pressure_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses Small Area Dimension."""
        return self._intf.get_property(IState._metadata, IState._get_radiation_pressure_area_metadata)

    _set_radiation_pressure_area_metadata = { "name" : "radiation_pressure_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radiation_pressure_area.setter
    def radiation_pressure_area(self, radPressureArea:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_radiation_pressure_area_metadata, radPressureArea)

    _get_k1_metadata = { "name" : "k1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        return self._intf.get_property(IState._metadata, IState._get_k1_metadata)

    _set_k1_metadata = { "name" : "k1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k1.setter
    def k1(self, k1:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_k1_metadata, k1)

    _get_k2_metadata = { "name" : "k2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        return self._intf.get_property(IState._metadata, IState._get_k2_metadata)

    _set_k2_metadata = { "name" : "k2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k2.setter
    def k2(self, k2:float) -> None:
        return self._intf.set_property(IState._metadata, IState._set_k2_metadata, k2)

    _get_in_frame_name_metadata = { "name" : "get_in_frame_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_in_frame_name(self, frameName:str) -> "State":
        """Get the orbit state in the specified frame."""
        return self._intf.invoke(IState._metadata, IState._get_in_frame_name_metadata, frameName, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}", IState)
agcls.AgTypeNameMap["IState"] = IState

class IStoppingConditionComponent(object):
    """Properties for a stopping condition."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB400CAB-0917-4921-BD15-73F6039F3AF2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_stopping_condition_type" : 1, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStoppingConditionComponent)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStoppingConditionComponent)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStoppingConditionComponent, None)
    
    _get_stopping_condition_type_metadata = { "name" : "stopping_condition_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STOPPING_CONDITION),) }
    @property
    def stopping_condition_type(self) -> "STOPPING_CONDITION":
        """The type of stopping condition."""
        return self._intf.get_property(IStoppingConditionComponent._metadata, IStoppingConditionComponent._get_stopping_condition_type_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BB400CAB-0917-4921-BD15-73F6039F3AF2}", IStoppingConditionComponent)
agcls.AgTypeNameMap["IStoppingConditionComponent"] = IStoppingConditionComponent

class IAutomaticSequence(object):
    """Properties for automatic sequences."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "make_copy" : 1,
                             "get_name" : 2,
                             "set_name" : 3,
                             "get_user_comment" : 4,
                             "set_user_comment" : 5,
                             "get_sequence" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAutomaticSequence)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAutomaticSequence)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAutomaticSequence, None)
    
    _make_copy_metadata = { "name" : "make_copy",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def make_copy(self, uniqueName:str) -> "AutomaticSequence":
        """Make a copy of the sequence."""
        return self._intf.invoke(IAutomaticSequence._metadata, IAutomaticSequence._make_copy_metadata, uniqueName, out_arg())

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the sequence."""
        return self._intf.get_property(IAutomaticSequence._metadata, IAutomaticSequence._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, newVal:str) -> None:
        return self._intf.set_property(IAutomaticSequence._metadata, IAutomaticSequence._set_name_metadata, newVal)

    _get_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_comment(self) -> str:
        """The user comment."""
        return self._intf.get_property(IAutomaticSequence._metadata, IAutomaticSequence._get_user_comment_metadata)

    _set_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_comment.setter
    def user_comment(self, newVal:str) -> None:
        return self._intf.set_property(IAutomaticSequence._metadata, IAutomaticSequence._set_user_comment_metadata, newVal)

    _get_sequence_metadata = { "name" : "sequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def sequence(self) -> "MissionControlSequenceSegmentCollection":
        """Return the segment collection of the sequence."""
        return self._intf.get_property(IAutomaticSequence._metadata, IAutomaticSequence._get_sequence_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}", IAutomaticSequence)
agcls.AgTypeNameMap["IAutomaticSequence"] = IAutomaticSequence

class IAutomaticSequenceCollection(object):
    """Properties for the Automatic Sequence Browser."""
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "get_item_by_index" : 6,
                             "get_item_by_name" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAutomaticSequenceCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAutomaticSequenceCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAutomaticSequenceCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAutomaticSequence":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "AutomaticSequence":
        """Return the given automatic sequence."""
        return self._intf.invoke(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, name:str) -> "AutomaticSequence":
        """Create a new sequence."""
        return self._intf.invoke(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._add_metadata, name, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a sequence."""
        return self._intf.invoke(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """The size of the collection."""
        return self._intf.get_property(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._get_count_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "AutomaticSequence":
        """Retrieve the given automatic sequence found by the index."""
        return self._intf.invoke(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "AutomaticSequence":
        """Retrieve the given automatic sequence found by the name."""
        return self._intf.invoke(IAutomaticSequenceCollection._metadata, IAutomaticSequenceCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}", IAutomaticSequenceCollection)
agcls.AgTypeNameMap["IAutomaticSequenceCollection"] = IAutomaticSequenceCollection

class IBPlaneCollection(object):
    """Properties for the collection of B-Planes."""
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "remove" : 2,
                             "remove_all" : 3,
                             "item" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBPlaneCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBPlaneCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBPlaneCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> str:
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def add(self, bPlaneName:str) -> None:
        """Add a BPlane."""
        return self._intf.invoke(IBPlaneCollection._metadata, IBPlaneCollection._add_metadata, bPlaneName)

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove(self, bPlaneName:str) -> None:
        """Remove a BPlane."""
        return self._intf.invoke(IBPlaneCollection._metadata, IBPlaneCollection._remove_metadata, bPlaneName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all BPlanes."""
        return self._intf.invoke(IBPlaneCollection._metadata, IBPlaneCollection._remove_all_metadata, )

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.BSTR_arg,) }
    def item(self, index:int) -> str:
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IBPlaneCollection._metadata, IBPlaneCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IBPlaneCollection._metadata, IBPlaneCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """The number of active BPlanes."""
        return self._intf.get_property(IBPlaneCollection._metadata, IBPlaneCollection._get_count_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}", IBPlaneCollection)
agcls.AgTypeNameMap["IBPlaneCollection"] = IBPlaneCollection

class ICalcObjectCollection(object):
    """Collection of calculation objects."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "item" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "cut" : 6,
                             "paste" : 7,
                             "insert_copy" : 8,
                             "get_item_by_index" : 9,
                             "get_item_by_name" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICalcObjectCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICalcObjectCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICalcObjectCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IComponentInfo":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, name:str) -> "IComponentInfo":
        """Add a calc object to the collection."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._add_metadata, name, out_arg())

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "IComponentInfo":
        """Return a calc object."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._item_metadata, indexOrName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a calc object from the collection."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ICalcObjectCollection._metadata, ICalcObjectCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ICalcObjectCollection._metadata, ICalcObjectCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy a calc object to the clipboard and removes the calc object from the list."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "IComponentInfo":
        """Pastes a calc object from the clipboard into the list."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, calcObj:"IComponentInfo") -> "IComponentInfo":
        """Copy a calc object and inserts the copy into the list."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._insert_copy_metadata, calcObj, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "IComponentInfo":
        """Retrieve a calc object found by the index."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "IComponentInfo":
        """Retrieve a calc object found by the name."""
        return self._intf.invoke(ICalcObjectCollection._metadata, ICalcObjectCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}", ICalcObjectCollection)
agcls.AgTypeNameMap["ICalcObjectCollection"] = ICalcObjectCollection

class IManeuverFinitePropagator(object):
    """Properties for the propagation of a Finite Maneuver."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6F8D5070-D155-4D40-A682-46EF2B69F1A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_propagator_name" : 1,
                             "set_propagator_name" : 2,
                             "get_stopping_conditions" : 3,
                             "get_min_propagation_time" : 4,
                             "set_min_propagation_time" : 5,
                             "get_max_propagation_time" : 6,
                             "set_max_propagation_time" : 7,
                             "get_enable_max_propagation_time" : 8,
                             "set_enable_max_propagation_time" : 9,
                             "get_enable_warning_message" : 10,
                             "set_enable_warning_message" : 11,
                             "get_enable_center_burn" : 12,
                             "set_enable_center_burn" : 13,
                             "get_bias" : 14,
                             "set_bias" : 15,
                             "get_override_max_propagation_time" : 16,
                             "set_override_max_propagation_time" : 17,
                             "get_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 18,
                             "set_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 19,
                             "get_should_reinitialize_stm_at_start_of_segment_propagation" : 20,
                             "set_should_reinitialize_stm_at_start_of_segment_propagation" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverFinitePropagator)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverFinitePropagator)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverFinitePropagator, None)
    
    _get_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def propagator_name(self) -> str:
        """The propagator."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_propagator_name_metadata)

    _set_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @propagator_name.setter
    def propagator_name(self, newVal:str) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_propagator_name_metadata, newVal)

    _get_stopping_conditions_metadata = { "name" : "stopping_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def stopping_conditions(self) -> "StoppingConditionCollection":
        """The stopping conditions list."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_stopping_conditions_metadata)

    _get_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_propagation_time(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_min_propagation_time_metadata)

    _set_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_propagation_time.setter
    def min_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_min_propagation_time_metadata, newVal)

    _get_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_propagation_time(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_max_propagation_time_metadata)

    _set_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_propagation_time.setter
    def max_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_max_propagation_time_metadata, newVal)

    _get_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_max_propagation_time(self) -> bool:
        """Enable Maximum Propagation Time - apply the maximum propagation time."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_enable_max_propagation_time_metadata)

    _set_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_max_propagation_time.setter
    def enable_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_enable_max_propagation_time_metadata, newVal)

    _get_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_warning_message(self) -> bool:
        """Issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_enable_warning_message_metadata)

    _set_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_warning_message.setter
    def enable_warning_message(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_enable_warning_message_metadata, newVal)

    _get_enable_center_burn_metadata = { "name" : "enable_center_burn",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_center_burn(self) -> bool:
        """This property is only available for use with a duration stopping condition. If selected, you are setting the maneuver to start half the time before the previous segment ended."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_enable_center_burn_metadata)

    _set_enable_center_burn_metadata = { "name" : "enable_center_burn",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_center_burn.setter
    def enable_center_burn(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_enable_center_burn_metadata, newVal)

    _get_bias_metadata = { "name" : "bias",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def bias(self) -> float:
        """The value by which to adjust the centering of the burn. A positive value will center the burn after the previous segment ends by the amount specified in the Burn Center Bias field. Uses Time Dimension."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_bias_metadata)

    _set_bias_metadata = { "name" : "bias",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @bias.setter
    def bias(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_bias_metadata, newVal)

    _get_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def override_max_propagation_time(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_override_max_propagation_time_metadata)

    _set_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @override_max_propagation_time.setter
    def override_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_override_max_propagation_time_metadata, newVal)

    _get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata)

    _set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_stop_for_initially_surpassed_epoch_stopping_conditions.setter
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata, newVal)

    _get_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_reinitialize_stm_at_start_of_segment_propagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._get_should_reinitialize_stm_at_start_of_segment_propagation_metadata)

    _set_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_reinitialize_stm_at_start_of_segment_propagation.setter
    def should_reinitialize_stm_at_start_of_segment_propagation(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverFinitePropagator._metadata, IManeuverFinitePropagator._set_should_reinitialize_stm_at_start_of_segment_propagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6F8D5070-D155-4D40-A682-46EF2B69F1A3}", IManeuverFinitePropagator)
agcls.AgTypeNameMap["IManeuverFinitePropagator"] = IManeuverFinitePropagator

class IBurnoutVelocity(object):
    """Properties for the burnout velocity of a Launch segment."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_burnout_option" : 1,
                             "set_burnout_option" : 2,
                             "get_fixed_velocity" : 3,
                             "set_fixed_velocity" : 4,
                             "get_inertial_velocity" : 5,
                             "set_inertial_velocity" : 6,
                             "get_inertial_velocity_azimuth" : 7,
                             "set_inertial_velocity_azimuth" : 8,
                             "get_inertial_horizontal_fpa" : 9,
                             "set_inertial_horizontal_fpa" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutVelocity)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutVelocity)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutVelocity, None)
    
    _get_burnout_option_metadata = { "name" : "burnout_option",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(BURNOUT_OPTIONS),) }
    @property
    def burnout_option(self) -> "BURNOUT_OPTIONS":
        """Select to use the fixed or inertial frame."""
        return self._intf.get_property(IBurnoutVelocity._metadata, IBurnoutVelocity._get_burnout_option_metadata)

    _set_burnout_option_metadata = { "name" : "burnout_option",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(BURNOUT_OPTIONS),) }
    @burnout_option.setter
    def burnout_option(self, newVal:"BURNOUT_OPTIONS") -> None:
        return self._intf.set_property(IBurnoutVelocity._metadata, IBurnoutVelocity._set_burnout_option_metadata, newVal)

    _get_fixed_velocity_metadata = { "name" : "fixed_velocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def fixed_velocity(self) -> float:
        """The velocity magnitude . Uses Rate Dimension."""
        return self._intf.get_property(IBurnoutVelocity._metadata, IBurnoutVelocity._get_fixed_velocity_metadata)

    _set_fixed_velocity_metadata = { "name" : "fixed_velocity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @fixed_velocity.setter
    def fixed_velocity(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutVelocity._metadata, IBurnoutVelocity._set_fixed_velocity_metadata, newVal)

    _get_inertial_velocity_metadata = { "name" : "inertial_velocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def inertial_velocity(self) -> float:
        """The velocity magnitude. Uses Rate Dimension."""
        return self._intf.get_property(IBurnoutVelocity._metadata, IBurnoutVelocity._get_inertial_velocity_metadata)

    _set_inertial_velocity_metadata = { "name" : "inertial_velocity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @inertial_velocity.setter
    def inertial_velocity(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutVelocity._metadata, IBurnoutVelocity._set_inertial_velocity_metadata, newVal)

    _get_inertial_velocity_azimuth_metadata = { "name" : "inertial_velocity_azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inertial_velocity_azimuth(self) -> typing.Any:
        """The inertial velocity azimuth. Inertial velocity azimuth is the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutVelocity._metadata, IBurnoutVelocity._get_inertial_velocity_azimuth_metadata)

    _set_inertial_velocity_azimuth_metadata = { "name" : "inertial_velocity_azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inertial_velocity_azimuth.setter
    def inertial_velocity_azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutVelocity._metadata, IBurnoutVelocity._set_inertial_velocity_azimuth_metadata, newVal)

    _get_inertial_horizontal_fpa_metadata = { "name" : "inertial_horizontal_fpa",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inertial_horizontal_fpa(self) -> typing.Any:
        """Inertial horizontal flight path angle is the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutVelocity._metadata, IBurnoutVelocity._get_inertial_horizontal_fpa_metadata)

    _set_inertial_horizontal_fpa_metadata = { "name" : "inertial_horizontal_fpa",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inertial_horizontal_fpa.setter
    def inertial_horizontal_fpa(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutVelocity._metadata, IBurnoutVelocity._set_inertial_horizontal_fpa_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}", IBurnoutVelocity)
agcls.AgTypeNameMap["IBurnoutVelocity"] = IBurnoutVelocity

class IAttitudeControl(object):
    """Properties for attitude options for a maneuver segment."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FC43EF22-B727-4538-9E97-B3CD445436CD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_lead_duration" : 1,
                             "set_lead_duration" : 2,
                             "get_trail_duration" : 3,
                             "set_trail_duration" : 4,
                             "get_body_axis" : 5,
                             "set_body_axis" : 6,
                             "get_constraint_sign" : 7,
                             "set_constraint_sign" : 8,
                             "get_constraint_vector_name" : 9,
                             "set_constraint_vector_name" : 10,
                             "get_custom_function" : 11,
                             "set_custom_function" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControl, None)
    
    _get_lead_duration_metadata = { "name" : "lead_duration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lead_duration(self) -> float:
        """How long before the maneuver starts the maneuver attitude. Uses Time Dimension."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_lead_duration_metadata)

    _set_lead_duration_metadata = { "name" : "lead_duration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @lead_duration.setter
    def lead_duration(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_lead_duration_metadata, newVal)

    _get_trail_duration_metadata = { "name" : "trail_duration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def trail_duration(self) -> float:
        """How long to maintain that attitude after the maneuver. Uses Time Dimension."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_trail_duration_metadata)

    _set_trail_duration_metadata = { "name" : "trail_duration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @trail_duration.setter
    def trail_duration(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_trail_duration_metadata, newVal)

    _get_body_axis_metadata = { "name" : "body_axis",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(BODY_AXIS),) }
    @property
    def body_axis(self) -> "BODY_AXIS":
        """Whether the engine acceleration (the direction opposite the engine's exhaust) is aligned with positive or negative X, Y or Z body axis."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_body_axis_metadata)

    _set_body_axis_metadata = { "name" : "body_axis",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(BODY_AXIS),) }
    @body_axis.setter
    def body_axis(self, newVal:"BODY_AXIS") -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_body_axis_metadata, newVal)

    _get_constraint_sign_metadata = { "name" : "constraint_sign",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CONSTRAINT_SIGN),) }
    @property
    def constraint_sign(self) -> "CONSTRAINT_SIGN":
        """Whether the Constraint Vector is positive or negative."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_constraint_sign_metadata)

    _set_constraint_sign_metadata = { "name" : "constraint_sign",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONSTRAINT_SIGN),) }
    @constraint_sign.setter
    def constraint_sign(self, newVal:"CONSTRAINT_SIGN") -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_constraint_sign_metadata, newVal)

    _get_constraint_vector_name_metadata = { "name" : "constraint_vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def constraint_vector_name(self) -> str:
        """Constraint Vector - the vector toward which this body vector is constrained."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_constraint_vector_name_metadata)

    _set_constraint_vector_name_metadata = { "name" : "constraint_vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @constraint_vector_name.setter
    def constraint_vector_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_constraint_vector_name_metadata, newVal)

    _get_custom_function_metadata = { "name" : "custom_function",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CUSTOM_FUNCTION),) }
    @property
    def custom_function(self) -> "CUSTOM_FUNCTION":
        """The attitude definition to use for other STK functions."""
        return self._intf.get_property(IAttitudeControl._metadata, IAttitudeControl._get_custom_function_metadata)

    _set_custom_function_metadata = { "name" : "custom_function",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CUSTOM_FUNCTION),) }
    @custom_function.setter
    def custom_function(self, newVal:"CUSTOM_FUNCTION") -> None:
        return self._intf.set_property(IAttitudeControl._metadata, IAttitudeControl._set_custom_function_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FC43EF22-B727-4538-9E97-B3CD445436CD}", IAttitudeControl)
agcls.AgTypeNameMap["IAttitudeControl"] = IAttitudeControl

class IAttitudeControlFinite(IAttitudeControl):
    """The attitude control of a finite maneuver"""
    _num_methods = 0
    _vtable_offset = IAttitudeControl._vtable_offset + IAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{827F3B46-D066-462B-A3DB-1DCD56A816BA}",
        "vtable_reference" : IAttitudeControl._vtable_offset + IAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFinite)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFinite)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFinite, IAttitudeControl)
    

agcls.AgClassCatalog.add_catalog_entry("{827F3B46-D066-462B-A3DB-1DCD56A816BA}", IAttitudeControlFinite)
agcls.AgTypeNameMap["IAttitudeControlFinite"] = IAttitudeControlFinite

class IAttitudeControlImpulsive(IAttitudeControl):
    """The attitude control of an impulsive maneuver."""
    _num_methods = 0
    _vtable_offset = IAttitudeControl._vtable_offset + IAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{0BD5E890-FBD8-415E-9E29-38731985F366}",
        "vtable_reference" : IAttitudeControl._vtable_offset + IAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsive)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsive)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsive, IAttitudeControl)
    

agcls.AgClassCatalog.add_catalog_entry("{0BD5E890-FBD8-415E-9E29-38731985F366}", IAttitudeControlImpulsive)
agcls.AgTypeNameMap["IAttitudeControlImpulsive"] = IAttitudeControlImpulsive

class IAttitudeControlOptimalFinite(IAttitudeControl):
    """The attitude control of a optimal finite maneuver"""
    _num_methods = 0
    _vtable_offset = IAttitudeControl._vtable_offset + IAttitudeControl._num_methods
    _metadata = {
        "uuid" : "{EF8743CB-4A4F-4B89-AB50-D76843E4D618}",
        "vtable_reference" : IAttitudeControl._vtable_offset + IAttitudeControl._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlOptimalFinite)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlOptimalFinite)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlOptimalFinite, IAttitudeControl)
    

agcls.AgClassCatalog.add_catalog_entry("{EF8743CB-4A4F-4B89-AB50-D76843E4D618}", IAttitudeControlOptimalFinite)
agcls.AgTypeNameMap["IAttitudeControlOptimalFinite"] = IAttitudeControlOptimalFinite

class IManeuver(object):
    """Properties of an Impulsive Maneuver Segment."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_attitude_control_type" : 1,
                             "set_attitude_control_type" : 2,
                             "get_attitude_control" : 3,
                             "get_propulsion_method" : 4,
                             "set_propulsion_method" : 5,
                             "get_propulsion_method_value" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuver)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuver)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuver, None)
    
    _get_attitude_control_type_metadata = { "name" : "attitude_control_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_CONTROL),) }
    @property
    def attitude_control_type(self) -> "ATTITUDE_CONTROL":
        """Determine the attitude parameters available for you to specify."""
        return self._intf.get_property(IManeuver._metadata, IManeuver._get_attitude_control_type_metadata)

    _set_attitude_control_type_metadata = { "name" : "set_attitude_control_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_CONTROL),) }
    def set_attitude_control_type(self, attitudeControlType:"ATTITUDE_CONTROL") -> None:
        """Set the attitude control type."""
        return self._intf.invoke(IManeuver._metadata, IManeuver._set_attitude_control_type_metadata, attitudeControlType)

    _get_attitude_control_metadata = { "name" : "attitude_control",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def attitude_control(self) -> "IAttitudeControl":
        """The attitude control properties collection."""
        return self._intf.get_property(IManeuver._metadata, IManeuver._get_attitude_control_metadata)

    _get_propulsion_method_metadata = { "name" : "propulsion_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PROPULSION_METHOD),) }
    @property
    def propulsion_method(self) -> "PROPULSION_METHOD":
        """The propulsion type to be modeled."""
        return self._intf.get_property(IManeuver._metadata, IManeuver._get_propulsion_method_metadata)

    _set_propulsion_method_metadata = { "name" : "set_propulsion_method",
            "arg_types" : (agcom.LONG, agcom.BSTR,),
            "marshallers" : (agmarshall.AgEnum_arg(PROPULSION_METHOD), agmarshall.BSTR_arg,) }
    def set_propulsion_method(self, propulsionMethod:"PROPULSION_METHOD", value:str) -> None:
        """Set the propulsion type and associated engine/thruster set."""
        return self._intf.invoke(IManeuver._metadata, IManeuver._set_propulsion_method_metadata, propulsionMethod, value)

    _get_propulsion_method_value_metadata = { "name" : "propulsion_method_value",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def propulsion_method_value(self) -> str:
        """The specific engine model or thruster set to be used for the maneuver."""
        return self._intf.get_property(IManeuver._metadata, IManeuver._get_propulsion_method_value_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}", IManeuver)
agcls.AgTypeNameMap["IManeuver"] = IManeuver

class IDisplaySystem(object):
    """The launch coordinate system."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{90BFC47C-35B5-4169-9543-36C65DFABB6A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDisplaySystem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDisplaySystem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDisplaySystem, None)
    

agcls.AgClassCatalog.add_catalog_entry("{90BFC47C-35B5-4169-9543-36C65DFABB6A}", IDisplaySystem)
agcls.AgTypeNameMap["IDisplaySystem"] = IDisplaySystem

class IBurnout(object):
    """The burnout point reference frame."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0BEFC7BA-14CF-422D-BD67-352572ABB55F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnout)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnout)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnout, None)
    

agcls.AgClassCatalog.add_catalog_entry("{0BEFC7BA-14CF-422D-BD67-352572ABB55F}", IBurnout)
agcls.AgTypeNameMap["IBurnout"] = IBurnout

class IScriptingSegment(object):
    """Object properties for scripting options."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{08B0F341-8A54-43B8-A0B9-50A462E70C71}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_component_name" : 1,
                             "set_component_name" : 2,
                             "get_attribute" : 3,
                             "set_attribute" : 4,
                             "get_unit" : 5,
                             "set_unit" : 6,
                             "get_available_attribute_values" : 7,
                             "get_read_only_property" : 8,
                             "set_read_only_property" : 9,
                             "get_object_name" : 10,
                             "set_object_name" : 11,
                             "get_available_object_names" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingSegment, None)
    
    _get_component_name_metadata = { "name" : "component_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def component_name(self) -> str:
        """The name of the component."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_component_name_metadata)

    _set_component_name_metadata = { "name" : "component_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @component_name.setter
    def component_name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingSegment._metadata, IScriptingSegment._set_component_name_metadata, inVal)

    _get_attribute_metadata = { "name" : "attribute",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def attribute(self) -> str:
        """The name of the attribute."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_attribute_metadata)

    _set_attribute_metadata = { "name" : "attribute",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @attribute.setter
    def attribute(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingSegment._metadata, IScriptingSegment._set_attribute_metadata, inVal)

    _get_unit_metadata = { "name" : "unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit(self) -> str:
        """The unit."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_unit_metadata)

    _set_unit_metadata = { "name" : "unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit.setter
    def unit(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingSegment._metadata, IScriptingSegment._set_unit_metadata, inVal)

    _get_available_attribute_values_metadata = { "name" : "available_attribute_values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def available_attribute_values(self) -> list:
        """Return a list of available attribute values."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_available_attribute_values_metadata)

    _get_read_only_property_metadata = { "name" : "read_only_property",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def read_only_property(self) -> bool:
        """True if it is a read-only property."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_read_only_property_metadata)

    _set_read_only_property_metadata = { "name" : "read_only_property",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @read_only_property.setter
    def read_only_property(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingSegment._metadata, IScriptingSegment._set_read_only_property_metadata, inVal)

    _get_object_name_metadata = { "name" : "object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def object_name(self) -> str:
        """The profile/segment that contains the attribute."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_object_name_metadata)

    _set_object_name_metadata = { "name" : "object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @object_name.setter
    def object_name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingSegment._metadata, IScriptingSegment._set_object_name_metadata, inVal)

    _get_available_object_names_metadata = { "name" : "available_object_names",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def available_object_names(self) -> list:
        """Return a list of available profile/segment names."""
        return self._intf.get_property(IScriptingSegment._metadata, IScriptingSegment._get_available_object_names_metadata)


agcls.AgClassCatalog.add_catalog_entry("{08B0F341-8A54-43B8-A0B9-50A462E70C71}", IScriptingSegment)
agcls.AgTypeNameMap["IScriptingSegment"] = IScriptingSegment

class IScriptingSegmentCollection(object):
    """The list of object properties that the script can interact with."""
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "remove_all" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6,
                             "get_provide_runtime_type_info" : 7,
                             "cut" : 8,
                             "paste" : 9,
                             "insert_copy" : 10,
                             "get_item_by_index" : 11,
                             "get_item_by_name" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingSegmentCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingSegmentCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingSegmentCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IScriptingSegment":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "ScriptingSegment":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, componentName:str) -> "ScriptingSegment":
        """Add an object property to the collection."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._add_metadata, componentName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a object property."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all object properties."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._remove_all_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._get_count_metadata)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._get_provide_runtime_type_info_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the object property into the clipboard and removes the object property from the list."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "ScriptingSegment":
        """Pastes the object property from the clipboard and inserts into the list."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IScriptingSegment"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, objProperty:"IScriptingSegment") -> "ScriptingSegment":
        """Copy the object property and inserts the copy into the list."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._insert_copy_metadata, objProperty, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "ScriptingSegment":
        """Retrieve a scripting segment in the collection by index."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "ScriptingSegment":
        """Retrieve a scripting segment in the collection by name."""
        return self._intf.invoke(IScriptingSegmentCollection._metadata, IScriptingSegmentCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}", IScriptingSegmentCollection)
agcls.AgTypeNameMap["IScriptingSegmentCollection"] = IScriptingSegmentCollection

class IScriptingParameterEnumerationChoice(object):
    """Enumeration choice."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DED30CDF-730F-4125-AEB8-6A668248B484}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "set_name" : 2,
                             "get_value" : 3,
                             "set_value" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingParameterEnumerationChoice)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingParameterEnumerationChoice)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingParameterEnumerationChoice, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """Name of the enumeration"""
        return self._intf.get_property(IScriptingParameterEnumerationChoice._metadata, IScriptingParameterEnumerationChoice._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingParameterEnumerationChoice._metadata, IScriptingParameterEnumerationChoice._set_name_metadata, inVal)

    _get_value_metadata = { "name" : "value",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def value(self) -> int:
        """Integer value of the enumeration"""
        return self._intf.get_property(IScriptingParameterEnumerationChoice._metadata, IScriptingParameterEnumerationChoice._get_value_metadata)

    _set_value_metadata = { "name" : "value",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @value.setter
    def value(self, inVal:int) -> None:
        return self._intf.set_property(IScriptingParameterEnumerationChoice._metadata, IScriptingParameterEnumerationChoice._set_value_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{DED30CDF-730F-4125-AEB8-6A668248B484}", IScriptingParameterEnumerationChoice)
agcls.AgTypeNameMap["IScriptingParameterEnumerationChoice"] = IScriptingParameterEnumerationChoice

class IScriptingParameterEnumerationChoiceCollection(object):
    """The list of enumeration choices available when parameter type is Enumeration."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{FF132A94-418D-41DB-8AA2-9DA77625A1A0}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "cut" : 6,
                             "paste" : 7,
                             "insert_copy" : 8,
                             "get_provide_runtime_type_info" : 9,
                             "get_item_by_index" : 10,
                             "get_item_by_name" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingParameterEnumerationChoiceCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingParameterEnumerationChoiceCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingParameterEnumerationChoiceCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IScriptingParameterEnumerationChoice":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "ScriptingParameterEnumerationChoice":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, choiceName:str) -> "ScriptingParameterEnumerationChoice":
        """Add an enumeration choice to the collection."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._add_metadata, choiceName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove an enumeration choice."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the enumeration choice into the clipboard and removes the enumeration choice from the list."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "ScriptingParameterEnumerationChoice":
        """Pastes the enumeration choice from the clipboard and inserts into the list."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IScriptingParameterEnumerationChoice"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, choice:"IScriptingParameterEnumerationChoice") -> "ScriptingParameterEnumerationChoice":
        """Copy the enumeration choice and inserts the copy into the list."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._insert_copy_metadata, choice, out_arg())

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._get_provide_runtime_type_info_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "ScriptingParameterEnumerationChoice":
        """Retrieve a scripting parameter enumeration choice in the collection by index."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "ScriptingParameterEnumerationChoice":
        """Retrieve a scripting parameter enumeration choice in the collection by name."""
        return self._intf.invoke(IScriptingParameterEnumerationChoiceCollection._metadata, IScriptingParameterEnumerationChoiceCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{FF132A94-418D-41DB-8AA2-9DA77625A1A0}", IScriptingParameterEnumerationChoiceCollection)
agcls.AgTypeNameMap["IScriptingParameterEnumerationChoiceCollection"] = IScriptingParameterEnumerationChoiceCollection

class IScriptingParameter(object):
    """Parameter properties for scripting options."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "set_name" : 2,
                             "get_param_value" : 3,
                             "set_param_value" : 4,
                             "get_unit" : 5,
                             "set_unit" : 6,
                             "get_type" : 7,
                             "set_type" : 8,
                             "get_inherit_value" : 9,
                             "set_inherit_value" : 10,
                             "get_user_comment" : 11,
                             "set_user_comment" : 12,
                             "get_dimension" : 13,
                             "set_dimension" : 14,
                             "get_enumeration_choices" : 15,
                             "get_use_min_value" : 16,
                             "set_use_min_value" : 17,
                             "get_min_value" : 18,
                             "set_min_value" : 19,
                             "get_use_max_value" : 20,
                             "set_use_max_value" : 21,
                             "get_max_value" : 22,
                             "set_max_value" : 23, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingParameter)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingParameter)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingParameter, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The parameter name."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_name_metadata, inVal)

    _get_param_value_metadata = { "name" : "param_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def param_value(self) -> typing.Any:
        """The parameter value.  Set in Object Model unit preference for selected dimension."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_param_value_metadata)

    _set_param_value_metadata = { "name" : "param_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @param_value.setter
    def param_value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_param_value_metadata, inVal)

    _get_unit_metadata = { "name" : "unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit(self) -> str:
        """The parameter's unit that is used to represent ParamValue during the scripting tool script execution. ParamValue is set in Object Model unit preference for selected dimension and not this unit. As with other units configurable in the desktop environment for STK, this unit is separate (and may differ) from the Object Model unit preference."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_unit_metadata)

    _set_unit_metadata = { "name" : "unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit.setter
    def unit(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_unit_metadata, inVal)

    _get_type_metadata = { "name" : "type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SCRIPTING_PARAMETER_TYPE),) }
    @property
    def type(self) -> "SCRIPTING_PARAMETER_TYPE":
        """The parameter's type."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_type_metadata)

    _set_type_metadata = { "name" : "type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SCRIPTING_PARAMETER_TYPE),) }
    @type.setter
    def type(self, inVal:"SCRIPTING_PARAMETER_TYPE") -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_type_metadata, inVal)

    _get_inherit_value_metadata = { "name" : "inherit_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def inherit_value(self) -> bool:
        """If true, parameter value will be inherited from previous profile's value."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_inherit_value_metadata)

    _set_inherit_value_metadata = { "name" : "inherit_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @inherit_value.setter
    def inherit_value(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_inherit_value_metadata, inVal)

    _get_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_comment(self) -> str:
        """The parameter's comment."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_user_comment_metadata)

    _set_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_comment.setter
    def user_comment(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_user_comment_metadata, inVal)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """The parameter's dimension."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_dimension_metadata)

    _set_dimension_metadata = { "name" : "dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @dimension.setter
    def dimension(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_dimension_metadata, inVal)

    _get_enumeration_choices_metadata = { "name" : "enumeration_choices",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def enumeration_choices(self) -> "ScriptingParameterEnumerationChoiceCollection":
        """The collection of enumerations to use when parameter type is eVAScriptingParameterTypeEnumeration."""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_enumeration_choices_metadata)

    _get_use_min_value_metadata = { "name" : "use_min_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_value(self) -> bool:
        """If true, a minimum value will be enforced for the parameter value"""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_use_min_value_metadata)

    _set_use_min_value_metadata = { "name" : "use_min_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_value.setter
    def use_min_value(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_use_min_value_metadata, inVal)

    _get_min_value_metadata = { "name" : "min_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def min_value(self) -> typing.Any:
        """The minimum value permitted for the parameter value"""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_min_value_metadata)

    _set_min_value_metadata = { "name" : "min_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @min_value.setter
    def min_value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_min_value_metadata, inVal)

    _get_use_max_value_metadata = { "name" : "use_max_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_value(self) -> bool:
        """If true, a maximum value will be enforced for the parameter value"""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_use_max_value_metadata)

    _set_use_max_value_metadata = { "name" : "use_max_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_value.setter
    def use_max_value(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_use_max_value_metadata, inVal)

    _get_max_value_metadata = { "name" : "max_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def max_value(self) -> typing.Any:
        """The maximum value permitted for the parameter value"""
        return self._intf.get_property(IScriptingParameter._metadata, IScriptingParameter._get_max_value_metadata)

    _set_max_value_metadata = { "name" : "max_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @max_value.setter
    def max_value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IScriptingParameter._metadata, IScriptingParameter._set_max_value_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}", IScriptingParameter)
agcls.AgTypeNameMap["IScriptingParameter"] = IScriptingParameter

class IScriptingParameterCollection(object):
    """The list of parameters that the script can interact with."""
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{57FC26AA-550D-4408-844E-24F983C94671}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "remove_all" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6,
                             "get_provide_runtime_type_info" : 7,
                             "cut" : 8,
                             "paste" : 9,
                             "insert_copy" : 10,
                             "get_item_by_index" : 11,
                             "get_item_by_name" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingParameterCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingParameterCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingParameterCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IScriptingParameter":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "ScriptingParameter":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, parameterName:str) -> "ScriptingParameter":
        """Add a parameter to the collection."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._add_metadata, parameterName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a parameter."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all parameters."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._remove_all_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IScriptingParameterCollection._metadata, IScriptingParameterCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IScriptingParameterCollection._metadata, IScriptingParameterCollection._get_count_metadata)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IScriptingParameterCollection._metadata, IScriptingParameterCollection._get_provide_runtime_type_info_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the parameter into the clipboard and removes the parameter from the list."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "ScriptingParameter":
        """Pastes the parameter from the clipboard and inserts into the list."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IScriptingParameter"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, parameter:"IScriptingParameter") -> "ScriptingParameter":
        """Copy the parameter and inserts the copy into the list."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._insert_copy_metadata, parameter, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "ScriptingParameter":
        """Retrieve a scripting parameter in the collection by index."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "ScriptingParameter":
        """Retrieve a scripting parameter in the collection by name."""
        return self._intf.invoke(IScriptingParameterCollection._metadata, IScriptingParameterCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{57FC26AA-550D-4408-844E-24F983C94671}", IScriptingParameterCollection)
agcls.AgTypeNameMap["IScriptingParameterCollection"] = IScriptingParameterCollection

class IScriptingCalcObject(object):
    """Calc Object properties for scripting options."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_component_name" : 1,
                             "set_component_name" : 2,
                             "get_calc_object_name" : 3,
                             "set_calc_object_name" : 4,
                             "get_calc_object" : 5,
                             "set_calc_object" : 6,
                             "get_unit" : 7,
                             "set_unit" : 8,
                             "copy_calc_object_to_clipboard" : 9,
                             "paste_calc_object_from_clipboard" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingCalcObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingCalcObject)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingCalcObject, None)
    
    _get_component_name_metadata = { "name" : "component_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def component_name(self) -> str:
        """The name of the component."""
        return self._intf.get_property(IScriptingCalcObject._metadata, IScriptingCalcObject._get_component_name_metadata)

    _set_component_name_metadata = { "name" : "component_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @component_name.setter
    def component_name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingCalcObject._metadata, IScriptingCalcObject._set_component_name_metadata, inVal)

    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The name of the calculation object."""
        return self._intf.get_property(IScriptingCalcObject._metadata, IScriptingCalcObject._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingCalcObject._metadata, IScriptingCalcObject._set_calc_object_name_metadata, inVal)

    _get_calc_object_metadata = { "name" : "calc_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_object(self) -> "IComponentInfo":
        """The calculation object type."""
        return self._intf.get_property(IScriptingCalcObject._metadata, IScriptingCalcObject._get_calc_object_metadata)

    _set_calc_object_metadata = { "name" : "calc_object",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"),) }
    @calc_object.setter
    def calc_object(self, inVal:"IComponentInfo") -> None:
        return self._intf.set_property(IScriptingCalcObject._metadata, IScriptingCalcObject._set_calc_object_metadata, inVal)

    _get_unit_metadata = { "name" : "unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit(self) -> str:
        """The unit."""
        return self._intf.get_property(IScriptingCalcObject._metadata, IScriptingCalcObject._get_unit_metadata)

    _set_unit_metadata = { "name" : "unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit.setter
    def unit(self, inVal:str) -> None:
        return self._intf.set_property(IScriptingCalcObject._metadata, IScriptingCalcObject._set_unit_metadata, inVal)

    _copy_calc_object_to_clipboard_metadata = { "name" : "copy_calc_object_to_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def copy_calc_object_to_clipboard(self) -> None:
        """Copy the wrapped calc object to the clipboard."""
        return self._intf.invoke(IScriptingCalcObject._metadata, IScriptingCalcObject._copy_calc_object_to_clipboard_metadata, )

    _paste_calc_object_from_clipboard_metadata = { "name" : "paste_calc_object_from_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def paste_calc_object_from_clipboard(self) -> None:
        """Replace the wrapped calc object with the instance in the clipboard."""
        return self._intf.invoke(IScriptingCalcObject._metadata, IScriptingCalcObject._paste_calc_object_from_clipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}", IScriptingCalcObject)
agcls.AgTypeNameMap["IScriptingCalcObject"] = IScriptingCalcObject

class IScriptingCalcObjectCollection(object):
    """The list of calc objects that the script can interact with."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C7742744-0197-46E3-AE3F-E6F60357FACD}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "add" : 2,
                             "remove" : 3,
                             "remove_all" : 4,
                             "get__NewEnum" : 5,
                             "get_count" : 6,
                             "cut" : 7,
                             "paste" : 8,
                             "insert_copy" : 9,
                             "get_item_by_index" : 10,
                             "get_item_by_name" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingCalcObjectCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingCalcObjectCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingCalcObjectCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IScriptingCalcObject":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "ScriptingCalcObject":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._item_metadata, indexOrName, out_arg())

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, componentName:str) -> "ScriptingCalcObject":
        """Add a calculation object to the collection."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._add_metadata, componentName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a calculation object."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all calculation objects."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._remove_all_metadata, )

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the calc object into the clipboard and removes the calc object from the list."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "ScriptingCalcObject":
        """Pastes the calc object from the clipboard and inserts into the list."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IScriptingCalcObject"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, calcObj:"IScriptingCalcObject") -> "ScriptingCalcObject":
        """Copy the calc object and inserts the copy into the list."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._insert_copy_metadata, calcObj, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "ScriptingCalcObject":
        """Retrieve a scripting calc object from the collection by index."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, componentName:str) -> "ScriptingCalcObject":
        """Retrieve a scripting calc object from the collection by name."""
        return self._intf.invoke(IScriptingCalcObjectCollection._metadata, IScriptingCalcObjectCollection._get_item_by_name_metadata, componentName, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{C7742744-0197-46E3-AE3F-E6F60357FACD}", IScriptingCalcObjectCollection)
agcls.AgTypeNameMap["IScriptingCalcObjectCollection"] = IScriptingCalcObjectCollection

class IScriptingTool(object):
    """Properties for the Scripting Tool."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_segment_properties" : 3,
                             "get_calc_objects" : 4,
                             "get_parameters" : 5,
                             "get_language_type" : 6,
                             "set_language_type" : 7,
                             "script_text" : 8,
                             "copy_to_clipboard" : 9,
                             "paste_from_clipboard" : 10,
                             "get_pre_iterate" : 11,
                             "set_pre_iterate" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IScriptingTool)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IScriptingTool)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IScriptingTool, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the scripting tool is enabled."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingTool._metadata, IScriptingTool._set_enable_metadata, inVal)

    _get_segment_properties_metadata = { "name" : "segment_properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def segment_properties(self) -> "ScriptingSegmentCollection":
        """Return the collection of the segment properties."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_segment_properties_metadata)

    _get_calc_objects_metadata = { "name" : "calc_objects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_objects(self) -> "ScriptingCalcObjectCollection":
        """Return the collection of the calculation objects."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_calc_objects_metadata)

    _get_parameters_metadata = { "name" : "parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def parameters(self) -> "ScriptingParameterCollection":
        """Return the collection of parameters."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_parameters_metadata)

    _get_language_type_metadata = { "name" : "language_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LANGUAGE),) }
    @property
    def language_type(self) -> "LANGUAGE":
        """The scripting language being used."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_language_type_metadata)

    _set_language_type_metadata = { "name" : "language_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LANGUAGE),) }
    @language_type.setter
    def language_type(self, inVal:"LANGUAGE") -> None:
        return self._intf.set_property(IScriptingTool._metadata, IScriptingTool._set_language_type_metadata, inVal)

    _script_text_metadata = { "name" : "script_text",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def script_text(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        return self._intf.invoke(IScriptingTool._metadata, IScriptingTool._script_text_metadata, script)

    _copy_to_clipboard_metadata = { "name" : "copy_to_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def copy_to_clipboard(self) -> None:
        """Copy entire scripting tool to clipboard."""
        return self._intf.invoke(IScriptingTool._metadata, IScriptingTool._copy_to_clipboard_metadata, )

    _paste_from_clipboard_metadata = { "name" : "paste_from_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def paste_from_clipboard(self) -> None:
        """Replace entire scripting tool with scripting tool in clipboard."""
        return self._intf.invoke(IScriptingTool._metadata, IScriptingTool._paste_from_clipboard_metadata, )

    _get_pre_iterate_metadata = { "name" : "pre_iterate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def pre_iterate(self) -> bool:
        """If true, the sequence will run once before executing the script."""
        return self._intf.get_property(IScriptingTool._metadata, IScriptingTool._get_pre_iterate_metadata)

    _set_pre_iterate_metadata = { "name" : "pre_iterate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @pre_iterate.setter
    def pre_iterate(self, inVal:bool) -> None:
        return self._intf.set_property(IScriptingTool._metadata, IScriptingTool._set_pre_iterate_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}", IScriptingTool)
agcls.AgTypeNameMap["IScriptingTool"] = IScriptingTool

class IElement(object):
    """The elements of the selected coordinate type."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D1D2C328-052A-4C2A-BC2F-739B55556384}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElement)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElement)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElement, None)
    

agcls.AgClassCatalog.add_catalog_entry("{D1D2C328-052A-4C2A-BC2F-739B55556384}", IElement)
agcls.AgTypeNameMap["IElement"] = IElement

class ISpacecraftParameters(object):
    """Properties for spacecraft configuration."""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_dry_mass" : 1,
                             "set_dry_mass" : 2,
                             "get_cd" : 3,
                             "set_cd" : 4,
                             "get_drag_area" : 5,
                             "set_drag_area" : 6,
                             "get_cr" : 7,
                             "set_cr" : 8,
                             "get_solar_radiation_pressure_area" : 9,
                             "set_solar_radiation_pressure_area" : 10,
                             "get_ck" : 11,
                             "set_ck" : 12,
                             "get_radiation_pressure_area" : 13,
                             "set_radiation_pressure_area" : 14,
                             "get_k1" : 15,
                             "set_k1" : 16,
                             "get_k2" : 17,
                             "set_k2" : 18, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISpacecraftParameters)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISpacecraftParameters)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISpacecraftParameters, None)
    
    _get_dry_mass_metadata = { "name" : "dry_mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def dry_mass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_dry_mass_metadata)

    _set_dry_mass_metadata = { "name" : "dry_mass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @dry_mass.setter
    def dry_mass(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_dry_mass_metadata, newVal)

    _get_cd_metadata = { "name" : "cd",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_cd_metadata)

    _set_cd_metadata = { "name" : "cd",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cd.setter
    def cd(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_cd_metadata, newVal)

    _get_drag_area_metadata = { "name" : "drag_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def drag_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_drag_area_metadata)

    _set_drag_area_metadata = { "name" : "drag_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @drag_area.setter
    def drag_area(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_drag_area_metadata, newVal)

    _get_cr_metadata = { "name" : "cr",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_cr_metadata)

    _set_cr_metadata = { "name" : "cr",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cr.setter
    def cr(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_cr_metadata, newVal)

    _get_solar_radiation_pressure_area_metadata = { "name" : "solar_radiation_pressure_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radiation_pressure_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_solar_radiation_pressure_area_metadata)

    _set_solar_radiation_pressure_area_metadata = { "name" : "solar_radiation_pressure_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radiation_pressure_area.setter
    def solar_radiation_pressure_area(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_solar_radiation_pressure_area_metadata, newVal)

    _get_ck_metadata = { "name" : "ck",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ck(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_ck_metadata)

    _set_ck_metadata = { "name" : "ck",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ck.setter
    def ck(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_ck_metadata, newVal)

    _get_radiation_pressure_area_metadata = { "name" : "radiation_pressure_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radiation_pressure_area(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses SmallArea Dimension."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_radiation_pressure_area_metadata)

    _set_radiation_pressure_area_metadata = { "name" : "radiation_pressure_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radiation_pressure_area.setter
    def radiation_pressure_area(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_radiation_pressure_area_metadata, newVal)

    _get_k1_metadata = { "name" : "k1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_k1_metadata)

    _set_k1_metadata = { "name" : "k1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k1.setter
    def k1(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_k1_metadata, newVal)

    _get_k2_metadata = { "name" : "k2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        return self._intf.get_property(ISpacecraftParameters._metadata, ISpacecraftParameters._get_k2_metadata)

    _set_k2_metadata = { "name" : "k2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k2.setter
    def k2(self, newVal:float) -> None:
        return self._intf.set_property(ISpacecraftParameters._metadata, ISpacecraftParameters._set_k2_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}", ISpacecraftParameters)
agcls.AgTypeNameMap["ISpacecraftParameters"] = ISpacecraftParameters

class IFuelTank(object):
    """Properties for fuel tank configuration."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_tank_pressure" : 1,
                             "set_tank_pressure" : 2,
                             "get_tank_volume" : 3,
                             "set_tank_volume" : 4,
                             "get_tank_temperature" : 5,
                             "set_tank_temperature" : 6,
                             "get_fuel_density" : 7,
                             "set_fuel_density" : 8,
                             "get_fuel_mass" : 9,
                             "set_fuel_mass" : 10,
                             "get_maximum_fuel_mass" : 11,
                             "set_maximum_fuel_mass" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IFuelTank)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IFuelTank)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IFuelTank, None)
    
    _get_tank_pressure_metadata = { "name" : "tank_pressure",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tank_pressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_tank_pressure_metadata)

    _set_tank_pressure_metadata = { "name" : "tank_pressure",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tank_pressure.setter
    def tank_pressure(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_tank_pressure_metadata, newVal)

    _get_tank_volume_metadata = { "name" : "tank_volume",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tank_volume(self) -> float:
        """The volume of the fuel tank. Uses SmallVolume Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_tank_volume_metadata)

    _set_tank_volume_metadata = { "name" : "tank_volume",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tank_volume.setter
    def tank_volume(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_tank_volume_metadata, newVal)

    _get_tank_temperature_metadata = { "name" : "tank_temperature",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tank_temperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_tank_temperature_metadata)

    _set_tank_temperature_metadata = { "name" : "tank_temperature",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tank_temperature.setter
    def tank_temperature(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_tank_temperature_metadata, newVal)

    _get_fuel_density_metadata = { "name" : "fuel_density",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def fuel_density(self) -> float:
        """The density of the fuel. Uses SmallDensity Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_fuel_density_metadata)

    _set_fuel_density_metadata = { "name" : "fuel_density",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @fuel_density.setter
    def fuel_density(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_fuel_density_metadata, newVal)

    _get_fuel_mass_metadata = { "name" : "fuel_mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def fuel_mass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_fuel_mass_metadata)

    _set_fuel_mass_metadata = { "name" : "fuel_mass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @fuel_mass.setter
    def fuel_mass(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_fuel_mass_metadata, newVal)

    _get_maximum_fuel_mass_metadata = { "name" : "maximum_fuel_mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def maximum_fuel_mass(self) -> float:
        """The maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Uses Mass Dimension."""
        return self._intf.get_property(IFuelTank._metadata, IFuelTank._get_maximum_fuel_mass_metadata)

    _set_maximum_fuel_mass_metadata = { "name" : "maximum_fuel_mass",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @maximum_fuel_mass.setter
    def maximum_fuel_mass(self, newVal:float) -> None:
        return self._intf.set_property(IFuelTank._metadata, IFuelTank._set_maximum_fuel_mass_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}", IFuelTank)
agcls.AgTypeNameMap["IFuelTank"] = IFuelTank

class IMissionControlSequenceSegmentProperties(object):
    """The segment properties."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_display_coordinate_system" : 1,
                             "set_display_coordinate_system" : 2,
                             "get_color" : 3,
                             "set_color" : 4,
                             "get_update_animation_time_after_run" : 5,
                             "set_update_animation_time_after_run" : 6,
                             "apply_final_state_to_b_planes" : 7,
                             "get_b_planes" : 8,
                             "get_last_run_code" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceSegmentProperties)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceSegmentProperties)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceSegmentProperties, None)
    
    _get_display_coordinate_system_metadata = { "name" : "display_coordinate_system",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def display_coordinate_system(self) -> str:
        """The coordinate system that will be used in the segment summary report."""
        return self._intf.get_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._get_display_coordinate_system_metadata)

    _set_display_coordinate_system_metadata = { "name" : "display_coordinate_system",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @display_coordinate_system.setter
    def display_coordinate_system(self, inVal:str) -> None:
        return self._intf.set_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._set_display_coordinate_system_metadata, inVal)

    _get_color_metadata = { "name" : "color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def color(self) -> agcolor.Color:
        """The display color of the segment."""
        return self._intf.get_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._get_color_metadata)

    _set_color_metadata = { "name" : "color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @color.setter
    def color(self, inVal:agcolor.Color) -> None:
        return self._intf.set_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._set_color_metadata, inVal)

    _get_update_animation_time_after_run_metadata = { "name" : "update_animation_time_after_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def update_animation_time_after_run(self) -> bool:
        """If true, Astrogator will set the animation time to the final epoch of the segment when the segment finishes running."""
        return self._intf.get_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._get_update_animation_time_after_run_metadata)

    _set_update_animation_time_after_run_metadata = { "name" : "update_animation_time_after_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @update_animation_time_after_run.setter
    def update_animation_time_after_run(self, inVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._set_update_animation_time_after_run_metadata, inVal)

    _apply_final_state_to_b_planes_metadata = { "name" : "apply_final_state_to_b_planes",
            "arg_types" : (),
            "marshallers" : () }
    def apply_final_state_to_b_planes(self) -> None:
        """Apply the last calculated final state of the segment to all selected B-Planes."""
        return self._intf.invoke(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._apply_final_state_to_b_planes_metadata, )

    _get_b_planes_metadata = { "name" : "b_planes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def b_planes(self) -> "BPlaneCollection":
        """The B-Plane or B-Planes to which the epoch, position, and velocity of the segment's final state will be applied, according to the B-Plane's definition."""
        return self._intf.get_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._get_b_planes_metadata)

    _get_last_run_code_metadata = { "name" : "last_run_code",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(RUN_CODE),) }
    @property
    def last_run_code(self) -> "RUN_CODE":
        """The last run code returned by the segment."""
        return self._intf.get_property(IMissionControlSequenceSegmentProperties._metadata, IMissionControlSequenceSegmentProperties._get_last_run_code_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}", IMissionControlSequenceSegmentProperties)
agcls.AgTypeNameMap["IMissionControlSequenceSegmentProperties"] = IMissionControlSequenceSegmentProperties

class IMissionControlSequenceEnd(object):
    """Properties for an End segment."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7AE91388-7900-4AA0-BF30-546957ACFE94}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceEnd)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceEnd)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceEnd, None)
    

agcls.AgClassCatalog.add_catalog_entry("{7AE91388-7900-4AA0-BF30-546957ACFE94}", IMissionControlSequenceEnd)
agcls.AgTypeNameMap["IMissionControlSequenceEnd"] = IMissionControlSequenceEnd

class IMissionControlSequenceInitialState(object):
    """Properties for an Initial State segment."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D7458E20-A5E4-45C8-81A1-38A29F4131FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_orbit_epoch" : 3,
                             "set_orbit_epoch" : 4,
                             "get_spacecraft_parameters" : 5,
                             "get_fuel_tank" : 6,
                             "get_element_type" : 7,
                             "set_element_type" : 8,
                             "get_element" : 9,
                             "enable_control_parameter" : 10,
                             "disable_control_parameter" : 11,
                             "is_control_parameter_enabled" : 12,
                             "get_control_parameters_available" : 13,
                             "get_user_variables" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceInitialState)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceInitialState)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceInitialState, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, newVal:str) -> None:
        return self._intf.set_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._set_coord_system_name_metadata, newVal)

    _get_orbit_epoch_metadata = { "name" : "orbit_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def orbit_epoch(self) -> typing.Any:
        """The orbit epoch. Uses DateFormat Dimension."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_orbit_epoch_metadata)

    _set_orbit_epoch_metadata = { "name" : "orbit_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @orbit_epoch.setter
    def orbit_epoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._set_orbit_epoch_metadata, newVal)

    _get_spacecraft_parameters_metadata = { "name" : "spacecraft_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def spacecraft_parameters(self) -> "SpacecraftParameters":
        """The spacecraft  parameters."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_spacecraft_parameters_metadata)

    _get_fuel_tank_metadata = { "name" : "fuel_tank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def fuel_tank(self) -> "FuelTank":
        """The fuel tank parameters."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_fuel_tank_metadata)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT_TYPE),) }
    @property
    def element_type(self) -> "ELEMENT_TYPE":
        """The coordinate type."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "set_element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT_TYPE),) }
    def set_element_type(self, elementType:"ELEMENT_TYPE") -> None:
        """Select an coordinate type."""
        return self._intf.invoke(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._set_element_type_metadata, elementType)

    _get_element_metadata = { "name" : "element",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def element(self) -> "IElement":
        """The elements of the selected coordinate type."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_element_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_INIT_STATE),) }
    def enable_control_parameter(self, param:"CONTROL_INIT_STATE") -> None:
        """Enable a control parameter."""
        return self._intf.invoke(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_INIT_STATE),) }
    def disable_control_parameter(self, param:"CONTROL_INIT_STATE") -> None:
        """Disables a control parameter."""
        return self._intf.invoke(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_INIT_STATE), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_INIT_STATE") -> bool:
        """Sees if a control is enabled."""
        return self._intf.invoke(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_control_parameters_available_metadata)

    _get_user_variables_metadata = { "name" : "user_variables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_variables(self) -> "UserVariableCollection":
        """Interface used to modify user variables for the initial state segment."""
        return self._intf.get_property(IMissionControlSequenceInitialState._metadata, IMissionControlSequenceInitialState._get_user_variables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D7458E20-A5E4-45C8-81A1-38A29F4131FD}", IMissionControlSequenceInitialState)
agcls.AgTypeNameMap["IMissionControlSequenceInitialState"] = IMissionControlSequenceInitialState

class IMissionControlSequenceSegment(object):
    """General properties for segments."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_type" : 1,
                             "get_properties" : 2,
                             "get_initial_state" : 3,
                             "get_final_state" : 4,
                             "get_result_value" : 5,
                             "run" : 6,
                             "get_results" : 7,
                             "get_exec_summary" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceSegment, None)
    
    _get_type_metadata = { "name" : "type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_TYPE),) }
    @property
    def type(self) -> "SEGMENT_TYPE":
        """Return the type of segment."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_type_metadata)

    _get_properties_metadata = { "name" : "properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def properties(self) -> "MissionControlSequenceSegmentProperties":
        """Return the properties of the segment."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_properties_metadata)

    _get_initial_state_metadata = { "name" : "initial_state",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def initial_state(self) -> "State":
        """The initial state of the segment."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_initial_state_metadata)

    _get_final_state_metadata = { "name" : "final_state",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def final_state(self) -> "State":
        """The final state of the segment."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_final_state_metadata)

    _get_result_value_metadata = { "name" : "get_result_value",
            "arg_types" : (agcom.BSTR, POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg,) }
    def get_result_value(self, resultName:str) -> typing.Any:
        """Return a result value."""
        return self._intf.invoke(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_result_value_metadata, resultName, out_arg())

    _run_metadata = { "name" : "run",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def run(self) -> "State":
        """Run the segment in individual segment mode.  See DriverMissionControlSequence."""
        return self._intf.invoke(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._run_metadata, out_arg())

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "CalcObjectCollection":
        """The results of the segment."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_results_metadata)

    _get_exec_summary_metadata = { "name" : "exec_summary",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def exec_summary(self) -> "IDataProviderResult":
        """The segment summary report."""
        return self._intf.get_property(IMissionControlSequenceSegment._metadata, IMissionControlSequenceSegment._get_exec_summary_metadata)


agcls.AgClassCatalog.add_catalog_entry("{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}", IMissionControlSequenceSegment)
agcls.AgTypeNameMap["IMissionControlSequenceSegment"] = IMissionControlSequenceSegment

class IMissionControlSequenceOptions(object):
    """Properties for the MCS Options."""
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{81715712-591E-4553-9DC7-A1266F82E7D9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_draw_trajectory_in_2d" : 1,
                             "set_draw_trajectory_in_2d" : 2,
                             "get_draw_trajectory_in_3d" : 3,
                             "set_draw_trajectory_in_3d" : 4,
                             "get_update_animation_time_for_all_objects" : 5,
                             "set_update_animation_time_for_all_objects" : 6,
                             "get_clear_dwc_graphics_before_each_run" : 7,
                             "set_clear_dwc_graphics_before_each_run" : 8,
                             "get_clear_additional_b_plane_points" : 9,
                             "set_clear_additional_b_plane_points" : 10,
                             "get_propagate_on_apply" : 11,
                             "set_propagate_on_apply" : 12,
                             "get_enable_trajectory_segment_colors" : 13,
                             "set_enable_trajectory_segment_colors" : 14,
                             "get_save_numbers_in_raw_format" : 15,
                             "set_save_numbers_in_raw_format" : 16,
                             "get_stopping_condition_time_tolerance" : 17,
                             "set_stopping_condition_time_tolerance" : 18,
                             "get_enable_segment_controls" : 19,
                             "set_enable_segment_controls" : 20,
                             "get_enable_segment_results" : 21,
                             "set_enable_segment_results" : 22,
                             "get_enable_logging" : 23,
                             "set_enable_logging" : 24,
                             "get_graphics_update_rate" : 25,
                             "set_graphics_update_rate" : 26,
                             "get_promote_controls" : 27,
                             "set_promote_controls" : 28,
                             "get_use_nominal_settings" : 29,
                             "set_use_nominal_settings" : 30,
                             "get_min_ephem_step" : 31,
                             "set_min_ephem_step" : 32,
                             "get_generate_ephemeris" : 33,
                             "set_generate_ephemeris" : 34,
                             "get_user_variables" : 35,
                             "get_smart_run_mode" : 36,
                             "set_smart_run_mode" : 37, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceOptions)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceOptions)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceOptions, None)
    
    _get_draw_trajectory_in_2d_metadata = { "name" : "draw_trajectory_in_2d",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def draw_trajectory_in_2d(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 2D Graphics windows as the ephemeris is calculated during the current run."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_draw_trajectory_in_2d_metadata)

    _set_draw_trajectory_in_2d_metadata = { "name" : "draw_trajectory_in_2d",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @draw_trajectory_in_2d.setter
    def draw_trajectory_in_2d(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_draw_trajectory_in_2d_metadata, newVal)

    _get_draw_trajectory_in_3d_metadata = { "name" : "draw_trajectory_in_3d",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def draw_trajectory_in_3d(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 3D Graphics windows as the ephemeris is calculated during the current run."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_draw_trajectory_in_3d_metadata)

    _set_draw_trajectory_in_3d_metadata = { "name" : "draw_trajectory_in_3d",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @draw_trajectory_in_3d.setter
    def draw_trajectory_in_3d(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_draw_trajectory_in_3d_metadata, newVal)

    _get_update_animation_time_for_all_objects_metadata = { "name" : "update_animation_time_for_all_objects",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def update_animation_time_for_all_objects(self) -> bool:
        """If true, all other objects will be animated so that they appear at the proper position for the time being computed as the trajectory is calculated."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_update_animation_time_for_all_objects_metadata)

    _set_update_animation_time_for_all_objects_metadata = { "name" : "update_animation_time_for_all_objects",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @update_animation_time_for_all_objects.setter
    def update_animation_time_for_all_objects(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_update_animation_time_for_all_objects_metadata, newVal)

    _get_clear_dwc_graphics_before_each_run_metadata = { "name" : "clear_dwc_graphics_before_each_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def clear_dwc_graphics_before_each_run(self) -> bool:
        """If true, Astrogator will automatically clear all target iteration graphics of the previous run - in all graphics windows - before the current run draws new calculations."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_clear_dwc_graphics_before_each_run_metadata)

    _set_clear_dwc_graphics_before_each_run_metadata = { "name" : "clear_dwc_graphics_before_each_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @clear_dwc_graphics_before_each_run.setter
    def clear_dwc_graphics_before_each_run(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_clear_dwc_graphics_before_each_run_metadata, newVal)

    _get_clear_additional_b_plane_points_metadata = { "name" : "clear_additional_b_plane_points",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def clear_additional_b_plane_points(self) -> bool:
        """If true, Astrogator will clear all additional B-Plane points from any previous run - in all graphics windows - before the current run."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_clear_additional_b_plane_points_metadata)

    _set_clear_additional_b_plane_points_metadata = { "name" : "clear_additional_b_plane_points",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @clear_additional_b_plane_points.setter
    def clear_additional_b_plane_points(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_clear_additional_b_plane_points_metadata, newVal)

    _get_propagate_on_apply_metadata = { "name" : "propagate_on_apply",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def propagate_on_apply(self) -> bool:
        """If true, Astrogator will propagate trajectories whenever you click OK or Apply on the Orbit page. If you want to close the Properties Browser for the satellite without running the MCS, make certain this option is disabled."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_propagate_on_apply_metadata)

    _set_propagate_on_apply_metadata = { "name" : "propagate_on_apply",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @propagate_on_apply.setter
    def propagate_on_apply(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_propagate_on_apply_metadata, newVal)

    _get_enable_trajectory_segment_colors_metadata = { "name" : "enable_trajectory_segment_colors",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_trajectory_segment_colors(self) -> bool:
        """If true, trajectory segments are displayed in the 2D Graphics window in the colors selected for the respective segments; otherwise the color of the trajectory is defined by the 2D Graphics Attributes page."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_enable_trajectory_segment_colors_metadata)

    _set_enable_trajectory_segment_colors_metadata = { "name" : "enable_trajectory_segment_colors",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_trajectory_segment_colors.setter
    def enable_trajectory_segment_colors(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_enable_trajectory_segment_colors_metadata, newVal)

    _get_save_numbers_in_raw_format_metadata = { "name" : "save_numbers_in_raw_format",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def save_numbers_in_raw_format(self) -> bool:
        """If true, Astrogator will store satellite information in binary format - to preserve the maximum amount of precision."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_save_numbers_in_raw_format_metadata)

    _set_save_numbers_in_raw_format_metadata = { "name" : "save_numbers_in_raw_format",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @save_numbers_in_raw_format.setter
    def save_numbers_in_raw_format(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_save_numbers_in_raw_format_metadata, newVal)

    _get_stopping_condition_time_tolerance_metadata = { "name" : "stopping_condition_time_tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def stopping_condition_time_tolerance(self) -> float:
        """The time tolerance, which will be applied with respect to desired trip values throughout the MCS. If this value is set to zero, time tolerance will not be applied."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_stopping_condition_time_tolerance_metadata)

    _set_stopping_condition_time_tolerance_metadata = { "name" : "stopping_condition_time_tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @stopping_condition_time_tolerance.setter
    def stopping_condition_time_tolerance(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_stopping_condition_time_tolerance_metadata, newVal)

    _get_enable_segment_controls_metadata = { "name" : "enable_segment_controls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_segment_controls(self) -> bool:
        """If true, Astrogator will automatically add independent variables to differential correctors."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_enable_segment_controls_metadata)

    _set_enable_segment_controls_metadata = { "name" : "enable_segment_controls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_segment_controls.setter
    def enable_segment_controls(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_enable_segment_controls_metadata, newVal)

    _get_enable_segment_results_metadata = { "name" : "enable_segment_results",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_segment_results(self) -> bool:
        """If true, Astrogator will automatically add dependent variables to differential correctors."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_enable_segment_results_metadata)

    _set_enable_segment_results_metadata = { "name" : "enable_segment_results",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_segment_results.setter
    def enable_segment_results(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_enable_segment_results_metadata, newVal)

    _get_enable_logging_metadata = { "name" : "enable_logging",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_logging(self) -> bool:
        """If true, target sequences can be set to produce 'run history' log files for differential corrector profiles. By default, a target sequence does not produce a log file."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_enable_logging_metadata)

    _set_enable_logging_metadata = { "name" : "enable_logging",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_logging.setter
    def enable_logging(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_enable_logging_metadata, newVal)

    _get_graphics_update_rate_metadata = { "name" : "graphics_update_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def graphics_update_rate(self) -> float:
        """The rate (between 0 and 1) at which to update graphics. Dimensionless."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_graphics_update_rate_metadata)

    _set_graphics_update_rate_metadata = { "name" : "graphics_update_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @graphics_update_rate.setter
    def graphics_update_rate(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_graphics_update_rate_metadata, newVal)

    _get_promote_controls_metadata = { "name" : "promote_controls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def promote_controls(self) -> bool:
        """If true, a target sequence will be able to affect controls and results within a nested target sequence in addition to its own."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_promote_controls_metadata)

    _set_promote_controls_metadata = { "name" : "promote_controls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @promote_controls.setter
    def promote_controls(self, inVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_promote_controls_metadata, inVal)

    _get_use_nominal_settings_metadata = { "name" : "use_nominal_settings",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_nominal_settings(self) -> bool:
        """If true, components or segments that are modified by a target sequence will be restored to their nominal values as soon as the target sequence completes its run."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_use_nominal_settings_metadata)

    _set_use_nominal_settings_metadata = { "name" : "use_nominal_settings",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_nominal_settings.setter
    def use_nominal_settings(self, inVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_use_nominal_settings_metadata, inVal)

    _get_min_ephem_step_metadata = { "name" : "min_ephem_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_ephem_step(self) -> float:
        """The minimum step size for saving ephemeris. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_min_ephem_step_metadata)

    _set_min_ephem_step_metadata = { "name" : "min_ephem_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_ephem_step.setter
    def min_ephem_step(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_min_ephem_step_metadata, newVal)

    _get_generate_ephemeris_metadata = { "name" : "generate_ephemeris",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def generate_ephemeris(self) -> bool:
        """If true, Astrogator will generate ephemeris."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_generate_ephemeris_metadata)

    _set_generate_ephemeris_metadata = { "name" : "generate_ephemeris",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @generate_ephemeris.setter
    def generate_ephemeris(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_generate_ephemeris_metadata, newVal)

    _get_user_variables_metadata = { "name" : "user_variables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_variables(self) -> "UserVariableDefinitionCollection":
        """Interface used to add/remove user variables."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_user_variables_metadata)

    _get_smart_run_mode_metadata = { "name" : "smart_run_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SMART_RUN_MODE),) }
    @property
    def smart_run_mode(self) -> "SMART_RUN_MODE":
        """Control whether the run will attempt to only run changed segments."""
        return self._intf.get_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._get_smart_run_mode_metadata)

    _set_smart_run_mode_metadata = { "name" : "smart_run_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SMART_RUN_MODE),) }
    @smart_run_mode.setter
    def smart_run_mode(self, inVal:"SMART_RUN_MODE") -> None:
        """Control whether the run will attempt to only run changed segments."""
        return self._intf.set_property(IMissionControlSequenceOptions._metadata, IMissionControlSequenceOptions._set_smart_run_mode_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{81715712-591E-4553-9DC7-A1266F82E7D9}", IMissionControlSequenceOptions)
agcls.AgTypeNameMap["IMissionControlSequenceOptions"] = IMissionControlSequenceOptions

class IDriverMissionControlSequence(object):
    """Properties for the Mission Control Sequence."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_main_sequence" : 1,
                             "get_options" : 2,
                             "get_auto_sequence" : 3,
                             "run_mission_control_sequence" : 4,
                             "begin_run" : 5,
                             "end_run" : 6,
                             "clear_dwc_graphics" : 7,
                             "reset_all_profiles" : 8,
                             "apply_all_profile_changes" : 9,
                             "append_run" : 10,
                             "append_run_from_time" : 11,
                             "append_run_from_state" : 12,
                             "run_mission_control_sequence2" : 13,
                             "get_calculation_graphs" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDriverMissionControlSequence)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDriverMissionControlSequence)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDriverMissionControlSequence, None)
    
    _get_main_sequence_metadata = { "name" : "main_sequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def main_sequence(self) -> "MissionControlSequenceSegmentCollection":
        """The Mission Control Sequence."""
        return self._intf.get_property(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._get_main_sequence_metadata)

    _get_options_metadata = { "name" : "options",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def options(self) -> "MissionControlSequenceOptions":
        """The Mission Control Sequence options."""
        return self._intf.get_property(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._get_options_metadata)

    _get_auto_sequence_metadata = { "name" : "auto_sequence",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def auto_sequence(self) -> "AutomaticSequenceCollection":
        """The Automatic Sequences."""
        return self._intf.get_property(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._get_auto_sequence_metadata)

    _run_mission_control_sequence_metadata = { "name" : "run_mission_control_sequence",
            "arg_types" : (),
            "marshallers" : () }
    def run_mission_control_sequence(self) -> None:
        """Run the current MCS."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._run_mission_control_sequence_metadata, )

    _begin_run_metadata = { "name" : "begin_run",
            "arg_types" : (),
            "marshallers" : () }
    def begin_run(self) -> None:
        """Begins an individual segment mode run."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._begin_run_metadata, )

    _end_run_metadata = { "name" : "end_run",
            "arg_types" : (),
            "marshallers" : () }
    def end_run(self) -> None:
        """End an individual segment mode run."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._end_run_metadata, )

    _clear_dwc_graphics_metadata = { "name" : "clear_dwc_graphics",
            "arg_types" : (),
            "marshallers" : () }
    def clear_dwc_graphics(self) -> None:
        """Clear the draw while calculating graphics"""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._clear_dwc_graphics_metadata, )

    _reset_all_profiles_metadata = { "name" : "reset_all_profiles",
            "arg_types" : (),
            "marshallers" : () }
    def reset_all_profiles(self) -> None:
        """Reset all active profiles in all target sequences."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._reset_all_profiles_metadata, )

    _apply_all_profile_changes_metadata = { "name" : "apply_all_profile_changes",
            "arg_types" : (),
            "marshallers" : () }
    def apply_all_profile_changes(self) -> None:
        """Apply all active profile changes in all target sequences."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._apply_all_profile_changes_metadata, )

    _append_run_metadata = { "name" : "append_run",
            "arg_types" : (),
            "marshallers" : () }
    def append_run(self) -> None:
        """Append the existing ephemeris with another individual segment mode run"""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._append_run_metadata, )

    _append_run_from_time_metadata = { "name" : "append_run_from_time",
            "arg_types" : (agcom.VARIANT, agcom.LONG,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(CLEAR_EPHEMERIS_DIRECTION),) }
    def append_run_from_time(self, epoch:typing.Any, clearEphemerisDirection:"CLEAR_EPHEMERIS_DIRECTION") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified time. Ephemeris is cleared from time based on clear direction."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._append_run_from_time_metadata, epoch, clearEphemerisDirection)

    _append_run_from_state_metadata = { "name" : "append_run_from_state",
            "arg_types" : (agcom.PVOID, agcom.LONG,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IState"), agmarshall.AgEnum_arg(CLEAR_EPHEMERIS_DIRECTION),) }
    def append_run_from_state(self, appendState:"IState", clearEphemerisDirection:"CLEAR_EPHEMERIS_DIRECTION") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified state. Ephemeris is cleared from time based on clear direction."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._append_run_from_state_metadata, appendState, clearEphemerisDirection)

    _run_mission_control_sequence2_metadata = { "name" : "run_mission_control_sequence2",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(RUN_CODE),) }
    def run_mission_control_sequence2(self) -> "RUN_CODE":
        """Run the current MCS and returns an error code."""
        return self._intf.invoke(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._run_mission_control_sequence2_metadata, out_arg())

    _get_calculation_graphs_metadata = { "name" : "calculation_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calculation_graphs(self) -> "CalculationGraphCollection":
        """The calculation graphs."""
        return self._intf.get_property(IDriverMissionControlSequence._metadata, IDriverMissionControlSequence._get_calculation_graphs_metadata)


agcls.AgClassCatalog.add_catalog_entry("{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}", IDriverMissionControlSequence)
agcls.AgTypeNameMap["IDriverMissionControlSequence"] = IDriverMissionControlSequence

class IElementCartesian(IElement):
    """Properties for Cartesian elements."""
    _num_methods = 12
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{63C45864-E165-498E-A88E-8104FABF50B9}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_x" : 1,
                             "set_x" : 2,
                             "get_y" : 3,
                             "set_y" : 4,
                             "get_z" : 5,
                             "set_z" : 6,
                             "get_vx" : 7,
                             "set_vx" : 8,
                             "get_vy" : 9,
                             "set_vy" : 10,
                             "get_vz" : 11,
                             "set_vz" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementCartesian)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementCartesian)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementCartesian, IElement)
    
    _get_x_metadata = { "name" : "x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def x(self) -> float:
        """X position component. Uses Distance Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_x_metadata)

    _set_x_metadata = { "name" : "x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @x.setter
    def x(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_x_metadata, newVal)

    _get_y_metadata = { "name" : "y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y(self) -> float:
        """Y position component. Uses Distance Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_y_metadata)

    _set_y_metadata = { "name" : "y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y.setter
    def y(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_y_metadata, newVal)

    _get_z_metadata = { "name" : "z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def z(self) -> float:
        """Z position component. Uses Distance Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_z_metadata)

    _set_z_metadata = { "name" : "z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @z.setter
    def z(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_z_metadata, newVal)

    _get_vx_metadata = { "name" : "vx",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vx(self) -> float:
        """Vx velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_vx_metadata)

    _set_vx_metadata = { "name" : "vx",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @vx.setter
    def vx(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_vx_metadata, newVal)

    _get_vy_metadata = { "name" : "vy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vy(self) -> float:
        """Vy velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_vy_metadata)

    _set_vy_metadata = { "name" : "vy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @vy.setter
    def vy(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_vy_metadata, newVal)

    _get_vz_metadata = { "name" : "vz",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vz(self) -> float:
        """Vz velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IElementCartesian._metadata, IElementCartesian._get_vz_metadata)

    _set_vz_metadata = { "name" : "vz",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @vz.setter
    def vz(self, newVal:float) -> None:
        return self._intf.set_property(IElementCartesian._metadata, IElementCartesian._set_vz_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{63C45864-E165-498E-A88E-8104FABF50B9}", IElementCartesian)
agcls.AgTypeNameMap["IElementCartesian"] = IElementCartesian

class IElementKeplerian(IElement):
    """Properties for Keplerian elements"""
    _num_methods = 46
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_semi_major_axis" : 1,
                             "set_semi_major_axis" : 2,
                             "get_eccentricity" : 3,
                             "set_eccentricity" : 4,
                             "get_inclination" : 5,
                             "set_inclination" : 6,
                             "get_raan" : 7,
                             "set_raan" : 8,
                             "get_arg_of_periapsis" : 9,
                             "set_arg_of_periapsis" : 10,
                             "get_true_anomaly" : 11,
                             "set_true_anomaly" : 12,
                             "get_apoapsis_altitude_size" : 13,
                             "set_apoapsis_altitude_size" : 14,
                             "get_apoapsis_radius_size" : 15,
                             "set_apoapsis_radius_size" : 16,
                             "get_mean_motion" : 17,
                             "set_mean_motion" : 18,
                             "get_periapsis_altitude_size" : 19,
                             "set_periapsis_altitude_size" : 20,
                             "get_periapsis_radius_size" : 21,
                             "set_periapsis_radius_size" : 22,
                             "get_period" : 23,
                             "set_period" : 24,
                             "get_lan" : 25,
                             "set_lan" : 26,
                             "get_arg_of_latitude" : 27,
                             "set_arg_of_latitude" : 28,
                             "get_eccentric_anomaly" : 29,
                             "set_eccentric_anomaly" : 30,
                             "get_mean_anomaly" : 31,
                             "set_mean_anomaly" : 32,
                             "get_time_past_asc_node" : 33,
                             "set_time_past_asc_node" : 34,
                             "get_time_past_periapsis" : 35,
                             "set_time_past_periapsis" : 36,
                             "get_element_type" : 37,
                             "set_element_type" : 38,
                             "get_apoapsis_altitude_shape" : 39,
                             "set_apoapsis_altitude_shape" : 40,
                             "get_apoapsis_radius_shape" : 41,
                             "set_apoapsis_radius_shape" : 42,
                             "get_periapsis_altitude_shape" : 43,
                             "set_periapsis_altitude_shape" : 44,
                             "get_periapsis_radius_shape" : 45,
                             "set_periapsis_radius_shape" : 46, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementKeplerian)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementKeplerian)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementKeplerian, IElement)
    
    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_semi_major_axis_metadata, newVal)

    _get_eccentricity_metadata = { "name" : "eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def eccentricity(self) -> float:
        """Describes the shape of the ellipse (a real number >= 0 and <1, where 0 = a circular orbit). Dimensionless."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_eccentricity_metadata)

    _set_eccentricity_metadata = { "name" : "eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @eccentricity.setter
    def eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_eccentricity_metadata, newVal)

    _get_inclination_metadata = { "name" : "inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_inclination_metadata)

    _set_inclination_metadata = { "name" : "inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inclination.setter
    def inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_inclination_metadata, newVal)

    _get_raan_metadata = { "name" : "raan",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def raan(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_raan_metadata)

    _set_raan_metadata = { "name" : "raan",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @raan.setter
    def raan(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_raan_metadata, newVal)

    _get_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def arg_of_periapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_arg_of_periapsis_metadata)

    _set_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @arg_of_periapsis.setter
    def arg_of_periapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_arg_of_periapsis_metadata, newVal)

    _get_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def true_anomaly(self) -> typing.Any:
        """The angle from the eccentricity vector (points toward perigee) to the satellite position vector, measured in the direction of satellite motion and in the orbit plane. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_true_anomaly_metadata)

    _set_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @true_anomaly.setter
    def true_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_true_anomaly_metadata, newVal)

    _get_apoapsis_altitude_size_metadata = { "name" : "apoapsis_altitude_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def apoapsis_altitude_size(self) -> float:
        """Measured from the ``surface`` of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_apoapsis_altitude_size_metadata)

    _set_apoapsis_altitude_size_metadata = { "name" : "apoapsis_altitude_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @apoapsis_altitude_size.setter
    def apoapsis_altitude_size(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_apoapsis_altitude_size_metadata, inVal)

    _get_apoapsis_radius_size_metadata = { "name" : "apoapsis_radius_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def apoapsis_radius_size(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_apoapsis_radius_size_metadata)

    _set_apoapsis_radius_size_metadata = { "name" : "apoapsis_radius_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @apoapsis_radius_size.setter
    def apoapsis_radius_size(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_apoapsis_radius_size_metadata, inVal)

    _get_mean_motion_metadata = { "name" : "mean_motion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_motion(self) -> float:
        """The uniform rate of the satellite in a circular orbit of the same period, typically expressed as degrees or radians per second, or as revolutions per day. Uses AngleRate dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_mean_motion_metadata)

    _set_mean_motion_metadata = { "name" : "mean_motion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_motion.setter
    def mean_motion(self, inVal:float) -> None:
        """."""
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_mean_motion_metadata, inVal)

    _get_periapsis_altitude_size_metadata = { "name" : "periapsis_altitude_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def periapsis_altitude_size(self) -> float:
        """Measured from the ``surface`` of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_periapsis_altitude_size_metadata)

    _set_periapsis_altitude_size_metadata = { "name" : "periapsis_altitude_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @periapsis_altitude_size.setter
    def periapsis_altitude_size(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_periapsis_altitude_size_metadata, inVal)

    _get_periapsis_radius_size_metadata = { "name" : "periapsis_radius_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def periapsis_radius_size(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_periapsis_radius_size_metadata)

    _set_periapsis_radius_size_metadata = { "name" : "periapsis_radius_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @periapsis_radius_size.setter
    def periapsis_radius_size(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_periapsis_radius_size_metadata, inVal)

    _get_period_metadata = { "name" : "period",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def period(self) -> float:
        """The duration of one orbit, based on assumed two-body motion. Uses Time dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_period_metadata)

    _set_period_metadata = { "name" : "period",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @period.setter
    def period(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_period_metadata, inVal)

    _get_lan_metadata = { "name" : "lan",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lan(self) -> typing.Any:
        """The Earth-fixed longitude where the satellite has crossed the inertial equator (the intersection of the ground track and the inertial equator) from south to north based on an assumption of two-body motion. Uses Angle dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_lan_metadata)

    _set_lan_metadata = { "name" : "lan",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lan.setter
    def lan(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_lan_metadata, inVal)

    _get_arg_of_latitude_metadata = { "name" : "arg_of_latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def arg_of_latitude(self) -> typing.Any:
        """The sum of the True Anomaly and the Argument of Perigee. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_arg_of_latitude_metadata)

    _set_arg_of_latitude_metadata = { "name" : "arg_of_latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @arg_of_latitude.setter
    def arg_of_latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_arg_of_latitude_metadata, newVal)

    _get_eccentric_anomaly_metadata = { "name" : "eccentric_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def eccentric_anomaly(self) -> typing.Any:
        """Angle measured with origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_eccentric_anomaly_metadata)

    _set_eccentric_anomaly_metadata = { "name" : "eccentric_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @eccentric_anomaly.setter
    def eccentric_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_eccentric_anomaly_metadata, newVal)

    _get_mean_anomaly_metadata = { "name" : "mean_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def mean_anomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate. Uses Angle Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_mean_anomaly_metadata)

    _set_mean_anomaly_metadata = { "name" : "mean_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @mean_anomaly.setter
    def mean_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_mean_anomaly_metadata, newVal)

    _get_time_past_asc_node_metadata = { "name" : "time_past_asc_node",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_past_asc_node(self) -> float:
        """The elapsed time since the last ascending node crossing based on assumed two-body motion. Uses Time Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_time_past_asc_node_metadata)

    _set_time_past_asc_node_metadata = { "name" : "time_past_asc_node",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_past_asc_node.setter
    def time_past_asc_node(self, newVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_time_past_asc_node_metadata, newVal)

    _get_time_past_periapsis_metadata = { "name" : "time_past_periapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_past_periapsis(self) -> float:
        """The elapsed time since the last perigee passage based on assumed two-body motion. Uses Time Dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_time_past_periapsis_metadata)

    _set_time_past_periapsis_metadata = { "name" : "time_past_periapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_past_periapsis.setter
    def time_past_periapsis(self, newVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_time_past_periapsis_metadata, newVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @property
    def element_type(self) -> "ELEMENT":
        """Which type of element (osculating or mean)."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @element_type.setter
    def element_type(self, inVal:"ELEMENT") -> None:
        """."""
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_element_type_metadata, inVal)

    _get_apoapsis_altitude_shape_metadata = { "name" : "apoapsis_altitude_shape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def apoapsis_altitude_shape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_apoapsis_altitude_shape_metadata)

    _set_apoapsis_altitude_shape_metadata = { "name" : "apoapsis_altitude_shape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @apoapsis_altitude_shape.setter
    def apoapsis_altitude_shape(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_apoapsis_altitude_shape_metadata, inVal)

    _get_apoapsis_radius_shape_metadata = { "name" : "apoapsis_radius_shape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def apoapsis_radius_shape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_apoapsis_radius_shape_metadata)

    _set_apoapsis_radius_shape_metadata = { "name" : "apoapsis_radius_shape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @apoapsis_radius_shape.setter
    def apoapsis_radius_shape(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_apoapsis_radius_shape_metadata, inVal)

    _get_periapsis_altitude_shape_metadata = { "name" : "periapsis_altitude_shape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def periapsis_altitude_shape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_periapsis_altitude_shape_metadata)

    _set_periapsis_altitude_shape_metadata = { "name" : "periapsis_altitude_shape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @periapsis_altitude_shape.setter
    def periapsis_altitude_shape(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_periapsis_altitude_shape_metadata, inVal)

    _get_periapsis_radius_shape_metadata = { "name" : "periapsis_radius_shape",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def periapsis_radius_shape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        return self._intf.get_property(IElementKeplerian._metadata, IElementKeplerian._get_periapsis_radius_shape_metadata)

    _set_periapsis_radius_shape_metadata = { "name" : "periapsis_radius_shape",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @periapsis_radius_shape.setter
    def periapsis_radius_shape(self, inVal:float) -> None:
        return self._intf.set_property(IElementKeplerian._metadata, IElementKeplerian._set_periapsis_radius_shape_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}", IElementKeplerian)
agcls.AgTypeNameMap["IElementKeplerian"] = IElementKeplerian

class IElementDelaunay(IElement):
    """Properties for Delaunay elements"""
    _num_methods = 18
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_mean_anomaly" : 1,
                             "set_mean_anomaly" : 2,
                             "get_arg_of_periapsis" : 3,
                             "set_arg_of_periapsis" : 4,
                             "get_raan" : 5,
                             "set_raan" : 6,
                             "get_delaunay_l" : 7,
                             "set_delaunay_l" : 8,
                             "get_semi_major_axis" : 9,
                             "set_semi_major_axis" : 10,
                             "get_delaunay_g" : 11,
                             "set_delaunay_g" : 12,
                             "get_semilatus_rectum" : 13,
                             "set_semilatus_rectum" : 14,
                             "get_delaunay_h" : 15,
                             "set_delaunay_h" : 16,
                             "get_inclination" : 17,
                             "set_inclination" : 18, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementDelaunay)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementDelaunay)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementDelaunay, IElement)
    
    _get_mean_anomaly_metadata = { "name" : "mean_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def mean_anomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate (l). Uses Angle Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_mean_anomaly_metadata)

    _set_mean_anomaly_metadata = { "name" : "mean_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @mean_anomaly.setter
    def mean_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_mean_anomaly_metadata, newVal)

    _get_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def arg_of_periapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane (g). Uses Angle Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_arg_of_periapsis_metadata)

    _set_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @arg_of_periapsis.setter
    def arg_of_periapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_arg_of_periapsis_metadata, newVal)

    _get_raan_metadata = { "name" : "raan",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def raan(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane (h). Uses Angle Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_raan_metadata)

    _set_raan_metadata = { "name" : "raan",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @raan.setter
    def raan(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_raan_metadata, newVal)

    _get_delaunay_l_metadata = { "name" : "delaunay_l",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delaunay_l(self) -> float:
        """Related to the two-body orbital energy. Defined as sqrt(GM * a).   Uses AreaRate Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_delaunay_l_metadata)

    _set_delaunay_l_metadata = { "name" : "delaunay_l",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delaunay_l.setter
    def delaunay_l(self, newVal:float) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_delaunay_l_metadata, newVal)

    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_semi_major_axis_metadata, newVal)

    _get_delaunay_g_metadata = { "name" : "delaunay_g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delaunay_g(self) -> float:
        """The magnitude of the orbital angular momentum. Defined as sqrt(GM * p). Uses AreaRate Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_delaunay_g_metadata)

    _set_delaunay_g_metadata = { "name" : "delaunay_g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delaunay_g.setter
    def delaunay_g(self, newVal:float) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_delaunay_g_metadata, newVal)

    _get_semilatus_rectum_metadata = { "name" : "semilatus_rectum",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semilatus_rectum(self) -> float:
        """Semi-latus Rectum. Uses Distance Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_semilatus_rectum_metadata)

    _set_semilatus_rectum_metadata = { "name" : "semilatus_rectum",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semilatus_rectum.setter
    def semilatus_rectum(self, newVal:float) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_semilatus_rectum_metadata, newVal)

    _get_delaunay_h_metadata = { "name" : "delaunay_h",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delaunay_h(self) -> float:
        """The Z component of the orbital angular momentum. Defined as G cos(inc).  Uses AreaRate Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_delaunay_h_metadata)

    _set_delaunay_h_metadata = { "name" : "delaunay_h",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delaunay_h.setter
    def delaunay_h(self, newVal:float) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_delaunay_h_metadata, newVal)

    _get_inclination_metadata = { "name" : "inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IElementDelaunay._metadata, IElementDelaunay._get_inclination_metadata)

    _set_inclination_metadata = { "name" : "inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inclination.setter
    def inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementDelaunay._metadata, IElementDelaunay._set_inclination_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}", IElementDelaunay)
agcls.AgTypeNameMap["IElementDelaunay"] = IElementDelaunay

class IElementEquinoctial(IElement):
    """Properties for Equinoctial elements"""
    _num_methods = 16
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{90FA8C03-AA29-446A-A23A-085B71502DAA}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_semi_major_axis" : 1,
                             "set_semi_major_axis" : 2,
                             "get_mean_motion" : 3,
                             "set_mean_motion" : 4,
                             "get_h" : 5,
                             "set_h" : 6,
                             "get_k" : 7,
                             "set_k" : 8,
                             "get_p" : 9,
                             "set_p" : 10,
                             "get_q" : 11,
                             "set_q" : 12,
                             "get_mean_longitude" : 13,
                             "set_mean_longitude" : 14,
                             "get_formulation" : 15,
                             "set_formulation" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementEquinoctial)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementEquinoctial)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementEquinoctial, IElement)
    
    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """Half the length of the major axis of the orbital ellipse. Uses Distance Dimension."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_semi_major_axis_metadata, newVal)

    _get_mean_motion_metadata = { "name" : "mean_motion",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_motion(self) -> float:
        """The average angular rate of the satellite based on 2 body motion. Uses Rate Dimension."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_mean_motion_metadata)

    _set_mean_motion_metadata = { "name" : "mean_motion",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_motion.setter
    def mean_motion(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_mean_motion_metadata, newVal)

    _get_h_metadata = { "name" : "h",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def h(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_h_metadata)

    _set_h_metadata = { "name" : "h",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @h.setter
    def h(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_h_metadata, newVal)

    _get_k_metadata = { "name" : "k",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_k_metadata)

    _set_k_metadata = { "name" : "k",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k.setter
    def k(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_k_metadata, newVal)

    _get_p_metadata = { "name" : "p",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def p(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_p_metadata)

    _set_p_metadata = { "name" : "p",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @p.setter
    def p(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_p_metadata, newVal)

    _get_q_metadata = { "name" : "q",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def q(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_q_metadata)

    _set_q_metadata = { "name" : "q",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @q.setter
    def q(self, newVal:float) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_q_metadata, newVal)

    _get_mean_longitude_metadata = { "name" : "mean_longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def mean_longitude(self) -> typing.Any:
        """Specify a satellite's position within its orbit at epoch and equals the sum of the classical Right Ascension of the Ascending Node, Argument of Perigee, and Mean Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_mean_longitude_metadata)

    _set_mean_longitude_metadata = { "name" : "mean_longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @mean_longitude.setter
    def mean_longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_mean_longitude_metadata, newVal)

    _get_formulation_metadata = { "name" : "formulation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(FORMULATION),) }
    @property
    def formulation(self) -> "FORMULATION":
        """Retrograde, which has its singularity at an inclination of 0 deg. Posigrade, which has its singularity at an inclination of 180 deg."""
        return self._intf.get_property(IElementEquinoctial._metadata, IElementEquinoctial._get_formulation_metadata)

    _set_formulation_metadata = { "name" : "formulation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(FORMULATION),) }
    @formulation.setter
    def formulation(self, inVal:"FORMULATION") -> None:
        return self._intf.set_property(IElementEquinoctial._metadata, IElementEquinoctial._set_formulation_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{90FA8C03-AA29-446A-A23A-085B71502DAA}", IElementEquinoctial)
agcls.AgTypeNameMap["IElementEquinoctial"] = IElementEquinoctial

class IElementMixedSpherical(IElement):
    """Properties for Mixed Spherical elements"""
    _num_methods = 14
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_longitude" : 1,
                             "set_longitude" : 2,
                             "get_latitude" : 3,
                             "set_latitude" : 4,
                             "get_altitude" : 5,
                             "set_altitude" : 6,
                             "get_horizontal_flight_path_angle" : 7,
                             "set_horizontal_flight_path_angle" : 8,
                             "get_velocity_azimuth" : 9,
                             "set_velocity_azimuth" : 10,
                             "get_velocity_magnitude" : 11,
                             "set_velocity_magnitude" : 12,
                             "get_vertical_flight_path_angle" : 13,
                             "set_vertical_flight_path_angle" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementMixedSpherical)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementMixedSpherical)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementMixedSpherical, IElement)
    
    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """Measured from -180.0 deg to +360.0 deg. Uses Angle Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_longitude_metadata, newVal)

    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """Measured from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between (1) the normal to the reference ellipsoid that passes through the satellite position and (2) the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_latitude_metadata, newVal)

    _get_altitude_metadata = { "name" : "altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude(self) -> float:
        """The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_altitude_metadata)

    _set_altitude_metadata = { "name" : "altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude.setter
    def altitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_altitude_metadata, newVal)

    _get_horizontal_flight_path_angle_metadata = { "name" : "horizontal_flight_path_angle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def horizontal_flight_path_angle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_horizontal_flight_path_angle_metadata)

    _set_horizontal_flight_path_angle_metadata = { "name" : "horizontal_flight_path_angle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @horizontal_flight_path_angle.setter
    def horizontal_flight_path_angle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_horizontal_flight_path_angle_metadata, newVal)

    _get_velocity_azimuth_metadata = { "name" : "velocity_azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def velocity_azimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_velocity_azimuth_metadata)

    _set_velocity_azimuth_metadata = { "name" : "velocity_azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @velocity_azimuth.setter
    def velocity_azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_velocity_azimuth_metadata, newVal)

    _get_velocity_magnitude_metadata = { "name" : "velocity_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def velocity_magnitude(self) -> float:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Rate Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_velocity_magnitude_metadata)

    _set_velocity_magnitude_metadata = { "name" : "velocity_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @velocity_magnitude.setter
    def velocity_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_velocity_magnitude_metadata, newVal)

    _get_vertical_flight_path_angle_metadata = { "name" : "vertical_flight_path_angle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def vertical_flight_path_angle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IElementMixedSpherical._metadata, IElementMixedSpherical._get_vertical_flight_path_angle_metadata)

    _set_vertical_flight_path_angle_metadata = { "name" : "vertical_flight_path_angle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @vertical_flight_path_angle.setter
    def vertical_flight_path_angle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementMixedSpherical._metadata, IElementMixedSpherical._set_vertical_flight_path_angle_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}", IElementMixedSpherical)
agcls.AgTypeNameMap["IElementMixedSpherical"] = IElementMixedSpherical

class IElementSpherical(IElement):
    """Properties for Spherical elements"""
    _num_methods = 14
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_right_ascension" : 1,
                             "set_right_ascension" : 2,
                             "get_declination" : 3,
                             "set_declination" : 4,
                             "get_radius_magnitude" : 5,
                             "set_radius_magnitude" : 6,
                             "get_horizontal_flight_path_angle" : 7,
                             "set_horizontal_flight_path_angle" : 8,
                             "get_velocity_azimuth" : 9,
                             "set_velocity_azimuth" : 10,
                             "get_velocity_magnitude" : 11,
                             "set_velocity_magnitude" : 12,
                             "get_vertical_flight_path_angle" : 13,
                             "set_vertical_flight_path_angle" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementSpherical)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementSpherical)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementSpherical, IElement)
    
    _get_right_ascension_metadata = { "name" : "right_ascension",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def right_ascension(self) -> typing.Any:
        """Defined as the angle from the X axis to the projection of the satellite position vector in the equatorial plane measured as positive in the direction of the Y axis. Uses Angle Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_right_ascension_metadata)

    _set_right_ascension_metadata = { "name" : "right_ascension",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @right_ascension.setter
    def right_ascension(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_right_ascension_metadata, newVal)

    _get_declination_metadata = { "name" : "declination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def declination(self) -> typing.Any:
        """Defined as the angle between the satellite position vector and the inertial equatorial plane measured as positive toward the positive inertial Z axis. Uses Angle Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_declination_metadata)

    _set_declination_metadata = { "name" : "declination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @declination.setter
    def declination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_declination_metadata, newVal)

    _get_radius_magnitude_metadata = { "name" : "radius_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius_magnitude(self) -> float:
        """The magnitude of the satellite position vector. Uses Distance Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_radius_magnitude_metadata)

    _set_radius_magnitude_metadata = { "name" : "radius_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius_magnitude.setter
    def radius_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_radius_magnitude_metadata, newVal)

    _get_horizontal_flight_path_angle_metadata = { "name" : "horizontal_flight_path_angle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def horizontal_flight_path_angle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_horizontal_flight_path_angle_metadata)

    _set_horizontal_flight_path_angle_metadata = { "name" : "horizontal_flight_path_angle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @horizontal_flight_path_angle.setter
    def horizontal_flight_path_angle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_horizontal_flight_path_angle_metadata, newVal)

    _get_velocity_azimuth_metadata = { "name" : "velocity_azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def velocity_azimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_velocity_azimuth_metadata)

    _set_velocity_azimuth_metadata = { "name" : "velocity_azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @velocity_azimuth.setter
    def velocity_azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_velocity_azimuth_metadata, newVal)

    _get_velocity_magnitude_metadata = { "name" : "velocity_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def velocity_magnitude(self) -> float:
        """The magnitude of the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_velocity_magnitude_metadata)

    _set_velocity_magnitude_metadata = { "name" : "velocity_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @velocity_magnitude.setter
    def velocity_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_velocity_magnitude_metadata, newVal)

    _get_vertical_flight_path_angle_metadata = { "name" : "vertical_flight_path_angle",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def vertical_flight_path_angle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        return self._intf.get_property(IElementSpherical._metadata, IElementSpherical._get_vertical_flight_path_angle_metadata)

    _set_vertical_flight_path_angle_metadata = { "name" : "vertical_flight_path_angle",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @vertical_flight_path_angle.setter
    def vertical_flight_path_angle(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementSpherical._metadata, IElementSpherical._set_vertical_flight_path_angle_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}", IElementSpherical)
agcls.AgTypeNameMap["IElementSpherical"] = IElementSpherical

class IElementTargetVectorIncomingAsymptote(IElement):
    """Properties for Target Vector Incoming Asymptote elements."""
    _num_methods = 12
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_radius_of_periapsis" : 1,
                             "set_radius_of_periapsis" : 2,
                             "get_c3_energy" : 3,
                             "set_c3_energy" : 4,
                             "get_ra_incoming_asymptote" : 5,
                             "set_ra_incoming_asymptote" : 6,
                             "get_declination_incoming_asymptote" : 7,
                             "set_declination_incoming_asymptote" : 8,
                             "get_velocity_azimuth_periapsis" : 9,
                             "set_velocity_azimuth_periapsis" : 10,
                             "get_true_anomaly" : 11,
                             "set_true_anomaly" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementTargetVectorIncomingAsymptote)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementTargetVectorIncomingAsymptote)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementTargetVectorIncomingAsymptote, IElement)
    
    _get_radius_of_periapsis_metadata = { "name" : "radius_of_periapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius_of_periapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_radius_of_periapsis_metadata)

    _set_radius_of_periapsis_metadata = { "name" : "radius_of_periapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius_of_periapsis.setter
    def radius_of_periapsis(self, newVal:float) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_radius_of_periapsis_metadata, newVal)

    _get_c3_energy_metadata = { "name" : "c3_energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c3_energy(self) -> float:
        """C3Energy (Rate squared)."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_c3_energy_metadata)

    _set_c3_energy_metadata = { "name" : "c3_energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c3_energy.setter
    def c3_energy(self, newVal:float) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_c3_energy_metadata, newVal)

    _get_ra_incoming_asymptote_metadata = { "name" : "ra_incoming_asymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ra_incoming_asymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_ra_incoming_asymptote_metadata)

    _set_ra_incoming_asymptote_metadata = { "name" : "ra_incoming_asymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ra_incoming_asymptote.setter
    def ra_incoming_asymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_ra_incoming_asymptote_metadata, newVal)

    _get_declination_incoming_asymptote_metadata = { "name" : "declination_incoming_asymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def declination_incoming_asymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_declination_incoming_asymptote_metadata)

    _set_declination_incoming_asymptote_metadata = { "name" : "declination_incoming_asymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @declination_incoming_asymptote.setter
    def declination_incoming_asymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_declination_incoming_asymptote_metadata, newVal)

    _get_velocity_azimuth_periapsis_metadata = { "name" : "velocity_azimuth_periapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def velocity_azimuth_periapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_velocity_azimuth_periapsis_metadata)

    _set_velocity_azimuth_periapsis_metadata = { "name" : "velocity_azimuth_periapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @velocity_azimuth_periapsis.setter
    def velocity_azimuth_periapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_velocity_azimuth_periapsis_metadata, newVal)

    _get_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def true_anomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._get_true_anomaly_metadata)

    _set_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @true_anomaly.setter
    def true_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorIncomingAsymptote._metadata, IElementTargetVectorIncomingAsymptote._set_true_anomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}", IElementTargetVectorIncomingAsymptote)
agcls.AgTypeNameMap["IElementTargetVectorIncomingAsymptote"] = IElementTargetVectorIncomingAsymptote

class IElementTargetVectorOutgoingAsymptote(IElement):
    """Properties for Target Vector Outgoing Asymptote elements."""
    _num_methods = 12
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{BE7E87B6-AC1F-4A19-A1C8-15272B707777}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_radius_of_periapsis" : 1,
                             "set_radius_of_periapsis" : 2,
                             "get_c3_energy" : 3,
                             "set_c3_energy" : 4,
                             "get_ra_outgoing_asymptote" : 5,
                             "set_ra_outgoing_asymptote" : 6,
                             "get_declination_outgoing_asymptote" : 7,
                             "set_declination_outgoing_asymptote" : 8,
                             "get_velocity_azimuth_periapsis" : 9,
                             "set_velocity_azimuth_periapsis" : 10,
                             "get_true_anomaly" : 11,
                             "set_true_anomaly" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementTargetVectorOutgoingAsymptote)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementTargetVectorOutgoingAsymptote)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementTargetVectorOutgoingAsymptote, IElement)
    
    _get_radius_of_periapsis_metadata = { "name" : "radius_of_periapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius_of_periapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_radius_of_periapsis_metadata)

    _set_radius_of_periapsis_metadata = { "name" : "radius_of_periapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius_of_periapsis.setter
    def radius_of_periapsis(self, newVal:float) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_radius_of_periapsis_metadata, newVal)

    _get_c3_energy_metadata = { "name" : "c3_energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c3_energy(self) -> float:
        """C3Energy (Rate Squared)."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_c3_energy_metadata)

    _set_c3_energy_metadata = { "name" : "c3_energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c3_energy.setter
    def c3_energy(self, newVal:float) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_c3_energy_metadata, newVal)

    _get_ra_outgoing_asymptote_metadata = { "name" : "ra_outgoing_asymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def ra_outgoing_asymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_ra_outgoing_asymptote_metadata)

    _set_ra_outgoing_asymptote_metadata = { "name" : "ra_outgoing_asymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @ra_outgoing_asymptote.setter
    def ra_outgoing_asymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_ra_outgoing_asymptote_metadata, newVal)

    _get_declination_outgoing_asymptote_metadata = { "name" : "declination_outgoing_asymptote",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def declination_outgoing_asymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_declination_outgoing_asymptote_metadata)

    _set_declination_outgoing_asymptote_metadata = { "name" : "declination_outgoing_asymptote",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @declination_outgoing_asymptote.setter
    def declination_outgoing_asymptote(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_declination_outgoing_asymptote_metadata, newVal)

    _get_velocity_azimuth_periapsis_metadata = { "name" : "velocity_azimuth_periapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def velocity_azimuth_periapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_velocity_azimuth_periapsis_metadata)

    _set_velocity_azimuth_periapsis_metadata = { "name" : "velocity_azimuth_periapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @velocity_azimuth_periapsis.setter
    def velocity_azimuth_periapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_velocity_azimuth_periapsis_metadata, newVal)

    _get_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def true_anomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._get_true_anomaly_metadata)

    _set_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @true_anomaly.setter
    def true_anomaly(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementTargetVectorOutgoingAsymptote._metadata, IElementTargetVectorOutgoingAsymptote._set_true_anomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BE7E87B6-AC1F-4A19-A1C8-15272B707777}", IElementTargetVectorOutgoingAsymptote)
agcls.AgTypeNameMap["IElementTargetVectorOutgoingAsymptote"] = IElementTargetVectorOutgoingAsymptote

class IElementGeodetic(IElement):
    """Properties for Geodetic elements"""
    _num_methods = 16
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{091F376E-6C32-4567-BE00-D1CE1857B50F}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_latitude" : 1,
                             "set_latitude" : 2,
                             "get_longitude" : 3,
                             "set_longitude" : 4,
                             "get_altitude" : 5,
                             "set_altitude" : 6,
                             "get_radius_magnitude" : 7,
                             "set_radius_magnitude" : 8,
                             "get_latitude_rate" : 9,
                             "set_latitude_rate" : 10,
                             "get_longitude_rate" : 11,
                             "set_longitude_rate" : 12,
                             "get_altitude_rate" : 13,
                             "set_altitude_rate" : 14,
                             "get_radius_rate" : 15,
                             "set_radius_rate" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementGeodetic)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementGeodetic)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementGeodetic, IElement)
    
    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """Measured in degrees from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between the normal to the reference ellipsoid and the equatorial plane. Uses Angle Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_latitude_metadata, newVal)

    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """Measured in degrees from -360.0 deg to +360.0 deg. The longitude of a point is the angle between the projection of the position vector in the equatorial plane and the prime meridian. Uses Angle Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_longitude_metadata, newVal)

    _get_altitude_metadata = { "name" : "altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude(self) -> float:
        """Measured along an outward normal to the surface of the ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_altitude_metadata)

    _set_altitude_metadata = { "name" : "altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude.setter
    def altitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_altitude_metadata, newVal)

    _get_radius_magnitude_metadata = { "name" : "radius_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius_magnitude(self) -> float:
        """Measured from the center of the Earth. Specified as distance above or below the reference ellipsoid. Uses Distance Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_radius_magnitude_metadata)

    _set_radius_magnitude_metadata = { "name" : "radius_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius_magnitude.setter
    def radius_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_radius_magnitude_metadata, newVal)

    _get_latitude_rate_metadata = { "name" : "latitude_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def latitude_rate(self) -> float:
        """The rate of change of the satellite's latitude. Uses Rate Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_latitude_rate_metadata)

    _set_latitude_rate_metadata = { "name" : "latitude_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @latitude_rate.setter
    def latitude_rate(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_latitude_rate_metadata, newVal)

    _get_longitude_rate_metadata = { "name" : "longitude_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def longitude_rate(self) -> float:
        """The rate of change of the satellite's longitude. Uses Rate Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_longitude_rate_metadata)

    _set_longitude_rate_metadata = { "name" : "longitude_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @longitude_rate.setter
    def longitude_rate(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_longitude_rate_metadata, newVal)

    _get_altitude_rate_metadata = { "name" : "altitude_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude_rate(self) -> float:
        """The rate of change of the altitude. Uses Rate Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_altitude_rate_metadata)

    _set_altitude_rate_metadata = { "name" : "altitude_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude_rate.setter
    def altitude_rate(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_altitude_rate_metadata, newVal)

    _get_radius_rate_metadata = { "name" : "radius_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius_rate(self) -> float:
        """The rate of change of the radius. Uses Rate Dimension."""
        return self._intf.get_property(IElementGeodetic._metadata, IElementGeodetic._get_radius_rate_metadata)

    _set_radius_rate_metadata = { "name" : "radius_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius_rate.setter
    def radius_rate(self, newVal:float) -> None:
        return self._intf.set_property(IElementGeodetic._metadata, IElementGeodetic._set_radius_rate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{091F376E-6C32-4567-BE00-D1CE1857B50F}", IElementGeodetic)
agcls.AgTypeNameMap["IElementGeodetic"] = IElementGeodetic

class IElementBPlane(IElement):
    """Properties for BPlane elements"""
    _num_methods = 26
    _vtable_offset = IElement._vtable_offset + IElement._num_methods
    _metadata = {
        "uuid" : "{83490C08-4958-4B0E-8AE9-E6795F70211A}",
        "vtable_reference" : IElement._vtable_offset + IElement._num_methods - 1,
        "method_offsets" : { "get_right_ascension_of_b_plane" : 1,
                             "set_right_ascension_of_b_plane" : 2,
                             "get_declination_of_b_plane" : 3,
                             "set_declination_of_b_plane" : 4,
                             "get_b_dot_r_first_b_vector" : 5,
                             "set_b_dot_r_first_b_vector" : 6,
                             "get_b_dot_t_second_b_vector" : 7,
                             "set_b_dot_t_second_b_vector" : 8,
                             "get_hyperbolic_turning_angle" : 9,
                             "set_hyperbolic_turning_angle" : 10,
                             "get_orbital_c3_energy" : 11,
                             "set_orbital_c3_energy" : 12,
                             "get_hyperbolic_v_infinity" : 13,
                             "set_hyperbolic_v_infinity" : 14,
                             "get_semi_major_axis" : 15,
                             "set_semi_major_axis" : 16,
                             "get_b_dot_t_first_b_vector" : 17,
                             "set_b_dot_t_first_b_vector" : 18,
                             "get_b_theta_first_b_vector" : 19,
                             "set_b_theta_first_b_vector" : 20,
                             "get_b_dot_r_second_b_vector" : 21,
                             "set_b_dot_r_second_b_vector" : 22,
                             "get_b_magnitude_second_b_vector" : 23,
                             "set_b_magnitude_second_b_vector" : 24,
                             "get_true_anomaly" : 25,
                             "set_true_anomaly" : 26, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IElementBPlane)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IElementBPlane)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IElementBPlane, IElement)
    
    _get_right_ascension_of_b_plane_metadata = { "name" : "right_ascension_of_b_plane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def right_ascension_of_b_plane(self) -> float:
        """Right Ascension of the B-Plane Normal."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_right_ascension_of_b_plane_metadata)

    _set_right_ascension_of_b_plane_metadata = { "name" : "right_ascension_of_b_plane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @right_ascension_of_b_plane.setter
    def right_ascension_of_b_plane(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_right_ascension_of_b_plane_metadata, newVal)

    _get_declination_of_b_plane_metadata = { "name" : "declination_of_b_plane",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def declination_of_b_plane(self) -> float:
        """Declination of the B-Plane Normal."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_declination_of_b_plane_metadata)

    _set_declination_of_b_plane_metadata = { "name" : "declination_of_b_plane",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @declination_of_b_plane.setter
    def declination_of_b_plane(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_declination_of_b_plane_metadata, newVal)

    _get_b_dot_r_first_b_vector_metadata = { "name" : "b_dot_r_first_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_dot_r_first_b_vector(self) -> float:
        """B vector dotted with R vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_dot_r_first_b_vector_metadata)

    _set_b_dot_r_first_b_vector_metadata = { "name" : "b_dot_r_first_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_dot_r_first_b_vector.setter
    def b_dot_r_first_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_dot_r_first_b_vector_metadata, newVal)

    _get_b_dot_t_second_b_vector_metadata = { "name" : "b_dot_t_second_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_dot_t_second_b_vector(self) -> float:
        """B vector dotted with T vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_dot_t_second_b_vector_metadata)

    _set_b_dot_t_second_b_vector_metadata = { "name" : "b_dot_t_second_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_dot_t_second_b_vector.setter
    def b_dot_t_second_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_dot_t_second_b_vector_metadata, newVal)

    _get_hyperbolic_turning_angle_metadata = { "name" : "hyperbolic_turning_angle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def hyperbolic_turning_angle(self) -> float:
        """Hyperbolic turning angle."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_hyperbolic_turning_angle_metadata)

    _set_hyperbolic_turning_angle_metadata = { "name" : "hyperbolic_turning_angle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @hyperbolic_turning_angle.setter
    def hyperbolic_turning_angle(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_hyperbolic_turning_angle_metadata, newVal)

    _get_orbital_c3_energy_metadata = { "name" : "orbital_c3_energy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def orbital_c3_energy(self) -> float:
        """Orbital C3 Energy."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_orbital_c3_energy_metadata)

    _set_orbital_c3_energy_metadata = { "name" : "orbital_c3_energy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @orbital_c3_energy.setter
    def orbital_c3_energy(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_orbital_c3_energy_metadata, newVal)

    _get_hyperbolic_v_infinity_metadata = { "name" : "hyperbolic_v_infinity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def hyperbolic_v_infinity(self) -> float:
        """Hyperbolic V infinity."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_hyperbolic_v_infinity_metadata)

    _set_hyperbolic_v_infinity_metadata = { "name" : "hyperbolic_v_infinity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @hyperbolic_v_infinity.setter
    def hyperbolic_v_infinity(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_hyperbolic_v_infinity_metadata, newVal)

    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """Semi-major axis."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_semi_major_axis_metadata, newVal)

    _get_b_dot_t_first_b_vector_metadata = { "name" : "b_dot_t_first_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_dot_t_first_b_vector(self) -> float:
        """B vector dotted with T vector used as the first quantity to define the B vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_dot_t_first_b_vector_metadata)

    _set_b_dot_t_first_b_vector_metadata = { "name" : "b_dot_t_first_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_dot_t_first_b_vector.setter
    def b_dot_t_first_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_dot_t_first_b_vector_metadata, newVal)

    _get_b_theta_first_b_vector_metadata = { "name" : "b_theta_first_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_theta_first_b_vector(self) -> float:
        """Angle between the B vector and T vector used as the first quantity to define the B vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_theta_first_b_vector_metadata)

    _set_b_theta_first_b_vector_metadata = { "name" : "b_theta_first_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_theta_first_b_vector.setter
    def b_theta_first_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_theta_first_b_vector_metadata, newVal)

    _get_b_dot_r_second_b_vector_metadata = { "name" : "b_dot_r_second_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_dot_r_second_b_vector(self) -> float:
        """B vector dotted with T vector used as the second quantity to define the B vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_dot_r_second_b_vector_metadata)

    _set_b_dot_r_second_b_vector_metadata = { "name" : "b_dot_r_second_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_dot_r_second_b_vector.setter
    def b_dot_r_second_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_dot_r_second_b_vector_metadata, newVal)

    _get_b_magnitude_second_b_vector_metadata = { "name" : "b_magnitude_second_b_vector",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b_magnitude_second_b_vector(self) -> float:
        """Magnitude of the B vector used as the second quantity to define the B vector."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_b_magnitude_second_b_vector_metadata)

    _set_b_magnitude_second_b_vector_metadata = { "name" : "b_magnitude_second_b_vector",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b_magnitude_second_b_vector.setter
    def b_magnitude_second_b_vector(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_b_magnitude_second_b_vector_metadata, newVal)

    _get_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def true_anomaly(self) -> float:
        """True Anomaly."""
        return self._intf.get_property(IElementBPlane._metadata, IElementBPlane._get_true_anomaly_metadata)

    _set_true_anomaly_metadata = { "name" : "true_anomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @true_anomaly.setter
    def true_anomaly(self, newVal:float) -> None:
        return self._intf.set_property(IElementBPlane._metadata, IElementBPlane._set_true_anomaly_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{83490C08-4958-4B0E-8AE9-E6795F70211A}", IElementBPlane)
agcls.AgTypeNameMap["IElementBPlane"] = IElementBPlane

class IStoppingCondition(IStoppingConditionComponent):
    """Basic properties for a stopping condition."""
    _num_methods = 30
    _vtable_offset = IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{7B18D549-E67A-4532-9767-ECC78418475D}",
        "vtable_reference" : IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_trip" : 1,
                             "set_trip" : 2,
                             "get_tolerance" : 3,
                             "set_tolerance" : 4,
                             "get_repeat_count" : 5,
                             "set_repeat_count" : 6,
                             "get_inherited" : 7,
                             "set_inherited" : 8,
                             "get_max_trip_times" : 9,
                             "set_max_trip_times" : 10,
                             "get_coord_system" : 11,
                             "set_coord_system" : 12,
                             "get_sequence" : 13,
                             "set_sequence" : 14,
                             "get_constraints" : 15,
                             "get_user_calc_object_name" : 16,
                             "set_user_calc_object_name" : 17,
                             "get_user_calc_object" : 18,
                             "set_user_calc_object" : 19,
                             "get_central_body_name" : 20,
                             "set_central_body_name" : 21,
                             "get_criterion" : 22,
                             "set_criterion" : 23,
                             "get_before_conditions" : 24,
                             "get_dimension" : 25,
                             "get_reference_point" : 26,
                             "set_reference_point" : 27,
                             "copy_user_calc_object_to_clipboard" : 28,
                             "paste_user_calc_object_from_clipboard" : 29,
                             "get_user_calc_object_link_embed_control" : 30, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStoppingCondition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStoppingCondition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStoppingCondition, IStoppingConditionComponent)
    
    _get_trip_metadata = { "name" : "trip",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def trip(self) -> typing.Any:
        """The desired value - the value at which the condition will be satisfied. Dimension depends on context."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_trip_metadata)

    _set_trip_metadata = { "name" : "trip",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @trip.setter
    def trip(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_trip_metadata, newVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance(self) -> float:
        """The desired tolerance for achieving the stopping condition. Dimension depends on context."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance.setter
    def tolerance(self, newVal:float) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_tolerance_metadata, newVal)

    _get_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def repeat_count(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_repeat_count_metadata)

    _set_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @repeat_count.setter
    def repeat_count(self, newVal:float) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_repeat_count_metadata, newVal)

    _get_inherited_metadata = { "name" : "inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_inherited_metadata)

    _set_inherited_metadata = { "name" : "inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @inherited.setter
    def inherited(self, newVal:bool) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_inherited_metadata, newVal)

    _get_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_trip_times(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_max_trip_times_metadata)

    _set_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_trip_times.setter
    def max_trip_times(self, inVal:float) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_max_trip_times_metadata, inVal)

    _get_coord_system_metadata = { "name" : "coord_system",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system(self) -> str:
        """The coordinate system. The default coordinate system of a stopping condition is Earth Inertial."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_coord_system_metadata)

    _set_coord_system_metadata = { "name" : "coord_system",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system.setter
    def coord_system(self, newVal:str) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_coord_system_metadata, newVal)

    _get_sequence_metadata = { "name" : "sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_sequence_metadata)

    _set_sequence_metadata = { "name" : "sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @sequence.setter
    def sequence(self, newVal:str) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_sequence_metadata, newVal)

    _get_constraints_metadata = { "name" : "constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def constraints(self) -> "ConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_constraints_metadata)

    _get_user_calc_object_name_metadata = { "name" : "user_calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_calc_object_name(self) -> str:
        """User Calc Object - a User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_user_calc_object_name_metadata)

    _set_user_calc_object_name_metadata = { "name" : "user_calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_calc_object_name.setter
    def user_calc_object_name(self, newVal:str) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_user_calc_object_name_metadata, newVal)

    _get_user_calc_object_metadata = { "name" : "user_calc_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_calc_object(self) -> "IComponentInfo":
        """A User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_user_calc_object_metadata)

    _set_user_calc_object_metadata = { "name" : "user_calc_object",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"),) }
    @user_calc_object.setter
    def user_calc_object(self, newVal:"IComponentInfo") -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_user_calc_object_metadata, newVal)

    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body. The default central body of a stopping condition is the Earth."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, newVal:str) -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_central_body_name_metadata, newVal)

    _get_criterion_metadata = { "name" : "criterion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CRITERION),) }
    @property
    def criterion(self) -> "CRITERION":
        """Specify the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_criterion_metadata)

    _set_criterion_metadata = { "name" : "criterion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CRITERION),) }
    @criterion.setter
    def criterion(self, newVal:"CRITERION") -> None:
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_criterion_metadata, newVal)

    _get_before_conditions_metadata = { "name" : "before_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def before_conditions(self) -> "StoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_before_conditions_metadata)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """The dimension of the stopping condition."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_dimension_metadata)

    _get_reference_point_metadata = { "name" : "reference_point",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_point(self) -> str:
        """Reference point used for calculation."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_reference_point_metadata)

    _set_reference_point_metadata = { "name" : "reference_point",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_point.setter
    def reference_point(self, inVal:str) -> None:
        """Reference point used for calculation."""
        return self._intf.set_property(IStoppingCondition._metadata, IStoppingCondition._set_reference_point_metadata, inVal)

    _copy_user_calc_object_to_clipboard_metadata = { "name" : "copy_user_calc_object_to_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def copy_user_calc_object_to_clipboard(self) -> None:
        """Copy the user-defined stopping condition calc object to the clipboard."""
        return self._intf.invoke(IStoppingCondition._metadata, IStoppingCondition._copy_user_calc_object_to_clipboard_metadata, )

    _paste_user_calc_object_from_clipboard_metadata = { "name" : "paste_user_calc_object_from_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def paste_user_calc_object_from_clipboard(self) -> None:
        """Replace the user-defined stopping condition calc object with the calc object in the clipboard."""
        return self._intf.invoke(IStoppingCondition._metadata, IStoppingCondition._paste_user_calc_object_from_clipboard_metadata, )

    _get_user_calc_object_link_embed_control_metadata = { "name" : "user_calc_object_link_embed_control",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_calc_object_link_embed_control(self) -> "IComponentLinkEmbedControl":
        """Get the link / embed controller for managing the user calc. object."""
        return self._intf.get_property(IStoppingCondition._metadata, IStoppingCondition._get_user_calc_object_link_embed_control_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7B18D549-E67A-4532-9767-ECC78418475D}", IStoppingCondition)
agcls.AgTypeNameMap["IStoppingCondition"] = IStoppingCondition

class ILightingStoppingCondition(IStoppingConditionComponent):
    """Properties for a lighting stopping condition."""
    _num_methods = 18
    _vtable_offset = IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{05642E87-6580-4E1F-82EF-BA6406DBAC65}",
        "vtable_reference" : IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_max_trip_times" : 1,
                             "set_max_trip_times" : 2,
                             "get_repeat_count" : 3,
                             "set_repeat_count" : 4,
                             "get_constraints" : 5,
                             "get_before_conditions" : 6,
                             "get_inherited" : 7,
                             "set_inherited" : 8,
                             "get_sequence" : 9,
                             "set_sequence" : 10,
                             "get_condition" : 11,
                             "set_condition" : 12,
                             "get_eclipsing_bodies_list_source" : 13,
                             "set_eclipsing_bodies_list_source" : 14,
                             "add_eclipsing_body" : 15,
                             "remove_eclipsing_body" : 16,
                             "get_eclipsing_bodies" : 17,
                             "get_available_eclipsing_bodies" : 18, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ILightingStoppingCondition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ILightingStoppingCondition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ILightingStoppingCondition, IStoppingConditionComponent)
    
    _get_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_trip_times(self) -> float:
        """Rhe maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_max_trip_times_metadata)

    _set_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_trip_times.setter
    def max_trip_times(self, inVal:float) -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_max_trip_times_metadata, inVal)

    _get_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def repeat_count(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_repeat_count_metadata)

    _set_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @repeat_count.setter
    def repeat_count(self, newVal:float) -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_repeat_count_metadata, newVal)

    _get_constraints_metadata = { "name" : "constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def constraints(self) -> "ConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_constraints_metadata)

    _get_before_conditions_metadata = { "name" : "before_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def before_conditions(self) -> "StoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_before_conditions_metadata)

    _get_inherited_metadata = { "name" : "inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_inherited_metadata)

    _set_inherited_metadata = { "name" : "inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @inherited.setter
    def inherited(self, newVal:bool) -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_inherited_metadata, newVal)

    _get_sequence_metadata = { "name" : "sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_sequence_metadata)

    _set_sequence_metadata = { "name" : "sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @sequence.setter
    def sequence(self, newVal:str) -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_sequence_metadata, newVal)

    _get_condition_metadata = { "name" : "condition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LIGHTING_CONDITION),) }
    @property
    def condition(self) -> "LIGHTING_CONDITION":
        """Specify the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_condition_metadata)

    _set_condition_metadata = { "name" : "condition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LIGHTING_CONDITION),) }
    @condition.setter
    def condition(self, newVal:"LIGHTING_CONDITION") -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_condition_metadata, newVal)

    _get_eclipsing_bodies_list_source_metadata = { "name" : "eclipsing_bodies_list_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ECLIPSING_BODIES_SOURCE),) }
    @property
    def eclipsing_bodies_list_source(self) -> "ECLIPSING_BODIES_SOURCE":
        """Eclipsing Bodies List Source."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_eclipsing_bodies_list_source_metadata)

    _set_eclipsing_bodies_list_source_metadata = { "name" : "eclipsing_bodies_list_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ECLIPSING_BODIES_SOURCE),) }
    @eclipsing_bodies_list_source.setter
    def eclipsing_bodies_list_source(self, newVal:"ECLIPSING_BODIES_SOURCE") -> None:
        return self._intf.set_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._set_eclipsing_bodies_list_source_metadata, newVal)

    _add_eclipsing_body_metadata = { "name" : "add_eclipsing_body",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def add_eclipsing_body(self, eclipsingBody:str) -> None:
        """Add an eclipsing body."""
        return self._intf.invoke(ILightingStoppingCondition._metadata, ILightingStoppingCondition._add_eclipsing_body_metadata, eclipsingBody)

    _remove_eclipsing_body_metadata = { "name" : "remove_eclipsing_body",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove_eclipsing_body(self, eclipsingBody:str) -> None:
        """Remove an eclipsing body."""
        return self._intf.invoke(ILightingStoppingCondition._metadata, ILightingStoppingCondition._remove_eclipsing_body_metadata, eclipsingBody)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def eclipsing_bodies(self) -> list:
        """Return a list of user selected eclipsing bodies."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_eclipsing_bodies_metadata)

    _get_available_eclipsing_bodies_metadata = { "name" : "available_eclipsing_bodies",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def available_eclipsing_bodies(self) -> list:
        """Return a list of available eclipsing bodies."""
        return self._intf.get_property(ILightingStoppingCondition._metadata, ILightingStoppingCondition._get_available_eclipsing_bodies_metadata)


agcls.AgClassCatalog.add_catalog_entry("{05642E87-6580-4E1F-82EF-BA6406DBAC65}", ILightingStoppingCondition)
agcls.AgTypeNameMap["ILightingStoppingCondition"] = ILightingStoppingCondition

class IAccessStoppingCondition(IStoppingConditionComponent):
    """Properties for an access stopping condition."""
    _num_methods = 28
    _vtable_offset = IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods
    _metadata = {
        "uuid" : "{2A2D2F12-9F9B-43F6-B6B0-00088C006504}",
        "vtable_reference" : IStoppingConditionComponent._vtable_offset + IStoppingConditionComponent._num_methods - 1,
        "method_offsets" : { "get_time_convergence" : 1,
                             "set_time_convergence" : 2,
                             "get_repeat_count" : 3,
                             "set_repeat_count" : 4,
                             "get_inherited" : 5,
                             "set_inherited" : 6,
                             "get_max_trip_times" : 7,
                             "set_max_trip_times" : 8,
                             "get_sequence" : 9,
                             "set_sequence" : 10,
                             "get_constraints" : 11,
                             "get_criterion" : 12,
                             "set_criterion" : 13,
                             "get_before_conditions" : 14,
                             "get_aberration_type" : 15,
                             "set_aberration_type" : 16,
                             "set_base_selection" : 17,
                             "get_base_selection_type" : 18,
                             "get_base_selection" : 19,
                             "get_clock_host" : 20,
                             "set_clock_host" : 21,
                             "get_signal_sense" : 22,
                             "set_signal_sense" : 23,
                             "get_target_object" : 24,
                             "get_time_delay_convergence_tolerance" : 25,
                             "set_time_delay_convergence_tolerance" : 26,
                             "get_use_light_time_delay" : 27,
                             "set_use_light_time_delay" : 28, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAccessStoppingCondition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingConditionComponent._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAccessStoppingCondition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAccessStoppingCondition, IStoppingConditionComponent)
    
    _get_time_convergence_metadata = { "name" : "time_convergence",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_convergence(self) -> float:
        """Set the time tolerance that is used by the access algorithms to determine the start times and stop times of access intervals. Uses Time dimension."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_time_convergence_metadata)

    _set_time_convergence_metadata = { "name" : "time_convergence",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_convergence.setter
    def time_convergence(self, newVal:float) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_time_convergence_metadata, newVal)

    _get_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def repeat_count(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_repeat_count_metadata)

    _set_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @repeat_count.setter
    def repeat_count(self, newVal:float) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_repeat_count_metadata, newVal)

    _get_inherited_metadata = { "name" : "inherited",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_inherited_metadata)

    _set_inherited_metadata = { "name" : "inherited",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @inherited.setter
    def inherited(self, newVal:bool) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_inherited_metadata, newVal)

    _get_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_trip_times(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_max_trip_times_metadata)

    _set_max_trip_times_metadata = { "name" : "max_trip_times",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_trip_times.setter
    def max_trip_times(self, inVal:float) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_max_trip_times_metadata, inVal)

    _get_sequence_metadata = { "name" : "sequence",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_sequence_metadata)

    _set_sequence_metadata = { "name" : "sequence",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @sequence.setter
    def sequence(self, newVal:str) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_sequence_metadata, newVal)

    _get_constraints_metadata = { "name" : "constraints",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def constraints(self) -> "ConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_constraints_metadata)

    _get_criterion_metadata = { "name" : "criterion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ACCESS_CRITERION),) }
    @property
    def criterion(self) -> "ACCESS_CRITERION":
        """Specify the direction from which the stopping condition value must be achieved."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_criterion_metadata)

    _set_criterion_metadata = { "name" : "criterion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ACCESS_CRITERION),) }
    @criterion.setter
    def criterion(self, newVal:"ACCESS_CRITERION") -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_criterion_metadata, newVal)

    _get_before_conditions_metadata = { "name" : "before_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def before_conditions(self) -> "StoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_before_conditions_metadata)

    _get_aberration_type_metadata = { "name" : "aberration_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ABERRATION_TYPE),) }
    @property
    def aberration_type(self) -> "ABERRATION_TYPE":
        """Set the model of aberration to be used in access computations."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_aberration_type_metadata)

    _set_aberration_type_metadata = { "name" : "aberration_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ABERRATION_TYPE),) }
    @aberration_type.setter
    def aberration_type(self, inVal:"ABERRATION_TYPE") -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_aberration_type_metadata, inVal)

    _set_base_selection_metadata = { "name" : "set_base_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(BASE_SELECTION),) }
    def set_base_selection(self, selection:"BASE_SELECTION") -> None:
        """BaseSelection"""
        return self._intf.invoke(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_base_selection_metadata, selection)

    _get_base_selection_type_metadata = { "name" : "base_selection_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(BASE_SELECTION),) }
    @property
    def base_selection_type(self) -> "BASE_SELECTION":
        """The base object for the access calculation."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_base_selection_type_metadata)

    _get_base_selection_metadata = { "name" : "base_selection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def base_selection(self) -> "ILinkToObject":
        """Return the base selection object."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_base_selection_metadata)

    _get_clock_host_metadata = { "name" : "clock_host",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IV_CLOCK_HOST),) }
    @property
    def clock_host(self) -> "IV_CLOCK_HOST":
        """Time values are reported with a clock colocated with the clock host object."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_clock_host_metadata)

    _set_clock_host_metadata = { "name" : "clock_host",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IV_CLOCK_HOST),) }
    @clock_host.setter
    def clock_host(self, inVal:"IV_CLOCK_HOST") -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_clock_host_metadata, inVal)

    _get_signal_sense_metadata = { "name" : "signal_sense",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IV_TIME_SENSE),) }
    @property
    def signal_sense(self) -> "IV_TIME_SENSE":
        """Set the direction of the signal."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_signal_sense_metadata)

    _set_signal_sense_metadata = { "name" : "signal_sense",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IV_TIME_SENSE),) }
    @signal_sense.setter
    def signal_sense(self, inVal:"IV_TIME_SENSE") -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_signal_sense_metadata, inVal)

    _get_target_object_metadata = { "name" : "target_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def target_object(self) -> "ILinkToObject":
        """The target object for the access calculation."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_target_object_metadata)

    _get_time_delay_convergence_tolerance_metadata = { "name" : "time_delay_convergence_tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_delay_convergence_tolerance(self) -> float:
        """The tolerance used when iterating to determine the light time delay. The iteration stops when the improvement in the value is less than this tolerance. Uses Time Dimension."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_time_delay_convergence_tolerance_metadata)

    _set_time_delay_convergence_tolerance_metadata = { "name" : "time_delay_convergence_tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_delay_convergence_tolerance.setter
    def time_delay_convergence_tolerance(self, inVal:float) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_time_delay_convergence_tolerance_metadata, inVal)

    _get_use_light_time_delay_metadata = { "name" : "use_light_time_delay",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_light_time_delay(self) -> bool:
        """Whether to consider light time delay in access computations."""
        return self._intf.get_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._get_use_light_time_delay_metadata)

    _set_use_light_time_delay_metadata = { "name" : "use_light_time_delay",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_light_time_delay.setter
    def use_light_time_delay(self, inVal:bool) -> None:
        return self._intf.set_property(IAccessStoppingCondition._metadata, IAccessStoppingCondition._set_use_light_time_delay_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2A2D2F12-9F9B-43F6-B6B0-00088C006504}", IAccessStoppingCondition)
agcls.AgTypeNameMap["IAccessStoppingCondition"] = IAccessStoppingCondition

class IMissionControlSequencePropagate(object):
    """Properties for a Propagate segment."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{41E66E06-FD6A-4523-8956-B0DF0BE5479E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_propagator_name" : 1,
                             "set_propagator_name" : 2,
                             "get_stopping_conditions" : 3,
                             "get_min_propagation_time" : 4,
                             "set_min_propagation_time" : 5,
                             "get_max_propagation_time" : 6,
                             "set_max_propagation_time" : 7,
                             "get_enable_max_propagation_time" : 8,
                             "set_enable_max_propagation_time" : 9,
                             "get_enable_warning_message" : 10,
                             "set_enable_warning_message" : 11,
                             "enable_control_parameter" : 12,
                             "disable_control_parameter" : 13,
                             "is_control_parameter_enabled" : 14,
                             "get_control_parameters_available" : 15,
                             "get_override_max_propagation_time" : 16,
                             "set_override_max_propagation_time" : 17,
                             "get_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 18,
                             "set_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 19,
                             "get_should_reinitialize_stm_at_start_of_segment_propagation" : 20,
                             "set_should_reinitialize_stm_at_start_of_segment_propagation" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequencePropagate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequencePropagate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequencePropagate, None)
    
    _get_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def propagator_name(self) -> str:
        """The propagator."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_propagator_name_metadata)

    _set_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @propagator_name.setter
    def propagator_name(self, newVal:str) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_propagator_name_metadata, newVal)

    _get_stopping_conditions_metadata = { "name" : "stopping_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def stopping_conditions(self) -> "StoppingConditionCollection":
        """The list of stopping conditions defined for the segment."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_stopping_conditions_metadata)

    _get_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_propagation_time(self) -> float:
        """The minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_min_propagation_time_metadata)

    _set_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_propagation_time.setter
    def min_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_min_propagation_time_metadata, newVal)

    _get_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_propagation_time(self) -> float:
        """The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_max_propagation_time_metadata)

    _set_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_propagation_time.setter
    def max_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_max_propagation_time_metadata, newVal)

    _get_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_max_propagation_time(self) -> bool:
        """If true, the maximum propagation time is enforced."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_enable_max_propagation_time_metadata)

    _set_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_max_propagation_time.setter
    def enable_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_enable_max_propagation_time_metadata, newVal)

    _get_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_warning_message(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_enable_warning_message_metadata)

    _set_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_warning_message.setter
    def enable_warning_message(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_enable_warning_message_metadata, newVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED),) }
    def enable_control_parameter(self, param:"CONTROL_ADVANCED") -> None:
        """Enable or disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED),) }
    def disable_control_parameter(self, param:"CONTROL_ADVANCED") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ADVANCED") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_control_parameters_available_metadata)

    _get_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def override_max_propagation_time(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_override_max_propagation_time_metadata)

    _set_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @override_max_propagation_time.setter
    def override_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_override_max_propagation_time_metadata, newVal)

    _get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata)

    _set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_stop_for_initially_surpassed_epoch_stopping_conditions.setter
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata, newVal)

    _get_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_reinitialize_stm_at_start_of_segment_propagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._get_should_reinitialize_stm_at_start_of_segment_propagation_metadata)

    _set_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_reinitialize_stm_at_start_of_segment_propagation.setter
    def should_reinitialize_stm_at_start_of_segment_propagation(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequencePropagate._metadata, IMissionControlSequencePropagate._set_should_reinitialize_stm_at_start_of_segment_propagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{41E66E06-FD6A-4523-8956-B0DF0BE5479E}", IMissionControlSequencePropagate)
agcls.AgTypeNameMap["IMissionControlSequencePropagate"] = IMissionControlSequencePropagate

class IMissionControlSequenceSequence(object):
    """Properties for a Sequence segment."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0FE48F27-40D3-4D78-9B87-6539D1977696}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_repeat_count" : 1,
                             "set_repeat_count" : 2,
                             "get_generate_ephemeris" : 3,
                             "set_generate_ephemeris" : 4,
                             "get_segments" : 5,
                             "get_sequence_state_to_pass" : 6,
                             "set_sequence_state_to_pass" : 7,
                             "get_scripting_tool" : 8,
                             "apply_script" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceSequence)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceSequence)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceSequence, None)
    
    _get_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def repeat_count(self) -> int:
        """The number of times that the sequence will be executed. A sequence that is repeated is executed immediately subsequent to the previous execution of the sequence. Dimensionless."""
        return self._intf.get_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._get_repeat_count_metadata)

    _set_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @repeat_count.setter
    def repeat_count(self, newVal:int) -> None:
        return self._intf.set_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._set_repeat_count_metadata, newVal)

    _get_generate_ephemeris_metadata = { "name" : "generate_ephemeris",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def generate_ephemeris(self) -> bool:
        """If true, the sequence generates ephemeris and displays it in the 2D and 3D Graphics windows."""
        return self._intf.get_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._get_generate_ephemeris_metadata)

    _set_generate_ephemeris_metadata = { "name" : "generate_ephemeris",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @generate_ephemeris.setter
    def generate_ephemeris(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._set_generate_ephemeris_metadata, newVal)

    _get_segments_metadata = { "name" : "segments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def segments(self) -> "MissionControlSequenceSegmentCollection":
        """The list of segments defined for the sequence."""
        return self._intf.get_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._get_segments_metadata)

    _get_sequence_state_to_pass_metadata = { "name" : "sequence_state_to_pass",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEQUENCE_STATE_TO_PASS),) }
    @property
    def sequence_state_to_pass(self) -> "SEQUENCE_STATE_TO_PASS":
        """State To Pass To Next Segment - the state of the sequence to pass."""
        return self._intf.get_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._get_sequence_state_to_pass_metadata)

    _set_sequence_state_to_pass_metadata = { "name" : "sequence_state_to_pass",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEQUENCE_STATE_TO_PASS),) }
    @sequence_state_to_pass.setter
    def sequence_state_to_pass(self, inVal:"SEQUENCE_STATE_TO_PASS") -> None:
        return self._intf.set_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._set_sequence_state_to_pass_metadata, inVal)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._get_scripting_tool_metadata)

    _apply_script_metadata = { "name" : "apply_script",
            "arg_types" : (),
            "marshallers" : () }
    def apply_script(self) -> None:
        """Apply the script."""
        return self._intf.invoke(IMissionControlSequenceSequence._metadata, IMissionControlSequenceSequence._apply_script_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{0FE48F27-40D3-4D78-9B87-6539D1977696}", IMissionControlSequenceSequence)
agcls.AgTypeNameMap["IMissionControlSequenceSequence"] = IMissionControlSequenceSequence

class IMissionControlSequenceBackwardSequence(IMissionControlSequenceSequence):
    """Properties for a Backward Sequence segment."""
    _num_methods = 0
    _vtable_offset = IMissionControlSequenceSequence._vtable_offset + IMissionControlSequenceSequence._num_methods
    _metadata = {
        "uuid" : "{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}",
        "vtable_reference" : IMissionControlSequenceSequence._vtable_offset + IMissionControlSequenceSequence._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceBackwardSequence)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSequence._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceBackwardSequence)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceBackwardSequence, IMissionControlSequenceSequence)
    

agcls.AgClassCatalog.add_catalog_entry("{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}", IMissionControlSequenceBackwardSequence)
agcls.AgTypeNameMap["IMissionControlSequenceBackwardSequence"] = IMissionControlSequenceBackwardSequence

class IMissionControlSequenceLaunch(object):
    """Properties for a Launch segment."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C342C18C-80EF-4E1F-8363-90181B755E66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_step_size" : 3,
                             "set_step_size" : 4,
                             "get_pre_launch_time" : 5,
                             "set_pre_launch_time" : 6,
                             "get_epoch" : 7,
                             "set_epoch" : 8,
                             "enable_control_parameter" : 9,
                             "disable_control_parameter" : 10,
                             "is_control_parameter_enabled" : 11,
                             "get_control_parameters_available" : 12,
                             "get_initial_acceleration" : 13,
                             "set_initial_acceleration" : 14,
                             "get_spacecraft_parameters" : 15,
                             "get_fuel_tank" : 16,
                             "get_display_system_type" : 17,
                             "set_display_system_type" : 18,
                             "get_display_system" : 19,
                             "get_ascent_type" : 20,
                             "set_ascent_type" : 21,
                             "get_time_of_flight" : 22,
                             "set_time_of_flight" : 23,
                             "get_burnout_type" : 24,
                             "set_burnout_type" : 25,
                             "get_burnout" : 26,
                             "get_burnout_velocity" : 27,
                             "get_use_previous_segment_state" : 28,
                             "set_use_previous_segment_state" : 29,
                             "get_set_met_epoch" : 30,
                             "set_set_met_epoch" : 31,
                             "get_user_variables" : 32, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceLaunch)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceLaunch)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceLaunch, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, newVal:str) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_central_body_name_metadata, newVal)

    _get_step_size_metadata = { "name" : "step_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def step_size(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_step_size_metadata)

    _set_step_size_metadata = { "name" : "step_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @step_size.setter
    def step_size(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_step_size_metadata, newVal)

    _get_pre_launch_time_metadata = { "name" : "pre_launch_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def pre_launch_time(self) -> float:
        """The amount of time before the spacecraft's launch that it will be created in the scenario. The vehicle will remain at the launch position until beginning of the launch epoch. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_pre_launch_time_metadata)

    _set_pre_launch_time_metadata = { "name" : "pre_launch_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @pre_launch_time.setter
    def pre_launch_time(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_pre_launch_time_metadata, newVal)

    _get_epoch_metadata = { "name" : "epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def epoch(self) -> typing.Any:
        """The date and time of the launch. Uses DateFormat Dimension."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_epoch_metadata)

    _set_epoch_metadata = { "name" : "epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @epoch.setter
    def epoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_epoch_metadata, newVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_LAUNCH),) }
    def enable_control_parameter(self, param:"CONTROL_LAUNCH") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_LAUNCH),) }
    def disable_control_parameter(self, param:"CONTROL_LAUNCH") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_LAUNCH), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_LAUNCH") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_control_parameters_available_metadata)

    _get_initial_acceleration_metadata = { "name" : "initial_acceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_acceleration(self) -> float:
        """The initial acceleration, for the Quartic Motion Ascent Type. Uses Acceleration Dimension."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_initial_acceleration_metadata)

    _set_initial_acceleration_metadata = { "name" : "initial_acceleration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_acceleration.setter
    def initial_acceleration(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_initial_acceleration_metadata, newVal)

    _get_spacecraft_parameters_metadata = { "name" : "spacecraft_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def spacecraft_parameters(self) -> "SpacecraftParameters":
        """Satellite Properties - the spacecraft's physical properties."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_spacecraft_parameters_metadata)

    _get_fuel_tank_metadata = { "name" : "fuel_tank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def fuel_tank(self) -> "FuelTank":
        """The spacecraft's fuel tank properties."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_fuel_tank_metadata)

    _get_display_system_type_metadata = { "name" : "display_system_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAUNCH_DISPLAY_SYSTEM),) }
    @property
    def display_system_type(self) -> "LAUNCH_DISPLAY_SYSTEM":
        """The launch coordinate type."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_display_system_type_metadata)

    _set_display_system_type_metadata = { "name" : "set_display_system_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAUNCH_DISPLAY_SYSTEM),) }
    def set_display_system_type(self, displaySystemType:"LAUNCH_DISPLAY_SYSTEM") -> None:
        """Set the display system type."""
        return self._intf.invoke(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_display_system_type_metadata, displaySystemType)

    _get_display_system_metadata = { "name" : "display_system",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def display_system(self) -> "IDisplaySystem":
        """Get the current Display System."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_display_system_metadata)

    _get_ascent_type_metadata = { "name" : "ascent_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ASCENT_TYPE),) }
    @property
    def ascent_type(self) -> "ASCENT_TYPE":
        """The order of the spline used to generate the motion along the ellipse."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_ascent_type_metadata)

    _set_ascent_type_metadata = { "name" : "ascent_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ASCENT_TYPE),) }
    @ascent_type.setter
    def ascent_type(self, newVal:"ASCENT_TYPE") -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_ascent_type_metadata, newVal)

    _get_time_of_flight_metadata = { "name" : "time_of_flight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_of_flight(self) -> float:
        """The time of flight (the time from launch to burnout). Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_time_of_flight_metadata)

    _set_time_of_flight_metadata = { "name" : "time_of_flight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_of_flight.setter
    def time_of_flight(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_time_of_flight_metadata, newVal)

    _get_burnout_type_metadata = { "name" : "burnout_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(BURNOUT_TYPE),) }
    @property
    def burnout_type(self) -> "BURNOUT_TYPE":
        """The burnout type."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_burnout_type_metadata)

    _set_burnout_type_metadata = { "name" : "set_burnout_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(BURNOUT_TYPE),) }
    def set_burnout_type(self, burnoutType:"BURNOUT_TYPE") -> None:
        """Set the burnout type."""
        return self._intf.invoke(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_burnout_type_metadata, burnoutType)

    _get_burnout_metadata = { "name" : "burnout",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def burnout(self) -> "IBurnout":
        """The burnout point definition."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_burnout_metadata)

    _get_burnout_velocity_metadata = { "name" : "burnout_velocity",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def burnout_velocity(self) -> "BurnoutVelocity":
        """The burnout velocity definition."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_burnout_velocity_metadata)

    _get_use_previous_segment_state_metadata = { "name" : "use_previous_segment_state",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_previous_segment_state(self) -> bool:
        """If true, the previous segment state is used to define the launch location parameters."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_use_previous_segment_state_metadata)

    _set_use_previous_segment_state_metadata = { "name" : "use_previous_segment_state",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_previous_segment_state.setter
    def use_previous_segment_state(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_use_previous_segment_state_metadata, newVal)

    _get_set_met_epoch_metadata = { "name" : "set_met_epoch",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def set_met_epoch(self) -> bool:
        """If true, the Mission Elapsed Time epoch will be set to the launch epoch."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_set_met_epoch_metadata)

    _set_set_met_epoch_metadata = { "name" : "set_met_epoch",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @set_met_epoch.setter
    def set_met_epoch(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._set_set_met_epoch_metadata, newVal)

    _get_user_variables_metadata = { "name" : "user_variables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_variables(self) -> "UserVariableCollection":
        """Interface used to modify user variables for the launch segment."""
        return self._intf.get_property(IMissionControlSequenceLaunch._metadata, IMissionControlSequenceLaunch._get_user_variables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C342C18C-80EF-4E1F-8363-90181B755E66}", IMissionControlSequenceLaunch)
agcls.AgTypeNameMap["IMissionControlSequenceLaunch"] = IMissionControlSequenceLaunch

class IDisplaySystemGeodetic(IDisplaySystem):
    """Properties for a geodetic launch coordinate system."""
    _num_methods = 6
    _vtable_offset = IDisplaySystem._vtable_offset + IDisplaySystem._num_methods
    _metadata = {
        "uuid" : "{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}",
        "vtable_reference" : IDisplaySystem._vtable_offset + IDisplaySystem._num_methods - 1,
        "method_offsets" : { "get_latitude" : 1,
                             "set_latitude" : 2,
                             "get_longitude" : 3,
                             "set_longitude" : 4,
                             "get_altitude" : 5,
                             "set_altitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDisplaySystemGeodetic)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDisplaySystemGeodetic)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDisplaySystemGeodetic, IDisplaySystem)
    
    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._set_latitude_metadata, newVal)

    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._set_longitude_metadata, newVal)

    _get_altitude_metadata = { "name" : "altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude(self) -> float:
        """The altitude of the launch location. Uses Distance Dimension."""
        return self._intf.get_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._get_altitude_metadata)

    _set_altitude_metadata = { "name" : "altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude.setter
    def altitude(self, newVal:float) -> None:
        return self._intf.set_property(IDisplaySystemGeodetic._metadata, IDisplaySystemGeodetic._set_altitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}", IDisplaySystemGeodetic)
agcls.AgTypeNameMap["IDisplaySystemGeodetic"] = IDisplaySystemGeodetic

class IDisplaySystemGeocentric(IDisplaySystem):
    """Properties for a geocentric launch coordinate system."""
    _num_methods = 6
    _vtable_offset = IDisplaySystem._vtable_offset + IDisplaySystem._num_methods
    _metadata = {
        "uuid" : "{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}",
        "vtable_reference" : IDisplaySystem._vtable_offset + IDisplaySystem._num_methods - 1,
        "method_offsets" : { "get_latitude" : 1,
                             "set_latitude" : 2,
                             "get_longitude" : 3,
                             "set_longitude" : 4,
                             "get_radius" : 5,
                             "set_radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDisplaySystemGeocentric)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDisplaySystemGeocentric)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDisplaySystemGeocentric, IDisplaySystem)
    
    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._set_latitude_metadata, newVal)

    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        return self._intf.get_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._set_longitude_metadata, newVal)

    _get_radius_metadata = { "name" : "radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius(self) -> float:
        """The radius of the launch location. Uses Distance Dimension."""
        return self._intf.get_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._get_radius_metadata)

    _set_radius_metadata = { "name" : "radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius.setter
    def radius(self, newVal:float) -> None:
        return self._intf.set_property(IDisplaySystemGeocentric._metadata, IDisplaySystemGeocentric._set_radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}", IDisplaySystemGeocentric)
agcls.AgTypeNameMap["IDisplaySystemGeocentric"] = IDisplaySystemGeocentric

class IBurnoutCBFCartesian(IBurnout):
    """Properties for a Cartesian CBF burnout state definition."""
    _num_methods = 12
    _vtable_offset = IBurnout._vtable_offset + IBurnout._num_methods
    _metadata = {
        "uuid" : "{A45DD94F-A384-4CCB-B803-F29F2DA41A39}",
        "vtable_reference" : IBurnout._vtable_offset + IBurnout._num_methods - 1,
        "method_offsets" : { "get_cartesian_burnout_x" : 1,
                             "set_cartesian_burnout_x" : 2,
                             "get_cartesian_burnout_y" : 3,
                             "set_cartesian_burnout_y" : 4,
                             "get_cartesian_burnout_z" : 5,
                             "set_cartesian_burnout_z" : 6,
                             "get_cartesian_burnout_vx" : 7,
                             "set_cartesian_burnout_vx" : 8,
                             "get_cartesian_burnout_vy" : 9,
                             "set_cartesian_burnout_vy" : 10,
                             "get_cartesian_burnout_vz" : 11,
                             "set_cartesian_burnout_vz" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutCBFCartesian)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutCBFCartesian)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutCBFCartesian, IBurnout)
    
    _get_cartesian_burnout_x_metadata = { "name" : "cartesian_burnout_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_x(self) -> float:
        """The CBF x component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_x_metadata)

    _set_cartesian_burnout_x_metadata = { "name" : "cartesian_burnout_x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_x.setter
    def cartesian_burnout_x(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_x_metadata, newVal)

    _get_cartesian_burnout_y_metadata = { "name" : "cartesian_burnout_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_y(self) -> float:
        """The CBF y component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_y_metadata)

    _set_cartesian_burnout_y_metadata = { "name" : "cartesian_burnout_y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_y.setter
    def cartesian_burnout_y(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_y_metadata, newVal)

    _get_cartesian_burnout_z_metadata = { "name" : "cartesian_burnout_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_z(self) -> float:
        """The CBF z component of the spacecraft burnout location. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_z_metadata)

    _set_cartesian_burnout_z_metadata = { "name" : "cartesian_burnout_z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_z.setter
    def cartesian_burnout_z(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_z_metadata, newVal)

    _get_cartesian_burnout_vx_metadata = { "name" : "cartesian_burnout_vx",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_vx(self) -> float:
        """The CBF x component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_vx_metadata)

    _set_cartesian_burnout_vx_metadata = { "name" : "cartesian_burnout_vx",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_vx.setter
    def cartesian_burnout_vx(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_vx_metadata, newVal)

    _get_cartesian_burnout_vy_metadata = { "name" : "cartesian_burnout_vy",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_vy(self) -> float:
        """The CBF y component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_vy_metadata)

    _set_cartesian_burnout_vy_metadata = { "name" : "cartesian_burnout_vy",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_vy.setter
    def cartesian_burnout_vy(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_vy_metadata, newVal)

    _get_cartesian_burnout_vz_metadata = { "name" : "cartesian_burnout_vz",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cartesian_burnout_vz(self) -> float:
        """The CBF z component of the spacecraft burnout velocity. Uses Rate Dimension."""
        return self._intf.get_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._get_cartesian_burnout_vz_metadata)

    _set_cartesian_burnout_vz_metadata = { "name" : "cartesian_burnout_vz",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cartesian_burnout_vz.setter
    def cartesian_burnout_vz(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutCBFCartesian._metadata, IBurnoutCBFCartesian._set_cartesian_burnout_vz_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{A45DD94F-A384-4CCB-B803-F29F2DA41A39}", IBurnoutCBFCartesian)
agcls.AgTypeNameMap["IBurnoutCBFCartesian"] = IBurnoutCBFCartesian

class IBurnoutGeodetic(IBurnout):
    """Properties for a geodetic burnout point definition."""
    _num_methods = 6
    _vtable_offset = IBurnout._vtable_offset + IBurnout._num_methods
    _metadata = {
        "uuid" : "{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}",
        "vtable_reference" : IBurnout._vtable_offset + IBurnout._num_methods - 1,
        "method_offsets" : { "get_latitude" : 1,
                             "set_latitude" : 2,
                             "get_longitude" : 3,
                             "set_longitude" : 4,
                             "get_altitude" : 5,
                             "set_altitude" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutGeodetic)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutGeodetic)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutGeodetic, IBurnout)
    
    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._set_latitude_metadata, newVal)

    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._set_longitude_metadata, newVal)

    _get_altitude_metadata = { "name" : "altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude(self) -> float:
        """The altitude of the spacecraft burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._get_altitude_metadata)

    _set_altitude_metadata = { "name" : "altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude.setter
    def altitude(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutGeodetic._metadata, IBurnoutGeodetic._set_altitude_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}", IBurnoutGeodetic)
agcls.AgTypeNameMap["IBurnoutGeodetic"] = IBurnoutGeodetic

class IBurnoutGeocentric(IBurnout):
    """{Properties for a geocentric burnout point definition."""
    _num_methods = 6
    _vtable_offset = IBurnout._vtable_offset + IBurnout._num_methods
    _metadata = {
        "uuid" : "{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}",
        "vtable_reference" : IBurnout._vtable_offset + IBurnout._num_methods - 1,
        "method_offsets" : { "get_latitude" : 1,
                             "set_latitude" : 2,
                             "get_longitude" : 3,
                             "set_longitude" : 4,
                             "get_radius" : 5,
                             "set_radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutGeocentric)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutGeocentric)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutGeocentric, IBurnout)
    
    _get_latitude_metadata = { "name" : "latitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._get_latitude_metadata)

    _set_latitude_metadata = { "name" : "latitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @latitude.setter
    def latitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._set_latitude_metadata, newVal)

    _get_longitude_metadata = { "name" : "longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._get_longitude_metadata)

    _set_longitude_metadata = { "name" : "longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @longitude.setter
    def longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._set_longitude_metadata, newVal)

    _get_radius_metadata = { "name" : "radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius(self) -> float:
        """The radius of the spacecraft burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._get_radius_metadata)

    _set_radius_metadata = { "name" : "radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius.setter
    def radius(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutGeocentric._metadata, IBurnoutGeocentric._set_radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}", IBurnoutGeocentric)
agcls.AgTypeNameMap["IBurnoutGeocentric"] = IBurnoutGeocentric

class IBurnoutLaunchAzAltitude(IBurnout):
    """Properties for a launch azimuth / altitude burnout point definition."""
    _num_methods = 6
    _vtable_offset = IBurnout._vtable_offset + IBurnout._num_methods
    _metadata = {
        "uuid" : "{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}",
        "vtable_reference" : IBurnout._vtable_offset + IBurnout._num_methods - 1,
        "method_offsets" : { "get_azimuth" : 1,
                             "set_azimuth" : 2,
                             "get_down_range_dist" : 3,
                             "set_down_range_dist" : 4,
                             "get_altitude_radius" : 5,
                             "set_altitude_radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutLaunchAzAltitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutLaunchAzAltitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutLaunchAzAltitude, IBurnout)
    
    _get_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._get_azimuth_metadata)

    _set_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @azimuth.setter
    def azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._set_azimuth_metadata, newVal)

    _get_down_range_dist_metadata = { "name" : "down_range_dist",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def down_range_dist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._get_down_range_dist_metadata)

    _set_down_range_dist_metadata = { "name" : "down_range_dist",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @down_range_dist.setter
    def down_range_dist(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._set_down_range_dist_metadata, newVal)

    _get_altitude_radius_metadata = { "name" : "altitude_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def altitude_radius(self) -> float:
        """The altitude of the spacecraft at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._get_altitude_radius_metadata)

    _set_altitude_radius_metadata = { "name" : "altitude_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @altitude_radius.setter
    def altitude_radius(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutLaunchAzAltitude._metadata, IBurnoutLaunchAzAltitude._set_altitude_radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}", IBurnoutLaunchAzAltitude)
agcls.AgTypeNameMap["IBurnoutLaunchAzAltitude"] = IBurnoutLaunchAzAltitude

class IBurnoutLaunchAzRadius(IBurnout):
    """Properties for a launch azimuth / radius burnout point definition."""
    _num_methods = 6
    _vtable_offset = IBurnout._vtable_offset + IBurnout._num_methods
    _metadata = {
        "uuid" : "{623DDE08-539E-4BAD-A63D-FCC195094F14}",
        "vtable_reference" : IBurnout._vtable_offset + IBurnout._num_methods - 1,
        "method_offsets" : { "get_azimuth" : 1,
                             "set_azimuth" : 2,
                             "get_down_range_dist" : 3,
                             "set_down_range_dist" : 4,
                             "get_radius" : 5,
                             "set_radius" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBurnoutLaunchAzRadius)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBurnoutLaunchAzRadius)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBurnoutLaunchAzRadius, IBurnout)
    
    _get_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._get_azimuth_metadata)

    _set_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @azimuth.setter
    def azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._set_azimuth_metadata, newVal)

    _get_down_range_dist_metadata = { "name" : "down_range_dist",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def down_range_dist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._get_down_range_dist_metadata)

    _set_down_range_dist_metadata = { "name" : "down_range_dist",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @down_range_dist.setter
    def down_range_dist(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._set_down_range_dist_metadata, newVal)

    _get_radius_metadata = { "name" : "radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius(self) -> float:
        """The radius of the spacecraft at burnout. Uses Distance Dimension."""
        return self._intf.get_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._get_radius_metadata)

    _set_radius_metadata = { "name" : "radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius.setter
    def radius(self, newVal:float) -> None:
        return self._intf.set_property(IBurnoutLaunchAzRadius._metadata, IBurnoutLaunchAzRadius._set_radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{623DDE08-539E-4BAD-A63D-FCC195094F14}", IBurnoutLaunchAzRadius)
agcls.AgTypeNameMap["IBurnoutLaunchAzRadius"] = IBurnoutLaunchAzRadius

class IMissionControlSequenceFollow(object):
    """Properties for a Follow segment."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_leader" : 1,
                             "get_x_offset" : 2,
                             "set_x_offset" : 3,
                             "get_y_offset" : 4,
                             "set_y_offset" : 5,
                             "get_z_offset" : 6,
                             "set_z_offset" : 7,
                             "get_separation_conditions" : 8,
                             "get_spacecraft_parameters" : 9,
                             "get_fuel_tank" : 10,
                             "get_joining_type" : 11,
                             "set_joining_type" : 12,
                             "get_separation_type" : 13,
                             "set_separation_type" : 14,
                             "get_spacecraft_and_fuel_tank_type" : 15,
                             "set_spacecraft_and_fuel_tank_type" : 16,
                             "get_joining_conditions" : 17,
                             "enable_control_parameter" : 18,
                             "disable_control_parameter" : 19,
                             "is_control_parameter_enabled" : 20,
                             "get_control_parameters_available" : 21,
                             "get_user_variables" : 22, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceFollow)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceFollow)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceFollow, None)
    
    _get_leader_metadata = { "name" : "leader",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def leader(self) -> "ILinkToObject":
        """The leader object."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_leader_metadata)

    _get_x_offset_metadata = { "name" : "x_offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def x_offset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the X axis. Uses Distance Dimension."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_x_offset_metadata)

    _set_x_offset_metadata = { "name" : "x_offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @x_offset.setter
    def x_offset(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_x_offset_metadata, newVal)

    _get_y_offset_metadata = { "name" : "y_offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y_offset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Y axis. Uses Distance Dimension."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_y_offset_metadata)

    _set_y_offset_metadata = { "name" : "y_offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y_offset.setter
    def y_offset(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_y_offset_metadata, newVal)

    _get_z_offset_metadata = { "name" : "z_offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def z_offset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Z axis. Uses Distance Dimension."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_z_offset_metadata)

    _set_z_offset_metadata = { "name" : "z_offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @z_offset.setter
    def z_offset(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_z_offset_metadata, newVal)

    _get_separation_conditions_metadata = { "name" : "separation_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def separation_conditions(self) -> "StoppingConditionCollection":
        """If separation conditions are specified, the list of separation conditions."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_separation_conditions_metadata)

    _get_spacecraft_parameters_metadata = { "name" : "spacecraft_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def spacecraft_parameters(self) -> "SpacecraftParameters":
        """The spacecraft's physical properties."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_spacecraft_parameters_metadata)

    _get_fuel_tank_metadata = { "name" : "fuel_tank",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def fuel_tank(self) -> "FuelTank":
        """The spacecraft's fuel tank properties."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_fuel_tank_metadata)

    _get_joining_type_metadata = { "name" : "joining_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_JOIN),) }
    @property
    def joining_type(self) -> "FOLLOW_JOIN":
        """The joining type."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_joining_type_metadata)

    _set_joining_type_metadata = { "name" : "joining_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_JOIN),) }
    @joining_type.setter
    def joining_type(self, newVal:"FOLLOW_JOIN") -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_joining_type_metadata, newVal)

    _get_separation_type_metadata = { "name" : "separation_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_SEPARATION),) }
    @property
    def separation_type(self) -> "FOLLOW_SEPARATION":
        """The separation type."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_separation_type_metadata)

    _set_separation_type_metadata = { "name" : "separation_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_SEPARATION),) }
    @separation_type.setter
    def separation_type(self, newVal:"FOLLOW_SEPARATION") -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_separation_type_metadata, newVal)

    _get_spacecraft_and_fuel_tank_type_metadata = { "name" : "spacecraft_and_fuel_tank_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_SPACECRAFT_AND_FUEL_TANK),) }
    @property
    def spacecraft_and_fuel_tank_type(self) -> "FOLLOW_SPACECRAFT_AND_FUEL_TANK":
        """The spacecraft snd fuel tank configuration type."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_spacecraft_and_fuel_tank_type_metadata)

    _set_spacecraft_and_fuel_tank_type_metadata = { "name" : "spacecraft_and_fuel_tank_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(FOLLOW_SPACECRAFT_AND_FUEL_TANK),) }
    @spacecraft_and_fuel_tank_type.setter
    def spacecraft_and_fuel_tank_type(self, newVal:"FOLLOW_SPACECRAFT_AND_FUEL_TANK") -> None:
        return self._intf.set_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._set_spacecraft_and_fuel_tank_type_metadata, newVal)

    _get_joining_conditions_metadata = { "name" : "joining_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def joining_conditions(self) -> "StoppingConditionCollection":
        """If joining conditions are specified, the list of joining conditions."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_joining_conditions_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_FOLLOW),) }
    def enable_control_parameter(self, param:"CONTROL_FOLLOW") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_FOLLOW),) }
    def disable_control_parameter(self, param:"CONTROL_FOLLOW") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_FOLLOW), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_FOLLOW") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_control_parameters_available_metadata)

    _get_user_variables_metadata = { "name" : "user_variables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_variables(self) -> "UserVariableCollection":
        """Interface used to modify user variables for the follow segment."""
        return self._intf.get_property(IMissionControlSequenceFollow._metadata, IMissionControlSequenceFollow._get_user_variables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}", IMissionControlSequenceFollow)
agcls.AgTypeNameMap["IMissionControlSequenceFollow"] = IMissionControlSequenceFollow

class IMissionControlSequenceManeuver(object):
    """General properties for a Maneuver segment."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_maneuver_type" : 1,
                             "set_maneuver_type" : 2,
                             "get_maneuver" : 3,
                             "enable_control_parameter" : 4,
                             "disable_control_parameter" : 5,
                             "is_control_parameter_enabled" : 6,
                             "get_control_parameters_available" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceManeuver)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceManeuver)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceManeuver, None)
    
    _get_maneuver_type_metadata = { "name" : "maneuver_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MANEUVER_TYPE),) }
    @property
    def maneuver_type(self) -> "MANEUVER_TYPE":
        """The maneuver type."""
        return self._intf.get_property(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._get_maneuver_type_metadata)

    _set_maneuver_type_metadata = { "name" : "set_maneuver_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MANEUVER_TYPE),) }
    def set_maneuver_type(self, maneuverType:"MANEUVER_TYPE") -> None:
        """Set the maneuver type"""
        return self._intf.invoke(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._set_maneuver_type_metadata, maneuverType)

    _get_maneuver_metadata = { "name" : "maneuver",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def maneuver(self) -> "IManeuver":
        """The Maneuver properties."""
        return self._intf.get_property(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._get_maneuver_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_MANEUVER),) }
    def enable_control_parameter(self, param:"CONTROL_MANEUVER") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_MANEUVER),) }
    def disable_control_parameter(self, param:"CONTROL_MANEUVER") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_MANEUVER), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_MANEUVER") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceManeuver._metadata, IMissionControlSequenceManeuver._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}", IMissionControlSequenceManeuver)
agcls.AgTypeNameMap["IMissionControlSequenceManeuver"] = IMissionControlSequenceManeuver

class IManeuverFinite(IManeuver):
    """Engine properties for a Finite Maneuver."""
    _num_methods = 7
    _vtable_offset = IManeuver._vtable_offset + IManeuver._num_methods
    _metadata = {
        "uuid" : "{2BE095B5-A674-4868-9178-6ADB00753CBF}",
        "vtable_reference" : IManeuver._vtable_offset + IManeuver._num_methods - 1,
        "method_offsets" : { "get_pressure_mode" : 1,
                             "set_pressure_mode" : 2,
                             "get_thrust_efficiency" : 3,
                             "set_thrust_efficiency" : 4,
                             "get_thrust_efficiency_mode" : 5,
                             "set_thrust_efficiency_mode" : 6,
                             "get_propagator" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverFinite)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverFinite)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverFinite, IManeuver)
    
    _get_pressure_mode_metadata = { "name" : "pressure_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PRESSURE_MODE),) }
    @property
    def pressure_mode(self) -> "PRESSURE_MODE":
        """The pressure mode."""
        return self._intf.get_property(IManeuverFinite._metadata, IManeuverFinite._get_pressure_mode_metadata)

    _set_pressure_mode_metadata = { "name" : "pressure_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(PRESSURE_MODE),) }
    @pressure_mode.setter
    def pressure_mode(self, newVal:"PRESSURE_MODE") -> None:
        return self._intf.set_property(IManeuverFinite._metadata, IManeuverFinite._set_pressure_mode_metadata, newVal)

    _get_thrust_efficiency_metadata = { "name" : "thrust_efficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def thrust_efficiency(self) -> float:
        """The thrust efficiency value. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        return self._intf.get_property(IManeuverFinite._metadata, IManeuverFinite._get_thrust_efficiency_metadata)

    _set_thrust_efficiency_metadata = { "name" : "thrust_efficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @thrust_efficiency.setter
    def thrust_efficiency(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverFinite._metadata, IManeuverFinite._set_thrust_efficiency_metadata, newVal)

    _get_thrust_efficiency_mode_metadata = { "name" : "thrust_efficiency_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(THRUST_TYPE),) }
    @property
    def thrust_efficiency_mode(self) -> "THRUST_TYPE":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        return self._intf.get_property(IManeuverFinite._metadata, IManeuverFinite._get_thrust_efficiency_mode_metadata)

    _set_thrust_efficiency_mode_metadata = { "name" : "thrust_efficiency_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(THRUST_TYPE),) }
    @thrust_efficiency_mode.setter
    def thrust_efficiency_mode(self, newVal:"THRUST_TYPE") -> None:
        return self._intf.set_property(IManeuverFinite._metadata, IManeuverFinite._set_thrust_efficiency_mode_metadata, newVal)

    _get_propagator_metadata = { "name" : "propagator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def propagator(self) -> "ManeuverFinitePropagator":
        """The propagator."""
        return self._intf.get_property(IManeuverFinite._metadata, IManeuverFinite._get_propagator_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2BE095B5-A674-4868-9178-6ADB00753CBF}", IManeuverFinite)
agcls.AgTypeNameMap["IManeuverFinite"] = IManeuverFinite

class IManeuverImpulsive(IManeuver):
    """Properties for an Impulsive Maneuver."""
    _num_methods = 2
    _vtable_offset = IManeuver._vtable_offset + IManeuver._num_methods
    _metadata = {
        "uuid" : "{41595314-A798-41ED-80DD-0DA873CCF8A0}",
        "vtable_reference" : IManeuver._vtable_offset + IManeuver._num_methods - 1,
        "method_offsets" : { "get_update_mass" : 1,
                             "set_update_mass" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverImpulsive)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverImpulsive)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverImpulsive, IManeuver)
    
    _get_update_mass_metadata = { "name" : "update_mass",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def update_mass(self) -> bool:
        """True if the mass of the spacecraft will be updated on the basis of fuel usage."""
        return self._intf.get_property(IManeuverImpulsive._metadata, IManeuverImpulsive._get_update_mass_metadata)

    _set_update_mass_metadata = { "name" : "update_mass",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @update_mass.setter
    def update_mass(self, pVal:bool) -> None:
        return self._intf.set_property(IManeuverImpulsive._metadata, IManeuverImpulsive._set_update_mass_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{41595314-A798-41ED-80DD-0DA873CCF8A0}", IManeuverImpulsive)
agcls.AgTypeNameMap["IManeuverImpulsive"] = IManeuverImpulsive

class IAttitudeControlImpulsiveVelocityVector(IAttitudeControlImpulsive):
    """Properties for the Velocity Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 3
    _vtable_offset = IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{EF098B53-D99D-4AB6-A227-DED98E48B4DB}",
        "vtable_reference" : IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_delta_v_magnitude" : 1,
                             "set_delta_v_magnitude" : 2,
                             "get_body_constraint_vector" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsiveVelocityVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsiveVelocityVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsiveVelocityVector, IAttitudeControlImpulsive)
    
    _get_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delta_v_magnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IAttitudeControlImpulsiveVelocityVector._metadata, IAttitudeControlImpulsiveVelocityVector._get_delta_v_magnitude_metadata)

    _set_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delta_v_magnitude.setter
    def delta_v_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveVelocityVector._metadata, IAttitudeControlImpulsiveVelocityVector._set_delta_v_magnitude_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlImpulsiveVelocityVector._metadata, IAttitudeControlImpulsiveVelocityVector._get_body_constraint_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{EF098B53-D99D-4AB6-A227-DED98E48B4DB}", IAttitudeControlImpulsiveVelocityVector)
agcls.AgTypeNameMap["IAttitudeControlImpulsiveVelocityVector"] = IAttitudeControlImpulsiveVelocityVector

class IAttitudeControlImpulsiveAntiVelocityVector(IAttitudeControlImpulsive):
    """Properties for the Anti-Velocity Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 3
    _vtable_offset = IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{711B2692-73A2-4C08-9AF3-CC1F93317DF2}",
        "vtable_reference" : IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_delta_v_magnitude" : 1,
                             "set_delta_v_magnitude" : 2,
                             "get_body_constraint_vector" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsiveAntiVelocityVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsiveAntiVelocityVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsiveAntiVelocityVector, IAttitudeControlImpulsive)
    
    _get_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delta_v_magnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        return self._intf.get_property(IAttitudeControlImpulsiveAntiVelocityVector._metadata, IAttitudeControlImpulsiveAntiVelocityVector._get_delta_v_magnitude_metadata)

    _set_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delta_v_magnitude.setter
    def delta_v_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveAntiVelocityVector._metadata, IAttitudeControlImpulsiveAntiVelocityVector._set_delta_v_magnitude_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlImpulsiveAntiVelocityVector._metadata, IAttitudeControlImpulsiveAntiVelocityVector._get_body_constraint_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{711B2692-73A2-4C08-9AF3-CC1F93317DF2}", IAttitudeControlImpulsiveAntiVelocityVector)
agcls.AgTypeNameMap["IAttitudeControlImpulsiveAntiVelocityVector"] = IAttitudeControlImpulsiveAntiVelocityVector

class IAttitudeControlImpulsiveAttitude(IAttitudeControlImpulsive):
    """Properties for the Attitude attitude control for an Impulsive Maneuver."""
    _num_methods = 5
    _vtable_offset = IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{D9334B8B-9016-4F73-A134-0C61C91060E1}",
        "vtable_reference" : IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_delta_v_magnitude" : 1,
                             "set_delta_v_magnitude" : 2,
                             "get_reference_axes_name" : 3,
                             "set_reference_axes_name" : 4,
                             "get_orientation" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsiveAttitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsiveAttitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsiveAttitude, IAttitudeControlImpulsive)
    
    _get_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delta_v_magnitude(self) -> float:
        """The size of the delta-V to be applied along the X axis - as defined by the selected axes and rotation. Uses Rate Dimension."""
        return self._intf.get_property(IAttitudeControlImpulsiveAttitude._metadata, IAttitudeControlImpulsiveAttitude._get_delta_v_magnitude_metadata)

    _set_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delta_v_magnitude.setter
    def delta_v_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveAttitude._metadata, IAttitudeControlImpulsiveAttitude._set_delta_v_magnitude_metadata, newVal)

    _get_reference_axes_name_metadata = { "name" : "reference_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_axes_name(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        return self._intf.get_property(IAttitudeControlImpulsiveAttitude._metadata, IAttitudeControlImpulsiveAttitude._get_reference_axes_name_metadata)

    _set_reference_axes_name_metadata = { "name" : "reference_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_axes_name.setter
    def reference_axes_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveAttitude._metadata, IAttitudeControlImpulsiveAttitude._set_reference_axes_name_metadata, newVal)

    _get_orientation_metadata = { "name" : "orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def orientation(self) -> "IOrientation":
        """The orientation of the attitude."""
        return self._intf.get_property(IAttitudeControlImpulsiveAttitude._metadata, IAttitudeControlImpulsiveAttitude._get_orientation_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D9334B8B-9016-4F73-A134-0C61C91060E1}", IAttitudeControlImpulsiveAttitude)
agcls.AgTypeNameMap["IAttitudeControlImpulsiveAttitude"] = IAttitudeControlImpulsiveAttitude

class IAttitudeControlImpulsiveFile(IAttitudeControlImpulsive):
    """Properties for the File attitude control for an Impulsive Maneuver."""
    _num_methods = 7
    _vtable_offset = IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}",
        "vtable_reference" : IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_delta_v_magnitude" : 1,
                             "set_delta_v_magnitude" : 2,
                             "get_filename" : 3,
                             "set_filename" : 4,
                             "get_file_time_offset" : 5,
                             "set_file_time_offset" : 6,
                             "get_full_filename" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsiveFile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsiveFile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsiveFile, IAttitudeControlImpulsive)
    
    _get_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def delta_v_magnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the specified direction. Uses Rate Dimension."""
        return self._intf.get_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._get_delta_v_magnitude_metadata)

    _set_delta_v_magnitude_metadata = { "name" : "delta_v_magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @delta_v_magnitude.setter
    def delta_v_magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._set_delta_v_magnitude_metadata, newVal)

    _get_filename_metadata = { "name" : "filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def filename(self) -> str:
        """The attitude file to use."""
        return self._intf.get_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._get_filename_metadata)

    _set_filename_metadata = { "name" : "filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @filename.setter
    def filename(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._set_filename_metadata, newVal)

    _get_file_time_offset_metadata = { "name" : "file_time_offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def file_time_offset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        return self._intf.get_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._get_file_time_offset_metadata)

    _set_file_time_offset_metadata = { "name" : "file_time_offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @file_time_offset.setter
    def file_time_offset(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._set_file_time_offset_metadata, newVal)

    _get_full_filename_metadata = { "name" : "full_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def full_filename(self) -> str:
        """The full path and name of the attitude file to use."""
        return self._intf.get_property(IAttitudeControlImpulsiveFile._metadata, IAttitudeControlImpulsiveFile._get_full_filename_metadata)


agcls.AgClassCatalog.add_catalog_entry("{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}", IAttitudeControlImpulsiveFile)
agcls.AgTypeNameMap["IAttitudeControlImpulsiveFile"] = IAttitudeControlImpulsiveFile

class IAttitudeControlImpulsiveThrustVector(IAttitudeControlImpulsive):
    """Properties for the Thrust Vector attitude control for an Impulsive Maneuver."""
    _num_methods = 23
    _vtable_offset = IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods
    _metadata = {
        "uuid" : "{3C985D0B-4049-4C5E-81BC-E394CCE17787}",
        "vtable_reference" : IAttitudeControlImpulsive._vtable_offset + IAttitudeControlImpulsive._num_methods - 1,
        "method_offsets" : { "get_thrust_axes_name" : 1,
                             "set_thrust_axes_name" : 2,
                             "get_body_constraint_vector" : 3,
                             "get_allow_negative_spherical_magnitude" : 4,
                             "set_allow_negative_spherical_magnitude" : 5,
                             "get_coord_type" : 6,
                             "set_coord_type" : 7,
                             "get_x" : 8,
                             "set_x" : 9,
                             "get_y" : 10,
                             "set_y" : 11,
                             "get_z" : 12,
                             "set_z" : 13,
                             "get_azimuth" : 14,
                             "set_azimuth" : 15,
                             "get_elevation" : 16,
                             "set_elevation" : 17,
                             "get_magnitude" : 18,
                             "set_magnitude" : 19,
                             "assign_cartesian" : 20,
                             "query_cartesian" : 21,
                             "assign_spherical" : 22,
                             "query_spherical" : 23, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlImpulsiveThrustVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsive._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlImpulsiveThrustVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlImpulsiveThrustVector, IAttitudeControlImpulsive)
    
    _get_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def thrust_axes_name(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_thrust_axes_name_metadata)

    _set_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @thrust_axes_name.setter
    def thrust_axes_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_thrust_axes_name_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_body_constraint_vector_metadata)

    _get_allow_negative_spherical_magnitude_metadata = { "name" : "allow_negative_spherical_magnitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def allow_negative_spherical_magnitude(self) -> bool:
        """True if the spherical magnitude should be allowed to be less than zero."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_allow_negative_spherical_magnitude_metadata)

    _set_allow_negative_spherical_magnitude_metadata = { "name" : "allow_negative_spherical_magnitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @allow_negative_spherical_magnitude.setter
    def allow_negative_spherical_magnitude(self, newVal:bool) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_allow_negative_spherical_magnitude_metadata, newVal)

    _get_coord_type_metadata = { "name" : "coord_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IMP_DELTA_V_REP),) }
    @property
    def coord_type(self) -> "IMP_DELTA_V_REP":
        """The coordinate representation for the DeltaV."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_coord_type_metadata)

    _set_coord_type_metadata = { "name" : "coord_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IMP_DELTA_V_REP),) }
    @coord_type.setter
    def coord_type(self, newVal:"IMP_DELTA_V_REP") -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_coord_type_metadata, newVal)

    _get_x_metadata = { "name" : "x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def x(self) -> float:
        """The Cartesian X component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_x_metadata)

    _set_x_metadata = { "name" : "x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @x.setter
    def x(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_x_metadata, newVal)

    _get_y_metadata = { "name" : "y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y(self) -> float:
        """The Cartesian Y component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_y_metadata)

    _set_y_metadata = { "name" : "y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y.setter
    def y(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_y_metadata, newVal)

    _get_z_metadata = { "name" : "z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def z(self) -> float:
        """The Cartesian Z component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_z_metadata)

    _set_z_metadata = { "name" : "z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @z.setter
    def z(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_z_metadata, newVal)

    _get_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def azimuth(self) -> typing.Any:
        """The spherical Azimuth angle of the impulsive DeltaV (dimension: Angle)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_azimuth_metadata)

    _set_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @azimuth.setter
    def azimuth(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_azimuth_metadata, newVal)

    _get_elevation_metadata = { "name" : "elevation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def elevation(self) -> typing.Any:
        """The spherical Elevation angle of the impulsive DeltaV (dimension: Angle)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_elevation_metadata)

    _set_elevation_metadata = { "name" : "elevation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @elevation.setter
    def elevation(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_elevation_metadata, newVal)

    _get_magnitude_metadata = { "name" : "magnitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def magnitude(self) -> float:
        """The spherical Magnitude of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        return self._intf.get_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._get_magnitude_metadata)

    _set_magnitude_metadata = { "name" : "magnitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @magnitude.setter
    def magnitude(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._set_magnitude_metadata, newVal)

    _assign_cartesian_metadata = { "name" : "assign_cartesian",
            "arg_types" : (agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg, agmarshall.DOUBLE_arg,) }
    def assign_cartesian(self, xVal:float, yVal:float, zVal:float) -> None:
        """Assign all three Cartesian components of the DeltaV vector (dimension: SmallDistance/Time)"""
        return self._intf.invoke(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._assign_cartesian_metadata, xVal, yVal, zVal)

    _query_cartesian_metadata = { "name" : "query_cartesian",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def query_cartesian(self) -> list:
        """Get all three Cartesian components of the DeltaV vector as an array (dimension: SmallDistance/Time)"""
        return self._intf.invoke(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._query_cartesian_metadata, out_arg())

    _assign_spherical_metadata = { "name" : "assign_spherical",
            "arg_types" : (agcom.VARIANT, agcom.VARIANT, agcom.DOUBLE,),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.VARIANT_arg, agmarshall.DOUBLE_arg,) }
    def assign_spherical(self, azVal:typing.Any, elVal:typing.Any, magVal:float) -> None:
        """Assign all three spherical components of the DeltaV vector (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        return self._intf.invoke(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._assign_spherical_metadata, azVal, elVal, magVal)

    _query_spherical_metadata = { "name" : "query_spherical",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    def query_spherical(self) -> list:
        """Get all three spherical components of the DeltaV vector as an array (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        return self._intf.invoke(IAttitudeControlImpulsiveThrustVector._metadata, IAttitudeControlImpulsiveThrustVector._query_spherical_metadata, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{3C985D0B-4049-4C5E-81BC-E394CCE17787}", IAttitudeControlImpulsiveThrustVector)
agcls.AgTypeNameMap["IAttitudeControlImpulsiveThrustVector"] = IAttitudeControlImpulsiveThrustVector

class IAttitudeControlFiniteAntiVelocityVector(IAttitudeControlFinite):
    """Properties for the Anti-Velocity Vector attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{DB9276FA-2033-425D-9453-A0862C3DC715}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_attitude_update" : 1,
                             "set_attitude_update" : 2,
                             "get_body_constraint_vector" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteAntiVelocityVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteAntiVelocityVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteAntiVelocityVector, IAttitudeControlFinite)
    
    _get_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @property
    def attitude_update(self) -> "ATTITUDE_UPDATE":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAttitudeControlFiniteAntiVelocityVector._metadata, IAttitudeControlFiniteAntiVelocityVector._get_attitude_update_metadata)

    _set_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @attitude_update.setter
    def attitude_update(self, newVal:"ATTITUDE_UPDATE") -> None:
        return self._intf.set_property(IAttitudeControlFiniteAntiVelocityVector._metadata, IAttitudeControlFiniteAntiVelocityVector._set_attitude_update_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlFiniteAntiVelocityVector._metadata, IAttitudeControlFiniteAntiVelocityVector._get_body_constraint_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{DB9276FA-2033-425D-9453-A0862C3DC715}", IAttitudeControlFiniteAntiVelocityVector)
agcls.AgTypeNameMap["IAttitudeControlFiniteAntiVelocityVector"] = IAttitudeControlFiniteAntiVelocityVector

class IAttitudeControlFiniteAttitude(IAttitudeControlFinite):
    """Properties for the Attitude attitude control for a Finite Maneuver."""
    _num_methods = 5
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{BE7E2121-2A2E-4045-BE6F-E75256FDD287}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_attitude_update" : 1,
                             "set_attitude_update" : 2,
                             "get_reference_axes_name" : 3,
                             "set_reference_axes_name" : 4,
                             "get_orientation" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteAttitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteAttitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteAttitude, IAttitudeControlFinite)
    
    _get_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @property
    def attitude_update(self) -> "ATTITUDE_UPDATE":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAttitudeControlFiniteAttitude._metadata, IAttitudeControlFiniteAttitude._get_attitude_update_metadata)

    _set_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @attitude_update.setter
    def attitude_update(self, newVal:"ATTITUDE_UPDATE") -> None:
        return self._intf.set_property(IAttitudeControlFiniteAttitude._metadata, IAttitudeControlFiniteAttitude._set_attitude_update_metadata, newVal)

    _get_reference_axes_name_metadata = { "name" : "reference_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_axes_name(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        return self._intf.get_property(IAttitudeControlFiniteAttitude._metadata, IAttitudeControlFiniteAttitude._get_reference_axes_name_metadata)

    _set_reference_axes_name_metadata = { "name" : "reference_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_axes_name.setter
    def reference_axes_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlFiniteAttitude._metadata, IAttitudeControlFiniteAttitude._set_reference_axes_name_metadata, newVal)

    _get_orientation_metadata = { "name" : "orientation",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def orientation(self) -> "IOrientation":
        """The orientation of the attitude."""
        return self._intf.get_property(IAttitudeControlFiniteAttitude._metadata, IAttitudeControlFiniteAttitude._get_orientation_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BE7E2121-2A2E-4045-BE6F-E75256FDD287}", IAttitudeControlFiniteAttitude)
agcls.AgTypeNameMap["IAttitudeControlFiniteAttitude"] = IAttitudeControlFiniteAttitude

class IAttitudeControlFiniteFile(IAttitudeControlFinite):
    """Properties for the File attitude control for a Finite Maneuver."""
    _num_methods = 5
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_filename" : 1,
                             "set_filename" : 2,
                             "get_file_time_offset" : 3,
                             "set_file_time_offset" : 4,
                             "get_full_filename" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteFile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteFile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteFile, IAttitudeControlFinite)
    
    _get_filename_metadata = { "name" : "filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def filename(self) -> str:
        """The attitude file to use."""
        return self._intf.get_property(IAttitudeControlFiniteFile._metadata, IAttitudeControlFiniteFile._get_filename_metadata)

    _set_filename_metadata = { "name" : "filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @filename.setter
    def filename(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlFiniteFile._metadata, IAttitudeControlFiniteFile._set_filename_metadata, newVal)

    _get_file_time_offset_metadata = { "name" : "file_time_offset",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def file_time_offset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        return self._intf.get_property(IAttitudeControlFiniteFile._metadata, IAttitudeControlFiniteFile._get_file_time_offset_metadata)

    _set_file_time_offset_metadata = { "name" : "file_time_offset",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @file_time_offset.setter
    def file_time_offset(self, newVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteFile._metadata, IAttitudeControlFiniteFile._set_file_time_offset_metadata, newVal)

    _get_full_filename_metadata = { "name" : "full_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def full_filename(self) -> str:
        """The full path and name of the attitude file to use."""
        return self._intf.get_property(IAttitudeControlFiniteFile._metadata, IAttitudeControlFiniteFile._get_full_filename_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}", IAttitudeControlFiniteFile)
agcls.AgTypeNameMap["IAttitudeControlFiniteFile"] = IAttitudeControlFiniteFile

class IAttitudeControlFiniteThrustVector(IAttitudeControlFinite):
    """Properties for the Thrust Vector attitude control for a Finite Maneuver."""
    _num_methods = 6
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{5928D05A-399E-4773-A934-23E9B9EEF39E}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_attitude_update" : 1,
                             "set_attitude_update" : 2,
                             "get_thrust_axes_name" : 3,
                             "set_thrust_axes_name" : 4,
                             "get_body_constraint_vector" : 5,
                             "get_thrust_vector" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteThrustVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteThrustVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteThrustVector, IAttitudeControlFinite)
    
    _get_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @property
    def attitude_update(self) -> "ATTITUDE_UPDATE":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._get_attitude_update_metadata)

    _set_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @attitude_update.setter
    def attitude_update(self, newVal:"ATTITUDE_UPDATE") -> None:
        return self._intf.set_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._set_attitude_update_metadata, newVal)

    _get_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def thrust_axes_name(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._get_thrust_axes_name_metadata)

    _set_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @thrust_axes_name.setter
    def thrust_axes_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._set_thrust_axes_name_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._get_body_constraint_vector_metadata)

    _get_thrust_vector_metadata = { "name" : "thrust_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def thrust_vector(self) -> "IDirection":
        """Define the thrust vector in the reference axes."""
        return self._intf.get_property(IAttitudeControlFiniteThrustVector._metadata, IAttitudeControlFiniteThrustVector._get_thrust_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5928D05A-399E-4773-A934-23E9B9EEF39E}", IAttitudeControlFiniteThrustVector)
agcls.AgTypeNameMap["IAttitudeControlFiniteThrustVector"] = IAttitudeControlFiniteThrustVector

class IAttitudeControlFiniteTimeVarying(IAttitudeControlFinite):
    """Properties for the Time Varying attitude control for a Finite Maneuver."""
    _num_methods = 35
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{52E48F6D-0FD1-4E30-9398-DCCA988454CE}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_thrust_axes_name" : 1,
                             "set_thrust_axes_name" : 2,
                             "get_body_constraint_vector" : 3,
                             "get_az0" : 4,
                             "set_az0" : 5,
                             "get_az1" : 6,
                             "set_az1" : 7,
                             "get_az2" : 8,
                             "set_az2" : 9,
                             "get_az3" : 10,
                             "set_az3" : 11,
                             "get_az4" : 12,
                             "set_az4" : 13,
                             "get_az_a" : 14,
                             "set_az_a" : 15,
                             "get_az_f" : 16,
                             "set_az_f" : 17,
                             "get_az_p" : 18,
                             "set_az_p" : 19,
                             "get_el0" : 20,
                             "set_el0" : 21,
                             "get_el1" : 22,
                             "set_el1" : 23,
                             "get_el2" : 24,
                             "set_el2" : 25,
                             "get_el3" : 26,
                             "set_el3" : 27,
                             "get_el4" : 28,
                             "set_el4" : 29,
                             "get_el_a" : 30,
                             "set_el_a" : 31,
                             "get_el_f" : 32,
                             "set_el_f" : 33,
                             "get_el_p" : 34,
                             "set_el_p" : 35, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteTimeVarying)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteTimeVarying)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteTimeVarying, IAttitudeControlFinite)
    
    _get_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def thrust_axes_name(self) -> str:
        """The thrust axes."""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_thrust_axes_name_metadata)

    _set_thrust_axes_name_metadata = { "name" : "thrust_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @thrust_axes_name.setter
    def thrust_axes_name(self, newVal:str) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_thrust_axes_name_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_body_constraint_vector_metadata)

    _get_az0_metadata = { "name" : "az0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az0(self) -> float:
        """Azimuth constant term (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az0_metadata)

    _set_az0_metadata = { "name" : "az0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az0.setter
    def az0(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az0_metadata, pVal)

    _get_az1_metadata = { "name" : "az1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az1(self) -> float:
        """Azimuth linear term (dimension: angle/time)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az1_metadata)

    _set_az1_metadata = { "name" : "az1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az1.setter
    def az1(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az1_metadata, pVal)

    _get_az2_metadata = { "name" : "az2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az2(self) -> float:
        """Azimuth quadratic term (dimension: angle/time^2)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az2_metadata)

    _set_az2_metadata = { "name" : "az2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az2.setter
    def az2(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az2_metadata, pVal)

    _get_az3_metadata = { "name" : "az3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az3(self) -> float:
        """Azimuth cubic term (dimension: angle/time^3)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az3_metadata)

    _set_az3_metadata = { "name" : "az3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az3.setter
    def az3(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az3_metadata, pVal)

    _get_az4_metadata = { "name" : "az4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az4(self) -> float:
        """Azimuth quartic term (dimension: angle/time^4)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az4_metadata)

    _set_az4_metadata = { "name" : "az4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az4.setter
    def az4(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az4_metadata, pVal)

    _get_az_a_metadata = { "name" : "az_a",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az_a(self) -> float:
        """Azimuth sine term amplitude (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az_a_metadata)

    _set_az_a_metadata = { "name" : "az_a",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az_a.setter
    def az_a(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az_a_metadata, pVal)

    _get_az_f_metadata = { "name" : "az_f",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az_f(self) -> float:
        """Azimuth sine term frequency (dimension: angle/time)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az_f_metadata)

    _set_az_f_metadata = { "name" : "az_f",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az_f.setter
    def az_f(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az_f_metadata, pVal)

    _get_az_p_metadata = { "name" : "az_p",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def az_p(self) -> float:
        """Azimuth sine term phase (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_az_p_metadata)

    _set_az_p_metadata = { "name" : "az_p",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @az_p.setter
    def az_p(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_az_p_metadata, pVal)

    _get_el0_metadata = { "name" : "el0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el0(self) -> float:
        """Elevation constant term (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el0_metadata)

    _set_el0_metadata = { "name" : "el0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el0.setter
    def el0(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el0_metadata, pVal)

    _get_el1_metadata = { "name" : "el1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el1(self) -> float:
        """Elevation linear term (dimension: angle/time)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el1_metadata)

    _set_el1_metadata = { "name" : "el1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el1.setter
    def el1(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el1_metadata, pVal)

    _get_el2_metadata = { "name" : "el2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el2(self) -> float:
        """Elevation quadratic term (dimension: angle/time^2)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el2_metadata)

    _set_el2_metadata = { "name" : "el2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el2.setter
    def el2(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el2_metadata, pVal)

    _get_el3_metadata = { "name" : "el3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el3(self) -> float:
        """Elevation cubic term (dimension: angle/time^3)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el3_metadata)

    _set_el3_metadata = { "name" : "el3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el3.setter
    def el3(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el3_metadata, pVal)

    _get_el4_metadata = { "name" : "el4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el4(self) -> float:
        """Elevation quartic term (dimension: angle/time^4)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el4_metadata)

    _set_el4_metadata = { "name" : "el4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el4.setter
    def el4(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el4_metadata, pVal)

    _get_el_a_metadata = { "name" : "el_a",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el_a(self) -> float:
        """Elevation sine term amplitude (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el_a_metadata)

    _set_el_a_metadata = { "name" : "el_a",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el_a.setter
    def el_a(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el_a_metadata, pVal)

    _get_el_f_metadata = { "name" : "el_f",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el_f(self) -> float:
        """Elevation sine term frequency (dimension: angle/time)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el_f_metadata)

    _set_el_f_metadata = { "name" : "el_f",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el_f.setter
    def el_f(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el_f_metadata, pVal)

    _get_el_p_metadata = { "name" : "el_p",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def el_p(self) -> float:
        """Elevation sine term phase (dimension: angle)"""
        return self._intf.get_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._get_el_p_metadata)

    _set_el_p_metadata = { "name" : "el_p",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @el_p.setter
    def el_p(self, pVal:float) -> None:
        return self._intf.set_property(IAttitudeControlFiniteTimeVarying._metadata, IAttitudeControlFiniteTimeVarying._set_el_p_metadata, pVal)


agcls.AgClassCatalog.add_catalog_entry("{52E48F6D-0FD1-4E30-9398-DCCA988454CE}", IAttitudeControlFiniteTimeVarying)
agcls.AgTypeNameMap["IAttitudeControlFiniteTimeVarying"] = IAttitudeControlFiniteTimeVarying

class IAttitudeControlFiniteVelocityVector(IAttitudeControlFinite):
    """Properties for the Velocity Vector attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "get_attitude_update" : 1,
                             "set_attitude_update" : 2,
                             "get_body_constraint_vector" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFiniteVelocityVector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFiniteVelocityVector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFiniteVelocityVector, IAttitudeControlFinite)
    
    _get_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @property
    def attitude_update(self) -> "ATTITUDE_UPDATE":
        """How and when the attitude will be updated."""
        return self._intf.get_property(IAttitudeControlFiniteVelocityVector._metadata, IAttitudeControlFiniteVelocityVector._get_attitude_update_metadata)

    _set_attitude_update_metadata = { "name" : "attitude_update",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATTITUDE_UPDATE),) }
    @attitude_update.setter
    def attitude_update(self, newVal:"ATTITUDE_UPDATE") -> None:
        return self._intf.set_property(IAttitudeControlFiniteVelocityVector._metadata, IAttitudeControlFiniteVelocityVector._set_attitude_update_metadata, newVal)

    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlFiniteVelocityVector._metadata, IAttitudeControlFiniteVelocityVector._get_body_constraint_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}", IAttitudeControlFiniteVelocityVector)
agcls.AgTypeNameMap["IAttitudeControlFiniteVelocityVector"] = IAttitudeControlFiniteVelocityVector

class IAttitudeControlFinitePlugin(IAttitudeControlFinite):
    """Properties for the Plugin attitude control for a Finite Maneuver."""
    _num_methods = 3
    _vtable_offset = IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods
    _metadata = {
        "uuid" : "{97762200-0ECD-423E-83FA-128D9DBC9C59}",
        "vtable_reference" : IAttitudeControlFinite._vtable_offset + IAttitudeControlFinite._num_methods - 1,
        "method_offsets" : { "select_plugin_by_name" : 1,
                             "get_plugin_name" : 2,
                             "get_plugin_config" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlFinitePlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlFinitePlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlFinitePlugin, IAttitudeControlFinite)
    
    _select_plugin_by_name_metadata = { "name" : "select_plugin_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def select_plugin_by_name(self, name:str) -> None:
        """Select plugin using the plugin name."""
        return self._intf.invoke(IAttitudeControlFinitePlugin._metadata, IAttitudeControlFinitePlugin._select_plugin_by_name_metadata, name)

    _get_plugin_name_metadata = { "name" : "plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_name(self) -> str:
        """The selected plugin's name."""
        return self._intf.get_property(IAttitudeControlFinitePlugin._metadata, IAttitudeControlFinitePlugin._get_plugin_name_metadata)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IAttitudeControlFinitePlugin._metadata, IAttitudeControlFinitePlugin._get_plugin_config_metadata)


agcls.AgClassCatalog.add_catalog_entry("{97762200-0ECD-423E-83FA-128D9DBC9C59}", IAttitudeControlFinitePlugin)
agcls.AgTypeNameMap["IAttitudeControlFinitePlugin"] = IAttitudeControlFinitePlugin

class IAttitudeControlOptimalFiniteLagrange(IAttitudeControlOptimalFinite):
    """Properties for the Lagrange Interpolation attitude control for a Optimal Finite Maneuver."""
    _num_methods = 1
    _vtable_offset = IAttitudeControlOptimalFinite._vtable_offset + IAttitudeControlOptimalFinite._num_methods
    _metadata = {
        "uuid" : "{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}",
        "vtable_reference" : IAttitudeControlOptimalFinite._vtable_offset + IAttitudeControlOptimalFinite._num_methods - 1,
        "method_offsets" : { "get_body_constraint_vector" : 1, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAttitudeControlOptimalFiniteLagrange)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlOptimalFinite._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAttitudeControlOptimalFiniteLagrange)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAttitudeControlOptimalFiniteLagrange, IAttitudeControlOptimalFinite)
    
    _get_body_constraint_vector_metadata = { "name" : "body_constraint_vector",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def body_constraint_vector(self) -> "IDirection":
        """Define a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        return self._intf.get_property(IAttitudeControlOptimalFiniteLagrange._metadata, IAttitudeControlOptimalFiniteLagrange._get_body_constraint_vector_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}", IAttitudeControlOptimalFiniteLagrange)
agcls.AgTypeNameMap["IAttitudeControlOptimalFiniteLagrange"] = IAttitudeControlOptimalFiniteLagrange

class IMissionControlSequenceHold(object):
    """Properties for a Hold segment."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E53CB41B-2AFA-40B5-97AE-079CA69F0779}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_step_size" : 1,
                             "set_step_size" : 2,
                             "get_hold_frame_name" : 3,
                             "set_hold_frame_name" : 4,
                             "get_enable_hold_attitude" : 5,
                             "set_enable_hold_attitude" : 6,
                             "get_stopping_conditions" : 7,
                             "get_min_propagation_time" : 8,
                             "set_min_propagation_time" : 9,
                             "get_max_propagation_time" : 10,
                             "set_max_propagation_time" : 11,
                             "get_enable_max_propagation_time" : 12,
                             "set_enable_max_propagation_time" : 13,
                             "get_enable_warning_message" : 14,
                             "set_enable_warning_message" : 15,
                             "enable_control_parameter" : 16,
                             "disable_control_parameter" : 17,
                             "is_control_parameter_enabled" : 18,
                             "get_control_parameters_available" : 19,
                             "get_override_max_propagation_time" : 20,
                             "set_override_max_propagation_time" : 21,
                             "get_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 22,
                             "set_should_stop_for_initially_surpassed_epoch_stopping_conditions" : 23, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceHold)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceHold)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceHold, None)
    
    _get_step_size_metadata = { "name" : "step_size",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def step_size(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_step_size_metadata)

    _set_step_size_metadata = { "name" : "step_size",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @step_size.setter
    def step_size(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_step_size_metadata, newVal)

    _get_hold_frame_name_metadata = { "name" : "hold_frame_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def hold_frame_name(self) -> str:
        """Hold Frame - the reference frame of the Hold segment."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_hold_frame_name_metadata)

    _set_hold_frame_name_metadata = { "name" : "hold_frame_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @hold_frame_name.setter
    def hold_frame_name(self, newVal:str) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_hold_frame_name_metadata, newVal)

    _get_enable_hold_attitude_metadata = { "name" : "enable_hold_attitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_hold_attitude(self) -> bool:
        """Enable Hold Altitude - if true, the spacecraft's attitude is fixed within the hold frame."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_enable_hold_attitude_metadata)

    _set_enable_hold_attitude_metadata = { "name" : "enable_hold_attitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_hold_attitude.setter
    def enable_hold_attitude(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_enable_hold_attitude_metadata, newVal)

    _get_stopping_conditions_metadata = { "name" : "stopping_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def stopping_conditions(self) -> "StoppingConditionCollection":
        """The stopping conditions defined for the segment."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_stopping_conditions_metadata)

    _get_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_propagation_time(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_min_propagation_time_metadata)

    _set_min_propagation_time_metadata = { "name" : "min_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_propagation_time.setter
    def min_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_min_propagation_time_metadata, newVal)

    _get_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_propagation_time(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_max_propagation_time_metadata)

    _set_max_propagation_time_metadata = { "name" : "max_propagation_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_propagation_time.setter
    def max_propagation_time(self, newVal:float) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_max_propagation_time_metadata, newVal)

    _get_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_max_propagation_time(self) -> bool:
        """Enable Maximum Propagation Time - if true, the maximum propagation time will be enforced."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_enable_max_propagation_time_metadata)

    _set_enable_max_propagation_time_metadata = { "name" : "enable_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_max_propagation_time.setter
    def enable_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_enable_max_propagation_time_metadata, newVal)

    _get_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_warning_message(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_enable_warning_message_metadata)

    _set_enable_warning_message_metadata = { "name" : "enable_warning_message",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_warning_message.setter
    def enable_warning_message(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_enable_warning_message_metadata, newVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED),) }
    def enable_control_parameter(self, param:"CONTROL_ADVANCED") -> None:
        """Enable or disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED),) }
    def disable_control_parameter(self, param:"CONTROL_ADVANCED") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ADVANCED), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ADVANCED") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_control_parameters_available_metadata)

    _get_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def override_max_propagation_time(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_override_max_propagation_time_metadata)

    _set_override_max_propagation_time_metadata = { "name" : "override_max_propagation_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @override_max_propagation_time.setter
    def override_max_propagation_time(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_override_max_propagation_time_metadata, newVal)

    _get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        return self._intf.get_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._get_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata)

    _set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata = { "name" : "should_stop_for_initially_surpassed_epoch_stopping_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_stop_for_initially_surpassed_epoch_stopping_conditions.setter
    def should_stop_for_initially_surpassed_epoch_stopping_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceHold._metadata, IMissionControlSequenceHold._set_should_stop_for_initially_surpassed_epoch_stopping_conditions_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E53CB41B-2AFA-40B5-97AE-079CA69F0779}", IMissionControlSequenceHold)
agcls.AgTypeNameMap["IMissionControlSequenceHold"] = IMissionControlSequenceHold

class IMissionControlSequenceUpdate(object):
    """Properties for an Update segment."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "set_action_and_value" : 1,
                             "get_action" : 2,
                             "get_value" : 3,
                             "set_action" : 4,
                             "set_value" : 5,
                             "disable_control_parameter" : 6,
                             "enable_control_parameter" : 7,
                             "is_control_parameter_enabled" : 8,
                             "get_control_parameters_available" : 9,
                             "get_user_variables" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceUpdate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceUpdate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceUpdate, None)
    
    _set_action_and_value_metadata = { "name" : "set_action_and_value",
            "arg_types" : (agcom.LONG, agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_PARAM), agmarshall.AgEnum_arg(UPDATE_ACTION), agmarshall.DOUBLE_arg,) }
    def set_action_and_value(self, parameterType:"UPDATE_PARAM", actionType:"UPDATE_ACTION", value:float) -> None:
        """Set an action and the new value."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._set_action_and_value_metadata, parameterType, actionType, value)

    _get_action_metadata = { "name" : "get_action",
            "arg_types" : (agcom.LONG, POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_PARAM), agmarshall.AgEnum_arg(UPDATE_ACTION),) }
    def get_action(self, parameterType:"UPDATE_PARAM") -> "UPDATE_ACTION":
        """Get the action type for a parameter."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._get_action_metadata, parameterType, out_arg())

    _get_value_metadata = { "name" : "get_value",
            "arg_types" : (agcom.LONG, POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_PARAM), agmarshall.DOUBLE_arg,) }
    def get_value(self, parameterType:"UPDATE_PARAM") -> float:
        """Get the value type for a parameter."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._get_value_metadata, parameterType, out_arg())

    _set_action_metadata = { "name" : "set_action",
            "arg_types" : (agcom.LONG, agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_PARAM), agmarshall.AgEnum_arg(UPDATE_ACTION),) }
    def set_action(self, parameterName:"UPDATE_PARAM", actionType:"UPDATE_ACTION") -> None:
        """Set the update action type."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._set_action_metadata, parameterName, actionType)

    _set_value_metadata = { "name" : "set_value",
            "arg_types" : (agcom.LONG, agcom.DOUBLE,),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_PARAM), agmarshall.DOUBLE_arg,) }
    def set_value(self, parameterName:"UPDATE_PARAM", value:float) -> None:
        """Set the update value."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._set_value_metadata, parameterName, value)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_UPDATE),) }
    def disable_control_parameter(self, param:"CONTROL_UPDATE") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._disable_control_parameter_metadata, param)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_UPDATE),) }
    def enable_control_parameter(self, param:"CONTROL_UPDATE") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._enable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_UPDATE), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_UPDATE") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._get_control_parameters_available_metadata)

    _get_user_variables_metadata = { "name" : "user_variables",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def user_variables(self) -> "UserVariableUpdateCollection":
        """Interface used to modify user variables for the update segment."""
        return self._intf.get_property(IMissionControlSequenceUpdate._metadata, IMissionControlSequenceUpdate._get_user_variables_metadata)


agcls.AgClassCatalog.add_catalog_entry("{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}", IMissionControlSequenceUpdate)
agcls.AgTypeNameMap["IMissionControlSequenceUpdate"] = IMissionControlSequenceUpdate

class IMissionControlSequenceReturn(object):
    """Properties for a Return segment."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_return_control_to_parent_sequence" : 1,
                             "set_return_control_to_parent_sequence" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceReturn)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceReturn)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceReturn, None)
    
    _get_return_control_to_parent_sequence_metadata = { "name" : "return_control_to_parent_sequence",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(RETURN_CONTROL),) }
    @property
    def return_control_to_parent_sequence(self) -> "RETURN_CONTROL":
        """The state of the segment."""
        return self._intf.get_property(IMissionControlSequenceReturn._metadata, IMissionControlSequenceReturn._get_return_control_to_parent_sequence_metadata)

    _set_return_control_to_parent_sequence_metadata = { "name" : "return_control_to_parent_sequence",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(RETURN_CONTROL),) }
    @return_control_to_parent_sequence.setter
    def return_control_to_parent_sequence(self, newVal:"RETURN_CONTROL") -> None:
        return self._intf.set_property(IMissionControlSequenceReturn._metadata, IMissionControlSequenceReturn._set_return_control_to_parent_sequence_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}", IMissionControlSequenceReturn)
agcls.AgTypeNameMap["IMissionControlSequenceReturn"] = IMissionControlSequenceReturn

class IMissionControlSequenceStop(object):
    """Properties for a Stop segment."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enabled" : 1,
                             "set_enabled" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceStop)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceStop)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceStop, None)
    
    _get_enabled_metadata = { "name" : "enabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enabled(self) -> bool:
        """If true, the segment will stop the execution of the MCS."""
        return self._intf.get_property(IMissionControlSequenceStop._metadata, IMissionControlSequenceStop._get_enabled_metadata)

    _set_enabled_metadata = { "name" : "enabled",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enabled.setter
    def enabled(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceStop._metadata, IMissionControlSequenceStop._set_enabled_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}", IMissionControlSequenceStop)
agcls.AgTypeNameMap["IMissionControlSequenceStop"] = IMissionControlSequenceStop

class IProfile(object):
    """General properties for target sequence profiles."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CA331A4E-223E-410B-987C-9BE49AEC33A2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "copy" : 1,
                             "get_name" : 2,
                             "set_name" : 3,
                             "get_status" : 4,
                             "get_user_comment" : 5,
                             "set_user_comment" : 6,
                             "get_mode" : 7,
                             "set_mode" : 8,
                             "get_type" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfile, None)
    
    _copy_metadata = { "name" : "copy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def copy(self) -> "IProfile":
        """Make a copy of the profile."""
        return self._intf.invoke(IProfile._metadata, IProfile._copy_metadata, out_arg())

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the profile."""
        return self._intf.get_property(IProfile._metadata, IProfile._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, inVal:str) -> None:
        return self._intf.set_property(IProfile._metadata, IProfile._set_name_metadata, inVal)

    _get_status_metadata = { "name" : "status",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def status(self) -> str:
        """The status of the profile."""
        return self._intf.get_property(IProfile._metadata, IProfile._get_status_metadata)

    _get_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_comment(self) -> str:
        """A user comment."""
        return self._intf.get_property(IProfile._metadata, IProfile._get_user_comment_metadata)

    _set_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_comment.setter
    def user_comment(self, inVal:str) -> None:
        return self._intf.set_property(IProfile._metadata, IProfile._set_user_comment_metadata, inVal)

    _get_mode_metadata = { "name" : "mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PROFILE_MODE),) }
    @property
    def mode(self) -> "PROFILE_MODE":
        """The profile's mode."""
        return self._intf.get_property(IProfile._metadata, IProfile._get_mode_metadata)

    _set_mode_metadata = { "name" : "mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(PROFILE_MODE),) }
    @mode.setter
    def mode(self, inVal:"PROFILE_MODE") -> None:
        return self._intf.set_property(IProfile._metadata, IProfile._set_mode_metadata, inVal)

    _get_type_metadata = { "name" : "type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PROFILE),) }
    @property
    def type(self) -> "PROFILE":
        """Return the current profile type."""
        return self._intf.get_property(IProfile._metadata, IProfile._get_type_metadata)


agcls.AgClassCatalog.add_catalog_entry("{CA331A4E-223E-410B-987C-9BE49AEC33A2}", IProfile)
agcls.AgTypeNameMap["IProfile"] = IProfile

class IProfileCollection(object):
    """Properties for a list of target sequence profiles."""
    _num_methods = 14
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "item" : 2,
                             "get__NewEnum" : 3,
                             "get_count" : 4,
                             "get_available_profiles" : 5,
                             "remove" : 6,
                             "remove_all" : 7,
                             "get_provide_runtime_type_info" : 8,
                             "cut" : 9,
                             "paste" : 10,
                             "insert_copy" : 11,
                             "add2" : 12,
                             "get_item_by_index" : 13,
                             "get_item_by_name" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IProfile":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, profileName:str) -> "IProfile":
        """Add a profile."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._add_metadata, profileName, out_arg())

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "IProfile":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IProfileCollection._metadata, IProfileCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IProfileCollection._metadata, IProfileCollection._get_count_metadata)

    _get_available_profiles_metadata = { "name" : "available_profiles",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def available_profiles(self) -> list:
        """Return a list of available profiles."""
        return self._intf.get_property(IProfileCollection._metadata, IProfileCollection._get_available_profiles_metadata)

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrProfileName:typing.Any) -> None:
        """Remove an item from the profile collection."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._remove_metadata, indexOrProfileName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all profiles from the profile collection."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._remove_all_metadata, )

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IProfileCollection._metadata, IProfileCollection._get_provide_runtime_type_info_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy the profile into the clipboard and removes profile from the list."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(PROFILE_INSERT_DIRECTION), agmarshall.AgInterface_out_arg,) }
    def paste(self, indexOrName:typing.Any, direction:"PROFILE_INSERT_DIRECTION") -> "IProfile":
        """Pastes the profile from the clipboard and inserts into the list."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._paste_metadata, indexOrName, direction, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IProfile"), agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(PROFILE_INSERT_DIRECTION), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, profile:"IProfile", indexOrName:typing.Any, direction:"PROFILE_INSERT_DIRECTION") -> "IProfile":
        """Copy the profile and inserts the copy into the list."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._insert_copy_metadata, profile, indexOrName, direction, out_arg())

    _add2_metadata = { "name" : "add2",
            "arg_types" : (agcom.BSTR, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.VARIANT_arg, agmarshall.AgEnum_arg(PROFILE_INSERT_DIRECTION), agmarshall.AgInterface_out_arg,) }
    def add2(self, profileName:str, indexOrName:typing.Any, direction:"PROFILE_INSERT_DIRECTION") -> "IProfile":
        """Add a profile."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._add2_metadata, profileName, indexOrName, direction, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "IProfile":
        """Retrieve a profile from the collection by index."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "IProfile":
        """Retrieve a profile from the collection by name."""
        return self._intf.invoke(IProfileCollection._metadata, IProfileCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}", IProfileCollection)
agcls.AgTypeNameMap["IProfileCollection"] = IProfileCollection

class IMissionControlSequenceTargetSequence(object):
    """General properties of a TargetSequence segment."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{703A8064-AB76-41FC-AADA-5134C30DB1C9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_action" : 1,
                             "set_action" : 2,
                             "get_when_profiles_finish" : 3,
                             "set_when_profiles_finish" : 4,
                             "get_continue_on_failure" : 5,
                             "set_continue_on_failure" : 6,
                             "get_segments" : 7,
                             "get_profiles" : 8,
                             "apply_profiles" : 9,
                             "reset_profiles" : 10,
                             "apply_profile" : 11,
                             "reset_profile" : 12,
                             "apply_profile_by_name" : 13,
                             "reset_profile_by_name" : 14,
                             "get_reset_inner_targeters" : 15,
                             "set_reset_inner_targeters" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMissionControlSequenceTargetSequence)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMissionControlSequenceTargetSequence)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMissionControlSequenceTargetSequence, None)
    
    _get_action_metadata = { "name" : "action",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(TARGET_SEQ_ACTION),) }
    @property
    def action(self) -> "TARGET_SEQ_ACTION":
        """Whether to run the sequence nominally or using profiles."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_action_metadata)

    _set_action_metadata = { "name" : "action",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(TARGET_SEQ_ACTION),) }
    @action.setter
    def action(self, newVal:"TARGET_SEQ_ACTION") -> None:
        return self._intf.set_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._set_action_metadata, newVal)

    _get_when_profiles_finish_metadata = { "name" : "when_profiles_finish",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PROFILES_FINISH),) }
    @property
    def when_profiles_finish(self) -> "PROFILES_FINISH":
        """When Profiles Converge - the action to be carried out if targeting has converged."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_when_profiles_finish_metadata)

    _set_when_profiles_finish_metadata = { "name" : "when_profiles_finish",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(PROFILES_FINISH),) }
    @when_profiles_finish.setter
    def when_profiles_finish(self, newVal:"PROFILES_FINISH") -> None:
        return self._intf.set_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._set_when_profiles_finish_metadata, newVal)

    _get_continue_on_failure_metadata = { "name" : "continue_on_failure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def continue_on_failure(self) -> bool:
        """Continue if profiles don't converge - if true, the target sequence continues if a profile fails to converge; otherwise, the MCS will stop upon the failure of a search profile."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_continue_on_failure_metadata)

    _set_continue_on_failure_metadata = { "name" : "continue_on_failure",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @continue_on_failure.setter
    def continue_on_failure(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._set_continue_on_failure_metadata, newVal)

    _get_segments_metadata = { "name" : "segments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def segments(self) -> "MissionControlSequenceSegmentCollection":
        """Return the segments contained within the target sequence."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_segments_metadata)

    _get_profiles_metadata = { "name" : "profiles",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def profiles(self) -> "ProfileCollection":
        """Return the profiles used within the target sequence."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_profiles_metadata)

    _apply_profiles_metadata = { "name" : "apply_profiles",
            "arg_types" : (),
            "marshallers" : () }
    def apply_profiles(self) -> None:
        """Apply Changes - applies the current values of search profiles' controls and the changes specified by the segment configuration profiles to the segments within the target sequence."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._apply_profiles_metadata, )

    _reset_profiles_metadata = { "name" : "reset_profiles",
            "arg_types" : (),
            "marshallers" : () }
    def reset_profiles(self) -> None:
        """Reset - resets the controls of the search profiles to the segments' values."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._reset_profiles_metadata, )

    _apply_profile_metadata = { "name" : "apply_profile",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IProfile"),) }
    def apply_profile(self, profile:"IProfile") -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._apply_profile_metadata, profile)

    _reset_profile_metadata = { "name" : "reset_profile",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IProfile"),) }
    def reset_profile(self, profile:"IProfile") -> None:
        """Reset - resets the current values of specified profile."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._reset_profile_metadata, profile)

    _apply_profile_by_name_metadata = { "name" : "apply_profile_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def apply_profile_by_name(self, profile:str) -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._apply_profile_by_name_metadata, profile)

    _reset_profile_by_name_metadata = { "name" : "reset_profile_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def reset_profile_by_name(self, profile:str) -> None:
        """Reset - resets the current values of specified profile."""
        return self._intf.invoke(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._reset_profile_by_name_metadata, profile)

    _get_reset_inner_targeters_metadata = { "name" : "reset_inner_targeters",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def reset_inner_targeters(self) -> bool:
        """If true, inner target sequences will have their profiles reset before each run."""
        return self._intf.get_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._get_reset_inner_targeters_metadata)

    _set_reset_inner_targeters_metadata = { "name" : "reset_inner_targeters",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @reset_inner_targeters.setter
    def reset_inner_targeters(self, newVal:bool) -> None:
        return self._intf.set_property(IMissionControlSequenceTargetSequence._metadata, IMissionControlSequenceTargetSequence._set_reset_inner_targeters_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{703A8064-AB76-41FC-AADA-5134C30DB1C9}", IMissionControlSequenceTargetSequence)
agcls.AgTypeNameMap["IMissionControlSequenceTargetSequence"] = IMissionControlSequenceTargetSequence

class IDifferentialCorrectorControl(object):
    """Properties for control parameters of a differential corrector profile."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5F55DF8A-688A-48E6-A084-48E270AB766E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_final_value" : 4,
                             "get_last_update" : 5,
                             "get_parent_name" : 6,
                             "get_initial_value" : 7,
                             "get_perturbation" : 8,
                             "set_perturbation" : 9,
                             "get_correction" : 10,
                             "set_correction" : 11,
                             "get_tolerance" : 12,
                             "set_tolerance" : 13,
                             "get_max_step" : 14,
                             "set_max_step" : 15,
                             "get_scaling_method" : 16,
                             "set_scaling_method" : 17,
                             "get_scaling_value" : 18,
                             "set_scaling_value" : 19,
                             "get_dimension" : 20,
                             "get_use_custom_display_unit" : 21,
                             "set_use_custom_display_unit" : 22,
                             "get_custom_display_unit" : 23,
                             "set_custom_display_unit" : 24,
                             "get_values" : 25, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDifferentialCorrectorControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDifferentialCorrectorControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDifferentialCorrectorControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_name_metadata)

    _get_final_value_metadata = { "name" : "final_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def final_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_final_value_metadata)

    _get_last_update_metadata = { "name" : "last_update",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def last_update(self) -> typing.Any:
        """The amount by which the value of the independent variable changed during the last targeter run."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_last_update_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_parent_name_metadata)

    _get_initial_value_metadata = { "name" : "initial_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_value(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_initial_value_metadata)

    _get_perturbation_metadata = { "name" : "perturbation",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def perturbation(self) -> typing.Any:
        """The value to be used in calculating numerical derivatives. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_perturbation_metadata)

    _set_perturbation_metadata = { "name" : "perturbation",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @perturbation.setter
    def perturbation(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_perturbation_metadata, newVal)

    _get_correction_metadata = { "name" : "correction",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def correction(self) -> typing.Any:
        """The amount by which the nominal value of the parameter should be corrected to achieve the selected goals. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_correction_metadata)

    _set_correction_metadata = { "name" : "correction",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @correction.setter
    def correction(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_correction_metadata, newVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def tolerance(self) -> typing.Any:
        """The smallest update to the parameter to be made before the targeter stops. Only used if the convergence criteria is set to 'Either equality constraints or last control parameter updates within tolerance'. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @tolerance.setter
    def tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_tolerance_metadata, newVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def max_step(self) -> typing.Any:
        """The maximum increment to make to the value of the parameter in any one step. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @max_step.setter
    def max_step(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_max_step_metadata, newVal)

    _get_scaling_method_metadata = { "name" : "scaling_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENTIAL_CORRECTOR_SCALING_METHOD),) }
    @property
    def scaling_method(self) -> "DIFFERENTIAL_CORRECTOR_SCALING_METHOD":
        """Allow better numerical behavior if the parameters have very different magnitudes. The same scaling method is applied to all parameters."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_scaling_method_metadata)

    _set_scaling_method_metadata = { "name" : "scaling_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENTIAL_CORRECTOR_SCALING_METHOD),) }
    @scaling_method.setter
    def scaling_method(self, newVal:"DIFFERENTIAL_CORRECTOR_SCALING_METHOD") -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_scaling_method_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_scaling_value_metadata, newVal)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """Dimension of the constraint."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_dimension_metadata)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._set_custom_display_unit_metadata, newVal)

    _get_values_metadata = { "name" : "values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorControl._metadata, IDifferentialCorrectorControl._get_values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{5F55DF8A-688A-48E6-A084-48E270AB766E}", IDifferentialCorrectorControl)
agcls.AgTypeNameMap["IDifferentialCorrectorControl"] = IDifferentialCorrectorControl

class IDifferentialCorrectorResult(object):
    """Properties for equality constraints of a differential corrector profile."""
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F55E0916-7FAE-469B-AB4F-9D09C26BB554}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_desired_value" : 4,
                             "set_desired_value" : 5,
                             "get_current_value" : 6,
                             "get_parent_name" : 7,
                             "get_difference" : 8,
                             "get_tolerance" : 9,
                             "set_tolerance" : 10,
                             "get_scaling_method" : 11,
                             "set_scaling_method" : 12,
                             "get_scaling_value" : 13,
                             "set_scaling_value" : 14,
                             "get_weight" : 15,
                             "set_weight" : 16,
                             "get_dimension" : 17,
                             "get_use_custom_display_unit" : 18,
                             "set_use_custom_display_unit" : 19,
                             "get_custom_display_unit" : 20,
                             "set_custom_display_unit" : 21,
                             "get_values" : 22, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDifferentialCorrectorResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDifferentialCorrectorResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDifferentialCorrectorResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_name_metadata)

    _get_desired_value_metadata = { "name" : "desired_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def desired_value(self) -> typing.Any:
        """The desired value. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_desired_value_metadata)

    _set_desired_value_metadata = { "name" : "desired_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @desired_value.setter
    def desired_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_desired_value_metadata, newVal)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_current_value_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_parent_name_metadata)

    _get_difference_metadata = { "name" : "difference",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def difference(self) -> typing.Any:
        """The difference between the current and desired value for this dependent variable. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_difference_metadata)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired value before stopping. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @tolerance.setter
    def tolerance(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_tolerance_metadata, newVal)

    _get_scaling_method_metadata = { "name" : "scaling_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENTIAL_CORRECTOR_SCALING_METHOD),) }
    @property
    def scaling_method(self) -> "DIFFERENTIAL_CORRECTOR_SCALING_METHOD":
        """Allow better numerical behavior if the constraints have very different magnitudes. The same scaling method is applied to all constraints."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_scaling_method_metadata)

    _set_scaling_method_metadata = { "name" : "scaling_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENTIAL_CORRECTOR_SCALING_METHOD),) }
    @scaling_method.setter
    def scaling_method(self, newVal:"DIFFERENTIAL_CORRECTOR_SCALING_METHOD") -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_scaling_method_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_scaling_value_metadata, newVal)

    _get_weight_metadata = { "name" : "weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def weight(self) -> float:
        """The factor by which the constraint error is to be multiplied. This is used to emphasize/de-emphasize the importance of one constraint relative to the others. Dimensionless."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_weight_metadata)

    _set_weight_metadata = { "name" : "weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @weight.setter
    def weight(self, newVal:float) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_weight_metadata, newVal)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_dimension_metadata)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._set_custom_display_unit_metadata, newVal)

    _get_values_metadata = { "name" : "values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(IDifferentialCorrectorResult._metadata, IDifferentialCorrectorResult._get_values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{F55E0916-7FAE-469B-AB4F-9D09C26BB554}", IDifferentialCorrectorResult)
agcls.AgTypeNameMap["IDifferentialCorrectorResult"] = IDifferentialCorrectorResult

class ISearchPluginControl(object):
    """Properties of search plugin control parameters."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{71AB197F-79CB-438C-8F0A-A48FA0069865}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_control_name" : 1,
                             "get_current_value" : 2,
                             "get_parent_segment_name" : 3,
                             "get_initial_value" : 4,
                             "get_plugin_identifier" : 5,
                             "get_plugin_config" : 6,
                             "get_dimension" : 7,
                             "get_use_custom_display_unit" : 8,
                             "set_use_custom_display_unit" : 9,
                             "get_custom_display_unit" : 10,
                             "set_custom_display_unit" : 11,
                             "get_values" : 12,
                             "set_current_value" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISearchPluginControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISearchPluginControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISearchPluginControl, None)
    
    _get_control_name_metadata = { "name" : "control_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def control_name(self) -> str:
        """The name of the control parameter."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_control_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The current value of the control parameter."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_current_value_metadata)

    _get_parent_segment_name_metadata = { "name" : "parent_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_segment_name(self) -> str:
        """The parent segment of the control parameter."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_parent_segment_name_metadata)

    _get_initial_value_metadata = { "name" : "initial_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_value(self) -> typing.Any:
        """The initial value of the control parameter. Dimension depends on context."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_initial_value_metadata)

    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_plugin_identifier_metadata)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_plugin_config_metadata)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_dimension_metadata)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(ISearchPluginControl._metadata, ISearchPluginControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(ISearchPluginControl._metadata, ISearchPluginControl._set_custom_display_unit_metadata, newVal)

    _get_values_metadata = { "name" : "values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(ISearchPluginControl._metadata, ISearchPluginControl._get_values_metadata)

    _set_current_value_metadata = { "name" : "current_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @current_value.setter
    def current_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISearchPluginControl._metadata, ISearchPluginControl._set_current_value_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{71AB197F-79CB-438C-8F0A-A48FA0069865}", ISearchPluginControl)
agcls.AgTypeNameMap["ISearchPluginControl"] = ISearchPluginControl

class ISearchPluginResult(object):
    """Properties of search plugin equality constraints."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_result_name" : 1,
                             "get_current_value" : 2,
                             "get_parent_segment_name" : 3,
                             "get_plugin_identifier" : 4,
                             "get_plugin_config" : 5,
                             "get_dimension" : 6,
                             "get_use_custom_display_unit" : 7,
                             "set_use_custom_display_unit" : 8,
                             "get_custom_display_unit" : 9,
                             "set_custom_display_unit" : 10,
                             "get_values" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISearchPluginResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISearchPluginResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISearchPluginResult, None)
    
    _get_result_name_metadata = { "name" : "result_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def result_name(self) -> str:
        """The name of the equality constraint."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_result_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The current value of the result variable."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_current_value_metadata)

    _get_parent_segment_name_metadata = { "name" : "parent_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_segment_name(self) -> str:
        """The parent segment of the result variable."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_parent_segment_name_metadata)

    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_plugin_identifier_metadata)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_plugin_config_metadata)

    _get_dimension_metadata = { "name" : "dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def dimension(self) -> str:
        """The dimension of the values."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_dimension_metadata)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(ISearchPluginResult._metadata, ISearchPluginResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(ISearchPluginResult._metadata, ISearchPluginResult._set_custom_display_unit_metadata, newVal)

    _get_values_metadata = { "name" : "values",
            "arg_types" : (POINTER(agcom.LPSAFEARRAY),),
            "marshallers" : (agmarshall.LPSAFEARRAY_arg,) }
    @property
    def values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        return self._intf.get_property(ISearchPluginResult._metadata, ISearchPluginResult._get_values_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}", ISearchPluginResult)
agcls.AgTypeNameMap["ISearchPluginResult"] = ISearchPluginResult

class ISearchPluginResultCollection(object):
    """Properties for the list of search plugin equality constraints."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{48F5FEA5-9306-4115-B120-E479FD31A601}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISearchPluginResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISearchPluginResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISearchPluginResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ISearchPluginResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "SearchPluginResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ISearchPluginResultCollection._metadata, ISearchPluginResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Function to enumerate through the collection"""
        return self._intf.get_property(ISearchPluginResultCollection._metadata, ISearchPluginResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Size of the collection"""
        return self._intf.get_property(ISearchPluginResultCollection._metadata, ISearchPluginResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "SearchPluginResult":
        """Return the result specified by the object/result path."""
        return self._intf.invoke(ISearchPluginResultCollection._metadata, ISearchPluginResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{48F5FEA5-9306-4115-B120-E479FD31A601}", ISearchPluginResultCollection)
agcls.AgTypeNameMap["ISearchPluginResultCollection"] = ISearchPluginResultCollection

class ISearchPluginControlCollection(object):
    """Properties for the list of search plugin control parameters."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISearchPluginControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISearchPluginControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISearchPluginControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ISearchPluginControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "SearchPluginControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ISearchPluginControlCollection._metadata, ISearchPluginControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Property that allows you to enumerate through the collection."""
        return self._intf.get_property(ISearchPluginControlCollection._metadata, ISearchPluginControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ISearchPluginControlCollection._metadata, ISearchPluginControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "SearchPluginControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(ISearchPluginControlCollection._metadata, ISearchPluginControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}", ISearchPluginControlCollection)
agcls.AgTypeNameMap["ISearchPluginControlCollection"] = ISearchPluginControlCollection

class IDifferentialCorrectorControlCollection(object):
    """Properties for the list of control parameters for a differential corrector profile."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_control_by_paths" : 4,
                             "get_provide_runtime_type_info" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDifferentialCorrectorControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDifferentialCorrectorControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDifferentialCorrectorControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IDifferentialCorrectorControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "DifferentialCorrectorControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IDifferentialCorrectorControlCollection._metadata, IDifferentialCorrectorControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IDifferentialCorrectorControlCollection._metadata, IDifferentialCorrectorControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IDifferentialCorrectorControlCollection._metadata, IDifferentialCorrectorControlCollection._get_count_metadata)

    _get_control_by_paths_metadata = { "name" : "get_control_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_control_by_paths(self, objectPath:str, controlPath:str) -> "DifferentialCorrectorControl":
        """Return the control specified by the object/control path."""
        return self._intf.invoke(IDifferentialCorrectorControlCollection._metadata, IDifferentialCorrectorControlCollection._get_control_by_paths_metadata, objectPath, controlPath, out_arg())

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IDifferentialCorrectorControlCollection._metadata, IDifferentialCorrectorControlCollection._get_provide_runtime_type_info_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}", IDifferentialCorrectorControlCollection)
agcls.AgTypeNameMap["IDifferentialCorrectorControlCollection"] = IDifferentialCorrectorControlCollection

class IDifferentialCorrectorResultCollection(object):
    """Differential Corrector result collection."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_result_by_paths" : 4,
                             "get_provide_runtime_type_info" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDifferentialCorrectorResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDifferentialCorrectorResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDifferentialCorrectorResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IDifferentialCorrectorResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "DifferentialCorrectorResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IDifferentialCorrectorResultCollection._metadata, IDifferentialCorrectorResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IDifferentialCorrectorResultCollection._metadata, IDifferentialCorrectorResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IDifferentialCorrectorResultCollection._metadata, IDifferentialCorrectorResultCollection._get_count_metadata)

    _get_result_by_paths_metadata = { "name" : "get_result_by_paths",
            "arg_types" : (agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_result_by_paths(self, objectPath:str, resultPath:str) -> "DifferentialCorrectorResult":
        """Return the result specified by the object/result path."""
        return self._intf.invoke(IDifferentialCorrectorResultCollection._metadata, IDifferentialCorrectorResultCollection._get_result_by_paths_metadata, objectPath, resultPath, out_arg())

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(IDifferentialCorrectorResultCollection._metadata, IDifferentialCorrectorResultCollection._get_provide_runtime_type_info_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}", IDifferentialCorrectorResultCollection)
agcls.AgTypeNameMap["IDifferentialCorrectorResultCollection"] = IDifferentialCorrectorResultCollection

class ITargeterGraphActiveControl(object):
    """Properties for targeter graph active control."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{341791C5-446F-4812-BDE8-702EE9D3D980}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "get_parent_name" : 2,
                             "get_show_graph_value" : 3,
                             "set_show_graph_value" : 4,
                             "get_line_color" : 5,
                             "set_line_color" : 6,
                             "get_point_style" : 7,
                             "set_point_style" : 8,
                             "get_y_axis" : 9,
                             "set_y_axis" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraphActiveControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraphActiveControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraphActiveControl, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the active control."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The segment or component to which the element belongs."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_parent_name_metadata)

    _get_show_graph_value_metadata = { "name" : "show_graph_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_graph_value(self) -> bool:
        """Show the value."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_show_graph_value_metadata)

    _set_show_graph_value_metadata = { "name" : "show_graph_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_graph_value.setter
    def show_graph_value(self, inVal:bool) -> None:
        """Show the value."""
        return self._intf.set_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._set_show_graph_value_metadata, inVal)

    _get_line_color_metadata = { "name" : "line_color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def line_color(self) -> agcolor.Color:
        """Line Color."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_line_color_metadata)

    _set_line_color_metadata = { "name" : "line_color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @line_color.setter
    def line_color(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        return self._intf.set_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._set_line_color_metadata, inVal)

    _get_point_style_metadata = { "name" : "point_style",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def point_style(self) -> str:
        """Point Style."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_point_style_metadata)

    _set_point_style_metadata = { "name" : "point_style",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @point_style.setter
    def point_style(self, inVal:str) -> None:
        """Point Style."""
        return self._intf.set_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._set_point_style_metadata, inVal)

    _get_y_axis_metadata = { "name" : "y_axis",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def y_axis(self) -> str:
        """Select whether to display the control's value range on the left or right side of the graph."""
        return self._intf.get_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._get_y_axis_metadata)

    _set_y_axis_metadata = { "name" : "y_axis",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @y_axis.setter
    def y_axis(self, inVal:str) -> None:
        """Select whether to display the control's value range on the left or right side of the graph."""
        return self._intf.set_property(ITargeterGraphActiveControl._metadata, ITargeterGraphActiveControl._set_y_axis_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{341791C5-446F-4812-BDE8-702EE9D3D980}", ITargeterGraphActiveControl)
agcls.AgTypeNameMap["ITargeterGraphActiveControl"] = ITargeterGraphActiveControl

class ITargeterGraphResult(object):
    """Properties for targeter graph result."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{16985A6D-61AE-467F-9A66-255556F9C8E1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "get_parent_name" : 2,
                             "get_show_desired_value" : 3,
                             "set_show_desired_value" : 4,
                             "get_line_color" : 5,
                             "set_line_color" : 6,
                             "get_point_style" : 7,
                             "set_point_style" : 8,
                             "get_y_axis" : 9,
                             "set_y_axis" : 10,
                             "get_graph_option" : 11,
                             "set_graph_option" : 12,
                             "get_show_tolerance_band" : 13,
                             "set_show_tolerance_band" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraphResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraphResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraphResult, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the result."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The segment or component for which this result has been selected."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_parent_name_metadata)

    _get_show_desired_value_metadata = { "name" : "show_desired_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_desired_value(self) -> bool:
        """Show the desired value."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_show_desired_value_metadata)

    _set_show_desired_value_metadata = { "name" : "show_desired_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_desired_value.setter
    def show_desired_value(self, inVal:bool) -> None:
        """Show the desired value."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_show_desired_value_metadata, inVal)

    _get_line_color_metadata = { "name" : "line_color",
            "arg_types" : (POINTER(agcom.OLE_COLOR),),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @property
    def line_color(self) -> agcolor.Color:
        """Line Color."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_line_color_metadata)

    _set_line_color_metadata = { "name" : "line_color",
            "arg_types" : (agcom.OLE_COLOR,),
            "marshallers" : (agmarshall.OLE_COLOR_arg,) }
    @line_color.setter
    def line_color(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_line_color_metadata, inVal)

    _get_point_style_metadata = { "name" : "point_style",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def point_style(self) -> str:
        """Point Style."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_point_style_metadata)

    _set_point_style_metadata = { "name" : "point_style",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @point_style.setter
    def point_style(self, inVal:str) -> None:
        """Point Style."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_point_style_metadata, inVal)

    _get_y_axis_metadata = { "name" : "y_axis",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def y_axis(self) -> str:
        """Select whether to display the result's value range on the left or right side of the graph."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_y_axis_metadata)

    _set_y_axis_metadata = { "name" : "y_axis",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @y_axis.setter
    def y_axis(self, inVal:str) -> None:
        """Select whether to display the result's value range on the left or right side of the graph."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_y_axis_metadata, inVal)

    _get_graph_option_metadata = { "name" : "graph_option",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAPH_OPTION),) }
    @property
    def graph_option(self) -> "GRAPH_OPTION":
        """Graph option."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_graph_option_metadata)

    _set_graph_option_metadata = { "name" : "graph_option",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAPH_OPTION),) }
    @graph_option.setter
    def graph_option(self, inVal:"GRAPH_OPTION") -> None:
        """Graph option."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_graph_option_metadata, inVal)

    _get_show_tolerance_band_metadata = { "name" : "show_tolerance_band",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_tolerance_band(self) -> bool:
        """Show the tolerance band."""
        return self._intf.get_property(ITargeterGraphResult._metadata, ITargeterGraphResult._get_show_tolerance_band_metadata)

    _set_show_tolerance_band_metadata = { "name" : "show_tolerance_band",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_tolerance_band.setter
    def show_tolerance_band(self, inVal:bool) -> None:
        """Show the tolerance band."""
        return self._intf.set_property(ITargeterGraphResult._metadata, ITargeterGraphResult._set_show_tolerance_band_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{16985A6D-61AE-467F-9A66-255556F9C8E1}", ITargeterGraphResult)
agcls.AgTypeNameMap["ITargeterGraphResult"] = ITargeterGraphResult

class ITargeterGraphActiveControlCollection(object):
    """Targeter graph active controls."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{57FE9616-8C44-4F5B-8B31-F005C0B678A2}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_provide_runtime_type_info" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraphActiveControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraphActiveControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraphActiveControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ITargeterGraphActiveControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "TargeterGraphActiveControl":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ITargeterGraphActiveControlCollection._metadata, ITargeterGraphActiveControlCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ITargeterGraphActiveControlCollection._metadata, ITargeterGraphActiveControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ITargeterGraphActiveControlCollection._metadata, ITargeterGraphActiveControlCollection._get_count_metadata)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(ITargeterGraphActiveControlCollection._metadata, ITargeterGraphActiveControlCollection._get_provide_runtime_type_info_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{57FE9616-8C44-4F5B-8B31-F005C0B678A2}", ITargeterGraphActiveControlCollection)
agcls.AgTypeNameMap["ITargeterGraphActiveControlCollection"] = ITargeterGraphActiveControlCollection

class ITargeterGraphResultCollection(object):
    """Targeter graph results."""
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_provide_runtime_type_info" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraphResultCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraphResultCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraphResultCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ITargeterGraphResult":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.LONG_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, index:int) -> "TargeterGraphResult":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ITargeterGraphResultCollection._metadata, ITargeterGraphResultCollection._item_metadata, index, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ITargeterGraphResultCollection._metadata, ITargeterGraphResultCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ITargeterGraphResultCollection._metadata, ITargeterGraphResultCollection._get_count_metadata)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(ITargeterGraphResultCollection._metadata, ITargeterGraphResultCollection._get_provide_runtime_type_info_metadata)

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}", ITargeterGraphResultCollection)
agcls.AgTypeNameMap["ITargeterGraphResultCollection"] = ITargeterGraphResultCollection

class ITargeterGraph(object):
    """Properties for a Targeter Graph."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{418A2587-7803-4746-9A49-1B1A87BB906A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "set_name" : 2,
                             "get_generate_on_run" : 3,
                             "set_generate_on_run" : 4,
                             "get_user_comment" : 5,
                             "set_user_comment" : 6,
                             "get_show_label_iterations" : 7,
                             "set_show_label_iterations" : 8,
                             "get_show_desired_value" : 9,
                             "set_show_desired_value" : 10,
                             "get_show_tolerance_band" : 11,
                             "set_show_tolerance_band" : 12,
                             "get_independent_variable" : 13,
                             "set_independent_variable" : 14,
                             "get_active_controls" : 15,
                             "get_results" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraph)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraph)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraph, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the graph."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, inVal:str) -> None:
        """The name of the graph."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_name_metadata, inVal)

    _get_generate_on_run_metadata = { "name" : "generate_on_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def generate_on_run(self) -> bool:
        """Generate the graph while MCS is being run."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_generate_on_run_metadata)

    _set_generate_on_run_metadata = { "name" : "generate_on_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @generate_on_run.setter
    def generate_on_run(self, inVal:bool) -> None:
        """Generate the graph while MCS is being run."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_generate_on_run_metadata, inVal)

    _get_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_comment(self) -> str:
        """User Comment."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_user_comment_metadata)

    _set_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_comment.setter
    def user_comment(self, inVal:str) -> None:
        """User Comment."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_user_comment_metadata, inVal)

    _get_show_label_iterations_metadata = { "name" : "show_label_iterations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_label_iterations(self) -> bool:
        """Label each of the points on the graph labeled according to its iteration number."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_show_label_iterations_metadata)

    _set_show_label_iterations_metadata = { "name" : "show_label_iterations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_label_iterations.setter
    def show_label_iterations(self, inVal:bool) -> None:
        """Label each of the points on the graph labeled according to its iteration number."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_show_label_iterations_metadata, inVal)

    _get_show_desired_value_metadata = { "name" : "show_desired_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_desired_value(self) -> bool:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_show_desired_value_metadata)

    _set_show_desired_value_metadata = { "name" : "show_desired_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_desired_value.setter
    def show_desired_value(self, inVal:bool) -> None:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_show_desired_value_metadata, inVal)

    _get_show_tolerance_band_metadata = { "name" : "show_tolerance_band",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def show_tolerance_band(self) -> bool:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_show_tolerance_band_metadata)

    _set_show_tolerance_band_metadata = { "name" : "show_tolerance_band",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @show_tolerance_band.setter
    def show_tolerance_band(self, inVal:bool) -> None:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_show_tolerance_band_metadata, inVal)

    _get_independent_variable_metadata = { "name" : "independent_variable",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def independent_variable(self) -> str:
        """Select the graph's X axis."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_independent_variable_metadata)

    _set_independent_variable_metadata = { "name" : "independent_variable",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @independent_variable.setter
    def independent_variable(self, inVal:str) -> None:
        """Select the graph's X axis."""
        return self._intf.set_property(ITargeterGraph._metadata, ITargeterGraph._set_independent_variable_metadata, inVal)

    _get_active_controls_metadata = { "name" : "active_controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def active_controls(self) -> "TargeterGraphActiveControlCollection":
        """Active Controls."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_active_controls_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "TargeterGraphResultCollection":
        """Results."""
        return self._intf.get_property(ITargeterGraph._metadata, ITargeterGraph._get_results_metadata)


agcls.AgClassCatalog.add_catalog_entry("{418A2587-7803-4746-9A49-1B1A87BB906A}", ITargeterGraph)
agcls.AgTypeNameMap["ITargeterGraph"] = ITargeterGraph

class ITargeterGraphCollection(object):
    """The list of User Variables accessed through the Driver."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "add_graph" : 4,
                             "remove_graph" : 5,
                             "get_provide_runtime_type_info" : 6,
                             "cut" : 7,
                             "paste" : 8,
                             "insert_copy" : 9,
                             "get_item_by_index" : 10,
                             "get_item_by_name" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITargeterGraphCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITargeterGraphCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITargeterGraphCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "ITargeterGraph":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "TargeterGraph":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ITargeterGraphCollection._metadata, ITargeterGraphCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ITargeterGraphCollection._metadata, ITargeterGraphCollection._get_count_metadata)

    _add_graph_metadata = { "name" : "add_graph",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def add_graph(self) -> "TargeterGraph":
        """Add a new targeter graph."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._add_graph_metadata, out_arg())

    _remove_graph_metadata = { "name" : "remove_graph",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove_graph(self, indexOrName:typing.Any) -> None:
        """Remove a targeter graph."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._remove_graph_metadata, indexOrName)

    _get_provide_runtime_type_info_metadata = { "name" : "provide_runtime_type_info",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def provide_runtime_type_info(self) -> "IRuntimeTypeInfo":
        """Return the RuntimeTypeInfo interface to access properties at runtime."""
        return self._intf.get_property(ITargeterGraphCollection._metadata, ITargeterGraphCollection._get_provide_runtime_type_info_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy a targeter graph to the clipboard and removes the targeter graph from the list."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "TargeterGraph":
        """Pastes a targeter graph from the clipboard into the list."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("ITargeterGraph"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, graph:"ITargeterGraph") -> "TargeterGraph":
        """Copy a targeter graph and inserts the copy into the list."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._insert_copy_metadata, graph, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "TargeterGraph":
        """Retrieve a targeter graph from the collection by index."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "TargeterGraph":
        """Retrieve a targeter graph from the collection by name."""
        return self._intf.invoke(ITargeterGraphCollection._metadata, ITargeterGraphCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}", ITargeterGraphCollection)
agcls.AgTypeNameMap["ITargeterGraphCollection"] = ITargeterGraphCollection

class IProfileSearchPlugin(IProfile):
    """Properties of a plugin search profile."""
    _num_methods = 9
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{9380509D-A189-453D-B1EF-D1D8E34420FF}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_controls" : 1,
                             "get_results" : 2,
                             "get_plugin_config" : 3,
                             "get_plugin_identifier" : 4,
                             "get_scripting_tool" : 5,
                             "get_reset_controls_before_run" : 6,
                             "set_reset_controls_before_run" : 7,
                             "get_targeter_graphs" : 8,
                             "get_log_file" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileSearchPlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileSearchPlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileSearchPlugin, IProfile)
    
    _get_controls_metadata = { "name" : "controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def controls(self) -> "SearchPluginControlCollection":
        """The selected control parameters."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_controls_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "SearchPluginResultCollection":
        """The selected equality constraints."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_results_metadata)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_plugin_config_metadata)

    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin identifier."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_plugin_identifier_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_scripting_tool_metadata)

    _get_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def reset_controls_before_run(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_reset_controls_before_run_metadata)

    _set_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @reset_controls_before_run.setter
    def reset_controls_before_run(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._set_reset_controls_before_run_metadata, newVal)

    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_targeter_graphs_metadata)

    _get_log_file_metadata = { "name" : "log_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def log_file(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IProfileSearchPlugin._metadata, IProfileSearchPlugin._get_log_file_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9380509D-A189-453D-B1EF-D1D8E34420FF}", IProfileSearchPlugin)
agcls.AgTypeNameMap["IProfileSearchPlugin"] = IProfileSearchPlugin

class IProfileDifferentialCorrector(IProfile):
    """Properties for a Differential Corrector profile."""
    _num_methods = 39
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{E131F674-A7BA-408C-9109-BF50D16BE4F0}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_control_parameters" : 1,
                             "get_results" : 2,
                             "get_max_iterations" : 3,
                             "set_max_iterations" : 4,
                             "get_enable_display_status" : 5,
                             "set_enable_display_status" : 6,
                             "get_convergence_criteria" : 7,
                             "set_convergence_criteria" : 8,
                             "get_enable_line_search" : 9,
                             "set_enable_line_search" : 10,
                             "get_max_line_search_iterations" : 11,
                             "set_max_line_search_iterations" : 12,
                             "get_line_search_lower_bound" : 13,
                             "set_line_search_lower_bound" : 14,
                             "get_line_search_upper_bound" : 15,
                             "set_line_search_upper_bound" : 16,
                             "get_line_search_tolerance" : 17,
                             "set_line_search_tolerance" : 18,
                             "get_enable_homotopy" : 19,
                             "set_enable_homotopy" : 20,
                             "get_homotopy_steps" : 21,
                             "set_homotopy_steps" : 22,
                             "get_derivative_calc_method" : 23,
                             "set_derivative_calc_method" : 24,
                             "get_clear_corrections_before_run" : 25,
                             "set_clear_corrections_before_run" : 26,
                             "get_enable_b_plane_nominal" : 27,
                             "set_enable_b_plane_nominal" : 28,
                             "get_enable_b_plane_perturbations" : 29,
                             "set_enable_b_plane_perturbations" : 30,
                             "get_draw_perturbation" : 31,
                             "set_draw_perturbation" : 32,
                             "get_scripting_tool" : 33,
                             "get_root_finding_algorithm" : 34,
                             "set_root_finding_algorithm" : 35,
                             "get_num_iterations" : 36,
                             "get_targeter_graphs" : 37,
                             "get_stop_on_limit_cycle_detection" : 38,
                             "set_stop_on_limit_cycle_detection" : 39, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileDifferentialCorrector)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileDifferentialCorrector)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileDifferentialCorrector, IProfile)
    
    _get_control_parameters_metadata = { "name" : "control_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def control_parameters(self) -> "DifferentialCorrectorControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_control_parameters_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "DifferentialCorrectorResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_results_metadata)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_max_iterations_metadata, newVal)

    _get_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_display_status(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_enable_display_status_metadata)

    _set_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_display_status.setter
    def enable_display_status(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_enable_display_status_metadata, newVal)

    _get_convergence_criteria_metadata = { "name" : "convergence_criteria",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CONVERGENCE_CRITERIA),) }
    @property
    def convergence_criteria(self) -> "CONVERGENCE_CRITERIA":
        """The convergence criteria."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_convergence_criteria_metadata)

    _set_convergence_criteria_metadata = { "name" : "convergence_criteria",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONVERGENCE_CRITERIA),) }
    @convergence_criteria.setter
    def convergence_criteria(self, newVal:"CONVERGENCE_CRITERIA") -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_convergence_criteria_metadata, newVal)

    _get_enable_line_search_metadata = { "name" : "enable_line_search",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_line_search(self) -> bool:
        """If true, the profile will perform a line search."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_enable_line_search_metadata)

    _set_enable_line_search_metadata = { "name" : "enable_line_search",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_line_search.setter
    def enable_line_search(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_enable_line_search_metadata, newVal)

    _get_max_line_search_iterations_metadata = { "name" : "max_line_search_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_line_search_iterations(self) -> int:
        """The number of line search iterations to try before stopping. Dimensionless."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_max_line_search_iterations_metadata)

    _set_max_line_search_iterations_metadata = { "name" : "max_line_search_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_line_search_iterations.setter
    def max_line_search_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_max_line_search_iterations_metadata, newVal)

    _get_line_search_lower_bound_metadata = { "name" : "line_search_lower_bound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def line_search_lower_bound(self) -> float:
        """The low boundary for the line search. Dimensionless."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_line_search_lower_bound_metadata)

    _set_line_search_lower_bound_metadata = { "name" : "line_search_lower_bound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @line_search_lower_bound.setter
    def line_search_lower_bound(self, newVal:float) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_line_search_lower_bound_metadata, newVal)

    _get_line_search_upper_bound_metadata = { "name" : "line_search_upper_bound",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def line_search_upper_bound(self) -> float:
        """The high boundary for the line search. Dimensionless."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_line_search_upper_bound_metadata)

    _set_line_search_upper_bound_metadata = { "name" : "line_search_upper_bound",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @line_search_upper_bound.setter
    def line_search_upper_bound(self, newVal:float) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_line_search_upper_bound_metadata, newVal)

    _get_line_search_tolerance_metadata = { "name" : "line_search_tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def line_search_tolerance(self) -> float:
        """The tolerance for the line search. Dimensionless."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_line_search_tolerance_metadata)

    _set_line_search_tolerance_metadata = { "name" : "line_search_tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @line_search_tolerance.setter
    def line_search_tolerance(self, newVal:float) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_line_search_tolerance_metadata, newVal)

    _get_enable_homotopy_metadata = { "name" : "enable_homotopy",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_homotopy(self) -> bool:
        """If true, the profile will divide the problem into steps to solve it."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_enable_homotopy_metadata)

    _set_enable_homotopy_metadata = { "name" : "enable_homotopy",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_homotopy.setter
    def enable_homotopy(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_enable_homotopy_metadata, newVal)

    _get_homotopy_steps_metadata = { "name" : "homotopy_steps",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def homotopy_steps(self) -> int:
        """The number of steps to divide a problem into for a homotopic calculation. Dimensionless - ."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_homotopy_steps_metadata)

    _set_homotopy_steps_metadata = { "name" : "homotopy_steps",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @homotopy_steps.setter
    def homotopy_steps(self, newVal:int) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_homotopy_steps_metadata, newVal)

    _get_derivative_calc_method_metadata = { "name" : "derivative_calc_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DERIVE_CALC_METHOD),) }
    @property
    def derivative_calc_method(self) -> "DERIVE_CALC_METHOD":
        """The derivative calculation method."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_derivative_calc_method_metadata)

    _set_derivative_calc_method_metadata = { "name" : "derivative_calc_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DERIVE_CALC_METHOD),) }
    @derivative_calc_method.setter
    def derivative_calc_method(self, newVal:"DERIVE_CALC_METHOD") -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_derivative_calc_method_metadata, newVal)

    _get_clear_corrections_before_run_metadata = { "name" : "clear_corrections_before_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def clear_corrections_before_run(self) -> bool:
        """Clear Corrections Before Each Run - if true, the differential corrector is automatically reset each time that it is run, discarding information that was computed the last time it was run."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_clear_corrections_before_run_metadata)

    _set_clear_corrections_before_run_metadata = { "name" : "clear_corrections_before_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @clear_corrections_before_run.setter
    def clear_corrections_before_run(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_clear_corrections_before_run_metadata, newVal)

    _get_enable_b_plane_nominal_metadata = { "name" : "enable_b_plane_nominal",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_b_plane_nominal(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for the nominal run of each iteration during the targeting process."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_enable_b_plane_nominal_metadata)

    _set_enable_b_plane_nominal_metadata = { "name" : "enable_b_plane_nominal",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_b_plane_nominal.setter
    def enable_b_plane_nominal(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_enable_b_plane_nominal_metadata, newVal)

    _get_enable_b_plane_perturbations_metadata = { "name" : "enable_b_plane_perturbations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_b_plane_perturbations(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for both of the perturbations of each iteration during the targeting process."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_enable_b_plane_perturbations_metadata)

    _set_enable_b_plane_perturbations_metadata = { "name" : "enable_b_plane_perturbations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_b_plane_perturbations.setter
    def enable_b_plane_perturbations(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_enable_b_plane_perturbations_metadata, newVal)

    _get_draw_perturbation_metadata = { "name" : "draw_perturbation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAW_PERTURBATION),) }
    @property
    def draw_perturbation(self) -> "DRAW_PERTURBATION":
        """Define the display of perturbations in the 2D and 3D Graphics windows, if you have set Astrogator to draw while calculating."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_draw_perturbation_metadata)

    _set_draw_perturbation_metadata = { "name" : "draw_perturbation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAW_PERTURBATION),) }
    @draw_perturbation.setter
    def draw_perturbation(self, newVal:"DRAW_PERTURBATION") -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_draw_perturbation_metadata, newVal)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_scripting_tool_metadata)

    _get_root_finding_algorithm_metadata = { "name" : "root_finding_algorithm",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ROOT_FINDING_ALGORITHM),) }
    @property
    def root_finding_algorithm(self) -> "ROOT_FINDING_ALGORITHM":
        """The root-finding algorithm to use."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_root_finding_algorithm_metadata)

    _set_root_finding_algorithm_metadata = { "name" : "root_finding_algorithm",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ROOT_FINDING_ALGORITHM),) }
    @root_finding_algorithm.setter
    def root_finding_algorithm(self, pVal:"ROOT_FINDING_ALGORITHM") -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_root_finding_algorithm_metadata, pVal)

    _get_num_iterations_metadata = { "name" : "num_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def num_iterations(self) -> int:
        """The number of iterations of the last run"""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_num_iterations_metadata)

    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_targeter_graphs_metadata)

    _get_stop_on_limit_cycle_detection_metadata = { "name" : "stop_on_limit_cycle_detection",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def stop_on_limit_cycle_detection(self) -> bool:
        """If true, Astrogator will stop targeting if a limit cycle is detected."""
        return self._intf.get_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._get_stop_on_limit_cycle_detection_metadata)

    _set_stop_on_limit_cycle_detection_metadata = { "name" : "stop_on_limit_cycle_detection",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @stop_on_limit_cycle_detection.setter
    def stop_on_limit_cycle_detection(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileDifferentialCorrector._metadata, IProfileDifferentialCorrector._set_stop_on_limit_cycle_detection_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E131F674-A7BA-408C-9109-BF50D16BE4F0}", IProfileDifferentialCorrector)
agcls.AgTypeNameMap["IProfileDifferentialCorrector"] = IProfileDifferentialCorrector

class IProfileChangeManeuverType(IProfile):
    """Properties for a Change Maneuver Type profile."""
    _num_methods = 4
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{17F50A61-1E84-4060-A86A-93434A5522D5}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment" : 1,
                             "set_segment" : 2,
                             "get_maneuver_type" : 3,
                             "set_maneuver_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileChangeManeuverType)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileChangeManeuverType)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileChangeManeuverType, IProfile)
    
    _get_segment_metadata = { "name" : "segment",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def segment(self) -> "MissionControlSequenceManeuver":
        """The targeted maneuver segment."""
        return self._intf.get_property(IProfileChangeManeuverType._metadata, IProfileChangeManeuverType._get_segment_metadata)

    _set_segment_metadata = { "name" : "segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceManeuver"),) }
    @segment.setter
    def segment(self, pSegment:"IMissionControlSequenceManeuver") -> None:
        return self._intf.set_property(IProfileChangeManeuverType._metadata, IProfileChangeManeuverType._set_segment_metadata, pSegment)

    _get_maneuver_type_metadata = { "name" : "maneuver_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MANEUVER_TYPE),) }
    @property
    def maneuver_type(self) -> "MANEUVER_TYPE":
        """The new maneuver type for the targeted segment."""
        return self._intf.get_property(IProfileChangeManeuverType._metadata, IProfileChangeManeuverType._get_maneuver_type_metadata)

    _set_maneuver_type_metadata = { "name" : "maneuver_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MANEUVER_TYPE),) }
    @maneuver_type.setter
    def maneuver_type(self, newVal:"MANEUVER_TYPE") -> None:
        return self._intf.set_property(IProfileChangeManeuverType._metadata, IProfileChangeManeuverType._set_maneuver_type_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{17F50A61-1E84-4060-A86A-93434A5522D5}", IProfileChangeManeuverType)
agcls.AgTypeNameMap["IProfileChangeManeuverType"] = IProfileChangeManeuverType

class IProfileScriptingTool(IProfile):
    """Properties for a Scripting Tool profile."""
    _num_methods = 10
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_segment_properties" : 3,
                             "get_calc_objects" : 4,
                             "get_parameters" : 5,
                             "get_language_type" : 6,
                             "set_language_type" : 7,
                             "script_text" : 8,
                             "copy_to_clipboard" : 9,
                             "paste_from_clipboard" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileScriptingTool)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileScriptingTool)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileScriptingTool, IProfile)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the scripting tool will be used."""
        return self._intf.get_property(IProfileScriptingTool._metadata, IProfileScriptingTool._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, inVal:bool) -> None:
        return self._intf.set_property(IProfileScriptingTool._metadata, IProfileScriptingTool._set_enable_metadata, inVal)

    _get_segment_properties_metadata = { "name" : "segment_properties",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def segment_properties(self) -> "ScriptingSegmentCollection":
        """Return the collection of the segment properties."""
        return self._intf.get_property(IProfileScriptingTool._metadata, IProfileScriptingTool._get_segment_properties_metadata)

    _get_calc_objects_metadata = { "name" : "calc_objects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_objects(self) -> "ScriptingCalcObjectCollection":
        """Return the collection of the calc objects."""
        return self._intf.get_property(IProfileScriptingTool._metadata, IProfileScriptingTool._get_calc_objects_metadata)

    _get_parameters_metadata = { "name" : "parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def parameters(self) -> "ScriptingParameterCollection":
        """Return the collection of parameters."""
        return self._intf.get_property(IProfileScriptingTool._metadata, IProfileScriptingTool._get_parameters_metadata)

    _get_language_type_metadata = { "name" : "language_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LANGUAGE),) }
    @property
    def language_type(self) -> "LANGUAGE":
        """The scripting language being used."""
        return self._intf.get_property(IProfileScriptingTool._metadata, IProfileScriptingTool._get_language_type_metadata)

    _set_language_type_metadata = { "name" : "language_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LANGUAGE),) }
    @language_type.setter
    def language_type(self, inVal:"LANGUAGE") -> None:
        return self._intf.set_property(IProfileScriptingTool._metadata, IProfileScriptingTool._set_language_type_metadata, inVal)

    _script_text_metadata = { "name" : "script_text",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def script_text(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        return self._intf.invoke(IProfileScriptingTool._metadata, IProfileScriptingTool._script_text_metadata, script)

    _copy_to_clipboard_metadata = { "name" : "copy_to_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def copy_to_clipboard(self) -> None:
        """Copy entire scripting tool to clipboard."""
        return self._intf.invoke(IProfileScriptingTool._metadata, IProfileScriptingTool._copy_to_clipboard_metadata, )

    _paste_from_clipboard_metadata = { "name" : "paste_from_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def paste_from_clipboard(self) -> None:
        """Replace entire scripting tool with scripting tool in clipboard."""
        return self._intf.invoke(IProfileScriptingTool._metadata, IProfileScriptingTool._paste_from_clipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}", IProfileScriptingTool)
agcls.AgTypeNameMap["IProfileScriptingTool"] = IProfileScriptingTool

class IProfileChangeReturnSegment(IProfile):
    """Properties for a Change Return Segment profile."""
    _num_methods = 5
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{B65E05D2-1B1C-414C-A57E-A93333A5D57C}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment_name" : 1,
                             "set_segment_name" : 2,
                             "set_segment" : 3,
                             "get_state" : 4,
                             "set_state" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileChangeReturnSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileChangeReturnSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileChangeReturnSegment, IProfile)
    
    _get_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def segment_name(self) -> str:
        """The targeted return segment."""
        return self._intf.get_property(IProfileChangeReturnSegment._metadata, IProfileChangeReturnSegment._get_segment_name_metadata)

    _set_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @segment_name.setter
    def segment_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileChangeReturnSegment._metadata, IProfileChangeReturnSegment._set_segment_name_metadata, newVal)

    _set_segment_metadata = { "name" : "set_segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceReturn"),) }
    def set_segment(self, pVAMCSReturn:"IMissionControlSequenceReturn") -> None:
        """Set the return segment to target."""
        return self._intf.invoke(IProfileChangeReturnSegment._metadata, IProfileChangeReturnSegment._set_segment_metadata, pVAMCSReturn)

    _get_state_metadata = { "name" : "state",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(RETURN_CONTROL),) }
    @property
    def state(self) -> "RETURN_CONTROL":
        """The new state for the targeted return segment."""
        return self._intf.get_property(IProfileChangeReturnSegment._metadata, IProfileChangeReturnSegment._get_state_metadata)

    _set_state_metadata = { "name" : "state",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(RETURN_CONTROL),) }
    @state.setter
    def state(self, newVal:"RETURN_CONTROL") -> None:
        return self._intf.set_property(IProfileChangeReturnSegment._metadata, IProfileChangeReturnSegment._set_state_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B65E05D2-1B1C-414C-A57E-A93333A5D57C}", IProfileChangeReturnSegment)
agcls.AgTypeNameMap["IProfileChangeReturnSegment"] = IProfileChangeReturnSegment

class IProfileChangePropagator(IProfile):
    """Properties for a Change Propagator profile."""
    _num_methods = 5
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{FB6704EC-C787-4051-BE39-1584C5CAD0F6}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment_name" : 1,
                             "set_segment_name" : 2,
                             "set_segment" : 3,
                             "get_propagator_name" : 4,
                             "set_propagator_name" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileChangePropagator)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileChangePropagator)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileChangePropagator, IProfile)
    
    _get_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def segment_name(self) -> str:
        """The name of the profile."""
        return self._intf.get_property(IProfileChangePropagator._metadata, IProfileChangePropagator._get_segment_name_metadata)

    _set_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @segment_name.setter
    def segment_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileChangePropagator._metadata, IProfileChangePropagator._set_segment_name_metadata, newVal)

    _set_segment_metadata = { "name" : "set_segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceSegment"),) }
    def set_segment(self, pVAMCSSegment:"IMissionControlSequenceSegment") -> None:
        """The targeted segment."""
        return self._intf.invoke(IProfileChangePropagator._metadata, IProfileChangePropagator._set_segment_metadata, pVAMCSSegment)

    _get_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def propagator_name(self) -> str:
        """The new propagator's name."""
        return self._intf.get_property(IProfileChangePropagator._metadata, IProfileChangePropagator._get_propagator_name_metadata)

    _set_propagator_name_metadata = { "name" : "propagator_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @propagator_name.setter
    def propagator_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileChangePropagator._metadata, IProfileChangePropagator._set_propagator_name_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FB6704EC-C787-4051-BE39-1584C5CAD0F6}", IProfileChangePropagator)
agcls.AgTypeNameMap["IProfileChangePropagator"] = IProfileChangePropagator

class IProfileChangeStopSegment(IProfile):
    """Properties for a Change Stop Segment profile."""
    _num_methods = 5
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{1B9A0E28-8C19-448D-9CD1-AB10B492C767}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment_name" : 1,
                             "set_segment_name" : 2,
                             "set_segment" : 3,
                             "get_state" : 4,
                             "set_state" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileChangeStopSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileChangeStopSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileChangeStopSegment, IProfile)
    
    _get_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def segment_name(self) -> str:
        """The targeted stop segment."""
        return self._intf.get_property(IProfileChangeStopSegment._metadata, IProfileChangeStopSegment._get_segment_name_metadata)

    _set_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @segment_name.setter
    def segment_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileChangeStopSegment._metadata, IProfileChangeStopSegment._set_segment_name_metadata, newVal)

    _set_segment_metadata = { "name" : "set_segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceStop"),) }
    def set_segment(self, pVAMCSStop:"IMissionControlSequenceStop") -> None:
        """Set the stop segment to target."""
        return self._intf.invoke(IProfileChangeStopSegment._metadata, IProfileChangeStopSegment._set_segment_metadata, pVAMCSStop)

    _get_state_metadata = { "name" : "state",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STATE),) }
    @property
    def state(self) -> "STATE":
        """The new state of the targeted stop segment."""
        return self._intf.get_property(IProfileChangeStopSegment._metadata, IProfileChangeStopSegment._get_state_metadata)

    _set_state_metadata = { "name" : "state",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STATE),) }
    @state.setter
    def state(self, newVal:"STATE") -> None:
        return self._intf.set_property(IProfileChangeStopSegment._metadata, IProfileChangeStopSegment._set_state_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{1B9A0E28-8C19-448D-9CD1-AB10B492C767}", IProfileChangeStopSegment)
agcls.AgTypeNameMap["IProfileChangeStopSegment"] = IProfileChangeStopSegment

class IProfileChangeStoppingConditionState(IProfile):
    """Properties for a Change Stopping Condition State profile."""
    _num_methods = 8
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{977C9F84-852A-4B5D-861B-8F9E3809CE7D}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment_name" : 1,
                             "set_segment_name" : 2,
                             "set_segment" : 3,
                             "get_state" : 4,
                             "set_state" : 5,
                             "set_trigger" : 6,
                             "get_trigger_name" : 7,
                             "set_trigger_name" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileChangeStoppingConditionState)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileChangeStoppingConditionState)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileChangeStoppingConditionState, IProfile)
    
    _get_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def segment_name(self) -> str:
        """The segment that contains the targeted stopping condition."""
        return self._intf.get_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._get_segment_name_metadata)

    _set_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @segment_name.setter
    def segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._set_segment_name_metadata, inVal)

    _set_segment_metadata = { "name" : "set_segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceSegment"),) }
    def set_segment(self, mCSSegment:"IMissionControlSequenceSegment") -> None:
        """Set the targeted segment."""
        return self._intf.invoke(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._set_segment_metadata, mCSSegment)

    _get_state_metadata = { "name" : "state",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STATE),) }
    @property
    def state(self) -> "STATE":
        """The new state of the targeted stopping condition."""
        return self._intf.get_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._get_state_metadata)

    _set_state_metadata = { "name" : "state",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STATE),) }
    @state.setter
    def state(self, newVal:"STATE") -> None:
        return self._intf.set_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._set_state_metadata, newVal)

    _set_trigger_metadata = { "name" : "set_trigger",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IStoppingCondition"),) }
    def set_trigger(self, stoppingCondition:"IStoppingCondition") -> None:
        """The targeted stopping condition."""
        return self._intf.invoke(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._set_trigger_metadata, stoppingCondition)

    _get_trigger_name_metadata = { "name" : "trigger_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def trigger_name(self) -> str:
        """The name of the targeted stopping condition."""
        return self._intf.get_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._get_trigger_name_metadata)

    _set_trigger_name_metadata = { "name" : "trigger_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @trigger_name.setter
    def trigger_name(self, inVal:str) -> None:
        return self._intf.set_property(IProfileChangeStoppingConditionState._metadata, IProfileChangeStoppingConditionState._set_trigger_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{977C9F84-852A-4B5D-861B-8F9E3809CE7D}", IProfileChangeStoppingConditionState)
agcls.AgTypeNameMap["IProfileChangeStoppingConditionState"] = IProfileChangeStoppingConditionState

class IProfileSeedFiniteManeuver(IProfile):
    """Properties for a Seed Finite Maneuver segment."""
    _num_methods = 5
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_segment_name" : 1,
                             "set_segment_name" : 2,
                             "set_segment" : 3,
                             "get_leave_all_active_stopping_conditions_active" : 4,
                             "set_leave_all_active_stopping_conditions_active" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileSeedFiniteManeuver)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileSeedFiniteManeuver)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileSeedFiniteManeuver, IProfile)
    
    _get_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def segment_name(self) -> str:
        """The targeted maneuver segment."""
        return self._intf.get_property(IProfileSeedFiniteManeuver._metadata, IProfileSeedFiniteManeuver._get_segment_name_metadata)

    _set_segment_name_metadata = { "name" : "segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @segment_name.setter
    def segment_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileSeedFiniteManeuver._metadata, IProfileSeedFiniteManeuver._set_segment_name_metadata, newVal)

    _set_segment_metadata = { "name" : "set_segment",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IMissionControlSequenceManeuver"),) }
    def set_segment(self, pVAMCSManeuver:"IMissionControlSequenceManeuver") -> None:
        """Set the maneuver segment to target."""
        return self._intf.invoke(IProfileSeedFiniteManeuver._metadata, IProfileSeedFiniteManeuver._set_segment_metadata, pVAMCSManeuver)

    _get_leave_all_active_stopping_conditions_active_metadata = { "name" : "leave_all_active_stopping_conditions_active",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def leave_all_active_stopping_conditions_active(self) -> bool:
        """If true, all active stopping conditions on the seeded maneuver will remain active during run."""
        return self._intf.get_property(IProfileSeedFiniteManeuver._metadata, IProfileSeedFiniteManeuver._get_leave_all_active_stopping_conditions_active_metadata)

    _set_leave_all_active_stopping_conditions_active_metadata = { "name" : "leave_all_active_stopping_conditions_active",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @leave_all_active_stopping_conditions_active.setter
    def leave_all_active_stopping_conditions_active(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileSeedFiniteManeuver._metadata, IProfileSeedFiniteManeuver._set_leave_all_active_stopping_conditions_active_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}", IProfileSeedFiniteManeuver)
agcls.AgTypeNameMap["IProfileSeedFiniteManeuver"] = IProfileSeedFiniteManeuver

class IProfileRunOnce(IProfile):
    """Properties for a Run Once profile."""
    _num_methods = 0
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{75574EA3-277E-4A6D-9529-3342088679DB}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileRunOnce)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileRunOnce)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileRunOnce, IProfile)
    

agcls.AgClassCatalog.add_catalog_entry("{75574EA3-277E-4A6D-9529-3342088679DB}", IProfileRunOnce)
agcls.AgTypeNameMap["IProfileRunOnce"] = IProfileRunOnce

class IUserVariableDefinition(object):
    """Properties for a User Variable definition."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_unit_dimension" : 1,
                             "set_unit_dimension" : 2,
                             "get_variable_name" : 3,
                             "set_variable_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariableDefinition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariableDefinition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariableDefinition, None)
    
    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IUserVariableDefinition._metadata, IUserVariableDefinition._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        """The dimension of the user variable."""
        return self._intf.set_property(IUserVariableDefinition._metadata, IUserVariableDefinition._set_unit_dimension_metadata, inVal)

    _get_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_name(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IUserVariableDefinition._metadata, IUserVariableDefinition._get_variable_name_metadata)

    _set_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_name.setter
    def variable_name(self, inVal:str) -> None:
        """The name of the user variable."""
        return self._intf.set_property(IUserVariableDefinition._metadata, IUserVariableDefinition._set_variable_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}", IUserVariableDefinition)
agcls.AgTypeNameMap["IUserVariableDefinition"] = IUserVariableDefinition

class IUserVariable(object):
    """The properties for a User Variable initial value."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_unit_dimension" : 1,
                             "get_variable_name" : 2,
                             "get_variable_value" : 3,
                             "set_variable_value" : 4,
                             "enable_control_parameter" : 5,
                             "disable_control_parameter" : 6,
                             "is_control_parameter_enabled" : 7,
                             "get_control_parameters_available" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariable)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariable)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariable, None)
    
    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IUserVariable._metadata, IUserVariable._get_unit_dimension_metadata)

    _get_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_name(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IUserVariable._metadata, IUserVariable._get_variable_name_metadata)

    _get_variable_value_metadata = { "name" : "variable_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def variable_value(self) -> typing.Any:
        """The initial value of the user variable."""
        return self._intf.get_property(IUserVariable._metadata, IUserVariable._get_variable_value_metadata)

    _set_variable_value_metadata = { "name" : "variable_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @variable_value.setter
    def variable_value(self, inVal:typing.Any) -> None:
        """The initial value of the user variable."""
        return self._intf.set_property(IUserVariable._metadata, IUserVariable._set_variable_value_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (),
            "marshallers" : () }
    def enable_control_parameter(self) -> None:
        """Enable or disables the specified control parameter."""
        return self._intf.invoke(IUserVariable._metadata, IUserVariable._enable_control_parameter_metadata, )

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (),
            "marshallers" : () }
    def disable_control_parameter(self) -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IUserVariable._metadata, IUserVariable._disable_control_parameter_metadata, )

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self) -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IUserVariable._metadata, IUserVariable._is_control_parameter_enabled_metadata, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IUserVariable._metadata, IUserVariable._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}", IUserVariable)
agcls.AgTypeNameMap["IUserVariable"] = IUserVariable

class IUserVariableUpdate(object):
    """Properties for a User Variable update."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{14F87E74-D85B-40D1-86FF-97E7F514FCF7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_unit_dimension" : 1,
                             "get_variable_name" : 2,
                             "get_variable_value" : 3,
                             "set_variable_value" : 4,
                             "get_variable_action" : 5,
                             "set_variable_action" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUserVariableUpdate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUserVariableUpdate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUserVariableUpdate, None)
    
    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The dimension of the user variable."""
        return self._intf.get_property(IUserVariableUpdate._metadata, IUserVariableUpdate._get_unit_dimension_metadata)

    _get_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_name(self) -> str:
        """The name of the user variable."""
        return self._intf.get_property(IUserVariableUpdate._metadata, IUserVariableUpdate._get_variable_name_metadata)

    _get_variable_value_metadata = { "name" : "variable_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def variable_value(self) -> typing.Any:
        """Update value of the user variable."""
        return self._intf.get_property(IUserVariableUpdate._metadata, IUserVariableUpdate._get_variable_value_metadata)

    _set_variable_value_metadata = { "name" : "variable_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @variable_value.setter
    def variable_value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IUserVariableUpdate._metadata, IUserVariableUpdate._set_variable_value_metadata, inVal)

    _get_variable_action_metadata = { "name" : "variable_action",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_ACTION),) }
    @property
    def variable_action(self) -> "UPDATE_ACTION":
        """Action to be performed using the value."""
        return self._intf.get_property(IUserVariableUpdate._metadata, IUserVariableUpdate._get_variable_action_metadata)

    _set_variable_action_metadata = { "name" : "variable_action",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(UPDATE_ACTION),) }
    @variable_action.setter
    def variable_action(self, inVal:"UPDATE_ACTION") -> None:
        return self._intf.set_property(IUserVariableUpdate._metadata, IUserVariableUpdate._set_variable_action_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (),
            "marshallers" : () }
    def enable_control_parameter(self) -> None:
        """Enable or disables the specified control parameter."""
        return self._intf.invoke(IUserVariableUpdate._metadata, IUserVariableUpdate._enable_control_parameter_metadata, )

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (),
            "marshallers" : () }
    def disable_control_parameter(self) -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IUserVariableUpdate._metadata, IUserVariableUpdate._disable_control_parameter_metadata, )

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self) -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IUserVariableUpdate._metadata, IUserVariableUpdate._is_control_parameter_enabled_metadata, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IUserVariableUpdate._metadata, IUserVariableUpdate._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{14F87E74-D85B-40D1-86FF-97E7F514FCF7}", IUserVariableUpdate)
agcls.AgTypeNameMap["IUserVariableUpdate"] = IUserVariableUpdate

class IProfileSNOPTOptimizer(IProfile):
    """Properties of SNOPT Optimizer profile."""
    _num_methods = 22
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{6BE54C72-2B85-4925-B969-5602527616A1}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_control_parameters" : 1,
                             "get_results" : 2,
                             "get_targeter_graphs" : 3,
                             "get_scripting_tool" : 4,
                             "get_reset_controls_before_run" : 5,
                             "set_reset_controls_before_run" : 6,
                             "get_max_major_iterations" : 7,
                             "set_max_major_iterations" : 8,
                             "get_tolerance_on_major_feasibility" : 9,
                             "set_tolerance_on_major_feasibility" : 10,
                             "get_tolerance_on_major_optimality" : 11,
                             "set_tolerance_on_major_optimality" : 12,
                             "get_max_minor_iterations" : 13,
                             "set_max_minor_iterations" : 14,
                             "get_tolerance_on_minor_feasibility" : 15,
                             "set_tolerance_on_minor_feasibility" : 16,
                             "get_tolerance_on_minor_optimality" : 17,
                             "set_tolerance_on_minor_optimality" : 18,
                             "get_options_filename" : 19,
                             "set_options_filename" : 20,
                             "get_allow_internal_primal_infeasibility_measure_normalization" : 21,
                             "set_allow_internal_primal_infeasibility_measure_normalization" : 22, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileSNOPTOptimizer)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileSNOPTOptimizer)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileSNOPTOptimizer, IProfile)
    
    _get_control_parameters_metadata = { "name" : "control_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def control_parameters(self) -> "SNOPTControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_control_parameters_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "SNOPTResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_results_metadata)

    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_targeter_graphs_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_scripting_tool_metadata)

    _get_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def reset_controls_before_run(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_reset_controls_before_run_metadata)

    _set_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @reset_controls_before_run.setter
    def reset_controls_before_run(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_reset_controls_before_run_metadata, newVal)

    _get_max_major_iterations_metadata = { "name" : "max_major_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_major_iterations(self) -> int:
        """The maximum number of major iterations allowed."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_max_major_iterations_metadata)

    _set_max_major_iterations_metadata = { "name" : "max_major_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_major_iterations.setter
    def max_major_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_max_major_iterations_metadata, newVal)

    _get_tolerance_on_major_feasibility_metadata = { "name" : "tolerance_on_major_feasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_major_feasibility(self) -> float:
        """Specify how accurately the nonlinear constraints should be satisfied."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_tolerance_on_major_feasibility_metadata)

    _set_tolerance_on_major_feasibility_metadata = { "name" : "tolerance_on_major_feasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_major_feasibility.setter
    def tolerance_on_major_feasibility(self, newVal:float) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_tolerance_on_major_feasibility_metadata, newVal)

    _get_tolerance_on_major_optimality_metadata = { "name" : "tolerance_on_major_optimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_major_optimality(self) -> float:
        """Specify the final accuracy of the dual variables."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_tolerance_on_major_optimality_metadata)

    _set_tolerance_on_major_optimality_metadata = { "name" : "tolerance_on_major_optimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_major_optimality.setter
    def tolerance_on_major_optimality(self, newVal:float) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_tolerance_on_major_optimality_metadata, newVal)

    _get_max_minor_iterations_metadata = { "name" : "max_minor_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_minor_iterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_max_minor_iterations_metadata)

    _set_max_minor_iterations_metadata = { "name" : "max_minor_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_minor_iterations.setter
    def max_minor_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_max_minor_iterations_metadata, newVal)

    _get_tolerance_on_minor_feasibility_metadata = { "name" : "tolerance_on_minor_feasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_minor_feasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_tolerance_on_minor_feasibility_metadata)

    _set_tolerance_on_minor_feasibility_metadata = { "name" : "tolerance_on_minor_feasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_minor_feasibility.setter
    def tolerance_on_minor_feasibility(self, newVal:float) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_tolerance_on_minor_feasibility_metadata, newVal)

    _get_tolerance_on_minor_optimality_metadata = { "name" : "tolerance_on_minor_optimality",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_minor_optimality(self) -> float:
        """This option is undocumented in the SNOPT literature, and included here for completeness in terms of tolerance options."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_tolerance_on_minor_optimality_metadata)

    _set_tolerance_on_minor_optimality_metadata = { "name" : "tolerance_on_minor_optimality",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_minor_optimality.setter
    def tolerance_on_minor_optimality(self, newVal:float) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_tolerance_on_minor_optimality_metadata, newVal)

    _get_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def options_filename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_options_filename_metadata)

    _set_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @options_filename.setter
    def options_filename(self, newVal:str) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_options_filename_metadata, newVal)

    _get_allow_internal_primal_infeasibility_measure_normalization_metadata = { "name" : "allow_internal_primal_infeasibility_measure_normalization",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def allow_internal_primal_infeasibility_measure_normalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        return self._intf.get_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._get_allow_internal_primal_infeasibility_measure_normalization_metadata)

    _set_allow_internal_primal_infeasibility_measure_normalization_metadata = { "name" : "allow_internal_primal_infeasibility_measure_normalization",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @allow_internal_primal_infeasibility_measure_normalization.setter
    def allow_internal_primal_infeasibility_measure_normalization(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileSNOPTOptimizer._metadata, IProfileSNOPTOptimizer._set_allow_internal_primal_infeasibility_measure_normalization_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6BE54C72-2B85-4925-B969-5602527616A1}", IProfileSNOPTOptimizer)
agcls.AgTypeNameMap["IProfileSNOPTOptimizer"] = IProfileSNOPTOptimizer

class ISNOPTControl(object):
    """Properties for control parameters of a SNOPT profile."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4C637192-8687-4218-9BD6-A7B7C7B6E720}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_initial_value" : 5,
                             "get_current_value" : 6,
                             "set_current_value" : 7,
                             "get_lower_bound" : 8,
                             "set_lower_bound" : 9,
                             "get_upper_bound" : 10,
                             "set_upper_bound" : 11,
                             "get_scaling_value" : 12,
                             "set_scaling_value" : 13,
                             "get_use_custom_display_unit" : 14,
                             "set_use_custom_display_unit" : 15,
                             "get_custom_display_unit" : 16,
                             "set_custom_display_unit" : 17, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISNOPTControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISNOPTControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISNOPTControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_parent_name_metadata)

    _get_initial_value_metadata = { "name" : "initial_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_value(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_initial_value_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_current_value_metadata)

    _set_current_value_metadata = { "name" : "current_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @current_value.setter
    def current_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_current_value_metadata, newVal)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_upper_bound_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_scaling_value_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(ISNOPTControl._metadata, ISNOPTControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(ISNOPTControl._metadata, ISNOPTControl._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{4C637192-8687-4218-9BD6-A7B7C7B6E720}", ISNOPTControl)
agcls.AgTypeNameMap["ISNOPTControl"] = ISNOPTControl

class ISNOPTResult(object):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_current_value" : 4,
                             "get_parent_name" : 5,
                             "get_lower_bound" : 6,
                             "set_lower_bound" : 7,
                             "get_upper_bound" : 8,
                             "set_upper_bound" : 9,
                             "get_scaling_value" : 10,
                             "set_scaling_value" : 11,
                             "get_weight" : 12,
                             "set_weight" : 13,
                             "get_goal" : 14,
                             "set_goal" : 15,
                             "get_use_custom_display_unit" : 16,
                             "set_use_custom_display_unit" : 17,
                             "get_custom_display_unit" : 18,
                             "set_custom_display_unit" : 19, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISNOPTResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISNOPTResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISNOPTResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_current_value_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_parent_name_metadata)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_upper_bound_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_scaling_value_metadata, newVal)

    _get_weight_metadata = { "name" : "weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_weight_metadata)

    _set_weight_metadata = { "name" : "weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @weight.setter
    def weight(self, newVal:float) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_weight_metadata, newVal)

    _get_goal_metadata = { "name" : "goal",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SNOPT_GOAL),) }
    @property
    def goal(self) -> "SNOPT_GOAL":
        """The purpose of the element in the problem."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_goal_metadata)

    _set_goal_metadata = { "name" : "goal",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SNOPT_GOAL),) }
    @goal.setter
    def goal(self, inVal:"SNOPT_GOAL") -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_goal_metadata, inVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(ISNOPTResult._metadata, ISNOPTResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(ISNOPTResult._metadata, ISNOPTResult._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}", ISNOPTResult)
agcls.AgTypeNameMap["ISNOPTResult"] = ISNOPTResult

class IProfileIPOPTOptimizer(IProfile):
    """Properties of IPOPT Optimizer profile."""
    _num_methods = 18
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_control_parameters" : 1,
                             "get_results" : 2,
                             "get_targeter_graphs" : 3,
                             "get_scripting_tool" : 4,
                             "get_reset_controls_before_run" : 5,
                             "set_reset_controls_before_run" : 6,
                             "get_tolerance_on_convergence" : 7,
                             "set_tolerance_on_convergence" : 8,
                             "get_maximum_iterations" : 9,
                             "set_maximum_iterations" : 10,
                             "get_tolerance_on_constraint_violation" : 11,
                             "set_tolerance_on_constraint_violation" : 12,
                             "get_tolerance_on_dual_infeasibility" : 13,
                             "set_tolerance_on_dual_infeasibility" : 14,
                             "get_tolerance_on_complementary_infeasibility" : 15,
                             "set_tolerance_on_complementary_infeasibility" : 16,
                             "get_options_filename" : 17,
                             "set_options_filename" : 18, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileIPOPTOptimizer)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileIPOPTOptimizer)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileIPOPTOptimizer, IProfile)
    
    _get_control_parameters_metadata = { "name" : "control_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def control_parameters(self) -> "IPOPTControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_control_parameters_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "IPOPTResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_results_metadata)

    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_targeter_graphs_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_scripting_tool_metadata)

    _get_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def reset_controls_before_run(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_reset_controls_before_run_metadata)

    _set_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @reset_controls_before_run.setter
    def reset_controls_before_run(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_reset_controls_before_run_metadata, newVal)

    _get_tolerance_on_convergence_metadata = { "name" : "tolerance_on_convergence",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_convergence(self) -> float:
        """The tolerance by which the optimality conditions must be satisfied for the problem to be considered converged. The default value is 1E-8."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_tolerance_on_convergence_metadata)

    _set_tolerance_on_convergence_metadata = { "name" : "tolerance_on_convergence",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_convergence.setter
    def tolerance_on_convergence(self, newVal:float) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_tolerance_on_convergence_metadata, newVal)

    _get_maximum_iterations_metadata = { "name" : "maximum_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def maximum_iterations(self) -> int:
        """The maximum number of iterations before IPOPT should give up if it hasn't yet converged on a solution. The default value is 3000."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_maximum_iterations_metadata)

    _set_maximum_iterations_metadata = { "name" : "maximum_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @maximum_iterations.setter
    def maximum_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_maximum_iterations_metadata, newVal)

    _get_tolerance_on_constraint_violation_metadata = { "name" : "tolerance_on_constraint_violation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_constraint_violation(self) -> float:
        """The tolerance by which user-specified constraints are allowed to be violated with the solution still considered feasible. The default value is 1.0E-4."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_tolerance_on_constraint_violation_metadata)

    _set_tolerance_on_constraint_violation_metadata = { "name" : "tolerance_on_constraint_violation",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_constraint_violation.setter
    def tolerance_on_constraint_violation(self, newVal:float) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_tolerance_on_constraint_violation_metadata, newVal)

    _get_tolerance_on_dual_infeasibility_metadata = { "name" : "tolerance_on_dual_infeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_dual_infeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the dual infeasibility. The default value is 1."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_tolerance_on_dual_infeasibility_metadata)

    _set_tolerance_on_dual_infeasibility_metadata = { "name" : "tolerance_on_dual_infeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_dual_infeasibility.setter
    def tolerance_on_dual_infeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_tolerance_on_dual_infeasibility_metadata, newVal)

    _get_tolerance_on_complementary_infeasibility_metadata = { "name" : "tolerance_on_complementary_infeasibility",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance_on_complementary_infeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the complementarity conditions. The default value is 1.0E-4."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_tolerance_on_complementary_infeasibility_metadata)

    _set_tolerance_on_complementary_infeasibility_metadata = { "name" : "tolerance_on_complementary_infeasibility",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance_on_complementary_infeasibility.setter
    def tolerance_on_complementary_infeasibility(self, newVal:float) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_tolerance_on_complementary_infeasibility_metadata, newVal)

    _get_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def options_filename(self) -> str:
        """If used, the associated IPOPT specifications file may define any of the various IPOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        return self._intf.get_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._get_options_filename_metadata)

    _set_options_filename_metadata = { "name" : "options_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @options_filename.setter
    def options_filename(self, newVal:str) -> None:
        return self._intf.set_property(IProfileIPOPTOptimizer._metadata, IProfileIPOPTOptimizer._set_options_filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}", IProfileIPOPTOptimizer)
agcls.AgTypeNameMap["IProfileIPOPTOptimizer"] = IProfileIPOPTOptimizer

class IIPOPTControl(object):
    """Properties for control parameters of a IPOPT profile."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_initial_value" : 5,
                             "get_current_value" : 6,
                             "set_current_value" : 7,
                             "get_lower_bound" : 8,
                             "set_lower_bound" : 9,
                             "get_upper_bound" : 10,
                             "set_upper_bound" : 11,
                             "get_scaling_value" : 12,
                             "set_scaling_value" : 13,
                             "get_use_custom_display_unit" : 14,
                             "set_use_custom_display_unit" : 15,
                             "get_custom_display_unit" : 16,
                             "set_custom_display_unit" : 17, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IIPOPTControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IIPOPTControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IIPOPTControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_parent_name_metadata)

    _get_initial_value_metadata = { "name" : "initial_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_value(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_initial_value_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_current_value_metadata)

    _set_current_value_metadata = { "name" : "current_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @current_value.setter
    def current_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_current_value_metadata, newVal)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_upper_bound_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_scaling_value_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IIPOPTControl._metadata, IIPOPTControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IIPOPTControl._metadata, IIPOPTControl._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}", IIPOPTControl)
agcls.AgTypeNameMap["IIPOPTControl"] = IIPOPTControl

class IIPOPTResult(object):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_current_value" : 4,
                             "get_parent_name" : 5,
                             "get_lower_bound" : 6,
                             "set_lower_bound" : 7,
                             "get_upper_bound" : 8,
                             "set_upper_bound" : 9,
                             "get_scaling_value" : 10,
                             "set_scaling_value" : 11,
                             "get_weight" : 12,
                             "set_weight" : 13,
                             "get_goal" : 14,
                             "set_goal" : 15,
                             "get_use_custom_display_unit" : 16,
                             "set_use_custom_display_unit" : 17,
                             "get_custom_display_unit" : 18,
                             "set_custom_display_unit" : 19, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IIPOPTResult)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IIPOPTResult)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IIPOPTResult, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_name_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_current_value_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_parent_name_metadata)

    _get_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def lower_bound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_lower_bound_metadata)

    _set_lower_bound_metadata = { "name" : "lower_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @lower_bound.setter
    def lower_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_lower_bound_metadata, newVal)

    _get_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def upper_bound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_upper_bound_metadata)

    _set_upper_bound_metadata = { "name" : "upper_bound",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @upper_bound.setter
    def upper_bound(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_upper_bound_metadata, newVal)

    _get_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def scaling_value(self) -> typing.Any:
        """Apply to the Specified Value scaling method. Dimension depends on context."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_scaling_value_metadata)

    _set_scaling_value_metadata = { "name" : "scaling_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @scaling_value.setter
    def scaling_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_scaling_value_metadata, newVal)

    _get_weight_metadata = { "name" : "weight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_weight_metadata)

    _set_weight_metadata = { "name" : "weight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @weight.setter
    def weight(self, newVal:float) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_weight_metadata, newVal)

    _get_goal_metadata = { "name" : "goal",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IPOPT_GOAL),) }
    @property
    def goal(self) -> "IPOPT_GOAL":
        """The purpose of the element in the problem."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_goal_metadata)

    _set_goal_metadata = { "name" : "goal",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IPOPT_GOAL),) }
    @goal.setter
    def goal(self, inVal:"IPOPT_GOAL") -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_goal_metadata, inVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IIPOPTResult._metadata, IIPOPTResult._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IIPOPTResult._metadata, IIPOPTResult._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}", IIPOPTResult)
agcls.AgTypeNameMap["IIPOPTResult"] = IIPOPTResult

class IManeuverOptimalFinite(IManeuver):
    """Engine properties for a Optimal Finite Maneuver."""
    _num_methods = 40
    _vtable_offset = IManeuver._vtable_offset + IManeuver._num_methods
    _metadata = {
        "uuid" : "{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}",
        "vtable_reference" : IManeuver._vtable_offset + IManeuver._num_methods - 1,
        "method_offsets" : { "get_pressure_mode" : 1,
                             "set_pressure_mode" : 2,
                             "get_thrust_efficiency" : 3,
                             "set_thrust_efficiency" : 4,
                             "get_thrust_efficiency_mode" : 5,
                             "set_thrust_efficiency_mode" : 6,
                             "get_number_of_nodes" : 7,
                             "set_number_of_nodes" : 8,
                             "get_initial_guess_file_name" : 9,
                             "set_initial_guess_file_name" : 10,
                             "get_seed_method" : 11,
                             "set_seed_method" : 12,
                             "run_seed" : 13,
                             "get_node_status_message" : 14,
                             "get_run_mode" : 15,
                             "set_run_mode" : 16,
                             "get_halt_mission_control_sequence_when_no_convergence" : 17,
                             "set_halt_mission_control_sequence_when_no_convergence" : 18,
                             "get_discretization_strategy" : 19,
                             "set_discretization_strategy" : 20,
                             "get_working_variables" : 21,
                             "set_working_variables" : 22,
                             "get_scaling_options" : 23,
                             "set_scaling_options" : 24,
                             "get_enable_unit_vector_controls" : 25,
                             "set_enable_unit_vector_controls" : 26,
                             "get_thrust_axes" : 27,
                             "get_snopt_optimizer" : 28,
                             "get_initial_boundary_conditions" : 29,
                             "get_final_boundary_conditions" : 30,
                             "get_path_boundary_conditions" : 31,
                             "get_log_file_name" : 32,
                             "get_export_format" : 33,
                             "set_export_format" : 34,
                             "get_steering_nodes" : 35,
                             "export_nodes" : 36,
                             "get_initial_guess_interpolation_method" : 37,
                             "set_initial_guess_interpolation_method" : 38,
                             "get_should_reinitialize_stm_at_start_of_segment_propagation" : 39,
                             "set_should_reinitialize_stm_at_start_of_segment_propagation" : 40, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFinite)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuver._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFinite)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFinite, IManeuver)
    
    _get_pressure_mode_metadata = { "name" : "pressure_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PRESSURE_MODE),) }
    @property
    def pressure_mode(self) -> "PRESSURE_MODE":
        """The pressure mode."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_pressure_mode_metadata)

    _set_pressure_mode_metadata = { "name" : "pressure_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(PRESSURE_MODE),) }
    @pressure_mode.setter
    def pressure_mode(self, newVal:"PRESSURE_MODE") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_pressure_mode_metadata, newVal)

    _get_thrust_efficiency_metadata = { "name" : "thrust_efficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def thrust_efficiency(self) -> float:
        """The fraction of ideal thrust applied. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_thrust_efficiency_metadata)

    _set_thrust_efficiency_metadata = { "name" : "thrust_efficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @thrust_efficiency.setter
    def thrust_efficiency(self, newVal:float) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_thrust_efficiency_metadata, newVal)

    _get_thrust_efficiency_mode_metadata = { "name" : "thrust_efficiency_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(THRUST_TYPE),) }
    @property
    def thrust_efficiency_mode(self) -> "THRUST_TYPE":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_thrust_efficiency_mode_metadata)

    _set_thrust_efficiency_mode_metadata = { "name" : "thrust_efficiency_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(THRUST_TYPE),) }
    @thrust_efficiency_mode.setter
    def thrust_efficiency_mode(self, newVal:"THRUST_TYPE") -> None:
        """Mode indicating fraction of ideal thrust applied."""
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_thrust_efficiency_mode_metadata, newVal)

    _get_number_of_nodes_metadata = { "name" : "number_of_nodes",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def number_of_nodes(self) -> int:
        """Number of nodes to discretize collocation problem into."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_number_of_nodes_metadata)

    _set_number_of_nodes_metadata = { "name" : "number_of_nodes",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @number_of_nodes.setter
    def number_of_nodes(self, newVal:int) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_number_of_nodes_metadata, newVal)

    _get_initial_guess_file_name_metadata = { "name" : "initial_guess_file_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def initial_guess_file_name(self) -> str:
        """File containing ephemeris for nodes that serve as an initial guess."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_initial_guess_file_name_metadata)

    _set_initial_guess_file_name_metadata = { "name" : "initial_guess_file_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @initial_guess_file_name.setter
    def initial_guess_file_name(self, newVal:str) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_initial_guess_file_name_metadata, newVal)

    _get_seed_method_metadata = { "name" : "seed_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SEED_METHOD),) }
    @property
    def seed_method(self) -> "OPTIMAL_FINITE_SEED_METHOD":
        """Initial seed method."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_seed_method_metadata)

    _set_seed_method_metadata = { "name" : "seed_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SEED_METHOD),) }
    @seed_method.setter
    def seed_method(self, newVal:"OPTIMAL_FINITE_SEED_METHOD") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_seed_method_metadata, newVal)

    _run_seed_metadata = { "name" : "run_seed",
            "arg_types" : (),
            "marshallers" : () }
    def run_seed(self) -> None:
        """Run seed."""
        return self._intf.invoke(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._run_seed_metadata, )

    _get_node_status_message_metadata = { "name" : "node_status_message",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def node_status_message(self) -> str:
        """A message that indicates what nodes are currently held by the segment."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_node_status_message_metadata)

    _get_run_mode_metadata = { "name" : "run_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_RUN_MODE),) }
    @property
    def run_mode(self) -> "OPTIMAL_FINITE_RUN_MODE":
        """Run mode."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_run_mode_metadata)

    _set_run_mode_metadata = { "name" : "run_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_RUN_MODE),) }
    @run_mode.setter
    def run_mode(self, newVal:"OPTIMAL_FINITE_RUN_MODE") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_run_mode_metadata, newVal)

    _get_halt_mission_control_sequence_when_no_convergence_metadata = { "name" : "halt_mission_control_sequence_when_no_convergence",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def halt_mission_control_sequence_when_no_convergence(self) -> bool:
        """Halt MCS and discard result if optimization is unsuccessful."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_halt_mission_control_sequence_when_no_convergence_metadata)

    _set_halt_mission_control_sequence_when_no_convergence_metadata = { "name" : "halt_mission_control_sequence_when_no_convergence",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @halt_mission_control_sequence_when_no_convergence.setter
    def halt_mission_control_sequence_when_no_convergence(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_halt_mission_control_sequence_when_no_convergence_metadata, newVal)

    _get_discretization_strategy_metadata = { "name" : "discretization_strategy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_DISCRETIZATION_STRATEGY),) }
    @property
    def discretization_strategy(self) -> "OPTIMAL_FINITE_DISCRETIZATION_STRATEGY":
        """Discretization Strategy."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_discretization_strategy_metadata)

    _set_discretization_strategy_metadata = { "name" : "discretization_strategy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_DISCRETIZATION_STRATEGY),) }
    @discretization_strategy.setter
    def discretization_strategy(self, newVal:"OPTIMAL_FINITE_DISCRETIZATION_STRATEGY") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_discretization_strategy_metadata, newVal)

    _get_working_variables_metadata = { "name" : "working_variables",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_WORKING_VARIABLES),) }
    @property
    def working_variables(self) -> "OPTIMAL_FINITE_WORKING_VARIABLES":
        """Working Variables."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_working_variables_metadata)

    _set_working_variables_metadata = { "name" : "working_variables",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_WORKING_VARIABLES),) }
    @working_variables.setter
    def working_variables(self, newVal:"OPTIMAL_FINITE_WORKING_VARIABLES") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_working_variables_metadata, newVal)

    _get_scaling_options_metadata = { "name" : "scaling_options",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SCALING_OPTIONS),) }
    @property
    def scaling_options(self) -> "OPTIMAL_FINITE_SCALING_OPTIONS":
        """Scaling Options."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_scaling_options_metadata)

    _set_scaling_options_metadata = { "name" : "scaling_options",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_SCALING_OPTIONS),) }
    @scaling_options.setter
    def scaling_options(self, newVal:"OPTIMAL_FINITE_SCALING_OPTIONS") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_scaling_options_metadata, newVal)

    _get_enable_unit_vector_controls_metadata = { "name" : "enable_unit_vector_controls",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_unit_vector_controls(self) -> bool:
        """Enable unit vector for thrust direction."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_enable_unit_vector_controls_metadata)

    _set_enable_unit_vector_controls_metadata = { "name" : "enable_unit_vector_controls",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_unit_vector_controls.setter
    def enable_unit_vector_controls(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_enable_unit_vector_controls_metadata, newVal)

    _get_thrust_axes_metadata = { "name" : "thrust_axes",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def thrust_axes(self) -> str:
        """Label reflecting coordinate axes for the thrust vector"""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_thrust_axes_metadata)

    _get_snopt_optimizer_metadata = { "name" : "snopt_optimizer",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def snopt_optimizer(self) -> "ManeuverOptimalFiniteSNOPTOptimizer":
        """SNOPT Optimizer Options."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_snopt_optimizer_metadata)

    _get_initial_boundary_conditions_metadata = { "name" : "initial_boundary_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def initial_boundary_conditions(self) -> "ManeuverOptimalFiniteInitialBoundaryConditions":
        """Initial Boundary Conditions."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_initial_boundary_conditions_metadata)

    _get_final_boundary_conditions_metadata = { "name" : "final_boundary_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def final_boundary_conditions(self) -> "ManeuverOptimalFiniteFinalBoundaryConditions":
        """Final Boundary Conditions."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_final_boundary_conditions_metadata)

    _get_path_boundary_conditions_metadata = { "name" : "path_boundary_conditions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def path_boundary_conditions(self) -> "ManeuverOptimalFinitePathBoundaryConditions":
        """Path Boundary Conditions."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_path_boundary_conditions_metadata)

    _get_log_file_name_metadata = { "name" : "log_file_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def log_file_name(self) -> str:
        """Log file name for optimal finite maneuver."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_log_file_name_metadata)

    _get_export_format_metadata = { "name" : "export_format",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_EXPORT_NODES_FORMAT),) }
    @property
    def export_format(self) -> "OPTIMAL_FINITE_EXPORT_NODES_FORMAT":
        """Format for exporting collocation control variables."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_export_format_metadata)

    _set_export_format_metadata = { "name" : "export_format",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_EXPORT_NODES_FORMAT),) }
    @export_format.setter
    def export_format(self, newVal:"OPTIMAL_FINITE_EXPORT_NODES_FORMAT") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_export_format_metadata, newVal)

    _get_steering_nodes_metadata = { "name" : "steering_nodes",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def steering_nodes(self) -> "ManeuverOptimalFiniteSteeringNodeCollection":
        """The list of steering nodes."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_steering_nodes_metadata)

    _export_nodes_metadata = { "name" : "export_nodes",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def export_nodes(self, fileName:str) -> None:
        """Export the current set of collocation nodes to a file."""
        return self._intf.invoke(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._export_nodes_metadata, fileName)

    _get_initial_guess_interpolation_method_metadata = { "name" : "initial_guess_interpolation_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_GUESS_METHOD),) }
    @property
    def initial_guess_interpolation_method(self) -> "OPTIMAL_FINITE_GUESS_METHOD":
        """Guess interpolation method."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_initial_guess_interpolation_method_metadata)

    _set_initial_guess_interpolation_method_metadata = { "name" : "initial_guess_interpolation_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(OPTIMAL_FINITE_GUESS_METHOD),) }
    @initial_guess_interpolation_method.setter
    def initial_guess_interpolation_method(self, newVal:"OPTIMAL_FINITE_GUESS_METHOD") -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_initial_guess_interpolation_method_metadata, newVal)

    _get_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_reinitialize_stm_at_start_of_segment_propagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        return self._intf.get_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._get_should_reinitialize_stm_at_start_of_segment_propagation_metadata)

    _set_should_reinitialize_stm_at_start_of_segment_propagation_metadata = { "name" : "should_reinitialize_stm_at_start_of_segment_propagation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_reinitialize_stm_at_start_of_segment_propagation.setter
    def should_reinitialize_stm_at_start_of_segment_propagation(self, newVal:bool) -> None:
        return self._intf.set_property(IManeuverOptimalFinite._metadata, IManeuverOptimalFinite._set_should_reinitialize_stm_at_start_of_segment_propagation_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}", IManeuverOptimalFinite)
agcls.AgTypeNameMap["IManeuverOptimalFinite"] = IManeuverOptimalFinite

class IManeuverOptimalFiniteSteeringNodeElement(object):
    """The elements of the steering node."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_node_index" : 1,
                             "get_time" : 2,
                             "get_mass" : 3,
                             "get_azimuth" : 4,
                             "get_elevation" : 5,
                             "get_direction_cos_x" : 6,
                             "get_direction_cos_y" : 7,
                             "get_direction_cos_z" : 8,
                             "get_position_x" : 9,
                             "get_position_y" : 10,
                             "get_position_z" : 11,
                             "get_vel_x" : 12,
                             "get_vel_y" : 13,
                             "get_vel_z" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IManeuverOptimalFiniteSteeringNodeElement)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IManeuverOptimalFiniteSteeringNodeElement)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IManeuverOptimalFiniteSteeringNodeElement, None)
    
    _get_node_index_metadata = { "name" : "node_index",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def node_index(self) -> int:
        """The index of the node in the array of nodes."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_node_index_metadata)

    _get_time_metadata = { "name" : "time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time(self) -> float:
        """The time associated with the node."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_time_metadata)

    _get_mass_metadata = { "name" : "mass",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass(self) -> float:
        """The mass at the node."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_mass_metadata)

    _get_azimuth_metadata = { "name" : "azimuth",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def azimuth(self) -> float:
        """The azimuth of the steering angle."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_azimuth_metadata)

    _get_elevation_metadata = { "name" : "elevation",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def elevation(self) -> float:
        """The elevation of the steering angle."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_elevation_metadata)

    _get_direction_cos_x_metadata = { "name" : "direction_cos_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def direction_cos_x(self) -> float:
        """The first component of the steering unit vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_direction_cos_x_metadata)

    _get_direction_cos_y_metadata = { "name" : "direction_cos_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def direction_cos_y(self) -> float:
        """The second component of the steering unit vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_direction_cos_y_metadata)

    _get_direction_cos_z_metadata = { "name" : "direction_cos_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def direction_cos_z(self) -> float:
        """The third component of the steering unit vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_direction_cos_z_metadata)

    _get_position_x_metadata = { "name" : "position_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def position_x(self) -> float:
        """The X component of the position vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_position_x_metadata)

    _get_position_y_metadata = { "name" : "position_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def position_y(self) -> float:
        """The Y component of the position vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_position_y_metadata)

    _get_position_z_metadata = { "name" : "position_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def position_z(self) -> float:
        """The Z component of the position vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_position_z_metadata)

    _get_vel_x_metadata = { "name" : "vel_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vel_x(self) -> float:
        """The X component of the velocity vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_vel_x_metadata)

    _get_vel_y_metadata = { "name" : "vel_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vel_y(self) -> float:
        """The Y component of the velocity vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_vel_y_metadata)

    _get_vel_z_metadata = { "name" : "vel_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def vel_z(self) -> float:
        """The Z component of the velocity vector."""
        return self._intf.get_property(IManeuverOptimalFiniteSteeringNodeElement._metadata, IManeuverOptimalFiniteSteeringNodeElement._get_vel_z_metadata)


agcls.AgClassCatalog.add_catalog_entry("{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}", IManeuverOptimalFiniteSteeringNodeElement)
agcls.AgTypeNameMap["IManeuverOptimalFiniteSteeringNodeElement"] = IManeuverOptimalFiniteSteeringNodeElement

class IProfileLambertProfile(IProfile):
    """Properties for a Lambert profile."""
    _num_methods = 56
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{6F736B1F-850D-4736-9106-8BDC4FE52A30}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_target_coord_type" : 3,
                             "set_target_coord_type" : 4,
                             "get_enable_second_maneuver" : 5,
                             "set_enable_second_maneuver" : 6,
                             "get_target_position_x" : 7,
                             "set_target_position_x" : 8,
                             "get_target_position_y" : 9,
                             "set_target_position_y" : 10,
                             "get_target_position_z" : 11,
                             "set_target_position_z" : 12,
                             "get_target_velocity_x" : 13,
                             "set_target_velocity_x" : 14,
                             "get_target_velocity_y" : 15,
                             "set_target_velocity_y" : 16,
                             "get_target_velocity_z" : 17,
                             "set_target_velocity_z" : 18,
                             "get_target_semimajor_axis" : 19,
                             "set_target_semimajor_axis" : 20,
                             "get_target_eccentricity" : 21,
                             "set_target_eccentricity" : 22,
                             "get_target_inclination" : 23,
                             "set_target_inclination" : 24,
                             "get_target_right_ascension_of_ascending_node" : 25,
                             "set_target_right_ascension_of_ascending_node" : 26,
                             "get_target_argument_of_periapsis" : 27,
                             "set_target_argument_of_periapsis" : 28,
                             "get_target_true_anomaly" : 29,
                             "set_target_true_anomaly" : 30,
                             "get_solution_option" : 31,
                             "set_solution_option" : 32,
                             "get_time_of_flight" : 33,
                             "set_time_of_flight" : 34,
                             "get_revolutions" : 35,
                             "set_revolutions" : 36,
                             "get_orbital_energy" : 37,
                             "set_orbital_energy" : 38,
                             "get_direction_of_motion" : 39,
                             "set_direction_of_motion" : 40,
                             "get_central_body_collision_altitude_padding" : 41,
                             "set_central_body_collision_altitude_padding" : 42,
                             "get_enable_write_to_first_maneuver" : 43,
                             "set_enable_write_to_first_maneuver" : 44,
                             "get_first_maneuver_segment" : 45,
                             "set_first_maneuver_segment" : 46,
                             "get_enable_write_duration_to_propagate" : 47,
                             "set_enable_write_duration_to_propagate" : 48,
                             "get_disable_non_lambert_propagate_stop_conditions" : 49,
                             "set_disable_non_lambert_propagate_stop_conditions" : 50,
                             "get_propagate_segment" : 51,
                             "set_propagate_segment" : 52,
                             "get_enable_write_to_second_maneuver" : 53,
                             "set_enable_write_to_second_maneuver" : 54,
                             "get_second_maneuver_segment" : 55,
                             "set_second_maneuver_segment" : 56, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileLambertProfile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileLambertProfile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileLambertProfile, IProfile)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_coord_system_name_metadata, newVal)

    _get_target_coord_type_metadata = { "name" : "target_coord_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_TARGET_COORD_TYPE),) }
    @property
    def target_coord_type(self) -> "LAMBERT_TARGET_COORD_TYPE":
        """The target coordinate type."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_coord_type_metadata)

    _set_target_coord_type_metadata = { "name" : "set_target_coord_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_TARGET_COORD_TYPE),) }
    def set_target_coord_type(self, elementType:"LAMBERT_TARGET_COORD_TYPE") -> None:
        """Select a target coordinate type."""
        return self._intf.invoke(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_coord_type_metadata, elementType)

    _get_enable_second_maneuver_metadata = { "name" : "enable_second_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_second_maneuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_enable_second_maneuver_metadata)

    _set_enable_second_maneuver_metadata = { "name" : "enable_second_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_second_maneuver.setter
    def enable_second_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_enable_second_maneuver_metadata, newVal)

    _get_target_position_x_metadata = { "name" : "target_position_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_x(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_position_x_metadata)

    _set_target_position_x_metadata = { "name" : "target_position_x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_x.setter
    def target_position_x(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_position_x_metadata, newVal)

    _get_target_position_y_metadata = { "name" : "target_position_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_y(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_position_y_metadata)

    _set_target_position_y_metadata = { "name" : "target_position_y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_y.setter
    def target_position_y(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_position_y_metadata, newVal)

    _get_target_position_z_metadata = { "name" : "target_position_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_z(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_position_z_metadata)

    _set_target_position_z_metadata = { "name" : "target_position_z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_z.setter
    def target_position_z(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_position_z_metadata, newVal)

    _get_target_velocity_x_metadata = { "name" : "target_velocity_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_x(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_velocity_x_metadata)

    _set_target_velocity_x_metadata = { "name" : "target_velocity_x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_x.setter
    def target_velocity_x(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_velocity_x_metadata, newVal)

    _get_target_velocity_y_metadata = { "name" : "target_velocity_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_y(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_velocity_y_metadata)

    _set_target_velocity_y_metadata = { "name" : "target_velocity_y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_y.setter
    def target_velocity_y(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_velocity_y_metadata, newVal)

    _get_target_velocity_z_metadata = { "name" : "target_velocity_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_z(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_velocity_z_metadata)

    _set_target_velocity_z_metadata = { "name" : "target_velocity_z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_z.setter
    def target_velocity_z(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_velocity_z_metadata, newVal)

    _get_target_semimajor_axis_metadata = { "name" : "target_semimajor_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_semimajor_axis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_semimajor_axis_metadata)

    _set_target_semimajor_axis_metadata = { "name" : "target_semimajor_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_semimajor_axis.setter
    def target_semimajor_axis(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_semimajor_axis_metadata, newVal)

    _get_target_eccentricity_metadata = { "name" : "target_eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_eccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_eccentricity_metadata)

    _set_target_eccentricity_metadata = { "name" : "target_eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_eccentricity.setter
    def target_eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_eccentricity_metadata, newVal)

    _get_target_inclination_metadata = { "name" : "target_inclination",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_inclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_inclination_metadata)

    _set_target_inclination_metadata = { "name" : "target_inclination",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_inclination.setter
    def target_inclination(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_inclination_metadata, newVal)

    _get_target_right_ascension_of_ascending_node_metadata = { "name" : "target_right_ascension_of_ascending_node",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_right_ascension_of_ascending_node(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_right_ascension_of_ascending_node_metadata)

    _set_target_right_ascension_of_ascending_node_metadata = { "name" : "target_right_ascension_of_ascending_node",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_right_ascension_of_ascending_node.setter
    def target_right_ascension_of_ascending_node(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_right_ascension_of_ascending_node_metadata, newVal)

    _get_target_argument_of_periapsis_metadata = { "name" : "target_argument_of_periapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_argument_of_periapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_argument_of_periapsis_metadata)

    _set_target_argument_of_periapsis_metadata = { "name" : "target_argument_of_periapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_argument_of_periapsis.setter
    def target_argument_of_periapsis(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_argument_of_periapsis_metadata, newVal)

    _get_target_true_anomaly_metadata = { "name" : "target_true_anomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_true_anomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_target_true_anomaly_metadata)

    _set_target_true_anomaly_metadata = { "name" : "target_true_anomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_true_anomaly.setter
    def target_true_anomaly(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_target_true_anomaly_metadata, newVal)

    _get_solution_option_metadata = { "name" : "solution_option",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_SOLUTION_OPTION_TYPE),) }
    @property
    def solution_option(self) -> "LAMBERT_SOLUTION_OPTION_TYPE":
        """Lambert solution calculation type."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_solution_option_metadata)

    _set_solution_option_metadata = { "name" : "solution_option",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_SOLUTION_OPTION_TYPE),) }
    @solution_option.setter
    def solution_option(self, newVal:"LAMBERT_SOLUTION_OPTION_TYPE") -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_solution_option_metadata, newVal)

    _get_time_of_flight_metadata = { "name" : "time_of_flight",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_of_flight(self) -> float:
        """The time of flight between departure and arrival for the Lambert solution."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_time_of_flight_metadata)

    _set_time_of_flight_metadata = { "name" : "time_of_flight",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_of_flight.setter
    def time_of_flight(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_time_of_flight_metadata, newVal)

    _get_revolutions_metadata = { "name" : "revolutions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def revolutions(self) -> int:
        """The number of revolutions. Dimensionless."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_revolutions_metadata)

    _set_revolutions_metadata = { "name" : "revolutions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @revolutions.setter
    def revolutions(self, newVal:int) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_revolutions_metadata, newVal)

    _get_orbital_energy_metadata = { "name" : "orbital_energy",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_ORBITAL_ENERGY_TYPE),) }
    @property
    def orbital_energy(self) -> "LAMBERT_ORBITAL_ENERGY_TYPE":
        """The orbital energy for the Lambert solution."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_orbital_energy_metadata)

    _set_orbital_energy_metadata = { "name" : "orbital_energy",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_ORBITAL_ENERGY_TYPE),) }
    @orbital_energy.setter
    def orbital_energy(self, newVal:"LAMBERT_ORBITAL_ENERGY_TYPE") -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_orbital_energy_metadata, newVal)

    _get_direction_of_motion_metadata = { "name" : "direction_of_motion",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_DIRECTION_OF_MOTION_TYPE),) }
    @property
    def direction_of_motion(self) -> "LAMBERT_DIRECTION_OF_MOTION_TYPE":
        """The direction of motion (long or short) for the Lambert solution."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_direction_of_motion_metadata)

    _set_direction_of_motion_metadata = { "name" : "direction_of_motion",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_DIRECTION_OF_MOTION_TYPE),) }
    @direction_of_motion.setter
    def direction_of_motion(self, newVal:"LAMBERT_DIRECTION_OF_MOTION_TYPE") -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_direction_of_motion_metadata, newVal)

    _get_central_body_collision_altitude_padding_metadata = { "name" : "central_body_collision_altitude_padding",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def central_body_collision_altitude_padding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_central_body_collision_altitude_padding_metadata)

    _set_central_body_collision_altitude_padding_metadata = { "name" : "central_body_collision_altitude_padding",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @central_body_collision_altitude_padding.setter
    def central_body_collision_altitude_padding(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_central_body_collision_altitude_padding_metadata, newVal)

    _get_enable_write_to_first_maneuver_metadata = { "name" : "enable_write_to_first_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_to_first_maneuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_enable_write_to_first_maneuver_metadata)

    _set_enable_write_to_first_maneuver_metadata = { "name" : "enable_write_to_first_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_to_first_maneuver.setter
    def enable_write_to_first_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_enable_write_to_first_maneuver_metadata, newVal)

    _get_first_maneuver_segment_metadata = { "name" : "first_maneuver_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def first_maneuver_segment(self) -> str:
        """The first maneuver segment to manipulate that occurs at the start of the transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_first_maneuver_segment_metadata)

    _set_first_maneuver_segment_metadata = { "name" : "first_maneuver_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @first_maneuver_segment.setter
    def first_maneuver_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_first_maneuver_segment_metadata, newVal)

    _get_enable_write_duration_to_propagate_metadata = { "name" : "enable_write_duration_to_propagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_duration_to_propagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the linked propagate segment."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_enable_write_duration_to_propagate_metadata)

    _set_enable_write_duration_to_propagate_metadata = { "name" : "enable_write_duration_to_propagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_duration_to_propagate.setter
    def enable_write_duration_to_propagate(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_enable_write_duration_to_propagate_metadata, newVal)

    _get_disable_non_lambert_propagate_stop_conditions_metadata = { "name" : "disable_non_lambert_propagate_stop_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def disable_non_lambert_propagate_stop_conditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the propagate segment."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_disable_non_lambert_propagate_stop_conditions_metadata)

    _set_disable_non_lambert_propagate_stop_conditions_metadata = { "name" : "disable_non_lambert_propagate_stop_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @disable_non_lambert_propagate_stop_conditions.setter
    def disable_non_lambert_propagate_stop_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_disable_non_lambert_propagate_stop_conditions_metadata, newVal)

    _get_propagate_segment_metadata = { "name" : "propagate_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def propagate_segment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_propagate_segment_metadata)

    _set_propagate_segment_metadata = { "name" : "propagate_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @propagate_segment.setter
    def propagate_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_propagate_segment_metadata, newVal)

    _get_enable_write_to_second_maneuver_metadata = { "name" : "enable_write_to_second_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_to_second_maneuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_enable_write_to_second_maneuver_metadata)

    _set_enable_write_to_second_maneuver_metadata = { "name" : "enable_write_to_second_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_to_second_maneuver.setter
    def enable_write_to_second_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_enable_write_to_second_maneuver_metadata, newVal)

    _get_second_maneuver_segment_metadata = { "name" : "second_maneuver_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def second_maneuver_segment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer."""
        return self._intf.get_property(IProfileLambertProfile._metadata, IProfileLambertProfile._get_second_maneuver_segment_metadata)

    _set_second_maneuver_segment_metadata = { "name" : "second_maneuver_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @second_maneuver_segment.setter
    def second_maneuver_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertProfile._metadata, IProfileLambertProfile._set_second_maneuver_segment_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{6F736B1F-850D-4736-9106-8BDC4FE52A30}", IProfileLambertProfile)
agcls.AgTypeNameMap["IProfileLambertProfile"] = IProfileLambertProfile

class IProfileLambertSearchProfile(IProfile):
    """Properties for a Lambert Search Profile."""
    _num_methods = 64
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{22C5891F-AD49-40BE-9C99-58E23CCFD106}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_target_coord_type" : 3,
                             "set_target_coord_type" : 4,
                             "get_enable_second_maneuver" : 5,
                             "set_enable_second_maneuver" : 6,
                             "get_enable_target_match_phase" : 7,
                             "set_enable_target_match_phase" : 8,
                             "get_target_position_x" : 9,
                             "set_target_position_x" : 10,
                             "get_target_position_y" : 11,
                             "set_target_position_y" : 12,
                             "get_target_position_z" : 13,
                             "set_target_position_z" : 14,
                             "get_target_velocity_x" : 15,
                             "set_target_velocity_x" : 16,
                             "get_target_velocity_y" : 17,
                             "set_target_velocity_y" : 18,
                             "get_target_velocity_z" : 19,
                             "set_target_velocity_z" : 20,
                             "get_target_semimajor_axis" : 21,
                             "set_target_semimajor_axis" : 22,
                             "get_target_eccentricity" : 23,
                             "set_target_eccentricity" : 24,
                             "get_target_inclination" : 25,
                             "set_target_inclination" : 26,
                             "get_target_right_ascension_of_ascending_node" : 27,
                             "set_target_right_ascension_of_ascending_node" : 28,
                             "get_target_argument_of_periapsis" : 29,
                             "set_target_argument_of_periapsis" : 30,
                             "get_target_true_anomaly" : 31,
                             "set_target_true_anomaly" : 32,
                             "get_enable_write_departure_delay_to_first_propagate" : 33,
                             "set_enable_write_departure_delay_to_first_propagate" : 34,
                             "get_disable_first_propagate_non_lambert_stop_conditions" : 35,
                             "set_disable_first_propagate_non_lambert_stop_conditions" : 36,
                             "get_first_propagate_segment" : 37,
                             "set_first_propagate_segment" : 38,
                             "get_enable_write_to_first_maneuver" : 39,
                             "set_enable_write_to_first_maneuver" : 40,
                             "get_first_maneuver_segment" : 41,
                             "set_first_maneuver_segment" : 42,
                             "get_latest_departure_time" : 43,
                             "set_latest_departure_time" : 44,
                             "get_earliest_arrival_time" : 45,
                             "set_earliest_arrival_time" : 46,
                             "get_latest_arrival_time" : 47,
                             "set_latest_arrival_time" : 48,
                             "get_grid_search_time_step" : 49,
                             "set_grid_search_time_step" : 50,
                             "get_max_revolutions" : 51,
                             "set_max_revolutions" : 52,
                             "get_central_body_collision_altitude_padding" : 53,
                             "set_central_body_collision_altitude_padding" : 54,
                             "get_enable_write_duration_to_second_propagate" : 55,
                             "set_enable_write_duration_to_second_propagate" : 56,
                             "get_disable_second_propagate_non_lambert_stop_conditions" : 57,
                             "set_disable_second_propagate_non_lambert_stop_conditions" : 58,
                             "get_second_propagate_segment" : 59,
                             "set_second_propagate_segment" : 60,
                             "get_enable_write_to_second_maneuver" : 61,
                             "set_enable_write_to_second_maneuver" : 62,
                             "get_second_maneuver_segment" : 63,
                             "set_second_maneuver_segment" : 64, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileLambertSearchProfile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileLambertSearchProfile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileLambertSearchProfile, IProfile)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_coord_system_name_metadata, newVal)

    _get_target_coord_type_metadata = { "name" : "target_coord_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_TARGET_COORD_TYPE),) }
    @property
    def target_coord_type(self) -> "LAMBERT_TARGET_COORD_TYPE":
        """The target coordinate type."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_coord_type_metadata)

    _set_target_coord_type_metadata = { "name" : "set_target_coord_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(LAMBERT_TARGET_COORD_TYPE),) }
    def set_target_coord_type(self, elementType:"LAMBERT_TARGET_COORD_TYPE") -> None:
        """Select a target coordinate type."""
        return self._intf.invoke(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_coord_type_metadata, elementType)

    _get_enable_second_maneuver_metadata = { "name" : "enable_second_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_second_maneuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_second_maneuver_metadata)

    _set_enable_second_maneuver_metadata = { "name" : "enable_second_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_second_maneuver.setter
    def enable_second_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_second_maneuver_metadata, newVal)

    _get_enable_target_match_phase_metadata = { "name" : "enable_target_match_phase",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_target_match_phase(self) -> bool:
        """Set this to true if the satellite should match the phase of the orbit at the target."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_target_match_phase_metadata)

    _set_enable_target_match_phase_metadata = { "name" : "enable_target_match_phase",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_target_match_phase.setter
    def enable_target_match_phase(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_target_match_phase_metadata, newVal)

    _get_target_position_x_metadata = { "name" : "target_position_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_x(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_position_x_metadata)

    _set_target_position_x_metadata = { "name" : "target_position_x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_x.setter
    def target_position_x(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_position_x_metadata, newVal)

    _get_target_position_y_metadata = { "name" : "target_position_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_y(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_position_y_metadata)

    _set_target_position_y_metadata = { "name" : "target_position_y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_y.setter
    def target_position_y(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_position_y_metadata, newVal)

    _get_target_position_z_metadata = { "name" : "target_position_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_position_z(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_position_z_metadata)

    _set_target_position_z_metadata = { "name" : "target_position_z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_position_z.setter
    def target_position_z(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_position_z_metadata, newVal)

    _get_target_velocity_x_metadata = { "name" : "target_velocity_x",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_x(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_velocity_x_metadata)

    _set_target_velocity_x_metadata = { "name" : "target_velocity_x",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_x.setter
    def target_velocity_x(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_velocity_x_metadata, newVal)

    _get_target_velocity_y_metadata = { "name" : "target_velocity_y",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_y(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_velocity_y_metadata)

    _set_target_velocity_y_metadata = { "name" : "target_velocity_y",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_y.setter
    def target_velocity_y(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_velocity_y_metadata, newVal)

    _get_target_velocity_z_metadata = { "name" : "target_velocity_z",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_velocity_z(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_velocity_z_metadata)

    _set_target_velocity_z_metadata = { "name" : "target_velocity_z",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_velocity_z.setter
    def target_velocity_z(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_velocity_z_metadata, newVal)

    _get_target_semimajor_axis_metadata = { "name" : "target_semimajor_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_semimajor_axis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_semimajor_axis_metadata)

    _set_target_semimajor_axis_metadata = { "name" : "target_semimajor_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_semimajor_axis.setter
    def target_semimajor_axis(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_semimajor_axis_metadata, newVal)

    _get_target_eccentricity_metadata = { "name" : "target_eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_eccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_eccentricity_metadata)

    _set_target_eccentricity_metadata = { "name" : "target_eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_eccentricity.setter
    def target_eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_eccentricity_metadata, newVal)

    _get_target_inclination_metadata = { "name" : "target_inclination",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_inclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_inclination_metadata)

    _set_target_inclination_metadata = { "name" : "target_inclination",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_inclination.setter
    def target_inclination(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_inclination_metadata, newVal)

    _get_target_right_ascension_of_ascending_node_metadata = { "name" : "target_right_ascension_of_ascending_node",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_right_ascension_of_ascending_node(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_right_ascension_of_ascending_node_metadata)

    _set_target_right_ascension_of_ascending_node_metadata = { "name" : "target_right_ascension_of_ascending_node",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_right_ascension_of_ascending_node.setter
    def target_right_ascension_of_ascending_node(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_right_ascension_of_ascending_node_metadata, newVal)

    _get_target_argument_of_periapsis_metadata = { "name" : "target_argument_of_periapsis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_argument_of_periapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_argument_of_periapsis_metadata)

    _set_target_argument_of_periapsis_metadata = { "name" : "target_argument_of_periapsis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_argument_of_periapsis.setter
    def target_argument_of_periapsis(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_argument_of_periapsis_metadata, newVal)

    _get_target_true_anomaly_metadata = { "name" : "target_true_anomaly",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def target_true_anomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_target_true_anomaly_metadata)

    _set_target_true_anomaly_metadata = { "name" : "target_true_anomaly",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @target_true_anomaly.setter
    def target_true_anomaly(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_target_true_anomaly_metadata, newVal)

    _get_enable_write_departure_delay_to_first_propagate_metadata = { "name" : "enable_write_departure_delay_to_first_propagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_departure_delay_to_first_propagate(self) -> bool:
        """Set this to true to write the departure delay duration before the Lambert transfer to the 'LambertDuration' stopping condition in the first linked propagate segment."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_write_departure_delay_to_first_propagate_metadata)

    _set_enable_write_departure_delay_to_first_propagate_metadata = { "name" : "enable_write_departure_delay_to_first_propagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_departure_delay_to_first_propagate.setter
    def enable_write_departure_delay_to_first_propagate(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_write_departure_delay_to_first_propagate_metadata, newVal)

    _get_disable_first_propagate_non_lambert_stop_conditions_metadata = { "name" : "disable_first_propagate_non_lambert_stop_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def disable_first_propagate_non_lambert_stop_conditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the first propagate segment."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_disable_first_propagate_non_lambert_stop_conditions_metadata)

    _set_disable_first_propagate_non_lambert_stop_conditions_metadata = { "name" : "disable_first_propagate_non_lambert_stop_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @disable_first_propagate_non_lambert_stop_conditions.setter
    def disable_first_propagate_non_lambert_stop_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_disable_first_propagate_non_lambert_stop_conditions_metadata, newVal)

    _get_first_propagate_segment_metadata = { "name" : "first_propagate_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def first_propagate_segment(self) -> str:
        """This is the propagate segment to manipulate that contains the departure delay."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_first_propagate_segment_metadata)

    _set_first_propagate_segment_metadata = { "name" : "first_propagate_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @first_propagate_segment.setter
    def first_propagate_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_first_propagate_segment_metadata, newVal)

    _get_enable_write_to_first_maneuver_metadata = { "name" : "enable_write_to_first_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_to_first_maneuver(self) -> bool:
        """et this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_write_to_first_maneuver_metadata)

    _set_enable_write_to_first_maneuver_metadata = { "name" : "enable_write_to_first_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_to_first_maneuver.setter
    def enable_write_to_first_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_write_to_first_maneuver_metadata, newVal)

    _get_first_maneuver_segment_metadata = { "name" : "first_maneuver_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def first_maneuver_segment(self) -> str:
        """This is the first maneuver segment to manipulate that occurs at the start of the transfer. It is visible when you select Write Initial Inertial Delta-V to Maneuver."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_first_maneuver_segment_metadata)

    _set_first_maneuver_segment_metadata = { "name" : "first_maneuver_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @first_maneuver_segment.setter
    def first_maneuver_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_first_maneuver_segment_metadata, newVal)

    _get_latest_departure_time_metadata = { "name" : "latest_departure_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def latest_departure_time(self) -> float:
        """This is the latest time from the start of the target sequence for the first Lambert maneuver to occur."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_latest_departure_time_metadata)

    _set_latest_departure_time_metadata = { "name" : "latest_departure_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @latest_departure_time.setter
    def latest_departure_time(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_latest_departure_time_metadata, newVal)

    _get_earliest_arrival_time_metadata = { "name" : "earliest_arrival_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def earliest_arrival_time(self) -> float:
        """This is the earliest time from the start of the target sequence that the satellite should arrive at its destination."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_earliest_arrival_time_metadata)

    _set_earliest_arrival_time_metadata = { "name" : "earliest_arrival_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @earliest_arrival_time.setter
    def earliest_arrival_time(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_earliest_arrival_time_metadata, newVal)

    _get_latest_arrival_time_metadata = { "name" : "latest_arrival_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def latest_arrival_time(self) -> float:
        """This is the latest time from the start of the target sequence that the satellite should arrive at its destination."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_latest_arrival_time_metadata)

    _set_latest_arrival_time_metadata = { "name" : "latest_arrival_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @latest_arrival_time.setter
    def latest_arrival_time(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_latest_arrival_time_metadata, newVal)

    _get_grid_search_time_step_metadata = { "name" : "grid_search_time_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def grid_search_time_step(self) -> float:
        """This is the time step between Lambert evaluations for searching over both the departure window and arrival window of time."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_grid_search_time_step_metadata)

    _set_grid_search_time_step_metadata = { "name" : "grid_search_time_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @grid_search_time_step.setter
    def grid_search_time_step(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_grid_search_time_step_metadata, newVal)

    _get_max_revolutions_metadata = { "name" : "max_revolutions",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_revolutions(self) -> int:
        """This is the maximum number of revolutions for the Lambert solution."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_max_revolutions_metadata)

    _set_max_revolutions_metadata = { "name" : "max_revolutions",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_revolutions.setter
    def max_revolutions(self, newVal:int) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_max_revolutions_metadata, newVal)

    _get_central_body_collision_altitude_padding_metadata = { "name" : "central_body_collision_altitude_padding",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def central_body_collision_altitude_padding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_central_body_collision_altitude_padding_metadata)

    _set_central_body_collision_altitude_padding_metadata = { "name" : "central_body_collision_altitude_padding",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @central_body_collision_altitude_padding.setter
    def central_body_collision_altitude_padding(self, newVal:float) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_central_body_collision_altitude_padding_metadata, newVal)

    _get_enable_write_duration_to_second_propagate_metadata = { "name" : "enable_write_duration_to_second_propagate",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_duration_to_second_propagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the second linked propagate segment."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_write_duration_to_second_propagate_metadata)

    _set_enable_write_duration_to_second_propagate_metadata = { "name" : "enable_write_duration_to_second_propagate",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_duration_to_second_propagate.setter
    def enable_write_duration_to_second_propagate(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_write_duration_to_second_propagate_metadata, newVal)

    _get_disable_second_propagate_non_lambert_stop_conditions_metadata = { "name" : "disable_second_propagate_non_lambert_stop_conditions",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def disable_second_propagate_non_lambert_stop_conditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the second propagate segment. This is visible when you select Write Flight Duration to Second Propagate."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_disable_second_propagate_non_lambert_stop_conditions_metadata)

    _set_disable_second_propagate_non_lambert_stop_conditions_metadata = { "name" : "disable_second_propagate_non_lambert_stop_conditions",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @disable_second_propagate_non_lambert_stop_conditions.setter
    def disable_second_propagate_non_lambert_stop_conditions(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_disable_second_propagate_non_lambert_stop_conditions_metadata, newVal)

    _get_second_propagate_segment_metadata = { "name" : "second_propagate_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def second_propagate_segment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration. It is visible when you select Write Flight Duration to Second Propagate."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_second_propagate_segment_metadata)

    _set_second_propagate_segment_metadata = { "name" : "second_propagate_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @second_propagate_segment.setter
    def second_propagate_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_second_propagate_segment_metadata, newVal)

    _get_enable_write_to_second_maneuver_metadata = { "name" : "enable_write_to_second_maneuver",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_write_to_second_maneuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver. It is visible when you select Calculate Second Maneuver At Destination ."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_enable_write_to_second_maneuver_metadata)

    _set_enable_write_to_second_maneuver_metadata = { "name" : "enable_write_to_second_maneuver",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_write_to_second_maneuver.setter
    def enable_write_to_second_maneuver(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_enable_write_to_second_maneuver_metadata, newVal)

    _get_second_maneuver_segment_metadata = { "name" : "second_maneuver_segment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def second_maneuver_segment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer. It is visible when you select Write Final Inertial Delta-V to Maneuver."""
        return self._intf.get_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._get_second_maneuver_segment_metadata)

    _set_second_maneuver_segment_metadata = { "name" : "second_maneuver_segment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @second_maneuver_segment.setter
    def second_maneuver_segment(self, newVal:str) -> None:
        return self._intf.set_property(IProfileLambertSearchProfile._metadata, IProfileLambertSearchProfile._set_second_maneuver_segment_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{22C5891F-AD49-40BE-9C99-58E23CCFD106}", IProfileLambertSearchProfile)
agcls.AgTypeNameMap["IProfileLambertSearchProfile"] = IProfileLambertSearchProfile

class IProfileGoldenSection(IProfile):
    """Properties for a Golden Section profile."""
    _num_methods = 9
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{505EC87D-BE26-4477-B7E8-6586731428D0}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_targeter_graphs" : 1,
                             "get_scripting_tool" : 2,
                             "get_controls" : 3,
                             "get_results" : 4,
                             "get_max_iterations" : 5,
                             "set_max_iterations" : 6,
                             "get_log_file" : 7,
                             "get_enable_display_status" : 8,
                             "set_enable_display_status" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileGoldenSection)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileGoldenSection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileGoldenSection, IProfile)
    
    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_targeter_graphs_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_scripting_tool_metadata)

    _get_controls_metadata = { "name" : "controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def controls(self) -> "GoldenSectionControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_controls_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "GoldenSectionResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_results_metadata)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileGoldenSection._metadata, IProfileGoldenSection._set_max_iterations_metadata, newVal)

    _get_log_file_metadata = { "name" : "log_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def log_file(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_log_file_metadata)

    _get_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_display_status(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IProfileGoldenSection._metadata, IProfileGoldenSection._get_enable_display_status_metadata)

    _set_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_display_status.setter
    def enable_display_status(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileGoldenSection._metadata, IProfileGoldenSection._set_enable_display_status_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{505EC87D-BE26-4477-B7E8-6586731428D0}", IProfileGoldenSection)
agcls.AgTypeNameMap["IProfileGoldenSection"] = IProfileGoldenSection

class IProfileGridSearch(IProfile):
    """Properties for a Grid Search profile."""
    _num_methods = 9
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{EDE96C58-0563-4B05-A7B6-735C3699FE87}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_targeter_graphs" : 1,
                             "get_scripting_tool" : 2,
                             "get_controls" : 3,
                             "get_results" : 4,
                             "get_log_file" : 5,
                             "get_enable_display_status" : 6,
                             "set_enable_display_status" : 7,
                             "get_should_generate_graph" : 8,
                             "set_should_generate_graph" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileGridSearch)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileGridSearch)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileGridSearch, IProfile)
    
    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_targeter_graphs_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_scripting_tool_metadata)

    _get_controls_metadata = { "name" : "controls",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def controls(self) -> "GridSearchControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_controls_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "GridSearchResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_results_metadata)

    _get_log_file_metadata = { "name" : "log_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def log_file(self) -> str:
        """Name of the log file for this profile."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_log_file_metadata)

    _get_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable_display_status(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_enable_display_status_metadata)

    _set_enable_display_status_metadata = { "name" : "enable_display_status",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable_display_status.setter
    def enable_display_status(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileGridSearch._metadata, IProfileGridSearch._set_enable_display_status_metadata, newVal)

    _get_should_generate_graph_metadata = { "name" : "should_generate_graph",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def should_generate_graph(self) -> bool:
        """If true, a plot is automatically generate the selected result value versus the control value for the grid search when the profile runs."""
        return self._intf.get_property(IProfileGridSearch._metadata, IProfileGridSearch._get_should_generate_graph_metadata)

    _set_should_generate_graph_metadata = { "name" : "should_generate_graph",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @should_generate_graph.setter
    def should_generate_graph(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileGridSearch._metadata, IProfileGridSearch._set_should_generate_graph_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{EDE96C58-0563-4B05-A7B6-735C3699FE87}", IProfileGridSearch)
agcls.AgTypeNameMap["IProfileGridSearch"] = IProfileGridSearch

class ICalcObjectLinkEmbedControlCollection(object):
    """Collection of link/embed calculation objects."""
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{4294354A-2EF8-4D34-8FC9-DD360DFCF3EF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "item" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "cut" : 6,
                             "paste" : 7,
                             "insert_copy" : 8,
                             "get_item_by_index" : 9,
                             "get_item_by_name" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICalcObjectLinkEmbedControlCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICalcObjectLinkEmbedControlCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICalcObjectLinkEmbedControlCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IComponentLinkEmbedControl":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, agcom.LONG, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgEnum_arg(COMPONENT_LINK_EMBED_CONTROL_REFERENCE_TYPE), agmarshall.AgInterface_out_arg,) }
    def add(self, name:str, refType:"COMPONENT_LINK_EMBED_CONTROL_REFERENCE_TYPE") -> "IComponentLinkEmbedControl":
        """Add a link/embed calc object to the collection."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._add_metadata, name, refType, out_arg())

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "IComponentLinkEmbedControl":
        """Return a link/embed calc object."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._item_metadata, indexOrName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a link/embed calc object from the collection."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._get_count_metadata)

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy a link/embed calc object to the clipboard and removes the calc object from the list."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "IComponentLinkEmbedControl":
        """Pastes a link/embed calc object from the clipboard into the list."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentLinkEmbedControl"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, calcObj:"IComponentLinkEmbedControl") -> "IComponentLinkEmbedControl":
        """Copy a link/embed calc object and inserts the copy into the list."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._insert_copy_metadata, calcObj, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "IComponentLinkEmbedControl":
        """Retrieve a link/embed calc object found by the index."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "IComponentLinkEmbedControl":
        """Retrieve a link/embed calc object found by the name."""
        return self._intf.invoke(ICalcObjectLinkEmbedControlCollection._metadata, ICalcObjectLinkEmbedControlCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{4294354A-2EF8-4D34-8FC9-DD360DFCF3EF}", ICalcObjectLinkEmbedControlCollection)
agcls.AgTypeNameMap["ICalcObjectLinkEmbedControlCollection"] = ICalcObjectLinkEmbedControlCollection

class IProfileBisection(IProfile):
    """Properties of Single Parameter Bisection profile."""
    _num_methods = 8
    _vtable_offset = IProfile._vtable_offset + IProfile._num_methods
    _metadata = {
        "uuid" : "{F0B2CF95-1CC9-4394-9A19-00FF41B8E0FC}",
        "vtable_reference" : IProfile._vtable_offset + IProfile._num_methods - 1,
        "method_offsets" : { "get_control_parameters" : 1,
                             "get_results" : 2,
                             "get_targeter_graphs" : 3,
                             "get_scripting_tool" : 4,
                             "get_reset_controls_before_run" : 5,
                             "set_reset_controls_before_run" : 6,
                             "get_maximum_iterations" : 7,
                             "set_maximum_iterations" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IProfileBisection)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfile._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IProfileBisection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IProfileBisection, IProfile)
    
    _get_control_parameters_metadata = { "name" : "control_parameters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def control_parameters(self) -> "BisectionControlCollection":
        """The list of control parameters defined for the profile."""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_control_parameters_metadata)

    _get_results_metadata = { "name" : "results",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def results(self) -> "BisectionResultCollection":
        """The list of results defined for the profile."""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_results_metadata)

    _get_targeter_graphs_metadata = { "name" : "targeter_graphs",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def targeter_graphs(self) -> "TargeterGraphCollection":
        """Graphs"""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_targeter_graphs_metadata)

    _get_scripting_tool_metadata = { "name" : "scripting_tool",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def scripting_tool(self) -> "ScriptingTool":
        """Return the Scripting tool for the sequence."""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_scripting_tool_metadata)

    _get_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def reset_controls_before_run(self) -> bool:
        """Reset controls before each run."""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_reset_controls_before_run_metadata)

    _set_reset_controls_before_run_metadata = { "name" : "reset_controls_before_run",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @reset_controls_before_run.setter
    def reset_controls_before_run(self, newVal:bool) -> None:
        return self._intf.set_property(IProfileBisection._metadata, IProfileBisection._set_reset_controls_before_run_metadata, newVal)

    _get_maximum_iterations_metadata = { "name" : "maximum_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def maximum_iterations(self) -> int:
        """The maximum number of iterations allowed."""
        return self._intf.get_property(IProfileBisection._metadata, IProfileBisection._get_maximum_iterations_metadata)

    _set_maximum_iterations_metadata = { "name" : "maximum_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @maximum_iterations.setter
    def maximum_iterations(self, newVal:int) -> None:
        return self._intf.set_property(IProfileBisection._metadata, IProfileBisection._set_maximum_iterations_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{F0B2CF95-1CC9-4394-9A19-00FF41B8E0FC}", IProfileBisection)
agcls.AgTypeNameMap["IProfileBisection"] = IProfileBisection

class IBisectionControl(object):
    """Properties for control parameters of a Bisection Search profile."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F60B718A-09E3-4C6B-A05D-3562CFB5EF4E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_enable" : 1,
                             "set_enable" : 2,
                             "get_name" : 3,
                             "get_parent_name" : 4,
                             "get_initial_value" : 5,
                             "get_current_value" : 6,
                             "set_current_value" : 7,
                             "get_bound_search_step" : 8,
                             "set_bound_search_step" : 9,
                             "get_use_custom_display_unit" : 10,
                             "set_use_custom_display_unit" : 11,
                             "get_custom_display_unit" : 12,
                             "set_custom_display_unit" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBisectionControl)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBisectionControl)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBisectionControl, None)
    
    _get_enable_metadata = { "name" : "enable",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def enable(self) -> bool:
        """If true, the variable is being used."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_enable_metadata)

    _set_enable_metadata = { "name" : "enable",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @enable.setter
    def enable(self, newVal:bool) -> None:
        return self._intf.set_property(IBisectionControl._metadata, IBisectionControl._set_enable_metadata, newVal)

    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The name of the parameter."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_name_metadata)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The name of the segment to which the parameter belongs."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_parent_name_metadata)

    _get_initial_value_metadata = { "name" : "initial_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_value(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_initial_value_metadata)

    _get_current_value_metadata = { "name" : "current_value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def current_value(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_current_value_metadata)

    _set_current_value_metadata = { "name" : "current_value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @current_value.setter
    def current_value(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBisectionControl._metadata, IBisectionControl._set_current_value_metadata, newVal)

    _get_bound_search_step_metadata = { "name" : "bound_search_step",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def bound_search_step(self) -> typing.Any:
        """Dimension depends on context."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_bound_search_step_metadata)

    _set_bound_search_step_metadata = { "name" : "bound_search_step",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @bound_search_step.setter
    def bound_search_step(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IBisectionControl._metadata, IBisectionControl._set_bound_search_step_metadata, newVal)

    _get_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_custom_display_unit(self) -> bool:
        """If true, allows display of values in another unit."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_use_custom_display_unit_metadata)

    _set_use_custom_display_unit_metadata = { "name" : "use_custom_display_unit",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_custom_display_unit.setter
    def use_custom_display_unit(self, newVal:bool) -> None:
        return self._intf.set_property(IBisectionControl._metadata, IBisectionControl._set_use_custom_display_unit_metadata, newVal)

    _get_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def custom_display_unit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        return self._intf.get_property(IBisectionControl._metadata, IBisectionControl._get_custom_display_unit_metadata)

    _set_custom_display_unit_metadata = { "name" : "custom_display_unit",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @custom_display_unit.setter
    def custom_display_unit(self, newVal:str) -> None:
        return self._intf.set_property(IBisectionControl._metadata, IBisectionControl._set_custom_display_unit_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{F60B718A-09E3-4C6B-A05D-3562CFB5EF4E}", IBisectionControl)
agcls.AgTypeNameMap["IBisectionControl"] = IBisectionControl

class IStateCalcHeightAboveTerrain(object):
    """Interface for StateCalcHeightAboveTerrain"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30A4FAC3-1250-456A-BB29-689AA50F8D75}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcHeightAboveTerrain)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcHeightAboveTerrain)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcHeightAboveTerrain, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IStateCalcHeightAboveTerrain._metadata, IStateCalcHeightAboveTerrain._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IStateCalcHeightAboveTerrain._metadata, IStateCalcHeightAboveTerrain._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30A4FAC3-1250-456A-BB29-689AA50F8D75}", IStateCalcHeightAboveTerrain)
agcls.AgTypeNameMap["IStateCalcHeightAboveTerrain"] = IStateCalcHeightAboveTerrain

class IStateCalcEpoch(object):
    """Properties for an Epoch calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F23ADE47-91EF-41B9-9606-DA034C50F69D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEpoch)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEpoch)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEpoch, None)
    

agcls.AgClassCatalog.add_catalog_entry("{F23ADE47-91EF-41B9-9606-DA034C50F69D}", IStateCalcEpoch)
agcls.AgTypeNameMap["IStateCalcEpoch"] = IStateCalcEpoch

class IStateCalcOrbitDelaunayG(object):
    """Interface for AsStateCalcOrbitDelaunayG"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8527A30E-E743-4040-8B0D-7AE1EB237279}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitDelaunayG)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitDelaunayG)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitDelaunayG, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IStateCalcOrbitDelaunayG._metadata, IStateCalcOrbitDelaunayG._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IStateCalcOrbitDelaunayG._metadata, IStateCalcOrbitDelaunayG._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @property
    def element_type(self) -> "ELEMENT":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcOrbitDelaunayG._metadata, IStateCalcOrbitDelaunayG._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @element_type.setter
    def element_type(self, inVal:"ELEMENT") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IStateCalcOrbitDelaunayG._metadata, IStateCalcOrbitDelaunayG._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8527A30E-E743-4040-8B0D-7AE1EB237279}", IStateCalcOrbitDelaunayG)
agcls.AgTypeNameMap["IStateCalcOrbitDelaunayG"] = IStateCalcOrbitDelaunayG

class IStateCalcOrbitDelaunayH(object):
    """Interface for AsStateCalcOrbitDelaunayH"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{01E122E4-2B6D-4301-81D2-B83B6C169CB5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitDelaunayH)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitDelaunayH)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitDelaunayH, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IStateCalcOrbitDelaunayH._metadata, IStateCalcOrbitDelaunayH._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IStateCalcOrbitDelaunayH._metadata, IStateCalcOrbitDelaunayH._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @property
    def element_type(self) -> "ELEMENT":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcOrbitDelaunayH._metadata, IStateCalcOrbitDelaunayH._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @element_type.setter
    def element_type(self, inVal:"ELEMENT") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IStateCalcOrbitDelaunayH._metadata, IStateCalcOrbitDelaunayH._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{01E122E4-2B6D-4301-81D2-B83B6C169CB5}", IStateCalcOrbitDelaunayH)
agcls.AgTypeNameMap["IStateCalcOrbitDelaunayH"] = IStateCalcOrbitDelaunayH

class IStateCalcOrbitDelaunayL(object):
    """Interface for AsStateCalcOrbitDelaunayL"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10C517CA-1CF0-45FF-B36E-3E3181269745}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitDelaunayL)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitDelaunayL)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitDelaunayL, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IStateCalcOrbitDelaunayL._metadata, IStateCalcOrbitDelaunayL._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IStateCalcOrbitDelaunayL._metadata, IStateCalcOrbitDelaunayL._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @property
    def element_type(self) -> "ELEMENT":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcOrbitDelaunayL._metadata, IStateCalcOrbitDelaunayL._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @element_type.setter
    def element_type(self, inVal:"ELEMENT") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IStateCalcOrbitDelaunayL._metadata, IStateCalcOrbitDelaunayL._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{10C517CA-1CF0-45FF-B36E-3E3181269745}", IStateCalcOrbitDelaunayL)
agcls.AgTypeNameMap["IStateCalcOrbitDelaunayL"] = IStateCalcOrbitDelaunayL

class IStateCalcOrbitSemiLatusRectum(object):
    """Interface for AsStateCalcOrbitSemiLatusRectum"""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{06396376-8F96-419A-86D4-32298E6A6087}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitSemiLatusRectum)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitSemiLatusRectum)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitSemiLatusRectum, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Central Body used for calculation"""
        return self._intf.get_property(IStateCalcOrbitSemiLatusRectum._metadata, IStateCalcOrbitSemiLatusRectum._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        """Central Body used for calculation"""
        return self._intf.set_property(IStateCalcOrbitSemiLatusRectum._metadata, IStateCalcOrbitSemiLatusRectum._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @property
    def element_type(self) -> "ELEMENT":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcOrbitSemiLatusRectum._metadata, IStateCalcOrbitSemiLatusRectum._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ELEMENT),) }
    @element_type.setter
    def element_type(self, inVal:"ELEMENT") -> None:
        """Choice of osculating or mean elements"""
        return self._intf.set_property(IStateCalcOrbitSemiLatusRectum._metadata, IStateCalcOrbitSemiLatusRectum._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{06396376-8F96-419A-86D4-32298E6A6087}", IStateCalcOrbitSemiLatusRectum)
agcls.AgTypeNameMap["IStateCalcOrbitSemiLatusRectum"] = IStateCalcOrbitSemiLatusRectum

class IStateCalcJacobiConstant(object):
    """Properties for a Jacobi Constant calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{12857E60-E0BF-49BE-84EA-F9A0C73DB557}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcJacobiConstant)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcJacobiConstant)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcJacobiConstant, None)
    

agcls.AgClassCatalog.add_catalog_entry("{12857E60-E0BF-49BE-84EA-F9A0C73DB557}", IStateCalcJacobiConstant)
agcls.AgTypeNameMap["IStateCalcJacobiConstant"] = IStateCalcJacobiConstant

class IStateCalcCartesianElem(object):
    """Properties for a Cartesian Element calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{43611884-2507-4D9B-AFF2-9BC5AA0786BD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCartesianElem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCartesianElem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCartesianElem, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcCartesianElem._metadata, IStateCalcCartesianElem._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCartesianElem._metadata, IStateCalcCartesianElem._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{43611884-2507-4D9B-AFF2-9BC5AA0786BD}", IStateCalcCartesianElem)
agcls.AgTypeNameMap["IStateCalcCartesianElem"] = IStateCalcCartesianElem

class IStateCalcCartSTMElem(object):
    """Properties for a Cartesian STM Element calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{72B246C3-618A-40B7-8501-C39BF07E4B95}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_final_var" : 3,
                             "set_final_var" : 4,
                             "get_init_var" : 5,
                             "set_init_var" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCartSTMElem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCartSTMElem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCartSTMElem, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._set_coord_system_name_metadata, inVal)

    _get_final_var_metadata = { "name" : "final_var",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @property
    def final_var(self) -> "STM_PERT_VARIABLES":
        """The final variation variable."""
        return self._intf.get_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._get_final_var_metadata)

    _set_final_var_metadata = { "name" : "final_var",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @final_var.setter
    def final_var(self, inVal:"STM_PERT_VARIABLES") -> None:
        return self._intf.set_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._set_final_var_metadata, inVal)

    _get_init_var_metadata = { "name" : "init_var",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @property
    def init_var(self) -> "STM_PERT_VARIABLES":
        """The initial variation variable."""
        return self._intf.get_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._get_init_var_metadata)

    _set_init_var_metadata = { "name" : "init_var",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @init_var.setter
    def init_var(self, inVal:"STM_PERT_VARIABLES") -> None:
        return self._intf.set_property(IStateCalcCartSTMElem._metadata, IStateCalcCartSTMElem._set_init_var_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{72B246C3-618A-40B7-8501-C39BF07E4B95}", IStateCalcCartSTMElem)
agcls.AgTypeNameMap["IStateCalcCartSTMElem"] = IStateCalcCartSTMElem

class IStateCalcSTMEigenval(object):
    """Properties for an STM Eigenvalue calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{24838E22-D7CE-40FF-8268-9E72AE39467B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_eigenvalue_number" : 3,
                             "set_eigenvalue_number" : 4,
                             "get_eigenvalue_complex_part" : 5,
                             "set_eigenvalue_complex_part" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSTMEigenval)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSTMEigenval)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSTMEigenval, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._set_coord_system_name_metadata, inVal)

    _get_eigenvalue_number_metadata = { "name" : "eigenvalue_number",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STM_EIGEN_NUMBER),) }
    @property
    def eigenvalue_number(self) -> "STM_EIGEN_NUMBER":
        """The number identifying one of the six Eigenvalues."""
        return self._intf.get_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._get_eigenvalue_number_metadata)

    _set_eigenvalue_number_metadata = { "name" : "eigenvalue_number",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STM_EIGEN_NUMBER),) }
    @eigenvalue_number.setter
    def eigenvalue_number(self, inVal:"STM_EIGEN_NUMBER") -> None:
        return self._intf.set_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._set_eigenvalue_number_metadata, inVal)

    _get_eigenvalue_complex_part_metadata = { "name" : "eigenvalue_complex_part",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(COMPLEX_NUMBER),) }
    @property
    def eigenvalue_complex_part(self) -> "COMPLEX_NUMBER":
        """Whether this value represents the real or imaginary part of the Eigenvalue."""
        return self._intf.get_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._get_eigenvalue_complex_part_metadata)

    _set_eigenvalue_complex_part_metadata = { "name" : "eigenvalue_complex_part",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(COMPLEX_NUMBER),) }
    @eigenvalue_complex_part.setter
    def eigenvalue_complex_part(self, inVal:"COMPLEX_NUMBER") -> None:
        return self._intf.set_property(IStateCalcSTMEigenval._metadata, IStateCalcSTMEigenval._set_eigenvalue_complex_part_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{24838E22-D7CE-40FF-8268-9E72AE39467B}", IStateCalcSTMEigenval)
agcls.AgTypeNameMap["IStateCalcSTMEigenval"] = IStateCalcSTMEigenval

class IStateCalcSTMEigenvecElem(object):
    """Properties for an STM Eigenvector element calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_eigenvector_number" : 3,
                             "set_eigenvector_number" : 4,
                             "get_state_variable" : 5,
                             "set_state_variable" : 6,
                             "get_eigenvector_complex_part" : 7,
                             "set_eigenvector_complex_part" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSTMEigenvecElem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSTMEigenvecElem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSTMEigenvecElem, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._set_coord_system_name_metadata, inVal)

    _get_eigenvector_number_metadata = { "name" : "eigenvector_number",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STM_EIGEN_NUMBER),) }
    @property
    def eigenvector_number(self) -> "STM_EIGEN_NUMBER":
        """The number identifying one of the six Eigenvectors."""
        return self._intf.get_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._get_eigenvector_number_metadata)

    _set_eigenvector_number_metadata = { "name" : "eigenvector_number",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STM_EIGEN_NUMBER),) }
    @eigenvector_number.setter
    def eigenvector_number(self, inVal:"STM_EIGEN_NUMBER") -> None:
        return self._intf.set_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._set_eigenvector_number_metadata, inVal)

    _get_state_variable_metadata = { "name" : "state_variable",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @property
    def state_variable(self) -> "STM_PERT_VARIABLES":
        """The variable identifying the component within an Eigenvector."""
        return self._intf.get_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._get_state_variable_metadata)

    _set_state_variable_metadata = { "name" : "state_variable",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(STM_PERT_VARIABLES),) }
    @state_variable.setter
    def state_variable(self, inVal:"STM_PERT_VARIABLES") -> None:
        return self._intf.set_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._set_state_variable_metadata, inVal)

    _get_eigenvector_complex_part_metadata = { "name" : "eigenvector_complex_part",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(COMPLEX_NUMBER),) }
    @property
    def eigenvector_complex_part(self) -> "COMPLEX_NUMBER":
        """Whether this value represents the real or imaginary part of an Eigenvector element."""
        return self._intf.get_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._get_eigenvector_complex_part_metadata)

    _set_eigenvector_complex_part_metadata = { "name" : "eigenvector_complex_part",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(COMPLEX_NUMBER),) }
    @eigenvector_complex_part.setter
    def eigenvector_complex_part(self, inVal:"COMPLEX_NUMBER") -> None:
        return self._intf.set_property(IStateCalcSTMEigenvecElem._metadata, IStateCalcSTMEigenvecElem._set_eigenvector_complex_part_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}", IStateCalcSTMEigenvecElem)
agcls.AgTypeNameMap["IStateCalcSTMEigenvecElem"] = IStateCalcSTMEigenvecElem

class IStateCalcEnvironment(object):
    """Properties for an Environment calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_atmos_model_name" : 3,
                             "set_atmos_model_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEnvironment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEnvironment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEnvironment, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEnvironment._metadata, IStateCalcEnvironment._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEnvironment._metadata, IStateCalcEnvironment._set_central_body_name_metadata, inVal)

    _get_atmos_model_name_metadata = { "name" : "atmos_model_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_model_name(self) -> str:
        """The atmospheric density model of the component."""
        return self._intf.get_property(IStateCalcEnvironment._metadata, IStateCalcEnvironment._get_atmos_model_name_metadata)

    _set_atmos_model_name_metadata = { "name" : "atmos_model_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_model_name.setter
    def atmos_model_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEnvironment._metadata, IStateCalcEnvironment._set_atmos_model_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}", IStateCalcEnvironment)
agcls.AgTypeNameMap["IStateCalcEnvironment"] = IStateCalcEnvironment

class IStateCalcEquinoctialElem(object):
    """Properties for an Equinoctial Element calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A63BA51C-CE64-410D-832F-7BDCE13E5069}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEquinoctialElem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEquinoctialElem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEquinoctialElem, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcEquinoctialElem._metadata, IStateCalcEquinoctialElem._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEquinoctialElem._metadata, IStateCalcEquinoctialElem._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcEquinoctialElem._metadata, IStateCalcEquinoctialElem._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcEquinoctialElem._metadata, IStateCalcEquinoctialElem._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A63BA51C-CE64-410D-832F-7BDCE13E5069}", IStateCalcEquinoctialElem)
agcls.AgTypeNameMap["IStateCalcEquinoctialElem"] = IStateCalcEquinoctialElem

class IStateCalcDamageFlux(object):
    """Interface for AgAsStateCalcDamageFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E7EBA7C-121F-4649-8599-A222F65BA10B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDamageFlux)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDamageFlux)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDamageFlux, None)
    

agcls.AgClassCatalog.add_catalog_entry("{5E7EBA7C-121F-4649-8599-A222F65BA10B}", IStateCalcDamageFlux)
agcls.AgTypeNameMap["IStateCalcDamageFlux"] = IStateCalcDamageFlux

class IStateCalcDamageMassFlux(object):
    """Interface for AgAsStateCalcDamageMassFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDamageMassFlux)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDamageMassFlux)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDamageMassFlux, None)
    

agcls.AgClassCatalog.add_catalog_entry("{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}", IStateCalcDamageMassFlux)
agcls.AgTypeNameMap["IStateCalcDamageMassFlux"] = IStateCalcDamageMassFlux

class IStateCalcMagnitudeFieldDipoleL(object):
    """Interface for AgAsStateCalcMagFieldDipoleL"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMagnitudeFieldDipoleL)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMagnitudeFieldDipoleL)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMagnitudeFieldDipoleL, None)
    

agcls.AgClassCatalog.add_catalog_entry("{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}", IStateCalcMagnitudeFieldDipoleL)
agcls.AgTypeNameMap["IStateCalcMagnitudeFieldDipoleL"] = IStateCalcMagnitudeFieldDipoleL

class IStateCalcSEETMagnitudeFieldFieldLineSepAngle(object):
    """Properties for a SEETMagFieldFieldLineSepAngle calculation object."""
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_target_object" : 1, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSEETMagnitudeFieldFieldLineSepAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSEETMagnitudeFieldFieldLineSepAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSEETMagnitudeFieldFieldLineSepAngle, None)
    
    _get_target_object_metadata = { "name" : "target_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def target_object(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcSEETMagnitudeFieldFieldLineSepAngle._metadata, IStateCalcSEETMagnitudeFieldFieldLineSepAngle._get_target_object_metadata)


agcls.AgClassCatalog.add_catalog_entry("{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}", IStateCalcSEETMagnitudeFieldFieldLineSepAngle)
agcls.AgTypeNameMap["IStateCalcSEETMagnitudeFieldFieldLineSepAngle"] = IStateCalcSEETMagnitudeFieldFieldLineSepAngle

class IStateCalcImpactFlux(object):
    """Interface for AgAsStateCalcImpactFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{70F6FCD6-139C-4166-B242-61652F690A89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcImpactFlux)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcImpactFlux)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcImpactFlux, None)
    

agcls.AgClassCatalog.add_catalog_entry("{70F6FCD6-139C-4166-B242-61652F690A89}", IStateCalcImpactFlux)
agcls.AgTypeNameMap["IStateCalcImpactFlux"] = IStateCalcImpactFlux

class IStateCalcImpactMassFlux(object):
    """Interface for AgAsStateCalcImpactMassFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67D77299-1936-4E9A-A44F-C155686E4DB2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcImpactMassFlux)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcImpactMassFlux)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcImpactMassFlux, None)
    

agcls.AgClassCatalog.add_catalog_entry("{67D77299-1936-4E9A-A44F-C155686E4DB2}", IStateCalcImpactMassFlux)
agcls.AgTypeNameMap["IStateCalcImpactMassFlux"] = IStateCalcImpactMassFlux

class IStateCalcSEETSAAFlux(object):
    """Interface for AgAsStateCalcSEETSAAFlux"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3C633703-2759-4894-96EA-F6E3C2F98AA1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSEETSAAFlux)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSEETSAAFlux)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSEETSAAFlux, None)
    

agcls.AgClassCatalog.add_catalog_entry("{3C633703-2759-4894-96EA-F6E3C2F98AA1}", IStateCalcSEETSAAFlux)
agcls.AgTypeNameMap["IStateCalcSEETSAAFlux"] = IStateCalcSEETSAAFlux

class IStateCalcSEETVehTemp(object):
    """Interface for AgAsStateCalcSEETVehTemp"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSEETVehTemp)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSEETVehTemp)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSEETVehTemp, None)
    

agcls.AgClassCatalog.add_catalog_entry("{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}", IStateCalcSEETVehTemp)
agcls.AgTypeNameMap["IStateCalcSEETVehTemp"] = IStateCalcSEETVehTemp

class IStateCalcCloseApproachBearing(object):
    """Properties for a CloseApproachBearing calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E7717197-6955-4ECB-BF98-DA50AD7547F3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachBearing)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachBearing)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachBearing, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachBearing._metadata, IStateCalcCloseApproachBearing._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachBearing._metadata, IStateCalcCloseApproachBearing._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachBearing._metadata, IStateCalcCloseApproachBearing._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachBearing._metadata, IStateCalcCloseApproachBearing._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachBearing._metadata, IStateCalcCloseApproachBearing._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E7717197-6955-4ECB-BF98-DA50AD7547F3}", IStateCalcCloseApproachBearing)
agcls.AgTypeNameMap["IStateCalcCloseApproachBearing"] = IStateCalcCloseApproachBearing

class IStateCalcCloseApproachMagnitude(object):
    """Properties for a CloseApproachMagnitude calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DDACF6D7-29C0-46BB-A21A-123580E25161}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachMagnitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachMagnitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachMagnitude, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachMagnitude._metadata, IStateCalcCloseApproachMagnitude._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachMagnitude._metadata, IStateCalcCloseApproachMagnitude._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachMagnitude._metadata, IStateCalcCloseApproachMagnitude._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachMagnitude._metadata, IStateCalcCloseApproachMagnitude._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachMagnitude._metadata, IStateCalcCloseApproachMagnitude._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{DDACF6D7-29C0-46BB-A21A-123580E25161}", IStateCalcCloseApproachMagnitude)
agcls.AgTypeNameMap["IStateCalcCloseApproachMagnitude"] = IStateCalcCloseApproachMagnitude

class IStateCalcCloseApproachTheta(object):
    """Properties for a CloseApproachTheta calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2F89E7F5-154B-4CED-807A-040A064F1A14}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachTheta)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachTheta)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachTheta, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachTheta._metadata, IStateCalcCloseApproachTheta._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachTheta._metadata, IStateCalcCloseApproachTheta._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachTheta._metadata, IStateCalcCloseApproachTheta._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachTheta._metadata, IStateCalcCloseApproachTheta._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachTheta._metadata, IStateCalcCloseApproachTheta._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{2F89E7F5-154B-4CED-807A-040A064F1A14}", IStateCalcCloseApproachTheta)
agcls.AgTypeNameMap["IStateCalcCloseApproachTheta"] = IStateCalcCloseApproachTheta

class IStateCalcCloseApproachX(object):
    """Properties for a CloseApproachX calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B57EFFE4-9742-4F26-989C-A8D64549F8ED}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachX)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachX)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachX, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachX._metadata, IStateCalcCloseApproachX._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachX._metadata, IStateCalcCloseApproachX._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachX._metadata, IStateCalcCloseApproachX._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachX._metadata, IStateCalcCloseApproachX._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachX._metadata, IStateCalcCloseApproachX._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B57EFFE4-9742-4F26-989C-A8D64549F8ED}", IStateCalcCloseApproachX)
agcls.AgTypeNameMap["IStateCalcCloseApproachX"] = IStateCalcCloseApproachX

class IStateCalcCloseApproachY(object):
    """Properties for a CloseApproachY calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachY)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachY)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachY, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachY._metadata, IStateCalcCloseApproachY._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachY._metadata, IStateCalcCloseApproachY._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachY._metadata, IStateCalcCloseApproachY._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachY._metadata, IStateCalcCloseApproachY._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachY._metadata, IStateCalcCloseApproachY._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}", IStateCalcCloseApproachY)
agcls.AgTypeNameMap["IStateCalcCloseApproachY"] = IStateCalcCloseApproachY

class IStateCalcCloseApproachCosBearing(object):
    """Properties for a CosineOfCloseApproachBearing calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ED9F8425-E6C7-49D0-842F-84FE096E6C27}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCloseApproachCosBearing)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCloseApproachCosBearing)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCloseApproachCosBearing, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCloseApproachCosBearing._metadata, IStateCalcCloseApproachCosBearing._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCloseApproachCosBearing._metadata, IStateCalcCloseApproachCosBearing._set_central_body_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCloseApproachCosBearing._metadata, IStateCalcCloseApproachCosBearing._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCloseApproachCosBearing._metadata, IStateCalcCloseApproachCosBearing._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCloseApproachCosBearing._metadata, IStateCalcCloseApproachCosBearing._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{ED9F8425-E6C7-49D0-842F-84FE096E6C27}", IStateCalcCloseApproachCosBearing)
agcls.AgTypeNameMap["IStateCalcCloseApproachCosBearing"] = IStateCalcCloseApproachCosBearing

class IStateCalcRelGroundTrackError(object):
    """Properties for a RelGroundTrackError calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_direction" : 3,
                             "set_direction" : 4,
                             "get_signed" : 5,
                             "set_signed" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelGroundTrackError)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelGroundTrackError)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelGroundTrackError, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._set_central_body_name_metadata, inVal)

    _get_direction_metadata = { "name" : "direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_DIRECTION),) }
    @property
    def direction(self) -> "CALC_OBJECT_DIRECTION":
        """The direction to search for the desired value."""
        return self._intf.get_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._get_direction_metadata)

    _set_direction_metadata = { "name" : "direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_DIRECTION),) }
    @direction.setter
    def direction(self, inVal:"CALC_OBJECT_DIRECTION") -> None:
        return self._intf.set_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._set_direction_metadata, inVal)

    _get_signed_metadata = { "name" : "signed",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def signed(self) -> bool:
        """True if signed based on RxV."""
        return self._intf.get_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._get_signed_metadata)

    _set_signed_metadata = { "name" : "signed",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @signed.setter
    def signed(self, inVal:bool) -> None:
        return self._intf.set_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._set_signed_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelGroundTrackError._metadata, IStateCalcRelGroundTrackError._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}", IStateCalcRelGroundTrackError)
agcls.AgTypeNameMap["IStateCalcRelGroundTrackError"] = IStateCalcRelGroundTrackError

class IStateCalcRelAtAOLMaster(object):
    """Properties for a RelativeAtAOL calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8864FF20-53E7-4609-86A7-C9F7B113B651}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_calc_object_name" : 3,
                             "set_calc_object_name" : 4,
                             "get_direction" : 5,
                             "set_direction" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelAtAOLMaster)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelAtAOLMaster)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelAtAOLMaster, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._set_central_body_name_metadata, inVal)

    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object of interest."""
        return self._intf.get_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._set_calc_object_name_metadata, inVal)

    _get_direction_metadata = { "name" : "direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_DIRECTION),) }
    @property
    def direction(self) -> "CALC_OBJECT_DIRECTION":
        """The direction to search for the desired value."""
        return self._intf.get_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._get_direction_metadata)

    _set_direction_metadata = { "name" : "direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_DIRECTION),) }
    @direction.setter
    def direction(self, inVal:"CALC_OBJECT_DIRECTION") -> None:
        return self._intf.set_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._set_direction_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelAtAOLMaster._metadata, IStateCalcRelAtAOLMaster._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8864FF20-53E7-4609-86A7-C9F7B113B651}", IStateCalcRelAtAOLMaster)
agcls.AgTypeNameMap["IStateCalcRelAtAOLMaster"] = IStateCalcRelAtAOLMaster

class IStateCalcDeltaFromMaster(object):
    """Properties for a Rel Mean Mean Anomaly calculation object."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_reference_selection" : 3,
                             "set_reference_selection" : 4,
                             "get_reference" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDeltaFromMaster)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDeltaFromMaster)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDeltaFromMaster, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object of interest."""
        return self._intf.get_property(IStateCalcDeltaFromMaster._metadata, IStateCalcDeltaFromMaster._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDeltaFromMaster._metadata, IStateCalcDeltaFromMaster._set_calc_object_name_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcDeltaFromMaster._metadata, IStateCalcDeltaFromMaster._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcDeltaFromMaster._metadata, IStateCalcDeltaFromMaster._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcDeltaFromMaster._metadata, IStateCalcDeltaFromMaster._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}", IStateCalcDeltaFromMaster)
agcls.AgTypeNameMap["IStateCalcDeltaFromMaster"] = IStateCalcDeltaFromMaster

class IStateCalcLonDriftRate(object):
    """Properties for a Longitude Drift Rate calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D464DED3-3358-452D-B55C-2B017D04C8F9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcLonDriftRate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcLonDriftRate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcLonDriftRate, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcLonDriftRate._metadata, IStateCalcLonDriftRate._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcLonDriftRate._metadata, IStateCalcLonDriftRate._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcLonDriftRate._metadata, IStateCalcLonDriftRate._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcLonDriftRate._metadata, IStateCalcLonDriftRate._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D464DED3-3358-452D-B55C-2B017D04C8F9}", IStateCalcLonDriftRate)
agcls.AgTypeNameMap["IStateCalcLonDriftRate"] = IStateCalcLonDriftRate

class IStateCalcMeanEarthLon(object):
    """Properties for a Mean Earth Longitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49D6969B-42BD-4E55-9016-0F951FF34DEE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMeanEarthLon)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMeanEarthLon)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMeanEarthLon, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcMeanEarthLon._metadata, IStateCalcMeanEarthLon._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMeanEarthLon._metadata, IStateCalcMeanEarthLon._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{49D6969B-42BD-4E55-9016-0F951FF34DEE}", IStateCalcMeanEarthLon)
agcls.AgTypeNameMap["IStateCalcMeanEarthLon"] = IStateCalcMeanEarthLon

class IStateCalcRectifiedLon(object):
    """Properties for a RectifiedLon calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FD75BCCA-8F5C-49BA-AADE-040E1186385D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRectifiedLon)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRectifiedLon)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRectifiedLon, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRectifiedLon._metadata, IStateCalcRectifiedLon._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRectifiedLon._metadata, IStateCalcRectifiedLon._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{FD75BCCA-8F5C-49BA-AADE-040E1186385D}", IStateCalcRectifiedLon)
agcls.AgTypeNameMap["IStateCalcRectifiedLon"] = IStateCalcRectifiedLon

class IStateCalcTrueLongitude(object):
    """Properties for a TrueLongitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8D80A622-E99D-407B-A30D-44EE0B7FF577}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTrueLongitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTrueLongitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTrueLongitude, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcTrueLongitude._metadata, IStateCalcTrueLongitude._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTrueLongitude._metadata, IStateCalcTrueLongitude._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8D80A622-E99D-407B-A30D-44EE0B7FF577}", IStateCalcTrueLongitude)
agcls.AgTypeNameMap["IStateCalcTrueLongitude"] = IStateCalcTrueLongitude

class IStateCalcGeodeticTrueLongitude(object):
    """Properties for a GeodeticTrueLongitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{76BD7923-C04A-4789-885E-4643A30E9BB2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGeodeticTrueLongitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGeodeticTrueLongitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGeodeticTrueLongitude, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGeodeticTrueLongitude._metadata, IStateCalcGeodeticTrueLongitude._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGeodeticTrueLongitude._metadata, IStateCalcGeodeticTrueLongitude._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{76BD7923-C04A-4789-885E-4643A30E9BB2}", IStateCalcGeodeticTrueLongitude)
agcls.AgTypeNameMap["IStateCalcGeodeticTrueLongitude"] = IStateCalcGeodeticTrueLongitude

class IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee(object):
    """Properties for a GeodeticTrueLongitudeAtTimeOfPerigee calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9B9ACD2A-1A98-4D05-A8F1-2878918138E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._metadata, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._metadata, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9B9ACD2A-1A98-4D05-A8F1-2878918138E2}", IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee)
agcls.AgTypeNameMap["IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee"] = IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee

class IStateCalcMeanRightAscension(object):
    """Properties for a MeanRightAscension calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{073A71DB-77AA-460E-8BD2-B5E4226029B2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMeanRightAscension)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMeanRightAscension)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMeanRightAscension, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcMeanRightAscension._metadata, IStateCalcMeanRightAscension._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMeanRightAscension._metadata, IStateCalcMeanRightAscension._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{073A71DB-77AA-460E-8BD2-B5E4226029B2}", IStateCalcMeanRightAscension)
agcls.AgTypeNameMap["IStateCalcMeanRightAscension"] = IStateCalcMeanRightAscension

class IStateCalcGeodeticMeanRightAscension(object):
    """Properties for a GeodeticMeanRightAscension calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AF8C388-DBF6-4A2A-A728-6CE55CD774FC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGeodeticMeanRightAscension)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGeodeticMeanRightAscension)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGeodeticMeanRightAscension, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGeodeticMeanRightAscension._metadata, IStateCalcGeodeticMeanRightAscension._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGeodeticMeanRightAscension._metadata, IStateCalcGeodeticMeanRightAscension._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9AF8C388-DBF6-4A2A-A728-6CE55CD774FC}", IStateCalcGeodeticMeanRightAscension)
agcls.AgTypeNameMap["IStateCalcGeodeticMeanRightAscension"] = IStateCalcGeodeticMeanRightAscension

class IStateCalcTwoBodyDriftRate(object):
    """Properties for a TwoBodyDriftRate calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9C9ADC21-B1EB-4BC8-A569-51B5F80A2DE1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTwoBodyDriftRate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTwoBodyDriftRate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTwoBodyDriftRate, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcTwoBodyDriftRate._metadata, IStateCalcTwoBodyDriftRate._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTwoBodyDriftRate._metadata, IStateCalcTwoBodyDriftRate._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9C9ADC21-B1EB-4BC8-A569-51B5F80A2DE1}", IStateCalcTwoBodyDriftRate)
agcls.AgTypeNameMap["IStateCalcTwoBodyDriftRate"] = IStateCalcTwoBodyDriftRate

class IStateCalcDriftRateFactor(object):
    """Properties for a DriftRateFactor calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D50B861F-D9B7-49F8-9B23-D89FBA4C334E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_drift_rate_model" : 3,
                             "set_drift_rate_model" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDriftRateFactor)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDriftRateFactor)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDriftRateFactor, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcDriftRateFactor._metadata, IStateCalcDriftRateFactor._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDriftRateFactor._metadata, IStateCalcDriftRateFactor._set_central_body_name_metadata, inVal)

    _get_drift_rate_model_metadata = { "name" : "drift_rate_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_DRIFT_RATE_MODEL),) }
    @property
    def drift_rate_model(self) -> "GEO_STATIONARY_DRIFT_RATE_MODEL":
        """The gravity model used to compute drift rate."""
        return self._intf.get_property(IStateCalcDriftRateFactor._metadata, IStateCalcDriftRateFactor._get_drift_rate_model_metadata)

    _set_drift_rate_model_metadata = { "name" : "drift_rate_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_DRIFT_RATE_MODEL),) }
    @drift_rate_model.setter
    def drift_rate_model(self, val:"GEO_STATIONARY_DRIFT_RATE_MODEL") -> None:
        return self._intf.set_property(IStateCalcDriftRateFactor._metadata, IStateCalcDriftRateFactor._set_drift_rate_model_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{D50B861F-D9B7-49F8-9B23-D89FBA4C334E}", IStateCalcDriftRateFactor)
agcls.AgTypeNameMap["IStateCalcDriftRateFactor"] = IStateCalcDriftRateFactor

class IStateCalcEccentricityX(object):
    """Properties for a EccentricityX calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0FB1B835-D3EB-43EB-A500-2FD1A15D8BF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEccentricityX)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEccentricityX)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEccentricityX, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEccentricityX._metadata, IStateCalcEccentricityX._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEccentricityX._metadata, IStateCalcEccentricityX._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0FB1B835-D3EB-43EB-A500-2FD1A15D8BF0}", IStateCalcEccentricityX)
agcls.AgTypeNameMap["IStateCalcEccentricityX"] = IStateCalcEccentricityX

class IStateCalcEccentricityY(object):
    """Properties for a EccentricityY calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{98C2F051-C83D-446E-A3CC-CE1FA96FAADB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEccentricityY)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEccentricityY)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEccentricityY, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEccentricityY._metadata, IStateCalcEccentricityY._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEccentricityY._metadata, IStateCalcEccentricityY._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{98C2F051-C83D-446E-A3CC-CE1FA96FAADB}", IStateCalcEccentricityY)
agcls.AgTypeNameMap["IStateCalcEccentricityY"] = IStateCalcEccentricityY

class IStateCalcInclinationX(object):
    """Properties for a InclinationX calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A8646172-74A1-4998-AFE4-AF0AF5351478}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_inclination_magnitude_type" : 3,
                             "set_inclination_magnitude_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInclinationX)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInclinationX)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInclinationX, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcInclinationX._metadata, IStateCalcInclinationX._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInclinationX._metadata, IStateCalcInclinationX._set_central_body_name_metadata, inVal)

    _get_inclination_magnitude_type_metadata = { "name" : "inclination_magnitude_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_INCLINATION_MAGNITUDE),) }
    @property
    def inclination_magnitude_type(self) -> "GEO_STATIONARY_INCLINATION_MAGNITUDE":
        """Magnitude to use when computing the inclination vector."""
        return self._intf.get_property(IStateCalcInclinationX._metadata, IStateCalcInclinationX._get_inclination_magnitude_type_metadata)

    _set_inclination_magnitude_type_metadata = { "name" : "inclination_magnitude_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_INCLINATION_MAGNITUDE),) }
    @inclination_magnitude_type.setter
    def inclination_magnitude_type(self, val:"GEO_STATIONARY_INCLINATION_MAGNITUDE") -> None:
        return self._intf.set_property(IStateCalcInclinationX._metadata, IStateCalcInclinationX._set_inclination_magnitude_type_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{A8646172-74A1-4998-AFE4-AF0AF5351478}", IStateCalcInclinationX)
agcls.AgTypeNameMap["IStateCalcInclinationX"] = IStateCalcInclinationX

class IStateCalcInclinationY(object):
    """Properties for a InclinationY calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5CEC75BB-28C3-4BA7-A96E-DC115619B093}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_inclination_magnitude_type" : 3,
                             "set_inclination_magnitude_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInclinationY)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInclinationY)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInclinationY, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcInclinationY._metadata, IStateCalcInclinationY._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInclinationY._metadata, IStateCalcInclinationY._set_central_body_name_metadata, inVal)

    _get_inclination_magnitude_type_metadata = { "name" : "inclination_magnitude_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_INCLINATION_MAGNITUDE),) }
    @property
    def inclination_magnitude_type(self) -> "GEO_STATIONARY_INCLINATION_MAGNITUDE":
        """Magnitude to use when computing the inclination vector."""
        return self._intf.get_property(IStateCalcInclinationY._metadata, IStateCalcInclinationY._get_inclination_magnitude_type_metadata)

    _set_inclination_magnitude_type_metadata = { "name" : "inclination_magnitude_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_STATIONARY_INCLINATION_MAGNITUDE),) }
    @inclination_magnitude_type.setter
    def inclination_magnitude_type(self, val:"GEO_STATIONARY_INCLINATION_MAGNITUDE") -> None:
        return self._intf.set_property(IStateCalcInclinationY._metadata, IStateCalcInclinationY._set_inclination_magnitude_type_metadata, val)


agcls.AgClassCatalog.add_catalog_entry("{5CEC75BB-28C3-4BA7-A96E-DC115619B093}", IStateCalcInclinationY)
agcls.AgTypeNameMap["IStateCalcInclinationY"] = IStateCalcInclinationY

class IStateCalcUnitAngularMomentumX(object):
    """Properties for a UnitAngularMomentumX calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7165CE29-2BAA-438B-BF73-49E4B5AFD22D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcUnitAngularMomentumX)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcUnitAngularMomentumX)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcUnitAngularMomentumX, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcUnitAngularMomentumX._metadata, IStateCalcUnitAngularMomentumX._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcUnitAngularMomentumX._metadata, IStateCalcUnitAngularMomentumX._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7165CE29-2BAA-438B-BF73-49E4B5AFD22D}", IStateCalcUnitAngularMomentumX)
agcls.AgTypeNameMap["IStateCalcUnitAngularMomentumX"] = IStateCalcUnitAngularMomentumX

class IStateCalcUnitAngularMomentumY(object):
    """Properties for a UnitAngularMomentumY calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F0A06177-01B3-401E-980F-B61774B91FD0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcUnitAngularMomentumY)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcUnitAngularMomentumY)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcUnitAngularMomentumY, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcUnitAngularMomentumY._metadata, IStateCalcUnitAngularMomentumY._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcUnitAngularMomentumY._metadata, IStateCalcUnitAngularMomentumY._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F0A06177-01B3-401E-980F-B61774B91FD0}", IStateCalcUnitAngularMomentumY)
agcls.AgTypeNameMap["IStateCalcUnitAngularMomentumY"] = IStateCalcUnitAngularMomentumY

class IStateCalcUnitAngularMomentumZ(object):
    """Properties for a UnitAngularMomentumZ calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7184F372-5CFE-4792-B30F-5DC69E9A6F01}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcUnitAngularMomentumZ)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcUnitAngularMomentumZ)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcUnitAngularMomentumZ, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcUnitAngularMomentumZ._metadata, IStateCalcUnitAngularMomentumZ._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcUnitAngularMomentumZ._metadata, IStateCalcUnitAngularMomentumZ._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7184F372-5CFE-4792-B30F-5DC69E9A6F01}", IStateCalcUnitAngularMomentumZ)
agcls.AgTypeNameMap["IStateCalcUnitAngularMomentumZ"] = IStateCalcUnitAngularMomentumZ

class IStateCalcGeodeticElem(object):
    """Properties for a Geodetic Element calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGeodeticElem)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGeodeticElem)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGeodeticElem, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGeodeticElem._metadata, IStateCalcGeodeticElem._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGeodeticElem._metadata, IStateCalcGeodeticElem._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}", IStateCalcGeodeticElem)
agcls.AgTypeNameMap["IStateCalcGeodeticElem"] = IStateCalcGeodeticElem

class IStateCalcRepeatingGroundTrackErr(object):
    """Properties for a RepeatingGroundTrackEquatorError calculation object."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_longitude" : 3,
                             "set_reference_longitude" : 4,
                             "get_repeat_count" : 5,
                             "set_repeat_count" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRepeatingGroundTrackErr)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRepeatingGroundTrackErr)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRepeatingGroundTrackErr, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._set_central_body_name_metadata, inVal)

    _get_reference_longitude_metadata = { "name" : "reference_longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def reference_longitude(self) -> typing.Any:
        """The longitude at the equator to be used as a reference for the repeating ground track. Uses Angle Dimension."""
        return self._intf.get_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._get_reference_longitude_metadata)

    _set_reference_longitude_metadata = { "name" : "reference_longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @reference_longitude.setter
    def reference_longitude(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._set_reference_longitude_metadata, inVal)

    _get_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def repeat_count(self) -> float:
        """The number of orbits before the ground track repeats over the same longitude. Dimensionless."""
        return self._intf.get_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._get_repeat_count_metadata)

    _set_repeat_count_metadata = { "name" : "repeat_count",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @repeat_count.setter
    def repeat_count(self, inVal:float) -> None:
        return self._intf.set_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._set_repeat_count_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_REPEATING_GROUND_TRACK_ERR),) }
    def enable_control_parameter(self, param:"CONTROL_REPEATING_GROUND_TRACK_ERR") -> None:
        """Enable the specified control parameter"""
        return self._intf.invoke(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_REPEATING_GROUND_TRACK_ERR),) }
    def disable_control_parameter(self, param:"CONTROL_REPEATING_GROUND_TRACK_ERR") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_REPEATING_GROUND_TRACK_ERR), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_REPEATING_GROUND_TRACK_ERR") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IStateCalcRepeatingGroundTrackErr._metadata, IStateCalcRepeatingGroundTrackErr._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}", IStateCalcRepeatingGroundTrackErr)
agcls.AgTypeNameMap["IStateCalcRepeatingGroundTrackErr"] = IStateCalcRepeatingGroundTrackErr

class IStateCalcAltitudeOfApoapsis(object):
    """Properties for an Altitude of Apoapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{891F3D94-A765-42AE-9459-7575CD33E62E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcAltitudeOfApoapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcAltitudeOfApoapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcAltitudeOfApoapsis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcAltitudeOfApoapsis._metadata, IStateCalcAltitudeOfApoapsis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcAltitudeOfApoapsis._metadata, IStateCalcAltitudeOfApoapsis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcAltitudeOfApoapsis._metadata, IStateCalcAltitudeOfApoapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcAltitudeOfApoapsis._metadata, IStateCalcAltitudeOfApoapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{891F3D94-A765-42AE-9459-7575CD33E62E}", IStateCalcAltitudeOfApoapsis)
agcls.AgTypeNameMap["IStateCalcAltitudeOfApoapsis"] = IStateCalcAltitudeOfApoapsis

class IStateCalcAltitudeOfPeriapsis(object):
    """Properties for an Altitude Of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3A81E388-64C2-41BD-88FC-19E318F08D5C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcAltitudeOfPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcAltitudeOfPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcAltitudeOfPeriapsis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcAltitudeOfPeriapsis._metadata, IStateCalcAltitudeOfPeriapsis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcAltitudeOfPeriapsis._metadata, IStateCalcAltitudeOfPeriapsis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcAltitudeOfPeriapsis._metadata, IStateCalcAltitudeOfPeriapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcAltitudeOfPeriapsis._metadata, IStateCalcAltitudeOfPeriapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3A81E388-64C2-41BD-88FC-19E318F08D5C}", IStateCalcAltitudeOfPeriapsis)
agcls.AgTypeNameMap["IStateCalcAltitudeOfPeriapsis"] = IStateCalcAltitudeOfPeriapsis

class IStateCalcArgOfLat(object):
    """Properties for an Argument of Latitude calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C5B93283-1CEB-407C-837F-21BB7C8227BD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcArgOfLat)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcArgOfLat)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcArgOfLat, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcArgOfLat._metadata, IStateCalcArgOfLat._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcArgOfLat._metadata, IStateCalcArgOfLat._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcArgOfLat._metadata, IStateCalcArgOfLat._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcArgOfLat._metadata, IStateCalcArgOfLat._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C5B93283-1CEB-407C-837F-21BB7C8227BD}", IStateCalcArgOfLat)
agcls.AgTypeNameMap["IStateCalcArgOfLat"] = IStateCalcArgOfLat

class IStateCalcArgOfPeriapsis(object):
    """Properties for an Argument of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcArgOfPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcArgOfPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcArgOfPeriapsis, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcArgOfPeriapsis._metadata, IStateCalcArgOfPeriapsis._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcArgOfPeriapsis._metadata, IStateCalcArgOfPeriapsis._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcArgOfPeriapsis._metadata, IStateCalcArgOfPeriapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcArgOfPeriapsis._metadata, IStateCalcArgOfPeriapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}", IStateCalcArgOfPeriapsis)
agcls.AgTypeNameMap["IStateCalcArgOfPeriapsis"] = IStateCalcArgOfPeriapsis

class IStateCalcEccentricityAnomaly(object):
    """Properties for an Eccentric Anomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9655A1AA-233C-4E4C-9A2E-93B91A439947}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEccentricityAnomaly)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEccentricityAnomaly)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEccentricityAnomaly, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEccentricityAnomaly._metadata, IStateCalcEccentricityAnomaly._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEccentricityAnomaly._metadata, IStateCalcEccentricityAnomaly._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcEccentricityAnomaly._metadata, IStateCalcEccentricityAnomaly._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcEccentricityAnomaly._metadata, IStateCalcEccentricityAnomaly._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9655A1AA-233C-4E4C-9A2E-93B91A439947}", IStateCalcEccentricityAnomaly)
agcls.AgTypeNameMap["IStateCalcEccentricityAnomaly"] = IStateCalcEccentricityAnomaly

class IStateCalcEccentricity(object):
    """Properties for an Eccentricity calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3AE52837-A597-473A-83A2-9DC9B2271101}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEccentricity)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEccentricity)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEccentricity, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEccentricity._metadata, IStateCalcEccentricity._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEccentricity._metadata, IStateCalcEccentricity._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcEccentricity._metadata, IStateCalcEccentricity._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcEccentricity._metadata, IStateCalcEccentricity._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3AE52837-A597-473A-83A2-9DC9B2271101}", IStateCalcEccentricity)
agcls.AgTypeNameMap["IStateCalcEccentricity"] = IStateCalcEccentricity

class IStateCalcInclination(object):
    """Properties for an Inclination calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{477CF8AA-81BE-4C13-8F6D-7157268869A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInclination)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInclination)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInclination, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcInclination._metadata, IStateCalcInclination._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInclination._metadata, IStateCalcInclination._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcInclination._metadata, IStateCalcInclination._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcInclination._metadata, IStateCalcInclination._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{477CF8AA-81BE-4C13-8F6D-7157268869A3}", IStateCalcInclination)
agcls.AgTypeNameMap["IStateCalcInclination"] = IStateCalcInclination

class IStateCalcLonOfAscNode(object):
    """Properties for a Longitude of Ascending Node calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9A4EED12-F650-449B-B3C0-2278D58A8D92}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcLonOfAscNode)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcLonOfAscNode)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcLonOfAscNode, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcLonOfAscNode._metadata, IStateCalcLonOfAscNode._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcLonOfAscNode._metadata, IStateCalcLonOfAscNode._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcLonOfAscNode._metadata, IStateCalcLonOfAscNode._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcLonOfAscNode._metadata, IStateCalcLonOfAscNode._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9A4EED12-F650-449B-B3C0-2278D58A8D92}", IStateCalcLonOfAscNode)
agcls.AgTypeNameMap["IStateCalcLonOfAscNode"] = IStateCalcLonOfAscNode

class IStateCalcMeanAnomaly(object):
    """Properties for a MeanAnomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2E620A15-C918-467A-A8C3-817BF13FC602}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMeanAnomaly)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMeanAnomaly)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMeanAnomaly, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcMeanAnomaly._metadata, IStateCalcMeanAnomaly._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMeanAnomaly._metadata, IStateCalcMeanAnomaly._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcMeanAnomaly._metadata, IStateCalcMeanAnomaly._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcMeanAnomaly._metadata, IStateCalcMeanAnomaly._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2E620A15-C918-467A-A8C3-817BF13FC602}", IStateCalcMeanAnomaly)
agcls.AgTypeNameMap["IStateCalcMeanAnomaly"] = IStateCalcMeanAnomaly

class IStateCalcMeanMotion(object):
    """Properties for a Mean Motion calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3CF417E4-9A1B-492B-BEA8-A019896B26E9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMeanMotion)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMeanMotion)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMeanMotion, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcMeanMotion._metadata, IStateCalcMeanMotion._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMeanMotion._metadata, IStateCalcMeanMotion._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcMeanMotion._metadata, IStateCalcMeanMotion._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcMeanMotion._metadata, IStateCalcMeanMotion._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3CF417E4-9A1B-492B-BEA8-A019896B26E9}", IStateCalcMeanMotion)
agcls.AgTypeNameMap["IStateCalcMeanMotion"] = IStateCalcMeanMotion

class IStateCalcOrbitPeriod(object):
    """Properties for an Orbit Period calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C108486C-571C-4007-9EFD-70CD8745C3D5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitPeriod)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitPeriod)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitPeriod, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcOrbitPeriod._metadata, IStateCalcOrbitPeriod._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOrbitPeriod._metadata, IStateCalcOrbitPeriod._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcOrbitPeriod._metadata, IStateCalcOrbitPeriod._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcOrbitPeriod._metadata, IStateCalcOrbitPeriod._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C108486C-571C-4007-9EFD-70CD8745C3D5}", IStateCalcOrbitPeriod)
agcls.AgTypeNameMap["IStateCalcOrbitPeriod"] = IStateCalcOrbitPeriod

class IStateCalcNumRevs(object):
    """Properties for a Number of Revolutions calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A9FF9984-5A98-44F1-A231-10C3F26A1082}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcNumRevs)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcNumRevs)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcNumRevs, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcNumRevs._metadata, IStateCalcNumRevs._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcNumRevs._metadata, IStateCalcNumRevs._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcNumRevs._metadata, IStateCalcNumRevs._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcNumRevs._metadata, IStateCalcNumRevs._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A9FF9984-5A98-44F1-A231-10C3F26A1082}", IStateCalcNumRevs)
agcls.AgTypeNameMap["IStateCalcNumRevs"] = IStateCalcNumRevs

class IStateCalcRAAN(object):
    """Properties for a RAAN calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B2456E5C-7305-4AAD-8318-7A65D65C328A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRAAN)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRAAN)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRAAN, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcRAAN._metadata, IStateCalcRAAN._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRAAN._metadata, IStateCalcRAAN._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcRAAN._metadata, IStateCalcRAAN._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRAAN._metadata, IStateCalcRAAN._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B2456E5C-7305-4AAD-8318-7A65D65C328A}", IStateCalcRAAN)
agcls.AgTypeNameMap["IStateCalcRAAN"] = IStateCalcRAAN

class IStateCalcRadOfApoapsis(object):
    """Properties for a Radius Of Apoapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2B481148-138F-44EA-9EE2-03FC7FA82CEC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRadOfApoapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRadOfApoapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRadOfApoapsis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRadOfApoapsis._metadata, IStateCalcRadOfApoapsis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRadOfApoapsis._metadata, IStateCalcRadOfApoapsis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcRadOfApoapsis._metadata, IStateCalcRadOfApoapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRadOfApoapsis._metadata, IStateCalcRadOfApoapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2B481148-138F-44EA-9EE2-03FC7FA82CEC}", IStateCalcRadOfApoapsis)
agcls.AgTypeNameMap["IStateCalcRadOfApoapsis"] = IStateCalcRadOfApoapsis

class IStateCalcRadOfPeriapsis(object):
    """Properties for a Radius Of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8AF6B875-ED5E-4734-B98B-17B03203FFE8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRadOfPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRadOfPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRadOfPeriapsis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRadOfPeriapsis._metadata, IStateCalcRadOfPeriapsis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRadOfPeriapsis._metadata, IStateCalcRadOfPeriapsis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcRadOfPeriapsis._metadata, IStateCalcRadOfPeriapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRadOfPeriapsis._metadata, IStateCalcRadOfPeriapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8AF6B875-ED5E-4734-B98B-17B03203FFE8}", IStateCalcRadOfPeriapsis)
agcls.AgTypeNameMap["IStateCalcRadOfPeriapsis"] = IStateCalcRadOfPeriapsis

class IStateCalcSemiMajorAxis(object):
    """Properties for a Semimajor Axis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0DC03521-C37A-4D96-A820-E0D19835C7DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSemiMajorAxis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSemiMajorAxis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSemiMajorAxis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcSemiMajorAxis._metadata, IStateCalcSemiMajorAxis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSemiMajorAxis._metadata, IStateCalcSemiMajorAxis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcSemiMajorAxis._metadata, IStateCalcSemiMajorAxis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcSemiMajorAxis._metadata, IStateCalcSemiMajorAxis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0DC03521-C37A-4D96-A820-E0D19835C7DF}", IStateCalcSemiMajorAxis)
agcls.AgTypeNameMap["IStateCalcSemiMajorAxis"] = IStateCalcSemiMajorAxis

class IStateCalcTimePastAscNode(object):
    """Properties for a Time Past Ascending Node calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4ED0F733-4995-4D32-8533-D7A1801C4FBB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTimePastAscNode)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTimePastAscNode)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTimePastAscNode, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcTimePastAscNode._metadata, IStateCalcTimePastAscNode._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTimePastAscNode._metadata, IStateCalcTimePastAscNode._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcTimePastAscNode._metadata, IStateCalcTimePastAscNode._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcTimePastAscNode._metadata, IStateCalcTimePastAscNode._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4ED0F733-4995-4D32-8533-D7A1801C4FBB}", IStateCalcTimePastAscNode)
agcls.AgTypeNameMap["IStateCalcTimePastAscNode"] = IStateCalcTimePastAscNode

class IStateCalcTimePastPeriapsis(object):
    """Properties for a Time Past Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{30BCAEF0-2921-4EE5-B047-79CA370F9C83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTimePastPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTimePastPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTimePastPeriapsis, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcTimePastPeriapsis._metadata, IStateCalcTimePastPeriapsis._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTimePastPeriapsis._metadata, IStateCalcTimePastPeriapsis._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcTimePastPeriapsis._metadata, IStateCalcTimePastPeriapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcTimePastPeriapsis._metadata, IStateCalcTimePastPeriapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{30BCAEF0-2921-4EE5-B047-79CA370F9C83}", IStateCalcTimePastPeriapsis)
agcls.AgTypeNameMap["IStateCalcTimePastPeriapsis"] = IStateCalcTimePastPeriapsis

class IStateCalcDeltaV(object):
    """Properties for a DeltaV calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDeltaV)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDeltaV)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDeltaV, None)
    

agcls.AgClassCatalog.add_catalog_entry("{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}", IStateCalcDeltaV)
agcls.AgTypeNameMap["IStateCalcDeltaV"] = IStateCalcDeltaV

class IStateCalcDeltaVSquared(object):
    """Properties for a DeltaV Squared calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{52506197-B072-4F2A-A1E6-10728D969E2A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDeltaVSquared)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDeltaVSquared)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDeltaVSquared, None)
    

agcls.AgClassCatalog.add_catalog_entry("{52506197-B072-4F2A-A1E6-10728D969E2A}", IStateCalcDeltaVSquared)
agcls.AgTypeNameMap["IStateCalcDeltaVSquared"] = IStateCalcDeltaVSquared

class IStateCalcMissionControlSequenceDeltaV(object):
    """Properties for a MCS DeltaV calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6411CC14-1207-49C7-ACEF-31EC24908D59}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMissionControlSequenceDeltaV)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMissionControlSequenceDeltaV)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMissionControlSequenceDeltaV, None)
    

agcls.AgClassCatalog.add_catalog_entry("{6411CC14-1207-49C7-ACEF-31EC24908D59}", IStateCalcMissionControlSequenceDeltaV)
agcls.AgTypeNameMap["IStateCalcMissionControlSequenceDeltaV"] = IStateCalcMissionControlSequenceDeltaV

class IStateCalcMissionControlSequenceDeltaVSquared(object):
    """Properties for a MCS DeltaV Squared calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{17C279CA-79C4-4076-AF85-6018DA3FAB83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_squared_type" : 1,
                             "set_squared_type" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMissionControlSequenceDeltaVSquared)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMissionControlSequenceDeltaVSquared)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMissionControlSequenceDeltaVSquared, None)
    
    _get_squared_type_metadata = { "name" : "squared_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SQUARED_TYPE),) }
    @property
    def squared_type(self) -> "SQUARED_TYPE":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.get_property(IStateCalcMissionControlSequenceDeltaVSquared._metadata, IStateCalcMissionControlSequenceDeltaVSquared._get_squared_type_metadata)

    _set_squared_type_metadata = { "name" : "squared_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SQUARED_TYPE),) }
    @squared_type.setter
    def squared_type(self, inVal:"SQUARED_TYPE") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.set_property(IStateCalcMissionControlSequenceDeltaVSquared._metadata, IStateCalcMissionControlSequenceDeltaVSquared._set_squared_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{17C279CA-79C4-4076-AF85-6018DA3FAB83}", IStateCalcMissionControlSequenceDeltaVSquared)
agcls.AgTypeNameMap["IStateCalcMissionControlSequenceDeltaVSquared"] = IStateCalcMissionControlSequenceDeltaVSquared

class IStateCalcSequenceDeltaV(object):
    """Properties for a Sequence DeltaV calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0F7BEE65-4F80-404D-AA99-1F92F88E2525}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_sequence_name" : 1,
                             "set_sequence_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSequenceDeltaV)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSequenceDeltaV)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSequenceDeltaV, None)
    
    _get_sequence_name_metadata = { "name" : "sequence_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def sequence_name(self) -> str:
        """The sequence whose DeltaV's are to be summed."""
        return self._intf.get_property(IStateCalcSequenceDeltaV._metadata, IStateCalcSequenceDeltaV._get_sequence_name_metadata)

    _set_sequence_name_metadata = { "name" : "sequence_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @sequence_name.setter
    def sequence_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSequenceDeltaV._metadata, IStateCalcSequenceDeltaV._set_sequence_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0F7BEE65-4F80-404D-AA99-1F92F88E2525}", IStateCalcSequenceDeltaV)
agcls.AgTypeNameMap["IStateCalcSequenceDeltaV"] = IStateCalcSequenceDeltaV

class IStateCalcSequenceDeltaVSquared(object):
    """Properties for a Sequence DeltaV Squared calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D6D37B91-EDAE-4E35-865F-538C2155A239}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_sequence_name" : 1,
                             "set_sequence_name" : 2,
                             "get_squared_type" : 3,
                             "set_squared_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSequenceDeltaVSquared)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSequenceDeltaVSquared)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSequenceDeltaVSquared, None)
    
    _get_sequence_name_metadata = { "name" : "sequence_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def sequence_name(self) -> str:
        """The sequence whose DeltaV's are to be accumulated."""
        return self._intf.get_property(IStateCalcSequenceDeltaVSquared._metadata, IStateCalcSequenceDeltaVSquared._get_sequence_name_metadata)

    _set_sequence_name_metadata = { "name" : "sequence_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @sequence_name.setter
    def sequence_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSequenceDeltaVSquared._metadata, IStateCalcSequenceDeltaVSquared._set_sequence_name_metadata, inVal)

    _get_squared_type_metadata = { "name" : "squared_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SQUARED_TYPE),) }
    @property
    def squared_type(self) -> "SQUARED_TYPE":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.get_property(IStateCalcSequenceDeltaVSquared._metadata, IStateCalcSequenceDeltaVSquared._get_squared_type_metadata)

    _set_squared_type_metadata = { "name" : "squared_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SQUARED_TYPE),) }
    @squared_type.setter
    def squared_type(self, inVal:"SQUARED_TYPE") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        return self._intf.set_property(IStateCalcSequenceDeltaVSquared._metadata, IStateCalcSequenceDeltaVSquared._set_squared_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D6D37B91-EDAE-4E35-865F-538C2155A239}", IStateCalcSequenceDeltaVSquared)
agcls.AgTypeNameMap["IStateCalcSequenceDeltaVSquared"] = IStateCalcSequenceDeltaVSquared

class IStateCalcFuelMass(object):
    """Properties for a FuelMass calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2707D8D8-8D1E-477D-B246-0568788FE867}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcFuelMass)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcFuelMass)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcFuelMass, None)
    

agcls.AgClassCatalog.add_catalog_entry("{2707D8D8-8D1E-477D-B246-0568788FE867}", IStateCalcFuelMass)
agcls.AgTypeNameMap["IStateCalcFuelMass"] = IStateCalcFuelMass

class IStateCalcDensity(object):
    """Properties for a Fuel Density calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AE849EC-D75D-45A2-A23A-404C041BDB7B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDensity)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDensity)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDensity, None)
    

agcls.AgClassCatalog.add_catalog_entry("{9AE849EC-D75D-45A2-A23A-404C041BDB7B}", IStateCalcDensity)
agcls.AgTypeNameMap["IStateCalcDensity"] = IStateCalcDensity

class IStateCalcInertialDeltaVMagnitude(object):
    """Properties for an Inertial DeltaV Magnitude calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInertialDeltaVMagnitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInertialDeltaVMagnitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInertialDeltaVMagnitude, None)
    

agcls.AgClassCatalog.add_catalog_entry("{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}", IStateCalcInertialDeltaVMagnitude)
agcls.AgTypeNameMap["IStateCalcInertialDeltaVMagnitude"] = IStateCalcInertialDeltaVMagnitude

class IStateCalcInertialDeltaVx(object):
    """Properties for an Inertial DeltaVx calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D18A9666-512E-476E-89C0-FF6B2D3C2428}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInertialDeltaVx)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInertialDeltaVx)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInertialDeltaVx, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcInertialDeltaVx._metadata, IStateCalcInertialDeltaVx._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInertialDeltaVx._metadata, IStateCalcInertialDeltaVx._set_coord_axes_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D18A9666-512E-476E-89C0-FF6B2D3C2428}", IStateCalcInertialDeltaVx)
agcls.AgTypeNameMap["IStateCalcInertialDeltaVx"] = IStateCalcInertialDeltaVx

class IStateCalcInertialDeltaVy(object):
    """Properties for an Inertial DeltaVy calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInertialDeltaVy)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInertialDeltaVy)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInertialDeltaVy, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcInertialDeltaVy._metadata, IStateCalcInertialDeltaVy._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInertialDeltaVy._metadata, IStateCalcInertialDeltaVy._set_coord_axes_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}", IStateCalcInertialDeltaVy)
agcls.AgTypeNameMap["IStateCalcInertialDeltaVy"] = IStateCalcInertialDeltaVy

class IStateCalcInertialDeltaVz(object):
    """Properties for an Inertial DeltaVz calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInertialDeltaVz)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInertialDeltaVz)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInertialDeltaVz, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcInertialDeltaVz._metadata, IStateCalcInertialDeltaVz._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInertialDeltaVz._metadata, IStateCalcInertialDeltaVz._set_coord_axes_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}", IStateCalcInertialDeltaVz)
agcls.AgTypeNameMap["IStateCalcInertialDeltaVz"] = IStateCalcInertialDeltaVz

class IStateCalcManeuverSpecificImpulse(object):
    """Properties for a Specific Impulse calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4EA5927D-76E7-405C-AA5A-903C19B576DC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcManeuverSpecificImpulse)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcManeuverSpecificImpulse)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcManeuverSpecificImpulse, None)
    

agcls.AgClassCatalog.add_catalog_entry("{4EA5927D-76E7-405C-AA5A-903C19B576DC}", IStateCalcManeuverSpecificImpulse)
agcls.AgTypeNameMap["IStateCalcManeuverSpecificImpulse"] = IStateCalcManeuverSpecificImpulse

class IStateCalcPressure(object):
    """Properties for a Tank Pressure calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcPressure)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcPressure)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcPressure, None)
    

agcls.AgClassCatalog.add_catalog_entry("{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}", IStateCalcPressure)
agcls.AgTypeNameMap["IStateCalcPressure"] = IStateCalcPressure

class IStateCalcTemperature(object):
    """Properties for a Tank Temperature calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E0EC7C19-B337-4BFD-9A8B-30A88784D697}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTemperature)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTemperature)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTemperature, None)
    

agcls.AgClassCatalog.add_catalog_entry("{E0EC7C19-B337-4BFD-9A8B-30A88784D697}", IStateCalcTemperature)
agcls.AgTypeNameMap["IStateCalcTemperature"] = IStateCalcTemperature

class IStateCalcVectorX(object):
    """Properties for a Vector X calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{ADD32358-B55C-4758-BBB9-391728F24BB8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2,
                             "get_vector_name" : 3,
                             "set_vector_name" : 4,
                             "get_unit_dimension" : 5,
                             "set_unit_dimension" : 6,
                             "get_normalize" : 7,
                             "set_normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorX)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorX)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorX, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcVectorX._metadata, IStateCalcVectorX._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorX._metadata, IStateCalcVectorX._set_coord_axes_name_metadata, inVal)

    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorX._metadata, IStateCalcVectorX._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorX._metadata, IStateCalcVectorX._set_vector_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcVectorX._metadata, IStateCalcVectorX._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorX._metadata, IStateCalcVectorX._set_unit_dimension_metadata, inVal)

    _get_normalize_metadata = { "name" : "normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IStateCalcVectorX._metadata, IStateCalcVectorX._get_normalize_metadata)

    _set_normalize_metadata = { "name" : "normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @normalize.setter
    def normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IStateCalcVectorX._metadata, IStateCalcVectorX._set_normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{ADD32358-B55C-4758-BBB9-391728F24BB8}", IStateCalcVectorX)
agcls.AgTypeNameMap["IStateCalcVectorX"] = IStateCalcVectorX

class IStateCalcVectorY(object):
    """Properties for a Vector Y calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BCF6F352-A2ED-491B-9961-5A164D6B5388}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2,
                             "get_vector_name" : 3,
                             "set_vector_name" : 4,
                             "get_unit_dimension" : 5,
                             "set_unit_dimension" : 6,
                             "get_normalize" : 7,
                             "set_normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorY)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorY)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorY, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcVectorY._metadata, IStateCalcVectorY._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorY._metadata, IStateCalcVectorY._set_coord_axes_name_metadata, inVal)

    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorY._metadata, IStateCalcVectorY._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorY._metadata, IStateCalcVectorY._set_vector_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcVectorY._metadata, IStateCalcVectorY._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorY._metadata, IStateCalcVectorY._set_unit_dimension_metadata, inVal)

    _get_normalize_metadata = { "name" : "normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IStateCalcVectorY._metadata, IStateCalcVectorY._get_normalize_metadata)

    _set_normalize_metadata = { "name" : "normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @normalize.setter
    def normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IStateCalcVectorY._metadata, IStateCalcVectorY._set_normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BCF6F352-A2ED-491B-9961-5A164D6B5388}", IStateCalcVectorY)
agcls.AgTypeNameMap["IStateCalcVectorY"] = IStateCalcVectorY

class IStateCalcVectorZ(object):
    """Properties for a Vector Z calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7F7E2A8A-7A33-48E3-A622-1A23E2672102}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2,
                             "get_vector_name" : 3,
                             "set_vector_name" : 4,
                             "get_unit_dimension" : 5,
                             "set_unit_dimension" : 6,
                             "get_normalize" : 7,
                             "set_normalize" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorZ)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorZ)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorZ, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._set_coord_axes_name_metadata, inVal)

    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._set_vector_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._set_unit_dimension_metadata, inVal)

    _get_normalize_metadata = { "name" : "normalize",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        return self._intf.get_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._get_normalize_metadata)

    _set_normalize_metadata = { "name" : "normalize",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @normalize.setter
    def normalize(self, newVal:bool) -> None:
        return self._intf.set_property(IStateCalcVectorZ._metadata, IStateCalcVectorZ._set_normalize_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7F7E2A8A-7A33-48E3-A622-1A23E2672102}", IStateCalcVectorZ)
agcls.AgTypeNameMap["IStateCalcVectorZ"] = IStateCalcVectorZ

class IStateCalcMass(object):
    """Properties for a Total Mass calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1C324BE8-C857-42F2-AFA9-88AD686E53CE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMass)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMass)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMass, None)
    

agcls.AgClassCatalog.add_catalog_entry("{1C324BE8-C857-42F2-AFA9-88AD686E53CE}", IStateCalcMass)
agcls.AgTypeNameMap["IStateCalcMass"] = IStateCalcMass

class IStateCalcManeuverTotalMassFlowRate(object):
    """Properties for a Total Mass Flow Rate calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DFD18CDB-7478-4CB0-86B3-46870753D290}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcManeuverTotalMassFlowRate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcManeuverTotalMassFlowRate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcManeuverTotalMassFlowRate, None)
    

agcls.AgClassCatalog.add_catalog_entry("{DFD18CDB-7478-4CB0-86B3-46870753D290}", IStateCalcManeuverTotalMassFlowRate)
agcls.AgTypeNameMap["IStateCalcManeuverTotalMassFlowRate"] = IStateCalcManeuverTotalMassFlowRate

class IStateCalcAbsoluteValue(object):
    """Properties for an Absolute Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{214DD350-1B42-48C1-9720-66D109A5376B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcAbsoluteValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcAbsoluteValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcAbsoluteValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcAbsoluteValue._metadata, IStateCalcAbsoluteValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcAbsoluteValue._metadata, IStateCalcAbsoluteValue._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{214DD350-1B42-48C1-9720-66D109A5376B}", IStateCalcAbsoluteValue)
agcls.AgTypeNameMap["IStateCalcAbsoluteValue"] = IStateCalcAbsoluteValue

class IStateCalcDifference(object):
    """Properties for a Difference calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4236F99F-8B4C-495E-BC83-41C4B0F1630E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_difference_order" : 3,
                             "set_difference_order" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDifference)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDifference)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDifference, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcDifference._metadata, IStateCalcDifference._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDifference._metadata, IStateCalcDifference._set_calc_object_name_metadata, inVal)

    _get_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENCE_ORDER),) }
    @property
    def difference_order(self) -> "DIFFERENCE_ORDER":
        """The order of the difference calculation."""
        return self._intf.get_property(IStateCalcDifference._metadata, IStateCalcDifference._get_difference_order_metadata)

    _set_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DIFFERENCE_ORDER),) }
    @difference_order.setter
    def difference_order(self, inVal:"DIFFERENCE_ORDER") -> None:
        return self._intf.set_property(IStateCalcDifference._metadata, IStateCalcDifference._set_difference_order_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4236F99F-8B4C-495E-BC83-41C4B0F1630E}", IStateCalcDifference)
agcls.AgTypeNameMap["IStateCalcDifference"] = IStateCalcDifference

class IStateCalcDifferenceOtherSegment(object):
    """Properties for a Difference Across Segments calculation object."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_other_segment_name" : 3,
                             "set_other_segment_name" : 4,
                             "get_segment_state_to_use" : 5,
                             "set_segment_state_to_use" : 6,
                             "get_difference_order" : 7,
                             "set_difference_order" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDifferenceOtherSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDifferenceOtherSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDifferenceOtherSegment, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._set_calc_object_name_metadata, inVal)

    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._set_segment_state_to_use_metadata, inVal)

    _get_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_DIFFERENCE_ORDER),) }
    @property
    def difference_order(self) -> "SEGMENT_DIFFERENCE_ORDER":
        """The order of the difference calculation."""
        return self._intf.get_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._get_difference_order_metadata)

    _set_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_DIFFERENCE_ORDER),) }
    @difference_order.setter
    def difference_order(self, inVal:"SEGMENT_DIFFERENCE_ORDER") -> None:
        return self._intf.set_property(IStateCalcDifferenceOtherSegment._metadata, IStateCalcDifferenceOtherSegment._set_difference_order_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}", IStateCalcDifferenceOtherSegment)
agcls.AgTypeNameMap["IStateCalcDifferenceOtherSegment"] = IStateCalcDifferenceOtherSegment

class IStateCalcPositionDifferenceOtherSegment(object):
    """Properties for a Position Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{168CD10A-F726-450F-A63F-E00A85FDEF87}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_other_segment_name" : 1,
                             "set_other_segment_name" : 2,
                             "get_segment_state_to_use" : 3,
                             "set_segment_state_to_use" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcPositionDifferenceOtherSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcPositionDifferenceOtherSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcPositionDifferenceOtherSegment, None)
    
    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcPositionDifferenceOtherSegment._metadata, IStateCalcPositionDifferenceOtherSegment._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcPositionDifferenceOtherSegment._metadata, IStateCalcPositionDifferenceOtherSegment._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcPositionDifferenceOtherSegment._metadata, IStateCalcPositionDifferenceOtherSegment._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcPositionDifferenceOtherSegment._metadata, IStateCalcPositionDifferenceOtherSegment._set_segment_state_to_use_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{168CD10A-F726-450F-A63F-E00A85FDEF87}", IStateCalcPositionDifferenceOtherSegment)
agcls.AgTypeNameMap["IStateCalcPositionDifferenceOtherSegment"] = IStateCalcPositionDifferenceOtherSegment

class IStateCalcVelDifferenceOtherSegment(object):
    """Properties for a Velocity Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_other_segment_name" : 1,
                             "set_other_segment_name" : 2,
                             "get_segment_state_to_use" : 3,
                             "set_segment_state_to_use" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVelDifferenceOtherSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVelDifferenceOtherSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVelDifferenceOtherSegment, None)
    
    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcVelDifferenceOtherSegment._metadata, IStateCalcVelDifferenceOtherSegment._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVelDifferenceOtherSegment._metadata, IStateCalcVelDifferenceOtherSegment._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcVelDifferenceOtherSegment._metadata, IStateCalcVelDifferenceOtherSegment._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcVelDifferenceOtherSegment._metadata, IStateCalcVelDifferenceOtherSegment._set_segment_state_to_use_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}", IStateCalcVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IStateCalcVelDifferenceOtherSegment"] = IStateCalcVelDifferenceOtherSegment

class IStateCalcPositionVelDifferenceOtherSegment(object):
    """Properties for a Position and Velocity Difference Across Segments calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_other_segment_name" : 1,
                             "set_other_segment_name" : 2,
                             "get_segment_state_to_use" : 3,
                             "set_segment_state_to_use" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcPositionVelDifferenceOtherSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcPositionVelDifferenceOtherSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcPositionVelDifferenceOtherSegment, None)
    
    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcPositionVelDifferenceOtherSegment._metadata, IStateCalcPositionVelDifferenceOtherSegment._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcPositionVelDifferenceOtherSegment._metadata, IStateCalcPositionVelDifferenceOtherSegment._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcPositionVelDifferenceOtherSegment._metadata, IStateCalcPositionVelDifferenceOtherSegment._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcPositionVelDifferenceOtherSegment._metadata, IStateCalcPositionVelDifferenceOtherSegment._set_segment_state_to_use_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}", IStateCalcPositionVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IStateCalcPositionVelDifferenceOtherSegment"] = IStateCalcPositionVelDifferenceOtherSegment

class IStateCalcValueAtSegment(object):
    """Properties for a Value At Segment calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_other_segment_name" : 3,
                             "set_other_segment_name" : 4,
                             "get_segment_state_to_use" : 5,
                             "set_segment_state_to_use" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcValueAtSegment)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcValueAtSegment)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcValueAtSegment, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._set_calc_object_name_metadata, inVal)

    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcValueAtSegment._metadata, IStateCalcValueAtSegment._set_segment_state_to_use_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}", IStateCalcValueAtSegment)
agcls.AgTypeNameMap["IStateCalcValueAtSegment"] = IStateCalcValueAtSegment

class IStateCalcMaxValue(object):
    """Properties for a Maximum Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMaxValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMaxValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMaxValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcMaxValue._metadata, IStateCalcMaxValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMaxValue._metadata, IStateCalcMaxValue._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}", IStateCalcMaxValue)
agcls.AgTypeNameMap["IStateCalcMaxValue"] = IStateCalcMaxValue

class IStateCalcMinValue(object):
    """Properties for a Minimum Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{22B15669-D363-4C73-87AE-424E1DF37ABA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMinValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMinValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMinValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcMinValue._metadata, IStateCalcMinValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMinValue._metadata, IStateCalcMinValue._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{22B15669-D363-4C73-87AE-424E1DF37ABA}", IStateCalcMinValue)
agcls.AgTypeNameMap["IStateCalcMinValue"] = IStateCalcMinValue

class IStateCalcMeanValue(object):
    """Properties for a Mean Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7523BA0F-0B19-4660-8785-D9C23F29CB1C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMeanValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMeanValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMeanValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcMeanValue._metadata, IStateCalcMeanValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMeanValue._metadata, IStateCalcMeanValue._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7523BA0F-0B19-4660-8785-D9C23F29CB1C}", IStateCalcMeanValue)
agcls.AgTypeNameMap["IStateCalcMeanValue"] = IStateCalcMeanValue

class IStateCalcMedianValue(object):
    """Properties for a Median Value calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcMedianValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcMedianValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcMedianValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcMedianValue._metadata, IStateCalcMedianValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcMedianValue._metadata, IStateCalcMedianValue._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}", IStateCalcMedianValue)
agcls.AgTypeNameMap["IStateCalcMedianValue"] = IStateCalcMedianValue

class IStateCalcStandardDeviation(object):
    """Properties for a Standard Deviation calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{41847821-7A1E-46E9-AC78-B50A3D1D1500}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcStandardDeviation)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcStandardDeviation)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcStandardDeviation, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcStandardDeviation._metadata, IStateCalcStandardDeviation._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcStandardDeviation._metadata, IStateCalcStandardDeviation._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{41847821-7A1E-46E9-AC78-B50A3D1D1500}", IStateCalcStandardDeviation)
agcls.AgTypeNameMap["IStateCalcStandardDeviation"] = IStateCalcStandardDeviation

class IStateCalcNegative(object):
    """Properties for a Negative calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AE894289-670C-4C3F-8EAB-ABD6056919F2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcNegative)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcNegative)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcNegative, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation  object."""
        return self._intf.get_property(IStateCalcNegative._metadata, IStateCalcNegative._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcNegative._metadata, IStateCalcNegative._set_calc_object_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AE894289-670C-4C3F-8EAB-ABD6056919F2}", IStateCalcNegative)
agcls.AgTypeNameMap["IStateCalcNegative"] = IStateCalcNegative

class IStateCalcTrueAnomaly(object):
    """Properties for a Mean True Anomaly calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{639BD92E-793C-49C3-A72C-3456824F43EE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTrueAnomaly)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTrueAnomaly)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTrueAnomaly, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcTrueAnomaly._metadata, IStateCalcTrueAnomaly._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTrueAnomaly._metadata, IStateCalcTrueAnomaly._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcTrueAnomaly._metadata, IStateCalcTrueAnomaly._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcTrueAnomaly._metadata, IStateCalcTrueAnomaly._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{639BD92E-793C-49C3-A72C-3456824F43EE}", IStateCalcTrueAnomaly)
agcls.AgTypeNameMap["IStateCalcTrueAnomaly"] = IStateCalcTrueAnomaly

class IBDotRCalc(object):
    """Properties for a BDotR calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE67DDCF-6371-4275-996C-5DDB200E3B3F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_target_body_name" : 1,
                             "set_target_body_name" : 2,
                             "get_reference_vector_name" : 3,
                             "set_reference_vector_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBDotRCalc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBDotRCalc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBDotRCalc, None)
    
    _get_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def target_body_name(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IBDotRCalc._metadata, IBDotRCalc._get_target_body_name_metadata)

    _set_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @target_body_name.setter
    def target_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IBDotRCalc._metadata, IBDotRCalc._set_target_body_name_metadata, inVal)

    _get_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_vector_name(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IBDotRCalc._metadata, IBDotRCalc._get_reference_vector_name_metadata)

    _set_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_vector_name.setter
    def reference_vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IBDotRCalc._metadata, IBDotRCalc._set_reference_vector_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BE67DDCF-6371-4275-996C-5DDB200E3B3F}", IBDotRCalc)
agcls.AgTypeNameMap["IBDotRCalc"] = IBDotRCalc

class IBDotTCalc(object):
    """Properties for a BDotT calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E9BE921C-D864-4019-A3E7-A54DA59502FD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_target_body_name" : 1,
                             "set_target_body_name" : 2,
                             "get_reference_vector_name" : 3,
                             "set_reference_vector_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBDotTCalc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBDotTCalc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBDotTCalc, None)
    
    _get_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def target_body_name(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IBDotTCalc._metadata, IBDotTCalc._get_target_body_name_metadata)

    _set_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @target_body_name.setter
    def target_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IBDotTCalc._metadata, IBDotTCalc._set_target_body_name_metadata, inVal)

    _get_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_vector_name(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IBDotTCalc._metadata, IBDotTCalc._get_reference_vector_name_metadata)

    _set_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_vector_name.setter
    def reference_vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IBDotTCalc._metadata, IBDotTCalc._set_reference_vector_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E9BE921C-D864-4019-A3E7-A54DA59502FD}", IBDotTCalc)
agcls.AgTypeNameMap["IBDotTCalc"] = IBDotTCalc

class IBMagnitudeCalc(object):
    """Properties for a BMagnitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7D570198-8048-407E-B532-B7B2B86860C1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_target_body_name" : 1,
                             "set_target_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBMagnitudeCalc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBMagnitudeCalc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBMagnitudeCalc, None)
    
    _get_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def target_body_name(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IBMagnitudeCalc._metadata, IBMagnitudeCalc._get_target_body_name_metadata)

    _set_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @target_body_name.setter
    def target_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IBMagnitudeCalc._metadata, IBMagnitudeCalc._set_target_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7D570198-8048-407E-B532-B7B2B86860C1}", IBMagnitudeCalc)
agcls.AgTypeNameMap["IBMagnitudeCalc"] = IBMagnitudeCalc

class IBThetaCalc(object):
    """Properties for a BTheta calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F478A128-3084-457F-B098-09114FF32DB8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_target_body_name" : 1,
                             "set_target_body_name" : 2,
                             "get_reference_vector_name" : 3,
                             "set_reference_vector_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBThetaCalc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBThetaCalc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBThetaCalc, None)
    
    _get_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def target_body_name(self) -> str:
        """The target body for B-plane computation."""
        return self._intf.get_property(IBThetaCalc._metadata, IBThetaCalc._get_target_body_name_metadata)

    _set_target_body_name_metadata = { "name" : "target_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @target_body_name.setter
    def target_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IBThetaCalc._metadata, IBThetaCalc._set_target_body_name_metadata, inVal)

    _get_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_vector_name(self) -> str:
        """The reference vector to use to define the B-plane."""
        return self._intf.get_property(IBThetaCalc._metadata, IBThetaCalc._get_reference_vector_name_metadata)

    _set_reference_vector_name_metadata = { "name" : "reference_vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_vector_name.setter
    def reference_vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IBThetaCalc._metadata, IBThetaCalc._set_reference_vector_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F478A128-3084-457F-B098-09114FF32DB8}", IBThetaCalc)
agcls.AgTypeNameMap["IBThetaCalc"] = IBThetaCalc

class IStateCalcDeltaDec(object):
    """Properties for a Delta Declination calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2C14B234-E769-4969-BFA3-54A5AB2C6F89}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_type" : 3,
                             "set_reference_type" : 4,
                             "get_reference_body" : 5,
                             "set_reference_body" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDeltaDec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDeltaDec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDeltaDec, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._set_central_body_name_metadata, inVal)

    _get_reference_type_metadata = { "name" : "reference_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_CENTRAL_BODY_REFERENCE),) }
    @property
    def reference_type(self) -> "CALC_OBJECT_CENTRAL_BODY_REFERENCE":
        """The central body's reference type"""
        return self._intf.get_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._get_reference_type_metadata)

    _set_reference_type_metadata = { "name" : "reference_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_CENTRAL_BODY_REFERENCE),) }
    @reference_type.setter
    def reference_type(self, inVal:"CALC_OBJECT_CENTRAL_BODY_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._set_reference_type_metadata, inVal)

    _get_reference_body_metadata = { "name" : "reference_body",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_body(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        return self._intf.get_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._get_reference_body_metadata)

    _set_reference_body_metadata = { "name" : "reference_body",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_body.setter
    def reference_body(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDeltaDec._metadata, IStateCalcDeltaDec._set_reference_body_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2C14B234-E769-4969-BFA3-54A5AB2C6F89}", IStateCalcDeltaDec)
agcls.AgTypeNameMap["IStateCalcDeltaDec"] = IStateCalcDeltaDec

class IStateCalcDeltaRA(object):
    """Properties for a Delta Right Asc calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42FFF17F-F89E-438E-B5C9-0206AD20D09E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_type" : 3,
                             "set_reference_type" : 4,
                             "get_reference_body" : 5,
                             "set_reference_body" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDeltaRA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDeltaRA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDeltaRA, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._set_central_body_name_metadata, inVal)

    _get_reference_type_metadata = { "name" : "reference_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_CENTRAL_BODY_REFERENCE),) }
    @property
    def reference_type(self) -> "CALC_OBJECT_CENTRAL_BODY_REFERENCE":
        """The central body's reference type"""
        return self._intf.get_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._get_reference_type_metadata)

    _set_reference_type_metadata = { "name" : "reference_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_CENTRAL_BODY_REFERENCE),) }
    @reference_type.setter
    def reference_type(self, inVal:"CALC_OBJECT_CENTRAL_BODY_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._set_reference_type_metadata, inVal)

    _get_reference_body_metadata = { "name" : "reference_body",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_body(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        return self._intf.get_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._get_reference_body_metadata)

    _set_reference_body_metadata = { "name" : "reference_body",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_body.setter
    def reference_body(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDeltaRA._metadata, IStateCalcDeltaRA._set_reference_body_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{42FFF17F-F89E-438E-B5C9-0206AD20D09E}", IStateCalcDeltaRA)
agcls.AgTypeNameMap["IStateCalcDeltaRA"] = IStateCalcDeltaRA

class IStateCalcBetaAngle(object):
    """Properties for a Beta Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6D251D91-4555-4C35-B56C-04832CF014E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcBetaAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcBetaAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcBetaAngle, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcBetaAngle._metadata, IStateCalcBetaAngle._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcBetaAngle._metadata, IStateCalcBetaAngle._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{6D251D91-4555-4C35-B56C-04832CF014E2}", IStateCalcBetaAngle)
agcls.AgTypeNameMap["IStateCalcBetaAngle"] = IStateCalcBetaAngle

class IStateCalcLocalApparentSolarLon(object):
    """Properties for a Local Apparent Solar Longitude calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{619668AB-B09E-4160-9ED3-1365F3678C60}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcLocalApparentSolarLon)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcLocalApparentSolarLon)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcLocalApparentSolarLon, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcLocalApparentSolarLon._metadata, IStateCalcLocalApparentSolarLon._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcLocalApparentSolarLon._metadata, IStateCalcLocalApparentSolarLon._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{619668AB-B09E-4160-9ED3-1365F3678C60}", IStateCalcLocalApparentSolarLon)
agcls.AgTypeNameMap["IStateCalcLocalApparentSolarLon"] = IStateCalcLocalApparentSolarLon

class IStateCalcLonOfPeriapsis(object):
    """Properties for a Longitude of Periapsis calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcLonOfPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcLonOfPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcLonOfPeriapsis, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcLonOfPeriapsis._metadata, IStateCalcLonOfPeriapsis._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcLonOfPeriapsis._metadata, IStateCalcLonOfPeriapsis._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcLonOfPeriapsis._metadata, IStateCalcLonOfPeriapsis._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcLonOfPeriapsis._metadata, IStateCalcLonOfPeriapsis._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}", IStateCalcLonOfPeriapsis)
agcls.AgTypeNameMap["IStateCalcLonOfPeriapsis"] = IStateCalcLonOfPeriapsis

class IStateCalcOrbitStateValue(object):
    """Properties for an Orbit State Value calculation object."""
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE928A27-517C-4D52-A681-DA6CFC89E59F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_input_coord_system_name" : 3,
                             "set_input_coord_system_name" : 4,
                             "get_x" : 5,
                             "set_x" : 6,
                             "get_y" : 7,
                             "set_y" : 8,
                             "get_z" : 9,
                             "set_z" : 10,
                             "get_vx" : 11,
                             "set_vx" : 12,
                             "get_vy" : 13,
                             "set_vy" : 14,
                             "get_vz" : 15,
                             "set_vz" : 16,
                             "enable_control_parameter" : 17,
                             "disable_control_parameter" : 18,
                             "is_control_parameter_enabled" : 19,
                             "get_control_parameters_available" : 20, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOrbitStateValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOrbitStateValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOrbitStateValue, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_calc_object_name_metadata, inVal)

    _get_input_coord_system_name_metadata = { "name" : "input_coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def input_coord_system_name(self) -> str:
        """The coordinate system of the input state."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_input_coord_system_name_metadata)

    _set_input_coord_system_name_metadata = { "name" : "input_coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @input_coord_system_name.setter
    def input_coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_input_coord_system_name_metadata, inVal)

    _get_x_metadata = { "name" : "x",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def x(self) -> typing.Any:
        """The x position component. Uses Distance Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_x_metadata)

    _set_x_metadata = { "name" : "x",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @x.setter
    def x(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_x_metadata, inVal)

    _get_y_metadata = { "name" : "y",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def y(self) -> typing.Any:
        """The y position component. Uses Distance Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_y_metadata)

    _set_y_metadata = { "name" : "y",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @y.setter
    def y(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_y_metadata, inVal)

    _get_z_metadata = { "name" : "z",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def z(self) -> typing.Any:
        """The z position component. Uses Distance Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_z_metadata)

    _set_z_metadata = { "name" : "z",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @z.setter
    def z(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_z_metadata, inVal)

    _get_vx_metadata = { "name" : "vx",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def vx(self) -> typing.Any:
        """The x velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_vx_metadata)

    _set_vx_metadata = { "name" : "vx",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @vx.setter
    def vx(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_vx_metadata, inVal)

    _get_vy_metadata = { "name" : "vy",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def vy(self) -> typing.Any:
        """The y velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_vy_metadata)

    _set_vy_metadata = { "name" : "vy",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @vy.setter
    def vy(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_vy_metadata, inVal)

    _get_vz_metadata = { "name" : "vz",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def vz(self) -> typing.Any:
        """The z velocity component. Uses Rate Dimension."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_vz_metadata)

    _set_vz_metadata = { "name" : "vz",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @vz.setter
    def vz(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._set_vz_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ORBIT_STATE_VALUE),) }
    def enable_control_parameter(self, param:"CONTROL_ORBIT_STATE_VALUE") -> None:
        """Enable the specified control parameter"""
        return self._intf.invoke(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ORBIT_STATE_VALUE),) }
    def disable_control_parameter(self, param:"CONTROL_ORBIT_STATE_VALUE") -> None:
        """Disables the specified control parameter"""
        return self._intf.invoke(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ORBIT_STATE_VALUE), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ORBIT_STATE_VALUE") -> bool:
        """Sees if the specified control is enabled"""
        return self._intf.invoke(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IStateCalcOrbitStateValue._metadata, IStateCalcOrbitStateValue._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{BE928A27-517C-4D52-A681-DA6CFC89E59F}", IStateCalcOrbitStateValue)
agcls.AgTypeNameMap["IStateCalcOrbitStateValue"] = IStateCalcOrbitStateValue

class IStateCalcSignedEccentricity(object):
    """Properties for a SignedEccentricity calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CCBD1A51-0C24-4FEA-936D-F8E173931C30}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSignedEccentricity)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSignedEccentricity)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSignedEccentricity, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcSignedEccentricity._metadata, IStateCalcSignedEccentricity._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSignedEccentricity._metadata, IStateCalcSignedEccentricity._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcSignedEccentricity._metadata, IStateCalcSignedEccentricity._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcSignedEccentricity._metadata, IStateCalcSignedEccentricity._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{CCBD1A51-0C24-4FEA-936D-F8E173931C30}", IStateCalcSignedEccentricity)
agcls.AgTypeNameMap["IStateCalcSignedEccentricity"] = IStateCalcSignedEccentricity

class IStateCalcTrueLon(object):
    """Properties for a True Longitude calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E7F127C5-C675-4952-A10C-17AFCBB90F1B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcTrueLon)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcTrueLon)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcTrueLon, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcTrueLon._metadata, IStateCalcTrueLon._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcTrueLon._metadata, IStateCalcTrueLon._set_coord_system_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type."""
        return self._intf.get_property(IStateCalcTrueLon._metadata, IStateCalcTrueLon._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcTrueLon._metadata, IStateCalcTrueLon._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E7F127C5-C675-4952-A10C-17AFCBB90F1B}", IStateCalcTrueLon)
agcls.AgTypeNameMap["IStateCalcTrueLon"] = IStateCalcTrueLon

class IStateCalcPower(object):
    """Properties for a Power calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{748E8F67-4505-4DE7-8206-4752EF3A9158}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_power_source_name" : 1,
                             "set_power_source_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcPower)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcPower)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcPower, None)
    
    _get_power_source_name_metadata = { "name" : "power_source_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def power_source_name(self) -> str:
        """The power source."""
        return self._intf.get_property(IStateCalcPower._metadata, IStateCalcPower._get_power_source_name_metadata)

    _set_power_source_name_metadata = { "name" : "power_source_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @power_source_name.setter
    def power_source_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcPower._metadata, IStateCalcPower._set_power_source_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{748E8F67-4505-4DE7-8206-4752EF3A9158}", IStateCalcPower)
agcls.AgTypeNameMap["IStateCalcPower"] = IStateCalcPower

class IStateCalcRelMotion(object):
    """Properties for a Relative Motion calculation object."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_origin_at_master" : 3,
                             "set_origin_at_master" : 4,
                             "get_reference_selection" : 5,
                             "set_reference_selection" : 6,
                             "get_reference" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelMotion)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelMotion)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelMotion, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._set_central_body_name_metadata, inVal)

    _get_origin_at_master_metadata = { "name" : "origin_at_master",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def origin_at_master(self) -> bool:
        """True if the origin is at the reference satellite, false if the origin is at the current satellite."""
        return self._intf.get_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._get_origin_at_master_metadata)

    _set_origin_at_master_metadata = { "name" : "origin_at_master",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @origin_at_master.setter
    def origin_at_master(self, inVal:bool) -> None:
        return self._intf.set_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._set_origin_at_master_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelMotion._metadata, IStateCalcRelMotion._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}", IStateCalcRelMotion)
agcls.AgTypeNameMap["IStateCalcRelMotion"] = IStateCalcRelMotion

class IStateCalcSolarBetaAngle(object):
    """Properties for a Solar Beta Angle calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_orbit_plane_source" : 3,
                             "set_orbit_plane_source" : 4,
                             "get_element_type" : 5,
                             "set_element_type" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9,
                             "get_sun_position" : 10,
                             "set_sun_position" : 11,
                             "get_sign_convention" : 12,
                             "set_sign_convention" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSolarBetaAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSolarBetaAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSolarBetaAngle, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_central_body_name_metadata, inVal)

    _get_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @property
    def orbit_plane_source(self) -> "CALC_OBJECT_ORBIT_PLANE_SOURCE":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_orbit_plane_source_metadata)

    _set_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @orbit_plane_source.setter
    def orbit_plane_source(self, inVal:"CALC_OBJECT_ORBIT_PLANE_SOURCE") -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_orbit_plane_source_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_element_type_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_reference_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_SUN_POSITION),) }
    @property
    def sun_position(self) -> "CALC_OBJECT_SUN_POSITION":
        """The type of the Sun location."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"CALC_OBJECT_SUN_POSITION") -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_sun_position_metadata, inVal)

    _get_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @property
    def sign_convention(self) -> "CALC_OBJECT_ANGLE_SIGN":
        """Set the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._get_sign_convention_metadata)

    _set_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @sign_convention.setter
    def sign_convention(self, inVal:"CALC_OBJECT_ANGLE_SIGN") -> None:
        return self._intf.set_property(IStateCalcSolarBetaAngle._metadata, IStateCalcSolarBetaAngle._set_sign_convention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}", IStateCalcSolarBetaAngle)
agcls.AgTypeNameMap["IStateCalcSolarBetaAngle"] = IStateCalcSolarBetaAngle

class IStateCalcSolarInPlaneAngle(object):
    """Properties for a Solar In Plane Angle calculation object."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{08345343-C64C-4CAF-B1C4-EE76DC4917B5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_orbit_plane_source" : 3,
                             "set_orbit_plane_source" : 4,
                             "get_element_type" : 5,
                             "set_element_type" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9,
                             "get_sun_position" : 10,
                             "set_sun_position" : 11,
                             "get_counter_clockwise_rotation" : 12,
                             "set_counter_clockwise_rotation" : 13,
                             "get_reference_direction" : 14,
                             "set_reference_direction" : 15, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSolarInPlaneAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSolarInPlaneAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSolarInPlaneAngle, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_central_body_name_metadata, inVal)

    _get_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @property
    def orbit_plane_source(self) -> "CALC_OBJECT_ORBIT_PLANE_SOURCE":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_orbit_plane_source_metadata)

    _set_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @orbit_plane_source.setter
    def orbit_plane_source(self, inVal:"CALC_OBJECT_ORBIT_PLANE_SOURCE") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_orbit_plane_source_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_element_type_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_reference_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_SUN_POSITION),) }
    @property
    def sun_position(self) -> "CALC_OBJECT_SUN_POSITION":
        """The type of the Sun location."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"CALC_OBJECT_SUN_POSITION") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_sun_position_metadata, inVal)

    _get_counter_clockwise_rotation_metadata = { "name" : "counter_clockwise_rotation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @property
    def counter_clockwise_rotation(self) -> "CALC_OBJECT_ANGLE_SIGN":
        """Set sign of the angle for counterclockwise rotation about orbit normal."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_counter_clockwise_rotation_metadata)

    _set_counter_clockwise_rotation_metadata = { "name" : "counter_clockwise_rotation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @counter_clockwise_rotation.setter
    def counter_clockwise_rotation(self, inVal:"CALC_OBJECT_ANGLE_SIGN") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_counter_clockwise_rotation_metadata, inVal)

    _get_reference_direction_metadata = { "name" : "reference_direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_DIRECTION),) }
    @property
    def reference_direction(self) -> "CALC_OBJECT_REFERENCE_DIRECTION":
        """Direction that establishes the zero value when projected into the orbit plane."""
        return self._intf.get_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._get_reference_direction_metadata)

    _set_reference_direction_metadata = { "name" : "reference_direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_DIRECTION),) }
    @reference_direction.setter
    def reference_direction(self, inVal:"CALC_OBJECT_REFERENCE_DIRECTION") -> None:
        return self._intf.set_property(IStateCalcSolarInPlaneAngle._metadata, IStateCalcSolarInPlaneAngle._set_reference_direction_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{08345343-C64C-4CAF-B1C4-EE76DC4917B5}", IStateCalcSolarInPlaneAngle)
agcls.AgTypeNameMap["IStateCalcSolarInPlaneAngle"] = IStateCalcSolarInPlaneAngle

class IStateCalcRelPositionDecAngle(object):
    """Properties for a Relative Position Declination Angle calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{259D6521-23C1-48B4-A718-27AB113952E9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_orbit_plane_source" : 3,
                             "set_orbit_plane_source" : 4,
                             "get_element_type" : 5,
                             "set_element_type" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9,
                             "get_relative_position_type" : 10,
                             "set_relative_position_type" : 11,
                             "get_sign_convention" : 12,
                             "set_sign_convention" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelPositionDecAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelPositionDecAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelPositionDecAngle, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_central_body_name_metadata, inVal)

    _get_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @property
    def orbit_plane_source(self) -> "CALC_OBJECT_ORBIT_PLANE_SOURCE":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_orbit_plane_source_metadata)

    _set_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @orbit_plane_source.setter
    def orbit_plane_source(self, inVal:"CALC_OBJECT_ORBIT_PLANE_SOURCE") -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_orbit_plane_source_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_element_type_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_reference_metadata)

    _get_relative_position_type_metadata = { "name" : "relative_position_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_RELATIVE_POSITION),) }
    @property
    def relative_position_type(self) -> "CALC_OBJECT_RELATIVE_POSITION":
        """The type of the relative position."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_relative_position_type_metadata)

    _set_relative_position_type_metadata = { "name" : "relative_position_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_RELATIVE_POSITION),) }
    @relative_position_type.setter
    def relative_position_type(self, inVal:"CALC_OBJECT_RELATIVE_POSITION") -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_relative_position_type_metadata, inVal)

    _get_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @property
    def sign_convention(self) -> "CALC_OBJECT_ANGLE_SIGN":
        """Set the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._get_sign_convention_metadata)

    _set_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @sign_convention.setter
    def sign_convention(self, inVal:"CALC_OBJECT_ANGLE_SIGN") -> None:
        return self._intf.set_property(IStateCalcRelPositionDecAngle._metadata, IStateCalcRelPositionDecAngle._set_sign_convention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{259D6521-23C1-48B4-A718-27AB113952E9}", IStateCalcRelPositionDecAngle)
agcls.AgTypeNameMap["IStateCalcRelPositionDecAngle"] = IStateCalcRelPositionDecAngle

class IStateCalcRelPositionInPlaneAngle(object):
    """Properties for a Relative Position In Plane Angle calculation object."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E00BF049-7F38-4938-986F-8AB987CE84D2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_orbit_plane_source" : 3,
                             "set_orbit_plane_source" : 4,
                             "get_element_type" : 5,
                             "set_element_type" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9,
                             "get_relative_position_type" : 10,
                             "set_relative_position_type" : 11,
                             "get_counter_clockwise_rotation" : 12,
                             "set_counter_clockwise_rotation" : 13,
                             "get_reference_direction" : 14,
                             "set_reference_direction" : 15, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelPositionInPlaneAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelPositionInPlaneAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelPositionInPlaneAngle, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_central_body_name_metadata, inVal)

    _get_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @property
    def orbit_plane_source(self) -> "CALC_OBJECT_ORBIT_PLANE_SOURCE":
        """Selection of the satellite that will generate the orbit plane."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_orbit_plane_source_metadata)

    _set_orbit_plane_source_metadata = { "name" : "orbit_plane_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ORBIT_PLANE_SOURCE),) }
    @orbit_plane_source.setter
    def orbit_plane_source(self, inVal:"CALC_OBJECT_ORBIT_PLANE_SOURCE") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_orbit_plane_source_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_element_type_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_reference_metadata)

    _get_relative_position_type_metadata = { "name" : "relative_position_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_RELATIVE_POSITION),) }
    @property
    def relative_position_type(self) -> "CALC_OBJECT_RELATIVE_POSITION":
        """The type of the relative position."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_relative_position_type_metadata)

    _set_relative_position_type_metadata = { "name" : "relative_position_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_RELATIVE_POSITION),) }
    @relative_position_type.setter
    def relative_position_type(self, inVal:"CALC_OBJECT_RELATIVE_POSITION") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_relative_position_type_metadata, inVal)

    _get_counter_clockwise_rotation_metadata = { "name" : "counter_clockwise_rotation",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @property
    def counter_clockwise_rotation(self) -> "CALC_OBJECT_ANGLE_SIGN":
        """Set sign of the angle for counterclockwise rotation about orbit normal."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_counter_clockwise_rotation_metadata)

    _set_counter_clockwise_rotation_metadata = { "name" : "counter_clockwise_rotation",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @counter_clockwise_rotation.setter
    def counter_clockwise_rotation(self, inVal:"CALC_OBJECT_ANGLE_SIGN") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_counter_clockwise_rotation_metadata, inVal)

    _get_reference_direction_metadata = { "name" : "reference_direction",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_DIRECTION),) }
    @property
    def reference_direction(self) -> "CALC_OBJECT_REFERENCE_DIRECTION":
        """Direction that establishes the zero value when projected into the orbit plane."""
        return self._intf.get_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._get_reference_direction_metadata)

    _set_reference_direction_metadata = { "name" : "reference_direction",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_DIRECTION),) }
    @reference_direction.setter
    def reference_direction(self, inVal:"CALC_OBJECT_REFERENCE_DIRECTION") -> None:
        return self._intf.set_property(IStateCalcRelPositionInPlaneAngle._metadata, IStateCalcRelPositionInPlaneAngle._set_reference_direction_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E00BF049-7F38-4938-986F-8AB987CE84D2}", IStateCalcRelPositionInPlaneAngle)
agcls.AgTypeNameMap["IStateCalcRelPositionInPlaneAngle"] = IStateCalcRelPositionInPlaneAngle

class IStateCalcRelativeInclination(object):
    """Properties for a Relative Inclination Angle calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_satellite_orbit_normal_type" : 3,
                             "set_satellite_orbit_normal_type" : 4,
                             "get_reference_satellite_orbit_normal_type" : 5,
                             "set_reference_satellite_orbit_normal_type" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRelativeInclination)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRelativeInclination)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRelativeInclination, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._set_central_body_name_metadata, inVal)

    _get_satellite_orbit_normal_type_metadata = { "name" : "satellite_orbit_normal_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def satellite_orbit_normal_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements for describing the orbit plane."""
        return self._intf.get_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._get_satellite_orbit_normal_type_metadata)

    _set_satellite_orbit_normal_type_metadata = { "name" : "satellite_orbit_normal_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @satellite_orbit_normal_type.setter
    def satellite_orbit_normal_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._set_satellite_orbit_normal_type_metadata, inVal)

    _get_reference_satellite_orbit_normal_type_metadata = { "name" : "reference_satellite_orbit_normal_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def reference_satellite_orbit_normal_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements for describing the orbit plane"""
        return self._intf.get_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._get_reference_satellite_orbit_normal_type_metadata)

    _set_reference_satellite_orbit_normal_type_metadata = { "name" : "reference_satellite_orbit_normal_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @reference_satellite_orbit_normal_type.setter
    def reference_satellite_orbit_normal_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._set_reference_satellite_orbit_normal_type_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcRelativeInclination._metadata, IStateCalcRelativeInclination._get_reference_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}", IStateCalcRelativeInclination)
agcls.AgTypeNameMap["IStateCalcRelativeInclination"] = IStateCalcRelativeInclination

class IStateCalcCurvilinearRelMotion(object):
    """Properties for Curvilinear Relative Motion  calculation object."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5658DCFF-6F7B-4935-BA41-135F502DDC07}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_ellipse" : 3,
                             "set_reference_ellipse" : 4,
                             "get_location_source" : 5,
                             "set_location_source" : 6,
                             "get_reference_selection" : 7,
                             "set_reference_selection" : 8,
                             "get_reference" : 9,
                             "get_element_type" : 10,
                             "set_element_type" : 11,
                             "get_sign_convention" : 12,
                             "set_sign_convention" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCurvilinearRelMotion)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCurvilinearRelMotion)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCurvilinearRelMotion, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_central_body_name_metadata, inVal)

    _get_reference_ellipse_metadata = { "name" : "reference_ellipse",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_ELLIPSE),) }
    @property
    def reference_ellipse(self) -> "CALC_OBJECT_REFERENCE_ELLIPSE":
        """Selection of the satellite orbit that is used as the reference ellipse."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_reference_ellipse_metadata)

    _set_reference_ellipse_metadata = { "name" : "reference_ellipse",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE_ELLIPSE),) }
    @reference_ellipse.setter
    def reference_ellipse(self, inVal:"CALC_OBJECT_REFERENCE_ELLIPSE") -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_reference_ellipse_metadata, inVal)

    _get_location_source_metadata = { "name" : "location_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_LOCATION_SOURCE),) }
    @property
    def location_source(self) -> "CALC_OBJECT_LOCATION_SOURCE":
        """Selection of the satellite whose location is being reported with respect to the reference ellipse."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_location_source_metadata)

    _set_location_source_metadata = { "name" : "location_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_LOCATION_SOURCE),) }
    @location_source.setter
    def location_source(self, inVal:"CALC_OBJECT_LOCATION_SOURCE") -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_location_source_metadata, inVal)

    _get_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @property
    def reference_selection(self) -> "CALC_OBJECT_REFERENCE":
        """The reference object selection."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_reference_selection_metadata)

    _set_reference_selection_metadata = { "name" : "reference_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_REFERENCE),) }
    @reference_selection.setter
    def reference_selection(self, inVal:"CALC_OBJECT_REFERENCE") -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_reference_selection_metadata, inVal)

    _get_reference_metadata = { "name" : "reference",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference(self) -> "ILinkToObject":
        """The reference object."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_reference_metadata)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """Choice of osculating or mean elements"""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_element_type_metadata, inVal)

    _get_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @property
    def sign_convention(self) -> "CALC_OBJECT_ANGLE_SIGN":
        """Set the sign of the angle when the relative position has a positive component along the orbit normal."""
        return self._intf.get_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._get_sign_convention_metadata)

    _set_sign_convention_metadata = { "name" : "sign_convention",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ANGLE_SIGN),) }
    @sign_convention.setter
    def sign_convention(self, inVal:"CALC_OBJECT_ANGLE_SIGN") -> None:
        return self._intf.set_property(IStateCalcCurvilinearRelMotion._metadata, IStateCalcCurvilinearRelMotion._set_sign_convention_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5658DCFF-6F7B-4935-BA41-135F502DDC07}", IStateCalcCurvilinearRelMotion)
agcls.AgTypeNameMap["IStateCalcCurvilinearRelMotion"] = IStateCalcCurvilinearRelMotion

class IStateCalcCustomFunction(object):
    """Properties for a Custom Function calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0943C88D-EE8E-48B1-8C5B-79A4748452C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_reset_function_name" : 1,
                             "set_reset_function_name" : 2,
                             "get_eval_function_name" : 3,
                             "set_eval_function_name" : 4,
                             "get_unit_dimension" : 5,
                             "set_unit_dimension" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCustomFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCustomFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCustomFunction, None)
    
    _get_reset_function_name_metadata = { "name" : "reset_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reset_function_name(self) -> str:
        """The custom function called before computing, before each segment runs, and before reporting."""
        return self._intf.get_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._get_reset_function_name_metadata)

    _set_reset_function_name_metadata = { "name" : "reset_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reset_function_name.setter
    def reset_function_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._set_reset_function_name_metadata, inVal)

    _get_eval_function_name_metadata = { "name" : "eval_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def eval_function_name(self) -> str:
        """The custom function used to calculate this object's value."""
        return self._intf.get_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._get_eval_function_name_metadata)

    _set_eval_function_name_metadata = { "name" : "eval_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @eval_function_name.setter
    def eval_function_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._set_eval_function_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCustomFunction._metadata, IStateCalcCustomFunction._set_unit_dimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0943C88D-EE8E-48B1-8C5B-79A4748452C8}", IStateCalcCustomFunction)
agcls.AgTypeNameMap["IStateCalcCustomFunction"] = IStateCalcCustomFunction

class IStateCalcScript(object):
    """Properties for a Script calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{42A2EAD1-9982-4895-9637-4C83524F2A02}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_arguments" : 1,
                             "get_inline_func" : 2,
                             "set_inline_func" : 3,
                             "get_unit_dimension" : 4,
                             "set_unit_dimension" : 5,
                             "get_calc_arguments_link_embed" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcScript)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcScript)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcScript, None)
    
    _get_calc_arguments_metadata = { "name" : "calc_arguments",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_arguments(self) -> "CalcObjectCollection":
        """The arguments to be applied to the function."""
        return self._intf.get_property(IStateCalcScript._metadata, IStateCalcScript._get_calc_arguments_metadata)

    _get_inline_func_metadata = { "name" : "inline_func",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def inline_func(self) -> str:
        """The expression to be applied as a function."""
        return self._intf.get_property(IStateCalcScript._metadata, IStateCalcScript._get_inline_func_metadata)

    _set_inline_func_metadata = { "name" : "inline_func",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @inline_func.setter
    def inline_func(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcScript._metadata, IStateCalcScript._set_inline_func_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcScript._metadata, IStateCalcScript._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcScript._metadata, IStateCalcScript._set_unit_dimension_metadata, inVal)

    _get_calc_arguments_link_embed_metadata = { "name" : "calc_arguments_link_embed",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_arguments_link_embed(self) -> "CalcObjectLinkEmbedControlCollection":
        """The arguments to be applied to the function."""
        return self._intf.get_property(IStateCalcScript._metadata, IStateCalcScript._get_calc_arguments_link_embed_metadata)


agcls.AgClassCatalog.add_catalog_entry("{42A2EAD1-9982-4895-9637-4C83524F2A02}", IStateCalcScript)
agcls.AgTypeNameMap["IStateCalcScript"] = IStateCalcScript

class IStateCalcCd(object):
    """Properties for a Cd calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{18430B84-59EA-4D47-84B4-E7D5589F1931}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCd)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCd)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCd, None)
    

agcls.AgClassCatalog.add_catalog_entry("{18430B84-59EA-4D47-84B4-E7D5589F1931}", IStateCalcCd)
agcls.AgTypeNameMap["IStateCalcCd"] = IStateCalcCd

class IStateCalcCr(object):
    """Properties for a Cr calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCr)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCr)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCr, None)
    

agcls.AgClassCatalog.add_catalog_entry("{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}", IStateCalcCr)
agcls.AgTypeNameMap["IStateCalcCr"] = IStateCalcCr

class IStateCalcDragArea(object):
    """Properties for a DragArea calculation object. CAgAsStateCalcDragArea"""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0D264D3F-4409-4CF7-95AD-0129F85F2A72}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDragArea)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDragArea)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDragArea, None)
    

agcls.AgClassCatalog.add_catalog_entry("{0D264D3F-4409-4CF7-95AD-0129F85F2A72}", IStateCalcDragArea)
agcls.AgTypeNameMap["IStateCalcDragArea"] = IStateCalcDragArea

class IStateCalcRadiationPressureArea(object):
    """Properties for a RadPressureArea calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRadiationPressureArea)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRadiationPressureArea)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRadiationPressureArea, None)
    

agcls.AgClassCatalog.add_catalog_entry("{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}", IStateCalcRadiationPressureArea)
agcls.AgTypeNameMap["IStateCalcRadiationPressureArea"] = IStateCalcRadiationPressureArea

class IStateCalcRadiationPressureCoefficient(object):
    """Properties for a RadiationPressureCoefficient calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9AE54040-18D2-46FC-A12C-C03BDA65FE22}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRadiationPressureCoefficient)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRadiationPressureCoefficient)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRadiationPressureCoefficient, None)
    

agcls.AgClassCatalog.add_catalog_entry("{9AE54040-18D2-46FC-A12C-C03BDA65FE22}", IStateCalcRadiationPressureCoefficient)
agcls.AgTypeNameMap["IStateCalcRadiationPressureCoefficient"] = IStateCalcRadiationPressureCoefficient

class IStateCalcSRPArea(object):
    """Properties for an SRPArea calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSRPArea)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSRPArea)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSRPArea, None)
    

agcls.AgClassCatalog.add_catalog_entry("{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}", IStateCalcSRPArea)
agcls.AgTypeNameMap["IStateCalcSRPArea"] = IStateCalcSRPArea

class IStateCalcCosOfVerticalFPA(object):
    """Properties for a Cosine of Vertical FPA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D2C32FFB-6C5C-46E8-B386-2E69262118C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcCosOfVerticalFPA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcCosOfVerticalFPA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcCosOfVerticalFPA, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcCosOfVerticalFPA._metadata, IStateCalcCosOfVerticalFPA._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcCosOfVerticalFPA._metadata, IStateCalcCosOfVerticalFPA._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D2C32FFB-6C5C-46E8-B386-2E69262118C8}", IStateCalcCosOfVerticalFPA)
agcls.AgTypeNameMap["IStateCalcCosOfVerticalFPA"] = IStateCalcCosOfVerticalFPA

class IStateCalcDec(object):
    """Properties for a Declination calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDec, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcDec._metadata, IStateCalcDec._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDec._metadata, IStateCalcDec._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}", IStateCalcDec)
agcls.AgTypeNameMap["IStateCalcDec"] = IStateCalcDec

class IStateCalcFPA(object):
    """Properties for a Flight Path Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0A7406E7-049A-4054-A1FE-3E86D1998733}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcFPA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcFPA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcFPA, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcFPA._metadata, IStateCalcFPA._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcFPA._metadata, IStateCalcFPA._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0A7406E7-049A-4054-A1FE-3E86D1998733}", IStateCalcFPA)
agcls.AgTypeNameMap["IStateCalcFPA"] = IStateCalcFPA

class IStateCalcRMagnitude(object):
    """Properties for an R Mag calculation object. AsStateCalcRMag"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3E6FAE70-AA94-4036-9FBA-75954E96D759}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_reference_point_name" : 1,
                             "set_reference_point_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRMagnitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRMagnitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRMagnitude, None)
    
    _get_reference_point_name_metadata = { "name" : "reference_point_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def reference_point_name(self) -> str:
        """Reference point used for calculation."""
        return self._intf.get_property(IStateCalcRMagnitude._metadata, IStateCalcRMagnitude._get_reference_point_name_metadata)

    _set_reference_point_name_metadata = { "name" : "reference_point_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @reference_point_name.setter
    def reference_point_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRMagnitude._metadata, IStateCalcRMagnitude._set_reference_point_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3E6FAE70-AA94-4036-9FBA-75954E96D759}", IStateCalcRMagnitude)
agcls.AgTypeNameMap["IStateCalcRMagnitude"] = IStateCalcRMagnitude

class IStateCalcRA(object):
    """Properties for a Right Asc calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRA, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcRA._metadata, IStateCalcRA._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRA._metadata, IStateCalcRA._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}", IStateCalcRA)
agcls.AgTypeNameMap["IStateCalcRA"] = IStateCalcRA

class IStateCalcVMagnitude(object):
    """Properties for a V Mag calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVMagnitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVMagnitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVMagnitude, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcVMagnitude._metadata, IStateCalcVMagnitude._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVMagnitude._metadata, IStateCalcVMagnitude._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}", IStateCalcVMagnitude)
agcls.AgTypeNameMap["IStateCalcVMagnitude"] = IStateCalcVMagnitude

class IStateCalcVelAz(object):
    """Properties for a Velocity Azimuth calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5B86F143-59CB-4014-A920-7F46613F2FB5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVelAz)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVelAz)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVelAz, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcVelAz._metadata, IStateCalcVelAz._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVelAz._metadata, IStateCalcVelAz._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5B86F143-59CB-4014-A920-7F46613F2FB5}", IStateCalcVelAz)
agcls.AgTypeNameMap["IStateCalcVelAz"] = IStateCalcVelAz

class IStateCalcC3Energy(object):
    """Properties for a C3 Energy calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{23937635-E460-428B-90CC-2EAA1C51870B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_element_type" : 3,
                             "set_element_type" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcC3Energy)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcC3Energy)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcC3Energy, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcC3Energy._metadata, IStateCalcC3Energy._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcC3Energy._metadata, IStateCalcC3Energy._set_central_body_name_metadata, inVal)

    _get_element_type_metadata = { "name" : "element_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @property
    def element_type(self) -> "CALC_OBJECT_ELEM":
        """The element type - osculating or a mean type."""
        return self._intf.get_property(IStateCalcC3Energy._metadata, IStateCalcC3Energy._get_element_type_metadata)

    _set_element_type_metadata = { "name" : "element_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CALC_OBJECT_ELEM),) }
    @element_type.setter
    def element_type(self, inVal:"CALC_OBJECT_ELEM") -> None:
        return self._intf.set_property(IStateCalcC3Energy._metadata, IStateCalcC3Energy._set_element_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{23937635-E460-428B-90CC-2EAA1C51870B}", IStateCalcC3Energy)
agcls.AgTypeNameMap["IStateCalcC3Energy"] = IStateCalcC3Energy

class IStateCalcInAsympDec(object):
    """Properties for an Incoming Asymptote Dec calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BE07A06D-B79A-45C7-A460-A2D22467F1CF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInAsympDec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInAsympDec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInAsympDec, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcInAsympDec._metadata, IStateCalcInAsympDec._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInAsympDec._metadata, IStateCalcInAsympDec._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BE07A06D-B79A-45C7-A460-A2D22467F1CF}", IStateCalcInAsympDec)
agcls.AgTypeNameMap["IStateCalcInAsympDec"] = IStateCalcInAsympDec

class IStateCalcInAsympRA(object):
    """Properties for a Incoming Asymptote RA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{732CE68C-1443-4C38-A037-BD228DD1DD50}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInAsympRA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInAsympRA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInAsympRA, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcInAsympRA._metadata, IStateCalcInAsympRA._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInAsympRA._metadata, IStateCalcInAsympRA._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{732CE68C-1443-4C38-A037-BD228DD1DD50}", IStateCalcInAsympRA)
agcls.AgTypeNameMap["IStateCalcInAsympRA"] = IStateCalcInAsympRA

class IStateCalcInVelAzAtPeriapsis(object):
    """Properties for an Incoming Vel Az at Periapsis calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{10C8047E-4366-4951-A479-BEB44FE74322}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcInVelAzAtPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcInVelAzAtPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcInVelAzAtPeriapsis, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcInVelAzAtPeriapsis._metadata, IStateCalcInVelAzAtPeriapsis._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcInVelAzAtPeriapsis._metadata, IStateCalcInVelAzAtPeriapsis._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{10C8047E-4366-4951-A479-BEB44FE74322}", IStateCalcInVelAzAtPeriapsis)
agcls.AgTypeNameMap["IStateCalcInVelAzAtPeriapsis"] = IStateCalcInVelAzAtPeriapsis

class IStateCalcOutAsympDec(object):
    """Properties for a Outgoing Asymptote Dec calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOutAsympDec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOutAsympDec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOutAsympDec, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcOutAsympDec._metadata, IStateCalcOutAsympDec._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOutAsympDec._metadata, IStateCalcOutAsympDec._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}", IStateCalcOutAsympDec)
agcls.AgTypeNameMap["IStateCalcOutAsympDec"] = IStateCalcOutAsympDec

class IStateCalcOutAsympRA(object):
    """Properties for a Outgoing Asymptote RA calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F2386148-5F54-40D2-91DD-322B912712B3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOutAsympRA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOutAsympRA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOutAsympRA, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcOutAsympRA._metadata, IStateCalcOutAsympRA._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOutAsympRA._metadata, IStateCalcOutAsympRA._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F2386148-5F54-40D2-91DD-322B912712B3}", IStateCalcOutAsympRA)
agcls.AgTypeNameMap["IStateCalcOutAsympRA"] = IStateCalcOutAsympRA

class IStateCalcOutVelAzAtPeriapsis(object):
    """Properties for a Outgoing Vel Az at Periapsis calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F908643D-9C89-4EDF-B45F-948B9303F260}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOutVelAzAtPeriapsis)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOutVelAzAtPeriapsis)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOutVelAzAtPeriapsis, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcOutVelAzAtPeriapsis._metadata, IStateCalcOutVelAzAtPeriapsis._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcOutVelAzAtPeriapsis._metadata, IStateCalcOutVelAzAtPeriapsis._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F908643D-9C89-4EDF-B45F-948B9303F260}", IStateCalcOutVelAzAtPeriapsis)
agcls.AgTypeNameMap["IStateCalcOutVelAzAtPeriapsis"] = IStateCalcOutVelAzAtPeriapsis

class IStateCalcDuration(object):
    """Properties for a Duration calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{429E860D-8706-4C30-9F40-B0113E00BAF8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDuration)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDuration)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDuration, None)
    

agcls.AgClassCatalog.add_catalog_entry("{429E860D-8706-4C30-9F40-B0113E00BAF8}", IStateCalcDuration)
agcls.AgTypeNameMap["IStateCalcDuration"] = IStateCalcDuration

class IStateCalcUserValue(object):
    """Interface for CAgAsStateCalcUserValue"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{BB517244-9226-45E2-9048-9D4E289BA920}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_variable_name" : 1,
                             "set_variable_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcUserValue)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcUserValue)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcUserValue, None)
    
    _get_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_name(self) -> str:
        """Name of the user variable"""
        return self._intf.get_property(IStateCalcUserValue._metadata, IStateCalcUserValue._get_variable_name_metadata)

    _set_variable_name_metadata = { "name" : "variable_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_name.setter
    def variable_name(self, inVal:str) -> None:
        """Name of the user variable"""
        return self._intf.set_property(IStateCalcUserValue._metadata, IStateCalcUserValue._set_variable_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{BB517244-9226-45E2-9048-9D4E289BA920}", IStateCalcUserValue)
agcls.AgTypeNameMap["IStateCalcUserValue"] = IStateCalcUserValue

class IStateCalcVectorGeometryToolAngle(object):
    """Properties for an Vector Geometry Tool Angle calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7EC926A3-7ED6-4091-9E74-EBA5700075A5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_angle_name" : 1,
                             "set_angle_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorGeometryToolAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorGeometryToolAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorGeometryToolAngle, None)
    
    _get_angle_name_metadata = { "name" : "angle_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def angle_name(self) -> str:
        """The angle."""
        return self._intf.get_property(IStateCalcVectorGeometryToolAngle._metadata, IStateCalcVectorGeometryToolAngle._get_angle_name_metadata)

    _set_angle_name_metadata = { "name" : "angle_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @angle_name.setter
    def angle_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorGeometryToolAngle._metadata, IStateCalcVectorGeometryToolAngle._set_angle_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7EC926A3-7ED6-4091-9E74-EBA5700075A5}", IStateCalcVectorGeometryToolAngle)
agcls.AgTypeNameMap["IStateCalcVectorGeometryToolAngle"] = IStateCalcVectorGeometryToolAngle

class IStateCalcAngle(object):
    """Properties for an Angle Between Vectors calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E703F5BA-3C07-407B-8BE6-5361172E97FF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_vector1_name" : 1,
                             "set_vector1_name" : 2,
                             "get_vector2_name" : 3,
                             "set_vector2_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcAngle)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcAngle)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcAngle, None)
    
    _get_vector1_name_metadata = { "name" : "vector1_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector1_name(self) -> str:
        """The first vector of the angle."""
        return self._intf.get_property(IStateCalcAngle._metadata, IStateCalcAngle._get_vector1_name_metadata)

    _set_vector1_name_metadata = { "name" : "vector1_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector1_name.setter
    def vector1_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcAngle._metadata, IStateCalcAngle._set_vector1_name_metadata, inVal)

    _get_vector2_name_metadata = { "name" : "vector2_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector2_name(self) -> str:
        """The second vector of the angle."""
        return self._intf.get_property(IStateCalcAngle._metadata, IStateCalcAngle._get_vector2_name_metadata)

    _set_vector2_name_metadata = { "name" : "vector2_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector2_name.setter
    def vector2_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcAngle._metadata, IStateCalcAngle._set_vector2_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E703F5BA-3C07-407B-8BE6-5361172E97FF}", IStateCalcAngle)
agcls.AgTypeNameMap["IStateCalcAngle"] = IStateCalcAngle

class IStateCalcDotProduct(object):
    """Properties for a Dot Product calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8B3C8283-79EC-48D1-BFBD-66775AA10803}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_vector1_name" : 1,
                             "set_vector1_name" : 2,
                             "get_vector2_name" : 3,
                             "set_vector2_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDotProduct)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDotProduct)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDotProduct, None)
    
    _get_vector1_name_metadata = { "name" : "vector1_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector1_name(self) -> str:
        """The first vector."""
        return self._intf.get_property(IStateCalcDotProduct._metadata, IStateCalcDotProduct._get_vector1_name_metadata)

    _set_vector1_name_metadata = { "name" : "vector1_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector1_name.setter
    def vector1_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDotProduct._metadata, IStateCalcDotProduct._set_vector1_name_metadata, inVal)

    _get_vector2_name_metadata = { "name" : "vector2_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector2_name(self) -> str:
        """The second vector."""
        return self._intf.get_property(IStateCalcDotProduct._metadata, IStateCalcDotProduct._get_vector2_name_metadata)

    _set_vector2_name_metadata = { "name" : "vector2_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector2_name.setter
    def vector2_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDotProduct._metadata, IStateCalcDotProduct._set_vector2_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8B3C8283-79EC-48D1-BFBD-66775AA10803}", IStateCalcDotProduct)
agcls.AgTypeNameMap["IStateCalcDotProduct"] = IStateCalcDotProduct

class IStateCalcVectorDec(object):
    """Properties for a Vector Dec calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2,
                             "get_vector_name" : 3,
                             "set_vector_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorDec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorDec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorDec, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcVectorDec._metadata, IStateCalcVectorDec._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorDec._metadata, IStateCalcVectorDec._set_coord_axes_name_metadata, inVal)

    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorDec._metadata, IStateCalcVectorDec._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorDec._metadata, IStateCalcVectorDec._set_vector_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}", IStateCalcVectorDec)
agcls.AgTypeNameMap["IStateCalcVectorDec"] = IStateCalcVectorDec

class IStateCalcVectorMagnitude(object):
    """Properties for a Vector Mag calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{522AF5A3-02FE-49E3-931A-3E8234EF896F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_vector_name" : 1,
                             "set_vector_name" : 2,
                             "get_unit_dimension" : 3,
                             "set_unit_dimension" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorMagnitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorMagnitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorMagnitude, None)
    
    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorMagnitude._metadata, IStateCalcVectorMagnitude._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorMagnitude._metadata, IStateCalcVectorMagnitude._set_vector_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcVectorMagnitude._metadata, IStateCalcVectorMagnitude._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorMagnitude._metadata, IStateCalcVectorMagnitude._set_unit_dimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{522AF5A3-02FE-49E3-931A-3E8234EF896F}", IStateCalcVectorMagnitude)
agcls.AgTypeNameMap["IStateCalcVectorMagnitude"] = IStateCalcVectorMagnitude

class IStateCalcVectorRA(object):
    """Properties for a Vector RA calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_axes_name" : 1,
                             "set_coord_axes_name" : 2,
                             "get_vector_name" : 3,
                             "set_vector_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcVectorRA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcVectorRA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcVectorRA, None)
    
    _get_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_axes_name(self) -> str:
        """The coordinate axes."""
        return self._intf.get_property(IStateCalcVectorRA._metadata, IStateCalcVectorRA._get_coord_axes_name_metadata)

    _set_coord_axes_name_metadata = { "name" : "coord_axes_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_axes_name.setter
    def coord_axes_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorRA._metadata, IStateCalcVectorRA._set_coord_axes_name_metadata, inVal)

    _get_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def vector_name(self) -> str:
        """The vector."""
        return self._intf.get_property(IStateCalcVectorRA._metadata, IStateCalcVectorRA._get_vector_name_metadata)

    _set_vector_name_metadata = { "name" : "vector_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @vector_name.setter
    def vector_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcVectorRA._metadata, IStateCalcVectorRA._set_vector_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}", IStateCalcVectorRA)
agcls.AgTypeNameMap["IStateCalcVectorRA"] = IStateCalcVectorRA

class IStateCalcOnePointAccess(object):
    """Properties for an Access calculation object."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EE091E20-3104-48F9-8163-29272A8B81C8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_aberration_type" : 1,
                             "set_aberration_type" : 2,
                             "set_base_selection" : 3,
                             "get_base_selection_type" : 4,
                             "get_base_selection" : 5,
                             "get_clock_host" : 6,
                             "set_clock_host" : 7,
                             "get_signal_sense" : 8,
                             "set_signal_sense" : 9,
                             "get_target_object" : 10,
                             "get_time_delay_convergence_tolerance" : 11,
                             "set_time_delay_convergence_tolerance" : 12,
                             "get_use_light_time_delay" : 13,
                             "set_use_light_time_delay" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcOnePointAccess)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcOnePointAccess)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcOnePointAccess, None)
    
    _get_aberration_type_metadata = { "name" : "aberration_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ABERRATION_TYPE),) }
    @property
    def aberration_type(self) -> "ABERRATION_TYPE":
        """The type of aberration to use, if light time delay is applied."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_aberration_type_metadata)

    _set_aberration_type_metadata = { "name" : "aberration_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ABERRATION_TYPE),) }
    @aberration_type.setter
    def aberration_type(self, inVal:"ABERRATION_TYPE") -> None:
        return self._intf.set_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_aberration_type_metadata, inVal)

    _set_base_selection_metadata = { "name" : "set_base_selection",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(BASE_SELECTION),) }
    def set_base_selection(self, selection:"BASE_SELECTION") -> None:
        """Base Selection"""
        return self._intf.invoke(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_base_selection_metadata, selection)

    _get_base_selection_type_metadata = { "name" : "base_selection_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(BASE_SELECTION),) }
    @property
    def base_selection_type(self) -> "BASE_SELECTION":
        """The base selection type."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_base_selection_type_metadata)

    _get_base_selection_metadata = { "name" : "base_selection",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def base_selection(self) -> "ILinkToObject":
        """The base selection object."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_base_selection_metadata)

    _get_clock_host_metadata = { "name" : "clock_host",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IV_CLOCK_HOST),) }
    @property
    def clock_host(self) -> "IV_CLOCK_HOST":
        """The object whose location is associated with time."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_clock_host_metadata)

    _set_clock_host_metadata = { "name" : "clock_host",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IV_CLOCK_HOST),) }
    @clock_host.setter
    def clock_host(self, inVal:"IV_CLOCK_HOST") -> None:
        return self._intf.set_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_clock_host_metadata, inVal)

    _get_signal_sense_metadata = { "name" : "signal_sense",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IV_TIME_SENSE),) }
    @property
    def signal_sense(self) -> "IV_TIME_SENSE":
        """Sense of the signal at the base object."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_signal_sense_metadata)

    _set_signal_sense_metadata = { "name" : "signal_sense",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IV_TIME_SENSE),) }
    @signal_sense.setter
    def signal_sense(self, inVal:"IV_TIME_SENSE") -> None:
        return self._intf.set_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_signal_sense_metadata, inVal)

    _get_target_object_metadata = { "name" : "target_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def target_object(self) -> "ILinkToObject":
        """The target object."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_target_object_metadata)

    _get_time_delay_convergence_tolerance_metadata = { "name" : "time_delay_convergence_tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def time_delay_convergence_tolerance(self) -> float:
        """The time delay convergence tolerance, if light time delay is applied. Uses Time Dimension."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_time_delay_convergence_tolerance_metadata)

    _set_time_delay_convergence_tolerance_metadata = { "name" : "time_delay_convergence_tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @time_delay_convergence_tolerance.setter
    def time_delay_convergence_tolerance(self, inVal:float) -> None:
        return self._intf.set_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_time_delay_convergence_tolerance_metadata, inVal)

    _get_use_light_time_delay_metadata = { "name" : "use_light_time_delay",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_light_time_delay(self) -> bool:
        """Tue if light time delay is applied."""
        return self._intf.get_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._get_use_light_time_delay_metadata)

    _set_use_light_time_delay_metadata = { "name" : "use_light_time_delay",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_light_time_delay.setter
    def use_light_time_delay(self, inVal:bool) -> None:
        return self._intf.set_property(IStateCalcOnePointAccess._metadata, IStateCalcOnePointAccess._set_use_light_time_delay_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EE091E20-3104-48F9-8163-29272A8B81C8}", IStateCalcOnePointAccess)
agcls.AgTypeNameMap["IStateCalcOnePointAccess"] = IStateCalcOnePointAccess

class IStateCalcDifferenceAcrossSegmentsOtherSat(object):
    """Properties for a Difference Across Segments Across Satellites calculation object."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_other_segment_name" : 3,
                             "set_other_segment_name" : 4,
                             "get_segment_state_to_use" : 5,
                             "set_segment_state_to_use" : 6,
                             "get_difference_order" : 7,
                             "set_difference_order" : 8,
                             "get_reference_sat" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDifferenceAcrossSegmentsOtherSat)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDifferenceAcrossSegmentsOtherSat)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDifferenceAcrossSegmentsOtherSat, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._set_calc_object_name_metadata, inVal)

    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._set_segment_state_to_use_metadata, inVal)

    _get_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_DIFFERENCE_ORDER),) }
    @property
    def difference_order(self) -> "SEGMENT_DIFFERENCE_ORDER":
        """The order of the difference calculation."""
        return self._intf.get_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._get_difference_order_metadata)

    _set_difference_order_metadata = { "name" : "difference_order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_DIFFERENCE_ORDER),) }
    @difference_order.setter
    def difference_order(self, inVal:"SEGMENT_DIFFERENCE_ORDER") -> None:
        return self._intf.set_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._set_difference_order_metadata, inVal)

    _get_reference_sat_metadata = { "name" : "reference_sat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference_sat(self) -> "ILinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        return self._intf.get_property(IStateCalcDifferenceAcrossSegmentsOtherSat._metadata, IStateCalcDifferenceAcrossSegmentsOtherSat._get_reference_sat_metadata)


agcls.AgClassCatalog.add_catalog_entry("{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}", IStateCalcDifferenceAcrossSegmentsOtherSat)
agcls.AgTypeNameMap["IStateCalcDifferenceAcrossSegmentsOtherSat"] = IStateCalcDifferenceAcrossSegmentsOtherSat

class IStateCalcValueAtSegmentOtherSat(object):
    """Properties for a Value At Segment Across Satellites calculation object."""
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_calc_object_name" : 1,
                             "set_calc_object_name" : 2,
                             "get_other_segment_name" : 3,
                             "set_other_segment_name" : 4,
                             "get_segment_state_to_use" : 5,
                             "set_segment_state_to_use" : 6,
                             "get_reference_sat" : 7, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcValueAtSegmentOtherSat)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcValueAtSegmentOtherSat)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcValueAtSegmentOtherSat, None)
    
    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The calculation object."""
        return self._intf.get_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._set_calc_object_name_metadata, inVal)

    _get_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def other_segment_name(self) -> str:
        """The segment to be compared against."""
        return self._intf.get_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._get_other_segment_name_metadata)

    _set_other_segment_name_metadata = { "name" : "other_segment_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @other_segment_name.setter
    def other_segment_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._set_other_segment_name_metadata, inVal)

    _get_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @property
    def segment_state_to_use(self) -> "SEGMENT_STATE":
        """The segment state to use in the calculation."""
        return self._intf.get_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._get_segment_state_to_use_metadata)

    _set_segment_state_to_use_metadata = { "name" : "segment_state_to_use",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SEGMENT_STATE),) }
    @segment_state_to_use.setter
    def segment_state_to_use(self, inVal:"SEGMENT_STATE") -> None:
        return self._intf.set_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._set_segment_state_to_use_metadata, inVal)

    _get_reference_sat_metadata = { "name" : "reference_sat",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def reference_sat(self) -> "ILinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        return self._intf.get_property(IStateCalcValueAtSegmentOtherSat._metadata, IStateCalcValueAtSegmentOtherSat._get_reference_sat_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}", IStateCalcValueAtSegmentOtherSat)
agcls.AgTypeNameMap["IStateCalcValueAtSegmentOtherSat"] = IStateCalcValueAtSegmentOtherSat

class IStateCalcRARate(object):
    """Properties for a Right Ascension Rate calculation object"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{69DDD91C-168B-47BD-9977-EB8431B4C112}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcRARate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcRARate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcRARate, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcRARate._metadata, IStateCalcRARate._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcRARate._metadata, IStateCalcRARate._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{69DDD91C-168B-47BD-9977-EB8431B4C112}", IStateCalcRARate)
agcls.AgTypeNameMap["IStateCalcRARate"] = IStateCalcRARate

class IStateCalcDecRate(object):
    """Properties for a Declination Rate calculation object"""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EE447FA6-4B21-4823-8811-E0E3C38A29E2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_coord_system_name" : 1,
                             "set_coord_system_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcDecRate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcDecRate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcDecRate, None)
    
    _get_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def coord_system_name(self) -> str:
        """The coordinate system within which the element is defined."""
        return self._intf.get_property(IStateCalcDecRate._metadata, IStateCalcDecRate._get_coord_system_name_metadata)

    _set_coord_system_name_metadata = { "name" : "coord_system_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @coord_system_name.setter
    def coord_system_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcDecRate._metadata, IStateCalcDecRate._set_coord_system_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EE447FA6-4B21-4823-8811-E0E3C38A29E2}", IStateCalcDecRate)
agcls.AgTypeNameMap["IStateCalcDecRate"] = IStateCalcDecRate

class IStateCalcGravitationalParameter(object):
    """Properties for a Gravitational Parameter calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_grav_source" : 3,
                             "set_grav_source" : 4,
                             "get_gravity_filename" : 5,
                             "set_gravity_filename" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGravitationalParameter)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGravitationalParameter)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGravitationalParameter, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._set_central_body_name_metadata, inVal)

    _get_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAVITATIONAL_PARAMETER_SOURCE),) }
    @property
    def grav_source(self) -> "GRAVITATIONAL_PARAMETER_SOURCE":
        """The source for the gravitational parameter."""
        return self._intf.get_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._get_grav_source_metadata)

    _set_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAVITATIONAL_PARAMETER_SOURCE),) }
    @grav_source.setter
    def grav_source(self, inVal:"GRAVITATIONAL_PARAMETER_SOURCE") -> None:
        return self._intf.set_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._set_grav_source_metadata, inVal)

    _get_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def gravity_filename(self) -> str:
        """Source for the gravitational parameter if GravSource is set to Gravity File."""
        return self._intf.get_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._get_gravity_filename_metadata)

    _set_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @gravity_filename.setter
    def gravity_filename(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGravitationalParameter._metadata, IStateCalcGravitationalParameter._set_gravity_filename_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}", IStateCalcGravitationalParameter)
agcls.AgTypeNameMap["IStateCalcGravitationalParameter"] = IStateCalcGravitationalParameter

class IStateCalcReferenceRadius(object):
    """Properties for a Reference Radius calculation object."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E736A217-0B66-48F6-99FA-D338835B4D40}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_reference_radius_source" : 3,
                             "set_reference_radius_source" : 4,
                             "get_gravity_filename" : 5,
                             "set_gravity_filename" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcReferenceRadius)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcReferenceRadius)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcReferenceRadius, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._set_central_body_name_metadata, inVal)

    _get_reference_radius_source_metadata = { "name" : "reference_radius_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(REFERENCE_RADIUS_SOURCE),) }
    @property
    def reference_radius_source(self) -> "REFERENCE_RADIUS_SOURCE":
        """The source for the reference radius."""
        return self._intf.get_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._get_reference_radius_source_metadata)

    _set_reference_radius_source_metadata = { "name" : "reference_radius_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(REFERENCE_RADIUS_SOURCE),) }
    @reference_radius_source.setter
    def reference_radius_source(self, inVal:"REFERENCE_RADIUS_SOURCE") -> None:
        return self._intf.set_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._set_reference_radius_source_metadata, inVal)

    _get_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def gravity_filename(self) -> str:
        """Source for the reference radius if RefRadSource is set to Gravity File."""
        return self._intf.get_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._get_gravity_filename_metadata)

    _set_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @gravity_filename.setter
    def gravity_filename(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcReferenceRadius._metadata, IStateCalcReferenceRadius._set_gravity_filename_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E736A217-0B66-48F6-99FA-D338835B4D40}", IStateCalcReferenceRadius)
agcls.AgTypeNameMap["IStateCalcReferenceRadius"] = IStateCalcReferenceRadius

class IStateCalcGravCoeff(object):
    """Properties for a gravity coefficient calculation object."""
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{057976B1-EBDA-4674-9FC0-556D7BD87599}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_gravity_filename" : 3,
                             "set_gravity_filename" : 4,
                             "get_coefficient_type" : 5,
                             "set_coefficient_type" : 6,
                             "get_degree" : 7,
                             "set_degree" : 8,
                             "get_order" : 9,
                             "set_order" : 10,
                             "get_normalization_type" : 11,
                             "set_normalization_type" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcGravCoeff)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcGravCoeff)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcGravCoeff, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_central_body_name_metadata, inVal)

    _get_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def gravity_filename(self) -> str:
        """Source for the gravity coefficient."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_gravity_filename_metadata)

    _set_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @gravity_filename.setter
    def gravity_filename(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_gravity_filename_metadata, inVal)

    _get_coefficient_type_metadata = { "name" : "coefficient_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_COEFF_COEFFICIENT_TYPE),) }
    @property
    def coefficient_type(self) -> "GRAV_COEFF_COEFFICIENT_TYPE":
        """Coefficient type."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_coefficient_type_metadata)

    _set_coefficient_type_metadata = { "name" : "coefficient_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_COEFF_COEFFICIENT_TYPE),) }
    @coefficient_type.setter
    def coefficient_type(self, inVal:"GRAV_COEFF_COEFFICIENT_TYPE") -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_coefficient_type_metadata, inVal)

    _get_degree_metadata = { "name" : "degree",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def degree(self) -> int:
        """Degree of the coefficient."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_degree_metadata)

    _set_degree_metadata = { "name" : "degree",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @degree.setter
    def degree(self, inVal:int) -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_degree_metadata, inVal)

    _get_order_metadata = { "name" : "order",
            "arg_types" : (POINTER(agcom.INT),),
            "marshallers" : (agmarshall.INT_arg,) }
    @property
    def order(self) -> int:
        """Order of the coefficient."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_order_metadata)

    _set_order_metadata = { "name" : "order",
            "arg_types" : (agcom.INT,),
            "marshallers" : (agmarshall.INT_arg,) }
    @order.setter
    def order(self, inVal:int) -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_order_metadata, inVal)

    _get_normalization_type_metadata = { "name" : "normalization_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_COEFF_NORMALIZATION_TYPE),) }
    @property
    def normalization_type(self) -> "GRAV_COEFF_NORMALIZATION_TYPE":
        """Normalization type."""
        return self._intf.get_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._get_normalization_type_metadata)

    _set_normalization_type_metadata = { "name" : "normalization_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_COEFF_NORMALIZATION_TYPE),) }
    @normalization_type.setter
    def normalization_type(self, inVal:"GRAV_COEFF_NORMALIZATION_TYPE") -> None:
        return self._intf.set_property(IStateCalcGravCoeff._metadata, IStateCalcGravCoeff._set_normalization_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{057976B1-EBDA-4674-9FC0-556D7BD87599}", IStateCalcGravCoeff)
agcls.AgTypeNameMap["IStateCalcGravCoeff"] = IStateCalcGravCoeff

class IStateCalcSpeedOfLight(object):
    """Properties for a Speed of Light calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcSpeedOfLight)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcSpeedOfLight)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcSpeedOfLight, None)
    

agcls.AgClassCatalog.add_catalog_entry("{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}", IStateCalcSpeedOfLight)
agcls.AgTypeNameMap["IStateCalcSpeedOfLight"] = IStateCalcSpeedOfLight

class IStateCalcPi(object):
    """Properties for a Pi calculation object."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DDE94FB4-1751-4F38-9304-5ACC35CDC811}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcPi)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcPi)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcPi, None)
    

agcls.AgClassCatalog.add_catalog_entry("{DDE94FB4-1751-4F38-9304-5ACC35CDC811}", IStateCalcPi)
agcls.AgTypeNameMap["IStateCalcPi"] = IStateCalcPi

class IStateCalcScalar(object):
    """Properties for a Scalar calculation object."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D792B480-CCC7-4040-BD41-A26E56DE6CA8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_scalar_name" : 1,
                             "set_scalar_name" : 2,
                             "get_unit_dimension" : 3,
                             "set_unit_dimension" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcScalar)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcScalar)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcScalar, None)
    
    _get_scalar_name_metadata = { "name" : "scalar_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def scalar_name(self) -> str:
        """The scalar name."""
        return self._intf.get_property(IStateCalcScalar._metadata, IStateCalcScalar._get_scalar_name_metadata)

    _set_scalar_name_metadata = { "name" : "scalar_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @scalar_name.setter
    def scalar_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcScalar._metadata, IStateCalcScalar._set_scalar_name_metadata, inVal)

    _get_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def unit_dimension(self) -> str:
        """The unit dimension."""
        return self._intf.get_property(IStateCalcScalar._metadata, IStateCalcScalar._get_unit_dimension_metadata)

    _set_unit_dimension_metadata = { "name" : "unit_dimension",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @unit_dimension.setter
    def unit_dimension(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcScalar._metadata, IStateCalcScalar._set_unit_dimension_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D792B480-CCC7-4040-BD41-A26E56DE6CA8}", IStateCalcScalar)
agcls.AgTypeNameMap["IStateCalcScalar"] = IStateCalcScalar

class IStateCalcApparentSolarTime(object):
    """Properties for an Apparent Solar Time calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{439AD289-B0FE-4596-A6AC-A29B6F98C313}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcApparentSolarTime)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcApparentSolarTime)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcApparentSolarTime, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcApparentSolarTime._metadata, IStateCalcApparentSolarTime._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcApparentSolarTime._metadata, IStateCalcApparentSolarTime._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{439AD289-B0FE-4596-A6AC-A29B6F98C313}", IStateCalcApparentSolarTime)
agcls.AgTypeNameMap["IStateCalcApparentSolarTime"] = IStateCalcApparentSolarTime

class IStateCalcEarthMeanSolarTime(object):
    """Properties for an Earth Mean Solar Time calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEarthMeanSolarTime)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEarthMeanSolarTime)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEarthMeanSolarTime, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEarthMeanSolarTime._metadata, IStateCalcEarthMeanSolarTime._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEarthMeanSolarTime._metadata, IStateCalcEarthMeanSolarTime._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}", IStateCalcEarthMeanSolarTime)
agcls.AgTypeNameMap["IStateCalcEarthMeanSolarTime"] = IStateCalcEarthMeanSolarTime

class IStateCalcEarthMeanLocTimeAN(object):
    """Properties for an Earth Mean Local Time of Ascending Node calculation object."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{325E3769-FB5E-4B6B-AC89-48CD5A09C528}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateCalcEarthMeanLocTimeAN)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateCalcEarthMeanLocTimeAN)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateCalcEarthMeanLocTimeAN, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body of the component."""
        return self._intf.get_property(IStateCalcEarthMeanLocTimeAN._metadata, IStateCalcEarthMeanLocTimeAN._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IStateCalcEarthMeanLocTimeAN._metadata, IStateCalcEarthMeanLocTimeAN._set_central_body_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{325E3769-FB5E-4B6B-AC89-48CD5A09C528}", IStateCalcEarthMeanLocTimeAN)
agcls.AgTypeNameMap["IStateCalcEarthMeanLocTimeAN"] = IStateCalcEarthMeanLocTimeAN

class ICentralBodyCollection(object):
    """The list of central bodies."""
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get_count" : 2,
                             "get__NewEnum" : 3,
                             "add" : 4,
                             "remove" : 5,
                             "remove_all" : 6,
                             "get_item_by_index" : 7,
                             "get_item_by_name" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IAstrogatorCentralBody":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrCbName:typing.Any) -> "AstrogatorCentralBody":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._item_metadata, indexOrCbName, out_arg())

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(ICentralBodyCollection._metadata, ICentralBodyCollection._get_count_metadata)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Iterates through the collection."""
        return self._intf.get_property(ICentralBodyCollection._metadata, ICentralBodyCollection._get__NewEnum_metadata)

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def add(self, cbName:str) -> None:
        """Add a central body to the collection."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._add_metadata, cbName)

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a central body from the collection."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all central bodies from the collection."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._remove_all_metadata, )

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "AstrogatorCentralBody":
        """Retrieve a central body from the collection by index."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, cbName:str) -> "AstrogatorCentralBody":
        """Retrieve a central body from the collection by name."""
        return self._intf.invoke(ICentralBodyCollection._metadata, ICentralBodyCollection._get_item_by_name_metadata, cbName, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}", ICentralBodyCollection)
agcls.AgTypeNameMap["ICentralBodyCollection"] = ICentralBodyCollection

class ICentralBodyEphemeris(object):
    """The central body ephemeris source."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AE91748E-8A2D-4D9D-9C39-88017D0CB591}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemeris)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemeris)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemeris, None)
    

agcls.AgClassCatalog.add_catalog_entry("{AE91748E-8A2D-4D9D-9C39-88017D0CB591}", ICentralBodyEphemeris)
agcls.AgTypeNameMap["ICentralBodyEphemeris"] = ICentralBodyEphemeris

class ICentralBodyGravityModel(object):
    """Properties for a central body gravity model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B20E4246-ED81-4131-82AF-C76FAD7C57A8}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_gravitational_param" : 1,
                             "set_gravitational_param" : 2,
                             "get_reference_distance" : 3,
                             "set_reference_distance" : 4,
                             "get_j2" : 5,
                             "set_j2" : 6,
                             "get_j3" : 7,
                             "set_j3" : 8,
                             "get_j4" : 9,
                             "set_j4" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyGravityModel)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyGravityModel)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyGravityModel, None)
    
    _get_gravitational_param_metadata = { "name" : "gravitational_param",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def gravitational_param(self) -> float:
        """The gravitational parameter to be used for purposes of this gravity model. Uses Gravitational Param Dimension."""
        return self._intf.get_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._get_gravitational_param_metadata)

    _set_gravitational_param_metadata = { "name" : "gravitational_param",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @gravitational_param.setter
    def gravitational_param(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._set_gravitational_param_metadata, newVal)

    _get_reference_distance_metadata = { "name" : "reference_distance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def reference_distance(self) -> float:
        """Distance from the center of mass of the central body to its surface. Typically defaults to the Maximum Radius entered in the Shape frame of the Central Body parameters window. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._get_reference_distance_metadata)

    _set_reference_distance_metadata = { "name" : "reference_distance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @reference_distance.setter
    def reference_distance(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._set_reference_distance_metadata, newVal)

    _get_j2_metadata = { "name" : "j2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def j2(self) -> float:
        """The J2 property. Taking into account first order Earth oblateness effects. Dimensionless."""
        return self._intf.get_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._get_j2_metadata)

    _set_j2_metadata = { "name" : "j2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @j2.setter
    def j2(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._set_j2_metadata, newVal)

    _get_j3_metadata = { "name" : "j3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def j3(self) -> float:
        """The J3 property. Taking into account first order longitudinal variations of the Earth's shape. Dimensionless."""
        return self._intf.get_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._get_j3_metadata)

    _set_j3_metadata = { "name" : "j3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @j3.setter
    def j3(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._set_j3_metadata, newVal)

    _get_j4_metadata = { "name" : "j4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def j4(self) -> float:
        """The J4 property. Taking into account first and second order Earth oblateness effects. Dimensionless."""
        return self._intf.get_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._get_j4_metadata)

    _set_j4_metadata = { "name" : "j4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @j4.setter
    def j4(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyGravityModel._metadata, ICentralBodyGravityModel._set_j4_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B20E4246-ED81-4131-82AF-C76FAD7C57A8}", ICentralBodyGravityModel)
agcls.AgTypeNameMap["ICentralBodyGravityModel"] = ICentralBodyGravityModel

class ICentralBodyShape(object):
    """The central body shape."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4DD8FE3F-7B64-4477-9D9E-97226A04584D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyShape)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyShape)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyShape, None)
    

agcls.AgClassCatalog.add_catalog_entry("{4DD8FE3F-7B64-4477-9D9E-97226A04584D}", ICentralBodyShape)
agcls.AgTypeNameMap["ICentralBodyShape"] = ICentralBodyShape

class ICentralBodyShapeSphere(ICentralBodyShape):
    """Properties for the central body sphere shape."""
    _num_methods = 2
    _vtable_offset = ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods
    _metadata = {
        "uuid" : "{BF7B6D1A-62E6-4897-8861-233465975488}",
        "vtable_reference" : ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods - 1,
        "method_offsets" : { "get_radius" : 1,
                             "set_radius" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyShapeSphere)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyShapeSphere)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyShapeSphere, ICentralBodyShape)
    
    _get_radius_metadata = { "name" : "radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def radius(self) -> float:
        """The radius. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeSphere._metadata, ICentralBodyShapeSphere._get_radius_metadata)

    _set_radius_metadata = { "name" : "radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @radius.setter
    def radius(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeSphere._metadata, ICentralBodyShapeSphere._set_radius_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{BF7B6D1A-62E6-4897-8861-233465975488}", ICentralBodyShapeSphere)
agcls.AgTypeNameMap["ICentralBodyShapeSphere"] = ICentralBodyShapeSphere

class ICentralBodyShapeOblateSpheroid(ICentralBodyShape):
    """Properties for the central body oblate spheroid shape."""
    _num_methods = 5
    _vtable_offset = ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods
    _metadata = {
        "uuid" : "{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}",
        "vtable_reference" : ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods - 1,
        "method_offsets" : { "get_min_radius" : 1,
                             "set_min_radius" : 2,
                             "get_max_radius" : 3,
                             "set_max_radius" : 4,
                             "get_flattening_coefficient" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyShapeOblateSpheroid)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyShapeOblateSpheroid)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyShapeOblateSpheroid, ICentralBodyShape)
    
    _get_min_radius_metadata = { "name" : "min_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_radius(self) -> float:
        """The minimum radius. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeOblateSpheroid._metadata, ICentralBodyShapeOblateSpheroid._get_min_radius_metadata)

    _set_min_radius_metadata = { "name" : "min_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_radius.setter
    def min_radius(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeOblateSpheroid._metadata, ICentralBodyShapeOblateSpheroid._set_min_radius_metadata, newVal)

    _get_max_radius_metadata = { "name" : "max_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_radius(self) -> float:
        """The maximum radius. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeOblateSpheroid._metadata, ICentralBodyShapeOblateSpheroid._get_max_radius_metadata)

    _set_max_radius_metadata = { "name" : "max_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_radius.setter
    def max_radius(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeOblateSpheroid._metadata, ICentralBodyShapeOblateSpheroid._set_max_radius_metadata, newVal)

    _get_flattening_coefficient_metadata = { "name" : "flattening_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def flattening_coefficient(self) -> float:
        """The flattening coefficient; automatically derived from the minimum and maximum radii. Dimensionless."""
        return self._intf.get_property(ICentralBodyShapeOblateSpheroid._metadata, ICentralBodyShapeOblateSpheroid._get_flattening_coefficient_metadata)


agcls.AgClassCatalog.add_catalog_entry("{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}", ICentralBodyShapeOblateSpheroid)
agcls.AgTypeNameMap["ICentralBodyShapeOblateSpheroid"] = ICentralBodyShapeOblateSpheroid

class ICentralBodyShapeTriaxialEllipsoid(ICentralBodyShape):
    """Properties for the central body triaxial ellipsoid shape."""
    _num_methods = 6
    _vtable_offset = ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods
    _metadata = {
        "uuid" : "{E446F44B-EDEB-4643-BEDA-6EA807C27882}",
        "vtable_reference" : ICentralBodyShape._vtable_offset + ICentralBodyShape._num_methods - 1,
        "method_offsets" : { "get_semi_major_axis" : 1,
                             "set_semi_major_axis" : 2,
                             "get_semi_mid_axis" : 3,
                             "set_semi_mid_axis" : 4,
                             "get_semi_minor_axis" : 5,
                             "set_semi_minor_axis" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyShapeTriaxialEllipsoid)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyShapeTriaxialEllipsoid)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyShapeTriaxialEllipsoid, ICentralBodyShape)
    
    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """The semi-major axis. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._set_semi_major_axis_metadata, newVal)

    _get_semi_mid_axis_metadata = { "name" : "semi_mid_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_mid_axis(self) -> float:
        """The semi-mid axis. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._get_semi_mid_axis_metadata)

    _set_semi_mid_axis_metadata = { "name" : "semi_mid_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_mid_axis.setter
    def semi_mid_axis(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._set_semi_mid_axis_metadata, newVal)

    _get_semi_minor_axis_metadata = { "name" : "semi_minor_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_minor_axis(self) -> float:
        """The semi-minor axis. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._get_semi_minor_axis_metadata)

    _set_semi_minor_axis_metadata = { "name" : "semi_minor_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_minor_axis.setter
    def semi_minor_axis(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyShapeTriaxialEllipsoid._metadata, ICentralBodyShapeTriaxialEllipsoid._set_semi_minor_axis_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E446F44B-EDEB-4643-BEDA-6EA807C27882}", ICentralBodyShapeTriaxialEllipsoid)
agcls.AgTypeNameMap["ICentralBodyShapeTriaxialEllipsoid"] = ICentralBodyShapeTriaxialEllipsoid

class ICentralBodyAttitude(object):
    """The central body attitude."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DF0EB27A-4546-4A2C-B154-49E86527784D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyAttitude)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyAttitude)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyAttitude, None)
    

agcls.AgClassCatalog.add_catalog_entry("{DF0EB27A-4546-4A2C-B154-49E86527784D}", ICentralBodyAttitude)
agcls.AgTypeNameMap["ICentralBodyAttitude"] = ICentralBodyAttitude

class ICentralBodyAttitudeRotationCoefficientsFile(ICentralBodyAttitude):
    """Properties for a rotation coefficients file attitude definition."""
    _num_methods = 2
    _vtable_offset = ICentralBodyAttitude._vtable_offset + ICentralBodyAttitude._num_methods
    _metadata = {
        "uuid" : "{E0F3153F-7F2D-46B7-B317-99EDABD12360}",
        "vtable_reference" : ICentralBodyAttitude._vtable_offset + ICentralBodyAttitude._num_methods - 1,
        "method_offsets" : { "get_filename" : 1,
                             "set_filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyAttitudeRotationCoefficientsFile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyAttitudeRotationCoefficientsFile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyAttitudeRotationCoefficientsFile, ICentralBodyAttitude)
    
    _get_filename_metadata = { "name" : "filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def filename(self) -> str:
        """The name of the rotation coefficients file."""
        return self._intf.get_property(ICentralBodyAttitudeRotationCoefficientsFile._metadata, ICentralBodyAttitudeRotationCoefficientsFile._get_filename_metadata)

    _set_filename_metadata = { "name" : "filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @filename.setter
    def filename(self, newVal:str) -> None:
        return self._intf.set_property(ICentralBodyAttitudeRotationCoefficientsFile._metadata, ICentralBodyAttitudeRotationCoefficientsFile._set_filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{E0F3153F-7F2D-46B7-B317-99EDABD12360}", ICentralBodyAttitudeRotationCoefficientsFile)
agcls.AgTypeNameMap["ICentralBodyAttitudeRotationCoefficientsFile"] = ICentralBodyAttitudeRotationCoefficientsFile

class ICentralBodyAttitudeIAU1994(ICentralBodyAttitude):
    """Properties for an IAU1994 attitude definition."""
    _num_methods = 12
    _vtable_offset = ICentralBodyAttitude._vtable_offset + ICentralBodyAttitude._num_methods
    _metadata = {
        "uuid" : "{7F28E973-1139-4D02-8F8C-C0F68E3035A9}",
        "vtable_reference" : ICentralBodyAttitude._vtable_offset + ICentralBodyAttitude._num_methods - 1,
        "method_offsets" : { "get_right_ascension" : 1,
                             "set_right_ascension" : 2,
                             "get_declination" : 3,
                             "set_declination" : 4,
                             "get_right_ascension_rate" : 5,
                             "set_right_ascension_rate" : 6,
                             "get_declination_rate" : 7,
                             "set_declination_rate" : 8,
                             "get_rotation_offset" : 9,
                             "set_rotation_offset" : 10,
                             "get_rotation_rate" : 11,
                             "set_rotation_rate" : 12, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyAttitudeIAU1994)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyAttitudeIAU1994)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyAttitudeIAU1994, ICentralBodyAttitude)
    
    _get_right_ascension_metadata = { "name" : "right_ascension",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def right_ascension(self) -> typing.Any:
        """The right ascension; the angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spin axis -- the angle  in the drawing below. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_right_ascension_metadata)

    _set_right_ascension_metadata = { "name" : "right_ascension",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @right_ascension.setter
    def right_ascension(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_right_ascension_metadata, newVal)

    _get_declination_metadata = { "name" : "declination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def declination(self) -> typing.Any:
        """The declination; the angle from the X-Y plane of the coordinate system to the spin axis vector. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_declination_metadata)

    _set_declination_metadata = { "name" : "declination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @declination.setter
    def declination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_declination_metadata, newVal)

    _get_right_ascension_rate_metadata = { "name" : "right_ascension_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def right_ascension_rate(self) -> float:
        """The right ascension rate; the rate of change in the right ascension. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_right_ascension_rate_metadata)

    _set_right_ascension_rate_metadata = { "name" : "right_ascension_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @right_ascension_rate.setter
    def right_ascension_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_right_ascension_rate_metadata, newVal)

    _get_declination_rate_metadata = { "name" : "declination_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def declination_rate(self) -> float:
        """The declination rate; the rate of change in the declination. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_declination_rate_metadata)

    _set_declination_rate_metadata = { "name" : "declination_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @declination_rate.setter
    def declination_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_declination_rate_metadata, newVal)

    _get_rotation_offset_metadata = { "name" : "rotation_offset",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def rotation_offset(self) -> typing.Any:
        """The rotation offset; the angle from the inertially fixed reference direction to the body-fixed prime meridian (0 deg longitude) at the time of epoch. Uses AngleUnit Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_rotation_offset_metadata)

    _set_rotation_offset_metadata = { "name" : "rotation_offset",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @rotation_offset.setter
    def rotation_offset(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_rotation_offset_metadata, newVal)

    _get_rotation_rate_metadata = { "name" : "rotation_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def rotation_rate(self) -> float:
        """The rotation rate; the rate of the central body's rotation. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._get_rotation_rate_metadata)

    _set_rotation_rate_metadata = { "name" : "rotation_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @rotation_rate.setter
    def rotation_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyAttitudeIAU1994._metadata, ICentralBodyAttitudeIAU1994._set_rotation_rate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{7F28E973-1139-4D02-8F8C-C0F68E3035A9}", ICentralBodyAttitudeIAU1994)
agcls.AgTypeNameMap["ICentralBodyAttitudeIAU1994"] = ICentralBodyAttitudeIAU1994

class ICentralBodyEphemerisAnalyticOrbit(ICentralBodyEphemeris):
    """Properties for the Analytic Orbit ephemeris source."""
    _num_methods = 26
    _vtable_offset = ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods
    _metadata = {
        "uuid" : "{662F2BBE-2CFB-41F7-A928-26A4909C31AB}",
        "vtable_reference" : ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods - 1,
        "method_offsets" : { "get_epoch" : 1,
                             "set_epoch" : 2,
                             "get_semi_major_axis" : 3,
                             "set_semi_major_axis" : 4,
                             "get_semi_major_axis_rate" : 5,
                             "set_semi_major_axis_rate" : 6,
                             "get_eccentricity" : 7,
                             "set_eccentricity" : 8,
                             "get_eccentricity_rate" : 9,
                             "set_eccentricity_rate" : 10,
                             "get_inclination" : 11,
                             "set_inclination" : 12,
                             "get_inclination_rate" : 13,
                             "set_inclination_rate" : 14,
                             "get_raan" : 15,
                             "set_raan" : 16,
                             "get_raan_rate" : 17,
                             "set_raan_rate" : 18,
                             "get_arg_of_periapsis" : 19,
                             "set_arg_of_periapsis" : 20,
                             "get_arg_of_periapsis_rate" : 21,
                             "set_arg_of_periapsis_rate" : 22,
                             "get_mean_longitude" : 23,
                             "set_mean_longitude" : 24,
                             "get_mean_longitude_rate" : 25,
                             "set_mean_longitude_rate" : 26, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemerisAnalyticOrbit)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemerisAnalyticOrbit)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemerisAnalyticOrbit, ICentralBodyEphemeris)
    
    _get_epoch_metadata = { "name" : "epoch",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def epoch(self) -> float:
        """The epoch. Dimensionless."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_epoch_metadata)

    _set_epoch_metadata = { "name" : "epoch",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @epoch.setter
    def epoch(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_epoch_metadata, newVal)

    _get_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis(self) -> float:
        """The semi-major axis; one-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_semi_major_axis_metadata)

    _set_semi_major_axis_metadata = { "name" : "semi_major_axis",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis.setter
    def semi_major_axis(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_semi_major_axis_metadata, newVal)

    _get_semi_major_axis_rate_metadata = { "name" : "semi_major_axis_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def semi_major_axis_rate(self) -> float:
        """The semi-major axis rate of change. Uses Rate Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_semi_major_axis_rate_metadata)

    _set_semi_major_axis_rate_metadata = { "name" : "semi_major_axis_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @semi_major_axis_rate.setter
    def semi_major_axis_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_semi_major_axis_rate_metadata, newVal)

    _get_eccentricity_metadata = { "name" : "eccentricity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def eccentricity(self) -> float:
        """The eccentricity; the ratio of the distance between the two foci of the ellipse and its major axis. Dimensionless."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_eccentricity_metadata)

    _set_eccentricity_metadata = { "name" : "eccentricity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @eccentricity.setter
    def eccentricity(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_eccentricity_metadata, newVal)

    _get_eccentricity_rate_metadata = { "name" : "eccentricity_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def eccentricity_rate(self) -> float:
        """The eccentricity rate of change. Dimensionless."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_eccentricity_rate_metadata)

    _set_eccentricity_rate_metadata = { "name" : "eccentricity_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @eccentricity_rate.setter
    def eccentricity_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_eccentricity_rate_metadata, newVal)

    _get_inclination_metadata = { "name" : "inclination",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inclination(self) -> typing.Any:
        """The inclination; the angle from the Z axis of the inertial coordinate system to the orbit angular velocity vector. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_inclination_metadata)

    _set_inclination_metadata = { "name" : "inclination",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inclination.setter
    def inclination(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_inclination_metadata, newVal)

    _get_inclination_rate_metadata = { "name" : "inclination_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def inclination_rate(self) -> float:
        """The inclination rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_inclination_rate_metadata)

    _set_inclination_rate_metadata = { "name" : "inclination_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @inclination_rate.setter
    def inclination_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_inclination_rate_metadata, newVal)

    _get_raan_metadata = { "name" : "raan",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def raan(self) -> typing.Any:
        """The right ascension; the angle from the X axis of the inertial coordinate system to the point where the orbit crosses the X-Y plane in the +Z direction. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_raan_metadata)

    _set_raan_metadata = { "name" : "raan",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @raan.setter
    def raan(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_raan_metadata, newVal)

    _get_raan_rate_metadata = { "name" : "raan_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def raan_rate(self) -> float:
        """The right ascension rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_raan_rate_metadata)

    _set_raan_rate_metadata = { "name" : "raan_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @raan_rate.setter
    def raan_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_raan_rate_metadata, newVal)

    _get_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def arg_of_periapsis(self) -> typing.Any:
        """The argument of periapsis; The angle measured in direction of the body's orbital motion, and in the orbit plane, from the ascending node to the periapsis of the orbit. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_arg_of_periapsis_metadata)

    _set_arg_of_periapsis_metadata = { "name" : "arg_of_periapsis",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @arg_of_periapsis.setter
    def arg_of_periapsis(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_arg_of_periapsis_metadata, newVal)

    _get_arg_of_periapsis_rate_metadata = { "name" : "arg_of_periapsis_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def arg_of_periapsis_rate(self) -> float:
        """The argument of periapsis rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_arg_of_periapsis_rate_metadata)

    _set_arg_of_periapsis_rate_metadata = { "name" : "arg_of_periapsis_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @arg_of_periapsis_rate.setter
    def arg_of_periapsis_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_arg_of_periapsis_rate_metadata, newVal)

    _get_mean_longitude_metadata = { "name" : "mean_longitude",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def mean_longitude(self) -> typing.Any:
        """The mean longitude; the sum of the Right Ascension of the Ascending Node, the Argument of Periapsis and the Mean Anomaly. Uses Angle Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_mean_longitude_metadata)

    _set_mean_longitude_metadata = { "name" : "mean_longitude",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @mean_longitude.setter
    def mean_longitude(self, newVal:typing.Any) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_mean_longitude_metadata, newVal)

    _get_mean_longitude_rate_metadata = { "name" : "mean_longitude_rate",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_longitude_rate(self) -> float:
        """The mean longitude rate of change. Uses AngleRate Dimension."""
        return self._intf.get_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._get_mean_longitude_rate_metadata)

    _set_mean_longitude_rate_metadata = { "name" : "mean_longitude_rate",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_longitude_rate.setter
    def mean_longitude_rate(self, newVal:float) -> None:
        return self._intf.set_property(ICentralBodyEphemerisAnalyticOrbit._metadata, ICentralBodyEphemerisAnalyticOrbit._set_mean_longitude_rate_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{662F2BBE-2CFB-41F7-A928-26A4909C31AB}", ICentralBodyEphemerisAnalyticOrbit)
agcls.AgTypeNameMap["ICentralBodyEphemerisAnalyticOrbit"] = ICentralBodyEphemerisAnalyticOrbit

class ICentralBodyEphemerisJPLSpice(ICentralBodyEphemeris):
    """Properties for the JPL SPICE ephemeris source."""
    _num_methods = 2
    _vtable_offset = ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods
    _metadata = {
        "uuid" : "{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}",
        "vtable_reference" : ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods - 1,
        "method_offsets" : { "get_jpl_spice_id" : 1,
                             "set_jpl_spice_id" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemerisJPLSpice)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemerisJPLSpice)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemerisJPLSpice, ICentralBodyEphemeris)
    
    _get_jpl_spice_id_metadata = { "name" : "jpl_spice_id",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def jpl_spice_id(self) -> str:
        """The SPICE file name."""
        return self._intf.get_property(ICentralBodyEphemerisJPLSpice._metadata, ICentralBodyEphemerisJPLSpice._get_jpl_spice_id_metadata)

    _set_jpl_spice_id_metadata = { "name" : "jpl_spice_id",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @jpl_spice_id.setter
    def jpl_spice_id(self, newVal:str) -> None:
        return self._intf.set_property(ICentralBodyEphemerisJPLSpice._metadata, ICentralBodyEphemerisJPLSpice._set_jpl_spice_id_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}", ICentralBodyEphemerisJPLSpice)
agcls.AgTypeNameMap["ICentralBodyEphemerisJPLSpice"] = ICentralBodyEphemerisJPLSpice

class ICentralBodyEphemerisFile(ICentralBodyEphemeris):
    """Properties for the Ephemeris File ephemeris source."""
    _num_methods = 2
    _vtable_offset = ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods
    _metadata = {
        "uuid" : "{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}",
        "vtable_reference" : ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods - 1,
        "method_offsets" : { "get_filename" : 1,
                             "set_filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemerisFile)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemerisFile)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemerisFile, ICentralBodyEphemeris)
    
    _get_filename_metadata = { "name" : "filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def filename(self) -> str:
        """The ephemeris file name."""
        return self._intf.get_property(ICentralBodyEphemerisFile._metadata, ICentralBodyEphemerisFile._get_filename_metadata)

    _set_filename_metadata = { "name" : "filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @filename.setter
    def filename(self, newVal:str) -> None:
        return self._intf.set_property(ICentralBodyEphemerisFile._metadata, ICentralBodyEphemerisFile._set_filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}", ICentralBodyEphemerisFile)
agcls.AgTypeNameMap["ICentralBodyEphemerisFile"] = ICentralBodyEphemerisFile

class ICentralBodyEphemerisJPLDesignExplorerOptimizer(ICentralBodyEphemeris):
    """Properties for the JPL DE ephemeris source."""
    _num_methods = 2
    _vtable_offset = ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods
    _metadata = {
        "uuid" : "{FCD86AB9-0919-46BC-BF99-287F49837BD5}",
        "vtable_reference" : ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods - 1,
        "method_offsets" : { "get_jplde_filename" : 1,
                             "set_jplde_filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemerisJPLDesignExplorerOptimizer)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemerisJPLDesignExplorerOptimizer)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemerisJPLDesignExplorerOptimizer, ICentralBodyEphemeris)
    
    _get_jplde_filename_metadata = { "name" : "jplde_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def jplde_filename(self) -> str:
        """The DE file name."""
        return self._intf.get_property(ICentralBodyEphemerisJPLDesignExplorerOptimizer._metadata, ICentralBodyEphemerisJPLDesignExplorerOptimizer._get_jplde_filename_metadata)

    _set_jplde_filename_metadata = { "name" : "jplde_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @jplde_filename.setter
    def jplde_filename(self, newVal:str) -> None:
        return self._intf.set_property(ICentralBodyEphemerisJPLDesignExplorerOptimizer._metadata, ICentralBodyEphemerisJPLDesignExplorerOptimizer._set_jplde_filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{FCD86AB9-0919-46BC-BF99-287F49837BD5}", ICentralBodyEphemerisJPLDesignExplorerOptimizer)
agcls.AgTypeNameMap["ICentralBodyEphemerisJPLDesignExplorerOptimizer"] = ICentralBodyEphemerisJPLDesignExplorerOptimizer

class ICentralBodyEphemerisPlanetary(ICentralBodyEphemeris):
    """Properties for the Planetary Ephemeris file ephemeris source."""
    _num_methods = 2
    _vtable_offset = ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods
    _metadata = {
        "uuid" : "{471AE49F-1C98-4572-9EDD-16060AFA9208}",
        "vtable_reference" : ICentralBodyEphemeris._vtable_offset + ICentralBodyEphemeris._num_methods - 1,
        "method_offsets" : { "get_planetary_filename" : 1,
                             "set_planetary_filename" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICentralBodyEphemerisPlanetary)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICentralBodyEphemerisPlanetary)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICentralBodyEphemerisPlanetary, ICentralBodyEphemeris)
    
    _get_planetary_filename_metadata = { "name" : "planetary_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def planetary_filename(self) -> str:
        """The planetary ephemeris file name."""
        return self._intf.get_property(ICentralBodyEphemerisPlanetary._metadata, ICentralBodyEphemerisPlanetary._get_planetary_filename_metadata)

    _set_planetary_filename_metadata = { "name" : "planetary_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @planetary_filename.setter
    def planetary_filename(self, newVal:str) -> None:
        return self._intf.set_property(ICentralBodyEphemerisPlanetary._metadata, ICentralBodyEphemerisPlanetary._set_planetary_filename_metadata, newVal)


agcls.AgClassCatalog.add_catalog_entry("{471AE49F-1C98-4572-9EDD-16060AFA9208}", ICentralBodyEphemerisPlanetary)
agcls.AgTypeNameMap["ICentralBodyEphemerisPlanetary"] = ICentralBodyEphemerisPlanetary

class IAstrogatorCentralBody(object):
    """General properties for a central body."""
    _num_methods = 41
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_gravitational_param" : 1,
                             "set_gravitational_param" : 2,
                             "get_parent_name" : 3,
                             "set_parent_name" : 4,
                             "get_children" : 5,
                             "get_default_gravity_model_name" : 6,
                             "set_default_gravity_model_by_name" : 7,
                             "get_default_gravity_model_data" : 8,
                             "add_gravity_model" : 9,
                             "remove_gravity_model_by_name" : 10,
                             "get_default_shape_name" : 11,
                             "get_default_shape_data" : 12,
                             "set_default_shape_by_name" : 13,
                             "add_shape" : 14,
                             "remove_shape_by_name" : 15,
                             "get_default_attitude_name" : 16,
                             "get_default_attitude_data" : 17,
                             "set_default_attitude_by_name" : 18,
                             "add_attitude" : 19,
                             "remove_attitude_by_name" : 20,
                             "get_default_ephemeris_name" : 21,
                             "set_default_ephemeris_by_name" : 22,
                             "get_default_ephemeris_data" : 23,
                             "add_ephemeris" : 24,
                             "remove_ephemeris_by_name" : 25,
                             "cut_gravity_model_by_name" : 26,
                             "copy_gravity_model_by_name" : 27,
                             "paste_gravity_model" : 28,
                             "add_copy_of_gravity_model" : 29,
                             "cut_shape_by_name" : 30,
                             "copy_shape_by_name" : 31,
                             "paste_shape" : 32,
                             "add_copy_of_shape" : 33,
                             "cut_attitude_by_name" : 34,
                             "copy_attitude_by_name" : 35,
                             "paste_attitude" : 36,
                             "add_copy_of_attitude" : 37,
                             "cut_ephemeris_by_name" : 38,
                             "copy_ephemeris_by_name" : 39,
                             "paste_ephemeris" : 40,
                             "add_copy_of_ephemeris" : 41, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAstrogatorCentralBody)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAstrogatorCentralBody)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAstrogatorCentralBody, None)
    
    _get_gravitational_param_metadata = { "name" : "gravitational_param",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def gravitational_param(self) -> float:
        """The gravitational parameter to be used. Uses Gravity Parameter Dimension."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_gravitational_param_metadata)

    _set_gravitational_param_metadata = { "name" : "gravitational_param",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @gravitational_param.setter
    def gravitational_param(self, newVal:float) -> None:
        return self._intf.set_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_gravitational_param_metadata, newVal)

    _get_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def parent_name(self) -> str:
        """The parent of this central body."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_parent_name_metadata)

    _set_parent_name_metadata = { "name" : "parent_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @parent_name.setter
    def parent_name(self, newVal:str) -> None:
        return self._intf.set_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_parent_name_metadata, newVal)

    _get_children_metadata = { "name" : "children",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def children(self) -> "CentralBodyCollection":
        """The children of this central body."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_children_metadata)

    _get_default_gravity_model_name_metadata = { "name" : "default_gravity_model_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def default_gravity_model_name(self) -> str:
        """The gravity model."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_gravity_model_name_metadata)

    _set_default_gravity_model_by_name_metadata = { "name" : "set_default_gravity_model_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def set_default_gravity_model_by_name(self, gravityModelName:str) -> None:
        """Select a gravity model"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_default_gravity_model_by_name_metadata, gravityModelName)

    _get_default_gravity_model_data_metadata = { "name" : "default_gravity_model_data",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def default_gravity_model_data(self) -> "CentralBodyGravityModel":
        """The gravity model parameters."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_gravity_model_data_metadata)

    _add_gravity_model_metadata = { "name" : "add_gravity_model",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(CENTRAL_BODY_GRAVITY_MODEL), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add_gravity_model(self, eGravityModel:"CENTRAL_BODY_GRAVITY_MODEL", uniqueName:str) -> "CentralBodyGravityModel":
        """Add a central body gravity model type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_gravity_model_metadata, eGravityModel, uniqueName, out_arg())

    _remove_gravity_model_by_name_metadata = { "name" : "remove_gravity_model_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove_gravity_model_by_name(self, gravityModelName:str) -> None:
        """Remove a central body gravity model type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._remove_gravity_model_by_name_metadata, gravityModelName)

    _get_default_shape_name_metadata = { "name" : "default_shape_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def default_shape_name(self) -> str:
        """The shape of the central body."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_shape_name_metadata)

    _get_default_shape_data_metadata = { "name" : "default_shape_data",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def default_shape_data(self) -> "ICentralBodyShape":
        """The parameters of the central body shape."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_shape_data_metadata)

    _set_default_shape_by_name_metadata = { "name" : "set_default_shape_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def set_default_shape_by_name(self, shapeName:str) -> None:
        """Select a central body shape."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_default_shape_by_name_metadata, shapeName)

    _add_shape_metadata = { "name" : "add_shape",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(CENTRAL_BODY_SHAPE), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add_shape(self, eShape:"CENTRAL_BODY_SHAPE", uniqueName:str) -> "ICentralBodyShape":
        """Add a central body shape type from the available types."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_shape_metadata, eShape, uniqueName, out_arg())

    _remove_shape_by_name_metadata = { "name" : "remove_shape_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove_shape_by_name(self, shapeName:str) -> None:
        """Remove a central body shape type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._remove_shape_by_name_metadata, shapeName)

    _get_default_attitude_name_metadata = { "name" : "default_attitude_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def default_attitude_name(self) -> str:
        """The attitude of the central body."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_attitude_name_metadata)

    _get_default_attitude_data_metadata = { "name" : "default_attitude_data",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def default_attitude_data(self) -> "ICentralBodyAttitude":
        """The parameters of the central body attitude."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_attitude_data_metadata)

    _set_default_attitude_by_name_metadata = { "name" : "set_default_attitude_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def set_default_attitude_by_name(self, attitudeName:str) -> None:
        """Select a central body attitude."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_default_attitude_by_name_metadata, attitudeName)

    _add_attitude_metadata = { "name" : "add_attitude",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(CENTRAL_BODY_ATTITUDE), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add_attitude(self, eAttitude:"CENTRAL_BODY_ATTITUDE", uniqueName:str) -> "ICentralBodyAttitude":
        """Add a central body attitude type from the available types."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_attitude_metadata, eAttitude, uniqueName, out_arg())

    _remove_attitude_by_name_metadata = { "name" : "remove_attitude_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove_attitude_by_name(self, attitudeName:str) -> None:
        """Remove a central body attitude type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._remove_attitude_by_name_metadata, attitudeName)

    _get_default_ephemeris_name_metadata = { "name" : "default_ephemeris_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def default_ephemeris_name(self) -> str:
        """The ephemeris of the central body."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_ephemeris_name_metadata)

    _set_default_ephemeris_by_name_metadata = { "name" : "set_default_ephemeris_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def set_default_ephemeris_by_name(self, ephemerisName:str) -> None:
        """Select an ephemeris type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._set_default_ephemeris_by_name_metadata, ephemerisName)

    _get_default_ephemeris_data_metadata = { "name" : "default_ephemeris_data",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def default_ephemeris_data(self) -> "ICentralBodyEphemeris":
        """The  parameters of the central body ephemeris."""
        return self._intf.get_property(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._get_default_ephemeris_data_metadata)

    _add_ephemeris_metadata = { "name" : "add_ephemeris",
            "arg_types" : (agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgEnum_arg(CENTRAL_BODY_EPHEMERIS), agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add_ephemeris(self, eEphemeris:"CENTRAL_BODY_EPHEMERIS", uniqueName:str) -> "ICentralBodyEphemeris":
        """Add an ephemeris type from the available types."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_ephemeris_metadata, eEphemeris, uniqueName, out_arg())

    _remove_ephemeris_by_name_metadata = { "name" : "remove_ephemeris_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def remove_ephemeris_by_name(self, ephemerisName:str) -> None:
        """Remove an ephemeris type."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._remove_ephemeris_by_name_metadata, ephemerisName)

    _cut_gravity_model_by_name_metadata = { "name" : "cut_gravity_model_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def cut_gravity_model_by_name(self, gravityModelName:str) -> None:
        """Copy a gravity model to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._cut_gravity_model_by_name_metadata, gravityModelName)

    _copy_gravity_model_by_name_metadata = { "name" : "copy_gravity_model_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def copy_gravity_model_by_name(self, gravityModelName:str) -> None:
        """Copy a gravity model to the clipboard."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._copy_gravity_model_by_name_metadata, gravityModelName)

    _paste_gravity_model_metadata = { "name" : "paste_gravity_model",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste_gravity_model(self) -> "CentralBodyGravityModel":
        """Add the gravity model in the clipboard to the central body."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._paste_gravity_model_metadata, out_arg())

    _add_copy_of_gravity_model_metadata = { "name" : "add_copy_of_gravity_model",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("ICentralBodyGravityModel"), agmarshall.AgInterface_out_arg,) }
    def add_copy_of_gravity_model(self, gravityModel:"ICentralBodyGravityModel") -> "CentralBodyGravityModel":
        """Add the gravity model to the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_copy_of_gravity_model_metadata, gravityModel, out_arg())

    _cut_shape_by_name_metadata = { "name" : "cut_shape_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def cut_shape_by_name(self, shapeName:str) -> None:
        """Copy a central body shape to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._cut_shape_by_name_metadata, shapeName)

    _copy_shape_by_name_metadata = { "name" : "copy_shape_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def copy_shape_by_name(self, shapeName:str) -> None:
        """Copy a central body shape to the clipboard."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._copy_shape_by_name_metadata, shapeName)

    _paste_shape_metadata = { "name" : "paste_shape",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste_shape(self) -> "ICentralBodyShape":
        """Add the central body shape in the clipboard to the central body."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._paste_shape_metadata, out_arg())

    _add_copy_of_shape_metadata = { "name" : "add_copy_of_shape",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("ICentralBodyShape"), agmarshall.AgInterface_out_arg,) }
    def add_copy_of_shape(self, shape:"ICentralBodyShape") -> "ICentralBodyShape":
        """Add the central body shape to the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_copy_of_shape_metadata, shape, out_arg())

    _cut_attitude_by_name_metadata = { "name" : "cut_attitude_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def cut_attitude_by_name(self, attitudeName:str) -> None:
        """Copy a central body attitude definition to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._cut_attitude_by_name_metadata, attitudeName)

    _copy_attitude_by_name_metadata = { "name" : "copy_attitude_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def copy_attitude_by_name(self, attitudeName:str) -> None:
        """Copy a central body attitude definition to the clipboard."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._copy_attitude_by_name_metadata, attitudeName)

    _paste_attitude_metadata = { "name" : "paste_attitude",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste_attitude(self) -> "ICentralBodyAttitude":
        """Add the central body attitude definition in the clipboard to the central body."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._paste_attitude_metadata, out_arg())

    _add_copy_of_attitude_metadata = { "name" : "add_copy_of_attitude",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("ICentralBodyAttitude"), agmarshall.AgInterface_out_arg,) }
    def add_copy_of_attitude(self, attitude:"ICentralBodyAttitude") -> "ICentralBodyAttitude":
        """Add the central body attitude definition to the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_copy_of_attitude_metadata, attitude, out_arg())

    _cut_ephemeris_by_name_metadata = { "name" : "cut_ephemeris_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def cut_ephemeris_by_name(self, ephemerisName:str) -> None:
        """Copy a central body ephemeris definition to the clipboard and removes it from the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._cut_ephemeris_by_name_metadata, ephemerisName)

    _copy_ephemeris_by_name_metadata = { "name" : "copy_ephemeris_by_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    def copy_ephemeris_by_name(self, ephemerisName:str) -> None:
        """Copy a central body ephemeris definition to the clipboard."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._copy_ephemeris_by_name_metadata, ephemerisName)

    _paste_ephemeris_metadata = { "name" : "paste_ephemeris",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste_ephemeris(self) -> "ICentralBodyEphemeris":
        """Add the central body ephemeris definition in the clipboard to the central body."""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._paste_ephemeris_metadata, out_arg())

    _add_copy_of_ephemeris_metadata = { "name" : "add_copy_of_ephemeris",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("ICentralBodyEphemeris"), agmarshall.AgInterface_out_arg,) }
    def add_copy_of_ephemeris(self, ephemeris:"ICentralBodyEphemeris") -> "ICentralBodyEphemeris":
        """Add the central body ephemeris definition to the central body"""
        return self._intf.invoke(IAstrogatorCentralBody._metadata, IAstrogatorCentralBody._add_copy_of_ephemeris_metadata, ephemeris, out_arg())


agcls.AgClassCatalog.add_catalog_entry("{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}", IAstrogatorCentralBody)
agcls.AgTypeNameMap["IAstrogatorCentralBody"] = IAstrogatorCentralBody

class IPowerInternal(object):
    """Properties for the Internal Power power source component."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_generated_power" : 1,
                             "set_generated_power" : 2,
                             "get_percent_degradation_per_year" : 3,
                             "set_percent_degradation_per_year" : 4,
                             "get_reference_epoch" : 5,
                             "set_reference_epoch" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPowerInternal)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPowerInternal)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPowerInternal, None)
    
    _get_generated_power_metadata = { "name" : "generated_power",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def generated_power(self) -> float:
        """The power generated by the spacecraft from internal sources. Uses Power Dimension."""
        return self._intf.get_property(IPowerInternal._metadata, IPowerInternal._get_generated_power_metadata)

    _set_generated_power_metadata = { "name" : "generated_power",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @generated_power.setter
    def generated_power(self, inVal:float) -> None:
        return self._intf.set_property(IPowerInternal._metadata, IPowerInternal._set_generated_power_metadata, inVal)

    _get_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def percent_degradation_per_year(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        return self._intf.get_property(IPowerInternal._metadata, IPowerInternal._get_percent_degradation_per_year_metadata)

    _set_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @percent_degradation_per_year.setter
    def percent_degradation_per_year(self, inVal:float) -> None:
        return self._intf.set_property(IPowerInternal._metadata, IPowerInternal._set_percent_degradation_per_year_metadata, inVal)

    _get_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def reference_epoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IPowerInternal._metadata, IPowerInternal._get_reference_epoch_metadata)

    _set_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @reference_epoch.setter
    def reference_epoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IPowerInternal._metadata, IPowerInternal._set_reference_epoch_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_INTERNAL),) }
    def enable_control_parameter(self, param:"CONTROL_POWER_INTERNAL") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IPowerInternal._metadata, IPowerInternal._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_INTERNAL),) }
    def disable_control_parameter(self, param:"CONTROL_POWER_INTERNAL") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IPowerInternal._metadata, IPowerInternal._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_INTERNAL), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_POWER_INTERNAL") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IPowerInternal._metadata, IPowerInternal._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IPowerInternal._metadata, IPowerInternal._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}", IPowerInternal)
agcls.AgTypeNameMap["IPowerInternal"] = IPowerInternal

class IPowerProcessed(object):
    """Properties for the Processed Power power source component."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D3C19CA2-B73F-48BB-9B24-A7860136AE03}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_load" : 1,
                             "set_load" : 2,
                             "get_efficiency" : 3,
                             "set_efficiency" : 4,
                             "get_input_power_source_name" : 5,
                             "set_input_power_source_name" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPowerProcessed)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPowerProcessed)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPowerProcessed, None)
    
    _get_load_metadata = { "name" : "load",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def load(self) -> float:
        """The power diverted from power source and unavailable to PPU. Uses Power Dimension."""
        return self._intf.get_property(IPowerProcessed._metadata, IPowerProcessed._get_load_metadata)

    _set_load_metadata = { "name" : "load",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @load.setter
    def load(self, inVal:float) -> None:
        return self._intf.set_property(IPowerProcessed._metadata, IPowerProcessed._set_load_metadata, inVal)

    _get_efficiency_metadata = { "name" : "efficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def efficiency(self) -> float:
        """The efficiency of the PPU unit. Dimensionless."""
        return self._intf.get_property(IPowerProcessed._metadata, IPowerProcessed._get_efficiency_metadata)

    _set_efficiency_metadata = { "name" : "efficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @efficiency.setter
    def efficiency(self, inVal:float) -> None:
        return self._intf.set_property(IPowerProcessed._metadata, IPowerProcessed._set_efficiency_metadata, inVal)

    _get_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def input_power_source_name(self) -> str:
        """The source of power available to PPU."""
        return self._intf.get_property(IPowerProcessed._metadata, IPowerProcessed._get_input_power_source_name_metadata)

    _set_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @input_power_source_name.setter
    def input_power_source_name(self, inVal:str) -> None:
        return self._intf.set_property(IPowerProcessed._metadata, IPowerProcessed._set_input_power_source_name_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_PROCESSED),) }
    def enable_control_parameter(self, param:"CONTROL_POWER_PROCESSED") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IPowerProcessed._metadata, IPowerProcessed._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_PROCESSED),) }
    def disable_control_parameter(self, param:"CONTROL_POWER_PROCESSED") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IPowerProcessed._metadata, IPowerProcessed._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_PROCESSED), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_POWER_PROCESSED") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IPowerProcessed._metadata, IPowerProcessed._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IPowerProcessed._metadata, IPowerProcessed._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D3C19CA2-B73F-48BB-9B24-A7860136AE03}", IPowerProcessed)
agcls.AgTypeNameMap["IPowerProcessed"] = IPowerProcessed

class IPowerSolarArray(object):
    """Properties for the Solar Array Power power source component."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E8776401-2DE0-49E8-8080-FD0442E57701}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_area" : 1,
                             "set_area" : 2,
                             "get_concentration" : 3,
                             "set_concentration" : 4,
                             "get_cell_efficiency_percent" : 5,
                             "set_cell_efficiency_percent" : 6,
                             "get_array_efficiency_percent" : 7,
                             "set_array_efficiency_percent" : 8,
                             "get_percent_degradation_per_year" : 9,
                             "set_percent_degradation_per_year" : 10,
                             "get_reference_epoch" : 11,
                             "set_reference_epoch" : 12,
                             "get_inclination_to_sun_line" : 13,
                             "set_inclination_to_sun_line" : 14,
                             "get_c0" : 15,
                             "set_c0" : 16,
                             "get_c1" : 17,
                             "set_c1" : 18,
                             "get_c2" : 19,
                             "set_c2" : 20,
                             "get_c3" : 21,
                             "set_c3" : 22,
                             "get_c4" : 23,
                             "set_c4" : 24,
                             "get_approximation_formula" : 25,
                             "enable_control_parameter" : 26,
                             "disable_control_parameter" : 27,
                             "is_control_parameter_enabled" : 28,
                             "get_control_parameters_available" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPowerSolarArray)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPowerSolarArray)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPowerSolarArray, None)
    
    _get_area_metadata = { "name" : "area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def area(self) -> float:
        """The solar array panel area. Uses Area Dimension."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_area_metadata)

    _set_area_metadata = { "name" : "area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @area.setter
    def area(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_area_metadata, inVal)

    _get_concentration_metadata = { "name" : "concentration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def concentration(self) -> float:
        """The solar array concentrator factor. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_concentration_metadata)

    _set_concentration_metadata = { "name" : "concentration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @concentration.setter
    def concentration(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_concentration_metadata, inVal)

    _get_cell_efficiency_percent_metadata = { "name" : "cell_efficiency_percent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def cell_efficiency_percent(self) -> float:
        """The cell efficiency in producing output power from incident sunlight. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_cell_efficiency_percent_metadata)

    _set_cell_efficiency_percent_metadata = { "name" : "cell_efficiency_percent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @cell_efficiency_percent.setter
    def cell_efficiency_percent(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_cell_efficiency_percent_metadata, inVal)

    _get_array_efficiency_percent_metadata = { "name" : "array_efficiency_percent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def array_efficiency_percent(self) -> float:
        """The array efficiency in producing output power from a collection of cells. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_array_efficiency_percent_metadata)

    _set_array_efficiency_percent_metadata = { "name" : "array_efficiency_percent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @array_efficiency_percent.setter
    def array_efficiency_percent(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_array_efficiency_percent_metadata, inVal)

    _get_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def percent_degradation_per_year(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_percent_degradation_per_year_metadata)

    _set_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @percent_degradation_per_year.setter
    def percent_degradation_per_year(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_percent_degradation_per_year_metadata, inVal)

    _get_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def reference_epoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_reference_epoch_metadata)

    _set_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @reference_epoch.setter
    def reference_epoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_reference_epoch_metadata, inVal)

    _get_inclination_to_sun_line_metadata = { "name" : "inclination_to_sun_line",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def inclination_to_sun_line(self) -> typing.Any:
        """The angle between the panel normal vector to the apparent sun line. Uses AngleUnit Dimension."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_inclination_to_sun_line_metadata)

    _set_inclination_to_sun_line_metadata = { "name" : "inclination_to_sun_line",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @inclination_to_sun_line.setter
    def inclination_to_sun_line(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_inclination_to_sun_line_metadata, inVal)

    _get_c0_metadata = { "name" : "c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c0(self) -> float:
        """The ThermalModel.C0 coefficient. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_c0_metadata)

    _set_c0_metadata = { "name" : "c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c0.setter
    def c0(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_c0_metadata, inVal)

    _get_c1_metadata = { "name" : "c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c1(self) -> float:
        """The ThermalModel.C1 coefficient. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_c1_metadata)

    _set_c1_metadata = { "name" : "c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c1.setter
    def c1(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_c1_metadata, inVal)

    _get_c2_metadata = { "name" : "c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c2(self) -> float:
        """The ThermalModel.C2 coefficient. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_c2_metadata)

    _set_c2_metadata = { "name" : "c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c2.setter
    def c2(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_c2_metadata, inVal)

    _get_c3_metadata = { "name" : "c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c3(self) -> float:
        """The ThermalModel.C3 coefficient. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_c3_metadata)

    _set_c3_metadata = { "name" : "c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c3.setter
    def c3(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_c3_metadata, inVal)

    _get_c4_metadata = { "name" : "c4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c4(self) -> float:
        """The ThermalModel.C4 coefficient. Dimensionless."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_c4_metadata)

    _set_c4_metadata = { "name" : "c4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c4.setter
    def c4(self, inVal:float) -> None:
        return self._intf.set_property(IPowerSolarArray._metadata, IPowerSolarArray._set_c4_metadata, inVal)

    _get_approximation_formula_metadata = { "name" : "approximation_formula",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def approximation_formula(self) -> str:
        """The thermal factor as function of distance (in AU) to Sun."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_approximation_formula_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_SOLAR_ARRAY),) }
    def enable_control_parameter(self, param:"CONTROL_POWER_SOLAR_ARRAY") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IPowerSolarArray._metadata, IPowerSolarArray._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_SOLAR_ARRAY),) }
    def disable_control_parameter(self, param:"CONTROL_POWER_SOLAR_ARRAY") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IPowerSolarArray._metadata, IPowerSolarArray._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_POWER_SOLAR_ARRAY), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_POWER_SOLAR_ARRAY") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IPowerSolarArray._metadata, IPowerSolarArray._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IPowerSolarArray._metadata, IPowerSolarArray._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E8776401-2DE0-49E8-8080-FD0442E57701}", IPowerSolarArray)
agcls.AgTypeNameMap["IPowerSolarArray"] = IPowerSolarArray

class IGeneralRelativityFunction(object):
    """Properties for the General Relativity propagator function."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{020E7294-1784-40AA-95C2-153F87CB086F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGeneralRelativityFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGeneralRelativityFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGeneralRelativityFunction, None)
    

agcls.AgClassCatalog.add_catalog_entry("{020E7294-1784-40AA-95C2-153F87CB086F}", IGeneralRelativityFunction)
agcls.AgTypeNameMap["IGeneralRelativityFunction"] = IGeneralRelativityFunction

class IStateTransformationFunction(object):
    """Properties for the State Transition propagator function."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{67F8B465-6BC4-4736-8A83-EC7E55D45177}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IStateTransformationFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IStateTransformationFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IStateTransformationFunction, None)
    

agcls.AgClassCatalog.add_catalog_entry("{67F8B465-6BC4-4736-8A83-EC7E55D45177}", IStateTransformationFunction)
agcls.AgTypeNameMap["IStateTransformationFunction"] = IStateTransformationFunction

class ICR3BPFunc(object):
    """Properties for the CR3BP propagator function."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1A2E3655-CF88-4272-8B52-257397D913BF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_secondary_name" : 1,
                             "set_secondary_name" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICR3BPFunc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICR3BPFunc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICR3BPFunc, None)
    
    _get_secondary_name_metadata = { "name" : "secondary_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def secondary_name(self) -> str:
        """The secondary body following CR3BP model definitions."""
        return self._intf.get_property(ICR3BPFunc._metadata, ICR3BPFunc._get_secondary_name_metadata)

    _set_secondary_name_metadata = { "name" : "secondary_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @secondary_name.setter
    def secondary_name(self, inVal:str) -> None:
        return self._intf.set_property(ICR3BPFunc._metadata, ICR3BPFunc._set_secondary_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1A2E3655-CF88-4272-8B52-257397D913BF}", ICR3BPFunc)
agcls.AgTypeNameMap["ICR3BPFunc"] = ICR3BPFunc

class IRadiationPressureFunction(object):
    """Properties for the Radiation Pressure propagator function."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{CED70D8F-A1BF-402D-A767-E7A6E857507C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_include_albedo" : 1,
                             "set_include_albedo" : 2,
                             "get_include_thermal_radiation_pressure" : 3,
                             "set_include_thermal_radiation_pressure" : 4,
                             "get_ground_reflection_model_filename" : 5,
                             "set_ground_reflection_model_filename" : 6,
                             "get_central_body_name" : 7,
                             "get_override_segment_settings" : 8,
                             "set_override_segment_settings" : 9,
                             "get_rad_pressure_coeff" : 10,
                             "set_rad_pressure_coeff" : 11,
                             "get_rad_pressure_area" : 12,
                             "set_rad_pressure_area" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRadiationPressureFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRadiationPressureFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRadiationPressureFunction, None)
    
    _get_include_albedo_metadata = { "name" : "include_albedo",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_albedo(self) -> bool:
        """True if including accelerations derived from albedo (reflected sunlight radiation from the central body)."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_include_albedo_metadata)

    _set_include_albedo_metadata = { "name" : "include_albedo",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_albedo.setter
    def include_albedo(self, inVal:bool) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_include_albedo_metadata, inVal)

    _get_include_thermal_radiation_pressure_metadata = { "name" : "include_thermal_radiation_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_thermal_radiation_pressure(self) -> bool:
        """True if including accelerations derived from thermal radiation pressure from the central body."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_include_thermal_radiation_pressure_metadata)

    _set_include_thermal_radiation_pressure_metadata = { "name" : "include_thermal_radiation_pressure",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_thermal_radiation_pressure.setter
    def include_thermal_radiation_pressure(self, inVal:bool) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_include_thermal_radiation_pressure_metadata, inVal)

    _get_ground_reflection_model_filename_metadata = { "name" : "ground_reflection_model_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ground_reflection_model_filename(self) -> str:
        """A file containing a ground reflection model used for albedo and thermal radiation pressure."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_ground_reflection_model_filename_metadata)

    _set_ground_reflection_model_filename_metadata = { "name" : "ground_reflection_model_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ground_reflection_model_filename.setter
    def ground_reflection_model_filename(self, inVal:str) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_ground_reflection_model_filename_metadata, inVal)

    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Name of the central body."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_central_body_name_metadata)

    _get_override_segment_settings_metadata = { "name" : "override_segment_settings",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def override_segment_settings(self) -> bool:
        """True to use Ck and area values defined on this component for radiation pressure computations, rather than those defined in the MCS segments."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_override_segment_settings_metadata)

    _set_override_segment_settings_metadata = { "name" : "override_segment_settings",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @override_segment_settings.setter
    def override_segment_settings(self, inVal:bool) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_override_segment_settings_metadata, inVal)

    _get_rad_pressure_coeff_metadata = { "name" : "rad_pressure_coeff",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def rad_pressure_coeff(self) -> float:
        """Coefficient, Ck, for use with radiation pressure computation."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_rad_pressure_coeff_metadata)

    _set_rad_pressure_coeff_metadata = { "name" : "rad_pressure_coeff",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @rad_pressure_coeff.setter
    def rad_pressure_coeff(self, inVal:float) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_rad_pressure_coeff_metadata, inVal)

    _get_rad_pressure_area_metadata = { "name" : "rad_pressure_area",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def rad_pressure_area(self) -> float:
        """Area to be used for radiation pressure computations. Small area dimension."""
        return self._intf.get_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._get_rad_pressure_area_metadata)

    _set_rad_pressure_area_metadata = { "name" : "rad_pressure_area",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @rad_pressure_area.setter
    def rad_pressure_area(self, inVal:float) -> None:
        return self._intf.set_property(IRadiationPressureFunction._metadata, IRadiationPressureFunction._set_rad_pressure_area_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{CED70D8F-A1BF-402D-A767-E7A6E857507C}", IRadiationPressureFunction)
agcls.AgTypeNameMap["IRadiationPressureFunction"] = IRadiationPressureFunction

class IYarkovskyFunc(object):
    """Properties for the Yarkovsky Effect propagator function."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AA6781B4-EACD-4100-8E23-C2771351BD7A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_alpha" : 1,
                             "set_alpha" : 2,
                             "get_r0" : 3,
                             "set_r0" : 4,
                             "get_nm" : 5,
                             "set_nm" : 6,
                             "get_nn" : 7,
                             "set_nn" : 8,
                             "get_nk" : 9,
                             "set_nk" : 10,
                             "get_a1" : 11,
                             "set_a1" : 12,
                             "get_a2" : 13,
                             "set_a2" : 14,
                             "get_a3" : 15,
                             "set_a3" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IYarkovskyFunc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IYarkovskyFunc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IYarkovskyFunc, None)
    
    _get_alpha_metadata = { "name" : "alpha",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def alpha(self) -> float:
        """Yarkovsky effect alpha constant. Dimensionless."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_alpha_metadata)

    _set_alpha_metadata = { "name" : "alpha",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @alpha.setter
    def alpha(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_alpha_metadata, inVal)

    _get_r0_metadata = { "name" : "r0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def r0(self) -> float:
        """Heliocentric sublimation distance. Uses distance dimension."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_r0_metadata)

    _set_r0_metadata = { "name" : "r0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @r0.setter
    def r0(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_r0_metadata, inVal)

    _get_nm_metadata = { "name" : "nm",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def nm(self) -> float:
        """Yarkovsky effect m exponent. Dimensionless."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_nm_metadata)

    _set_nm_metadata = { "name" : "nm",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @nm.setter
    def nm(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_nm_metadata, inVal)

    _get_nn_metadata = { "name" : "nn",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def nn(self) -> float:
        """Yarkovsky effect n exponent. Dimensionless."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_nn_metadata)

    _set_nn_metadata = { "name" : "nn",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @nn.setter
    def nn(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_nn_metadata, inVal)

    _get_nk_metadata = { "name" : "nk",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def nk(self) -> float:
        """Yarkovsky effect k exponent. Dimensionless."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_nk_metadata)

    _set_nk_metadata = { "name" : "nk",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @nk.setter
    def nk(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_nk_metadata, inVal)

    _get_a1_metadata = { "name" : "a1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def a1(self) -> float:
        """Radial acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_a1_metadata)

    _set_a1_metadata = { "name" : "a1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @a1.setter
    def a1(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_a1_metadata, inVal)

    _get_a2_metadata = { "name" : "a2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def a2(self) -> float:
        """Velocity tangent acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_a2_metadata)

    _set_a2_metadata = { "name" : "a2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @a2.setter
    def a2(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_a2_metadata, inVal)

    _get_a3_metadata = { "name" : "a3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def a3(self) -> float:
        """Orbit normal acceleration multiplier. Uses acceleration dimension."""
        return self._intf.get_property(IYarkovskyFunc._metadata, IYarkovskyFunc._get_a3_metadata)

    _set_a3_metadata = { "name" : "a3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @a3.setter
    def a3(self, inVal:float) -> None:
        return self._intf.set_property(IYarkovskyFunc._metadata, IYarkovskyFunc._set_a3_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AA6781B4-EACD-4100-8E23-C2771351BD7A}", IYarkovskyFunc)
agcls.AgTypeNameMap["IYarkovskyFunc"] = IYarkovskyFunc

class IBlendedDensity(object):
    """Properties for the blended atmospheric density propagator function."""
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E1951825-092B-48C8-88AE-7C878FBF40C3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "atm_density_model" : 1,
                             "low_altitude_atm_density_model" : 2,
                             "get_density_blending_altitude_range" : 3,
                             "set_density_blending_altitude_range" : 4,
                             "get_atm_density_model_name" : 5,
                             "get_low_altitude_atm_density_model_name" : 6,
                             "get_use_approx_altitude" : 7,
                             "set_use_approx_altitude" : 8,
                             "get_lower_bound_upper_atm_model" : 9, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBlendedDensity)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBlendedDensity)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBlendedDensity, None)
    
    _atm_density_model_metadata = { "name" : "atm_density_model",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"),) }
    def atm_density_model(self, pInVal:"IComponentInfo") -> None:
        """Embeds a nominal atmosphere model from the component browser."""
        return self._intf.invoke(IBlendedDensity._metadata, IBlendedDensity._atm_density_model_metadata, pInVal)

    _low_altitude_atm_density_model_metadata = { "name" : "low_altitude_atm_density_model",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"),) }
    def low_altitude_atm_density_model(self, pInVal:"IComponentInfo") -> None:
        """Embeds a low altitude atmosphere model from the component browser."""
        return self._intf.invoke(IBlendedDensity._metadata, IBlendedDensity._low_altitude_atm_density_model_metadata, pInVal)

    _get_density_blending_altitude_range_metadata = { "name" : "density_blending_altitude_range",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def density_blending_altitude_range(self) -> float:
        """The blending range (distance dimension), begins at lower bound of upper model."""
        return self._intf.get_property(IBlendedDensity._metadata, IBlendedDensity._get_density_blending_altitude_range_metadata)

    _set_density_blending_altitude_range_metadata = { "name" : "density_blending_altitude_range",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @density_blending_altitude_range.setter
    def density_blending_altitude_range(self, inVal:float) -> None:
        """Set the blending range."""
        return self._intf.set_property(IBlendedDensity._metadata, IBlendedDensity._set_density_blending_altitude_range_metadata, inVal)

    _get_atm_density_model_name_metadata = { "name" : "atm_density_model_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atm_density_model_name(self) -> str:
        """Return the name of the embedded nominal atmospheric model."""
        return self._intf.get_property(IBlendedDensity._metadata, IBlendedDensity._get_atm_density_model_name_metadata)

    _get_low_altitude_atm_density_model_name_metadata = { "name" : "low_altitude_atm_density_model_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def low_altitude_atm_density_model_name(self) -> str:
        """Return the name of the embedded low altitude atmospheric model."""
        return self._intf.get_property(IBlendedDensity._metadata, IBlendedDensity._get_low_altitude_atm_density_model_name_metadata)

    _get_use_approx_altitude_metadata = { "name" : "use_approx_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approx_altitude(self) -> bool:
        """True if using approximate altitude formula (enforced on embedded models)."""
        return self._intf.get_property(IBlendedDensity._metadata, IBlendedDensity._get_use_approx_altitude_metadata)

    _set_use_approx_altitude_metadata = { "name" : "use_approx_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approx_altitude.setter
    def use_approx_altitude(self, pVal:bool) -> None:
        return self._intf.set_property(IBlendedDensity._metadata, IBlendedDensity._set_use_approx_altitude_metadata, pVal)

    _get_lower_bound_upper_atm_model_metadata = { "name" : "lower_bound_upper_atm_model",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def lower_bound_upper_atm_model(self) -> float:
        """The lowest valid altitude of the upper atmospheric density model."""
        return self._intf.get_property(IBlendedDensity._metadata, IBlendedDensity._get_lower_bound_upper_atm_model_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E1951825-092B-48C8-88AE-7C878FBF40C3}", IBlendedDensity)
agcls.AgTypeNameMap["IBlendedDensity"] = IBlendedDensity

class IDragModelPlugin(object):
    """Properties for the Drag Model plugin."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{00D06156-07AD-4321-9741-9722A3D7BF85}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_plugin_identifier" : 1,
                             "set_plugin_identifier" : 2,
                             "get_plugin_config" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDragModelPlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDragModelPlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDragModelPlugin, None)
    
    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IDragModelPlugin._metadata, IDragModelPlugin._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(IDragModelPlugin._metadata, IDragModelPlugin._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IDragModelPlugin._metadata, IDragModelPlugin._get_plugin_config_metadata)


agcls.AgClassCatalog.add_catalog_entry("{00D06156-07AD-4321-9741-9722A3D7BF85}", IDragModelPlugin)
agcls.AgTypeNameMap["IDragModelPlugin"] = IDragModelPlugin

class ICira72Function(object):
    """Properties for the CIRA 72 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{9FFC517F-7B30-4780-8028-A3E309E5BAE4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICira72Function)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICira72Function)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICira72Function, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """Flux file."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(ICira72Function._metadata, ICira72Function._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(ICira72Function._metadata, ICira72Function._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{9FFC517F-7B30-4780-8028-A3E309E5BAE4}", ICira72Function)
agcls.AgTypeNameMap["ICira72Function"] = ICira72Function

class IExponential(object):
    """Properties for the Exponential atmospheric model - a model that calculates atmospheric density using an equation involving a reference density, reference altitude, and scale altitude."""
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{987B718C-47F4-4638-900E-B87B0AAFEFBA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_reference_density" : 3,
                             "set_reference_density" : 4,
                             "get_reference_altitude" : 5,
                             "set_reference_altitude" : 6,
                             "get_scale_altitude" : 7,
                             "set_scale_altitude" : 8,
                             "get_drag_model_type" : 9,
                             "set_drag_model_type" : 10,
                             "get_drag_model_plugin_name" : 11,
                             "set_drag_model_plugin_name" : 12,
                             "get_drag_model_plugin" : 13,
                             "get_variable_area_history_file" : 14,
                             "set_variable_area_history_file" : 15,
                             "get_n_plate_definition_file" : 16,
                             "set_n_plate_definition_file" : 17, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IExponential)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IExponential)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IExponential, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_use_approximate_altitude_metadata, inVal)

    _get_reference_density_metadata = { "name" : "reference_density",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def reference_density(self) -> float:
        """The reference density. Uses Density Dimension."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_reference_density_metadata)

    _set_reference_density_metadata = { "name" : "reference_density",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @reference_density.setter
    def reference_density(self, inVal:float) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_reference_density_metadata, inVal)

    _get_reference_altitude_metadata = { "name" : "reference_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def reference_altitude(self) -> float:
        """The reference altitude. Uses Distance Dimension."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_reference_altitude_metadata)

    _set_reference_altitude_metadata = { "name" : "reference_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @reference_altitude.setter
    def reference_altitude(self, inVal:float) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_reference_altitude_metadata, inVal)

    _get_scale_altitude_metadata = { "name" : "scale_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def scale_altitude(self) -> float:
        """The scale altitude. Uses Distance Dimension."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_scale_altitude_metadata)

    _set_scale_altitude_metadata = { "name" : "scale_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @scale_altitude.setter
    def scale_altitude(self, inVal:float) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_scale_altitude_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IExponential._metadata, IExponential._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IExponential._metadata, IExponential._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{987B718C-47F4-4638-900E-B87B0AAFEFBA}", IExponential)
agcls.AgTypeNameMap["IExponential"] = IExponential

class IHarrisPriester(object):
    """Properties for the Harris-Priester atmospheric model - a model that takes into account a 10.7 cm solar flux level and diurnal bulge."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4481139D-2D5D-48F0-9372-2385F8F95658}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7_avg" : 9,
                             "set_f_10_p7_avg" : 10,
                             "get_atmos_data_filename" : 11,
                             "set_atmos_data_filename" : 12,
                             "get_drag_model_type" : 13,
                             "set_drag_model_type" : 14,
                             "get_drag_model_plugin_name" : 15,
                             "set_drag_model_plugin_name" : 16,
                             "get_drag_model_plugin" : 17,
                             "get_variable_area_history_file" : 18,
                             "set_variable_area_history_file" : 19,
                             "get_n_plate_definition_file" : 20,
                             "set_n_plate_definition_file" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IHarrisPriester)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IHarrisPriester)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IHarrisPriester, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_f_10_p7_avg_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IHarrisPriester._metadata, IHarrisPriester._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IHarrisPriester._metadata, IHarrisPriester._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4481139D-2D5D-48F0-9372-2385F8F95658}", IHarrisPriester)
agcls.AgTypeNameMap["IHarrisPriester"] = IHarrisPriester

class IDensityModelPlugin(object):
    """Properties for the plugin atmospheric density model."""
    _num_methods = 51
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_plugin_identifier" : 1,
                             "set_plugin_identifier" : 2,
                             "get_plugin_config" : 3,
                             "get_use_approximate_altitude" : 4,
                             "set_use_approximate_altitude" : 5,
                             "get_computes_temperature" : 6,
                             "get_computes_pressure" : 7,
                             "get_sun_position" : 8,
                             "set_sun_position" : 9,
                             "get_atmos_data_source" : 10,
                             "set_atmos_data_source" : 11,
                             "get_f10" : 12,
                             "set_f10" : 13,
                             "get_f10_avg" : 14,
                             "set_f10_avg" : 15,
                             "get_m10" : 16,
                             "set_m10" : 17,
                             "get_m10_avg" : 18,
                             "set_m10_avg" : 19,
                             "get_s10" : 20,
                             "set_s10" : 21,
                             "get_s10_avg" : 22,
                             "set_s10_avg" : 23,
                             "get_y10" : 24,
                             "set_y10" : 25,
                             "get_y10_avg" : 26,
                             "set_y10_avg" : 27,
                             "get_kp" : 28,
                             "set_kp" : 29,
                             "get_dst_d_tc" : 30,
                             "set_dst_d_tc" : 31,
                             "get_atmos_data_geo_magnetic_flux_source" : 32,
                             "set_atmos_data_geo_magnetic_flux_source" : 33,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 34,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 35,
                             "get_atmos_data_filename" : 36,
                             "set_atmos_data_filename" : 37,
                             "get_atmos_aug_data_file" : 38,
                             "set_atmos_aug_data_file" : 39,
                             "get_atmos_aug_dtc_file" : 40,
                             "set_atmos_aug_dtc_file" : 41,
                             "get_drag_model_type" : 42,
                             "set_drag_model_type" : 43,
                             "get_drag_model_plugin_name" : 44,
                             "set_drag_model_plugin_name" : 45,
                             "get_drag_model_plugin" : 46,
                             "get_uses_augmented_space_weather" : 47,
                             "get_variable_area_history_file" : 48,
                             "set_variable_area_history_file" : 49,
                             "get_n_plate_definition_file" : 50,
                             "set_n_plate_definition_file" : 51, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDensityModelPlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDensityModelPlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDensityModelPlugin, None)
    
    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_plugin_config_metadata)

    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_data_source_metadata, inVal)

    _get_f10_metadata = { "name" : "f10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_f10_metadata)

    _set_f10_metadata = { "name" : "f10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f10.setter
    def f10(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_f10_metadata, inVal)

    _get_f10_avg_metadata = { "name" : "f10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f10_avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_f10_avg_metadata)

    _set_f10_avg_metadata = { "name" : "f10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f10_avg.setter
    def f10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_f10_avg_metadata, inVal)

    _get_m10_metadata = { "name" : "m10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def m10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_m10_metadata)

    _set_m10_metadata = { "name" : "m10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @m10.setter
    def m10(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_m10_metadata, inVal)

    _get_m10_avg_metadata = { "name" : "m10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def m10_avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_m10_avg_metadata)

    _set_m10_avg_metadata = { "name" : "m10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @m10_avg.setter
    def m10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_m10_avg_metadata, inVal)

    _get_s10_metadata = { "name" : "s10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def s10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_s10_metadata)

    _set_s10_metadata = { "name" : "s10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @s10.setter
    def s10(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_s10_metadata, inVal)

    _get_s10_avg_metadata = { "name" : "s10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def s10_avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_s10_avg_metadata)

    _set_s10_avg_metadata = { "name" : "s10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @s10_avg.setter
    def s10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_s10_avg_metadata, inVal)

    _get_y10_metadata = { "name" : "y10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_y10_metadata)

    _set_y10_metadata = { "name" : "y10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y10.setter
    def y10(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_y10_metadata, inVal)

    _get_y10_avg_metadata = { "name" : "y10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y10_avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_y10_avg_metadata)

    _set_y10_avg_metadata = { "name" : "y10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y10_avg.setter
    def y10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_y10_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_kp_metadata, inVal)

    _get_dst_d_tc_metadata = { "name" : "dst_d_tc",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def dst_d_tc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_dst_d_tc_metadata)

    _set_dst_d_tc_metadata = { "name" : "dst_d_tc",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @dst_d_tc.setter
    def dst_d_tc(self, inVal:float) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_dst_d_tc_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_data_filename_metadata, inVal)

    _get_atmos_aug_data_file_metadata = { "name" : "atmos_aug_data_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_aug_data_file(self) -> str:
        """The atmospheric model augmented data file path."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_aug_data_file_metadata)

    _set_atmos_aug_data_file_metadata = { "name" : "atmos_aug_data_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_aug_data_file.setter
    def atmos_aug_data_file(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_aug_data_file_metadata, inVal)

    _get_atmos_aug_dtc_file_metadata = { "name" : "atmos_aug_dtc_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_aug_dtc_file(self) -> str:
        """The atmospheric model augmented geomagnetic data file path."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_atmos_aug_dtc_file_metadata)

    _set_atmos_aug_dtc_file_metadata = { "name" : "atmos_aug_dtc_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_aug_dtc_file.setter
    def atmos_aug_dtc_file(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_atmos_aug_dtc_file_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_drag_model_plugin_metadata)

    _get_uses_augmented_space_weather_metadata = { "name" : "uses_augmented_space_weather",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def uses_augmented_space_weather(self) -> bool:
        """Flag indicates whether this model uses augmented flux data."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_uses_augmented_space_weather_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IDensityModelPlugin._metadata, IDensityModelPlugin._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IDensityModelPlugin._metadata, IDensityModelPlugin._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}", IDensityModelPlugin)
agcls.AgTypeNameMap["IDensityModelPlugin"] = IDensityModelPlugin

class IJacchiaRoberts(object):
    """Properties for the Jacchia-Roberts atmospheric model - a model that is similar to Jacchia 1971 but uses analytical methods to improve performance."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IJacchiaRoberts)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IJacchiaRoberts)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IJacchiaRoberts, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IJacchiaRoberts._metadata, IJacchiaRoberts._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaRoberts._metadata, IJacchiaRoberts._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}", IJacchiaRoberts)
agcls.AgTypeNameMap["IJacchiaRoberts"] = IJacchiaRoberts

class IJacchiaBowman2008(object):
    """Properties for the Jacchia Bowman 2008 atmospheric density model."""
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{49B828F8-A541-4E9E-99DD-DF3708B3559F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_sun_position" : 3,
                             "set_sun_position" : 4,
                             "get_atmos_data_source" : 5,
                             "set_atmos_data_source" : 6,
                             "get_f10" : 7,
                             "set_f10" : 8,
                             "get_f10_avg" : 9,
                             "set_f10_avg" : 10,
                             "get_m10" : 11,
                             "set_m10" : 12,
                             "get_m10_avg" : 13,
                             "set_m10_avg" : 14,
                             "get_s10" : 15,
                             "set_s10" : 16,
                             "get_s10_avg" : 17,
                             "set_s10_avg" : 18,
                             "get_y10" : 19,
                             "set_y10" : 20,
                             "get_y10_avg" : 21,
                             "set_y10_avg" : 22,
                             "get_dst_d_tc" : 23,
                             "set_dst_d_tc" : 24,
                             "get_atmos_aug_data_file" : 25,
                             "set_atmos_aug_data_file" : 26,
                             "get_atmos_aug_dtc_file" : 27,
                             "set_atmos_aug_dtc_file" : 28,
                             "get_drag_model_type" : 29,
                             "set_drag_model_type" : 30,
                             "get_drag_model_plugin_name" : 31,
                             "set_drag_model_plugin_name" : 32,
                             "get_drag_model_plugin" : 33,
                             "get_variable_area_history_file" : 34,
                             "set_variable_area_history_file" : 35,
                             "get_n_plate_definition_file" : 36,
                             "set_n_plate_definition_file" : 37, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IJacchiaBowman2008)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IJacchiaBowman2008)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IJacchiaBowman2008, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_use_approximate_altitude_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_atmos_data_source_metadata, inVal)

    _get_f10_metadata = { "name" : "f10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_f10_metadata)

    _set_f10_metadata = { "name" : "f10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f10.setter
    def f10(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_f10_metadata, inVal)

    _get_f10_avg_metadata = { "name" : "f10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f10_avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_f10_avg_metadata)

    _set_f10_avg_metadata = { "name" : "f10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f10_avg.setter
    def f10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_f10_avg_metadata, inVal)

    _get_m10_metadata = { "name" : "m10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def m10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_m10_metadata)

    _set_m10_metadata = { "name" : "m10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @m10.setter
    def m10(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_m10_metadata, inVal)

    _get_m10_avg_metadata = { "name" : "m10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def m10_avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_m10_avg_metadata)

    _set_m10_avg_metadata = { "name" : "m10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @m10_avg.setter
    def m10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_m10_avg_metadata, inVal)

    _get_s10_metadata = { "name" : "s10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def s10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_s10_metadata)

    _set_s10_metadata = { "name" : "s10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @s10.setter
    def s10(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_s10_metadata, inVal)

    _get_s10_avg_metadata = { "name" : "s10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def s10_avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_s10_avg_metadata)

    _set_s10_avg_metadata = { "name" : "s10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @s10_avg.setter
    def s10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_s10_avg_metadata, inVal)

    _get_y10_metadata = { "name" : "y10",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_y10_metadata)

    _set_y10_metadata = { "name" : "y10",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y10.setter
    def y10(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_y10_metadata, inVal)

    _get_y10_avg_metadata = { "name" : "y10_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def y10_avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_y10_avg_metadata)

    _set_y10_avg_metadata = { "name" : "y10_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @y10_avg.setter
    def y10_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_y10_avg_metadata, inVal)

    _get_dst_d_tc_metadata = { "name" : "dst_d_tc",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def dst_d_tc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_dst_d_tc_metadata)

    _set_dst_d_tc_metadata = { "name" : "dst_d_tc",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @dst_d_tc.setter
    def dst_d_tc(self, inVal:float) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_dst_d_tc_metadata, inVal)

    _get_atmos_aug_data_file_metadata = { "name" : "atmos_aug_data_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_aug_data_file(self) -> str:
        """The atmospheric model space weather data file path."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_atmos_aug_data_file_metadata)

    _set_atmos_aug_data_file_metadata = { "name" : "atmos_aug_data_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_aug_data_file.setter
    def atmos_aug_data_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_atmos_aug_data_file_metadata, inVal)

    _get_atmos_aug_dtc_file_metadata = { "name" : "atmos_aug_dtc_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_aug_dtc_file(self) -> str:
        """The atmospheric model DTC file path."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_atmos_aug_dtc_file_metadata)

    _set_atmos_aug_dtc_file_metadata = { "name" : "atmos_aug_dtc_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_aug_dtc_file.setter
    def atmos_aug_dtc_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_atmos_aug_dtc_file_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchiaBowman2008._metadata, IJacchiaBowman2008._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{49B828F8-A541-4E9E-99DD-DF3708B3559F}", IJacchiaBowman2008)
agcls.AgTypeNameMap["IJacchiaBowman2008"] = IJacchiaBowman2008

class IJacchia_1960(object):
    """Properties for the Jacchia 1960 atmospheric model - an outdated atmospheric model provided for making comparisons with other software."""
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B32376D4-28EE-4D16-820F-A3A553103168}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_drag_model_type" : 7,
                             "set_drag_model_type" : 8,
                             "get_drag_model_plugin_name" : 9,
                             "set_drag_model_plugin_name" : 10,
                             "get_drag_model_plugin" : 11,
                             "get_variable_area_history_file" : 12,
                             "set_variable_area_history_file" : 13,
                             "get_n_plate_definition_file" : 14,
                             "set_n_plate_definition_file" : 15, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IJacchia_1960)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IJacchia_1960)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IJacchia_1960, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_sun_position_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IJacchia_1960._metadata, IJacchia_1960._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1960._metadata, IJacchia_1960._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B32376D4-28EE-4D16-820F-A3A553103168}", IJacchia_1960)
agcls.AgTypeNameMap["IJacchia_1960"] = IJacchia_1960

class IJacchia_1970(object):
    """Properties for the Jacchia 1970 atmospheric model - a model that computes atmospheric density based on the composition of the atmosphere, which depends on altitude as well as seasonal variation. Valid range is 100-2500 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IJacchia_1970)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IJacchia_1970)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IJacchia_1970, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file"""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IJacchia_1970._metadata, IJacchia_1970._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1970._metadata, IJacchia_1970._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}", IJacchia_1970)
agcls.AgTypeNameMap["IJacchia_1970"] = IJacchia_1970

class IJacchia_1971(object):
    """Properties for the Jacchia 1971 atmospheric model - a model that is similar to Jacchia 1970, with improved treatment of certain solar effects."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IJacchia_1971)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IJacchia_1971)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IJacchia_1971, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IJacchia_1971._metadata, IJacchia_1971._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IJacchia_1971._metadata, IJacchia_1971._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}", IJacchia_1971)
agcls.AgTypeNameMap["IJacchia_1971"] = IJacchia_1971

class IMSISE_1990(object):
    """Properties for the MSISE 1990 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1990 version, valid range of 0-1000 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMSISE_1990)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMSISE_1990)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMSISE_1990, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMSISE_1990._metadata, IMSISE_1990._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMSISE_1990._metadata, IMSISE_1990._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}", IMSISE_1990)
agcls.AgTypeNameMap["IMSISE_1990"] = IMSISE_1990

class IMSIS_1986(object):
    """Properties for the MSIS 1986 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1986 version, valid range of 90-1000 km."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMSIS_1986)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMSIS_1986)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMSIS_1986, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation"""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMSIS_1986._metadata, IMSIS_1986._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMSIS_1986._metadata, IMSIS_1986._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}", IMSIS_1986)
agcls.AgTypeNameMap["IMSIS_1986"] = IMSIS_1986

class INRLMSISE_2000(object):
    """Properties for the NRLMSISE 2000 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7" : 9,
                             "set_f_10_p7" : 10,
                             "get_f_10_p7_avg" : 11,
                             "set_f_10_p7_avg" : 12,
                             "get_kp" : 13,
                             "set_kp" : 14,
                             "get_atmos_data_geo_magnetic_flux_source" : 15,
                             "set_atmos_data_geo_magnetic_flux_source" : 16,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 17,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 18,
                             "get_atmos_data_filename" : 19,
                             "set_atmos_data_filename" : 20,
                             "get_drag_model_type" : 21,
                             "set_drag_model_type" : 22,
                             "get_drag_model_plugin_name" : 23,
                             "set_drag_model_plugin_name" : 24,
                             "get_drag_model_plugin" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, INRLMSISE_2000)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, INRLMSISE_2000)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, INRLMSISE_2000, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_f_10_p7_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_f_10_p7_avg_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate for geomagnetic flux values from the flux file."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(INRLMSISE_2000._metadata, INRLMSISE_2000._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(INRLMSISE_2000._metadata, INRLMSISE_2000._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}", INRLMSISE_2000)
agcls.AgTypeNameMap["INRLMSISE_2000"] = INRLMSISE_2000

class IUS_Standard_Atmosphere(object):
    """Properties for the US Standard Atmosphere atmospheric model."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_drag_model_type" : 5,
                             "set_drag_model_type" : 6,
                             "get_drag_model_plugin_name" : 7,
                             "set_drag_model_plugin_name" : 8,
                             "get_drag_model_plugin" : 9,
                             "get_variable_area_history_file" : 10,
                             "set_variable_area_history_file" : 11,
                             "get_n_plate_definition_file" : 12,
                             "set_n_plate_definition_file" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IUS_Standard_Atmosphere)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IUS_Standard_Atmosphere)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IUS_Standard_Atmosphere, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_computes_pressure_metadata)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IUS_Standard_Atmosphere._metadata, IUS_Standard_Atmosphere._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}", IUS_Standard_Atmosphere)
agcls.AgTypeNameMap["IUS_Standard_Atmosphere"] = IUS_Standard_Atmosphere

class IMarsGRAM37(object):
    """Properties for the Mars-GRAM 3.7 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2855777F-3062-4699-AB5D-2FE73D161472}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_data_directory" : 7,
                             "set_data_directory" : 8,
                             "get_namelist_file" : 9,
                             "set_namelist_file" : 10,
                             "get_density_type" : 11,
                             "set_density_type" : 12,
                             "get_atmos_data_source" : 13,
                             "set_atmos_data_source" : 14,
                             "get_f_10_p7" : 15,
                             "set_f_10_p7" : 16,
                             "get_atmos_data_filename" : 17,
                             "set_atmos_data_filename" : 18,
                             "get_drag_model_type" : 19,
                             "set_drag_model_type" : 20,
                             "get_drag_model_plugin_name" : 21,
                             "set_drag_model_plugin_name" : 22,
                             "get_drag_model_plugin" : 23,
                             "get_variable_area_history_file" : 24,
                             "set_variable_area_history_file" : 25,
                             "get_n_plate_definition_file" : 26,
                             "set_n_plate_definition_file" : 27, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMarsGRAM37)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMarsGRAM37)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMarsGRAM37, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_sun_position_metadata, inVal)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "MARS_GRAM_DENSITY_TYPE":
        """Low, mean or high density type."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"MARS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_density_type_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_f_10_p7_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMarsGRAM37._metadata, IMarsGRAM37._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM37._metadata, IMarsGRAM37._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2855777F-3062-4699-AB5D-2FE73D161472}", IMarsGRAM37)
agcls.AgTypeNameMap["IMarsGRAM37"] = IMarsGRAM37

class IMarsGRAM2005(object):
    """Properties for the Mars-GRAM 2005 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E8649FED-5172-444A-9FC2-3B69586A8B91}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_data_directory" : 7,
                             "set_data_directory" : 8,
                             "get_namelist_file" : 9,
                             "set_namelist_file" : 10,
                             "get_density_type" : 11,
                             "set_density_type" : 12,
                             "get_atmos_data_source" : 13,
                             "set_atmos_data_source" : 14,
                             "get_f_10_p7" : 15,
                             "set_f_10_p7" : 16,
                             "get_atmos_data_filename" : 17,
                             "set_atmos_data_filename" : 18,
                             "get_drag_model_type" : 19,
                             "set_drag_model_type" : 20,
                             "get_drag_model_plugin_name" : 21,
                             "set_drag_model_plugin_name" : 22,
                             "get_drag_model_plugin" : 23,
                             "get_variable_area_history_file" : 24,
                             "set_variable_area_history_file" : 25,
                             "get_n_plate_definition_file" : 26,
                             "set_n_plate_definition_file" : 27, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMarsGRAM2005)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMarsGRAM2005)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMarsGRAM2005, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_sun_position_metadata, inVal)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "MARS_GRAM_DENSITY_TYPE":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"MARS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_density_type_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_f_10_p7_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMarsGRAM2005._metadata, IMarsGRAM2005._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2005._metadata, IMarsGRAM2005._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E8649FED-5172-444A-9FC2-3B69586A8B91}", IMarsGRAM2005)
agcls.AgTypeNameMap["IMarsGRAM2005"] = IMarsGRAM2005

class IVenusGRAM2005(object):
    """Properties for the Venus-GRAM 2005 atmospheric model."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{270C541C-FF9B-4E56-81B0-36CF43D3BE54}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_data_directory" : 5,
                             "set_data_directory" : 6,
                             "get_namelist_file" : 7,
                             "set_namelist_file" : 8,
                             "get_density_type" : 9,
                             "set_density_type" : 10,
                             "get_drag_model_type" : 11,
                             "set_drag_model_type" : 12,
                             "get_drag_model_plugin_name" : 13,
                             "set_drag_model_plugin_name" : 14,
                             "get_drag_model_plugin" : 15,
                             "get_variable_area_history_file" : 16,
                             "set_variable_area_history_file" : 17,
                             "get_n_plate_definition_file" : 18,
                             "set_n_plate_definition_file" : 19, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IVenusGRAM2005)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IVenusGRAM2005)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IVenusGRAM2005, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_computes_pressure_metadata)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(VENUS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "VENUS_GRAM_DENSITY_TYPE":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(VENUS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"VENUS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_density_type_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IVenusGRAM2005._metadata, IVenusGRAM2005._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IVenusGRAM2005._metadata, IVenusGRAM2005._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{270C541C-FF9B-4E56-81B0-36CF43D3BE54}", IVenusGRAM2005)
agcls.AgTypeNameMap["IVenusGRAM2005"] = IVenusGRAM2005

class IMarsGRAM2010(object):
    """Properties for the Mars-GRAM 2010 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_data_directory" : 7,
                             "set_data_directory" : 8,
                             "get_namelist_file" : 9,
                             "set_namelist_file" : 10,
                             "get_density_type" : 11,
                             "set_density_type" : 12,
                             "get_atmos_data_source" : 13,
                             "set_atmos_data_source" : 14,
                             "get_f_10_p7" : 15,
                             "set_f_10_p7" : 16,
                             "get_atmos_data_filename" : 17,
                             "set_atmos_data_filename" : 18,
                             "get_drag_model_type" : 19,
                             "set_drag_model_type" : 20,
                             "get_drag_model_plugin_name" : 21,
                             "set_drag_model_plugin_name" : 22,
                             "get_drag_model_plugin" : 23,
                             "get_variable_area_history_file" : 24,
                             "set_variable_area_history_file" : 25,
                             "get_n_plate_definition_file" : 26,
                             "set_n_plate_definition_file" : 27, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMarsGRAM2010)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMarsGRAM2010)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMarsGRAM2010, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_sun_position_metadata, inVal)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "MARS_GRAM_DENSITY_TYPE":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"MARS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_density_type_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_f_10_p7_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMarsGRAM2010._metadata, IMarsGRAM2010._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2010._metadata, IMarsGRAM2010._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}", IMarsGRAM2010)
agcls.AgTypeNameMap["IMarsGRAM2010"] = IMarsGRAM2010

class IMarsGRAM2001(object):
    """Properties for the Mars-GRAM 2001 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_data_directory" : 7,
                             "set_data_directory" : 8,
                             "get_namelist_file" : 9,
                             "set_namelist_file" : 10,
                             "get_density_type" : 11,
                             "set_density_type" : 12,
                             "get_atmos_data_source" : 13,
                             "set_atmos_data_source" : 14,
                             "get_f_10_p7" : 15,
                             "set_f_10_p7" : 16,
                             "get_atmos_data_filename" : 17,
                             "set_atmos_data_filename" : 18,
                             "get_drag_model_type" : 19,
                             "set_drag_model_type" : 20,
                             "get_drag_model_plugin_name" : 21,
                             "set_drag_model_plugin_name" : 22,
                             "get_drag_model_plugin" : 23,
                             "get_variable_area_history_file" : 24,
                             "set_variable_area_history_file" : 25,
                             "get_n_plate_definition_file" : 26,
                             "set_n_plate_definition_file" : 27, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMarsGRAM2001)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMarsGRAM2001)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMarsGRAM2001, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_sun_position_metadata, inVal)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Path to namelist file."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "MARS_GRAM_DENSITY_TYPE":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"MARS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_density_type_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_f_10_p7_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMarsGRAM2001._metadata, IMarsGRAM2001._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2001._metadata, IMarsGRAM2001._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}", IMarsGRAM2001)
agcls.AgTypeNameMap["IMarsGRAM2001"] = IMarsGRAM2001

class IMarsGRAM2000(object):
    """Properties for the Mars-GRAM 2000 atmospheric model."""
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E3458F58-63AD-4974-9EDA-524E9418A1DF}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_data_directory" : 7,
                             "set_data_directory" : 8,
                             "get_namelist_file" : 9,
                             "set_namelist_file" : 10,
                             "get_density_type" : 11,
                             "set_density_type" : 12,
                             "get_atmos_data_source" : 13,
                             "set_atmos_data_source" : 14,
                             "get_f_10_p7" : 15,
                             "set_f_10_p7" : 16,
                             "get_atmos_data_filename" : 17,
                             "set_atmos_data_filename" : 18,
                             "get_drag_model_type" : 19,
                             "set_drag_model_type" : 20,
                             "get_drag_model_plugin_name" : 21,
                             "set_drag_model_plugin_name" : 22,
                             "get_drag_model_plugin" : 23,
                             "get_variable_area_history_file" : 24,
                             "set_variable_area_history_file" : 25,
                             "get_n_plate_definition_file" : 26,
                             "set_n_plate_definition_file" : 27, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IMarsGRAM2000)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IMarsGRAM2000)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IMarsGRAM2000, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_sun_position_metadata, inVal)

    _get_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def data_directory(self) -> str:
        """Path to the data directory."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_data_directory_metadata)

    _set_data_directory_metadata = { "name" : "data_directory",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @data_directory.setter
    def data_directory(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_data_directory_metadata, inVal)

    _get_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def namelist_file(self) -> str:
        """Full path of namelist file."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_namelist_file_metadata)

    _set_namelist_file_metadata = { "name" : "namelist_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @namelist_file.setter
    def namelist_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_namelist_file_metadata, inVal)

    _get_density_type_metadata = { "name" : "density_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @property
    def density_type(self) -> "MARS_GRAM_DENSITY_TYPE":
        """Low, mean, high or randomly perturbed density type."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_density_type_metadata)

    _set_density_type_metadata = { "name" : "density_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(MARS_GRAM_DENSITY_TYPE),) }
    @density_type.setter
    def density_type(self, inVal:"MARS_GRAM_DENSITY_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_density_type_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_f_10_p7_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """The atmospheric model data file path."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_drag_model_plugin_metadata)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IMarsGRAM2000._metadata, IMarsGRAM2000._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IMarsGRAM2000._metadata, IMarsGRAM2000._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E3458F58-63AD-4974-9EDA-524E9418A1DF}", IMarsGRAM2000)
agcls.AgTypeNameMap["IMarsGRAM2000"] = IMarsGRAM2000

class IDTM2012(object):
    """Properties for the DTM 2012 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4840E65F-6197-4A64-A80A-E0DF1E1048E0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7_avg" : 9,
                             "set_f_10_p7_avg" : 10,
                             "get_atmos_data_filename" : 11,
                             "set_atmos_data_filename" : 12,
                             "get_drag_model_type" : 13,
                             "set_drag_model_type" : 14,
                             "get_drag_model_plugin_name" : 15,
                             "set_drag_model_plugin_name" : 16,
                             "get_drag_model_plugin" : 17,
                             "get_f_10_p7" : 18,
                             "set_f_10_p7" : 19,
                             "get_kp" : 20,
                             "set_kp" : 21,
                             "get_atmos_data_geo_magnetic_flux_source" : 22,
                             "set_atmos_data_geo_magnetic_flux_source" : 23,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 24,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDTM2012)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDTM2012)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDTM2012, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_f_10_p7_avg_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_drag_model_plugin_metadata)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_f_10_p7_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IDTM2012._metadata, IDTM2012._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2012._metadata, IDTM2012._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4840E65F-6197-4A64-A80A-E0DF1E1048E0}", IDTM2012)
agcls.AgTypeNameMap["IDTM2012"] = IDTM2012

class IDTM2020(object):
    """Properties for the DTM 2020 atmospheric model."""
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{50AA8B32-1905-416D-B45E-631E78F5F174}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_use_approximate_altitude" : 1,
                             "set_use_approximate_altitude" : 2,
                             "get_computes_temperature" : 3,
                             "get_computes_pressure" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_atmos_data_source" : 7,
                             "set_atmos_data_source" : 8,
                             "get_f_10_p7_avg" : 9,
                             "set_f_10_p7_avg" : 10,
                             "get_atmos_data_filename" : 11,
                             "set_atmos_data_filename" : 12,
                             "get_drag_model_type" : 13,
                             "set_drag_model_type" : 14,
                             "get_drag_model_plugin_name" : 15,
                             "set_drag_model_plugin_name" : 16,
                             "get_drag_model_plugin" : 17,
                             "get_f_10_p7" : 18,
                             "set_f_10_p7" : 19,
                             "get_kp" : 20,
                             "set_kp" : 21,
                             "get_atmos_data_geo_magnetic_flux_source" : 22,
                             "set_atmos_data_geo_magnetic_flux_source" : 23,
                             "get_atmos_data_geo_magnetic_flux_update_rate" : 24,
                             "set_atmos_data_geo_magnetic_flux_update_rate" : 25,
                             "get_variable_area_history_file" : 26,
                             "set_variable_area_history_file" : 27,
                             "get_n_plate_definition_file" : 28,
                             "set_n_plate_definition_file" : 29, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDTM2020)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDTM2020)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDTM2020, None)
    
    _get_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_approximate_altitude(self) -> bool:
        """True if using approximate altitude formula."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_use_approximate_altitude_metadata)

    _set_use_approximate_altitude_metadata = { "name" : "use_approximate_altitude",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_approximate_altitude.setter
    def use_approximate_altitude(self, inVal:bool) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_use_approximate_altitude_metadata, inVal)

    _get_computes_temperature_metadata = { "name" : "computes_temperature",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_temperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_computes_temperature_metadata)

    _get_computes_pressure_metadata = { "name" : "computes_pressure",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def computes_pressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_computes_pressure_metadata)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_sun_position_metadata, inVal)

    _get_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @property
    def atmos_data_source(self) -> "ATMOS_DATA_SOURCE":
        """The atmospheric model data source - data file or constant values."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_atmos_data_source_metadata)

    _set_atmos_data_source_metadata = { "name" : "atmos_data_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ATMOS_DATA_SOURCE),) }
    @atmos_data_source.setter
    def atmos_data_source(self, inVal:"ATMOS_DATA_SOURCE") -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_atmos_data_source_metadata, inVal)

    _get_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7_avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_f_10_p7_avg_metadata)

    _set_f_10_p7_avg_metadata = { "name" : "f_10_p7_avg",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7_avg.setter
    def f_10_p7_avg(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_f_10_p7_avg_metadata, inVal)

    _get_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def atmos_data_filename(self) -> str:
        """Flux file."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_atmos_data_filename_metadata)

    _set_atmos_data_filename_metadata = { "name" : "atmos_data_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @atmos_data_filename.setter
    def atmos_data_filename(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_atmos_data_filename_metadata, inVal)

    _get_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @property
    def drag_model_type(self) -> "DRAG_MODEL_TYPE":
        """Drag model type."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_drag_model_type_metadata)

    _set_drag_model_type_metadata = { "name" : "drag_model_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(DRAG_MODEL_TYPE),) }
    @drag_model_type.setter
    def drag_model_type(self, inVal:"DRAG_MODEL_TYPE") -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_drag_model_type_metadata, inVal)

    _get_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def drag_model_plugin_name(self) -> str:
        """The name of the drag model plugin."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_drag_model_plugin_name_metadata)

    _set_drag_model_plugin_name_metadata = { "name" : "drag_model_plugin_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @drag_model_plugin_name.setter
    def drag_model_plugin_name(self, pVal:str) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_drag_model_plugin_name_metadata, pVal)

    _get_drag_model_plugin_metadata = { "name" : "drag_model_plugin",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def drag_model_plugin(self) -> "DragModelPlugin":
        """Drag model plugin properties."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_drag_model_plugin_metadata)

    _get_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def f_10_p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_f_10_p7_metadata)

    _set_f_10_p7_metadata = { "name" : "f_10_p7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @f_10_p7.setter
    def f_10_p7(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_f_10_p7_metadata, inVal)

    _get_kp_metadata = { "name" : "kp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_kp_metadata)

    _set_kp_metadata = { "name" : "kp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @kp.setter
    def kp(self, inVal:float) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_kp_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @property
    def atmos_data_geo_magnetic_flux_source(self) -> "GEO_MAGNETIC_FLUX_SOURCE":
        """Whether to use Kp or Ap data from the flux file."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_atmos_data_geo_magnetic_flux_source_metadata)

    _set_atmos_data_geo_magnetic_flux_source_metadata = { "name" : "atmos_data_geo_magnetic_flux_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_SOURCE),) }
    @atmos_data_geo_magnetic_flux_source.setter
    def atmos_data_geo_magnetic_flux_source(self, inVal:"GEO_MAGNETIC_FLUX_SOURCE") -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_atmos_data_geo_magnetic_flux_source_metadata, inVal)

    _get_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @property
    def atmos_data_geo_magnetic_flux_update_rate(self) -> "GEO_MAGNETIC_FLUX_UPDATE_RATE":
        """The update rate of geomagnetic flux values from the flux file."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_atmos_data_geo_magnetic_flux_update_rate_metadata)

    _set_atmos_data_geo_magnetic_flux_update_rate_metadata = { "name" : "atmos_data_geo_magnetic_flux_update_rate",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GEO_MAGNETIC_FLUX_UPDATE_RATE),) }
    @atmos_data_geo_magnetic_flux_update_rate.setter
    def atmos_data_geo_magnetic_flux_update_rate(self, inVal:"GEO_MAGNETIC_FLUX_UPDATE_RATE") -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_atmos_data_geo_magnetic_flux_update_rate_metadata, inVal)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Drag variable area history file."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_variable_area_history_file_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Drag N-Plate definition file."""
        return self._intf.get_property(IDTM2020._metadata, IDTM2020._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(IDTM2020._metadata, IDTM2020._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{50AA8B32-1905-416D-B45E-631E78F5F174}", IDTM2020)
agcls.AgTypeNameMap["IDTM2020"] = IDTM2020

class IGravityFieldFunction(object):
    """Properties for the Gravitational Force gravity model - a complex gravitational force calculation, optionally including solid and ocean tide effects."""
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B199E3B6-9964-4CAA-A824-1F106886E0DE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_gravity_filename" : 1,
                             "set_gravity_filename" : 2,
                             "get_degree" : 3,
                             "set_degree" : 4,
                             "get_order" : 5,
                             "set_order" : 6,
                             "get_max_degree_text" : 7,
                             "get_max_order_text" : 8,
                             "get_include_time_dependent_solid_tides" : 9,
                             "set_include_time_dependent_solid_tides" : 10,
                             "get_solid_tide_min_amp" : 11,
                             "set_solid_tide_min_amp" : 12,
                             "get_use_ocean_tides" : 13,
                             "set_use_ocean_tides" : 14,
                             "get_ocean_tide_min_amp" : 15,
                             "set_ocean_tide_min_amp" : 16,
                             "get_min_radius_percent" : 17,
                             "set_min_radius_percent" : 18,
                             "get_central_body_name" : 19,
                             "get_ocean_tide_max_degree" : 20,
                             "set_ocean_tide_max_degree" : 21,
                             "get_ocean_tide_max_order" : 22,
                             "set_ocean_tide_max_order" : 23,
                             "get_solid_tide_type" : 24,
                             "set_solid_tide_type" : 25,
                             "get_truncate_solid_tides" : 26,
                             "set_truncate_solid_tides" : 27,
                             "get_use_secular_variations" : 28,
                             "set_use_secular_variations" : 29,
                             "get_partials_degree" : 30,
                             "set_partials_degree" : 31,
                             "get_partials_order" : 32,
                             "set_partials_order" : 33,
                             "get_max_partials_degree_text" : 34,
                             "get_max_partials_order_text" : 35, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGravityFieldFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGravityFieldFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGravityFieldFunction, None)
    
    _get_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def gravity_filename(self) -> str:
        """The name of the file containing the gravity field."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_gravity_filename_metadata)

    _set_gravity_filename_metadata = { "name" : "gravity_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @gravity_filename.setter
    def gravity_filename(self, inVal:str) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_gravity_filename_metadata, inVal)

    _get_degree_metadata = { "name" : "degree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def degree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_degree_metadata)

    _set_degree_metadata = { "name" : "degree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @degree.setter
    def degree(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_degree_metadata, inVal)

    _get_order_metadata = { "name" : "order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def order(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_order_metadata)

    _set_order_metadata = { "name" : "order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @order.setter
    def order(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_order_metadata, inVal)

    _get_max_degree_text_metadata = { "name" : "max_degree_text",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def max_degree_text(self) -> str:
        """Displays the maximum degree permissible for the gravity model."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_max_degree_text_metadata)

    _get_max_order_text_metadata = { "name" : "max_order_text",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def max_order_text(self) -> str:
        """Displays the maximum order permissible for the gravity model."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_max_order_text_metadata)

    _get_include_time_dependent_solid_tides_metadata = { "name" : "include_time_dependent_solid_tides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_time_dependent_solid_tides(self) -> bool:
        """True if including time dependent solid tides."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_include_time_dependent_solid_tides_metadata)

    _set_include_time_dependent_solid_tides_metadata = { "name" : "include_time_dependent_solid_tides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_time_dependent_solid_tides.setter
    def include_time_dependent_solid_tides(self, inVal:bool) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_include_time_dependent_solid_tides_metadata, inVal)

    _get_solid_tide_min_amp_metadata = { "name" : "solid_tide_min_amp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solid_tide_min_amp(self) -> float:
        """The minimum amplitude for solid tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_solid_tide_min_amp_metadata)

    _set_solid_tide_min_amp_metadata = { "name" : "solid_tide_min_amp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solid_tide_min_amp.setter
    def solid_tide_min_amp(self, inVal:float) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_solid_tide_min_amp_metadata, inVal)

    _get_use_ocean_tides_metadata = { "name" : "use_ocean_tides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_ocean_tides(self) -> bool:
        """True if using ocean tides/"""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_use_ocean_tides_metadata)

    _set_use_ocean_tides_metadata = { "name" : "use_ocean_tides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_ocean_tides.setter
    def use_ocean_tides(self, inVal:bool) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_use_ocean_tides_metadata, inVal)

    _get_ocean_tide_min_amp_metadata = { "name" : "ocean_tide_min_amp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def ocean_tide_min_amp(self) -> float:
        """The minimum amplitude for ocean tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_ocean_tide_min_amp_metadata)

    _set_ocean_tide_min_amp_metadata = { "name" : "ocean_tide_min_amp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @ocean_tide_min_amp.setter
    def ocean_tide_min_amp(self, inVal:float) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_ocean_tide_min_amp_metadata, inVal)

    _get_min_radius_percent_metadata = { "name" : "min_radius_percent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_radius_percent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_min_radius_percent_metadata)

    _set_min_radius_percent_metadata = { "name" : "min_radius_percent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_radius_percent.setter
    def min_radius_percent(self, inVal:float) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_min_radius_percent_metadata, inVal)

    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The name of the central body"""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_central_body_name_metadata)

    _get_ocean_tide_max_degree_metadata = { "name" : "ocean_tide_max_degree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def ocean_tide_max_degree(self) -> int:
        """The maximum degree for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_ocean_tide_max_degree_metadata)

    _set_ocean_tide_max_degree_metadata = { "name" : "ocean_tide_max_degree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @ocean_tide_max_degree.setter
    def ocean_tide_max_degree(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_ocean_tide_max_degree_metadata, inVal)

    _get_ocean_tide_max_order_metadata = { "name" : "ocean_tide_max_order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def ocean_tide_max_order(self) -> int:
        """The maximum order for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_ocean_tide_max_order_metadata)

    _set_ocean_tide_max_order_metadata = { "name" : "ocean_tide_max_order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @ocean_tide_max_order.setter
    def ocean_tide_max_order(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_ocean_tide_max_order_metadata, inVal)

    _get_solid_tide_type_metadata = { "name" : "solid_tide_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SOLID_TIDE),) }
    @property
    def solid_tide_type(self) -> "SOLID_TIDE":
        """The type of solid tide contribution to be modeled."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_solid_tide_type_metadata)

    _set_solid_tide_type_metadata = { "name" : "solid_tide_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SOLID_TIDE),) }
    @solid_tide_type.setter
    def solid_tide_type(self, solidTide:"SOLID_TIDE") -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_solid_tide_type_metadata, solidTide)

    _get_truncate_solid_tides_metadata = { "name" : "truncate_solid_tides",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def truncate_solid_tides(self) -> bool:
        """True if solid tide terms (including permanent tide) won't be included beyond the degree and order selected for the gravity model."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_truncate_solid_tides_metadata)

    _set_truncate_solid_tides_metadata = { "name" : "truncate_solid_tides",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @truncate_solid_tides.setter
    def truncate_solid_tides(self, pVal:bool) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_truncate_solid_tides_metadata, pVal)

    _get_use_secular_variations_metadata = { "name" : "use_secular_variations",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_secular_variations(self) -> bool:
        """Opt whether to include or ignore secular variations defined by the gravity field model."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_use_secular_variations_metadata)

    _set_use_secular_variations_metadata = { "name" : "use_secular_variations",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_secular_variations.setter
    def use_secular_variations(self, pVal:bool) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_use_secular_variations_metadata, pVal)

    _get_partials_degree_metadata = { "name" : "partials_degree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def partials_degree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the degree used for state computations. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_partials_degree_metadata)

    _set_partials_degree_metadata = { "name" : "partials_degree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @partials_degree.setter
    def partials_degree(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_partials_degree_metadata, inVal)

    _get_partials_order_metadata = { "name" : "partials_order",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def partials_order(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the order used for state computations. Dimensionless."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_partials_order_metadata)

    _set_partials_order_metadata = { "name" : "partials_order",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @partials_order.setter
    def partials_order(self, inVal:int) -> None:
        return self._intf.set_property(IGravityFieldFunction._metadata, IGravityFieldFunction._set_partials_order_metadata, inVal)

    _get_max_partials_degree_text_metadata = { "name" : "max_partials_degree_text",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def max_partials_degree_text(self) -> str:
        """Displays the maximum degree permissible for the gravity model partials used in the STM."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_max_partials_degree_text_metadata)

    _get_max_partials_order_text_metadata = { "name" : "max_partials_order_text",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def max_partials_order_text(self) -> str:
        """Displays the maximum order permissible for the gravity model partials used in the STM."""
        return self._intf.get_property(IGravityFieldFunction._metadata, IGravityFieldFunction._get_max_partials_order_text_metadata)


agcls.AgClassCatalog.add_catalog_entry("{B199E3B6-9964-4CAA-A824-1F106886E0DE}", IGravityFieldFunction)
agcls.AgTypeNameMap["IGravityFieldFunction"] = IGravityFieldFunction

class IPointMassFunction(object):
    """Properties for the Point Mass Function."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_grav_source" : 1,
                             "set_grav_source" : 2,
                             "get_mu" : 3,
                             "set_mu" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPointMassFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPointMassFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPointMassFunction, None)
    
    _get_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_PARAM_SOURCE),) }
    @property
    def grav_source(self) -> "GRAV_PARAM_SOURCE":
        """The source for the third body's gravitational parameter."""
        return self._intf.get_property(IPointMassFunction._metadata, IPointMassFunction._get_grav_source_metadata)

    _set_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_PARAM_SOURCE),) }
    @grav_source.setter
    def grav_source(self, inVal:"GRAV_PARAM_SOURCE") -> None:
        return self._intf.set_property(IPointMassFunction._metadata, IPointMassFunction._set_grav_source_metadata, inVal)

    _get_mu_metadata = { "name" : "mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        return self._intf.get_property(IPointMassFunction._metadata, IPointMassFunction._get_mu_metadata)

    _set_mu_metadata = { "name" : "mu",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mu.setter
    def mu(self, inVal:float) -> None:
        return self._intf.set_property(IPointMassFunction._metadata, IPointMassFunction._set_mu_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}", IPointMassFunction)
agcls.AgTypeNameMap["IPointMassFunction"] = IPointMassFunction

class ITwoBodyFunction(object):
    """Properties for the Two Body gravity model - a standard point mass model."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{827AF54A-9389-4151-8193-7B3FAE64E66D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_grav_source" : 1,
                             "set_grav_source" : 2,
                             "get_mu" : 3,
                             "set_mu" : 4,
                             "get_min_radius_percent" : 5,
                             "set_min_radius_percent" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ITwoBodyFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ITwoBodyFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ITwoBodyFunction, None)
    
    _get_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_PARAM_SOURCE),) }
    @property
    def grav_source(self) -> "GRAV_PARAM_SOURCE":
        """The source for the gravitational parameter."""
        return self._intf.get_property(ITwoBodyFunction._metadata, ITwoBodyFunction._get_grav_source_metadata)

    _set_grav_source_metadata = { "name" : "grav_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(GRAV_PARAM_SOURCE),) }
    @grav_source.setter
    def grav_source(self, inVal:"GRAV_PARAM_SOURCE") -> None:
        return self._intf.set_property(ITwoBodyFunction._metadata, ITwoBodyFunction._set_grav_source_metadata, inVal)

    _get_mu_metadata = { "name" : "mu",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        return self._intf.get_property(ITwoBodyFunction._metadata, ITwoBodyFunction._get_mu_metadata)

    _set_mu_metadata = { "name" : "mu",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mu.setter
    def mu(self, inVal:float) -> None:
        return self._intf.set_property(ITwoBodyFunction._metadata, ITwoBodyFunction._set_mu_metadata, inVal)

    _get_min_radius_percent_metadata = { "name" : "min_radius_percent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_radius_percent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        return self._intf.get_property(ITwoBodyFunction._metadata, ITwoBodyFunction._get_min_radius_percent_metadata)

    _set_min_radius_percent_metadata = { "name" : "min_radius_percent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_radius_percent.setter
    def min_radius_percent(self, inVal:float) -> None:
        return self._intf.set_property(ITwoBodyFunction._metadata, ITwoBodyFunction._set_min_radius_percent_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{827AF54A-9389-4151-8193-7B3FAE64E66D}", ITwoBodyFunction)
agcls.AgTypeNameMap["ITwoBodyFunction"] = ITwoBodyFunction

class IHPOPPluginFunction(object):
    """Properties for the HPOP Plugin propagator function."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_plugin_identifier" : 1,
                             "set_plugin_identifier" : 2,
                             "get_plugin_config" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IHPOPPluginFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IHPOPPluginFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IHPOPPluginFunction, None)
    
    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IHPOPPluginFunction._metadata, IHPOPPluginFunction._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(IHPOPPluginFunction._metadata, IHPOPPluginFunction._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IHPOPPluginFunction._metadata, IHPOPPluginFunction._get_plugin_config_metadata)


agcls.AgClassCatalog.add_catalog_entry("{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}", IHPOPPluginFunction)
agcls.AgTypeNameMap["IHPOPPluginFunction"] = IHPOPPluginFunction

class IEOMFuncPluginFunction(object):
    """Properties for the EOM Function Plugin propagator function."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{D652969D-D848-4AF2-91C9-8BD479D0F681}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_plugin_identifier" : 1,
                             "set_plugin_identifier" : 2,
                             "get_plugin_config" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEOMFuncPluginFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEOMFuncPluginFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEOMFuncPluginFunction, None)
    
    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(IEOMFuncPluginFunction._metadata, IEOMFuncPluginFunction._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(IEOMFuncPluginFunction._metadata, IEOMFuncPluginFunction._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(IEOMFuncPluginFunction._metadata, IEOMFuncPluginFunction._get_plugin_config_metadata)


agcls.AgClassCatalog.add_catalog_entry("{D652969D-D848-4AF2-91C9-8BD479D0F681}", IEOMFuncPluginFunction)
agcls.AgTypeNameMap["IEOMFuncPluginFunction"] = IEOMFuncPluginFunction

class ISRPAeroT20(object):
    """Properties for the Aerospace T20 solar radiation pressure model for GPS block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1B712154-4552-4453-B784-5C773A9F88C0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPAeroT20)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPAeroT20)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPAeroT20, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPAeroT20._metadata, ISRPAeroT20._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPAeroT20._metadata, ISRPAeroT20._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{1B712154-4552-4453-B784-5C773A9F88C0}", ISRPAeroT20)
agcls.AgTypeNameMap["ISRPAeroT20"] = ISRPAeroT20

class ISRPAeroT30(object):
    """Properties for the Aerospace T30 solar radiation pressure model for GPS block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPAeroT30)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPAeroT30)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPAeroT30, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPAeroT30._metadata, ISRPAeroT30._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPAeroT30._metadata, ISRPAeroT30._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}", ISRPAeroT30)
agcls.AgTypeNameMap["ISRPAeroT30"] = ISRPAeroT30

class ISRPGSPM04aIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{73504326-18B8-40FB-A466-DB8908769B9D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPGSPM04aIIA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPGSPM04aIIA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPGSPM04aIIA, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aIIA._metadata, ISRPGSPM04aIIA._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{73504326-18B8-40FB-A466-DB8908769B9D}", ISRPGSPM04aIIA)
agcls.AgTypeNameMap["ISRPGSPM04aIIA"] = ISRPGSPM04aIIA

class ISRPGSPM04aIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPGSPM04aIIR)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPGSPM04aIIR)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPGSPM04aIIR, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aIIR._metadata, ISRPGSPM04aIIR._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}", ISRPGSPM04aIIR)
agcls.AgTypeNameMap["ISRPGSPM04aIIR"] = ISRPGSPM04aIIR

class ISRPGSPM04aeIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIA."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPGSPM04aeIIA)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPGSPM04aeIIA)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPGSPM04aeIIA, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIA._metadata, ISRPGSPM04aeIIA._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}", ISRPGSPM04aeIIA)
agcls.AgTypeNameMap["ISRPGSPM04aeIIA"] = ISRPGSPM04aeIIA

class ISRPGSPM04aeIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIR."""
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{8A1CAF39-9680-4405-942D-A86D279EAE24}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_include_boundary_mitigation" : 8,
                             "set_include_boundary_mitigation" : 9,
                             "get_use_sun_central_body_file_values" : 10,
                             "set_use_sun_central_body_file_values" : 11,
                             "get_solar_radius" : 12,
                             "set_solar_radius" : 13, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPGSPM04aeIIR)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPGSPM04aeIIR)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPGSPM04aeIIR, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPGSPM04aeIIR._metadata, ISRPGSPM04aeIIR._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{8A1CAF39-9680-4405-942D-A86D279EAE24}", ISRPGSPM04aeIIR)
agcls.AgTypeNameMap["ISRPGSPM04aeIIR"] = ISRPGSPM04aeIIR

class ISRPSpherical(object):
    """Properties for the Spherical SRP model; assumes a spherical spacecraft. The equation used by STK is described in the Solar Radiation technical note."""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B8F7E804-16B0-447F-A75A-B75DF05287B0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_mean_flux" : 8,
                             "set_mean_flux" : 9,
                             "get_luminosity" : 10,
                             "set_luminosity" : 11,
                             "get_solar_force_method" : 12,
                             "set_solar_force_method" : 13,
                             "get_include_boundary_mitigation" : 14,
                             "set_include_boundary_mitigation" : 15,
                             "get_use_sun_central_body_file_values" : 16,
                             "set_use_sun_central_body_file_values" : 17,
                             "get_solar_radius" : 18,
                             "set_solar_radius" : 19, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPSpherical)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPSpherical)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPSpherical, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_eclipsing_bodies_metadata)

    _get_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_flux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_mean_flux_metadata)

    _set_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_flux.setter
    def mean_flux(self, inVal:float) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_mean_flux_metadata, inVal)

    _get_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_luminosity_metadata)

    _set_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @luminosity.setter
    def luminosity(self, inVal:float) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_luminosity_metadata, inVal)

    _get_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @property
    def solar_force_method(self) -> "SOLAR_FORCE_METHOD":
        """The solar force method"""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_solar_force_method_metadata)

    _set_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @solar_force_method.setter
    def solar_force_method(self, inVal:"SOLAR_FORCE_METHOD") -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_solar_force_method_metadata, inVal)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPSpherical._metadata, ISRPSpherical._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPSpherical._metadata, ISRPSpherical._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B8F7E804-16B0-447F-A75A-B75DF05287B0}", ISRPSpherical)
agcls.AgTypeNameMap["ISRPSpherical"] = ISRPSpherical

class ISRPNPlate(object):
    """Properties for the N-plate SRP model."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5DE80C27-861E-4596-9461-414741A793D1}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_mean_flux" : 8,
                             "set_mean_flux" : 9,
                             "get_luminosity" : 10,
                             "set_luminosity" : 11,
                             "get_solar_force_method" : 12,
                             "set_solar_force_method" : 13,
                             "get_include_boundary_mitigation" : 14,
                             "set_include_boundary_mitigation" : 15,
                             "get_use_sun_central_body_file_values" : 16,
                             "set_use_sun_central_body_file_values" : 17,
                             "get_solar_radius" : 18,
                             "set_solar_radius" : 19,
                             "get_n_plate_definition_file" : 20,
                             "set_n_plate_definition_file" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPNPlate)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPNPlate)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPNPlate, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_eclipsing_bodies_metadata)

    _get_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_flux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_mean_flux_metadata)

    _set_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_flux.setter
    def mean_flux(self, inVal:float) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_mean_flux_metadata, inVal)

    _get_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_luminosity_metadata)

    _set_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @luminosity.setter
    def luminosity(self, inVal:float) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_luminosity_metadata, inVal)

    _get_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @property
    def solar_force_method(self) -> "SOLAR_FORCE_METHOD":
        """The solar force method"""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_solar_force_method_metadata)

    _set_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @solar_force_method.setter
    def solar_force_method(self, inVal:"SOLAR_FORCE_METHOD") -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_solar_force_method_metadata, inVal)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_solar_radius_metadata, inVal)

    _get_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def n_plate_definition_file(self) -> str:
        """Full path of NPlate definition file."""
        return self._intf.get_property(ISRPNPlate._metadata, ISRPNPlate._get_n_plate_definition_file_metadata)

    _set_n_plate_definition_file_metadata = { "name" : "n_plate_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @n_plate_definition_file.setter
    def n_plate_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(ISRPNPlate._metadata, ISRPNPlate._set_n_plate_definition_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{5DE80C27-861E-4596-9461-414741A793D1}", ISRPNPlate)
agcls.AgTypeNameMap["ISRPNPlate"] = ISRPNPlate

class ISRPTabAreaVec(object):
    """Properties for the tabulated area vector SRP model."""
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{796EAE38-5298-4315-AA74-29C810F2E3FE}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_mean_flux" : 8,
                             "set_mean_flux" : 9,
                             "get_luminosity" : 10,
                             "set_luminosity" : 11,
                             "get_solar_force_method" : 12,
                             "set_solar_force_method" : 13,
                             "get_include_boundary_mitigation" : 14,
                             "set_include_boundary_mitigation" : 15,
                             "get_use_sun_central_body_file_values" : 16,
                             "set_use_sun_central_body_file_values" : 17,
                             "get_solar_radius" : 18,
                             "set_solar_radius" : 19,
                             "get_tab_area_vector_definition_file" : 20,
                             "set_tab_area_vector_definition_file" : 21,
                             "get_interpolation_method" : 22,
                             "set_interpolation_method" : 23, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPTabAreaVec)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPTabAreaVec)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPTabAreaVec, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_eclipsing_bodies_metadata)

    _get_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_flux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_mean_flux_metadata)

    _set_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_flux.setter
    def mean_flux(self, inVal:float) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_mean_flux_metadata, inVal)

    _get_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_luminosity_metadata)

    _set_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @luminosity.setter
    def luminosity(self, inVal:float) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_luminosity_metadata, inVal)

    _get_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @property
    def solar_force_method(self) -> "SOLAR_FORCE_METHOD":
        """The solar force method"""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_solar_force_method_metadata)

    _set_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @solar_force_method.setter
    def solar_force_method(self, inVal:"SOLAR_FORCE_METHOD") -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_solar_force_method_metadata, inVal)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_solar_radius_metadata, inVal)

    _get_tab_area_vector_definition_file_metadata = { "name" : "tab_area_vector_definition_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def tab_area_vector_definition_file(self) -> str:
        """Full path of the tabulated area vector definition file."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_tab_area_vector_definition_file_metadata)

    _set_tab_area_vector_definition_file_metadata = { "name" : "tab_area_vector_definition_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @tab_area_vector_definition_file.setter
    def tab_area_vector_definition_file(self, inVal:str) -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_tab_area_vector_definition_file_metadata, inVal)

    _get_interpolation_method_metadata = { "name" : "interpolation_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(TAB_VEC_INTERP_METHOD),) }
    @property
    def interpolation_method(self) -> "TAB_VEC_INTERP_METHOD":
        """The file interpolation method."""
        return self._intf.get_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._get_interpolation_method_metadata)

    _set_interpolation_method_metadata = { "name" : "interpolation_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(TAB_VEC_INTERP_METHOD),) }
    @interpolation_method.setter
    def interpolation_method(self, inVal:"TAB_VEC_INTERP_METHOD") -> None:
        return self._intf.set_property(ISRPTabAreaVec._metadata, ISRPTabAreaVec._set_interpolation_method_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{796EAE38-5298-4315-AA74-29C810F2E3FE}", ISRPTabAreaVec)
agcls.AgTypeNameMap["ISRPTabAreaVec"] = ISRPTabAreaVec

class ISRPVariableArea(object):
    """Properties for the Variable Area SRP model."""
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4124EBC1-ABC6-4933-84D2-0F1232D8B630}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_atmos_altitude" : 1,
                             "set_atmos_altitude" : 2,
                             "get_shadow_model" : 3,
                             "set_shadow_model" : 4,
                             "get_sun_position" : 5,
                             "set_sun_position" : 6,
                             "get_eclipsing_bodies" : 7,
                             "get_mean_flux" : 8,
                             "set_mean_flux" : 9,
                             "get_luminosity" : 10,
                             "set_luminosity" : 11,
                             "get_solar_force_method" : 12,
                             "set_solar_force_method" : 13,
                             "get_include_boundary_mitigation" : 14,
                             "set_include_boundary_mitigation" : 15,
                             "get_use_sun_central_body_file_values" : 16,
                             "set_use_sun_central_body_file_values" : 17,
                             "get_solar_radius" : 18,
                             "set_solar_radius" : 19,
                             "get_variable_area_history_file" : 20,
                             "set_variable_area_history_file" : 21, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPVariableArea)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPVariableArea)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPVariableArea, None)
    
    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_eclipsing_bodies_metadata)

    _get_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mean_flux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_mean_flux_metadata)

    _set_mean_flux_metadata = { "name" : "mean_flux",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mean_flux.setter
    def mean_flux(self, inVal:float) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_mean_flux_metadata, inVal)

    _get_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_luminosity_metadata)

    _set_luminosity_metadata = { "name" : "luminosity",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @luminosity.setter
    def luminosity(self, inVal:float) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_luminosity_metadata, inVal)

    _get_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @property
    def solar_force_method(self) -> "SOLAR_FORCE_METHOD":
        """The solar force method"""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_solar_force_method_metadata)

    _set_solar_force_method_metadata = { "name" : "solar_force_method",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SOLAR_FORCE_METHOD),) }
    @solar_force_method.setter
    def solar_force_method(self, inVal:"SOLAR_FORCE_METHOD") -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_solar_force_method_metadata, inVal)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_solar_radius_metadata, inVal)

    _get_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def variable_area_history_file(self) -> str:
        """Full path of the variable area history file."""
        return self._intf.get_property(ISRPVariableArea._metadata, ISRPVariableArea._get_variable_area_history_file_metadata)

    _set_variable_area_history_file_metadata = { "name" : "variable_area_history_file",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @variable_area_history_file.setter
    def variable_area_history_file(self, inVal:str) -> None:
        return self._intf.set_property(ISRPVariableArea._metadata, ISRPVariableArea._set_variable_area_history_file_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{4124EBC1-ABC6-4933-84D2-0F1232D8B630}", ISRPVariableArea)
agcls.AgTypeNameMap["ISRPVariableArea"] = ISRPVariableArea

class IThirdBodyFunction(object):
    """Properties for a Third Body propagator function. The IComponentInfo object returned by the mode property can be cast to GravityFieldFunction or PointMassFunction depending on the selected ModeType."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_third_body_name" : 1,
                             "set_third_body_name" : 2,
                             "get_ephem_source" : 3,
                             "set_ephem_source" : 4,
                             "get_mode" : 5,
                             "set_mode_type" : 6,
                             "get_mode_type" : 7,
                             "get_ephemeris_source_warning" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IThirdBodyFunction)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IThirdBodyFunction)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IThirdBodyFunction, None)
    
    _get_third_body_name_metadata = { "name" : "third_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def third_body_name(self) -> str:
        """The selected third body model."""
        return self._intf.get_property(IThirdBodyFunction._metadata, IThirdBodyFunction._get_third_body_name_metadata)

    _set_third_body_name_metadata = { "name" : "third_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @third_body_name.setter
    def third_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IThirdBodyFunction._metadata, IThirdBodyFunction._set_third_body_name_metadata, inVal)

    _get_ephem_source_metadata = { "name" : "ephem_source",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(EPHEM_SOURCE),) }
    @property
    def ephem_source(self) -> "EPHEM_SOURCE":
        """Source for the third body's ephemeris"""
        return self._intf.get_property(IThirdBodyFunction._metadata, IThirdBodyFunction._get_ephem_source_metadata)

    _set_ephem_source_metadata = { "name" : "ephem_source",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(EPHEM_SOURCE),) }
    @ephem_source.setter
    def ephem_source(self, inVal:"EPHEM_SOURCE") -> None:
        return self._intf.set_property(IThirdBodyFunction._metadata, IThirdBodyFunction._set_ephem_source_metadata, inVal)

    _get_mode_metadata = { "name" : "mode",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def mode(self) -> "IComponentInfo":
        """The third body gravity mode. The IComponentInfo object returned by this property can be cast to GravityFieldFunction or PointMassFunction depending on the selected ModeType."""
        return self._intf.get_property(IThirdBodyFunction._metadata, IThirdBodyFunction._get_mode_metadata)

    _set_mode_type_metadata = { "name" : "set_mode_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(THIRD_BODY_MODE),) }
    def set_mode_type(self, mode:"THIRD_BODY_MODE") -> None:
        """The third body gravity mode."""
        return self._intf.invoke(IThirdBodyFunction._metadata, IThirdBodyFunction._set_mode_type_metadata, mode)

    _get_mode_type_metadata = { "name" : "mode_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(THIRD_BODY_MODE),) }
    @property
    def mode_type(self) -> "THIRD_BODY_MODE":
        """The third body gravity mode type."""
        return self._intf.get_property(IThirdBodyFunction._metadata, IThirdBodyFunction._get_mode_type_metadata)

    _get_ephemeris_source_warning_metadata = { "name" : "ephemeris_source_warning",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ephemeris_source_warning(self) -> str:
        """Return a warning message if the Ephemeris source and the gravity are not compatible"""
        return self._intf.get_property(IThirdBodyFunction._metadata, IThirdBodyFunction._get_ephemeris_source_warning_metadata)


agcls.AgClassCatalog.add_catalog_entry("{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}", IThirdBodyFunction)
agcls.AgTypeNameMap["IThirdBodyFunction"] = IThirdBodyFunction

class ISRPReflectionPlugin(object):
    """Properties for the plugin SRP Refelction."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2DF13668-98B3-4E69-89CA-C8136EAE49D9}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_plugin_identifier" : 1,
                             "set_plugin_identifier" : 2,
                             "get_plugin_config" : 3,
                             "get_atmos_altitude" : 4,
                             "set_atmos_altitude" : 5,
                             "get_shadow_model" : 6,
                             "set_shadow_model" : 7,
                             "get_sun_position" : 8,
                             "set_sun_position" : 9,
                             "get_eclipsing_bodies" : 10,
                             "get_include_boundary_mitigation" : 11,
                             "set_include_boundary_mitigation" : 12,
                             "get_use_sun_central_body_file_values" : 13,
                             "set_use_sun_central_body_file_values" : 14,
                             "get_solar_radius" : 15,
                             "set_solar_radius" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ISRPReflectionPlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ISRPReflectionPlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ISRPReflectionPlugin, None)
    
    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The plugin name."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the selected plugin."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_plugin_config_metadata)

    _get_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def atmos_altitude(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_atmos_altitude_metadata)

    _set_atmos_altitude_metadata = { "name" : "atmos_altitude",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @atmos_altitude.setter
    def atmos_altitude(self, inVal:float) -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_atmos_altitude_metadata, inVal)

    _get_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @property
    def shadow_model(self) -> "SHADOW_MODEL":
        """The shadow model type."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_shadow_model_metadata)

    _set_shadow_model_metadata = { "name" : "shadow_model",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SHADOW_MODEL),) }
    @shadow_model.setter
    def shadow_model(self, inVal:"SHADOW_MODEL") -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_shadow_model_metadata, inVal)

    _get_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @property
    def sun_position(self) -> "SUN_POSITION":
        """The sun position computation."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_sun_position_metadata)

    _set_sun_position_metadata = { "name" : "sun_position",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(SUN_POSITION),) }
    @sun_position.setter
    def sun_position(self, inVal:"SUN_POSITION") -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_sun_position_metadata, inVal)

    _get_eclipsing_bodies_metadata = { "name" : "eclipsing_bodies",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def eclipsing_bodies(self) -> "CentralBodyCollection":
        """Other eclipsing bodies."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_eclipsing_bodies_metadata)

    _get_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def include_boundary_mitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_include_boundary_mitigation_metadata)

    _set_include_boundary_mitigation_metadata = { "name" : "include_boundary_mitigation",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @include_boundary_mitigation.setter
    def include_boundary_mitigation(self, mitigation:bool) -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_include_boundary_mitigation_metadata, mitigation)

    _get_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_sun_central_body_file_values(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_use_sun_central_body_file_values_metadata)

    _set_use_sun_central_body_file_values_metadata = { "name" : "use_sun_central_body_file_values",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_sun_central_body_file_values.setter
    def use_sun_central_body_file_values(self, inVal:bool) -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_use_sun_central_body_file_values_metadata, inVal)

    _get_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def solar_radius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        return self._intf.get_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._get_solar_radius_metadata)

    _set_solar_radius_metadata = { "name" : "solar_radius",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @solar_radius.setter
    def solar_radius(self, inVal:float) -> None:
        return self._intf.set_property(ISRPReflectionPlugin._metadata, ISRPReflectionPlugin._set_solar_radius_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2DF13668-98B3-4E69-89CA-C8136EAE49D9}", ISRPReflectionPlugin)
agcls.AgTypeNameMap["ISRPReflectionPlugin"] = ISRPReflectionPlugin

class IEngineModelThrustCoefficients(object):
    """Thrust coefficient properties for engine definition."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_c0" : 1,
                             "set_c0" : 2,
                             "get_c1" : 3,
                             "set_c1" : 4,
                             "get_c2" : 5,
                             "set_c2" : 6,
                             "get_c3" : 7,
                             "set_c3" : 8,
                             "get_c4" : 9,
                             "set_c4" : 10,
                             "get_c5" : 11,
                             "set_c5" : 12,
                             "get_c6" : 13,
                             "set_c6" : 14,
                             "get_c7" : 15,
                             "set_c7" : 16,
                             "get_e4" : 17,
                             "set_e4" : 18,
                             "get_e5" : 19,
                             "set_e5" : 20,
                             "get_e6" : 21,
                             "set_e6" : 22,
                             "get_e7" : 23,
                             "set_e7" : 24,
                             "get_b7" : 25,
                             "set_b7" : 26,
                             "get_k0" : 27,
                             "set_k0" : 28,
                             "get_k1" : 29,
                             "set_k1" : 30,
                             "get_reference_temp" : 31,
                             "set_reference_temp" : 32, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineModelThrustCoefficients)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineModelThrustCoefficients)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineModelThrustCoefficients, None)
    
    _get_c0_metadata = { "name" : "c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c0(self) -> float:
        """C0 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c0_metadata)

    _set_c0_metadata = { "name" : "c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c0.setter
    def c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c0_metadata, inVal)

    _get_c1_metadata = { "name" : "c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c1(self) -> float:
        """C1 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c1_metadata)

    _set_c1_metadata = { "name" : "c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c1.setter
    def c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c1_metadata, inVal)

    _get_c2_metadata = { "name" : "c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c2(self) -> float:
        """C2 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c2_metadata)

    _set_c2_metadata = { "name" : "c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c2.setter
    def c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c2_metadata, inVal)

    _get_c3_metadata = { "name" : "c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c3(self) -> float:
        """C3 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c3_metadata)

    _set_c3_metadata = { "name" : "c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c3.setter
    def c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c3_metadata, inVal)

    _get_c4_metadata = { "name" : "c4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c4(self) -> float:
        """C4 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c4_metadata)

    _set_c4_metadata = { "name" : "c4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c4.setter
    def c4(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c4_metadata, inVal)

    _get_c5_metadata = { "name" : "c5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c5(self) -> float:
        """C5 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c5_metadata)

    _set_c5_metadata = { "name" : "c5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c5.setter
    def c5(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c5_metadata, inVal)

    _get_c6_metadata = { "name" : "c6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c6(self) -> float:
        """C6 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c6_metadata)

    _set_c6_metadata = { "name" : "c6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c6.setter
    def c6(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c6_metadata, inVal)

    _get_c7_metadata = { "name" : "c7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c7(self) -> float:
        """C7 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_c7_metadata)

    _set_c7_metadata = { "name" : "c7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c7.setter
    def c7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_c7_metadata, inVal)

    _get_e4_metadata = { "name" : "e4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e4(self) -> float:
        """E4 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_e4_metadata)

    _set_e4_metadata = { "name" : "e4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e4.setter
    def e4(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_e4_metadata, inVal)

    _get_e5_metadata = { "name" : "e5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e5(self) -> float:
        """E5 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_e5_metadata)

    _set_e5_metadata = { "name" : "e5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e5.setter
    def e5(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_e5_metadata, inVal)

    _get_e6_metadata = { "name" : "e6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e6(self) -> float:
        """E6 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_e6_metadata)

    _set_e6_metadata = { "name" : "e6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e6.setter
    def e6(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_e6_metadata, inVal)

    _get_e7_metadata = { "name" : "e7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e7(self) -> float:
        """E7 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_e7_metadata)

    _set_e7_metadata = { "name" : "e7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e7.setter
    def e7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_e7_metadata, inVal)

    _get_b7_metadata = { "name" : "b7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b7(self) -> float:
        """B7 base. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_b7_metadata)

    _set_b7_metadata = { "name" : "b7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b7.setter
    def b7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_b7_metadata, inVal)

    _get_k0_metadata = { "name" : "k0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k0(self) -> float:
        """K0 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_k0_metadata)

    _set_k0_metadata = { "name" : "k0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k0.setter
    def k0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_k0_metadata, inVal)

    _get_k1_metadata = { "name" : "k1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k1(self) -> float:
        """K1 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_k1_metadata)

    _set_k1_metadata = { "name" : "k1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k1.setter
    def k1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_k1_metadata, inVal)

    _get_reference_temp_metadata = { "name" : "reference_temp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def reference_temp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        return self._intf.get_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._get_reference_temp_metadata)

    _set_reference_temp_metadata = { "name" : "reference_temp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @reference_temp.setter
    def reference_temp(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelThrustCoefficients._metadata, IEngineModelThrustCoefficients._set_reference_temp_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}", IEngineModelThrustCoefficients)
agcls.AgTypeNameMap["IEngineModelThrustCoefficients"] = IEngineModelThrustCoefficients

class IEngineModelIspCoefficients(object):
    """Isp coefficient properties for engine definition."""
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_c0" : 1,
                             "set_c0" : 2,
                             "get_c1" : 3,
                             "set_c1" : 4,
                             "get_c2" : 5,
                             "set_c2" : 6,
                             "get_c3" : 7,
                             "set_c3" : 8,
                             "get_c4" : 9,
                             "set_c4" : 10,
                             "get_c5" : 11,
                             "set_c5" : 12,
                             "get_c6" : 13,
                             "set_c6" : 14,
                             "get_c7" : 15,
                             "set_c7" : 16,
                             "get_e4" : 17,
                             "set_e4" : 18,
                             "get_e5" : 19,
                             "set_e5" : 20,
                             "get_e6" : 21,
                             "set_e6" : 22,
                             "get_e7" : 23,
                             "set_e7" : 24,
                             "get_b7" : 25,
                             "set_b7" : 26,
                             "get_k0" : 27,
                             "set_k0" : 28,
                             "get_k1" : 29,
                             "set_k1" : 30,
                             "get_reference_temp" : 31,
                             "set_reference_temp" : 32, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineModelIspCoefficients)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineModelIspCoefficients)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineModelIspCoefficients, None)
    
    _get_c0_metadata = { "name" : "c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c0(self) -> float:
        """C0 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c0_metadata)

    _set_c0_metadata = { "name" : "c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c0.setter
    def c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c0_metadata, inVal)

    _get_c1_metadata = { "name" : "c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c1(self) -> float:
        """C1 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c1_metadata)

    _set_c1_metadata = { "name" : "c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c1.setter
    def c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c1_metadata, inVal)

    _get_c2_metadata = { "name" : "c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c2(self) -> float:
        """C2 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c2_metadata)

    _set_c2_metadata = { "name" : "c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c2.setter
    def c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c2_metadata, inVal)

    _get_c3_metadata = { "name" : "c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c3(self) -> float:
        """C3 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c3_metadata)

    _set_c3_metadata = { "name" : "c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c3.setter
    def c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c3_metadata, inVal)

    _get_c4_metadata = { "name" : "c4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c4(self) -> float:
        """C4 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c4_metadata)

    _set_c4_metadata = { "name" : "c4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c4.setter
    def c4(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c4_metadata, inVal)

    _get_c5_metadata = { "name" : "c5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c5(self) -> float:
        """C5 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c5_metadata)

    _set_c5_metadata = { "name" : "c5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c5.setter
    def c5(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c5_metadata, inVal)

    _get_c6_metadata = { "name" : "c6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c6(self) -> float:
        """C6 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c6_metadata)

    _set_c6_metadata = { "name" : "c6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c6.setter
    def c6(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c6_metadata, inVal)

    _get_c7_metadata = { "name" : "c7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def c7(self) -> float:
        """C7 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_c7_metadata)

    _set_c7_metadata = { "name" : "c7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @c7.setter
    def c7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_c7_metadata, inVal)

    _get_e4_metadata = { "name" : "e4",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e4(self) -> float:
        """E4 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_e4_metadata)

    _set_e4_metadata = { "name" : "e4",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e4.setter
    def e4(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_e4_metadata, inVal)

    _get_e5_metadata = { "name" : "e5",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e5(self) -> float:
        """E5 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_e5_metadata)

    _set_e5_metadata = { "name" : "e5",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e5.setter
    def e5(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_e5_metadata, inVal)

    _get_e6_metadata = { "name" : "e6",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e6(self) -> float:
        """E6 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_e6_metadata)

    _set_e6_metadata = { "name" : "e6",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e6.setter
    def e6(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_e6_metadata, inVal)

    _get_e7_metadata = { "name" : "e7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def e7(self) -> float:
        """E7 exponent. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_e7_metadata)

    _set_e7_metadata = { "name" : "e7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @e7.setter
    def e7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_e7_metadata, inVal)

    _get_b7_metadata = { "name" : "b7",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def b7(self) -> float:
        """B7 base. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_b7_metadata)

    _set_b7_metadata = { "name" : "b7",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @b7.setter
    def b7(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_b7_metadata, inVal)

    _get_k0_metadata = { "name" : "k0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k0(self) -> float:
        """K0 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_k0_metadata)

    _set_k0_metadata = { "name" : "k0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k0.setter
    def k0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_k0_metadata, inVal)

    _get_k1_metadata = { "name" : "k1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def k1(self) -> float:
        """K1 coefficient. Dimensionless."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_k1_metadata)

    _set_k1_metadata = { "name" : "k1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @k1.setter
    def k1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_k1_metadata, inVal)

    _get_reference_temp_metadata = { "name" : "reference_temp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def reference_temp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        return self._intf.get_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._get_reference_temp_metadata)

    _set_reference_temp_metadata = { "name" : "reference_temp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @reference_temp.setter
    def reference_temp(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelIspCoefficients._metadata, IEngineModelIspCoefficients._set_reference_temp_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}", IEngineModelIspCoefficients)
agcls.AgTypeNameMap["IEngineModelIspCoefficients"] = IEngineModelIspCoefficients

class IEngineConstAcc(object):
    """Properties for a Constant Acceleration and Isp engine model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_acceleration" : 3,
                             "set_acceleration" : 4,
                             "get_isp" : 5,
                             "set_isp" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineConstAcc)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineConstAcc)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineConstAcc, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineConstAcc._metadata, IEngineConstAcc._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstAcc._metadata, IEngineConstAcc._set_g_metadata, inVal)

    _get_acceleration_metadata = { "name" : "acceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def acceleration(self) -> float:
        """The acceleration for this engine. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineConstAcc._metadata, IEngineConstAcc._get_acceleration_metadata)

    _set_acceleration_metadata = { "name" : "acceleration",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @acceleration.setter
    def acceleration(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstAcc._metadata, IEngineConstAcc._set_acceleration_metadata, inVal)

    _get_isp_metadata = { "name" : "isp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        return self._intf.get_property(IEngineConstAcc._metadata, IEngineConstAcc._get_isp_metadata)

    _set_isp_metadata = { "name" : "isp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp.setter
    def isp(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstAcc._metadata, IEngineConstAcc._set_isp_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONST_ACC),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_CONST_ACC") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineConstAcc._metadata, IEngineConstAcc._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONST_ACC),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_CONST_ACC") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineConstAcc._metadata, IEngineConstAcc._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONST_ACC), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_CONST_ACC") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineConstAcc._metadata, IEngineConstAcc._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineConstAcc._metadata, IEngineConstAcc._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}", IEngineConstAcc)
agcls.AgTypeNameMap["IEngineConstAcc"] = IEngineConstAcc

class IEngineConstant(object):
    """Properties for a Constant Thrust and Isp engine model."""
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_thrust" : 3,
                             "set_thrust" : 4,
                             "get_isp" : 5,
                             "set_isp" : 6,
                             "enable_control_parameter" : 7,
                             "disable_control_parameter" : 8,
                             "is_control_parameter_enabled" : 9,
                             "get_control_parameters_available" : 10, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineConstant)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineConstant)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineConstant, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineConstant._metadata, IEngineConstant._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstant._metadata, IEngineConstant._set_g_metadata, inVal)

    _get_thrust_metadata = { "name" : "thrust",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def thrust(self) -> float:
        """The thrust for this engine. Uses Force Dimension."""
        return self._intf.get_property(IEngineConstant._metadata, IEngineConstant._get_thrust_metadata)

    _set_thrust_metadata = { "name" : "thrust",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @thrust.setter
    def thrust(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstant._metadata, IEngineConstant._set_thrust_metadata, inVal)

    _get_isp_metadata = { "name" : "isp",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        return self._intf.get_property(IEngineConstant._metadata, IEngineConstant._get_isp_metadata)

    _set_isp_metadata = { "name" : "isp",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp.setter
    def isp(self, inVal:float) -> None:
        return self._intf.set_property(IEngineConstant._metadata, IEngineConstant._set_isp_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONSTANT),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_CONSTANT") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineConstant._metadata, IEngineConstant._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONSTANT),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_CONSTANT") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineConstant._metadata, IEngineConstant._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CONSTANT), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_CONSTANT") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineConstant._metadata, IEngineConstant._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineConstant._metadata, IEngineConstant._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}", IEngineConstant)
agcls.AgTypeNameMap["IEngineConstant"] = IEngineConstant

class IEngineDefinition(object):
    """Properties for engine definition for an Ion engine model."""
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74BF5209-9E9B-45E3-8AE0-E68971558447}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_isp_c0" : 1,
                             "set_isp_c0" : 2,
                             "get_isp_c1" : 3,
                             "set_isp_c1" : 4,
                             "get_isp_c2" : 5,
                             "set_isp_c2" : 6,
                             "get_isp_c3" : 7,
                             "set_isp_c3" : 8,
                             "get_mass_flow_rate_equation_type" : 9,
                             "set_mass_flow_rate_equation_type" : 10,
                             "get_mass_flow_rate_c0" : 11,
                             "set_mass_flow_rate_c0" : 12,
                             "get_mass_flow_rate_c1" : 13,
                             "set_mass_flow_rate_c1" : 14,
                             "get_mass_flow_rate_c2" : 15,
                             "set_mass_flow_rate_c2" : 16,
                             "get_mass_flow_rate_c3" : 17,
                             "set_mass_flow_rate_c3" : 18,
                             "get_mass_flow_rate_equation" : 19,
                             "get_mass_flow_efficiency_c0" : 20,
                             "set_mass_flow_efficiency_c0" : 21,
                             "get_mass_flow_efficiency_c1" : 22,
                             "set_mass_flow_efficiency_c1" : 23,
                             "get_mass_flow_efficiency_c2" : 24,
                             "set_mass_flow_efficiency_c2" : 25,
                             "get_mass_flow_efficiency_c3" : 26,
                             "set_mass_flow_efficiency_c3" : 27,
                             "get_mass_flow_efficiency_independent_var" : 28,
                             "set_mass_flow_efficiency_independent_var" : 29,
                             "get_mass_flow_efficiency_equation" : 30,
                             "get_power_efficiency_c0" : 31,
                             "set_power_efficiency_c0" : 32,
                             "get_power_efficiency_c1" : 33,
                             "set_power_efficiency_c1" : 34,
                             "get_power_efficiency_c2" : 35,
                             "set_power_efficiency_c2" : 36,
                             "get_power_efficiency_c3" : 37,
                             "set_power_efficiency_c3" : 38,
                             "get_power_efficiency_independent_var" : 39,
                             "set_power_efficiency_independent_var" : 40,
                             "get_power_efficiency_equation" : 41,
                             "get_input_power_source_name" : 42, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineDefinition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineDefinition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineDefinition, None)
    
    _get_isp_c0_metadata = { "name" : "isp_c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp_c0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_isp_c0_metadata)

    _set_isp_c0_metadata = { "name" : "isp_c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp_c0.setter
    def isp_c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_isp_c0_metadata, inVal)

    _get_isp_c1_metadata = { "name" : "isp_c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp_c1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_isp_c1_metadata)

    _set_isp_c1_metadata = { "name" : "isp_c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp_c1.setter
    def isp_c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_isp_c1_metadata, inVal)

    _get_isp_c2_metadata = { "name" : "isp_c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp_c2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_isp_c2_metadata)

    _set_isp_c2_metadata = { "name" : "isp_c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp_c2.setter
    def isp_c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_isp_c2_metadata, inVal)

    _get_isp_c3_metadata = { "name" : "isp_c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def isp_c3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_isp_c3_metadata)

    _set_isp_c3_metadata = { "name" : "isp_c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @isp_c3.setter
    def isp_c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_isp_c3_metadata, inVal)

    _get_mass_flow_rate_equation_type_metadata = { "name" : "mass_flow_rate_equation_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @property
    def mass_flow_rate_equation_type(self) -> "ENGINE_MODEL_FUNCTION":
        """The independent variable for the mass flow rate equation."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_equation_type_metadata)

    _set_mass_flow_rate_equation_type_metadata = { "name" : "mass_flow_rate_equation_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @mass_flow_rate_equation_type.setter
    def mass_flow_rate_equation_type(self, inVal:"ENGINE_MODEL_FUNCTION") -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_rate_equation_type_metadata, inVal)

    _get_mass_flow_rate_c0_metadata = { "name" : "mass_flow_rate_c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_rate_c0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_c0_metadata)

    _set_mass_flow_rate_c0_metadata = { "name" : "mass_flow_rate_c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_rate_c0.setter
    def mass_flow_rate_c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_rate_c0_metadata, inVal)

    _get_mass_flow_rate_c1_metadata = { "name" : "mass_flow_rate_c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_rate_c1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_c1_metadata)

    _set_mass_flow_rate_c1_metadata = { "name" : "mass_flow_rate_c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_rate_c1.setter
    def mass_flow_rate_c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_rate_c1_metadata, inVal)

    _get_mass_flow_rate_c2_metadata = { "name" : "mass_flow_rate_c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_rate_c2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_c2_metadata)

    _set_mass_flow_rate_c2_metadata = { "name" : "mass_flow_rate_c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_rate_c2.setter
    def mass_flow_rate_c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_rate_c2_metadata, inVal)

    _get_mass_flow_rate_c3_metadata = { "name" : "mass_flow_rate_c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_rate_c3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_c3_metadata)

    _set_mass_flow_rate_c3_metadata = { "name" : "mass_flow_rate_c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_rate_c3.setter
    def mass_flow_rate_c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_rate_c3_metadata, inVal)

    _get_mass_flow_rate_equation_metadata = { "name" : "mass_flow_rate_equation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def mass_flow_rate_equation(self) -> str:
        """The equation for mass flow rate."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_rate_equation_metadata)

    _get_mass_flow_efficiency_c0_metadata = { "name" : "mass_flow_efficiency_c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_efficiency_c0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_c0_metadata)

    _set_mass_flow_efficiency_c0_metadata = { "name" : "mass_flow_efficiency_c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_efficiency_c0.setter
    def mass_flow_efficiency_c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_efficiency_c0_metadata, inVal)

    _get_mass_flow_efficiency_c1_metadata = { "name" : "mass_flow_efficiency_c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_efficiency_c1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_c1_metadata)

    _set_mass_flow_efficiency_c1_metadata = { "name" : "mass_flow_efficiency_c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_efficiency_c1.setter
    def mass_flow_efficiency_c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_efficiency_c1_metadata, inVal)

    _get_mass_flow_efficiency_c2_metadata = { "name" : "mass_flow_efficiency_c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_efficiency_c2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_c2_metadata)

    _set_mass_flow_efficiency_c2_metadata = { "name" : "mass_flow_efficiency_c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_efficiency_c2.setter
    def mass_flow_efficiency_c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_efficiency_c2_metadata, inVal)

    _get_mass_flow_efficiency_c3_metadata = { "name" : "mass_flow_efficiency_c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_flow_efficiency_c3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_c3_metadata)

    _set_mass_flow_efficiency_c3_metadata = { "name" : "mass_flow_efficiency_c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @mass_flow_efficiency_c3.setter
    def mass_flow_efficiency_c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_efficiency_c3_metadata, inVal)

    _get_mass_flow_efficiency_independent_var_metadata = { "name" : "mass_flow_efficiency_independent_var",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @property
    def mass_flow_efficiency_independent_var(self) -> "ENGINE_MODEL_FUNCTION":
        """The independent variable for the mass flow efficiency equation."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_independent_var_metadata)

    _set_mass_flow_efficiency_independent_var_metadata = { "name" : "mass_flow_efficiency_independent_var",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @mass_flow_efficiency_independent_var.setter
    def mass_flow_efficiency_independent_var(self, inVal:"ENGINE_MODEL_FUNCTION") -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_mass_flow_efficiency_independent_var_metadata, inVal)

    _get_mass_flow_efficiency_equation_metadata = { "name" : "mass_flow_efficiency_equation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def mass_flow_efficiency_equation(self) -> str:
        """The equation for mass flow efficiency."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_mass_flow_efficiency_equation_metadata)

    _get_power_efficiency_c0_metadata = { "name" : "power_efficiency_c0",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def power_efficiency_c0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_c0_metadata)

    _set_power_efficiency_c0_metadata = { "name" : "power_efficiency_c0",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @power_efficiency_c0.setter
    def power_efficiency_c0(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_power_efficiency_c0_metadata, inVal)

    _get_power_efficiency_c1_metadata = { "name" : "power_efficiency_c1",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def power_efficiency_c1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_c1_metadata)

    _set_power_efficiency_c1_metadata = { "name" : "power_efficiency_c1",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @power_efficiency_c1.setter
    def power_efficiency_c1(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_power_efficiency_c1_metadata, inVal)

    _get_power_efficiency_c2_metadata = { "name" : "power_efficiency_c2",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def power_efficiency_c2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_c2_metadata)

    _set_power_efficiency_c2_metadata = { "name" : "power_efficiency_c2",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @power_efficiency_c2.setter
    def power_efficiency_c2(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_power_efficiency_c2_metadata, inVal)

    _get_power_efficiency_c3_metadata = { "name" : "power_efficiency_c3",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def power_efficiency_c3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_c3_metadata)

    _set_power_efficiency_c3_metadata = { "name" : "power_efficiency_c3",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @power_efficiency_c3.setter
    def power_efficiency_c3(self, inVal:float) -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_power_efficiency_c3_metadata, inVal)

    _get_power_efficiency_independent_var_metadata = { "name" : "power_efficiency_independent_var",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @property
    def power_efficiency_independent_var(self) -> "ENGINE_MODEL_FUNCTION":
        """The independent variable for the power efficiency equation."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_independent_var_metadata)

    _set_power_efficiency_independent_var_metadata = { "name" : "power_efficiency_independent_var",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ENGINE_MODEL_FUNCTION),) }
    @power_efficiency_independent_var.setter
    def power_efficiency_independent_var(self, inVal:"ENGINE_MODEL_FUNCTION") -> None:
        return self._intf.set_property(IEngineDefinition._metadata, IEngineDefinition._set_power_efficiency_independent_var_metadata, inVal)

    _get_power_efficiency_equation_metadata = { "name" : "power_efficiency_equation",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def power_efficiency_equation(self) -> str:
        """The equation for power efficiency."""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_power_efficiency_equation_metadata)

    _get_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def input_power_source_name(self) -> str:
        """Object that computes the power input to the engine"""
        return self._intf.get_property(IEngineDefinition._metadata, IEngineDefinition._get_input_power_source_name_metadata)


agcls.AgClassCatalog.add_catalog_entry("{74BF5209-9E9B-45E3-8AE0-E68971558447}", IEngineDefinition)
agcls.AgTypeNameMap["IEngineDefinition"] = IEngineDefinition

class IEngineThrottleTable(object):
    """Properties for engine parameters for a Throttle Table engine model"""
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{74EFDF26-3F92-4664-8CA1-47E86FCAB002}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_throttle_table_filename" : 1,
                             "set_throttle_table_filename" : 2,
                             "get_operation_mode_definition" : 3,
                             "set_operation_mode_definition" : 4,
                             "get_regression_polynomial_degree" : 5,
                             "set_regression_polynomial_degree" : 6,
                             "get_g" : 7,
                             "set_g" : 8,
                             "get_input_power_source_name" : 9,
                             "set_input_power_source_name" : 10,
                             "get_percent_degradation_per_year" : 11,
                             "set_percent_degradation_per_year" : 12,
                             "get_reference_epoch" : 13,
                             "set_reference_epoch" : 14,
                             "enable_control_parameter" : 15,
                             "disable_control_parameter" : 16,
                             "is_control_parameter_enabled" : 17,
                             "get_control_parameters_available" : 18, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineThrottleTable)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineThrottleTable)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineThrottleTable, None)
    
    _get_throttle_table_filename_metadata = { "name" : "throttle_table_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def throttle_table_filename(self) -> str:
        """A file containing the engine performance data in the tabular format."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_throttle_table_filename_metadata)

    _set_throttle_table_filename_metadata = { "name" : "throttle_table_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @throttle_table_filename.setter
    def throttle_table_filename(self, inVal:str) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_throttle_table_filename_metadata, inVal)

    _get_operation_mode_definition_metadata = { "name" : "operation_mode_definition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(THROTTLE_TABLE_OPERATION_MODE),) }
    @property
    def operation_mode_definition(self) -> "THROTTLE_TABLE_OPERATION_MODE":
        """The engine operation mode definition."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_operation_mode_definition_metadata)

    _set_operation_mode_definition_metadata = { "name" : "operation_mode_definition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(THROTTLE_TABLE_OPERATION_MODE),) }
    @operation_mode_definition.setter
    def operation_mode_definition(self, inVal:"THROTTLE_TABLE_OPERATION_MODE") -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_operation_mode_definition_metadata, inVal)

    _get_regression_polynomial_degree_metadata = { "name" : "regression_polynomial_degree",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def regression_polynomial_degree(self) -> int:
        """The degree of the regression polynomial. Dimensionless."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_regression_polynomial_degree_metadata)

    _set_regression_polynomial_degree_metadata = { "name" : "regression_polynomial_degree",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @regression_polynomial_degree.setter
    def regression_polynomial_degree(self, inVal:int) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_regression_polynomial_degree_metadata, inVal)

    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_g_metadata, inVal)

    _get_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def input_power_source_name(self) -> str:
        """The object that computes the power input to the engine."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_input_power_source_name_metadata)

    _set_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @input_power_source_name.setter
    def input_power_source_name(self, powerSource:str) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_input_power_source_name_metadata, powerSource)

    _get_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def percent_degradation_per_year(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_percent_degradation_per_year_metadata)

    _set_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @percent_degradation_per_year.setter
    def percent_degradation_per_year(self, inVal:float) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_percent_degradation_per_year_metadata, inVal)

    _get_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def reference_epoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_reference_epoch_metadata)

    _set_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @reference_epoch.setter
    def reference_epoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IEngineThrottleTable._metadata, IEngineThrottleTable._set_reference_epoch_metadata, inVal)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_THROTTLE_TABLE),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_THROTTLE_TABLE") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineThrottleTable._metadata, IEngineThrottleTable._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_THROTTLE_TABLE),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_THROTTLE_TABLE") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineThrottleTable._metadata, IEngineThrottleTable._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_THROTTLE_TABLE), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_THROTTLE_TABLE") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineThrottleTable._metadata, IEngineThrottleTable._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineThrottleTable._metadata, IEngineThrottleTable._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{74EFDF26-3F92-4664-8CA1-47E86FCAB002}", IEngineThrottleTable)
agcls.AgTypeNameMap["IEngineThrottleTable"] = IEngineThrottleTable

class IEngineIon(object):
    """Properties for engine parameters for an Ion engine model"""
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{1A331BF6-2901-41F4-8A68-23DD4628A68D}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_input_power_source_name" : 3,
                             "set_input_power_source_name" : 4,
                             "get_min_required_power" : 5,
                             "set_min_required_power" : 6,
                             "get_max_input_power" : 7,
                             "set_max_input_power" : 8,
                             "get_percent_degradation_per_year" : 9,
                             "set_percent_degradation_per_year" : 10,
                             "get_reference_epoch" : 11,
                             "set_reference_epoch" : 12,
                             "get_percent_throttle" : 13,
                             "set_percent_throttle" : 14,
                             "get_engine_definition" : 15,
                             "enable_control_parameter" : 16,
                             "disable_control_parameter" : 17,
                             "is_control_parameter_enabled" : 18,
                             "get_control_parameters_available" : 19, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineIon)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineIon)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineIon, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_g_metadata, inVal)

    _get_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def input_power_source_name(self) -> str:
        """The object that computes the power input to the engine."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_input_power_source_name_metadata)

    _set_input_power_source_name_metadata = { "name" : "input_power_source_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @input_power_source_name.setter
    def input_power_source_name(self, powerSource:str) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_input_power_source_name_metadata, powerSource)

    _get_min_required_power_metadata = { "name" : "min_required_power",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_required_power(self) -> float:
        """The minimum power required for engine to produce thrust. Uses Power Dimension."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_min_required_power_metadata)

    _set_min_required_power_metadata = { "name" : "min_required_power",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_required_power.setter
    def min_required_power(self, inVal:float) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_min_required_power_metadata, inVal)

    _get_max_input_power_metadata = { "name" : "max_input_power",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_input_power(self) -> float:
        """The maximum power that can be used by engine to produce thrust. Uses Power Dimension."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_max_input_power_metadata)

    _set_max_input_power_metadata = { "name" : "max_input_power",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_input_power.setter
    def max_input_power(self, inVal:float) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_max_input_power_metadata, inVal)

    _get_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def percent_degradation_per_year(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_percent_degradation_per_year_metadata)

    _set_percent_degradation_per_year_metadata = { "name" : "percent_degradation_per_year",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @percent_degradation_per_year.setter
    def percent_degradation_per_year(self, inVal:float) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_percent_degradation_per_year_metadata, inVal)

    _get_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def reference_epoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_reference_epoch_metadata)

    _set_reference_epoch_metadata = { "name" : "reference_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @reference_epoch.setter
    def reference_epoch(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_reference_epoch_metadata, inVal)

    _get_percent_throttle_metadata = { "name" : "percent_throttle",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def percent_throttle(self) -> float:
        """The percentage of available thrust to use (100 is full on, 0 is off). Dimensionless."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_percent_throttle_metadata)

    _set_percent_throttle_metadata = { "name" : "percent_throttle",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @percent_throttle.setter
    def percent_throttle(self, inVal:float) -> None:
        return self._intf.set_property(IEngineIon._metadata, IEngineIon._set_percent_throttle_metadata, inVal)

    _get_engine_definition_metadata = { "name" : "engine_definition",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def engine_definition(self) -> "EngineDefinition":
        """The engine definition."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_engine_definition_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_ION),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_ION") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineIon._metadata, IEngineIon._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_ION),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_ION") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineIon._metadata, IEngineIon._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_ION), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_ION") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineIon._metadata, IEngineIon._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineIon._metadata, IEngineIon._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{1A331BF6-2901-41F4-8A68-23DD4628A68D}", IEngineIon)
agcls.AgTypeNameMap["IEngineIon"] = IEngineIon

class IEngineCustom(object):
    """Properties for a Custom engine model."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_eval_function_name" : 3,
                             "set_eval_function_name" : 4,
                             "get_post_function_name" : 5,
                             "set_post_function_name" : 6,
                             "get_pre_function_name" : 7,
                             "set_pre_function_name" : 8,
                             "get_seg_start_function_name" : 9,
                             "set_seg_start_function_name" : 10,
                             "get_update_function_name" : 11,
                             "set_update_function_name" : 12,
                             "enable_control_parameter" : 13,
                             "disable_control_parameter" : 14,
                             "is_control_parameter_enabled" : 15,
                             "get_control_parameters_available" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineCustom)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineCustom)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineCustom, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The earth surface gravity acceleration for Isp conversions. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_g_metadata, inVal)

    _get_eval_function_name_metadata = { "name" : "eval_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def eval_function_name(self) -> str:
        """The EvalFunction - custom function to call at every thrust evaluation."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_eval_function_name_metadata)

    _set_eval_function_name_metadata = { "name" : "eval_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @eval_function_name.setter
    def eval_function_name(self, evalFunction:str) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_eval_function_name_metadata, evalFunction)

    _get_post_function_name_metadata = { "name" : "post_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def post_function_name(self) -> str:
        """The PostFunction - custom function to call after all propagation ends."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_post_function_name_metadata)

    _set_post_function_name_metadata = { "name" : "post_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @post_function_name.setter
    def post_function_name(self, postFunction:str) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_post_function_name_metadata, postFunction)

    _get_pre_function_name_metadata = { "name" : "pre_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def pre_function_name(self) -> str:
        """The PreFunction - custom function to call before any propagation begins."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_pre_function_name_metadata)

    _set_pre_function_name_metadata = { "name" : "pre_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @pre_function_name.setter
    def pre_function_name(self, preFunction:str) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_pre_function_name_metadata, preFunction)

    _get_seg_start_function_name_metadata = { "name" : "seg_start_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def seg_start_function_name(self) -> str:
        """The SegStartFunction - custom function to call at the beginning of each segment."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_seg_start_function_name_metadata)

    _set_seg_start_function_name_metadata = { "name" : "seg_start_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @seg_start_function_name.setter
    def seg_start_function_name(self, segStartFunction:str) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_seg_start_function_name_metadata, segStartFunction)

    _get_update_function_name_metadata = { "name" : "update_function_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def update_function_name(self) -> str:
        """The UpdateFunction - custom function to call at the beginning of each integration step."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_update_function_name_metadata)

    _set_update_function_name_metadata = { "name" : "update_function_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @update_function_name.setter
    def update_function_name(self, updateFunction:str) -> None:
        return self._intf.set_property(IEngineCustom._metadata, IEngineCustom._set_update_function_name_metadata, updateFunction)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CUSTOM),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_CUSTOM") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineCustom._metadata, IEngineCustom._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CUSTOM),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_CUSTOM") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineCustom._metadata, IEngineCustom._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_CUSTOM), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_CUSTOM") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineCustom._metadata, IEngineCustom._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineCustom._metadata, IEngineCustom._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}", IEngineCustom)
agcls.AgTypeNameMap["IEngineCustom"] = IEngineCustom

class IEnginePlugin(object):
    """Properties for a Plugin engine model."""
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{68ED720F-ABB6-4891-A1B9-973719400161}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_plugin_identifier" : 3,
                             "set_plugin_identifier" : 4,
                             "get_plugin_config" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEnginePlugin)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEnginePlugin)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEnginePlugin, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEnginePlugin._metadata, IEnginePlugin._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEnginePlugin._metadata, IEnginePlugin._set_g_metadata, inVal)

    _get_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def plugin_identifier(self) -> str:
        """The PluginIdentifier - the ProgID of the COM component you are using for this model."""
        return self._intf.get_property(IEnginePlugin._metadata, IEnginePlugin._get_plugin_identifier_metadata)

    _set_plugin_identifier_metadata = { "name" : "plugin_identifier",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @plugin_identifier.setter
    def plugin_identifier(self, inVal:str) -> None:
        return self._intf.set_property(IEnginePlugin._metadata, IEnginePlugin._set_plugin_identifier_metadata, inVal)

    _get_plugin_config_metadata = { "name" : "plugin_config",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def plugin_config(self) -> "PluginProperties":
        """The properties of the plugin."""
        return self._intf.get_property(IEnginePlugin._metadata, IEnginePlugin._get_plugin_config_metadata)


agcls.AgClassCatalog.add_catalog_entry("{68ED720F-ABB6-4891-A1B9-973719400161}", IEnginePlugin)
agcls.AgTypeNameMap["IEnginePlugin"] = IEnginePlugin

class IEngineModelPoly(object):
    """Properties for a Polynomial Thrust and Isp engine model."""
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{4AC9E570-FB42-4636-B6DA-F9FEF353165B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_g" : 1,
                             "set_g" : 2,
                             "get_thrust_coefficients" : 3,
                             "get_isp_coefficients" : 4,
                             "enable_control_parameter" : 5,
                             "disable_control_parameter" : 6,
                             "is_control_parameter_enabled" : 7,
                             "get_control_parameters_available" : 8, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IEngineModelPoly)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IEngineModelPoly)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IEngineModelPoly, None)
    
    _get_g_metadata = { "name" : "g",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        return self._intf.get_property(IEngineModelPoly._metadata, IEngineModelPoly._get_g_metadata)

    _set_g_metadata = { "name" : "g",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @g.setter
    def g(self, inVal:float) -> None:
        return self._intf.set_property(IEngineModelPoly._metadata, IEngineModelPoly._set_g_metadata, inVal)

    _get_thrust_coefficients_metadata = { "name" : "thrust_coefficients",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def thrust_coefficients(self) -> "EngineModelThrustCoefficients":
        """The thrust Coefficients."""
        return self._intf.get_property(IEngineModelPoly._metadata, IEngineModelPoly._get_thrust_coefficients_metadata)

    _get_isp_coefficients_metadata = { "name" : "isp_coefficients",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def isp_coefficients(self) -> "EngineModelIspCoefficients":
        """The Isp Coefficients."""
        return self._intf.get_property(IEngineModelPoly._metadata, IEngineModelPoly._get_isp_coefficients_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_MODEL_POLY),) }
    def enable_control_parameter(self, param:"CONTROL_ENGINE_MODEL_POLY") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IEngineModelPoly._metadata, IEngineModelPoly._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_MODEL_POLY),) }
    def disable_control_parameter(self, param:"CONTROL_ENGINE_MODEL_POLY") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IEngineModelPoly._metadata, IEngineModelPoly._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_ENGINE_MODEL_POLY), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_ENGINE_MODEL_POLY") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IEngineModelPoly._metadata, IEngineModelPoly._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IEngineModelPoly._metadata, IEngineModelPoly._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{4AC9E570-FB42-4636-B6DA-F9FEF353165B}", IEngineModelPoly)
agcls.AgTypeNameMap["IEngineModelPoly"] = IEngineModelPoly

class IDesignCR3BPObjectCollection(object):
    """The list of associated CR3BP objects."""
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{554A8010-4514-4AD5-8FD8-F5FA1FC1D5FF}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "get_item_by_index" : 4,
                             "get_item_by_name" : 5, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDesignCR3BPObjectCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDesignCR3BPObjectCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDesignCR3BPObjectCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IDesignCR3BPObject":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "DesignCR3BPObject":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IDesignCR3BPObjectCollection._metadata, IDesignCR3BPObjectCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IDesignCR3BPObjectCollection._metadata, IDesignCR3BPObjectCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """The number of associated objects in the set."""
        return self._intf.get_property(IDesignCR3BPObjectCollection._metadata, IDesignCR3BPObjectCollection._get_count_metadata)

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "DesignCR3BPObject":
        """Retrieve an associated object from the collection by index."""
        return self._intf.invoke(IDesignCR3BPObjectCollection._metadata, IDesignCR3BPObjectCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "DesignCR3BPObject":
        """Retrieve an associated object from the collection by name."""
        return self._intf.invoke(IDesignCR3BPObjectCollection._metadata, IDesignCR3BPObjectCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{554A8010-4514-4AD5-8FD8-F5FA1FC1D5FF}", IDesignCR3BPObjectCollection)
agcls.AgTypeNameMap["IDesignCR3BPObjectCollection"] = IDesignCR3BPObjectCollection

class IDesignCR3BPSetup(object):
    """Properties for the CR3BP Setup Tool.."""
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{37C54765-E3FF-4910-9470-B1128666F5BB}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_secondary_body_name" : 3,
                             "set_secondary_body_name" : 4,
                             "get_initial_epoch" : 5,
                             "set_initial_epoch" : 6,
                             "get_ideal_orbit_radius" : 7,
                             "set_ideal_orbit_radius" : 8,
                             "get_ideal_secondary_name" : 9,
                             "set_ideal_secondary_name" : 10,
                             "get_mass_parameter" : 11,
                             "get_characteristic_distance" : 12,
                             "get_characteristic_time" : 13,
                             "get_characteristic_velocity" : 14,
                             "get_characteristic_acceleration" : 15,
                             "get_rotating_system_choice" : 16,
                             "set_rotating_system_choice" : 17,
                             "create_ideal_secondary_cb" : 18,
                             "reset_ideal_secondary_cb" : 19,
                             "update_ideal_secondary_cb" : 20,
                             "create_rotating_coordinate_system" : 21,
                             "delete_rotating_coordinate_system" : 22,
                             "create_calculation_objects" : 23,
                             "delete_calculation_objects" : 24,
                             "get_associated_objects" : 25, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDesignCR3BPSetup)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDesignCR3BPSetup)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDesignCR3BPSetup, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """Primary central body for the three-body system."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_central_body_name_metadata, inVal)

    _get_secondary_body_name_metadata = { "name" : "secondary_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def secondary_body_name(self) -> str:
        """Secondary Body"""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_secondary_body_name_metadata)

    _set_secondary_body_name_metadata = { "name" : "secondary_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @secondary_body_name.setter
    def secondary_body_name(self, inVal:str) -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_secondary_body_name_metadata, inVal)

    _get_initial_epoch_metadata = { "name" : "initial_epoch",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def initial_epoch(self) -> typing.Any:
        """Date and time for system construction."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_initial_epoch_metadata)

    _set_initial_epoch_metadata = { "name" : "initial_epoch",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @initial_epoch.setter
    def initial_epoch(self, newVal:typing.Any) -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_initial_epoch_metadata, newVal)

    _get_ideal_orbit_radius_metadata = { "name" : "ideal_orbit_radius",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(IDEAL_ORBIT_RADIUS),) }
    @property
    def ideal_orbit_radius(self) -> "IDEAL_ORBIT_RADIUS":
        """Orbital radius of the idealized secondary definition."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_ideal_orbit_radius_metadata)

    _set_ideal_orbit_radius_metadata = { "name" : "ideal_orbit_radius",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(IDEAL_ORBIT_RADIUS),) }
    @ideal_orbit_radius.setter
    def ideal_orbit_radius(self, inVal:"IDEAL_ORBIT_RADIUS") -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_ideal_orbit_radius_metadata, inVal)

    _get_ideal_secondary_name_metadata = { "name" : "ideal_secondary_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def ideal_secondary_name(self) -> str:
        """Name to be used for the idealized secondary."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_ideal_secondary_name_metadata)

    _set_ideal_secondary_name_metadata = { "name" : "ideal_secondary_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @ideal_secondary_name.setter
    def ideal_secondary_name(self, inVal:str) -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_ideal_secondary_name_metadata, inVal)

    _get_mass_parameter_metadata = { "name" : "mass_parameter",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def mass_parameter(self) -> float:
        """The mass parameter computed from the primary and secondary bodies."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_mass_parameter_metadata)

    _get_characteristic_distance_metadata = { "name" : "characteristic_distance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def characteristic_distance(self) -> float:
        """The characteristic distance computed from the primary and secondary bodies."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_characteristic_distance_metadata)

    _get_characteristic_time_metadata = { "name" : "characteristic_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def characteristic_time(self) -> float:
        """The characteristic time computed from the primary and secondary bodies."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_characteristic_time_metadata)

    _get_characteristic_velocity_metadata = { "name" : "characteristic_velocity",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def characteristic_velocity(self) -> float:
        """The characteristic velocity computed from the primary and secondary bodies."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_characteristic_velocity_metadata)

    _get_characteristic_acceleration_metadata = { "name" : "characteristic_acceleration",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def characteristic_acceleration(self) -> float:
        """The characteristic acceleration computed from the primary and secondary bodies."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_characteristic_acceleration_metadata)

    _get_rotating_system_choice_metadata = { "name" : "rotating_system_choice",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ROTATING_COORDINATE_SYSTEM),) }
    @property
    def rotating_system_choice(self) -> "ROTATING_COORDINATE_SYSTEM":
        """The rotating coordinate system and associated calculation objects to interact with."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_rotating_system_choice_metadata)

    _set_rotating_system_choice_metadata = { "name" : "rotating_system_choice",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ROTATING_COORDINATE_SYSTEM),) }
    @rotating_system_choice.setter
    def rotating_system_choice(self, inVal:"ROTATING_COORDINATE_SYSTEM") -> None:
        return self._intf.set_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._set_rotating_system_choice_metadata, inVal)

    _create_ideal_secondary_cb_metadata = { "name" : "create_ideal_secondary_cb",
            "arg_types" : (),
            "marshallers" : () }
    def create_ideal_secondary_cb(self) -> None:
        """Construct the idealized secondary for the three-body system"""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._create_ideal_secondary_cb_metadata, )

    _reset_ideal_secondary_cb_metadata = { "name" : "reset_ideal_secondary_cb",
            "arg_types" : (),
            "marshallers" : () }
    def reset_ideal_secondary_cb(self) -> None:
        """Reset the idealized secondary for the three-body system."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._reset_ideal_secondary_cb_metadata, )

    _update_ideal_secondary_cb_metadata = { "name" : "update_ideal_secondary_cb",
            "arg_types" : (),
            "marshallers" : () }
    def update_ideal_secondary_cb(self) -> None:
        """Update the idealized secondary for the three-body system."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._update_ideal_secondary_cb_metadata, )

    _create_rotating_coordinate_system_metadata = { "name" : "create_rotating_coordinate_system",
            "arg_types" : (),
            "marshallers" : () }
    def create_rotating_coordinate_system(self) -> None:
        """Create the coordinate system for the RotatingSystemChoice selection."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._create_rotating_coordinate_system_metadata, )

    _delete_rotating_coordinate_system_metadata = { "name" : "delete_rotating_coordinate_system",
            "arg_types" : (),
            "marshallers" : () }
    def delete_rotating_coordinate_system(self) -> None:
        """Delete the coordinate system for the RotatingSystemChoice selection."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._delete_rotating_coordinate_system_metadata, )

    _create_calculation_objects_metadata = { "name" : "create_calculation_objects",
            "arg_types" : (),
            "marshallers" : () }
    def create_calculation_objects(self) -> None:
        """Create the calculation objects for the selected coordinate system."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._create_calculation_objects_metadata, )

    _delete_calculation_objects_metadata = { "name" : "delete_calculation_objects",
            "arg_types" : (),
            "marshallers" : () }
    def delete_calculation_objects(self) -> None:
        """Delete the calculation objects for the selected coordinate system."""
        return self._intf.invoke(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._delete_calculation_objects_metadata, )

    _get_associated_objects_metadata = { "name" : "associated_objects",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def associated_objects(self) -> "DesignCR3BPObjectCollection":
        """The list of associated objects."""
        return self._intf.get_property(IDesignCR3BPSetup._metadata, IDesignCR3BPSetup._get_associated_objects_metadata)


agcls.AgClassCatalog.add_catalog_entry("{37C54765-E3FF-4910-9470-B1128666F5BB}", IDesignCR3BPSetup)
agcls.AgTypeNameMap["IDesignCR3BPSetup"] = IDesignCR3BPSetup

class IDesignCR3BPObject(object):
    """Properties for individual associated CR3BP object."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{994615DE-EF79-4D9A-BC63-0911FAE26842}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_object_name" : 1,
                             "get_object_type" : 2,
                             "get_object_depends_on" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IDesignCR3BPObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IDesignCR3BPObject)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IDesignCR3BPObject, None)
    
    _get_object_name_metadata = { "name" : "object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def object_name(self) -> str:
        """The associated object name."""
        return self._intf.get_property(IDesignCR3BPObject._metadata, IDesignCR3BPObject._get_object_name_metadata)

    _get_object_type_metadata = { "name" : "object_type",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def object_type(self) -> str:
        """The associated object type."""
        return self._intf.get_property(IDesignCR3BPObject._metadata, IDesignCR3BPObject._get_object_type_metadata)

    _get_object_depends_on_metadata = { "name" : "object_depends_on",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def object_depends_on(self) -> str:
        """The associated object depends on."""
        return self._intf.get_property(IDesignCR3BPObject._metadata, IDesignCR3BPObject._get_object_depends_on_metadata)


agcls.AgClassCatalog.add_catalog_entry("{994615DE-EF79-4D9A-BC63-0911FAE26842}", IDesignCR3BPObject)
agcls.AgTypeNameMap["IDesignCR3BPObject"] = IDesignCR3BPObject

class IThruster(object):
    """Properties for individual thrusters."""
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{61A386B1-675B-4DB6-85B9-078760AB8339}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_name" : 1,
                             "set_name" : 2,
                             "get_user_comment" : 3,
                             "set_user_comment" : 4,
                             "copy" : 5,
                             "get_engine_model_name" : 6,
                             "set_engine_model_name" : 7,
                             "get_thruster_efficiency" : 8,
                             "set_thruster_efficiency" : 9,
                             "get_equivalent_on_time" : 10,
                             "set_equivalent_on_time" : 11,
                             "get_thruster_direction" : 12,
                             "enable_control_parameter" : 13,
                             "disable_control_parameter" : 14,
                             "is_control_parameter_enabled" : 15,
                             "get_control_parameters_available" : 16, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IThruster)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IThruster)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IThruster, None)
    
    _get_name_metadata = { "name" : "name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def name(self) -> str:
        """The thruster name."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_name_metadata)

    _set_name_metadata = { "name" : "name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @name.setter
    def name(self, inVal:str) -> None:
        return self._intf.set_property(IThruster._metadata, IThruster._set_name_metadata, inVal)

    _get_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def user_comment(self) -> str:
        """A user comment."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_user_comment_metadata)

    _set_user_comment_metadata = { "name" : "user_comment",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @user_comment.setter
    def user_comment(self, inVal:str) -> None:
        return self._intf.set_property(IThruster._metadata, IThruster._set_user_comment_metadata, inVal)

    _copy_metadata = { "name" : "copy",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def copy(self) -> "Thruster":
        """Make a copy of the specified thruster."""
        return self._intf.invoke(IThruster._metadata, IThruster._copy_metadata, out_arg())

    _get_engine_model_name_metadata = { "name" : "engine_model_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def engine_model_name(self) -> str:
        """The engine model."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_engine_model_name_metadata)

    _set_engine_model_name_metadata = { "name" : "engine_model_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @engine_model_name.setter
    def engine_model_name(self, inVal:str) -> None:
        return self._intf.set_property(IThruster._metadata, IThruster._set_engine_model_name_metadata, inVal)

    _get_thruster_efficiency_metadata = { "name" : "thruster_efficiency",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def thruster_efficiency(self) -> float:
        """The thruster efficiency. Dimensionless."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_thruster_efficiency_metadata)

    _set_thruster_efficiency_metadata = { "name" : "thruster_efficiency",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @thruster_efficiency.setter
    def thruster_efficiency(self, inVal:float) -> None:
        return self._intf.set_property(IThruster._metadata, IThruster._set_thruster_efficiency_metadata, inVal)

    _get_equivalent_on_time_metadata = { "name" : "equivalent_on_time",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def equivalent_on_time(self) -> float:
        """The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced. Dimensionless."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_equivalent_on_time_metadata)

    _set_equivalent_on_time_metadata = { "name" : "equivalent_on_time",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @equivalent_on_time.setter
    def equivalent_on_time(self, inVal:float) -> None:
        return self._intf.set_property(IThruster._metadata, IThruster._set_equivalent_on_time_metadata, inVal)

    _get_thruster_direction_metadata = { "name" : "thruster_direction",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def thruster_direction(self) -> "IDirection":
        """A thruster direction value."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_thruster_direction_metadata)

    _enable_control_parameter_metadata = { "name" : "enable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_THRUSTERS),) }
    def enable_control_parameter(self, param:"CONTROL_THRUSTERS") -> None:
        """Enable the specified control parameter."""
        return self._intf.invoke(IThruster._metadata, IThruster._enable_control_parameter_metadata, param)

    _disable_control_parameter_metadata = { "name" : "disable_control_parameter",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_THRUSTERS),) }
    def disable_control_parameter(self, param:"CONTROL_THRUSTERS") -> None:
        """Disables the specified control parameter."""
        return self._intf.invoke(IThruster._metadata, IThruster._disable_control_parameter_metadata, param)

    _is_control_parameter_enabled_metadata = { "name" : "is_control_parameter_enabled",
            "arg_types" : (agcom.LONG, POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.AgEnum_arg(CONTROL_THRUSTERS), agmarshall.VARIANT_BOOL_arg,) }
    def is_control_parameter_enabled(self, param:"CONTROL_THRUSTERS") -> bool:
        """Sees if the specified control is enabled."""
        return self._intf.invoke(IThruster._metadata, IThruster._is_control_parameter_enabled_metadata, param, out_arg())

    _get_control_parameters_available_metadata = { "name" : "control_parameters_available",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def control_parameters_available(self) -> bool:
        """Return whether or not the control parameters can be set."""
        return self._intf.get_property(IThruster._metadata, IThruster._get_control_parameters_available_metadata)


agcls.AgClassCatalog.add_catalog_entry("{61A386B1-675B-4DB6-85B9-078760AB8339}", IThruster)
agcls.AgTypeNameMap["IThruster"] = IThruster

class IThrusterSetCollection(object):
    """The list of thrusters in a thruster set."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "item" : 1,
                             "get__NewEnum" : 2,
                             "get_count" : 3,
                             "add" : 4,
                             "remove" : 5,
                             "remove_all" : 6,
                             "cut" : 7,
                             "paste" : 8,
                             "insert_copy" : 9,
                             "get_item_by_index" : 10,
                             "get_item_by_name" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IThrusterSetCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IThrusterSetCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IThrusterSetCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IThruster":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "Thruster":
        """A property that allows you to iterate through the collection."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._item_metadata, indexOrName, out_arg())

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """A property that allows you to enumerate through the collection."""
        return self._intf.get_property(IThrusterSetCollection._metadata, IThrusterSetCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """The number of thrusters in the set."""
        return self._intf.get_property(IThrusterSetCollection._metadata, IThrusterSetCollection._get_count_metadata)

    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, thrusterName:str) -> "Thruster":
        """Add a new thruster."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._add_metadata, thrusterName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove a specified thruster."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._remove_metadata, indexOrName)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all thrusters."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._remove_all_metadata, )

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy a thruster to the clipboard and removes the thruster from the list."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "Thruster":
        """Pastes a thruster from the clipboard into the list."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IThruster"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, thruster:"IThruster") -> "Thruster":
        """Copy a thruster and inserts the copy into the list."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._insert_copy_metadata, thruster, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "Thruster":
        """Retrieve a thruster from the collection by index."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "Thruster":
        """Retrieve a thruster from the collection by name."""
        return self._intf.invoke(IThrusterSetCollection._metadata, IThrusterSetCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}", IThrusterSetCollection)
agcls.AgTypeNameMap["IThrusterSetCollection"] = IThrusterSetCollection

class IThrusterSet(object):
    """The properties of a thruster set."""
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AA4BEFC3-C3E6-4888-B920-109F57621589}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_direction_definition" : 1,
                             "set_direction_definition" : 2,
                             "get_thrusters" : 3, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IThrusterSet)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IThrusterSet)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IThrusterSet, None)
    
    _get_direction_definition_metadata = { "name" : "direction_definition",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(THRUSTER_DIRECTION),) }
    @property
    def direction_definition(self) -> "THRUSTER_DIRECTION":
        """The thruster set direction definition."""
        return self._intf.get_property(IThrusterSet._metadata, IThrusterSet._get_direction_definition_metadata)

    _set_direction_definition_metadata = { "name" : "direction_definition",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(THRUSTER_DIRECTION),) }
    @direction_definition.setter
    def direction_definition(self, inVal:"THRUSTER_DIRECTION") -> None:
        return self._intf.set_property(IThrusterSet._metadata, IThrusterSet._set_direction_definition_metadata, inVal)

    _get_thrusters_metadata = { "name" : "thrusters",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def thrusters(self) -> "ThrusterSetCollection":
        """The list of thrusters."""
        return self._intf.get_property(IThrusterSet._metadata, IThrusterSet._get_thrusters_metadata)


agcls.AgClassCatalog.add_catalog_entry("{AA4BEFC3-C3E6-4888-B920-109F57621589}", IThrusterSet)
agcls.AgTypeNameMap["IThrusterSet"] = IThrusterSet

class IAsTriggerCondition(object):
    """Properties for a constraint - an additional condition to be met to satisfy a stopping condition."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5670AC34-2864-42ED-B32A-5572363C0CE7}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_criteria" : 1,
                             "set_criteria" : 2,
                             "get_calc_object" : 3,
                             "set_calc_object" : 4,
                             "get_calc_object_name" : 5,
                             "set_calc_object_name" : 6,
                             "get_value" : 7,
                             "set_value" : 8,
                             "get_tolerance" : 9,
                             "set_tolerance" : 10,
                             "get_use_absolute_value" : 11,
                             "set_use_absolute_value" : 12,
                             "copy_calc_object_to_clipboard" : 13,
                             "paste_calc_object_from_clipboard" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IAsTriggerCondition)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IAsTriggerCondition)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IAsTriggerCondition, None)
    
    _get_criteria_metadata = { "name" : "criteria",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(CRITERIA),) }
    @property
    def criteria(self) -> "CRITERIA":
        """The criteria to be applied to the desired value."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_criteria_metadata)

    _set_criteria_metadata = { "name" : "criteria",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(CRITERIA),) }
    @criteria.setter
    def criteria(self, inVal:"CRITERIA") -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_criteria_metadata, inVal)

    _get_calc_object_metadata = { "name" : "calc_object",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def calc_object(self) -> "IComponentInfo":
        """The calculation object to perform calculation to evaluate condition."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_calc_object_metadata)

    _set_calc_object_metadata = { "name" : "calc_object",
            "arg_types" : (agcom.PVOID,),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"),) }
    @calc_object.setter
    def calc_object(self, inVal:"IComponentInfo") -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_calc_object_metadata, inVal)

    _get_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def calc_object_name(self) -> str:
        """The name of the calculation object to perform calculation to evaluate condition."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_calc_object_name_metadata)

    _set_calc_object_name_metadata = { "name" : "calc_object_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @calc_object_name.setter
    def calc_object_name(self, inVal:str) -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_calc_object_name_metadata, inVal)

    _get_value_metadata = { "name" : "value",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def value(self) -> typing.Any:
        """The value to satisfy the condition. Dimension depends on CalcObject."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_value_metadata)

    _set_value_metadata = { "name" : "value",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @value.setter
    def value(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_value_metadata, inVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.VARIANT),),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @property
    def tolerance(self) -> typing.Any:
        """How closely the test parameter must approximate the desired value for the constraint. Dimension depends on CalcObject."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    @tolerance.setter
    def tolerance(self, inVal:typing.Any) -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_tolerance_metadata, inVal)

    _get_use_absolute_value_metadata = { "name" : "use_absolute_value",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_absolute_value(self) -> bool:
        """Whether or not to take the absolute value of the calculation."""
        return self._intf.get_property(IAsTriggerCondition._metadata, IAsTriggerCondition._get_use_absolute_value_metadata)

    _set_use_absolute_value_metadata = { "name" : "use_absolute_value",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_absolute_value.setter
    def use_absolute_value(self, inVal:bool) -> None:
        return self._intf.set_property(IAsTriggerCondition._metadata, IAsTriggerCondition._set_use_absolute_value_metadata, inVal)

    _copy_calc_object_to_clipboard_metadata = { "name" : "copy_calc_object_to_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def copy_calc_object_to_clipboard(self) -> None:
        """Copy calculation object to clipboard."""
        return self._intf.invoke(IAsTriggerCondition._metadata, IAsTriggerCondition._copy_calc_object_to_clipboard_metadata, )

    _paste_calc_object_from_clipboard_metadata = { "name" : "paste_calc_object_from_clipboard",
            "arg_types" : (),
            "marshallers" : () }
    def paste_calc_object_from_clipboard(self) -> None:
        """Replace calculation object with instance in clipboard."""
        return self._intf.invoke(IAsTriggerCondition._metadata, IAsTriggerCondition._paste_calc_object_from_clipboard_metadata, )


agcls.AgClassCatalog.add_catalog_entry("{5670AC34-2864-42ED-B32A-5572363C0CE7}", IAsTriggerCondition)
agcls.AgTypeNameMap["IAsTriggerCondition"] = IAsTriggerCondition

class ICustomFunctionScriptEngine(object):
    """Properties for custom functions."""
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{02AA62BC-AA81-400C-83A0-961729880708}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_script_filename" : 1,
                             "set_script_filename" : 2,
                             "get_file_extension_name" : 3,
                             "set_file_extension_name" : 4, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, ICustomFunctionScriptEngine)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, ICustomFunctionScriptEngine)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, ICustomFunctionScriptEngine, None)
    
    _get_script_filename_metadata = { "name" : "script_filename",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def script_filename(self) -> str:
        """The file containing the function to call."""
        return self._intf.get_property(ICustomFunctionScriptEngine._metadata, ICustomFunctionScriptEngine._get_script_filename_metadata)

    _set_script_filename_metadata = { "name" : "script_filename",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @script_filename.setter
    def script_filename(self, inVal:str) -> None:
        return self._intf.set_property(ICustomFunctionScriptEngine._metadata, ICustomFunctionScriptEngine._set_script_filename_metadata, inVal)

    _get_file_extension_name_metadata = { "name" : "file_extension_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def file_extension_name(self) -> str:
        """The file extension."""
        return self._intf.get_property(ICustomFunctionScriptEngine._metadata, ICustomFunctionScriptEngine._get_file_extension_name_metadata)

    _set_file_extension_name_metadata = { "name" : "file_extension_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @file_extension_name.setter
    def file_extension_name(self, inVal:str) -> None:
        return self._intf.set_property(ICustomFunctionScriptEngine._metadata, ICustomFunctionScriptEngine._set_file_extension_name_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{02AA62BC-AA81-400C-83A0-961729880708}", ICustomFunctionScriptEngine)
agcls.AgTypeNameMap["ICustomFunctionScriptEngine"] = ICustomFunctionScriptEngine

class INumericalIntegrator(object):
    """The type of numerical integrator to be used by the propagator."""
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : {  }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, INumericalIntegrator)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, INumericalIntegrator)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, INumericalIntegrator, None)
    

agcls.AgClassCatalog.add_catalog_entry("{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}", INumericalIntegrator)
agcls.AgTypeNameMap["INumericalIntegrator"] = INumericalIntegrator

class IPropagatorFunctionCollection(object):
    """The list of propagator functions - affecting forces that you want to model for orbit propagation."""
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    _metadata = {
        "uuid" : "{373180B3-D083-4CB1-ACC8-9D6C738F19E6}",
        "vtable_reference" : IDispatch._vtable_offset + IDispatch._num_methods - 1,
        "method_offsets" : { "add" : 1,
                             "item" : 2,
                             "remove" : 3,
                             "get__NewEnum" : 4,
                             "get_count" : 5,
                             "remove_all" : 6,
                             "cut" : 7,
                             "paste" : 8,
                             "insert_copy" : 9,
                             "get_item_by_index" : 10,
                             "get_item_by_name" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IPropagatorFunctionCollection)
        self.__dict__["_enumerator"] = None
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IPropagatorFunctionCollection)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IPropagatorFunctionCollection, None)
    def __iter__(self):
        self.__dict__["_enumerator"] = self._NewEnum
        self._enumerator.reset()
        return self
    def __next__(self) -> "IComponentInfo":
        if self._enumerator is None:
            raise StopIteration
        nextval = self._enumerator.next()
        if nextval is None:
            raise StopIteration
        return nextval
    
    _add_metadata = { "name" : "add",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def add(self, resultName:str) -> "IComponentInfo":
        """Add a function to the collection."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._add_metadata, resultName, out_arg())

    _item_metadata = { "name" : "item",
            "arg_types" : (agcom.VARIANT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.VARIANT_arg, agmarshall.AgInterface_out_arg,) }
    def item(self, indexOrName:typing.Any) -> "IComponentInfo":
        """Allow you to iterate through the collection."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._item_metadata, indexOrName, out_arg())

    _remove_metadata = { "name" : "remove",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def remove(self, indexOrName:typing.Any) -> None:
        """Remove the specified function from the collection."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._remove_metadata, indexOrName)

    _get__NewEnum_metadata = { "name" : "_NewEnum",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.IEnumVARIANT_arg,) }
    @property
    def _NewEnum(self) -> enumerator_proxy:
        """Allow you to enumerate through the collection."""
        return self._intf.get_property(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._get__NewEnum_metadata)

    _get_count_metadata = { "name" : "count",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def count(self) -> int:
        """Return the size of the collection."""
        return self._intf.get_property(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._get_count_metadata)

    _remove_all_metadata = { "name" : "remove_all",
            "arg_types" : (),
            "marshallers" : () }
    def remove_all(self) -> None:
        """Remove all functions from the collection."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._remove_all_metadata, )

    _cut_metadata = { "name" : "cut",
            "arg_types" : (agcom.VARIANT,),
            "marshallers" : (agmarshall.VARIANT_arg,) }
    def cut(self, indexOrName:typing.Any) -> None:
        """Copy a propagator function to the clipboard and removes the propagator function from the list."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._cut_metadata, indexOrName)

    _paste_metadata = { "name" : "paste",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    def paste(self) -> "IComponentInfo":
        """Pastes a propagator function from the clipboard into the list."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._paste_metadata, out_arg())

    _insert_copy_metadata = { "name" : "insert_copy",
            "arg_types" : (agcom.PVOID, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_in_arg("IComponentInfo"), agmarshall.AgInterface_out_arg,) }
    def insert_copy(self, propFunc:"IComponentInfo") -> "IComponentInfo":
        """Copy a propagator function and inserts the copy into the list."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._insert_copy_metadata, propFunc, out_arg())

    _get_item_by_index_metadata = { "name" : "get_item_by_index",
            "arg_types" : (agcom.INT, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.INT_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_index(self, index:int) -> "IComponentInfo":
        """Retrieve a propagator function from the collection by index."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._get_item_by_index_metadata, index, out_arg())

    _get_item_by_name_metadata = { "name" : "get_item_by_name",
            "arg_types" : (agcom.BSTR, POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.BSTR_arg, agmarshall.AgInterface_out_arg,) }
    def get_item_by_name(self, name:str) -> "IComponentInfo":
        """Retrieve a propagator function from the collection by name."""
        return self._intf.invoke(IPropagatorFunctionCollection._metadata, IPropagatorFunctionCollection._get_item_by_name_metadata, name, out_arg())

    __getitem__ = item



agcls.AgClassCatalog.add_catalog_entry("{373180B3-D083-4CB1-ACC8-9D6C738F19E6}", IPropagatorFunctionCollection)
agcls.AgTypeNameMap["IPropagatorFunctionCollection"] = IPropagatorFunctionCollection

class INumericalPropagatorWrapper(object):
    """General properties for propagators."""
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{5E7589D9-478E-4C8F-A856-2E548833C9C5}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_use_variation_of_parameters" : 3,
                             "set_use_variation_of_parameters" : 4,
                             "get_use_regularized_time" : 5,
                             "set_use_regularized_time" : 6,
                             "get_regularized_time_exponent" : 7,
                             "set_regularized_time_exponent" : 8,
                             "get_regularized_time_steps_per_orbit" : 9,
                             "set_regularized_time_steps_per_orbit" : 10,
                             "get_propagator_functions" : 11,
                             "get_numerical_integrator" : 12,
                             "get_numerical_integrator_type" : 13,
                             "set_numerical_integrator" : 14, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, INumericalPropagatorWrapper)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, INumericalPropagatorWrapper)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, INumericalPropagatorWrapper, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body for Propagation."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_central_body_name_metadata, inVal)

    _get_use_variation_of_parameters_metadata = { "name" : "use_variation_of_parameters",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_variation_of_parameters(self) -> bool:
        """Whether or not to use a variation of parameters(VOP) in universal variables formulation of the equations of motion; related to numerical integrator."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_use_variation_of_parameters_metadata)

    _set_use_variation_of_parameters_metadata = { "name" : "use_variation_of_parameters",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_variation_of_parameters.setter
    def use_variation_of_parameters(self, inVal:bool) -> None:
        return self._intf.set_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_use_variation_of_parameters_metadata, inVal)

    _get_use_regularized_time_metadata = { "name" : "use_regularized_time",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_regularized_time(self) -> bool:
        """Whether or not to use regularized time; related to numerical integrator."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_use_regularized_time_metadata)

    _set_use_regularized_time_metadata = { "name" : "use_regularized_time",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_regularized_time.setter
    def use_regularized_time(self, inVal:bool) -> None:
        return self._intf.set_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_use_regularized_time_metadata, inVal)

    _get_regularized_time_exponent_metadata = { "name" : "regularized_time_exponent",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def regularized_time_exponent(self) -> float:
        """The exponent to use in regularized time; related to numerical integrator. Dimensionless."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_regularized_time_exponent_metadata)

    _set_regularized_time_exponent_metadata = { "name" : "regularized_time_exponent",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @regularized_time_exponent.setter
    def regularized_time_exponent(self, inVal:float) -> None:
        return self._intf.set_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_regularized_time_exponent_metadata, inVal)

    _get_regularized_time_steps_per_orbit_metadata = { "name" : "regularized_time_steps_per_orbit",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def regularized_time_steps_per_orbit(self) -> int:
        """The steps per orbit used in regularized time; related to numerical integrator. Dimensionless."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_regularized_time_steps_per_orbit_metadata)

    _set_regularized_time_steps_per_orbit_metadata = { "name" : "regularized_time_steps_per_orbit",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @regularized_time_steps_per_orbit.setter
    def regularized_time_steps_per_orbit(self, inVal:int) -> None:
        return self._intf.set_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_regularized_time_steps_per_orbit_metadata, inVal)

    _get_propagator_functions_metadata = { "name" : "propagator_functions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def propagator_functions(self) -> "PropagatorFunctionCollection":
        """The list of propagator functions."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_propagator_functions_metadata)

    _get_numerical_integrator_metadata = { "name" : "numerical_integrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def numerical_integrator(self) -> "INumericalIntegrator":
        """The numerical integrator."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_numerical_integrator_metadata)

    _get_numerical_integrator_type_metadata = { "name" : "numerical_integrator_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    @property
    def numerical_integrator_type(self) -> "NUMERICAL_INTEGRATOR":
        """The single step integrator type."""
        return self._intf.get_property(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._get_numerical_integrator_type_metadata)

    _set_numerical_integrator_metadata = { "name" : "set_numerical_integrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    def set_numerical_integrator(self, integrator:"NUMERICAL_INTEGRATOR") -> None:
        """Change the single step integrator."""
        return self._intf.invoke(INumericalPropagatorWrapper._metadata, INumericalPropagatorWrapper._set_numerical_integrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{5E7589D9-478E-4C8F-A856-2E548833C9C5}", INumericalPropagatorWrapper)
agcls.AgTypeNameMap["INumericalPropagatorWrapper"] = INumericalPropagatorWrapper

class INumericalPropagatorWrapperCR3BP(object):
    """General properties for three-body problem propagators."""
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C0662E79-7987-4363-B97D-2277A12A7B5B}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_central_body_name" : 1,
                             "set_central_body_name" : 2,
                             "get_propagator_functions" : 3,
                             "get_numerical_integrator" : 4,
                             "get_numerical_integrator_type" : 5,
                             "set_numerical_integrator" : 6, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, INumericalPropagatorWrapperCR3BP)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, INumericalPropagatorWrapperCR3BP)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, INumericalPropagatorWrapperCR3BP, None)
    
    _get_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (POINTER(agcom.BSTR),),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @property
    def central_body_name(self) -> str:
        """The central body for Propagation."""
        return self._intf.get_property(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._get_central_body_name_metadata)

    _set_central_body_name_metadata = { "name" : "central_body_name",
            "arg_types" : (agcom.BSTR,),
            "marshallers" : (agmarshall.BSTR_arg,) }
    @central_body_name.setter
    def central_body_name(self, inVal:str) -> None:
        return self._intf.set_property(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._set_central_body_name_metadata, inVal)

    _get_propagator_functions_metadata = { "name" : "propagator_functions",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def propagator_functions(self) -> "PropagatorFunctionCollection":
        """The list of propagator functions."""
        return self._intf.get_property(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._get_propagator_functions_metadata)

    _get_numerical_integrator_metadata = { "name" : "numerical_integrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def numerical_integrator(self) -> "INumericalIntegrator":
        """The numerical integrator."""
        return self._intf.get_property(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._get_numerical_integrator_metadata)

    _get_numerical_integrator_type_metadata = { "name" : "numerical_integrator_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    @property
    def numerical_integrator_type(self) -> "NUMERICAL_INTEGRATOR":
        """The numerical integrator type."""
        return self._intf.get_property(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._get_numerical_integrator_type_metadata)

    _set_numerical_integrator_metadata = { "name" : "set_numerical_integrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    def set_numerical_integrator(self, integrator:"NUMERICAL_INTEGRATOR") -> None:
        """Change the numerical integrator."""
        return self._intf.invoke(INumericalPropagatorWrapperCR3BP._metadata, INumericalPropagatorWrapperCR3BP._set_numerical_integrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{C0662E79-7987-4363-B97D-2277A12A7B5B}", INumericalPropagatorWrapperCR3BP)
agcls.AgTypeNameMap["INumericalPropagatorWrapperCR3BP"] = INumericalPropagatorWrapperCR3BP

class IBulirschStoerIntegrator(object):
    """Properties for the Bulirsch-Stoer numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2A307A62-0365-405B-B493-5F11810DF50C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_sequences" : 15,
                             "set_max_sequences" : 16,
                             "get_max_iterations" : 17,
                             "set_max_iterations" : 18,
                             "get_tolerance" : 19,
                             "set_tolerance" : 20,
                             "get_first_safety_coefficient" : 21,
                             "set_first_safety_coefficient" : 22,
                             "get_second_safety_coefficient" : 23,
                             "set_second_safety_coefficient" : 24, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IBulirschStoerIntegrator)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IBulirschStoerIntegrator)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IBulirschStoerIntegrator, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_max_rel_err_metadata, inVal)

    _get_max_sequences_metadata = { "name" : "max_sequences",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_sequences(self) -> int:
        """The maximum number of sequences. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_max_sequences_metadata)

    _set_max_sequences_metadata = { "name" : "max_sequences",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_sequences.setter
    def max_sequences(self, inVal:int) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_max_sequences_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum number of iterations. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_max_iterations_metadata, inVal)

    _get_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def tolerance(self) -> float:
        """The error tolerance for step size control. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_tolerance_metadata)

    _set_tolerance_metadata = { "name" : "tolerance",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @tolerance.setter
    def tolerance(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_tolerance_metadata, inVal)

    _get_first_safety_coefficient_metadata = { "name" : "first_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def first_safety_coefficient(self) -> float:
        """The first safety coefficient. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_first_safety_coefficient_metadata)

    _set_first_safety_coefficient_metadata = { "name" : "first_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @first_safety_coefficient.setter
    def first_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_first_safety_coefficient_metadata, inVal)

    _get_second_safety_coefficient_metadata = { "name" : "second_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def second_safety_coefficient(self) -> float:
        """The second safety coefficient. Dimensionless."""
        return self._intf.get_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._get_second_safety_coefficient_metadata)

    _set_second_safety_coefficient_metadata = { "name" : "second_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @second_safety_coefficient.setter
    def second_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IBulirschStoerIntegrator._metadata, IBulirschStoerIntegrator._set_second_safety_coefficient_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2A307A62-0365-405B-B493-5F11810DF50C}", IBulirschStoerIntegrator)
agcls.AgTypeNameMap["IBulirschStoerIntegrator"] = IBulirschStoerIntegrator

class IGaussJacksonIntegrator(object):
    """Properties for the Gauss-Jackson numerical integrator."""
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_max_corrector_rel_err" : 3,
                             "set_max_corrector_rel_err" : 4,
                             "get_corrector_mode" : 5,
                             "set_corrector_mode" : 6,
                             "get_max_corrector_iterations" : 7,
                             "set_max_corrector_iterations" : 8,
                             "get_single_step_integrator" : 9,
                             "get_single_step_integrator_type" : 10,
                             "set_single_step_integrator" : 11, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IGaussJacksonIntegrator)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IGaussJacksonIntegrator)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IGaussJacksonIntegrator, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._set_initial_step_metadata, inVal)

    _get_max_corrector_rel_err_metadata = { "name" : "max_corrector_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_corrector_rel_err(self) -> float:
        """The maximum relative error between corrector iterations. Dimensionless."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_max_corrector_rel_err_metadata)

    _set_max_corrector_rel_err_metadata = { "name" : "max_corrector_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_corrector_rel_err.setter
    def max_corrector_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._set_max_corrector_rel_err_metadata, inVal)

    _get_corrector_mode_metadata = { "name" : "corrector_mode",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(PREDICTOR_CORRECTOR),) }
    @property
    def corrector_mode(self) -> "PREDICTOR_CORRECTOR":
        """The Predictor Corrector scheme."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_corrector_mode_metadata)

    _set_corrector_mode_metadata = { "name" : "corrector_mode",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(PREDICTOR_CORRECTOR),) }
    @corrector_mode.setter
    def corrector_mode(self, inVal:"PREDICTOR_CORRECTOR") -> None:
        return self._intf.set_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._set_corrector_mode_metadata, inVal)

    _get_max_corrector_iterations_metadata = { "name" : "max_corrector_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_corrector_iterations(self) -> int:
        """The maximum corrector iterations. Dimensionless."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_max_corrector_iterations_metadata)

    _set_max_corrector_iterations_metadata = { "name" : "max_corrector_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_corrector_iterations.setter
    def max_corrector_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._set_max_corrector_iterations_metadata, inVal)

    _get_single_step_integrator_metadata = { "name" : "single_step_integrator",
            "arg_types" : (POINTER(agcom.PVOID),),
            "marshallers" : (agmarshall.AgInterface_out_arg,) }
    @property
    def single_step_integrator(self) -> "INumericalIntegrator":
        """The stopping integrator; a single-step integrator."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_single_step_integrator_metadata)

    _get_single_step_integrator_type_metadata = { "name" : "single_step_integrator_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    @property
    def single_step_integrator_type(self) -> "NUMERICAL_INTEGRATOR":
        """The stopping integrator type."""
        return self._intf.get_property(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._get_single_step_integrator_type_metadata)

    _set_single_step_integrator_metadata = { "name" : "set_single_step_integrator",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(NUMERICAL_INTEGRATOR),) }
    def set_single_step_integrator(self, integrator:"NUMERICAL_INTEGRATOR") -> None:
        """Change the stopping integrator."""
        return self._intf.invoke(IGaussJacksonIntegrator._metadata, IGaussJacksonIntegrator._set_single_step_integrator_metadata, integrator)


agcls.AgClassCatalog.add_catalog_entry("{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}", IGaussJacksonIntegrator)
agcls.AgTypeNameMap["IGaussJacksonIntegrator"] = IGaussJacksonIntegrator

class IRungeKutta2nd3rd(object):
    """Properties for the RK2nd3rd numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_abs_err" : 15,
                             "set_max_abs_err" : 16,
                             "get_high_safety_coefficient" : 17,
                             "set_high_safety_coefficient" : 18,
                             "get_low_safety_coefficient" : 19,
                             "set_low_safety_coefficient" : 20,
                             "get_error_control" : 21,
                             "set_error_control" : 22,
                             "get_max_iterations" : 23,
                             "set_max_iterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKutta2nd3rd)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKutta2nd3rd)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKutta2nd3rd, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_max_rel_err_metadata, inVal)

    _get_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_abs_err(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_max_abs_err_metadata)

    _set_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_abs_err.setter
    def max_abs_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_max_abs_err_metadata, inVal)

    _get_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def high_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_high_safety_coefficient_metadata)

    _set_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @high_safety_coefficient.setter
    def high_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_high_safety_coefficient_metadata, inVal)

    _get_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def low_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_low_safety_coefficient_metadata)

    _set_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @low_safety_coefficient.setter
    def low_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_low_safety_coefficient_metadata, inVal)

    _get_error_control_metadata = { "name" : "error_control",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @property
    def error_control(self) -> "ERROR_CONTROL":
        """The error control method."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_error_control_metadata)

    _set_error_control_metadata = { "name" : "error_control",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @error_control.setter
    def error_control(self, inVal:"ERROR_CONTROL") -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_error_control_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IRungeKutta2nd3rd._metadata, IRungeKutta2nd3rd._set_max_iterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}", IRungeKutta2nd3rd)
agcls.AgTypeNameMap["IRungeKutta2nd3rd"] = IRungeKutta2nd3rd

class IRungeKutta4th(object):
    """Properties for the RK4th numerical integrator."""
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKutta4th)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKutta4th)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKutta4th, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKutta4th._metadata, IRungeKutta4th._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th._metadata, IRungeKutta4th._set_initial_step_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}", IRungeKutta4th)
agcls.AgTypeNameMap["IRungeKutta4th"] = IRungeKutta4th

class IRungeKutta4th5th(object):
    """Properties for the RK4th5th numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_abs_err" : 15,
                             "set_max_abs_err" : 16,
                             "get_high_safety_coefficient" : 17,
                             "set_high_safety_coefficient" : 18,
                             "get_low_safety_coefficient" : 19,
                             "set_low_safety_coefficient" : 20,
                             "get_error_control" : 21,
                             "set_error_control" : 22,
                             "get_max_iterations" : 23,
                             "set_max_iterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKutta4th5th)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKutta4th5th)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKutta4th5th, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_max_rel_err_metadata, inVal)

    _get_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_abs_err(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_max_abs_err_metadata)

    _set_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_abs_err.setter
    def max_abs_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_max_abs_err_metadata, inVal)

    _get_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def high_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_high_safety_coefficient_metadata)

    _set_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @high_safety_coefficient.setter
    def high_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_high_safety_coefficient_metadata, inVal)

    _get_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def low_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_low_safety_coefficient_metadata)

    _set_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @low_safety_coefficient.setter
    def low_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_low_safety_coefficient_metadata, inVal)

    _get_error_control_metadata = { "name" : "error_control",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @property
    def error_control(self) -> "ERROR_CONTROL":
        """The error control method."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_error_control_metadata)

    _set_error_control_metadata = { "name" : "error_control",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @error_control.setter
    def error_control(self, inVal:"ERROR_CONTROL") -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_error_control_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IRungeKutta4th5th._metadata, IRungeKutta4th5th._set_max_iterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}", IRungeKutta4th5th)
agcls.AgTypeNameMap["IRungeKutta4th5th"] = IRungeKutta4th5th

class IRungeKutta4thAdapt(object):
    """Properties for the RK4thAdapt numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_abs_err" : 15,
                             "set_max_abs_err" : 16,
                             "get_high_safety_coefficient" : 17,
                             "set_high_safety_coefficient" : 18,
                             "get_low_safety_coefficient" : 19,
                             "set_low_safety_coefficient" : 20,
                             "get_error_control" : 21,
                             "set_error_control" : 22,
                             "get_max_iterations" : 23,
                             "set_max_iterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKutta4thAdapt)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKutta4thAdapt)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKutta4thAdapt, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_max_rel_err_metadata, inVal)

    _get_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_abs_err(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_max_abs_err_metadata)

    _set_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_abs_err.setter
    def max_abs_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_max_abs_err_metadata, inVal)

    _get_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def high_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_high_safety_coefficient_metadata)

    _set_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @high_safety_coefficient.setter
    def high_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_high_safety_coefficient_metadata, inVal)

    _get_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def low_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_low_safety_coefficient_metadata)

    _set_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @low_safety_coefficient.setter
    def low_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_low_safety_coefficient_metadata, inVal)

    _get_error_control_metadata = { "name" : "error_control",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @property
    def error_control(self) -> "ERROR_CONTROL":
        """The error control method."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_error_control_metadata)

    _set_error_control_metadata = { "name" : "error_control",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @error_control.setter
    def error_control(self, inVal:"ERROR_CONTROL") -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_error_control_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IRungeKutta4thAdapt._metadata, IRungeKutta4thAdapt._set_max_iterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}", IRungeKutta4thAdapt)
agcls.AgTypeNameMap["IRungeKutta4thAdapt"] = IRungeKutta4thAdapt

class IRungeKuttaF7th8th(object):
    """Properties for the RK7th8th numerical integrator."""
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_abs_err" : 15,
                             "set_max_abs_err" : 16,
                             "get_high_safety_coefficient" : 17,
                             "set_high_safety_coefficient" : 18,
                             "get_low_safety_coefficient" : 19,
                             "set_low_safety_coefficient" : 20,
                             "get_error_control" : 21,
                             "set_error_control" : 22,
                             "get_max_iterations" : 23,
                             "set_max_iterations" : 24, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKuttaF7th8th)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKuttaF7th8th)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKuttaF7th8th, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_max_rel_err_metadata, inVal)

    _get_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_abs_err(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_max_abs_err_metadata)

    _set_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_abs_err.setter
    def max_abs_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_max_abs_err_metadata, inVal)

    _get_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def high_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_high_safety_coefficient_metadata)

    _set_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @high_safety_coefficient.setter
    def high_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_high_safety_coefficient_metadata, inVal)

    _get_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def low_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_low_safety_coefficient_metadata)

    _set_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @low_safety_coefficient.setter
    def low_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_low_safety_coefficient_metadata, inVal)

    _get_error_control_metadata = { "name" : "error_control",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @property
    def error_control(self) -> "ERROR_CONTROL":
        """The error control method."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_error_control_metadata)

    _set_error_control_metadata = { "name" : "error_control",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @error_control.setter
    def error_control(self, inVal:"ERROR_CONTROL") -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_error_control_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IRungeKuttaF7th8th._metadata, IRungeKuttaF7th8th._set_max_iterations_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}", IRungeKuttaF7th8th)
agcls.AgTypeNameMap["IRungeKuttaF7th8th"] = IRungeKuttaF7th8th

class IRungeKuttaV8th9th(object):
    """Properties for the RK8th9th numerical integrator."""
    _num_methods = 26
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    _metadata = {
        "uuid" : "{E4CEAA67-BE78-472F-B746-52878835E818}",
        "vtable_reference" : IUnknown._vtable_offset + IUnknown._num_methods - 1,
        "method_offsets" : { "get_initial_step" : 1,
                             "set_initial_step" : 2,
                             "get_use_fixed_step" : 3,
                             "set_use_fixed_step" : 4,
                             "get_use_max_step" : 5,
                             "set_use_max_step" : 6,
                             "get_use_min_step" : 7,
                             "set_use_min_step" : 8,
                             "get_max_step" : 9,
                             "set_max_step" : 10,
                             "get_min_step" : 11,
                             "set_min_step" : 12,
                             "get_max_rel_err" : 13,
                             "set_max_rel_err" : 14,
                             "get_max_abs_err" : 15,
                             "set_max_abs_err" : 16,
                             "get_high_safety_coefficient" : 17,
                             "set_high_safety_coefficient" : 18,
                             "get_low_safety_coefficient" : 19,
                             "set_low_safety_coefficient" : 20,
                             "get_error_control" : 21,
                             "set_error_control" : 22,
                             "get_max_iterations" : 23,
                             "set_max_iterations" : 24,
                             "get_coeff_type" : 25,
                             "set_coeff_type" : 26, }
    }
    def __init__(self, sourceObject=None):
        initialize_from_source_object(self, sourceObject, IRungeKuttaV8th9th)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        return get_interface_property(attrname, IRungeKuttaV8th9th)
    def __setattr__(self, attrname, value):
        set_interface_attribute(self, attrname, value, IRungeKuttaV8th9th, None)
    
    _get_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def initial_step(self) -> float:
        """The initial step. Uses time dimension."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_initial_step_metadata)

    _set_initial_step_metadata = { "name" : "initial_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @initial_step.setter
    def initial_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_initial_step_metadata, inVal)

    _get_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_fixed_step(self) -> bool:
        """True if running in fixed-step mode."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_use_fixed_step_metadata)

    _set_use_fixed_step_metadata = { "name" : "use_fixed_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_fixed_step.setter
    def use_fixed_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_use_fixed_step_metadata, inVal)

    _get_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_max_step(self) -> bool:
        """Whether or not to enforce the maximum step."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_use_max_step_metadata)

    _set_use_max_step_metadata = { "name" : "use_max_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_max_step.setter
    def use_max_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_use_max_step_metadata, inVal)

    _get_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (POINTER(agcom.VARIANT_BOOL),),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @property
    def use_min_step(self) -> bool:
        """Whether or not to enforce the minimum step."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_use_min_step_metadata)

    _set_use_min_step_metadata = { "name" : "use_min_step",
            "arg_types" : (agcom.VARIANT_BOOL,),
            "marshallers" : (agmarshall.VARIANT_BOOL_arg,) }
    @use_min_step.setter
    def use_min_step(self, inVal:bool) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_use_min_step_metadata, inVal)

    _get_max_step_metadata = { "name" : "max_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_step(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_max_step_metadata)

    _set_max_step_metadata = { "name" : "max_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_step.setter
    def max_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_max_step_metadata, inVal)

    _get_min_step_metadata = { "name" : "min_step",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def min_step(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_min_step_metadata)

    _set_min_step_metadata = { "name" : "min_step",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @min_step.setter
    def min_step(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_min_step_metadata, inVal)

    _get_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_rel_err(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_max_rel_err_metadata)

    _set_max_rel_err_metadata = { "name" : "max_rel_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_rel_err.setter
    def max_rel_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_max_rel_err_metadata, inVal)

    _get_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def max_abs_err(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_max_abs_err_metadata)

    _set_max_abs_err_metadata = { "name" : "max_abs_err",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @max_abs_err.setter
    def max_abs_err(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_max_abs_err_metadata, inVal)

    _get_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def high_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to decrease step size if the error is too high. Dimensionless."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_high_safety_coefficient_metadata)

    _set_high_safety_coefficient_metadata = { "name" : "high_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @high_safety_coefficient.setter
    def high_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_high_safety_coefficient_metadata, inVal)

    _get_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (POINTER(agcom.DOUBLE),),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @property
    def low_safety_coefficient(self) -> float:
        """The 'safety' coefficient used to increase step size if the error is too low. Dimensionless."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_low_safety_coefficient_metadata)

    _set_low_safety_coefficient_metadata = { "name" : "low_safety_coefficient",
            "arg_types" : (agcom.DOUBLE,),
            "marshallers" : (agmarshall.DOUBLE_arg,) }
    @low_safety_coefficient.setter
    def low_safety_coefficient(self, inVal:float) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_low_safety_coefficient_metadata, inVal)

    _get_error_control_metadata = { "name" : "error_control",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @property
    def error_control(self) -> "ERROR_CONTROL":
        """The error control method."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_error_control_metadata)

    _set_error_control_metadata = { "name" : "error_control",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(ERROR_CONTROL),) }
    @error_control.setter
    def error_control(self, inVal:"ERROR_CONTROL") -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_error_control_metadata, inVal)

    _get_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.LONG_arg,) }
    @property
    def max_iterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_max_iterations_metadata)

    _set_max_iterations_metadata = { "name" : "max_iterations",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.LONG_arg,) }
    @max_iterations.setter
    def max_iterations(self, inVal:int) -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_max_iterations_metadata, inVal)

    _get_coeff_type_metadata = { "name" : "coeff_type",
            "arg_types" : (POINTER(agcom.LONG),),
            "marshallers" : (agmarshall.AgEnum_arg(COEFF_RUNGE_KUTTA_V_8TH_9TH),) }
    @property
    def coeff_type(self) -> "COEFF_RUNGE_KUTTA_V_8TH_9TH":
        """The set of coefficients to use."""
        return self._intf.get_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._get_coeff_type_metadata)

    _set_coeff_type_metadata = { "name" : "coeff_type",
            "arg_types" : (agcom.LONG,),
            "marshallers" : (agmarshall.AgEnum_arg(COEFF_RUNGE_KUTTA_V_8TH_9TH),) }
    @coeff_type.setter
    def coeff_type(self, inVal:"COEFF_RUNGE_KUTTA_V_8TH_9TH") -> None:
        return self._intf.set_property(IRungeKuttaV8th9th._metadata, IRungeKuttaV8th9th._set_coeff_type_metadata, inVal)


agcls.AgClassCatalog.add_catalog_entry("{E4CEAA67-BE78-472F-B746-52878835E818}", IRungeKuttaV8th9th)
agcls.AgTypeNameMap["IRungeKuttaV8th9th"] = IRungeKuttaV8th9th



class DriverMissionControlSequence(IDriverMissionControlSequence, IVehiclePropagator):
    """Basic properties of an Astrogator satellite."""
    def __init__(self, sourceObject=None):
        IDriverMissionControlSequence.__init__(self, sourceObject)
        IVehiclePropagator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDriverMissionControlSequence._private_init(self, intf)
        IVehiclePropagator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DriverMissionControlSequence, [IDriverMissionControlSequence, IVehiclePropagator])

agcls.AgClassCatalog.add_catalog_entry("{56D84C70-9D0D-4ACA-8CE5-C41E951E024C}", DriverMissionControlSequence)
agcls.AgTypeNameMap["DriverMissionControlSequence"] = DriverMissionControlSequence

class MissionControlSequenceSegmentCollection(IMissionControlSequenceSegmentCollection, IRuntimeTypeInfoProvider):
    """The Mission Control Sequence."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegmentCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegmentCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceSegmentCollection, [IMissionControlSequenceSegmentCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{B2F91182-1E74-4422-A660-6250A42732C3}", MissionControlSequenceSegmentCollection)
agcls.AgTypeNameMap["MissionControlSequenceSegmentCollection"] = MissionControlSequenceSegmentCollection

class MissionControlSequenceEnd(IMissionControlSequenceEnd, IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IComponentInfo):
    """The End segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceEnd.__init__(self, sourceObject)
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceEnd._private_init(self, intf)
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceEnd, [IMissionControlSequenceEnd, IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IComponentInfo])

agcls.AgClassCatalog.add_catalog_entry("{048FE652-88E7-4000-B371-A2D708599F34}", MissionControlSequenceEnd)
agcls.AgTypeNameMap["MissionControlSequenceEnd"] = MissionControlSequenceEnd

class MissionControlSequenceInitialState(IMissionControlSequenceInitialState, IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IComponentInfo, ICloneable):
    """The Initial State segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceInitialState.__init__(self, sourceObject)
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceInitialState._private_init(self, intf)
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceInitialState, [IMissionControlSequenceInitialState, IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{E3010ADE-CB96-470C-B380-3C58B23173AC}", MissionControlSequenceInitialState)
agcls.AgTypeNameMap["MissionControlSequenceInitialState"] = MissionControlSequenceInitialState

class SpacecraftParameters(ISpacecraftParameters, IRuntimeTypeInfoProvider):
    """Spacecraft parameters."""
    def __init__(self, sourceObject=None):
        ISpacecraftParameters.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISpacecraftParameters._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SpacecraftParameters, [ISpacecraftParameters, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{75F1E929-B0B9-4AE8-8C84-7273B9211771}", SpacecraftParameters)
agcls.AgTypeNameMap["SpacecraftParameters"] = SpacecraftParameters

class FuelTank(IFuelTank, IRuntimeTypeInfoProvider):
    """Fuel Tank parameters."""
    def __init__(self, sourceObject=None):
        IFuelTank.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IFuelTank._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, FuelTank, [IFuelTank, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{03CC0FE4-A9E2-4F80-8AC8-C510F9691D3B}", FuelTank)
agcls.AgTypeNameMap["FuelTank"] = FuelTank

class ElementCartesian(IElementCartesian, IElement, IRuntimeTypeInfoProvider):
    """Cartesian elements."""
    def __init__(self, sourceObject=None):
        IElementCartesian.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementCartesian._private_init(self, intf)
        IElement._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementCartesian, [IElementCartesian, IElement, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{8C98158E-6B98-4C50-8500-7ABCE96A049E}", ElementCartesian)
agcls.AgTypeNameMap["ElementCartesian"] = ElementCartesian

class ElementKeplerian(IElementKeplerian, IElement):
    """Keplerian elements."""
    def __init__(self, sourceObject=None):
        IElementKeplerian.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementKeplerian._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementKeplerian, [IElementKeplerian, IElement])

agcls.AgClassCatalog.add_catalog_entry("{F34624C5-E351-4321-B16E-04DB098F9E29}", ElementKeplerian)
agcls.AgTypeNameMap["ElementKeplerian"] = ElementKeplerian

class ElementEquinoctial(IElementEquinoctial, IElement):
    """Equinoctial elements."""
    def __init__(self, sourceObject=None):
        IElementEquinoctial.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementEquinoctial._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementEquinoctial, [IElementEquinoctial, IElement])

agcls.AgClassCatalog.add_catalog_entry("{5588137F-A05E-4011-A219-925F175F1447}", ElementEquinoctial)
agcls.AgTypeNameMap["ElementEquinoctial"] = ElementEquinoctial

class ElementDelaunay(IElementDelaunay, IElement):
    """Delaunay elements."""
    def __init__(self, sourceObject=None):
        IElementDelaunay.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementDelaunay._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementDelaunay, [IElementDelaunay, IElement])

agcls.AgClassCatalog.add_catalog_entry("{FDE891B2-2C91-48A8-B4C0-956BD55B8496}", ElementDelaunay)
agcls.AgTypeNameMap["ElementDelaunay"] = ElementDelaunay

class ElementMixedSpherical(IElementMixedSpherical, IElement):
    """Mixed Spherical elements."""
    def __init__(self, sourceObject=None):
        IElementMixedSpherical.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementMixedSpherical._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementMixedSpherical, [IElementMixedSpherical, IElement])

agcls.AgClassCatalog.add_catalog_entry("{C6E11D55-8708-4667-AC84-8FC413A32FF0}", ElementMixedSpherical)
agcls.AgTypeNameMap["ElementMixedSpherical"] = ElementMixedSpherical

class ElementSpherical(IElementSpherical, IElement):
    """Spherical elements."""
    def __init__(self, sourceObject=None):
        IElementSpherical.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementSpherical._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementSpherical, [IElementSpherical, IElement])

agcls.AgClassCatalog.add_catalog_entry("{ECF59D66-A748-47DD-BD0E-C8FD0CD78D05}", ElementSpherical)
agcls.AgTypeNameMap["ElementSpherical"] = ElementSpherical

class ElementTargetVectorIncomingAsymptote(IElementTargetVectorIncomingAsymptote, IElement):
    """Target Vector Incoming Asymptote elements."""
    def __init__(self, sourceObject=None):
        IElementTargetVectorIncomingAsymptote.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementTargetVectorIncomingAsymptote._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementTargetVectorIncomingAsymptote, [IElementTargetVectorIncomingAsymptote, IElement])

agcls.AgClassCatalog.add_catalog_entry("{E05BEA68-902F-427F-9E65-A33FBE044A75}", ElementTargetVectorIncomingAsymptote)
agcls.AgTypeNameMap["ElementTargetVectorIncomingAsymptote"] = ElementTargetVectorIncomingAsymptote

class ElementTargetVectorOutgoingAsymptote(IElementTargetVectorOutgoingAsymptote, IElement):
    """Target Vector Outgoing Asymptote elements."""
    def __init__(self, sourceObject=None):
        IElementTargetVectorOutgoingAsymptote.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementTargetVectorOutgoingAsymptote._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementTargetVectorOutgoingAsymptote, [IElementTargetVectorOutgoingAsymptote, IElement])

agcls.AgClassCatalog.add_catalog_entry("{95B24C8E-7781-4FA6-8A70-49443C5FFCF9}", ElementTargetVectorOutgoingAsymptote)
agcls.AgTypeNameMap["ElementTargetVectorOutgoingAsymptote"] = ElementTargetVectorOutgoingAsymptote

class ElementGeodetic(IElementGeodetic, IElement):
    """Geodetic elements."""
    def __init__(self, sourceObject=None):
        IElementGeodetic.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementGeodetic._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementGeodetic, [IElementGeodetic, IElement])

agcls.AgClassCatalog.add_catalog_entry("{6E74D006-FB3C-4085-810E-9B1E5AE73905}", ElementGeodetic)
agcls.AgTypeNameMap["ElementGeodetic"] = ElementGeodetic

class ElementBPlane(IElementBPlane, IElement):
    """Bplane elements."""
    def __init__(self, sourceObject=None):
        IElementBPlane.__init__(self, sourceObject)
        IElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IElementBPlane._private_init(self, intf)
        IElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ElementBPlane, [IElementBPlane, IElement])

agcls.AgClassCatalog.add_catalog_entry("{3F43BB61-B15A-479A-AE38-567C7FEE6A7B}", ElementBPlane)
agcls.AgTypeNameMap["ElementBPlane"] = ElementBPlane

class MissionControlSequencePropagate(IMissionControlSequenceSegment, IMissionControlSequencePropagate, IComponentInfo, ICloneable, IRuntimeTypeInfoProvider):
    """The Propagate segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IMissionControlSequencePropagate.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IMissionControlSequencePropagate._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequencePropagate, [IMissionControlSequenceSegment, IMissionControlSequencePropagate, IComponentInfo, ICloneable, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{172B88CD-3CDC-4818-A03E-6538C4FD3B8D}", MissionControlSequencePropagate)
agcls.AgTypeNameMap["MissionControlSequencePropagate"] = MissionControlSequencePropagate

class State(IState, IRuntimeTypeInfoProvider):
    """The orbit state."""
    def __init__(self, sourceObject=None):
        IState.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IState._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, State, [IState, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{D09183D5-B72C-428B-B586-CD67D09B7BC1}", State)
agcls.AgTypeNameMap["State"] = State

class StoppingConditionCollection(IStoppingConditionCollection, IRuntimeTypeInfoProvider):
    """The stopping conditions collection."""
    def __init__(self, sourceObject=None):
        IStoppingConditionCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingConditionCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StoppingConditionCollection, [IStoppingConditionCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{9301C787-450F-49B9-B5BD-E263F5DEF4AF}", StoppingConditionCollection)
agcls.AgTypeNameMap["StoppingConditionCollection"] = StoppingConditionCollection

class AccessStoppingCondition(IComponentInfo, ICloneable, IAccessStoppingCondition, IStoppingConditionComponent, IRuntimeTypeInfoProvider):
    """The Access stopping condition."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IAccessStoppingCondition.__init__(self, sourceObject)
        IStoppingConditionComponent.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IAccessStoppingCondition._private_init(self, intf)
        IStoppingConditionComponent._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AccessStoppingCondition, [IComponentInfo, ICloneable, IAccessStoppingCondition, IStoppingConditionComponent, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{7526A10E-68CF-42C7-A1B6-DC58E4C83F8B}", AccessStoppingCondition)
agcls.AgTypeNameMap["AccessStoppingCondition"] = AccessStoppingCondition

class LightingStoppingCondition(IComponentInfo, ICloneable, ILightingStoppingCondition, IStoppingConditionComponent, IRuntimeTypeInfoProvider):
    """The Lighting stopping condition."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        ILightingStoppingCondition.__init__(self, sourceObject)
        IStoppingConditionComponent.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        ILightingStoppingCondition._private_init(self, intf)
        IStoppingConditionComponent._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, LightingStoppingCondition, [IComponentInfo, ICloneable, ILightingStoppingCondition, IStoppingConditionComponent, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{9AE4C815-0880-4912-A024-7A326AF7F9BB}", LightingStoppingCondition)
agcls.AgTypeNameMap["LightingStoppingCondition"] = LightingStoppingCondition

class StoppingCondition(IStoppingCondition, IComponentInfo, ICloneable, IStoppingConditionComponent, IRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IStoppingCondition.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStoppingConditionComponent.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingCondition._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStoppingConditionComponent._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StoppingCondition, [IStoppingCondition, IComponentInfo, ICloneable, IStoppingConditionComponent, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{87FDFED8-E83F-4963-92BD-4F151BE3E5CA}", StoppingCondition)
agcls.AgTypeNameMap["StoppingCondition"] = StoppingCondition

class StoppingConditionElement(IStoppingConditionElement, IComponentInfo, IRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IStoppingConditionElement.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStoppingConditionElement._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StoppingConditionElement, [IStoppingConditionElement, IComponentInfo, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{EBE02320-241C-462D-93F5-1BE2B72C8FB5}", StoppingConditionElement)
agcls.AgTypeNameMap["StoppingConditionElement"] = StoppingConditionElement

class MissionControlSequenceSequence(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceSequence, IComponentInfo, ICloneable):
    """The Sequence segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceSequence.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceSequence._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceSequence, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceSequence, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{9D98B9CE-047C-419E-9A58-5939ECD853EF}", MissionControlSequenceSequence)
agcls.AgTypeNameMap["MissionControlSequenceSequence"] = MissionControlSequenceSequence

class MissionControlSequenceBackwardSequence(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceBackwardSequence, IMissionControlSequenceSequence, IComponentInfo, ICloneable):
    """The Backward Sequence segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceBackwardSequence.__init__(self, sourceObject)
        IMissionControlSequenceSequence.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceBackwardSequence._private_init(self, intf)
        IMissionControlSequenceSequence._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceBackwardSequence, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceBackwardSequence, IMissionControlSequenceSequence, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{EDA33DE4-2AE3-4C19-87A4-2A3215ADB6FE}", MissionControlSequenceBackwardSequence)
agcls.AgTypeNameMap["MissionControlSequenceBackwardSequence"] = MissionControlSequenceBackwardSequence

class MissionControlSequenceLaunch(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceLaunch, IComponentInfo, ICloneable):
    """The Launch segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceLaunch.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceLaunch._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceLaunch, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceLaunch, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{1540C136-4AA5-449B-A845-A822E99422E2}", MissionControlSequenceLaunch)
agcls.AgTypeNameMap["MissionControlSequenceLaunch"] = MissionControlSequenceLaunch

class DisplaySystemGeodetic(IDisplaySystemGeodetic, IDisplaySystem):
    """The geodetic launch location."""
    def __init__(self, sourceObject=None):
        IDisplaySystemGeodetic.__init__(self, sourceObject)
        IDisplaySystem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDisplaySystemGeodetic._private_init(self, intf)
        IDisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DisplaySystemGeodetic, [IDisplaySystemGeodetic, IDisplaySystem])

agcls.AgClassCatalog.add_catalog_entry("{792B26D7-7643-47F5-8BBD-B4FE0708F3AB}", DisplaySystemGeodetic)
agcls.AgTypeNameMap["DisplaySystemGeodetic"] = DisplaySystemGeodetic

class DisplaySystemGeocentric(IDisplaySystemGeocentric, IDisplaySystem):
    """The geocentric launch location."""
    def __init__(self, sourceObject=None):
        IDisplaySystemGeocentric.__init__(self, sourceObject)
        IDisplaySystem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDisplaySystemGeocentric._private_init(self, intf)
        IDisplaySystem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DisplaySystemGeocentric, [IDisplaySystemGeocentric, IDisplaySystem])

agcls.AgClassCatalog.add_catalog_entry("{32F981ED-81EA-4C65-87DF-DC725A979056}", DisplaySystemGeocentric)
agcls.AgTypeNameMap["DisplaySystemGeocentric"] = DisplaySystemGeocentric

class BurnoutGeodetic(IBurnoutGeodetic, IBurnout):
    """The geodetic burnout point."""
    def __init__(self, sourceObject=None):
        IBurnoutGeodetic.__init__(self, sourceObject)
        IBurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutGeodetic._private_init(self, intf)
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutGeodetic, [IBurnoutGeodetic, IBurnout])

agcls.AgClassCatalog.add_catalog_entry("{011100E5-8DE0-4CE1-BC6D-F66B77814B78}", BurnoutGeodetic)
agcls.AgTypeNameMap["BurnoutGeodetic"] = BurnoutGeodetic

class BurnoutCBFCartesian(IBurnoutCBFCartesian, IBurnout):
    """The burnout state in CBF Cartesian coordinates."""
    def __init__(self, sourceObject=None):
        IBurnoutCBFCartesian.__init__(self, sourceObject)
        IBurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutCBFCartesian._private_init(self, intf)
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutCBFCartesian, [IBurnoutCBFCartesian, IBurnout])

agcls.AgClassCatalog.add_catalog_entry("{3EE3ED29-6154-49CA-93C4-8623E801B58F}", BurnoutCBFCartesian)
agcls.AgTypeNameMap["BurnoutCBFCartesian"] = BurnoutCBFCartesian

class BurnoutGeocentric(IBurnoutGeocentric, IBurnout):
    """The geocentric burnout point."""
    def __init__(self, sourceObject=None):
        IBurnoutGeocentric.__init__(self, sourceObject)
        IBurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutGeocentric._private_init(self, intf)
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutGeocentric, [IBurnoutGeocentric, IBurnout])

agcls.AgClassCatalog.add_catalog_entry("{B7BD1F63-9D91-4DA5-9099-D6BE607F2702}", BurnoutGeocentric)
agcls.AgTypeNameMap["BurnoutGeocentric"] = BurnoutGeocentric

class BurnoutLaunchAzAltitude(IBurnoutLaunchAzAltitude, IBurnout):
    """The launch azimuth and altitude burnout point."""
    def __init__(self, sourceObject=None):
        IBurnoutLaunchAzAltitude.__init__(self, sourceObject)
        IBurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutLaunchAzAltitude._private_init(self, intf)
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutLaunchAzAltitude, [IBurnoutLaunchAzAltitude, IBurnout])

agcls.AgClassCatalog.add_catalog_entry("{E5A780AE-0173-4FF8-AD0F-43886E1FAE85}", BurnoutLaunchAzAltitude)
agcls.AgTypeNameMap["BurnoutLaunchAzAltitude"] = BurnoutLaunchAzAltitude

class BurnoutLaunchAzRadius(IBurnoutLaunchAzRadius, IBurnout):
    """The launch azimuth and radius burnout point."""
    def __init__(self, sourceObject=None):
        IBurnoutLaunchAzRadius.__init__(self, sourceObject)
        IBurnout.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutLaunchAzRadius._private_init(self, intf)
        IBurnout._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutLaunchAzRadius, [IBurnoutLaunchAzRadius, IBurnout])

agcls.AgClassCatalog.add_catalog_entry("{ABC361CE-B104-427C-BDDB-CF77EBDC9B8E}", BurnoutLaunchAzRadius)
agcls.AgTypeNameMap["BurnoutLaunchAzRadius"] = BurnoutLaunchAzRadius

class BurnoutVelocity(IBurnoutVelocity):
    """The burnout velocity."""
    def __init__(self, sourceObject=None):
        IBurnoutVelocity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBurnoutVelocity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BurnoutVelocity, [IBurnoutVelocity])

agcls.AgClassCatalog.add_catalog_entry("{DFD439A9-42BD-4A59-9681-A70BBC94E083}", BurnoutVelocity)
agcls.AgTypeNameMap["BurnoutVelocity"] = BurnoutVelocity

class MissionControlSequenceFollow(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceFollow, IComponentInfo, ICloneable):
    """The Follow segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceFollow.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceFollow._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceFollow, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceFollow, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{322FC7F6-FCDF-408B-A31C-F25A1F5456EB}", MissionControlSequenceFollow)
agcls.AgTypeNameMap["MissionControlSequenceFollow"] = MissionControlSequenceFollow

class MissionControlSequenceManeuver(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceManeuver, IComponentInfo, ICloneable):
    """The Maneuver segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceManeuver.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceManeuver._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceManeuver, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceManeuver, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{1EE05100-A5B8-4820-9C6D-F4AE0639E1EE}", MissionControlSequenceManeuver)
agcls.AgTypeNameMap["MissionControlSequenceManeuver"] = MissionControlSequenceManeuver

class ManeuverFinite(IManeuverFinite, IManeuver, IRuntimeTypeInfoProvider):
    """The Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverFinite.__init__(self, sourceObject)
        IManeuver.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverFinite._private_init(self, intf)
        IManeuver._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverFinite, [IManeuverFinite, IManeuver, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{22EAD08A-6355-48BA-96EC-5DD996A5D926}", ManeuverFinite)
agcls.AgTypeNameMap["ManeuverFinite"] = ManeuverFinite

class ManeuverImpulsive(IManeuverImpulsive, IManeuver, IRuntimeTypeInfoProvider):
    """The Impulsive Maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverImpulsive.__init__(self, sourceObject)
        IManeuver.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverImpulsive._private_init(self, intf)
        IManeuver._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverImpulsive, [IManeuverImpulsive, IManeuver, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{E4DCF8C5-987F-4739-9592-E4C49B9A827E}", ManeuverImpulsive)
agcls.AgTypeNameMap["ManeuverImpulsive"] = ManeuverImpulsive

class AttitudeControlImpulsiveVelocityVector(IAttitudeControlImpulsiveVelocityVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlImpulsiveVelocityVector.__init__(self, sourceObject)
        IAttitudeControlImpulsive.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsiveVelocityVector._private_init(self, intf)
        IAttitudeControlImpulsive._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlImpulsiveVelocityVector, [IAttitudeControlImpulsiveVelocityVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{C466E73A-E301-43C8-8402-700D0CE8DE41}", AttitudeControlImpulsiveVelocityVector)
agcls.AgTypeNameMap["AttitudeControlImpulsiveVelocityVector"] = AttitudeControlImpulsiveVelocityVector

class AttitudeControlImpulsiveAntiVelocityVector(IAttitudeControlImpulsiveAntiVelocityVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlImpulsiveAntiVelocityVector.__init__(self, sourceObject)
        IAttitudeControlImpulsive.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsiveAntiVelocityVector._private_init(self, intf)
        IAttitudeControlImpulsive._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlImpulsiveAntiVelocityVector, [IAttitudeControlImpulsiveAntiVelocityVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{B51D8BDC-E2A5-484C-8CB8-88E4D1BBC5A1}", AttitudeControlImpulsiveAntiVelocityVector)
agcls.AgTypeNameMap["AttitudeControlImpulsiveAntiVelocityVector"] = AttitudeControlImpulsiveAntiVelocityVector

class AttitudeControlImpulsiveAttitude(IAttitudeControlImpulsiveAttitude, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The attitude attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlImpulsiveAttitude.__init__(self, sourceObject)
        IAttitudeControlImpulsive.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsiveAttitude._private_init(self, intf)
        IAttitudeControlImpulsive._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlImpulsiveAttitude, [IAttitudeControlImpulsiveAttitude, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{8854FD36-7CEA-4FBC-B699-E47007BA7825}", AttitudeControlImpulsiveAttitude)
agcls.AgTypeNameMap["AttitudeControlImpulsiveAttitude"] = AttitudeControlImpulsiveAttitude

class AttitudeControlImpulsiveFile(IAttitudeControlImpulsiveFile, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The file attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlImpulsiveFile.__init__(self, sourceObject)
        IAttitudeControlImpulsive.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsiveFile._private_init(self, intf)
        IAttitudeControlImpulsive._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlImpulsiveFile, [IAttitudeControlImpulsiveFile, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{18E769AB-177B-4575-A9E0-BBB5BEEA78AE}", AttitudeControlImpulsiveFile)
agcls.AgTypeNameMap["AttitudeControlImpulsiveFile"] = AttitudeControlImpulsiveFile

class AttitudeControlImpulsiveThrustVector(IAttitudeControlImpulsiveThrustVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The thrust vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlImpulsiveThrustVector.__init__(self, sourceObject)
        IAttitudeControlImpulsive.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlImpulsiveThrustVector._private_init(self, intf)
        IAttitudeControlImpulsive._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlImpulsiveThrustVector, [IAttitudeControlImpulsiveThrustVector, IAttitudeControlImpulsive, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{B17F3D0C-2021-4D60-80B7-1F55934FACAF}", AttitudeControlImpulsiveThrustVector)
agcls.AgTypeNameMap["AttitudeControlImpulsiveThrustVector"] = AttitudeControlImpulsiveThrustVector

class AttitudeControlFiniteAntiVelocityVector(IAttitudeControlFiniteAntiVelocityVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteAntiVelocityVector.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteAntiVelocityVector._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteAntiVelocityVector, [IAttitudeControlFiniteAntiVelocityVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{2C11B410-A573-446A-9637-A472B987A987}", AttitudeControlFiniteAntiVelocityVector)
agcls.AgTypeNameMap["AttitudeControlFiniteAntiVelocityVector"] = AttitudeControlFiniteAntiVelocityVector

class AttitudeControlFiniteAttitude(IAttitudeControlFiniteAttitude, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The attitude attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteAttitude.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteAttitude._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteAttitude, [IAttitudeControlFiniteAttitude, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{EA2C6994-7191-4CEF-9C8D-3BE0AA6BB756}", AttitudeControlFiniteAttitude)
agcls.AgTypeNameMap["AttitudeControlFiniteAttitude"] = AttitudeControlFiniteAttitude

class AttitudeControlFiniteFile(IAttitudeControlFiniteFile, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The file attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteFile.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteFile._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteFile, [IAttitudeControlFiniteFile, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{7F2333DC-4E2B-499C-9F14-A4F1932F9C62}", AttitudeControlFiniteFile)
agcls.AgTypeNameMap["AttitudeControlFiniteFile"] = AttitudeControlFiniteFile

class AttitudeControlFiniteThrustVector(IAttitudeControlFiniteThrustVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The thrust vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteThrustVector.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteThrustVector._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteThrustVector, [IAttitudeControlFiniteThrustVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{9B31C16F-C862-498D-ADFB-5C4F50D45DF1}", AttitudeControlFiniteThrustVector)
agcls.AgTypeNameMap["AttitudeControlFiniteThrustVector"] = AttitudeControlFiniteThrustVector

class AttitudeControlFiniteTimeVarying(IAttitudeControlFiniteTimeVarying, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The time varying attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteTimeVarying.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteTimeVarying._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteTimeVarying, [IAttitudeControlFiniteTimeVarying, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{F28DCCA6-0AFE-4142-BDB1-0957F1B3CB6F}", AttitudeControlFiniteTimeVarying)
agcls.AgTypeNameMap["AttitudeControlFiniteTimeVarying"] = AttitudeControlFiniteTimeVarying

class AttitudeControlFiniteVelocityVector(IAttitudeControlFiniteVelocityVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFiniteVelocityVector.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFiniteVelocityVector._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFiniteVelocityVector, [IAttitudeControlFiniteVelocityVector, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{90EE5B69-A270-4A1D-862F-C7A9A532F33F}", AttitudeControlFiniteVelocityVector)
agcls.AgTypeNameMap["AttitudeControlFiniteVelocityVector"] = AttitudeControlFiniteVelocityVector

class AttitudeControlFinitePlugin(IAttitudeControlFinitePlugin, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The plugin attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlFinitePlugin.__init__(self, sourceObject)
        IAttitudeControlFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlFinitePlugin._private_init(self, intf)
        IAttitudeControlFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlFinitePlugin, [IAttitudeControlFinitePlugin, IAttitudeControlFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{41C29436-C581-4FD2-BFFB-090FCDA9C090}", AttitudeControlFinitePlugin)
agcls.AgTypeNameMap["AttitudeControlFinitePlugin"] = AttitudeControlFinitePlugin

class AttitudeControlOptimalFiniteLagrange(IAttitudeControlOptimalFiniteLagrange, IAttitudeControlOptimalFinite, IAttitudeControl, IRuntimeTypeInfoProvider):
    """The Lagrange Interpolation attitude control for a optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAttitudeControlOptimalFiniteLagrange.__init__(self, sourceObject)
        IAttitudeControlOptimalFinite.__init__(self, sourceObject)
        IAttitudeControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAttitudeControlOptimalFiniteLagrange._private_init(self, intf)
        IAttitudeControlOptimalFinite._private_init(self, intf)
        IAttitudeControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AttitudeControlOptimalFiniteLagrange, [IAttitudeControlOptimalFiniteLagrange, IAttitudeControlOptimalFinite, IAttitudeControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{AE88E914-B911-41DB-9811-37CFBC7DAECC}", AttitudeControlOptimalFiniteLagrange)
agcls.AgTypeNameMap["AttitudeControlOptimalFiniteLagrange"] = AttitudeControlOptimalFiniteLagrange

class ManeuverFinitePropagator(IManeuverFinitePropagator, IRuntimeTypeInfoProvider):
    """Propagation for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverFinitePropagator.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverFinitePropagator._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverFinitePropagator, [IManeuverFinitePropagator, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{4F2C7CA9-D775-4CE0-8297-A8806F56F094}", ManeuverFinitePropagator)
agcls.AgTypeNameMap["ManeuverFinitePropagator"] = ManeuverFinitePropagator

class MissionControlSequenceHold(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceHold, IComponentInfo, ICloneable):
    """The Hold segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceHold.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceHold._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceHold, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceHold, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{51159257-B7FD-45E5-AB02-7FEB20D924E5}", MissionControlSequenceHold)
agcls.AgTypeNameMap["MissionControlSequenceHold"] = MissionControlSequenceHold

class MissionControlSequenceUpdate(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceUpdate, IComponentInfo, ICloneable):
    """The Update segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceUpdate.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceUpdate._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceUpdate, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceUpdate, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{3A975A07-EB14-4231-B8E7-C977B091D8B0}", MissionControlSequenceUpdate)
agcls.AgTypeNameMap["MissionControlSequenceUpdate"] = MissionControlSequenceUpdate

class MissionControlSequenceReturn(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceReturn, IComponentInfo, ICloneable):
    """The Return segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceReturn.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceReturn._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceReturn, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceReturn, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{0D4E769A-CBA7-4A17-89BA-F61B59F15D09}", MissionControlSequenceReturn)
agcls.AgTypeNameMap["MissionControlSequenceReturn"] = MissionControlSequenceReturn

class MissionControlSequenceStop(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceStop, IComponentInfo, ICloneable):
    """The Stop segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceStop.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceStop._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceStop, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceStop, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{59CF0A59-0E77-4D5F-BE88-E151D8899331}", MissionControlSequenceStop)
agcls.AgTypeNameMap["MissionControlSequenceStop"] = MissionControlSequenceStop

class MissionControlSequenceTargetSequence(IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceTargetSequence, IComponentInfo, ICloneable):
    """The Target Sequence segment."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IMissionControlSequenceTargetSequence.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
        IMissionControlSequenceTargetSequence._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceTargetSequence, [IMissionControlSequenceSegment, IRuntimeTypeInfoProvider, IMissionControlSequenceTargetSequence, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{DF528E2E-3CFD-4935-9A24-B9C9D8C0E727}", MissionControlSequenceTargetSequence)
agcls.AgTypeNameMap["MissionControlSequenceTargetSequence"] = MissionControlSequenceTargetSequence

class ProfileCollection(IProfileCollection, IRuntimeTypeInfoProvider):
    """The Profiles of a Target Sequence."""
    def __init__(self, sourceObject=None):
        IProfileCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileCollection, [IProfileCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{37B58077-200F-4763-8ED2-C4B5AFA97B2E}", ProfileCollection)
agcls.AgTypeNameMap["ProfileCollection"] = ProfileCollection

class MissionControlSequenceOptions(IMissionControlSequenceOptions):
    """The MCS Options."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceOptions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceOptions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceOptions, [IMissionControlSequenceOptions])

agcls.AgClassCatalog.add_catalog_entry("{0A469F1B-225A-48E3-9B89-0EC63C95D705}", MissionControlSequenceOptions)
agcls.AgTypeNameMap["MissionControlSequenceOptions"] = MissionControlSequenceOptions

class CalcObjectCollection(ICalcObjectCollection):
    """The Calculation Object component folder."""
    def __init__(self, sourceObject=None):
        ICalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICalcObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CalcObjectCollection, [ICalcObjectCollection])

agcls.AgClassCatalog.add_catalog_entry("{9C6165FC-8537-4B53-AC20-66F2C670A7A9}", CalcObjectCollection)
agcls.AgTypeNameMap["CalcObjectCollection"] = CalcObjectCollection

class ConstraintCollection(IConstraintCollection):
    """The Constraint component folder."""
    def __init__(self, sourceObject=None):
        IConstraintCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IConstraintCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ConstraintCollection, [IConstraintCollection])

agcls.AgClassCatalog.add_catalog_entry("{D992E5D5-AE65-4041-B3A8-DF2244DE2068}", ConstraintCollection)
agcls.AgTypeNameMap["ConstraintCollection"] = ConstraintCollection

class PluginProperties(IPluginProperties):
    """The plugin attitude control type."""
    def __init__(self, sourceObject=None):
        IPluginProperties.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPluginProperties._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PluginProperties, [IPluginProperties])

agcls.AgClassCatalog.add_catalog_entry("{A115E060-4BB8-430F-AB23-2BBE3C0C2087}", PluginProperties)
agcls.AgTypeNameMap["PluginProperties"] = PluginProperties

class ProfileSearchPlugin(IProfileSearchPlugin, IProfile, IRuntimeTypeInfoProvider):
    """The plugin search profile."""
    def __init__(self, sourceObject=None):
        IProfileSearchPlugin.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileSearchPlugin._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileSearchPlugin, [IProfileSearchPlugin, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{25E94763-B5B1-4964-B563-9AEED96D9D54}", ProfileSearchPlugin)
agcls.AgTypeNameMap["ProfileSearchPlugin"] = ProfileSearchPlugin

class TargeterGraph(ITargeterGraph, IRuntimeTypeInfoProvider):
    """Targeter Graph."""
    def __init__(self, sourceObject=None):
        ITargeterGraph.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraph._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraph, [ITargeterGraph, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{BF6E6956-1E2A-42E5-A56C-1BEF9EFB8A29}", TargeterGraph)
agcls.AgTypeNameMap["TargeterGraph"] = TargeterGraph

class TargeterGraphCollection(ITargeterGraphCollection, IRuntimeTypeInfoProvider):
    """Targeter Graphs."""
    def __init__(self, sourceObject=None):
        ITargeterGraphCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraphCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraphCollection, [ITargeterGraphCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{322FC0D0-8F69-4F4B-9247-2558D6AFF63F}", TargeterGraphCollection)
agcls.AgTypeNameMap["TargeterGraphCollection"] = TargeterGraphCollection

class TargeterGraphResultCollection(ITargeterGraphResultCollection, IRuntimeTypeInfoProvider):
    """Targeter Graph Result Collection."""
    def __init__(self, sourceObject=None):
        ITargeterGraphResultCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraphResultCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraphResultCollection, [ITargeterGraphResultCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{87090DB9-4866-40E4-BA58-BDF7C8EACCEB}", TargeterGraphResultCollection)
agcls.AgTypeNameMap["TargeterGraphResultCollection"] = TargeterGraphResultCollection

class TargeterGraphActiveControlCollection(ITargeterGraphActiveControlCollection, IRuntimeTypeInfoProvider):
    """Targeter Graph Active Control Collection."""
    def __init__(self, sourceObject=None):
        ITargeterGraphActiveControlCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraphActiveControlCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraphActiveControlCollection, [ITargeterGraphActiveControlCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{7FB70374-2313-463C-A69E-C5111C4BC1E4}", TargeterGraphActiveControlCollection)
agcls.AgTypeNameMap["TargeterGraphActiveControlCollection"] = TargeterGraphActiveControlCollection

class TargeterGraphActiveControl(ITargeterGraphActiveControl, IRuntimeTypeInfoProvider):
    """Targeter Graph Active Control."""
    def __init__(self, sourceObject=None):
        ITargeterGraphActiveControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraphActiveControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraphActiveControl, [ITargeterGraphActiveControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{E6457FA2-28BF-471B-9DCF-575B27BF588B}", TargeterGraphActiveControl)
agcls.AgTypeNameMap["TargeterGraphActiveControl"] = TargeterGraphActiveControl

class TargeterGraphResult(ITargeterGraphResult, IRuntimeTypeInfoProvider):
    """Targeter Graph Result."""
    def __init__(self, sourceObject=None):
        ITargeterGraphResult.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITargeterGraphResult._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TargeterGraphResult, [ITargeterGraphResult, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{AB6CA723-1634-4A90-AD8C-4DB34D7A2925}", TargeterGraphResult)
agcls.AgTypeNameMap["TargeterGraphResult"] = TargeterGraphResult

class ProfileDifferentialCorrector(IProfileDifferentialCorrector, IProfile, IRuntimeTypeInfoProvider):
    """The Differential Corrector profile."""
    def __init__(self, sourceObject=None):
        IProfileDifferentialCorrector.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileDifferentialCorrector._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileDifferentialCorrector, [IProfileDifferentialCorrector, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{4446E46E-A169-4F12-AE14-562D35A6BC60}", ProfileDifferentialCorrector)
agcls.AgTypeNameMap["ProfileDifferentialCorrector"] = ProfileDifferentialCorrector

class ProfileScriptingTool(IProfileScriptingTool, IProfile, IRuntimeTypeInfoProvider):
    """The Scripting Tool profile."""
    def __init__(self, sourceObject=None):
        IProfileScriptingTool.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileScriptingTool._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileScriptingTool, [IProfileScriptingTool, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{EC9D1E6F-4155-4685-AFE9-785DE109564A}", ProfileScriptingTool)
agcls.AgTypeNameMap["ProfileScriptingTool"] = ProfileScriptingTool

class DifferentialCorrectorControl(IDifferentialCorrectorControl, IRuntimeTypeInfoProvider):
    """Control Parameters for a Target Sequence."""
    def __init__(self, sourceObject=None):
        IDifferentialCorrectorControl.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDifferentialCorrectorControl._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DifferentialCorrectorControl, [IDifferentialCorrectorControl, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{5D59626C-A2D6-4D23-91C8-43D3764115C9}", DifferentialCorrectorControl)
agcls.AgTypeNameMap["DifferentialCorrectorControl"] = DifferentialCorrectorControl

class DifferentialCorrectorResult(IDifferentialCorrectorResult, IRuntimeTypeInfoProvider):
    """Differential Corrector equality constraints."""
    def __init__(self, sourceObject=None):
        IDifferentialCorrectorResult.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDifferentialCorrectorResult._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DifferentialCorrectorResult, [IDifferentialCorrectorResult, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{1F4606B6-6EB5-4349-90AD-E607DBBC6AB5}", DifferentialCorrectorResult)
agcls.AgTypeNameMap["DifferentialCorrectorResult"] = DifferentialCorrectorResult

class DifferentialCorrectorControlCollection(IDifferentialCorrectorControlCollection, IRuntimeTypeInfoProvider):
    """The collection of Control Parameters for a differential corrector profile."""
    def __init__(self, sourceObject=None):
        IDifferentialCorrectorControlCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDifferentialCorrectorControlCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DifferentialCorrectorControlCollection, [IDifferentialCorrectorControlCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{61729FE0-729A-461C-8C94-6816EC0F88E8}", DifferentialCorrectorControlCollection)
agcls.AgTypeNameMap["DifferentialCorrectorControlCollection"] = DifferentialCorrectorControlCollection

class DifferentialCorrectorResultCollection(IDifferentialCorrectorResultCollection, IRuntimeTypeInfoProvider):
    """The collection of results for a differential corrector."""
    def __init__(self, sourceObject=None):
        IDifferentialCorrectorResultCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDifferentialCorrectorResultCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DifferentialCorrectorResultCollection, [IDifferentialCorrectorResultCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{703FFB61-063E-4B38-AC0A-968903E6E929}", DifferentialCorrectorResultCollection)
agcls.AgTypeNameMap["DifferentialCorrectorResultCollection"] = DifferentialCorrectorResultCollection

class SearchPluginControl(ISearchPluginControl):
    """Control parameters for a plugin search profile."""
    def __init__(self, sourceObject=None):
        ISearchPluginControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISearchPluginControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SearchPluginControl, [ISearchPluginControl])

agcls.AgClassCatalog.add_catalog_entry("{C127E67D-2078-4605-BB16-BF4049CBDEF0}", SearchPluginControl)
agcls.AgTypeNameMap["SearchPluginControl"] = SearchPluginControl

class SearchPluginControlCollection(ISearchPluginControlCollection):
    """The list of search plugin control parameters"""
    def __init__(self, sourceObject=None):
        ISearchPluginControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISearchPluginControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SearchPluginControlCollection, [ISearchPluginControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{78A7975A-C0F5-434A-9902-411C3E975F7E}", SearchPluginControlCollection)
agcls.AgTypeNameMap["SearchPluginControlCollection"] = SearchPluginControlCollection

class SearchPluginResult(ISearchPluginResult):
    """Equality constraints for a plugin search profile."""
    def __init__(self, sourceObject=None):
        ISearchPluginResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISearchPluginResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SearchPluginResult, [ISearchPluginResult])

agcls.AgClassCatalog.add_catalog_entry("{7A3345FE-C088-4CFA-84BE-5E997BB15CF8}", SearchPluginResult)
agcls.AgTypeNameMap["SearchPluginResult"] = SearchPluginResult

class SearchPluginResultCollection(ISearchPluginResultCollection):
    """The list of search plugin equality constraints."""
    def __init__(self, sourceObject=None):
        ISearchPluginResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISearchPluginResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SearchPluginResultCollection, [ISearchPluginResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{8D37CDE6-2358-4419-9297-0032314ACB35}", SearchPluginResultCollection)
agcls.AgTypeNameMap["SearchPluginResultCollection"] = SearchPluginResultCollection

class ProfileChangeManeuverType(IProfileChangeManeuverType, IProfile, IRuntimeTypeInfoProvider):
    """The Change Maneuver Type profile."""
    def __init__(self, sourceObject=None):
        IProfileChangeManeuverType.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileChangeManeuverType._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileChangeManeuverType, [IProfileChangeManeuverType, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{8FCD3010-988A-4C88-A3E8-FB0D991B1DA3}", ProfileChangeManeuverType)
agcls.AgTypeNameMap["ProfileChangeManeuverType"] = ProfileChangeManeuverType

class ProfileChangeReturnSegment(IProfileChangeReturnSegment, IProfile, IRuntimeTypeInfoProvider):
    """The Change Return Segment profile."""
    def __init__(self, sourceObject=None):
        IProfileChangeReturnSegment.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileChangeReturnSegment._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileChangeReturnSegment, [IProfileChangeReturnSegment, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{D7436885-84AD-41DE-9D0F-7A6F001A863B}", ProfileChangeReturnSegment)
agcls.AgTypeNameMap["ProfileChangeReturnSegment"] = ProfileChangeReturnSegment

class ProfileChangePropagator(IProfileChangePropagator, IProfile, IRuntimeTypeInfoProvider):
    """The Change Propagator profile."""
    def __init__(self, sourceObject=None):
        IProfileChangePropagator.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileChangePropagator._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileChangePropagator, [IProfileChangePropagator, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{3EB69307-370B-443E-AB4F-1463A80142CD}", ProfileChangePropagator)
agcls.AgTypeNameMap["ProfileChangePropagator"] = ProfileChangePropagator

class ProfileChangeStopSegment(IProfileChangeStopSegment, IProfile, IRuntimeTypeInfoProvider):
    """The Change Stop Segment profile."""
    def __init__(self, sourceObject=None):
        IProfileChangeStopSegment.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileChangeStopSegment._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileChangeStopSegment, [IProfileChangeStopSegment, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{73CD0F57-2A67-47D7-BFAD-4E07D5045AB1}", ProfileChangeStopSegment)
agcls.AgTypeNameMap["ProfileChangeStopSegment"] = ProfileChangeStopSegment

class ProfileChangeStoppingConditionState(IProfileChangeStoppingConditionState, IProfile, IRuntimeTypeInfoProvider):
    """The Change Stopping Condition State profile."""
    def __init__(self, sourceObject=None):
        IProfileChangeStoppingConditionState.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileChangeStoppingConditionState._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileChangeStoppingConditionState, [IProfileChangeStoppingConditionState, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{593BF97D-DA25-40EC-832A-2514939CCCCB}", ProfileChangeStoppingConditionState)
agcls.AgTypeNameMap["ProfileChangeStoppingConditionState"] = ProfileChangeStoppingConditionState

class ProfileSeedFiniteManeuver(IProfileSeedFiniteManeuver, IProfile, IRuntimeTypeInfoProvider):
    """The Seed Finite Maneuver profile."""
    def __init__(self, sourceObject=None):
        IProfileSeedFiniteManeuver.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileSeedFiniteManeuver._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileSeedFiniteManeuver, [IProfileSeedFiniteManeuver, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{4524367A-A29D-401A-8B98-82FB06E4D2B3}", ProfileSeedFiniteManeuver)
agcls.AgTypeNameMap["ProfileSeedFiniteManeuver"] = ProfileSeedFiniteManeuver

class ProfileRunOnce(IProfileRunOnce, IProfile, IRuntimeTypeInfoProvider):
    """The Run Once profile."""
    def __init__(self, sourceObject=None):
        IProfileRunOnce.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileRunOnce._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileRunOnce, [IProfileRunOnce, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{6B7DC440-DAE4-4F68-BD3A-D431EF7460B4}", ProfileRunOnce)
agcls.AgTypeNameMap["ProfileRunOnce"] = ProfileRunOnce

class BPlaneCollection(IBPlaneCollection):
    """The collection of B-Planes."""
    def __init__(self, sourceObject=None):
        IBPlaneCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBPlaneCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BPlaneCollection, [IBPlaneCollection])

agcls.AgClassCatalog.add_catalog_entry("{4A33E12D-FC24-46EB-8AD4-752E5534168D}", BPlaneCollection)
agcls.AgTypeNameMap["BPlaneCollection"] = BPlaneCollection

class StateCalcDamageFlux(IStateCalcDamageFlux, IComponentInfo, ICloneable):
    """CoClass StateCalcDamageFlux."""
    def __init__(self, sourceObject=None):
        IStateCalcDamageFlux.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcDamageFlux._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDamageFlux, [IStateCalcDamageFlux, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{EFD8FBFA-6ACF-463D-9857-7C272440314F}", StateCalcDamageFlux)
agcls.AgTypeNameMap["StateCalcDamageFlux"] = StateCalcDamageFlux

class StateCalcDamageMassFlux(IStateCalcDamageMassFlux, IComponentInfo, ICloneable):
    """CoClass StateCalcDamageMassFlux."""
    def __init__(self, sourceObject=None):
        IStateCalcDamageMassFlux.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcDamageMassFlux._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDamageMassFlux, [IStateCalcDamageMassFlux, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{05A46EDD-2B3D-4505-BD42-DB7516899060}", StateCalcDamageMassFlux)
agcls.AgTypeNameMap["StateCalcDamageMassFlux"] = StateCalcDamageMassFlux

class StateCalcMagnitudeFieldDipoleL(IStateCalcMagnitudeFieldDipoleL, IComponentInfo, ICloneable):
    """CoClass StateCalcMagFieldDipoleL."""
    def __init__(self, sourceObject=None):
        IStateCalcMagnitudeFieldDipoleL.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcMagnitudeFieldDipoleL._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMagnitudeFieldDipoleL, [IStateCalcMagnitudeFieldDipoleL, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C1FD9D99-42EF-40F2-9E53-AEBAEC1A5573}", StateCalcMagnitudeFieldDipoleL)
agcls.AgTypeNameMap["StateCalcMagnitudeFieldDipoleL"] = StateCalcMagnitudeFieldDipoleL

class StateCalcSEETMagnitudeFieldFieldLineSepAngle(IComponentInfo, ICloneable, IStateCalcSEETMagnitudeFieldFieldLineSepAngle):
    """SEETMagFieldFieldLineSepAngle Calc object."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSEETMagnitudeFieldFieldLineSepAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSEETMagnitudeFieldFieldLineSepAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSEETMagnitudeFieldFieldLineSepAngle, [IComponentInfo, ICloneable, IStateCalcSEETMagnitudeFieldFieldLineSepAngle])

agcls.AgClassCatalog.add_catalog_entry("{585BF1E2-E8E0-4D8B-9101-7BDC793D6E68}", StateCalcSEETMagnitudeFieldFieldLineSepAngle)
agcls.AgTypeNameMap["StateCalcSEETMagnitudeFieldFieldLineSepAngle"] = StateCalcSEETMagnitudeFieldFieldLineSepAngle

class StateCalcImpactFlux(IStateCalcImpactFlux, IComponentInfo, ICloneable):
    """CoClass StateCalcImpactFlux."""
    def __init__(self, sourceObject=None):
        IStateCalcImpactFlux.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcImpactFlux._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcImpactFlux, [IStateCalcImpactFlux, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{2F537C47-80E4-483C-9C6F-A82F91EC5F24}", StateCalcImpactFlux)
agcls.AgTypeNameMap["StateCalcImpactFlux"] = StateCalcImpactFlux

class StateCalcImpactMassFlux(IStateCalcImpactMassFlux, IComponentInfo, ICloneable):
    """CoClass StateCalcImpactMassFlux."""
    def __init__(self, sourceObject=None):
        IStateCalcImpactMassFlux.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcImpactMassFlux._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcImpactMassFlux, [IStateCalcImpactMassFlux, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{9D64EF8C-63C9-4924-BE13-8176E3DAB180}", StateCalcImpactMassFlux)
agcls.AgTypeNameMap["StateCalcImpactMassFlux"] = StateCalcImpactMassFlux

class StateCalcSEETSAAFlux(IStateCalcSEETSAAFlux, IComponentInfo, ICloneable):
    """CoClass StateCalcSEETSAAFlux."""
    def __init__(self, sourceObject=None):
        IStateCalcSEETSAAFlux.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcSEETSAAFlux._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSEETSAAFlux, [IStateCalcSEETSAAFlux, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{3C766F5E-9727-4ACD-9E5D-D08684116A79}", StateCalcSEETSAAFlux)
agcls.AgTypeNameMap["StateCalcSEETSAAFlux"] = StateCalcSEETSAAFlux

class StateCalcSEETVehTemp(IStateCalcSEETVehTemp, IComponentInfo, ICloneable):
    """CoClass StateCalcSEETVehTemp."""
    def __init__(self, sourceObject=None):
        IStateCalcSEETVehTemp.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcSEETVehTemp._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSEETVehTemp, [IStateCalcSEETVehTemp, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{082CAA56-3DB0-4BA5-BE14-B84D93A32504}", StateCalcSEETVehTemp)
agcls.AgTypeNameMap["StateCalcSEETVehTemp"] = StateCalcSEETVehTemp

class StateCalcEpoch(IComponentInfo, ICloneable, IStateCalcEpoch):
    """Epoch Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEpoch.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEpoch._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEpoch, [IComponentInfo, ICloneable, IStateCalcEpoch])

agcls.AgClassCatalog.add_catalog_entry("{CC140708-1576-4CFA-9A28-BC454B33DE02}", StateCalcEpoch)
agcls.AgTypeNameMap["StateCalcEpoch"] = StateCalcEpoch

class StateCalcJacobiConstant(IComponentInfo, ICloneable, IStateCalcJacobiConstant):
    """Jacobi Constant Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcJacobiConstant.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcJacobiConstant._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcJacobiConstant, [IComponentInfo, ICloneable, IStateCalcJacobiConstant])

agcls.AgClassCatalog.add_catalog_entry("{FFF1FA69-1E24-445E-A239-41E2AB0D373B}", StateCalcJacobiConstant)
agcls.AgTypeNameMap["StateCalcJacobiConstant"] = StateCalcJacobiConstant

class StateCalcCartesianElem(IComponentInfo, ICloneable, IStateCalcCartesianElem):
    """Cartesian Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCartesianElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCartesianElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCartesianElem, [IComponentInfo, ICloneable, IStateCalcCartesianElem])

agcls.AgClassCatalog.add_catalog_entry("{AECA6CA7-7D04-4EB5-95D9-216BBCCD0EC1}", StateCalcCartesianElem)
agcls.AgTypeNameMap["StateCalcCartesianElem"] = StateCalcCartesianElem

class StateCalcCartSTMElem(IComponentInfo, ICloneable, IStateCalcCartSTMElem):
    """Cartesian STM Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCartSTMElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCartSTMElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCartSTMElem, [IComponentInfo, ICloneable, IStateCalcCartSTMElem])

agcls.AgClassCatalog.add_catalog_entry("{84EAF6DB-A535-421E-8CCF-95A142E3B2FE}", StateCalcCartSTMElem)
agcls.AgTypeNameMap["StateCalcCartSTMElem"] = StateCalcCartSTMElem

class StateCalcSTMEigenval(IComponentInfo, ICloneable, IStateCalcSTMEigenval):
    """Cartesian STM Eigenvalues Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSTMEigenval.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSTMEigenval._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSTMEigenval, [IComponentInfo, ICloneable, IStateCalcSTMEigenval])

agcls.AgClassCatalog.add_catalog_entry("{F3AC2C6F-7A0A-40CA-A7EC-230D9EC2D75E}", StateCalcSTMEigenval)
agcls.AgTypeNameMap["StateCalcSTMEigenval"] = StateCalcSTMEigenval

class StateCalcSTMEigenvecElem(IComponentInfo, ICloneable, IStateCalcSTMEigenvecElem):
    """Cartesian STM Eigenvector Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSTMEigenvecElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSTMEigenvecElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSTMEigenvecElem, [IComponentInfo, ICloneable, IStateCalcSTMEigenvecElem])

agcls.AgClassCatalog.add_catalog_entry("{53BF2ADA-8B4D-4E64-BC61-AFA201DAB3C7}", StateCalcSTMEigenvecElem)
agcls.AgTypeNameMap["StateCalcSTMEigenvecElem"] = StateCalcSTMEigenvecElem

class StateCalcEnvironment(IComponentInfo, ICloneable, IStateCalcEnvironment):
    """Environment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEnvironment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEnvironment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEnvironment, [IComponentInfo, ICloneable, IStateCalcEnvironment])

agcls.AgClassCatalog.add_catalog_entry("{A8319DEC-F018-4890-AC98-9F7B2AF96DF6}", StateCalcEnvironment)
agcls.AgTypeNameMap["StateCalcEnvironment"] = StateCalcEnvironment

class StateCalcOrbitDelaunayG(IStateCalcOrbitDelaunayG, IComponentInfo, ICloneable):
    """CoClass AsStateCalcOrbitDelaunayG."""
    def __init__(self, sourceObject=None):
        IStateCalcOrbitDelaunayG.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcOrbitDelaunayG._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitDelaunayG, [IStateCalcOrbitDelaunayG, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{5DE99D8D-DB40-4107-9D79-03D51AEAA4E8}", StateCalcOrbitDelaunayG)
agcls.AgTypeNameMap["StateCalcOrbitDelaunayG"] = StateCalcOrbitDelaunayG

class StateCalcOrbitDelaunayH(IStateCalcOrbitDelaunayH, IComponentInfo, ICloneable):
    """CoClass AsStateCalcOrbitDelaunayH."""
    def __init__(self, sourceObject=None):
        IStateCalcOrbitDelaunayH.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcOrbitDelaunayH._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitDelaunayH, [IStateCalcOrbitDelaunayH, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{4C7CDC1F-79EA-412B-A1E3-7E519CCAA4F0}", StateCalcOrbitDelaunayH)
agcls.AgTypeNameMap["StateCalcOrbitDelaunayH"] = StateCalcOrbitDelaunayH

class StateCalcOrbitDelaunayL(IStateCalcOrbitDelaunayL, IComponentInfo, ICloneable):
    """CoClass AsStateCalcOrbitDelaunayL."""
    def __init__(self, sourceObject=None):
        IStateCalcOrbitDelaunayL.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcOrbitDelaunayL._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitDelaunayL, [IStateCalcOrbitDelaunayL, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{299A4FF6-0636-4A25-AC74-4FF7D0A33F30}", StateCalcOrbitDelaunayL)
agcls.AgTypeNameMap["StateCalcOrbitDelaunayL"] = StateCalcOrbitDelaunayL

class StateCalcOrbitSemiLatusRectum(IStateCalcOrbitSemiLatusRectum, IComponentInfo, ICloneable):
    """CoClass AsStateCalcOrbitSemiLatusRectum."""
    def __init__(self, sourceObject=None):
        IStateCalcOrbitSemiLatusRectum.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcOrbitSemiLatusRectum._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitSemiLatusRectum, [IStateCalcOrbitSemiLatusRectum, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{9A0EF481-BE9B-47B7-81D5-CAFF636B8E31}", StateCalcOrbitSemiLatusRectum)
agcls.AgTypeNameMap["StateCalcOrbitSemiLatusRectum"] = StateCalcOrbitSemiLatusRectum

class StateCalcEquinoctialElem(IComponentInfo, ICloneable, IStateCalcEquinoctialElem):
    """Equinoctial Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEquinoctialElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEquinoctialElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEquinoctialElem, [IComponentInfo, ICloneable, IStateCalcEquinoctialElem])

agcls.AgClassCatalog.add_catalog_entry("{5C90B745-3002-4AEC-9613-0FE8168F2903}", StateCalcEquinoctialElem)
agcls.AgTypeNameMap["StateCalcEquinoctialElem"] = StateCalcEquinoctialElem

class StateCalcCloseApproachBearing(IComponentInfo, ICloneable, IStateCalcCloseApproachBearing):
    """CloseApproachBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachBearing.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachBearing._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachBearing, [IComponentInfo, ICloneable, IStateCalcCloseApproachBearing])

agcls.AgClassCatalog.add_catalog_entry("{E0AD9FFF-8F9D-4EBD-A41D-2982A60968AB}", StateCalcCloseApproachBearing)
agcls.AgTypeNameMap["StateCalcCloseApproachBearing"] = StateCalcCloseApproachBearing

class StateCalcCloseApproachMagnitude(IComponentInfo, ICloneable, IStateCalcCloseApproachMagnitude):
    """CloseApproachMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachMagnitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachMagnitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachMagnitude, [IComponentInfo, ICloneable, IStateCalcCloseApproachMagnitude])

agcls.AgClassCatalog.add_catalog_entry("{70461F34-33C2-42B4-9591-5A2F2C5EB8D2}", StateCalcCloseApproachMagnitude)
agcls.AgTypeNameMap["StateCalcCloseApproachMagnitude"] = StateCalcCloseApproachMagnitude

class StateCalcCloseApproachTheta(IComponentInfo, ICloneable, IStateCalcCloseApproachTheta):
    """CloseApproachTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachTheta.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachTheta._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachTheta, [IComponentInfo, ICloneable, IStateCalcCloseApproachTheta])

agcls.AgClassCatalog.add_catalog_entry("{950DA5FA-29AA-4422-B760-AD23CB6A33FB}", StateCalcCloseApproachTheta)
agcls.AgTypeNameMap["StateCalcCloseApproachTheta"] = StateCalcCloseApproachTheta

class StateCalcCloseApproachX(IComponentInfo, ICloneable, IStateCalcCloseApproachX):
    """CloseApproachX Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachX, [IComponentInfo, ICloneable, IStateCalcCloseApproachX])

agcls.AgClassCatalog.add_catalog_entry("{FD980AD5-6212-4A4A-AC05-4453F9015301}", StateCalcCloseApproachX)
agcls.AgTypeNameMap["StateCalcCloseApproachX"] = StateCalcCloseApproachX

class StateCalcCloseApproachY(IComponentInfo, ICloneable, IStateCalcCloseApproachY):
    """CloseApproachY Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachY, [IComponentInfo, ICloneable, IStateCalcCloseApproachY])

agcls.AgClassCatalog.add_catalog_entry("{D04565A4-C1F2-4A3D-A304-FB3CB2887087}", StateCalcCloseApproachY)
agcls.AgTypeNameMap["StateCalcCloseApproachY"] = StateCalcCloseApproachY

class StateCalcCloseApproachCosBearing(IComponentInfo, ICloneable, IStateCalcCloseApproachCosBearing):
    """CloseApproachCosBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCloseApproachCosBearing.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCloseApproachCosBearing._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCloseApproachCosBearing, [IComponentInfo, ICloneable, IStateCalcCloseApproachCosBearing])

agcls.AgClassCatalog.add_catalog_entry("{EDAFFF24-75C9-4C68-9E4B-00DEFD89DAE1}", StateCalcCloseApproachCosBearing)
agcls.AgTypeNameMap["StateCalcCloseApproachCosBearing"] = StateCalcCloseApproachCosBearing

class StateCalcRelGroundTrackError(IComponentInfo, ICloneable, IStateCalcRelGroundTrackError):
    """RelGroundTrackError Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelGroundTrackError.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelGroundTrackError._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelGroundTrackError, [IComponentInfo, ICloneable, IStateCalcRelGroundTrackError])

agcls.AgClassCatalog.add_catalog_entry("{42632E47-2FF5-4183-BB7F-9A3CDAB5E80D}", StateCalcRelGroundTrackError)
agcls.AgTypeNameMap["StateCalcRelGroundTrackError"] = StateCalcRelGroundTrackError

class StateCalcRelAtAOLMaster(IComponentInfo, ICloneable, IStateCalcRelAtAOLMaster):
    """RelAOLMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelAtAOLMaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelAtAOLMaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelAtAOLMaster, [IComponentInfo, ICloneable, IStateCalcRelAtAOLMaster])

agcls.AgClassCatalog.add_catalog_entry("{4ADF0E11-ECD1-434B-AD01-57FD9F0A692A}", StateCalcRelAtAOLMaster)
agcls.AgTypeNameMap["StateCalcRelAtAOLMaster"] = StateCalcRelAtAOLMaster

class StateCalcDeltaFromMaster(IComponentInfo, ICloneable, IStateCalcDeltaFromMaster):
    """DeltaFromMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDeltaFromMaster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDeltaFromMaster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDeltaFromMaster, [IComponentInfo, ICloneable, IStateCalcDeltaFromMaster])

agcls.AgClassCatalog.add_catalog_entry("{F88A3044-F12D-4147-8609-B71F3AD972F4}", StateCalcDeltaFromMaster)
agcls.AgTypeNameMap["StateCalcDeltaFromMaster"] = StateCalcDeltaFromMaster

class StateCalcLonDriftRate(IComponentInfo, ICloneable, IStateCalcLonDriftRate):
    """LongDriftRate Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcLonDriftRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcLonDriftRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcLonDriftRate, [IComponentInfo, ICloneable, IStateCalcLonDriftRate])

agcls.AgClassCatalog.add_catalog_entry("{87C78155-DC4F-42C1-B2A6-D48E10F79594}", StateCalcLonDriftRate)
agcls.AgTypeNameMap["StateCalcLonDriftRate"] = StateCalcLonDriftRate

class StateCalcMeanEarthLon(IComponentInfo, ICloneable, IStateCalcMeanEarthLon):
    """MeanEarthLon Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMeanEarthLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMeanEarthLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMeanEarthLon, [IComponentInfo, ICloneable, IStateCalcMeanEarthLon])

agcls.AgClassCatalog.add_catalog_entry("{0D4E3AF8-45A3-4000-BB8A-B6D8323627AD}", StateCalcMeanEarthLon)
agcls.AgTypeNameMap["StateCalcMeanEarthLon"] = StateCalcMeanEarthLon

class StateCalcRectifiedLon(IComponentInfo, ICloneable, IStateCalcRectifiedLon):
    """RectifiedLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRectifiedLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRectifiedLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRectifiedLon, [IComponentInfo, ICloneable, IStateCalcRectifiedLon])

agcls.AgClassCatalog.add_catalog_entry("{ED61CCC5-71C7-4D2D-BB7D-BF177E6B9D7A}", StateCalcRectifiedLon)
agcls.AgTypeNameMap["StateCalcRectifiedLon"] = StateCalcRectifiedLon

class StateCalcTrueLongitude(IComponentInfo, ICloneable, IStateCalcTrueLongitude):
    """TrueLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTrueLongitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTrueLongitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTrueLongitude, [IComponentInfo, ICloneable, IStateCalcTrueLongitude])

agcls.AgClassCatalog.add_catalog_entry("{EB667B87-04A5-4685-9F72-DBB764F488B5}", StateCalcTrueLongitude)
agcls.AgTypeNameMap["StateCalcTrueLongitude"] = StateCalcTrueLongitude

class StateCalcGeodeticTrueLongitude(IComponentInfo, ICloneable, IStateCalcGeodeticTrueLongitude):
    """GeodeticTrueLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcGeodeticTrueLongitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcGeodeticTrueLongitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGeodeticTrueLongitude, [IComponentInfo, ICloneable, IStateCalcGeodeticTrueLongitude])

agcls.AgClassCatalog.add_catalog_entry("{619B549B-4824-4D2D-A11B-EB8398871C67}", StateCalcGeodeticTrueLongitude)
agcls.AgTypeNameMap["StateCalcGeodeticTrueLongitude"] = StateCalcGeodeticTrueLongitude

class StateCalcGeodeticTrueLongitudeAtTimeOfPerigee(IComponentInfo, ICloneable, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee):
    """GeodeticTrueLongitudeAtTimeOfPerigee Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGeodeticTrueLongitudeAtTimeOfPerigee, [IComponentInfo, ICloneable, IStateCalcGeodeticTrueLongitudeAtTimeOfPerigee])

agcls.AgClassCatalog.add_catalog_entry("{C6C19B72-22D7-4871-A658-5A2C46FA1DE5}", StateCalcGeodeticTrueLongitudeAtTimeOfPerigee)
agcls.AgTypeNameMap["StateCalcGeodeticTrueLongitudeAtTimeOfPerigee"] = StateCalcGeodeticTrueLongitudeAtTimeOfPerigee

class StateCalcMeanRightAscension(IComponentInfo, ICloneable, IStateCalcMeanRightAscension):
    """MeanRightAscension Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMeanRightAscension.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMeanRightAscension._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMeanRightAscension, [IComponentInfo, ICloneable, IStateCalcMeanRightAscension])

agcls.AgClassCatalog.add_catalog_entry("{A98B4722-77F9-4EB8-B9BC-D36C8D56AEA9}", StateCalcMeanRightAscension)
agcls.AgTypeNameMap["StateCalcMeanRightAscension"] = StateCalcMeanRightAscension

class StateCalcGeodeticMeanRightAscension(IComponentInfo, ICloneable, IStateCalcGeodeticMeanRightAscension):
    """GeodeticMeanRightAscension Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcGeodeticMeanRightAscension.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcGeodeticMeanRightAscension._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGeodeticMeanRightAscension, [IComponentInfo, ICloneable, IStateCalcGeodeticMeanRightAscension])

agcls.AgClassCatalog.add_catalog_entry("{143B6D03-5CAE-4AA3-84EE-3D83A1BA9BD9}", StateCalcGeodeticMeanRightAscension)
agcls.AgTypeNameMap["StateCalcGeodeticMeanRightAscension"] = StateCalcGeodeticMeanRightAscension

class StateCalcTwoBodyDriftRate(IComponentInfo, ICloneable, IStateCalcTwoBodyDriftRate):
    """TwoBodyDriftRate Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTwoBodyDriftRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTwoBodyDriftRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTwoBodyDriftRate, [IComponentInfo, ICloneable, IStateCalcTwoBodyDriftRate])

agcls.AgClassCatalog.add_catalog_entry("{117D07A4-0253-4AB7-B96C-17B1350EB663}", StateCalcTwoBodyDriftRate)
agcls.AgTypeNameMap["StateCalcTwoBodyDriftRate"] = StateCalcTwoBodyDriftRate

class StateCalcDriftRateFactor(IComponentInfo, ICloneable, IStateCalcDriftRateFactor):
    """DriftRateFactor Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDriftRateFactor.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDriftRateFactor._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDriftRateFactor, [IComponentInfo, ICloneable, IStateCalcDriftRateFactor])

agcls.AgClassCatalog.add_catalog_entry("{01BCEE54-F8E9-4E89-B154-951ECD5A0A3D}", StateCalcDriftRateFactor)
agcls.AgTypeNameMap["StateCalcDriftRateFactor"] = StateCalcDriftRateFactor

class StateCalcEccentricityX(IComponentInfo, ICloneable, IStateCalcEccentricityX):
    """EccentricityX Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEccentricityX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEccentricityX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEccentricityX, [IComponentInfo, ICloneable, IStateCalcEccentricityX])

agcls.AgClassCatalog.add_catalog_entry("{4BBA291A-C5F4-43DC-8394-34BC45F744A5}", StateCalcEccentricityX)
agcls.AgTypeNameMap["StateCalcEccentricityX"] = StateCalcEccentricityX

class StateCalcEccentricityY(IComponentInfo, ICloneable, IStateCalcEccentricityY):
    """EccentricityY Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEccentricityY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEccentricityY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEccentricityY, [IComponentInfo, ICloneable, IStateCalcEccentricityY])

agcls.AgClassCatalog.add_catalog_entry("{807AD8EE-0486-481B-9EEC-C9406E8D1FF1}", StateCalcEccentricityY)
agcls.AgTypeNameMap["StateCalcEccentricityY"] = StateCalcEccentricityY

class StateCalcInclinationX(IComponentInfo, ICloneable, IStateCalcInclinationX):
    """InclinationX Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInclinationX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInclinationX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInclinationX, [IComponentInfo, ICloneable, IStateCalcInclinationX])

agcls.AgClassCatalog.add_catalog_entry("{0041C813-5B5A-4A26-A56F-A9823EF778E3}", StateCalcInclinationX)
agcls.AgTypeNameMap["StateCalcInclinationX"] = StateCalcInclinationX

class StateCalcInclinationY(IComponentInfo, ICloneable, IStateCalcInclinationY):
    """InclinationY Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInclinationY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInclinationY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInclinationY, [IComponentInfo, ICloneable, IStateCalcInclinationY])

agcls.AgClassCatalog.add_catalog_entry("{ED938D28-BA63-437E-B1DB-A7D8115B328C}", StateCalcInclinationY)
agcls.AgTypeNameMap["StateCalcInclinationY"] = StateCalcInclinationY

class StateCalcUnitAngularMomentumX(IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumX):
    """UnitAngularMomentumX Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcUnitAngularMomentumX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcUnitAngularMomentumX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcUnitAngularMomentumX, [IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumX])

agcls.AgClassCatalog.add_catalog_entry("{53357EF4-239F-4B9A-A438-B51790C448BF}", StateCalcUnitAngularMomentumX)
agcls.AgTypeNameMap["StateCalcUnitAngularMomentumX"] = StateCalcUnitAngularMomentumX

class StateCalcUnitAngularMomentumY(IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumY):
    """UnitAngularMomentumY Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcUnitAngularMomentumY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcUnitAngularMomentumY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcUnitAngularMomentumY, [IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumY])

agcls.AgClassCatalog.add_catalog_entry("{900693FD-BAAC-426E-8682-EEC85D239CB6}", StateCalcUnitAngularMomentumY)
agcls.AgTypeNameMap["StateCalcUnitAngularMomentumY"] = StateCalcUnitAngularMomentumY

class StateCalcUnitAngularMomentumZ(IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumZ):
    """UnitAngularMomentumZ Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcUnitAngularMomentumZ.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcUnitAngularMomentumZ._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcUnitAngularMomentumZ, [IComponentInfo, ICloneable, IStateCalcUnitAngularMomentumZ])

agcls.AgClassCatalog.add_catalog_entry("{560184A9-46F4-4B62-8742-E72700D90640}", StateCalcUnitAngularMomentumZ)
agcls.AgTypeNameMap["StateCalcUnitAngularMomentumZ"] = StateCalcUnitAngularMomentumZ

class StateCalcHeightAboveTerrain(IStateCalcHeightAboveTerrain, IComponentInfo, ICloneable):
    """CoClass AsStateCalcHeightAboveTerrain."""
    def __init__(self, sourceObject=None):
        IStateCalcHeightAboveTerrain.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcHeightAboveTerrain._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcHeightAboveTerrain, [IStateCalcHeightAboveTerrain, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{3212361D-8A8B-4ED0-94C8-2D6F69BC3A12}", StateCalcHeightAboveTerrain)
agcls.AgTypeNameMap["StateCalcHeightAboveTerrain"] = StateCalcHeightAboveTerrain

class StateCalcGeodeticElem(IComponentInfo, ICloneable, IStateCalcGeodeticElem):
    """Geodetic Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcGeodeticElem.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcGeodeticElem._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGeodeticElem, [IComponentInfo, ICloneable, IStateCalcGeodeticElem])

agcls.AgClassCatalog.add_catalog_entry("{C22E7F23-171B-4A81-AF2B-6A3747D92FDA}", StateCalcGeodeticElem)
agcls.AgTypeNameMap["StateCalcGeodeticElem"] = StateCalcGeodeticElem

class StateCalcRepeatingGroundTrackErr(IComponentInfo, ICloneable, IStateCalcRepeatingGroundTrackErr):
    """RepeatingGrTrackErr Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRepeatingGroundTrackErr.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRepeatingGroundTrackErr._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRepeatingGroundTrackErr, [IComponentInfo, ICloneable, IStateCalcRepeatingGroundTrackErr])

agcls.AgClassCatalog.add_catalog_entry("{2D4ADF81-8403-42A7-9CD8-969B9C5FEF33}", StateCalcRepeatingGroundTrackErr)
agcls.AgTypeNameMap["StateCalcRepeatingGroundTrackErr"] = StateCalcRepeatingGroundTrackErr

class StateCalcAltitudeOfApoapsis(IComponentInfo, ICloneable, IStateCalcAltitudeOfApoapsis):
    """AltitudeOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcAltitudeOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcAltitudeOfApoapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcAltitudeOfApoapsis, [IComponentInfo, ICloneable, IStateCalcAltitudeOfApoapsis])

agcls.AgClassCatalog.add_catalog_entry("{A9398A62-DC62-40F2-8C71-C4D10D180C28}", StateCalcAltitudeOfApoapsis)
agcls.AgTypeNameMap["StateCalcAltitudeOfApoapsis"] = StateCalcAltitudeOfApoapsis

class StateCalcAltitudeOfPeriapsis(IComponentInfo, ICloneable, IStateCalcAltitudeOfPeriapsis):
    """AltitudeOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcAltitudeOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcAltitudeOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcAltitudeOfPeriapsis, [IComponentInfo, ICloneable, IStateCalcAltitudeOfPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{700481E3-804B-4F43-B0AB-D58472F26302}", StateCalcAltitudeOfPeriapsis)
agcls.AgTypeNameMap["StateCalcAltitudeOfPeriapsis"] = StateCalcAltitudeOfPeriapsis

class StateCalcArgOfLat(IComponentInfo, ICloneable, IStateCalcArgOfLat):
    """Argument of Latitude Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcArgOfLat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcArgOfLat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcArgOfLat, [IComponentInfo, ICloneable, IStateCalcArgOfLat])

agcls.AgClassCatalog.add_catalog_entry("{E3D0D3CF-1181-4F67-98D9-2CA6A5530372}", StateCalcArgOfLat)
agcls.AgTypeNameMap["StateCalcArgOfLat"] = StateCalcArgOfLat

class StateCalcArgOfPeriapsis(IComponentInfo, ICloneable, IStateCalcArgOfPeriapsis):
    """Argument of Periapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcArgOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcArgOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcArgOfPeriapsis, [IComponentInfo, ICloneable, IStateCalcArgOfPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{64C0F0D2-889C-4EE2-BD26-B32BC6880733}", StateCalcArgOfPeriapsis)
agcls.AgTypeNameMap["StateCalcArgOfPeriapsis"] = StateCalcArgOfPeriapsis

class StateCalcEccentricityAnomaly(IComponentInfo, ICloneable, IStateCalcEccentricityAnomaly):
    """EccAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEccentricityAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEccentricityAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEccentricityAnomaly, [IComponentInfo, ICloneable, IStateCalcEccentricityAnomaly])

agcls.AgClassCatalog.add_catalog_entry("{56C8EC47-95B0-4BF3-8D07-1F51630C285B}", StateCalcEccentricityAnomaly)
agcls.AgTypeNameMap["StateCalcEccentricityAnomaly"] = StateCalcEccentricityAnomaly

class StateCalcLonOfAscNode(IComponentInfo, ICloneable, IStateCalcLonOfAscNode):
    """LongitudeOfAscendingNode Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcLonOfAscNode.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcLonOfAscNode._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcLonOfAscNode, [IComponentInfo, ICloneable, IStateCalcLonOfAscNode])

agcls.AgClassCatalog.add_catalog_entry("{2B606060-6816-4394-B4C5-C527490F9329}", StateCalcLonOfAscNode)
agcls.AgTypeNameMap["StateCalcLonOfAscNode"] = StateCalcLonOfAscNode

class StateCalcMeanMotion(IComponentInfo, ICloneable, IStateCalcMeanMotion):
    """MeanMotion Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMeanMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMeanMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMeanMotion, [IComponentInfo, ICloneable, IStateCalcMeanMotion])

agcls.AgClassCatalog.add_catalog_entry("{B18119FD-D9C9-41E2-A7EB-46ACDA5CA8D5}", StateCalcMeanMotion)
agcls.AgTypeNameMap["StateCalcMeanMotion"] = StateCalcMeanMotion

class StateCalcOrbitPeriod(IComponentInfo, ICloneable, IStateCalcOrbitPeriod):
    """OrbitPeriod Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOrbitPeriod.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOrbitPeriod._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitPeriod, [IComponentInfo, ICloneable, IStateCalcOrbitPeriod])

agcls.AgClassCatalog.add_catalog_entry("{D7563267-B5E5-43C5-8062-E07CCA0F2B84}", StateCalcOrbitPeriod)
agcls.AgTypeNameMap["StateCalcOrbitPeriod"] = StateCalcOrbitPeriod

class StateCalcNumRevs(IComponentInfo, ICloneable, IStateCalcNumRevs):
    """NumRevs Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcNumRevs.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcNumRevs._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcNumRevs, [IComponentInfo, ICloneable, IStateCalcNumRevs])

agcls.AgClassCatalog.add_catalog_entry("{D0585F2A-3F22-472C-B134-5A6DE1873010}", StateCalcNumRevs)
agcls.AgTypeNameMap["StateCalcNumRevs"] = StateCalcNumRevs

class StateCalcRadOfApoapsis(IComponentInfo, ICloneable, IStateCalcRadOfApoapsis):
    """RadiusOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRadOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRadOfApoapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRadOfApoapsis, [IComponentInfo, ICloneable, IStateCalcRadOfApoapsis])

agcls.AgClassCatalog.add_catalog_entry("{C0BE1DA2-4518-4DDC-9E9F-C270EECC9CD9}", StateCalcRadOfApoapsis)
agcls.AgTypeNameMap["StateCalcRadOfApoapsis"] = StateCalcRadOfApoapsis

class StateCalcRadOfPeriapsis(IComponentInfo, ICloneable, IStateCalcRadOfPeriapsis):
    """RadiusOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRadOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRadOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRadOfPeriapsis, [IComponentInfo, ICloneable, IStateCalcRadOfPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{3992203A-6D30-4430-AB47-184058ADB753}", StateCalcRadOfPeriapsis)
agcls.AgTypeNameMap["StateCalcRadOfPeriapsis"] = StateCalcRadOfPeriapsis

class StateCalcSemiMajorAxis(IComponentInfo, ICloneable, IStateCalcSemiMajorAxis):
    """SemiMajorAxis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSemiMajorAxis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSemiMajorAxis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSemiMajorAxis, [IComponentInfo, ICloneable, IStateCalcSemiMajorAxis])

agcls.AgClassCatalog.add_catalog_entry("{2E89613E-B6BE-4708-9642-8C1A7734E695}", StateCalcSemiMajorAxis)
agcls.AgTypeNameMap["StateCalcSemiMajorAxis"] = StateCalcSemiMajorAxis

class StateCalcTimePastAscNode(IComponentInfo, ICloneable, IStateCalcTimePastAscNode):
    """TimePastAscNode Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTimePastAscNode.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTimePastAscNode._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTimePastAscNode, [IComponentInfo, ICloneable, IStateCalcTimePastAscNode])

agcls.AgClassCatalog.add_catalog_entry("{0D19A235-5062-4D39-9D24-5BE1951E8982}", StateCalcTimePastAscNode)
agcls.AgTypeNameMap["StateCalcTimePastAscNode"] = StateCalcTimePastAscNode

class StateCalcTimePastPeriapsis(IComponentInfo, ICloneable, IStateCalcTimePastPeriapsis):
    """TimePastPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTimePastPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTimePastPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTimePastPeriapsis, [IComponentInfo, ICloneable, IStateCalcTimePastPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{98C81CE6-0D11-4B0B-A6E6-3BD36BBCB98E}", StateCalcTimePastPeriapsis)
agcls.AgTypeNameMap["StateCalcTimePastPeriapsis"] = StateCalcTimePastPeriapsis

class StateCalcTrueAnomaly(IComponentInfo, ICloneable, IStateCalcTrueAnomaly):
    """TrueAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTrueAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTrueAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTrueAnomaly, [IComponentInfo, ICloneable, IStateCalcTrueAnomaly])

agcls.AgClassCatalog.add_catalog_entry("{4F084E44-4214-46EF-B67C-0A0B160F6475}", StateCalcTrueAnomaly)
agcls.AgTypeNameMap["StateCalcTrueAnomaly"] = StateCalcTrueAnomaly

class StateCalcDeltaV(IComponentInfo, ICloneable, IStateCalcDeltaV):
    """DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDeltaV, [IComponentInfo, ICloneable, IStateCalcDeltaV])

agcls.AgClassCatalog.add_catalog_entry("{1609A9CD-8AA8-4F97-A00F-35F014FCCE44}", StateCalcDeltaV)
agcls.AgTypeNameMap["StateCalcDeltaV"] = StateCalcDeltaV

class StateCalcDeltaVSquared(IComponentInfo, ICloneable, IStateCalcDeltaVSquared):
    """DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDeltaVSquared, [IComponentInfo, ICloneable, IStateCalcDeltaVSquared])

agcls.AgClassCatalog.add_catalog_entry("{CF7792EC-113B-45A7-AD9E-ECC908EBE1FD}", StateCalcDeltaVSquared)
agcls.AgTypeNameMap["StateCalcDeltaVSquared"] = StateCalcDeltaVSquared

class StateCalcMissionControlSequenceDeltaV(IComponentInfo, ICloneable, IStateCalcMissionControlSequenceDeltaV):
    """MCS DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMissionControlSequenceDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMissionControlSequenceDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMissionControlSequenceDeltaV, [IComponentInfo, ICloneable, IStateCalcMissionControlSequenceDeltaV])

agcls.AgClassCatalog.add_catalog_entry("{8E6614E7-7F46-4A9C-B155-FD8ED6C08D94}", StateCalcMissionControlSequenceDeltaV)
agcls.AgTypeNameMap["StateCalcMissionControlSequenceDeltaV"] = StateCalcMissionControlSequenceDeltaV

class StateCalcMissionControlSequenceDeltaVSquared(IComponentInfo, ICloneable, IStateCalcMissionControlSequenceDeltaVSquared):
    """MCS DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMissionControlSequenceDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMissionControlSequenceDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMissionControlSequenceDeltaVSquared, [IComponentInfo, ICloneable, IStateCalcMissionControlSequenceDeltaVSquared])

agcls.AgClassCatalog.add_catalog_entry("{DA10B4C1-62C7-4E1C-8B86-A355667DF9AE}", StateCalcMissionControlSequenceDeltaVSquared)
agcls.AgTypeNameMap["StateCalcMissionControlSequenceDeltaVSquared"] = StateCalcMissionControlSequenceDeltaVSquared

class StateCalcSequenceDeltaV(IComponentInfo, ICloneable, IStateCalcSequenceDeltaV):
    """Sequence DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSequenceDeltaV.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSequenceDeltaV._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSequenceDeltaV, [IComponentInfo, ICloneable, IStateCalcSequenceDeltaV])

agcls.AgClassCatalog.add_catalog_entry("{138B7BC6-2338-46BE-83E9-5099C4D45811}", StateCalcSequenceDeltaV)
agcls.AgTypeNameMap["StateCalcSequenceDeltaV"] = StateCalcSequenceDeltaV

class StateCalcSequenceDeltaVSquared(IComponentInfo, ICloneable, IStateCalcSequenceDeltaVSquared):
    """Sequence DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSequenceDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSequenceDeltaVSquared._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSequenceDeltaVSquared, [IComponentInfo, ICloneable, IStateCalcSequenceDeltaVSquared])

agcls.AgClassCatalog.add_catalog_entry("{27E104DF-B5FF-4E24-B397-06D264C0EADA}", StateCalcSequenceDeltaVSquared)
agcls.AgTypeNameMap["StateCalcSequenceDeltaVSquared"] = StateCalcSequenceDeltaVSquared

class StateCalcFuelMass(IComponentInfo, ICloneable, IStateCalcFuelMass):
    """FuelMass Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcFuelMass.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcFuelMass._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcFuelMass, [IComponentInfo, ICloneable, IStateCalcFuelMass])

agcls.AgClassCatalog.add_catalog_entry("{3C37AFCA-696D-4A00-9E7B-7DCE928F0E7E}", StateCalcFuelMass)
agcls.AgTypeNameMap["StateCalcFuelMass"] = StateCalcFuelMass

class StateCalcDensity(IComponentInfo, ICloneable, IStateCalcDensity):
    """Density  Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDensity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDensity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDensity, [IComponentInfo, ICloneable, IStateCalcDensity])

agcls.AgClassCatalog.add_catalog_entry("{61D869F6-7B1C-4B5D-A046-AE495AE0FA7E}", StateCalcDensity)
agcls.AgTypeNameMap["StateCalcDensity"] = StateCalcDensity

class StateCalcInertialDeltaVMagnitude(IComponentInfo, ICloneable, IStateCalcInertialDeltaVMagnitude):
    """InertialDeltaVMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInertialDeltaVMagnitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInertialDeltaVMagnitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInertialDeltaVMagnitude, [IComponentInfo, ICloneable, IStateCalcInertialDeltaVMagnitude])

agcls.AgClassCatalog.add_catalog_entry("{E12A8E9C-C11A-43D1-AE06-C659B87574D3}", StateCalcInertialDeltaVMagnitude)
agcls.AgTypeNameMap["StateCalcInertialDeltaVMagnitude"] = StateCalcInertialDeltaVMagnitude

class StateCalcInertialDeltaVx(IComponentInfo, ICloneable, IStateCalcInertialDeltaVx):
    """InertialDeltaVx Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInertialDeltaVx.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInertialDeltaVx._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInertialDeltaVx, [IComponentInfo, ICloneable, IStateCalcInertialDeltaVx])

agcls.AgClassCatalog.add_catalog_entry("{43875512-BFCF-42E9-ACC8-BA7AE9E498A9}", StateCalcInertialDeltaVx)
agcls.AgTypeNameMap["StateCalcInertialDeltaVx"] = StateCalcInertialDeltaVx

class StateCalcInertialDeltaVy(IComponentInfo, ICloneable, IStateCalcInertialDeltaVy):
    """InertialDeltaVy Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInertialDeltaVy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInertialDeltaVy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInertialDeltaVy, [IComponentInfo, ICloneable, IStateCalcInertialDeltaVy])

agcls.AgClassCatalog.add_catalog_entry("{04689A0A-12D1-4362-B5C8-497CF2E4D72E}", StateCalcInertialDeltaVy)
agcls.AgTypeNameMap["StateCalcInertialDeltaVy"] = StateCalcInertialDeltaVy

class StateCalcInertialDeltaVz(IComponentInfo, ICloneable, IStateCalcInertialDeltaVz):
    """InertialDeltaVz Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInertialDeltaVz.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInertialDeltaVz._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInertialDeltaVz, [IComponentInfo, ICloneable, IStateCalcInertialDeltaVz])

agcls.AgClassCatalog.add_catalog_entry("{4A160495-31AE-42EE-8D2D-B945D10E86B8}", StateCalcInertialDeltaVz)
agcls.AgTypeNameMap["StateCalcInertialDeltaVz"] = StateCalcInertialDeltaVz

class StateCalcManeuverSpecificImpulse(IComponentInfo, ICloneable, IStateCalcManeuverSpecificImpulse):
    """ManeuverSpecificImpulse Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcManeuverSpecificImpulse.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcManeuverSpecificImpulse._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcManeuverSpecificImpulse, [IComponentInfo, ICloneable, IStateCalcManeuverSpecificImpulse])

agcls.AgClassCatalog.add_catalog_entry("{8FEFF2C1-6E15-4026-95B3-1985DB40C154}", StateCalcManeuverSpecificImpulse)
agcls.AgTypeNameMap["StateCalcManeuverSpecificImpulse"] = StateCalcManeuverSpecificImpulse

class StateCalcPressure(IComponentInfo, ICloneable, IStateCalcPressure):
    """Pressure Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcPressure.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcPressure._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcPressure, [IComponentInfo, ICloneable, IStateCalcPressure])

agcls.AgClassCatalog.add_catalog_entry("{B12DCC30-F655-428A-BDE1-6D46900A7152}", StateCalcPressure)
agcls.AgTypeNameMap["StateCalcPressure"] = StateCalcPressure

class StateCalcTemperature(IComponentInfo, ICloneable, IStateCalcTemperature):
    """Temperature Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTemperature.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTemperature._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTemperature, [IComponentInfo, ICloneable, IStateCalcTemperature])

agcls.AgClassCatalog.add_catalog_entry("{130771EF-F7FE-4CD3-B547-DE13FDF54E94}", StateCalcTemperature)
agcls.AgTypeNameMap["StateCalcTemperature"] = StateCalcTemperature

class StateCalcVectorY(IComponentInfo, ICloneable, IStateCalcVectorY):
    """VectorY Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorY.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorY._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorY, [IComponentInfo, ICloneable, IStateCalcVectorY])

agcls.AgClassCatalog.add_catalog_entry("{7DC4C32E-1F4B-4B3E-A11C-7ECACCC602F8}", StateCalcVectorY)
agcls.AgTypeNameMap["StateCalcVectorY"] = StateCalcVectorY

class StateCalcVectorZ(IComponentInfo, ICloneable, IStateCalcVectorZ):
    """VectorZ Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorZ.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorZ._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorZ, [IComponentInfo, ICloneable, IStateCalcVectorZ])

agcls.AgClassCatalog.add_catalog_entry("{32E8F7E7-ECDE-4864-B380-D5A293458898}", StateCalcVectorZ)
agcls.AgTypeNameMap["StateCalcVectorZ"] = StateCalcVectorZ

class StateCalcMass(IComponentInfo, ICloneable, IStateCalcMass):
    """Mass Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMass.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMass._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMass, [IComponentInfo, ICloneable, IStateCalcMass])

agcls.AgClassCatalog.add_catalog_entry("{99DD4422-3EB6-455B-9FE8-459FD65D2431}", StateCalcMass)
agcls.AgTypeNameMap["StateCalcMass"] = StateCalcMass

class StateCalcManeuverTotalMassFlowRate(IComponentInfo, ICloneable, IStateCalcManeuverTotalMassFlowRate):
    """ManeuverTotalMassFlowRate Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcManeuverTotalMassFlowRate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcManeuverTotalMassFlowRate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcManeuverTotalMassFlowRate, [IComponentInfo, ICloneable, IStateCalcManeuverTotalMassFlowRate])

agcls.AgClassCatalog.add_catalog_entry("{049DA4A7-E8EB-4C62-AF0F-FFF566CB662F}", StateCalcManeuverTotalMassFlowRate)
agcls.AgTypeNameMap["StateCalcManeuverTotalMassFlowRate"] = StateCalcManeuverTotalMassFlowRate

class StateCalcAbsoluteValue(IComponentInfo, ICloneable, IStateCalcAbsoluteValue):
    """AbsoluteValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcAbsoluteValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcAbsoluteValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcAbsoluteValue, [IComponentInfo, ICloneable, IStateCalcAbsoluteValue])

agcls.AgClassCatalog.add_catalog_entry("{9CA8D97F-2F2D-4E66-B141-D5F8E3524B56}", StateCalcAbsoluteValue)
agcls.AgTypeNameMap["StateCalcAbsoluteValue"] = StateCalcAbsoluteValue

class StateCalcDifference(IComponentInfo, ICloneable, IStateCalcDifference):
    """Difference Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDifference.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDifference._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDifference, [IComponentInfo, ICloneable, IStateCalcDifference])

agcls.AgClassCatalog.add_catalog_entry("{8D579CBD-FB96-4CA1-9276-0ECF1E8A2854}", StateCalcDifference)
agcls.AgTypeNameMap["StateCalcDifference"] = StateCalcDifference

class StateCalcDifferenceOtherSegment(IComponentInfo, ICloneable, IStateCalcDifferenceOtherSegment):
    """DifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDifferenceOtherSegment, [IComponentInfo, ICloneable, IStateCalcDifferenceOtherSegment])

agcls.AgClassCatalog.add_catalog_entry("{36A3C1BA-F2AB-4F4C-887C-CF81C4E2BE52}", StateCalcDifferenceOtherSegment)
agcls.AgTypeNameMap["StateCalcDifferenceOtherSegment"] = StateCalcDifferenceOtherSegment

class StateCalcPositionDifferenceOtherSegment(IComponentInfo, ICloneable, IStateCalcPositionDifferenceOtherSegment):
    """PosDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcPositionDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcPositionDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcPositionDifferenceOtherSegment, [IComponentInfo, ICloneable, IStateCalcPositionDifferenceOtherSegment])

agcls.AgClassCatalog.add_catalog_entry("{9C09C061-9C4A-4B14-A9DC-C802A44A8AF1}", StateCalcPositionDifferenceOtherSegment)
agcls.AgTypeNameMap["StateCalcPositionDifferenceOtherSegment"] = StateCalcPositionDifferenceOtherSegment

class StateCalcVelDifferenceOtherSegment(IComponentInfo, ICloneable, IStateCalcVelDifferenceOtherSegment):
    """VelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVelDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVelDifferenceOtherSegment, [IComponentInfo, ICloneable, IStateCalcVelDifferenceOtherSegment])

agcls.AgClassCatalog.add_catalog_entry("{C884D996-39EF-413B-9CF7-A8C927291B66}", StateCalcVelDifferenceOtherSegment)
agcls.AgTypeNameMap["StateCalcVelDifferenceOtherSegment"] = StateCalcVelDifferenceOtherSegment

class StateCalcPositionVelDifferenceOtherSegment(IComponentInfo, ICloneable, IStateCalcPositionVelDifferenceOtherSegment):
    """PosVelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcPositionVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcPositionVelDifferenceOtherSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcPositionVelDifferenceOtherSegment, [IComponentInfo, ICloneable, IStateCalcPositionVelDifferenceOtherSegment])

agcls.AgClassCatalog.add_catalog_entry("{C7AFF6F3-C2C7-4132-BEB5-9A714E763A11}", StateCalcPositionVelDifferenceOtherSegment)
agcls.AgTypeNameMap["StateCalcPositionVelDifferenceOtherSegment"] = StateCalcPositionVelDifferenceOtherSegment

class StateCalcValueAtSegment(IComponentInfo, ICloneable, IStateCalcValueAtSegment):
    """ValueAtSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcValueAtSegment.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcValueAtSegment._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcValueAtSegment, [IComponentInfo, ICloneable, IStateCalcValueAtSegment])

agcls.AgClassCatalog.add_catalog_entry("{80E8AAA2-2782-4176-9656-61AC3485096B}", StateCalcValueAtSegment)
agcls.AgTypeNameMap["StateCalcValueAtSegment"] = StateCalcValueAtSegment

class StateCalcMaxValue(IComponentInfo, ICloneable, IStateCalcMaxValue):
    """MaximumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMaxValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMaxValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMaxValue, [IComponentInfo, ICloneable, IStateCalcMaxValue])

agcls.AgClassCatalog.add_catalog_entry("{CC82EA8F-373C-4A0D-A753-96CFD4AE73CF}", StateCalcMaxValue)
agcls.AgTypeNameMap["StateCalcMaxValue"] = StateCalcMaxValue

class StateCalcMinValue(IComponentInfo, ICloneable, IStateCalcMinValue):
    """MinimumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMinValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMinValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMinValue, [IComponentInfo, ICloneable, IStateCalcMinValue])

agcls.AgClassCatalog.add_catalog_entry("{F9C57411-482D-49E9-BE13-CC93E34FB0D4}", StateCalcMinValue)
agcls.AgTypeNameMap["StateCalcMinValue"] = StateCalcMinValue

class StateCalcMeanValue(IComponentInfo, ICloneable, IStateCalcMeanValue):
    """MeanValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMeanValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMeanValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMeanValue, [IComponentInfo, ICloneable, IStateCalcMeanValue])

agcls.AgClassCatalog.add_catalog_entry("{9B5472A7-799A-43E6-BDE7-99CB2C8C6E0C}", StateCalcMeanValue)
agcls.AgTypeNameMap["StateCalcMeanValue"] = StateCalcMeanValue

class StateCalcMedianValue(IComponentInfo, ICloneable, IStateCalcMedianValue):
    """MedianValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMedianValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMedianValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMedianValue, [IComponentInfo, ICloneable, IStateCalcMedianValue])

agcls.AgClassCatalog.add_catalog_entry("{CE3A18D7-5A69-45A1-AA76-AD7C2CF5259A}", StateCalcMedianValue)
agcls.AgTypeNameMap["StateCalcMedianValue"] = StateCalcMedianValue

class StateCalcStandardDeviation(IComponentInfo, ICloneable, IStateCalcStandardDeviation):
    """StandardDeviation Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcStandardDeviation.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcStandardDeviation._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcStandardDeviation, [IComponentInfo, ICloneable, IStateCalcStandardDeviation])

agcls.AgClassCatalog.add_catalog_entry("{B33D3070-060B-4F32-AF2A-1F9BDD57F365}", StateCalcStandardDeviation)
agcls.AgTypeNameMap["StateCalcStandardDeviation"] = StateCalcStandardDeviation

class StateCalcNegative(IComponentInfo, ICloneable, IStateCalcNegative):
    """Negative Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcNegative.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcNegative._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcNegative, [IComponentInfo, ICloneable, IStateCalcNegative])

agcls.AgClassCatalog.add_catalog_entry("{3E13FEC3-D60F-4203-86F2-42BCBC8EAFDF}", StateCalcNegative)
agcls.AgTypeNameMap["StateCalcNegative"] = StateCalcNegative

class StateCalcEccentricity(IComponentInfo, ICloneable, IStateCalcEccentricity):
    """Eccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEccentricity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEccentricity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEccentricity, [IComponentInfo, ICloneable, IStateCalcEccentricity])

agcls.AgClassCatalog.add_catalog_entry("{A9D98D60-E73E-4C59-9328-DFC5A12EF52B}", StateCalcEccentricity)
agcls.AgTypeNameMap["StateCalcEccentricity"] = StateCalcEccentricity

class StateCalcMeanAnomaly(IComponentInfo, ICloneable, IStateCalcMeanAnomaly):
    """MeanAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcMeanAnomaly.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcMeanAnomaly._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcMeanAnomaly, [IComponentInfo, ICloneable, IStateCalcMeanAnomaly])

agcls.AgClassCatalog.add_catalog_entry("{8787D9AA-FBE1-43E4-932F-CB7B98D23D5B}", StateCalcMeanAnomaly)
agcls.AgTypeNameMap["StateCalcMeanAnomaly"] = StateCalcMeanAnomaly

class StateCalcRAAN(IComponentInfo, ICloneable, IStateCalcRAAN):
    """RAAN Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRAAN.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRAAN._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRAAN, [IComponentInfo, ICloneable, IStateCalcRAAN])

agcls.AgClassCatalog.add_catalog_entry("{05B5185A-C8F3-4B02-AE8B-B5D58744323C}", StateCalcRAAN)
agcls.AgTypeNameMap["StateCalcRAAN"] = StateCalcRAAN

class BDotRCalc(IComponentInfo, ICloneable, IBDotRCalc):
    """BDotR Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IBDotRCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IBDotRCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BDotRCalc, [IComponentInfo, ICloneable, IBDotRCalc])

agcls.AgClassCatalog.add_catalog_entry("{18A16428-2959-4220-A4A2-571D1F5A67FC}", BDotRCalc)
agcls.AgTypeNameMap["BDotRCalc"] = BDotRCalc

class BDotTCalc(IComponentInfo, ICloneable, IBDotTCalc):
    """BDotT Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IBDotTCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IBDotTCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BDotTCalc, [IComponentInfo, ICloneable, IBDotTCalc])

agcls.AgClassCatalog.add_catalog_entry("{59ACA04A-9B85-43DF-82FF-B58CFD985158}", BDotTCalc)
agcls.AgTypeNameMap["BDotTCalc"] = BDotTCalc

class BMagnitudeCalc(IComponentInfo, ICloneable, IBMagnitudeCalc):
    """BMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IBMagnitudeCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IBMagnitudeCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BMagnitudeCalc, [IComponentInfo, ICloneable, IBMagnitudeCalc])

agcls.AgClassCatalog.add_catalog_entry("{87EF9CCA-2D0E-4742-8354-79E977FFD067}", BMagnitudeCalc)
agcls.AgTypeNameMap["BMagnitudeCalc"] = BMagnitudeCalc

class BThetaCalc(IComponentInfo, ICloneable, IBThetaCalc):
    """BTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IBThetaCalc.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IBThetaCalc._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BThetaCalc, [IComponentInfo, ICloneable, IBThetaCalc])

agcls.AgClassCatalog.add_catalog_entry("{C5C6EC0C-6F2D-4DAB-9DCD-2A8FD810C642}", BThetaCalc)
agcls.AgTypeNameMap["BThetaCalc"] = BThetaCalc

class StateCalcDeltaDec(IComponentInfo, ICloneable, IStateCalcDeltaDec):
    """DeltaDec Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDeltaDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDeltaDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDeltaDec, [IComponentInfo, ICloneable, IStateCalcDeltaDec])

agcls.AgClassCatalog.add_catalog_entry("{4EA9E58A-9900-41CF-BFA8-8BF7849C9187}", StateCalcDeltaDec)
agcls.AgTypeNameMap["StateCalcDeltaDec"] = StateCalcDeltaDec

class StateCalcDeltaRA(IComponentInfo, ICloneable, IStateCalcDeltaRA):
    """DeltaRA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDeltaRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDeltaRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDeltaRA, [IComponentInfo, ICloneable, IStateCalcDeltaRA])

agcls.AgClassCatalog.add_catalog_entry("{3B1EAA2E-8FA2-4EF2-B7AB-377157AD0505}", StateCalcDeltaRA)
agcls.AgTypeNameMap["StateCalcDeltaRA"] = StateCalcDeltaRA

class StateCalcBetaAngle(IComponentInfo, ICloneable, IStateCalcBetaAngle):
    """BetaAngle Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcBetaAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcBetaAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcBetaAngle, [IComponentInfo, ICloneable, IStateCalcBetaAngle])

agcls.AgClassCatalog.add_catalog_entry("{B51815A6-AEDE-468C-B282-EEA255DAF822}", StateCalcBetaAngle)
agcls.AgTypeNameMap["StateCalcBetaAngle"] = StateCalcBetaAngle

class StateCalcLocalApparentSolarLon(IComponentInfo, ICloneable, IStateCalcLocalApparentSolarLon):
    """LocalApparentSolarLon Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcLocalApparentSolarLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcLocalApparentSolarLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcLocalApparentSolarLon, [IComponentInfo, ICloneable, IStateCalcLocalApparentSolarLon])

agcls.AgClassCatalog.add_catalog_entry("{E7AC3C2D-5E4C-447F-8A56-C9CFCDBB2143}", StateCalcLocalApparentSolarLon)
agcls.AgTypeNameMap["StateCalcLocalApparentSolarLon"] = StateCalcLocalApparentSolarLon

class StateCalcLonOfPeriapsis(IComponentInfo, ICloneable, IStateCalcLonOfPeriapsis):
    """LonOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcLonOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcLonOfPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcLonOfPeriapsis, [IComponentInfo, ICloneable, IStateCalcLonOfPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{3DBA2AA2-6A87-4ACE-9F8D-C03001E1DBD1}", StateCalcLonOfPeriapsis)
agcls.AgTypeNameMap["StateCalcLonOfPeriapsis"] = StateCalcLonOfPeriapsis

class StateCalcOrbitStateValue(IComponentInfo, ICloneable, IStateCalcOrbitStateValue):
    """OrbitStateValue Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOrbitStateValue.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOrbitStateValue._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOrbitStateValue, [IComponentInfo, ICloneable, IStateCalcOrbitStateValue])

agcls.AgClassCatalog.add_catalog_entry("{10879C56-0D1C-4E8E-B7CA-F059FB935366}", StateCalcOrbitStateValue)
agcls.AgTypeNameMap["StateCalcOrbitStateValue"] = StateCalcOrbitStateValue

class StateCalcSignedEccentricity(IComponentInfo, ICloneable, IStateCalcSignedEccentricity):
    """SignedEccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSignedEccentricity.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSignedEccentricity._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSignedEccentricity, [IComponentInfo, ICloneable, IStateCalcSignedEccentricity])

agcls.AgClassCatalog.add_catalog_entry("{469C3DB7-C322-480A-82E2-4763AD59E470}", StateCalcSignedEccentricity)
agcls.AgTypeNameMap["StateCalcSignedEccentricity"] = StateCalcSignedEccentricity

class StateCalcInclination(IComponentInfo, ICloneable, IStateCalcInclination):
    """Inclination Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInclination.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInclination._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInclination, [IComponentInfo, ICloneable, IStateCalcInclination])

agcls.AgClassCatalog.add_catalog_entry("{1B8A0935-D9A7-4710-8C02-8A827F7D85DF}", StateCalcInclination)
agcls.AgTypeNameMap["StateCalcInclination"] = StateCalcInclination

class StateCalcTrueLon(IComponentInfo, ICloneable, IStateCalcTrueLon):
    """TrueLong Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcTrueLon.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcTrueLon._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcTrueLon, [IComponentInfo, ICloneable, IStateCalcTrueLon])

agcls.AgClassCatalog.add_catalog_entry("{E1D740A4-341A-40AA-83E8-4456207A0D98}", StateCalcTrueLon)
agcls.AgTypeNameMap["StateCalcTrueLon"] = StateCalcTrueLon

class StateCalcPower(IComponentInfo, ICloneable, IStateCalcPower):
    """Power Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcPower.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcPower._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcPower, [IComponentInfo, ICloneable, IStateCalcPower])

agcls.AgClassCatalog.add_catalog_entry("{AE828349-BB26-44C8-9603-ED89F108DF82}", StateCalcPower)
agcls.AgTypeNameMap["StateCalcPower"] = StateCalcPower

class StateCalcRelMotion(IComponentInfo, ICloneable, IStateCalcRelMotion):
    """Relative Motion Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelMotion, [IComponentInfo, ICloneable, IStateCalcRelMotion])

agcls.AgClassCatalog.add_catalog_entry("{1BE88040-9A43-40B0-9A3F-28C1AE4FCC33}", StateCalcRelMotion)
agcls.AgTypeNameMap["StateCalcRelMotion"] = StateCalcRelMotion

class StateCalcSolarBetaAngle(IComponentInfo, ICloneable, IStateCalcSolarBetaAngle):
    """Solar Beta Angle objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSolarBetaAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSolarBetaAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSolarBetaAngle, [IComponentInfo, ICloneable, IStateCalcSolarBetaAngle])

agcls.AgClassCatalog.add_catalog_entry("{A2AFBF81-9B6D-4675-B8A3-2995530B257F}", StateCalcSolarBetaAngle)
agcls.AgTypeNameMap["StateCalcSolarBetaAngle"] = StateCalcSolarBetaAngle

class StateCalcSolarInPlaneAngle(IComponentInfo, ICloneable, IStateCalcSolarInPlaneAngle):
    """Solar In Plane Angle objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSolarInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSolarInPlaneAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSolarInPlaneAngle, [IComponentInfo, ICloneable, IStateCalcSolarInPlaneAngle])

agcls.AgClassCatalog.add_catalog_entry("{AF76B597-61AE-41E7-B7F9-47AB9FA06A23}", StateCalcSolarInPlaneAngle)
agcls.AgTypeNameMap["StateCalcSolarInPlaneAngle"] = StateCalcSolarInPlaneAngle

class StateCalcRelPositionDecAngle(IComponentInfo, ICloneable, IStateCalcRelPositionDecAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelPositionDecAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelPositionDecAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelPositionDecAngle, [IComponentInfo, ICloneable, IStateCalcRelPositionDecAngle])

agcls.AgClassCatalog.add_catalog_entry("{75D53DB6-15AE-43CE-8ABC-5B8568CEE035}", StateCalcRelPositionDecAngle)
agcls.AgTypeNameMap["StateCalcRelPositionDecAngle"] = StateCalcRelPositionDecAngle

class StateCalcRelPositionInPlaneAngle(IComponentInfo, ICloneable, IStateCalcRelPositionInPlaneAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelPositionInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelPositionInPlaneAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelPositionInPlaneAngle, [IComponentInfo, ICloneable, IStateCalcRelPositionInPlaneAngle])

agcls.AgClassCatalog.add_catalog_entry("{4F7C4C55-BAB3-484D-B110-4A34A6F1A006}", StateCalcRelPositionInPlaneAngle)
agcls.AgTypeNameMap["StateCalcRelPositionInPlaneAngle"] = StateCalcRelPositionInPlaneAngle

class StateCalcRelativeInclination(IComponentInfo, ICloneable, IStateCalcRelativeInclination):
    """Relative Inclination Angle objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRelativeInclination.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRelativeInclination._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRelativeInclination, [IComponentInfo, ICloneable, IStateCalcRelativeInclination])

agcls.AgClassCatalog.add_catalog_entry("{B2BAF85F-8B05-4261-8E40-428FD9F6A237}", StateCalcRelativeInclination)
agcls.AgTypeNameMap["StateCalcRelativeInclination"] = StateCalcRelativeInclination

class StateCalcCurvilinearRelMotion(IComponentInfo, ICloneable, IStateCalcCurvilinearRelMotion):
    """Curvilinear Relative Motion objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCurvilinearRelMotion.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCurvilinearRelMotion._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCurvilinearRelMotion, [IComponentInfo, ICloneable, IStateCalcCurvilinearRelMotion])

agcls.AgClassCatalog.add_catalog_entry("{1FBB6D32-A2AD-4914-940D-30E548147C35}", StateCalcCurvilinearRelMotion)
agcls.AgTypeNameMap["StateCalcCurvilinearRelMotion"] = StateCalcCurvilinearRelMotion

class StateCalcCustomFunction(IComponentInfo, ICloneable, IStateCalcCustomFunction):
    """Custom Function Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCustomFunction.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCustomFunction._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCustomFunction, [IComponentInfo, ICloneable, IStateCalcCustomFunction])

agcls.AgClassCatalog.add_catalog_entry("{85022653-0E1C-4116-AC71-AE8AE17AD8AB}", StateCalcCustomFunction)
agcls.AgTypeNameMap["StateCalcCustomFunction"] = StateCalcCustomFunction

class StateCalcScript(IComponentInfo, ICloneable, IStateCalcScript):
    """Script Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcScript.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcScript._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcScript, [IComponentInfo, ICloneable, IStateCalcScript])

agcls.AgClassCatalog.add_catalog_entry("{5D44239C-5296-4B55-B0A6-810D2A709B20}", StateCalcScript)
agcls.AgTypeNameMap["StateCalcScript"] = StateCalcScript

class StateCalcCd(IComponentInfo, ICloneable, IStateCalcCd):
    """Cd Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCd.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCd._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCd, [IComponentInfo, ICloneable, IStateCalcCd])

agcls.AgClassCatalog.add_catalog_entry("{9672871F-3A83-41E8-851E-509DD513C3E3}", StateCalcCd)
agcls.AgTypeNameMap["StateCalcCd"] = StateCalcCd

class StateCalcCr(IComponentInfo, ICloneable, IStateCalcCr):
    """Cr Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCr.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCr._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCr, [IComponentInfo, ICloneable, IStateCalcCr])

agcls.AgClassCatalog.add_catalog_entry("{1AAFF1B0-616E-4A1C-9CE0-075D24C3B170}", StateCalcCr)
agcls.AgTypeNameMap["StateCalcCr"] = StateCalcCr

class StateCalcDragArea(IComponentInfo, ICloneable, IStateCalcDragArea):
    """DragArea Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDragArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDragArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDragArea, [IComponentInfo, ICloneable, IStateCalcDragArea])

agcls.AgClassCatalog.add_catalog_entry("{3ED247EF-6E67-4883-A2FE-B2A7BF19E14E}", StateCalcDragArea)
agcls.AgTypeNameMap["StateCalcDragArea"] = StateCalcDragArea

class StateCalcRadiationPressureArea(IComponentInfo, ICloneable, IStateCalcRadiationPressureArea):
    """RadPressureArea Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRadiationPressureArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRadiationPressureArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRadiationPressureArea, [IComponentInfo, ICloneable, IStateCalcRadiationPressureArea])

agcls.AgClassCatalog.add_catalog_entry("{C7973875-9EFC-41FC-98CF-CCB7AE0C611F}", StateCalcRadiationPressureArea)
agcls.AgTypeNameMap["StateCalcRadiationPressureArea"] = StateCalcRadiationPressureArea

class StateCalcRadiationPressureCoefficient(IComponentInfo, ICloneable, IStateCalcRadiationPressureCoefficient):
    """RadiationPressureCoefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRadiationPressureCoefficient.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRadiationPressureCoefficient._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRadiationPressureCoefficient, [IComponentInfo, ICloneable, IStateCalcRadiationPressureCoefficient])

agcls.AgClassCatalog.add_catalog_entry("{7FDC4AD9-E570-4820-BFB3-939EA5FF7D82}", StateCalcRadiationPressureCoefficient)
agcls.AgTypeNameMap["StateCalcRadiationPressureCoefficient"] = StateCalcRadiationPressureCoefficient

class StateCalcSRPArea(IComponentInfo, ICloneable, IStateCalcSRPArea):
    """SRPArea Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcSRPArea.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcSRPArea._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSRPArea, [IComponentInfo, ICloneable, IStateCalcSRPArea])

agcls.AgClassCatalog.add_catalog_entry("{6A0BF963-BD8C-46F9-8C87-F6E0FF16D057}", StateCalcSRPArea)
agcls.AgTypeNameMap["StateCalcSRPArea"] = StateCalcSRPArea

class StateCalcCosOfVerticalFPA(IComponentInfo, ICloneable, IStateCalcCosOfVerticalFPA):
    """CosineOfVerticalFPA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcCosOfVerticalFPA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcCosOfVerticalFPA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcCosOfVerticalFPA, [IComponentInfo, ICloneable, IStateCalcCosOfVerticalFPA])

agcls.AgClassCatalog.add_catalog_entry("{779C8E84-1667-442C-BFD9-F20271803FE5}", StateCalcCosOfVerticalFPA)
agcls.AgTypeNameMap["StateCalcCosOfVerticalFPA"] = StateCalcCosOfVerticalFPA

class StateCalcDec(IComponentInfo, ICloneable, IStateCalcDec):
    """Dec Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDec, [IComponentInfo, ICloneable, IStateCalcDec])

agcls.AgClassCatalog.add_catalog_entry("{3F821D80-1156-46EB-950F-FF965EB54C3C}", StateCalcDec)
agcls.AgTypeNameMap["StateCalcDec"] = StateCalcDec

class StateCalcFPA(IComponentInfo, ICloneable, IStateCalcFPA):
    """FPA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcFPA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcFPA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcFPA, [IComponentInfo, ICloneable, IStateCalcFPA])

agcls.AgClassCatalog.add_catalog_entry("{BAB717ED-41A9-4D2A-ADB3-F2D0F5BD67D6}", StateCalcFPA)
agcls.AgTypeNameMap["StateCalcFPA"] = StateCalcFPA

class StateCalcRMagnitude(IComponentInfo, ICloneable, IStateCalcRMagnitude):
    """RMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRMagnitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRMagnitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRMagnitude, [IComponentInfo, ICloneable, IStateCalcRMagnitude])

agcls.AgClassCatalog.add_catalog_entry("{4EED7719-E95B-4482-936C-9940FF6EE774}", StateCalcRMagnitude)
agcls.AgTypeNameMap["StateCalcRMagnitude"] = StateCalcRMagnitude

class StateCalcRA(IComponentInfo, ICloneable, IStateCalcRA):
    """RA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRA, [IComponentInfo, ICloneable, IStateCalcRA])

agcls.AgClassCatalog.add_catalog_entry("{2482280B-347A-49C7-BEEB-044CD8F8C899}", StateCalcRA)
agcls.AgTypeNameMap["StateCalcRA"] = StateCalcRA

class StateCalcVMagnitude(IComponentInfo, ICloneable, IStateCalcVMagnitude):
    """VMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVMagnitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVMagnitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVMagnitude, [IComponentInfo, ICloneable, IStateCalcVMagnitude])

agcls.AgClassCatalog.add_catalog_entry("{B2DD548E-6DD5-4C33-9EDC-8275A4711B70}", StateCalcVMagnitude)
agcls.AgTypeNameMap["StateCalcVMagnitude"] = StateCalcVMagnitude

class StateCalcVelAz(IComponentInfo, ICloneable, IStateCalcVelAz):
    """Velocity Azimuth Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVelAz.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVelAz._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVelAz, [IComponentInfo, ICloneable, IStateCalcVelAz])

agcls.AgClassCatalog.add_catalog_entry("{51BBAEBF-08A7-47B0-82A2-49DD3B47C0DA}", StateCalcVelAz)
agcls.AgTypeNameMap["StateCalcVelAz"] = StateCalcVelAz

class StateCalcC3Energy(IComponentInfo, ICloneable, IStateCalcC3Energy):
    """C3Energy Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcC3Energy.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcC3Energy._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcC3Energy, [IComponentInfo, ICloneable, IStateCalcC3Energy])

agcls.AgClassCatalog.add_catalog_entry("{3F05AC7C-3565-44C8-BD75-A9F26F5DEBE7}", StateCalcC3Energy)
agcls.AgTypeNameMap["StateCalcC3Energy"] = StateCalcC3Energy

class StateCalcInAsympDec(IComponentInfo, ICloneable, IStateCalcInAsympDec):
    """InAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInAsympDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInAsympDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInAsympDec, [IComponentInfo, ICloneable, IStateCalcInAsympDec])

agcls.AgClassCatalog.add_catalog_entry("{74C3D08C-5CBE-4182-9C50-5607CFAE3C29}", StateCalcInAsympDec)
agcls.AgTypeNameMap["StateCalcInAsympDec"] = StateCalcInAsympDec

class StateCalcInAsympRA(IComponentInfo, ICloneable, IStateCalcInAsympRA):
    """InAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInAsympRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInAsympRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInAsympRA, [IComponentInfo, ICloneable, IStateCalcInAsympRA])

agcls.AgClassCatalog.add_catalog_entry("{FA6F2B49-B25B-4726-A72B-EB01DA9A40FA}", StateCalcInAsympRA)
agcls.AgTypeNameMap["StateCalcInAsympRA"] = StateCalcInAsympRA

class StateCalcInVelAzAtPeriapsis(IComponentInfo, ICloneable, IStateCalcInVelAzAtPeriapsis):
    """InVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcInVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcInVelAzAtPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcInVelAzAtPeriapsis, [IComponentInfo, ICloneable, IStateCalcInVelAzAtPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{F425CF2E-5BD8-47E0-86FB-8E6911450DC2}", StateCalcInVelAzAtPeriapsis)
agcls.AgTypeNameMap["StateCalcInVelAzAtPeriapsis"] = StateCalcInVelAzAtPeriapsis

class StateCalcOutAsympDec(IComponentInfo, ICloneable, IStateCalcOutAsympDec):
    """OutAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOutAsympDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOutAsympDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOutAsympDec, [IComponentInfo, ICloneable, IStateCalcOutAsympDec])

agcls.AgClassCatalog.add_catalog_entry("{E6479974-FCA0-4BB3-9218-5EA7FBC6B309}", StateCalcOutAsympDec)
agcls.AgTypeNameMap["StateCalcOutAsympDec"] = StateCalcOutAsympDec

class StateCalcOutAsympRA(IComponentInfo, ICloneable, IStateCalcOutAsympRA):
    """OutAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOutAsympRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOutAsympRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOutAsympRA, [IComponentInfo, ICloneable, IStateCalcOutAsympRA])

agcls.AgClassCatalog.add_catalog_entry("{5FD80B29-8811-4669-9830-E00AC6A65B7A}", StateCalcOutAsympRA)
agcls.AgTypeNameMap["StateCalcOutAsympRA"] = StateCalcOutAsympRA

class StateCalcOutVelAzAtPeriapsis(IComponentInfo, ICloneable, IStateCalcOutVelAzAtPeriapsis):
    """OutVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOutVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOutVelAzAtPeriapsis._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOutVelAzAtPeriapsis, [IComponentInfo, ICloneable, IStateCalcOutVelAzAtPeriapsis])

agcls.AgClassCatalog.add_catalog_entry("{6FACAD87-7615-433A-BED5-B79F771BF045}", StateCalcOutVelAzAtPeriapsis)
agcls.AgTypeNameMap["StateCalcOutVelAzAtPeriapsis"] = StateCalcOutVelAzAtPeriapsis

class StateCalcDuration(IComponentInfo, ICloneable, IStateCalcDuration):
    """Duration Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDuration.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDuration._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDuration, [IComponentInfo, ICloneable, IStateCalcDuration])

agcls.AgClassCatalog.add_catalog_entry("{8A31F99F-B1EA-4818-B3F7-6485F142BEDA}", StateCalcDuration)
agcls.AgTypeNameMap["StateCalcDuration"] = StateCalcDuration

class StateCalcUserValue(IStateCalcUserValue, IComponentInfo, ICloneable):
    """CoClass StateCalcUserValue."""
    def __init__(self, sourceObject=None):
        IStateCalcUserValue.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcUserValue._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcUserValue, [IStateCalcUserValue, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{DF6CDC8E-3271-4671-851E-6D8916364D04}", StateCalcUserValue)
agcls.AgTypeNameMap["StateCalcUserValue"] = StateCalcUserValue

class StateCalcVectorGeometryToolAngle(IComponentInfo, ICloneable, IStateCalcVectorGeometryToolAngle):
    """Vector Geometry Tool Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorGeometryToolAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorGeometryToolAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorGeometryToolAngle, [IComponentInfo, ICloneable, IStateCalcVectorGeometryToolAngle])

agcls.AgClassCatalog.add_catalog_entry("{382A3B1B-6CB2-4E54-A066-C0B62EF241C8}", StateCalcVectorGeometryToolAngle)
agcls.AgTypeNameMap["StateCalcVectorGeometryToolAngle"] = StateCalcVectorGeometryToolAngle

class StateCalcAngle(IComponentInfo, ICloneable, IStateCalcAngle):
    """Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcAngle.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcAngle._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcAngle, [IComponentInfo, ICloneable, IStateCalcAngle])

agcls.AgClassCatalog.add_catalog_entry("{C19A5EF8-79AF-48F2-9D09-86AE97CC689A}", StateCalcAngle)
agcls.AgTypeNameMap["StateCalcAngle"] = StateCalcAngle

class StateCalcDotProduct(IComponentInfo, ICloneable, IStateCalcDotProduct):
    """DotProduct Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDotProduct.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDotProduct._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDotProduct, [IComponentInfo, ICloneable, IStateCalcDotProduct])

agcls.AgClassCatalog.add_catalog_entry("{B8E6B301-8959-44D9-B9EC-70FEA1B5B12D}", StateCalcDotProduct)
agcls.AgTypeNameMap["StateCalcDotProduct"] = StateCalcDotProduct

class StateCalcVectorDec(IComponentInfo, ICloneable, IStateCalcVectorDec):
    """VectorDec Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorDec.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorDec._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorDec, [IComponentInfo, ICloneable, IStateCalcVectorDec])

agcls.AgClassCatalog.add_catalog_entry("{F5F90539-F030-4840-A78F-7BFE9FE6852F}", StateCalcVectorDec)
agcls.AgTypeNameMap["StateCalcVectorDec"] = StateCalcVectorDec

class StateCalcVectorMagnitude(IComponentInfo, ICloneable, IStateCalcVectorMagnitude):
    """VectorMag Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorMagnitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorMagnitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorMagnitude, [IComponentInfo, ICloneable, IStateCalcVectorMagnitude])

agcls.AgClassCatalog.add_catalog_entry("{AE89CDB6-F735-4DAB-88D3-7F2DD834C1E4}", StateCalcVectorMagnitude)
agcls.AgTypeNameMap["StateCalcVectorMagnitude"] = StateCalcVectorMagnitude

class StateCalcVectorRA(IComponentInfo, ICloneable, IStateCalcVectorRA):
    """VectorRA Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorRA.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorRA._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorRA, [IComponentInfo, ICloneable, IStateCalcVectorRA])

agcls.AgClassCatalog.add_catalog_entry("{CE22AAAD-F51C-4E90-8E74-5DCEE756020C}", StateCalcVectorRA)
agcls.AgTypeNameMap["StateCalcVectorRA"] = StateCalcVectorRA

class StateCalcVectorX(IComponentInfo, ICloneable, IStateCalcVectorX):
    """VectorX Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcVectorX.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcVectorX._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcVectorX, [IComponentInfo, ICloneable, IStateCalcVectorX])

agcls.AgClassCatalog.add_catalog_entry("{9CC56135-C9E6-4A99-B0E2-70EA81E9AB08}", StateCalcVectorX)
agcls.AgTypeNameMap["StateCalcVectorX"] = StateCalcVectorX

class StateCalcOnePointAccess(IComponentInfo, ICloneable, IStateCalcOnePointAccess):
    """Access Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcOnePointAccess.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcOnePointAccess._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcOnePointAccess, [IComponentInfo, ICloneable, IStateCalcOnePointAccess])

agcls.AgClassCatalog.add_catalog_entry("{19CBB92F-B6BE-4F6B-A2F9-056AD2EF7940}", StateCalcOnePointAccess)
agcls.AgTypeNameMap["StateCalcOnePointAccess"] = StateCalcOnePointAccess

class StateCalcDifferenceAcrossSegmentsOtherSat(IComponentInfo, ICloneable, IStateCalcDifferenceAcrossSegmentsOtherSat):
    """DifferenceAcrossSegmentsOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcDifferenceAcrossSegmentsOtherSat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcDifferenceAcrossSegmentsOtherSat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDifferenceAcrossSegmentsOtherSat, [IComponentInfo, ICloneable, IStateCalcDifferenceAcrossSegmentsOtherSat])

agcls.AgClassCatalog.add_catalog_entry("{83FAC79B-477F-4CD0-83AD-A0A2A9ECA782}", StateCalcDifferenceAcrossSegmentsOtherSat)
agcls.AgTypeNameMap["StateCalcDifferenceAcrossSegmentsOtherSat"] = StateCalcDifferenceAcrossSegmentsOtherSat

class StateCalcValueAtSegmentOtherSat(IComponentInfo, ICloneable, IStateCalcValueAtSegmentOtherSat):
    """ValueAtSegmentOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcValueAtSegmentOtherSat.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcValueAtSegmentOtherSat._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcValueAtSegmentOtherSat, [IComponentInfo, ICloneable, IStateCalcValueAtSegmentOtherSat])

agcls.AgClassCatalog.add_catalog_entry("{5F9F3194-5AC1-46C9-8FB9-F076747180E7}", StateCalcValueAtSegmentOtherSat)
agcls.AgTypeNameMap["StateCalcValueAtSegmentOtherSat"] = StateCalcValueAtSegmentOtherSat

class StateCalcRARate(IStateCalcRARate, IComponentInfo, ICloneable):
    """RightAscensionRate Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcRARate.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcRARate._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcRARate, [IStateCalcRARate, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{3B9AD865-10A2-4B52-BDC7-7BE11A2CD36D}", StateCalcRARate)
agcls.AgTypeNameMap["StateCalcRARate"] = StateCalcRARate

class StateCalcDecRate(IStateCalcDecRate, IComponentInfo, ICloneable):
    """DeclinationRate Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcDecRate.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcDecRate._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcDecRate, [IStateCalcDecRate, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{CCE41365-840A-4B9A-967F-A7D1E761B2DF}", StateCalcDecRate)
agcls.AgTypeNameMap["StateCalcDecRate"] = StateCalcDecRate

class StateCalcGravitationalParameter(IStateCalcGravitationalParameter, IComponentInfo, ICloneable):
    """GravitationalParameter Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcGravitationalParameter.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcGravitationalParameter._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGravitationalParameter, [IStateCalcGravitationalParameter, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{0B3B8CA7-E0BC-4A0E-A0BE-026946EBF0A6}", StateCalcGravitationalParameter)
agcls.AgTypeNameMap["StateCalcGravitationalParameter"] = StateCalcGravitationalParameter

class StateCalcReferenceRadius(IStateCalcReferenceRadius, IComponentInfo, ICloneable):
    """Reference Radius Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcReferenceRadius.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcReferenceRadius._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcReferenceRadius, [IStateCalcReferenceRadius, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C90B0911-1B88-4809-A9AD-B1F083E18808}", StateCalcReferenceRadius)
agcls.AgTypeNameMap["StateCalcReferenceRadius"] = StateCalcReferenceRadius

class StateCalcGravCoeff(IStateCalcGravCoeff, IComponentInfo, ICloneable):
    """Gravity Coefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcGravCoeff.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcGravCoeff._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcGravCoeff, [IStateCalcGravCoeff, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{30223DC9-7946-4480-8E8A-DB3393DFEFC8}", StateCalcGravCoeff)
agcls.AgTypeNameMap["StateCalcGravCoeff"] = StateCalcGravCoeff

class StateCalcSpeedOfLight(IStateCalcSpeedOfLight, IComponentInfo, ICloneable):
    """Speed Of Light Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcSpeedOfLight.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcSpeedOfLight._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcSpeedOfLight, [IStateCalcSpeedOfLight, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{BB3D0551-655B-43D3-89BE-59816A9B2DF4}", StateCalcSpeedOfLight)
agcls.AgTypeNameMap["StateCalcSpeedOfLight"] = StateCalcSpeedOfLight

class StateCalcPi(IStateCalcPi, IComponentInfo, ICloneable):
    """Pi Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcPi.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcPi._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcPi, [IStateCalcPi, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{81779742-2FD6-4E22-81C5-05F1D271944F}", StateCalcPi)
agcls.AgTypeNameMap["StateCalcPi"] = StateCalcPi

class StateCalcScalar(IStateCalcScalar, IComponentInfo, ICloneable):
    """Scalar Calc objects."""
    def __init__(self, sourceObject=None):
        IStateCalcScalar.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateCalcScalar._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcScalar, [IStateCalcScalar, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C6136D77-3185-4A4C-83AA-90CC6713A07A}", StateCalcScalar)
agcls.AgTypeNameMap["StateCalcScalar"] = StateCalcScalar

class StateCalcApparentSolarTime(IComponentInfo, ICloneable, IStateCalcApparentSolarTime):
    """Apparent Solar Time Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcApparentSolarTime.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcApparentSolarTime._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcApparentSolarTime, [IComponentInfo, ICloneable, IStateCalcApparentSolarTime])

agcls.AgClassCatalog.add_catalog_entry("{EF933369-A9DC-4A8C-B361-615A7A8B852D}", StateCalcApparentSolarTime)
agcls.AgTypeNameMap["StateCalcApparentSolarTime"] = StateCalcApparentSolarTime

class StateCalcEarthMeanSolarTime(IComponentInfo, ICloneable, IStateCalcEarthMeanSolarTime):
    """EarthMeanSolarTime Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEarthMeanSolarTime.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEarthMeanSolarTime._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEarthMeanSolarTime, [IComponentInfo, ICloneable, IStateCalcEarthMeanSolarTime])

agcls.AgClassCatalog.add_catalog_entry("{A36F3E6D-DD64-4089-A0B9-CDDECA9F31BF}", StateCalcEarthMeanSolarTime)
agcls.AgTypeNameMap["StateCalcEarthMeanSolarTime"] = StateCalcEarthMeanSolarTime

class StateCalcEarthMeanLocTimeAN(IComponentInfo, ICloneable, IStateCalcEarthMeanLocTimeAN):
    """EarthMeanLocTimeAN Calc objects."""
    def __init__(self, sourceObject=None):
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
        IStateCalcEarthMeanLocTimeAN.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
        IStateCalcEarthMeanLocTimeAN._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateCalcEarthMeanLocTimeAN, [IComponentInfo, ICloneable, IStateCalcEarthMeanLocTimeAN])

agcls.AgClassCatalog.add_catalog_entry("{8B52530C-09B1-48BB-A644-2564B3F9A23F}", StateCalcEarthMeanLocTimeAN)
agcls.AgTypeNameMap["StateCalcEarthMeanLocTimeAN"] = StateCalcEarthMeanLocTimeAN

class AutomaticSequenceCollection(IAutomaticSequenceCollection):
    """Automatic Sequence Collection."""
    def __init__(self, sourceObject=None):
        IAutomaticSequenceCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAutomaticSequenceCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AutomaticSequenceCollection, [IAutomaticSequenceCollection])

agcls.AgClassCatalog.add_catalog_entry("{364BDB62-ECD6-4661-A8EB-D6943F5BD5BF}", AutomaticSequenceCollection)
agcls.AgTypeNameMap["AutomaticSequenceCollection"] = AutomaticSequenceCollection

class AutomaticSequence(IAutomaticSequence):
    """Automatic Sequence."""
    def __init__(self, sourceObject=None):
        IAutomaticSequence.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAutomaticSequence._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AutomaticSequence, [IAutomaticSequence])

agcls.AgClassCatalog.add_catalog_entry("{8755DF12-EDDB-468E-92AF-D98C5C1B1534}", AutomaticSequence)
agcls.AgTypeNameMap["AutomaticSequence"] = AutomaticSequence

class CentralBodyCollection(ICentralBodyCollection):
    """Central Body Collection."""
    def __init__(self, sourceObject=None):
        ICentralBodyCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyCollection, [ICentralBodyCollection])

agcls.AgClassCatalog.add_catalog_entry("{393D9C77-A9A2-4E5A-B285-9292EAF77559}", CentralBodyCollection)
agcls.AgTypeNameMap["CentralBodyCollection"] = CentralBodyCollection

class AstrogatorCentralBody(IAstrogatorCentralBody, IComponentInfo, ICloneable):
    """Central Body."""
    def __init__(self, sourceObject=None):
        IAstrogatorCentralBody.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAstrogatorCentralBody._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AstrogatorCentralBody, [IAstrogatorCentralBody, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{BB18EA4F-DF6E-44A3-B547-CD21EC10120C}", AstrogatorCentralBody)
agcls.AgTypeNameMap["AstrogatorCentralBody"] = AstrogatorCentralBody

class CentralBodyGravityModel(ICentralBodyGravityModel):
    """Central Body Gravity Model."""
    def __init__(self, sourceObject=None):
        ICentralBodyGravityModel.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyGravityModel._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyGravityModel, [ICentralBodyGravityModel])

agcls.AgClassCatalog.add_catalog_entry("{B235689A-958C-42EA-BACA-DF03ED880C5B}", CentralBodyGravityModel)
agcls.AgTypeNameMap["CentralBodyGravityModel"] = CentralBodyGravityModel

class CentralBodyShapeSphere(ICentralBodyShapeSphere, ICentralBodyShape):
    """Central Body Shape - Sphere."""
    def __init__(self, sourceObject=None):
        ICentralBodyShapeSphere.__init__(self, sourceObject)
        ICentralBodyShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShapeSphere._private_init(self, intf)
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyShapeSphere, [ICentralBodyShapeSphere, ICentralBodyShape])

agcls.AgClassCatalog.add_catalog_entry("{0AC87F61-8DFA-48FF-A1D2-D7DCD7133900}", CentralBodyShapeSphere)
agcls.AgTypeNameMap["CentralBodyShapeSphere"] = CentralBodyShapeSphere

class CentralBodyShapeOblateSpheroid(ICentralBodyShapeOblateSpheroid, ICentralBodyShape):
    """Central Body Shape - Spheroid."""
    def __init__(self, sourceObject=None):
        ICentralBodyShapeOblateSpheroid.__init__(self, sourceObject)
        ICentralBodyShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShapeOblateSpheroid._private_init(self, intf)
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyShapeOblateSpheroid, [ICentralBodyShapeOblateSpheroid, ICentralBodyShape])

agcls.AgClassCatalog.add_catalog_entry("{1C606CEB-7C36-486E-A123-42AF0BCB2C8F}", CentralBodyShapeOblateSpheroid)
agcls.AgTypeNameMap["CentralBodyShapeOblateSpheroid"] = CentralBodyShapeOblateSpheroid

class CentralBodyShapeTriaxialEllipsoid(ICentralBodyShapeTriaxialEllipsoid, ICentralBodyShape):
    """Central Body Shape - Triaxial Ellipsoid."""
    def __init__(self, sourceObject=None):
        ICentralBodyShapeTriaxialEllipsoid.__init__(self, sourceObject)
        ICentralBodyShape.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyShapeTriaxialEllipsoid._private_init(self, intf)
        ICentralBodyShape._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyShapeTriaxialEllipsoid, [ICentralBodyShapeTriaxialEllipsoid, ICentralBodyShape])

agcls.AgClassCatalog.add_catalog_entry("{286452CC-4917-4618-B2B7-D4C4B226AEAE}", CentralBodyShapeTriaxialEllipsoid)
agcls.AgTypeNameMap["CentralBodyShapeTriaxialEllipsoid"] = CentralBodyShapeTriaxialEllipsoid

class CentralBodyAttitudeRotationCoefficientsFile(ICentralBodyAttitudeRotationCoefficientsFile, ICentralBodyAttitude):
    """Central Body Attitude - Rotation Coefficients File."""
    def __init__(self, sourceObject=None):
        ICentralBodyAttitudeRotationCoefficientsFile.__init__(self, sourceObject)
        ICentralBodyAttitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyAttitudeRotationCoefficientsFile._private_init(self, intf)
        ICentralBodyAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyAttitudeRotationCoefficientsFile, [ICentralBodyAttitudeRotationCoefficientsFile, ICentralBodyAttitude])

agcls.AgClassCatalog.add_catalog_entry("{BC7D0575-6607-4103-8957-0B791534526D}", CentralBodyAttitudeRotationCoefficientsFile)
agcls.AgTypeNameMap["CentralBodyAttitudeRotationCoefficientsFile"] = CentralBodyAttitudeRotationCoefficientsFile

class CentralBodyAttitudeIAU1994(ICentralBodyAttitudeIAU1994, ICentralBodyAttitude):
    """Central Body Attitude - IAU1994."""
    def __init__(self, sourceObject=None):
        ICentralBodyAttitudeIAU1994.__init__(self, sourceObject)
        ICentralBodyAttitude.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyAttitudeIAU1994._private_init(self, intf)
        ICentralBodyAttitude._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyAttitudeIAU1994, [ICentralBodyAttitudeIAU1994, ICentralBodyAttitude])

agcls.AgClassCatalog.add_catalog_entry("{147ABE46-6F5E-45D9-8279-5D01B0D78B88}", CentralBodyAttitudeIAU1994)
agcls.AgTypeNameMap["CentralBodyAttitudeIAU1994"] = CentralBodyAttitudeIAU1994

class CentralBodyEphemerisAnalyticOrbit(ICentralBodyEphemerisAnalyticOrbit, ICentralBodyEphemeris):
    """Central Body Ephemeris - Analytic Orbit."""
    def __init__(self, sourceObject=None):
        ICentralBodyEphemerisAnalyticOrbit.__init__(self, sourceObject)
        ICentralBodyEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemerisAnalyticOrbit._private_init(self, intf)
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyEphemerisAnalyticOrbit, [ICentralBodyEphemerisAnalyticOrbit, ICentralBodyEphemeris])

agcls.AgClassCatalog.add_catalog_entry("{D2E09031-DB7F-480B-A361-73713F45EB70}", CentralBodyEphemerisAnalyticOrbit)
agcls.AgTypeNameMap["CentralBodyEphemerisAnalyticOrbit"] = CentralBodyEphemerisAnalyticOrbit

class CentralBodyEphemerisJPLSpice(ICentralBodyEphemerisJPLSpice, ICentralBodyEphemeris):
    """Central Body Ephemeris - JPLSpice."""
    def __init__(self, sourceObject=None):
        ICentralBodyEphemerisJPLSpice.__init__(self, sourceObject)
        ICentralBodyEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemerisJPLSpice._private_init(self, intf)
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyEphemerisJPLSpice, [ICentralBodyEphemerisJPLSpice, ICentralBodyEphemeris])

agcls.AgClassCatalog.add_catalog_entry("{A75A2A9B-F225-43D5-A259-30C9B0488EB8}", CentralBodyEphemerisJPLSpice)
agcls.AgTypeNameMap["CentralBodyEphemerisJPLSpice"] = CentralBodyEphemerisJPLSpice

class CentralBodyEphemerisFile(ICentralBodyEphemerisFile, ICentralBodyEphemeris):
    """Central Body Ephemeris - File."""
    def __init__(self, sourceObject=None):
        ICentralBodyEphemerisFile.__init__(self, sourceObject)
        ICentralBodyEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemerisFile._private_init(self, intf)
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyEphemerisFile, [ICentralBodyEphemerisFile, ICentralBodyEphemeris])

agcls.AgClassCatalog.add_catalog_entry("{063BA11E-7F73-40FA-B691-B12EC38DE29B}", CentralBodyEphemerisFile)
agcls.AgTypeNameMap["CentralBodyEphemerisFile"] = CentralBodyEphemerisFile

class CentralBodyEphemerisJPLDesignExplorerOptimizer(ICentralBodyEphemerisJPLDesignExplorerOptimizer, ICentralBodyEphemeris):
    """Central Body Ephemeris - JPL DE."""
    def __init__(self, sourceObject=None):
        ICentralBodyEphemerisJPLDesignExplorerOptimizer.__init__(self, sourceObject)
        ICentralBodyEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemerisJPLDesignExplorerOptimizer._private_init(self, intf)
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyEphemerisJPLDesignExplorerOptimizer, [ICentralBodyEphemerisJPLDesignExplorerOptimizer, ICentralBodyEphemeris])

agcls.AgClassCatalog.add_catalog_entry("{6426E9EA-5ED2-46C9-95BB-447955306CA7}", CentralBodyEphemerisJPLDesignExplorerOptimizer)
agcls.AgTypeNameMap["CentralBodyEphemerisJPLDesignExplorerOptimizer"] = CentralBodyEphemerisJPLDesignExplorerOptimizer

class CentralBodyEphemerisPlanetary(ICentralBodyEphemerisPlanetary, ICentralBodyEphemeris):
    """Central Body Ephemeris - Planetary."""
    def __init__(self, sourceObject=None):
        ICentralBodyEphemerisPlanetary.__init__(self, sourceObject)
        ICentralBodyEphemeris.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICentralBodyEphemerisPlanetary._private_init(self, intf)
        ICentralBodyEphemeris._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CentralBodyEphemerisPlanetary, [ICentralBodyEphemerisPlanetary, ICentralBodyEphemeris])

agcls.AgClassCatalog.add_catalog_entry("{B3946E55-049C-4314-B6E1-1B3E4BD4F660}", CentralBodyEphemerisPlanetary)
agcls.AgTypeNameMap["CentralBodyEphemerisPlanetary"] = CentralBodyEphemerisPlanetary

class MissionControlSequenceSegmentProperties(IMissionControlSequenceSegmentProperties, IRuntimeTypeInfoProvider):
    """Segment Properties."""
    def __init__(self, sourceObject=None):
        IMissionControlSequenceSegmentProperties.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMissionControlSequenceSegmentProperties._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MissionControlSequenceSegmentProperties, [IMissionControlSequenceSegmentProperties, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{9740187E-A60E-4440-952F-46FCEF10879C}", MissionControlSequenceSegmentProperties)
agcls.AgTypeNameMap["MissionControlSequenceSegmentProperties"] = MissionControlSequenceSegmentProperties

class PowerInternal(IPowerInternal, IComponentInfo, ICloneable):
    """Power - Internal."""
    def __init__(self, sourceObject=None):
        IPowerInternal.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPowerInternal._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PowerInternal, [IPowerInternal, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{269F510C-DE85-4BD7-B09C-15B573F83F31}", PowerInternal)
agcls.AgTypeNameMap["PowerInternal"] = PowerInternal

class PowerProcessed(IPowerProcessed, IComponentInfo, ICloneable):
    """Power - Processed Power Unit."""
    def __init__(self, sourceObject=None):
        IPowerProcessed.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPowerProcessed._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PowerProcessed, [IPowerProcessed, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{F9B2570A-E760-4C58-B95A-6654FA264F43}", PowerProcessed)
agcls.AgTypeNameMap["PowerProcessed"] = PowerProcessed

class PowerSolarArray(IPowerSolarArray, IComponentInfo, ICloneable):
    """Power - Solar Array."""
    def __init__(self, sourceObject=None):
        IPowerSolarArray.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPowerSolarArray._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PowerSolarArray, [IPowerSolarArray, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{EFF8A0BD-0BEA-4A4C-B486-3BC0DDA2B96E}", PowerSolarArray)
agcls.AgTypeNameMap["PowerSolarArray"] = PowerSolarArray

class GeneralRelativityFunction(IGeneralRelativityFunction, IComponentInfo, ICloneable):
    """General Relativity Propagator Function."""
    def __init__(self, sourceObject=None):
        IGeneralRelativityFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGeneralRelativityFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GeneralRelativityFunction, [IGeneralRelativityFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{2388EABA-68BE-4071-A6FC-5DF5E6913E09}", GeneralRelativityFunction)
agcls.AgTypeNameMap["GeneralRelativityFunction"] = GeneralRelativityFunction

class StateTransformationFunction(IStateTransformationFunction, IComponentInfo, ICloneable):
    """State Transition Propagator Function."""
    def __init__(self, sourceObject=None):
        IStateTransformationFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IStateTransformationFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, StateTransformationFunction, [IStateTransformationFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{BC9BCE93-D459-43A4-B996-0710520ECD35}", StateTransformationFunction)
agcls.AgTypeNameMap["StateTransformationFunction"] = StateTransformationFunction

class CR3BPFunc(ICR3BPFunc, IComponentInfo, ICloneable):
    """CR3BP Function."""
    def __init__(self, sourceObject=None):
        ICR3BPFunc.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICR3BPFunc._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CR3BPFunc, [ICR3BPFunc, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{0CB5F652-0A94-4493-8397-78E8B147A600}", CR3BPFunc)
agcls.AgTypeNameMap["CR3BPFunc"] = CR3BPFunc

class RadiationPressureFunction(IRadiationPressureFunction, IComponentInfo, ICloneable):
    """Radiation Pressure Propagator Function."""
    def __init__(self, sourceObject=None):
        IRadiationPressureFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRadiationPressureFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RadiationPressureFunction, [IRadiationPressureFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{129DFCA0-E241-4BF5-947C-34D311459876}", RadiationPressureFunction)
agcls.AgTypeNameMap["RadiationPressureFunction"] = RadiationPressureFunction

class YarkovskyFunc(IYarkovskyFunc, IComponentInfo, ICloneable):
    """Yarkovsky Effect Propagator Function."""
    def __init__(self, sourceObject=None):
        IYarkovskyFunc.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IYarkovskyFunc._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, YarkovskyFunc, [IYarkovskyFunc, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{991BA5B1-ED2F-4633-8493-5AD584CBD4FC}", YarkovskyFunc)
agcls.AgTypeNameMap["YarkovskyFunc"] = YarkovskyFunc

class BlendedDensity(IBlendedDensity, IComponentInfo, ICloneable):
    """Blended atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IBlendedDensity.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBlendedDensity._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BlendedDensity, [IBlendedDensity, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{8262277E-56CE-4780-8EF3-08324A1A06FD}", BlendedDensity)
agcls.AgTypeNameMap["BlendedDensity"] = BlendedDensity

class Cira72Function(ICira72Function, IComponentInfo, ICloneable):
    """Cira72 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        ICira72Function.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICira72Function._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Cira72Function, [ICira72Function, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{995263CD-4163-4EDA-8012-310821C8A332}", Cira72Function)
agcls.AgTypeNameMap["Cira72Function"] = Cira72Function

class Exponential(IExponential, IComponentInfo, ICloneable):
    """Exponential atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IExponential.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IExponential._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Exponential, [IExponential, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{701C6D24-1D0E-4D08-9A3B-61566AABDE02}", Exponential)
agcls.AgTypeNameMap["Exponential"] = Exponential

class HarrisPriester(IHarrisPriester, IComponentInfo, ICloneable):
    """Harris-Priester atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IHarrisPriester.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IHarrisPriester._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, HarrisPriester, [IHarrisPriester, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{2C45FE9A-0EE9-46B0-B0A5-79A052FDE189}", HarrisPriester)
agcls.AgTypeNameMap["HarrisPriester"] = HarrisPriester

class DensityModelPlugin(IDensityModelPlugin, IComponentInfo, ICloneable):
    """Plugin atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IDensityModelPlugin.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDensityModelPlugin._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DensityModelPlugin, [IDensityModelPlugin, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{5331D02B-13E5-4609-BFE6-9BF842E6096F}", DensityModelPlugin)
agcls.AgTypeNameMap["DensityModelPlugin"] = DensityModelPlugin

class JacchiaRoberts(IJacchiaRoberts, IComponentInfo, ICloneable):
    """Jacchia Roberts atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IJacchiaRoberts.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IJacchiaRoberts._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, JacchiaRoberts, [IJacchiaRoberts, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{6227B561-C892-4BB5-A835-9619EB144173}", JacchiaRoberts)
agcls.AgTypeNameMap["JacchiaRoberts"] = JacchiaRoberts

class JacchiaBowman2008(IJacchiaBowman2008, IComponentInfo, ICloneable):
    """Jacchia Bowman 2008 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IJacchiaBowman2008.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IJacchiaBowman2008._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, JacchiaBowman2008, [IJacchiaBowman2008, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{19461979-5C67-4840-8DB9-902EC47E6105}", JacchiaBowman2008)
agcls.AgTypeNameMap["JacchiaBowman2008"] = JacchiaBowman2008

class Jacchia_1960(IJacchia_1960, IComponentInfo, ICloneable):
    """Jacchia_1960 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IJacchia_1960.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IJacchia_1960._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Jacchia_1960, [IJacchia_1960, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{E803E9D5-31AB-4D5C-B93E-AB9975E2402B}", Jacchia_1960)
agcls.AgTypeNameMap["Jacchia_1960"] = Jacchia_1960

class Jacchia_1970(IJacchia_1970, IComponentInfo, ICloneable):
    """Jacchia_1970 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IJacchia_1970.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IJacchia_1970._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Jacchia_1970, [IJacchia_1970, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{9E716F44-73D2-4A22-97C9-04C20386D575}", Jacchia_1970)
agcls.AgTypeNameMap["Jacchia_1970"] = Jacchia_1970

class Jacchia_1971(IJacchia_1971, IComponentInfo, ICloneable):
    """Jacchia_1971 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IJacchia_1971.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IJacchia_1971._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Jacchia_1971, [IJacchia_1971, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{50FFBB4C-124F-4DC6-BEED-F2EC4930B4E7}", Jacchia_1971)
agcls.AgTypeNameMap["Jacchia_1971"] = Jacchia_1971

class MSISE_1990(IMSISE_1990, IComponentInfo, ICloneable):
    """MSISE 1990 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMSISE_1990.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMSISE_1990._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MSISE_1990, [IMSISE_1990, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{A46341F0-9384-4A1D-970A-77B1B683359D}", MSISE_1990)
agcls.AgTypeNameMap["MSISE_1990"] = MSISE_1990

class MSIS_1986(IMSIS_1986, IComponentInfo, ICloneable):
    """MSIS 1986 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMSIS_1986.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMSIS_1986._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MSIS_1986, [IMSIS_1986, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{AFAC9D69-5B78-48BA-8CFA-5D6A30BBF371}", MSIS_1986)
agcls.AgTypeNameMap["MSIS_1986"] = MSIS_1986

class NRLMSISE_2000(INRLMSISE_2000, IComponentInfo, ICloneable):
    """NRLMSISE 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        INRLMSISE_2000.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        INRLMSISE_2000._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, NRLMSISE_2000, [INRLMSISE_2000, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{2EEE9C88-FF61-497A-AD40-2429DBA0A581}", NRLMSISE_2000)
agcls.AgTypeNameMap["NRLMSISE_2000"] = NRLMSISE_2000

class US_Standard_Atmosphere(IUS_Standard_Atmosphere, IComponentInfo, ICloneable):
    """US_Standard_Atmosphere atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IUS_Standard_Atmosphere.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUS_Standard_Atmosphere._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, US_Standard_Atmosphere, [IUS_Standard_Atmosphere, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{14714C17-B360-42E1-86EE-99EB95C71B69}", US_Standard_Atmosphere)
agcls.AgTypeNameMap["US_Standard_Atmosphere"] = US_Standard_Atmosphere

class MarsGRAM37(IMarsGRAM37, IComponentInfo, ICloneable):
    """Mars-GRAM 3.7 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMarsGRAM37.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMarsGRAM37._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MarsGRAM37, [IMarsGRAM37, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{69A9AE89-0133-4410-A486-1ADEFBE56F49}", MarsGRAM37)
agcls.AgTypeNameMap["MarsGRAM37"] = MarsGRAM37

class MarsGRAM2000(IMarsGRAM2000, IComponentInfo, ICloneable):
    """Mars-GRAM 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMarsGRAM2000.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMarsGRAM2000._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MarsGRAM2000, [IMarsGRAM2000, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{FB31A16E-8E6F-4F8F-8D2D-0E3D0C0020FC}", MarsGRAM2000)
agcls.AgTypeNameMap["MarsGRAM2000"] = MarsGRAM2000

class MarsGRAM2001(IMarsGRAM2001, IComponentInfo, ICloneable):
    """Mars-GRAM 2001 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMarsGRAM2001.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMarsGRAM2001._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MarsGRAM2001, [IMarsGRAM2001, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{F7A3F4ED-100F-463F-A9F5-177F49E44BA9}", MarsGRAM2001)
agcls.AgTypeNameMap["MarsGRAM2001"] = MarsGRAM2001

class MarsGRAM2005(IMarsGRAM2005, IComponentInfo, ICloneable):
    """Mars-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMarsGRAM2005.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMarsGRAM2005._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MarsGRAM2005, [IMarsGRAM2005, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{FD314E36-8513-484A-B46A-FC8794E939AC}", MarsGRAM2005)
agcls.AgTypeNameMap["MarsGRAM2005"] = MarsGRAM2005

class MarsGRAM2010(IMarsGRAM2010, IComponentInfo, ICloneable):
    """Mars-GRAM 2010 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IMarsGRAM2010.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IMarsGRAM2010._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, MarsGRAM2010, [IMarsGRAM2010, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{EE0F710B-25B2-4423-86BE-892E0F221376}", MarsGRAM2010)
agcls.AgTypeNameMap["MarsGRAM2010"] = MarsGRAM2010

class VenusGRAM2005(IVenusGRAM2005, IComponentInfo, ICloneable):
    """Venus-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IVenusGRAM2005.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IVenusGRAM2005._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, VenusGRAM2005, [IVenusGRAM2005, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{2360812C-F645-4237-889F-EF487FFC20D7}", VenusGRAM2005)
agcls.AgTypeNameMap["VenusGRAM2005"] = VenusGRAM2005

class DTM2012(IDTM2012, IComponentInfo, ICloneable):
    """DTM 2012 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IDTM2012.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDTM2012._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DTM2012, [IDTM2012, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{131D3F3F-8444-4017-B12F-D57DF1262F58}", DTM2012)
agcls.AgTypeNameMap["DTM2012"] = DTM2012

class DTM2020(IDTM2020, IComponentInfo, ICloneable):
    """DTM 2020 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IDTM2020.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDTM2020._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DTM2020, [IDTM2020, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{68457876-1EF6-4DD4-9295-E72570C4F97B}", DTM2020)
agcls.AgTypeNameMap["DTM2020"] = DTM2020

class GravityFieldFunction(IGravityFieldFunction, IComponentInfo, ICloneable):
    """Gravity Field gravity propagator function."""
    def __init__(self, sourceObject=None):
        IGravityFieldFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGravityFieldFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GravityFieldFunction, [IGravityFieldFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C2C24055-1B50-4BD9-A7F7-0AA5FCE8969E}", GravityFieldFunction)
agcls.AgTypeNameMap["GravityFieldFunction"] = GravityFieldFunction

class PointMassFunction(IPointMassFunction, IComponentInfo, ICloneable):
    """Point Mass function."""
    def __init__(self, sourceObject=None):
        IPointMassFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPointMassFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PointMassFunction, [IPointMassFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{E0A1592D-68C0-43DB-A338-DE22A591872A}", PointMassFunction)
agcls.AgTypeNameMap["PointMassFunction"] = PointMassFunction

class TwoBodyFunction(ITwoBodyFunction, IComponentInfo, ICloneable):
    """Two Body gravity propagator function."""
    def __init__(self, sourceObject=None):
        ITwoBodyFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ITwoBodyFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, TwoBodyFunction, [ITwoBodyFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{5C71D8C2-4A14-4D93-A8E5-5384AAB05E92}", TwoBodyFunction)
agcls.AgTypeNameMap["TwoBodyFunction"] = TwoBodyFunction

class HPOPPluginFunction(IHPOPPluginFunction, IComponentInfo, ICloneable):
    """HPOP Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IHPOPPluginFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IHPOPPluginFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, HPOPPluginFunction, [IHPOPPluginFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{01BF5EA2-376F-49B2-B6DF-3017F30D8205}", HPOPPluginFunction)
agcls.AgTypeNameMap["HPOPPluginFunction"] = HPOPPluginFunction

class EOMFuncPluginFunction(IEOMFuncPluginFunction, IComponentInfo, ICloneable):
    """EOM Function Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IEOMFuncPluginFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEOMFuncPluginFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EOMFuncPluginFunction, [IEOMFuncPluginFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{6FCCD724-B386-487C-A2AD-6153FF4756FF}", EOMFuncPluginFunction)
agcls.AgTypeNameMap["EOMFuncPluginFunction"] = EOMFuncPluginFunction

class SRPAeroT20(ISRPAeroT20, IComponentInfo, ICloneable):
    """AeroT20 SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPAeroT20.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPAeroT20._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPAeroT20, [ISRPAeroT20, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{6DB3E760-F774-45F3-A6E5-EA2A7E34416F}", SRPAeroT20)
agcls.AgTypeNameMap["SRPAeroT20"] = SRPAeroT20

class SRPAeroT30(ISRPAeroT30, IComponentInfo, ICloneable):
    """AeroT30 SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPAeroT30.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPAeroT30._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPAeroT30, [ISRPAeroT30, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{E4DF0601-9442-4649-AE24-516F20E819EF}", SRPAeroT30)
agcls.AgTypeNameMap["SRPAeroT30"] = SRPAeroT30

class SRPGSPM04aIIA(ISRPGSPM04aIIA, IComponentInfo, ICloneable):
    """GSPM04aIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPGSPM04aIIA.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPGSPM04aIIA._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPGSPM04aIIA, [ISRPGSPM04aIIA, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{F6767C08-2100-464C-B18A-0528243E37DC}", SRPGSPM04aIIA)
agcls.AgTypeNameMap["SRPGSPM04aIIA"] = SRPGSPM04aIIA

class SRPGSPM04aIIR(ISRPGSPM04aIIR, IComponentInfo, ICloneable):
    """GSPM04aIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPGSPM04aIIR.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPGSPM04aIIR._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPGSPM04aIIR, [ISRPGSPM04aIIR, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{FFF24BB0-8E3E-479A-957A-06719DF68A56}", SRPGSPM04aIIR)
agcls.AgTypeNameMap["SRPGSPM04aIIR"] = SRPGSPM04aIIR

class SRPGSPM04aeIIA(ISRPGSPM04aeIIA, IComponentInfo, ICloneable):
    """GSPM04aeIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPGSPM04aeIIA.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPGSPM04aeIIA._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPGSPM04aeIIA, [ISRPGSPM04aeIIA, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{82530B89-B383-4148-8606-BBA0EBA825CE}", SRPGSPM04aeIIA)
agcls.AgTypeNameMap["SRPGSPM04aeIIA"] = SRPGSPM04aeIIA

class SRPGSPM04aeIIR(ISRPGSPM04aeIIR, IComponentInfo, ICloneable):
    """GSPM04aeIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPGSPM04aeIIR.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPGSPM04aeIIR._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPGSPM04aeIIR, [ISRPGSPM04aeIIR, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{17C9AD04-9981-4541-9515-59A597003348}", SRPGSPM04aeIIR)
agcls.AgTypeNameMap["SRPGSPM04aeIIR"] = SRPGSPM04aeIIR

class SRPSpherical(ISRPSpherical, IComponentInfo, ICloneable):
    """Spherical SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPSpherical.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPSpherical._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPSpherical, [ISRPSpherical, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{4318B037-C619-4722-A0F5-4FFDFA7D9474}", SRPSpherical)
agcls.AgTypeNameMap["SRPSpherical"] = SRPSpherical

class SRPNPlate(ISRPNPlate, IComponentInfo, ICloneable):
    """NPlate SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPNPlate.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPNPlate._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPNPlate, [ISRPNPlate, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{81962DC5-1A26-4077-AC39-E8E75145858A}", SRPNPlate)
agcls.AgTypeNameMap["SRPNPlate"] = SRPNPlate

class SRPTabAreaVec(ISRPTabAreaVec, IComponentInfo, ICloneable):
    """Tabulated area vector SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPTabAreaVec.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPTabAreaVec._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPTabAreaVec, [ISRPTabAreaVec, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{77FAE0BD-36AF-4140-B62E-7B2865841152}", SRPTabAreaVec)
agcls.AgTypeNameMap["SRPTabAreaVec"] = SRPTabAreaVec

class SRPVariableArea(ISRPVariableArea, IComponentInfo, ICloneable):
    """Variable Area SRP propagator function."""
    def __init__(self, sourceObject=None):
        ISRPVariableArea.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPVariableArea._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPVariableArea, [ISRPVariableArea, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{193838B2-807F-4E24-A05D-2E0BAB03B497}", SRPVariableArea)
agcls.AgTypeNameMap["SRPVariableArea"] = SRPVariableArea

class ThirdBodyFunction(IThirdBodyFunction, IComponentInfo, ICloneable):
    """ThirdBody propagator function."""
    def __init__(self, sourceObject=None):
        IThirdBodyFunction.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IThirdBodyFunction._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ThirdBodyFunction, [IThirdBodyFunction, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{7E7DF54F-A10B-4B57-9919-ACD123F69001}", ThirdBodyFunction)
agcls.AgTypeNameMap["ThirdBodyFunction"] = ThirdBodyFunction

class DragModelPlugin(IDragModelPlugin, IComponentInfo, ICloneable):
    """Drag Model Plugin."""
    def __init__(self, sourceObject=None):
        IDragModelPlugin.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDragModelPlugin._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DragModelPlugin, [IDragModelPlugin, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C48CB2A8-A6E1-4E7B-ABB2-179D1E06D541}", DragModelPlugin)
agcls.AgTypeNameMap["DragModelPlugin"] = DragModelPlugin

class SRPReflectionPlugin(ISRPReflectionPlugin, IComponentInfo, ICloneable):
    """SRP Reflection Plugin."""
    def __init__(self, sourceObject=None):
        ISRPReflectionPlugin.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISRPReflectionPlugin._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SRPReflectionPlugin, [ISRPReflectionPlugin, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{926296A2-EA6B-4FC8-A75C-15B9F24B85E5}", SRPReflectionPlugin)
agcls.AgTypeNameMap["SRPReflectionPlugin"] = SRPReflectionPlugin

class EngineConstAcc(IEngineConstAcc, IComponentInfo, ICloneable):
    """Constant Acceleration engine model."""
    def __init__(self, sourceObject=None):
        IEngineConstAcc.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineConstAcc._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineConstAcc, [IEngineConstAcc, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{359488A0-BCA3-4739-8614-E99B675553AF}", EngineConstAcc)
agcls.AgTypeNameMap["EngineConstAcc"] = EngineConstAcc

class EngineConstant(IEngineConstant, IComponentInfo, ICloneable):
    """Constant Thrust engine model."""
    def __init__(self, sourceObject=None):
        IEngineConstant.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineConstant._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineConstant, [IEngineConstant, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{31105070-4B5A-4870-A45B-6F6CF13042DD}", EngineConstant)
agcls.AgTypeNameMap["EngineConstant"] = EngineConstant

class EngineIon(IEngineIon, IComponentInfo, ICloneable):
    """Ion Engine engine model."""
    def __init__(self, sourceObject=None):
        IEngineIon.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineIon._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineIon, [IEngineIon, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{6AD7EC4F-2E59-4D7B-9FC2-9022CB8540B6}", EngineIon)
agcls.AgTypeNameMap["EngineIon"] = EngineIon

class EngineThrottleTable(IEngineThrottleTable, IComponentInfo, ICloneable):
    """Throttle Table engine model."""
    def __init__(self, sourceObject=None):
        IEngineThrottleTable.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineThrottleTable._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineThrottleTable, [IEngineThrottleTable, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{FB947497-4C0D-4F39-9942-31A9A0D3025F}", EngineThrottleTable)
agcls.AgTypeNameMap["EngineThrottleTable"] = EngineThrottleTable

class EngineCustom(IEngineCustom, IComponentInfo, ICloneable):
    """Custom engine model."""
    def __init__(self, sourceObject=None):
        IEngineCustom.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineCustom._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineCustom, [IEngineCustom, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{5C0367CE-254E-4BDB-8056-ED27D584258E}", EngineCustom)
agcls.AgTypeNameMap["EngineCustom"] = EngineCustom

class EnginePlugin(IEnginePlugin, IComponentInfo, ICloneable):
    """Plugin engine model."""
    def __init__(self, sourceObject=None):
        IEnginePlugin.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEnginePlugin._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EnginePlugin, [IEnginePlugin, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{D7755FC3-1A9F-4DB5-B735-030256F4AE24}", EnginePlugin)
agcls.AgTypeNameMap["EnginePlugin"] = EnginePlugin

class EngineModelPoly(IEngineModelPoly, IComponentInfo, ICloneable):
    """Polynomial Thrust and Isp engine model."""
    def __init__(self, sourceObject=None):
        IEngineModelPoly.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineModelPoly._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineModelPoly, [IEngineModelPoly, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{0D23F634-A8B8-4376-99AE-F8287C267EDC}", EngineModelPoly)
agcls.AgTypeNameMap["EngineModelPoly"] = EngineModelPoly

class EngineModelThrustCoefficients(IEngineModelThrustCoefficients):
    """Engine Model Thrust Coefficients."""
    def __init__(self, sourceObject=None):
        IEngineModelThrustCoefficients.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineModelThrustCoefficients._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineModelThrustCoefficients, [IEngineModelThrustCoefficients])

agcls.AgClassCatalog.add_catalog_entry("{1B8E6E69-F100-4A4B-A24A-FFC3C8B0AF70}", EngineModelThrustCoefficients)
agcls.AgTypeNameMap["EngineModelThrustCoefficients"] = EngineModelThrustCoefficients

class EngineModelIspCoefficients(IEngineModelIspCoefficients):
    """Engine Model Isp Coefficients."""
    def __init__(self, sourceObject=None):
        IEngineModelIspCoefficients.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineModelIspCoefficients._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineModelIspCoefficients, [IEngineModelIspCoefficients])

agcls.AgClassCatalog.add_catalog_entry("{279B11AE-A5F8-4548-9401-95981B21C61C}", EngineModelIspCoefficients)
agcls.AgTypeNameMap["EngineModelIspCoefficients"] = EngineModelIspCoefficients

class EngineDefinition(IEngineDefinition):
    """Engine definition."""
    def __init__(self, sourceObject=None):
        IEngineDefinition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IEngineDefinition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, EngineDefinition, [IEngineDefinition])

agcls.AgClassCatalog.add_catalog_entry("{F87429C7-51DC-4AD8-8481-468C14F38AB4}", EngineDefinition)
agcls.AgTypeNameMap["EngineDefinition"] = EngineDefinition

class DesignCR3BPSetup(IDesignCR3BPSetup, IComponentInfo, ICloneable):
    """CR3BP Setup Tool."""
    def __init__(self, sourceObject=None):
        IDesignCR3BPSetup.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDesignCR3BPSetup._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DesignCR3BPSetup, [IDesignCR3BPSetup, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{97419F0F-66BA-4C13-800E-56D8856CAAA3}", DesignCR3BPSetup)
agcls.AgTypeNameMap["DesignCR3BPSetup"] = DesignCR3BPSetup

class DesignCR3BPObject(IDesignCR3BPObject):
    """CR3BP associated object definition."""
    def __init__(self, sourceObject=None):
        IDesignCR3BPObject.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDesignCR3BPObject._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DesignCR3BPObject, [IDesignCR3BPObject])

agcls.AgClassCatalog.add_catalog_entry("{2256C391-AE04-462C-8A4F-5D00D522112D}", DesignCR3BPObject)
agcls.AgTypeNameMap["DesignCR3BPObject"] = DesignCR3BPObject

class DesignCR3BPObjectCollection(IDesignCR3BPObjectCollection):
    """CR3BP associated object Collection."""
    def __init__(self, sourceObject=None):
        IDesignCR3BPObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IDesignCR3BPObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, DesignCR3BPObjectCollection, [IDesignCR3BPObjectCollection])

agcls.AgClassCatalog.add_catalog_entry("{A70D32B8-E717-449E-8A79-29E429BED03F}", DesignCR3BPObjectCollection)
agcls.AgTypeNameMap["DesignCR3BPObjectCollection"] = DesignCR3BPObjectCollection

class Thruster(IThruster):
    """Thruster definition."""
    def __init__(self, sourceObject=None):
        IThruster.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IThruster._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, Thruster, [IThruster])

agcls.AgClassCatalog.add_catalog_entry("{749FEA15-5BD9-4466-BADF-E917D640E6D8}", Thruster)
agcls.AgTypeNameMap["Thruster"] = Thruster

class ThrusterSetCollection(IThrusterSetCollection):
    """Thruster Set Collection."""
    def __init__(self, sourceObject=None):
        IThrusterSetCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IThrusterSetCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ThrusterSetCollection, [IThrusterSetCollection])

agcls.AgClassCatalog.add_catalog_entry("{8C1B379E-8092-48BE-A401-651464239B27}", ThrusterSetCollection)
agcls.AgTypeNameMap["ThrusterSetCollection"] = ThrusterSetCollection

class ThrusterSet(IThrusterSet, IComponentInfo, ICloneable):
    """Thruster Set."""
    def __init__(self, sourceObject=None):
        IThrusterSet.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IThrusterSet._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ThrusterSet, [IThrusterSet, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{00FB61C4-5A63-439B-A030-171588D7CFED}", ThrusterSet)
agcls.AgTypeNameMap["ThrusterSet"] = ThrusterSet

class AsTriggerCondition(IAsTriggerCondition, IComponentInfo, ICloneable):
    """Constraint."""
    def __init__(self, sourceObject=None):
        IAsTriggerCondition.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IAsTriggerCondition._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, AsTriggerCondition, [IAsTriggerCondition, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{32E146B0-C168-4BD3-A2D9-ECF7096687E5}", AsTriggerCondition)
agcls.AgTypeNameMap["AsTriggerCondition"] = AsTriggerCondition

class CustomFunctionScriptEngine(ICustomFunctionScriptEngine, IComponentInfo, ICloneable):
    """Custom Function Script Engine."""
    def __init__(self, sourceObject=None):
        ICustomFunctionScriptEngine.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICustomFunctionScriptEngine._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CustomFunctionScriptEngine, [ICustomFunctionScriptEngine, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{F4CD79CC-CFAA-4EEE-A01A-0F846D6F6674}", CustomFunctionScriptEngine)
agcls.AgTypeNameMap["CustomFunctionScriptEngine"] = CustomFunctionScriptEngine

class NumericalPropagatorWrapper(INumericalPropagatorWrapper, IComponentInfo, ICloneable):
    """Numerical Propagator."""
    def __init__(self, sourceObject=None):
        INumericalPropagatorWrapper.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        INumericalPropagatorWrapper._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, NumericalPropagatorWrapper, [INumericalPropagatorWrapper, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{6F733B37-D5A3-4D83-844B-34A35BA937CC}", NumericalPropagatorWrapper)
agcls.AgTypeNameMap["NumericalPropagatorWrapper"] = NumericalPropagatorWrapper

class NumericalPropagatorWrapperCR3BP(INumericalPropagatorWrapperCR3BP, IComponentInfo, ICloneable):
    """Numerical CR3BP Propagator."""
    def __init__(self, sourceObject=None):
        INumericalPropagatorWrapperCR3BP.__init__(self, sourceObject)
        IComponentInfo.__init__(self, sourceObject)
        ICloneable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        INumericalPropagatorWrapperCR3BP._private_init(self, intf)
        IComponentInfo._private_init(self, intf)
        ICloneable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, NumericalPropagatorWrapperCR3BP, [INumericalPropagatorWrapperCR3BP, IComponentInfo, ICloneable])

agcls.AgClassCatalog.add_catalog_entry("{C4823BEE-E898-47D3-8C29-9CCE6DB490FE}", NumericalPropagatorWrapperCR3BP)
agcls.AgTypeNameMap["NumericalPropagatorWrapperCR3BP"] = NumericalPropagatorWrapperCR3BP

class PropagatorFunctionCollection(IPropagatorFunctionCollection):
    """Propagator Function Collection."""
    def __init__(self, sourceObject=None):
        IPropagatorFunctionCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IPropagatorFunctionCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, PropagatorFunctionCollection, [IPropagatorFunctionCollection])

agcls.AgClassCatalog.add_catalog_entry("{41440862-0DA5-41B0-9A84-073FBC64D47A}", PropagatorFunctionCollection)
agcls.AgTypeNameMap["PropagatorFunctionCollection"] = PropagatorFunctionCollection

class BulirschStoerIntegrator(IBulirschStoerIntegrator, INumericalIntegrator):
    """Bulirsch-Stoer Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IBulirschStoerIntegrator.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBulirschStoerIntegrator._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BulirschStoerIntegrator, [IBulirschStoerIntegrator, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{B98456C5-48DE-41AB-867B-FD713A325418}", BulirschStoerIntegrator)
agcls.AgTypeNameMap["BulirschStoerIntegrator"] = BulirschStoerIntegrator

class GaussJacksonIntegrator(IGaussJacksonIntegrator, INumericalIntegrator):
    """Gauss-Jackson Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IGaussJacksonIntegrator.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGaussJacksonIntegrator._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GaussJacksonIntegrator, [IGaussJacksonIntegrator, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{034F55EC-4D6E-4C22-9811-C3DEBC83ABD9}", GaussJacksonIntegrator)
agcls.AgTypeNameMap["GaussJacksonIntegrator"] = GaussJacksonIntegrator

class RungeKutta2nd3rd(IRungeKutta2nd3rd, INumericalIntegrator):
    """RK2nd3rd Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKutta2nd3rd.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKutta2nd3rd._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKutta2nd3rd, [IRungeKutta2nd3rd, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{F3511C10-B4F1-4592-81AC-41D387A9589B}", RungeKutta2nd3rd)
agcls.AgTypeNameMap["RungeKutta2nd3rd"] = RungeKutta2nd3rd

class RungeKutta4th(IRungeKutta4th, INumericalIntegrator):
    """RK4th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKutta4th.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKutta4th._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKutta4th, [IRungeKutta4th, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{019C798B-5AB2-42F1-847E-AC64438C8341}", RungeKutta4th)
agcls.AgTypeNameMap["RungeKutta4th"] = RungeKutta4th

class RungeKutta4th5th(IRungeKutta4th5th, INumericalIntegrator):
    """RK4th5th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKutta4th5th.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKutta4th5th._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKutta4th5th, [IRungeKutta4th5th, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{25B6537D-FF33-45E7-A314-F6E4EFA34CD5}", RungeKutta4th5th)
agcls.AgTypeNameMap["RungeKutta4th5th"] = RungeKutta4th5th

class RungeKutta4thAdapt(IRungeKutta4thAdapt, INumericalIntegrator):
    """RK4thAdapt Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKutta4thAdapt.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKutta4thAdapt._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKutta4thAdapt, [IRungeKutta4thAdapt, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{03F69912-84E6-4209-8AF5-FD2C4B009C44}", RungeKutta4thAdapt)
agcls.AgTypeNameMap["RungeKutta4thAdapt"] = RungeKutta4thAdapt

class RungeKuttaF7th8th(IRungeKuttaF7th8th, INumericalIntegrator):
    """RKF7th8th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKuttaF7th8th.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKuttaF7th8th._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKuttaF7th8th, [IRungeKuttaF7th8th, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{78A98F0E-B687-4D64-B0F6-5608105504CC}", RungeKuttaF7th8th)
agcls.AgTypeNameMap["RungeKuttaF7th8th"] = RungeKuttaF7th8th

class RungeKuttaV8th9th(IRungeKuttaV8th9th, INumericalIntegrator):
    """RKV8th9th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IRungeKuttaV8th9th.__init__(self, sourceObject)
        INumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IRungeKuttaV8th9th._private_init(self, intf)
        INumericalIntegrator._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, RungeKuttaV8th9th, [IRungeKuttaV8th9th, INumericalIntegrator])

agcls.AgClassCatalog.add_catalog_entry("{26857B4B-40C9-4EC2-B5F7-AFEB6103128D}", RungeKuttaV8th9th)
agcls.AgTypeNameMap["RungeKuttaV8th9th"] = RungeKuttaV8th9th

class ScriptingTool(IScriptingTool, IRuntimeTypeInfoProvider):
    """Scripting Tool."""
    def __init__(self, sourceObject=None):
        IScriptingTool.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingTool._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingTool, [IScriptingTool, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{1FB508B7-F4D9-4ABF-8EA8-B44AECAEE9C0}", ScriptingTool)
agcls.AgTypeNameMap["ScriptingTool"] = ScriptingTool

class ScriptingSegmentCollection(IScriptingSegmentCollection, IRuntimeTypeInfoProvider):
    """Scripting Segment Collection."""
    def __init__(self, sourceObject=None):
        IScriptingSegmentCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingSegmentCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingSegmentCollection, [IScriptingSegmentCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{2D397364-3CD3-4FC2-8B11-D74D7A348687}", ScriptingSegmentCollection)
agcls.AgTypeNameMap["ScriptingSegmentCollection"] = ScriptingSegmentCollection

class ScriptingSegment(IScriptingSegment, IRuntimeTypeInfoProvider):
    """Scripting Segment."""
    def __init__(self, sourceObject=None):
        IScriptingSegment.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingSegment._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingSegment, [IScriptingSegment, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{FD68184D-BA0A-41EC-B03E-E63514058625}", ScriptingSegment)
agcls.AgTypeNameMap["ScriptingSegment"] = ScriptingSegment

class ScriptingParameterCollection(IScriptingParameterCollection, IRuntimeTypeInfoProvider):
    """Scripting Parameter Collection."""
    def __init__(self, sourceObject=None):
        IScriptingParameterCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingParameterCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingParameterCollection, [IScriptingParameterCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{F7B45439-8E25-43DE-882F-844F8645F015}", ScriptingParameterCollection)
agcls.AgTypeNameMap["ScriptingParameterCollection"] = ScriptingParameterCollection

class ScriptingParameter(IScriptingParameter, IRuntimeTypeInfoProvider):
    """Scripting Parameter."""
    def __init__(self, sourceObject=None):
        IScriptingParameter.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingParameter._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingParameter, [IScriptingParameter, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{92BFA902-938E-48E0-B402-C6DEE9169BEE}", ScriptingParameter)
agcls.AgTypeNameMap["ScriptingParameter"] = ScriptingParameter

class ScriptingCalcObject(IScriptingCalcObject):
    """Calc Object."""
    def __init__(self, sourceObject=None):
        IScriptingCalcObject.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingCalcObject._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingCalcObject, [IScriptingCalcObject])

agcls.AgClassCatalog.add_catalog_entry("{D9895635-D8A5-497F-9C4D-E0A18AF49983}", ScriptingCalcObject)
agcls.AgTypeNameMap["ScriptingCalcObject"] = ScriptingCalcObject

class ScriptingCalcObjectCollection(IScriptingCalcObjectCollection):
    """Calc Object Collection."""
    def __init__(self, sourceObject=None):
        IScriptingCalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingCalcObjectCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingCalcObjectCollection, [IScriptingCalcObjectCollection])

agcls.AgClassCatalog.add_catalog_entry("{9FC08736-F254-451E-9292-C003D5601780}", ScriptingCalcObjectCollection)
agcls.AgTypeNameMap["ScriptingCalcObjectCollection"] = ScriptingCalcObjectCollection

class UserVariableDefinition(IUserVariableDefinition):
    """User Variable Definition"""
    def __init__(self, sourceObject=None):
        IUserVariableDefinition.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariableDefinition._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariableDefinition, [IUserVariableDefinition])

agcls.AgClassCatalog.add_catalog_entry("{659E4C4D-E224-47D7-A899-C9B5DCF7241F}", UserVariableDefinition)
agcls.AgTypeNameMap["UserVariableDefinition"] = UserVariableDefinition

class UserVariable(IUserVariable):
    """User Variable"""
    def __init__(self, sourceObject=None):
        IUserVariable.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariable._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariable, [IUserVariable])

agcls.AgClassCatalog.add_catalog_entry("{437599F8-0E00-4984-81CA-B450200257BC}", UserVariable)
agcls.AgTypeNameMap["UserVariable"] = UserVariable

class UserVariableUpdate(IUserVariableUpdate):
    """User Variable Update"""
    def __init__(self, sourceObject=None):
        IUserVariableUpdate.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariableUpdate._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariableUpdate, [IUserVariableUpdate])

agcls.AgClassCatalog.add_catalog_entry("{EB1FC76A-82D7-43C1-919B-05F53CEFC2ED}", UserVariableUpdate)
agcls.AgTypeNameMap["UserVariableUpdate"] = UserVariableUpdate

class UserVariableDefinitionCollection(IUserVariableDefinitionCollection):
    """User Variable Definition Collection."""
    def __init__(self, sourceObject=None):
        IUserVariableDefinitionCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariableDefinitionCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariableDefinitionCollection, [IUserVariableDefinitionCollection])

agcls.AgClassCatalog.add_catalog_entry("{E1D09185-E7EC-4E3F-BFEF-52AC92FEEC75}", UserVariableDefinitionCollection)
agcls.AgTypeNameMap["UserVariableDefinitionCollection"] = UserVariableDefinitionCollection

class UserVariableCollection(IUserVariableCollection):
    """User Variable Initial Value Collection."""
    def __init__(self, sourceObject=None):
        IUserVariableCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariableCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariableCollection, [IUserVariableCollection])

agcls.AgClassCatalog.add_catalog_entry("{801C61FA-C0FE-4BFD-8001-3335211F7328}", UserVariableCollection)
agcls.AgTypeNameMap["UserVariableCollection"] = UserVariableCollection

class UserVariableUpdateCollection(IUserVariableUpdateCollection):
    """User Variable Update Collection"""
    def __init__(self, sourceObject=None):
        IUserVariableUpdateCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IUserVariableUpdateCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, UserVariableUpdateCollection, [IUserVariableUpdateCollection])

agcls.AgClassCatalog.add_catalog_entry("{FD7D6D39-4E5B-41E1-84E2-CBCAE8ECCF41}", UserVariableUpdateCollection)
agcls.AgTypeNameMap["UserVariableUpdateCollection"] = UserVariableUpdateCollection

class CalculationGraphCollection(ICalculationGraphCollection):
    """Calculation Graph Collection."""
    def __init__(self, sourceObject=None):
        ICalculationGraphCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICalculationGraphCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CalculationGraphCollection, [ICalculationGraphCollection])

agcls.AgClassCatalog.add_catalog_entry("{40E20BE7-7961-468B-B396-8F6E980BE49E}", CalculationGraphCollection)
agcls.AgTypeNameMap["CalculationGraphCollection"] = CalculationGraphCollection

class ScriptingParameterEnumerationChoice(IScriptingParameterEnumerationChoice, IRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice."""
    def __init__(self, sourceObject=None):
        IScriptingParameterEnumerationChoice.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingParameterEnumerationChoice._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingParameterEnumerationChoice, [IScriptingParameterEnumerationChoice, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{82A982C2-A2AD-4FD8-AB46-A54866F56AEA}", ScriptingParameterEnumerationChoice)
agcls.AgTypeNameMap["ScriptingParameterEnumerationChoice"] = ScriptingParameterEnumerationChoice

class ScriptingParameterEnumerationChoiceCollection(IScriptingParameterEnumerationChoiceCollection, IRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice Collection"""
    def __init__(self, sourceObject=None):
        IScriptingParameterEnumerationChoiceCollection.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IScriptingParameterEnumerationChoiceCollection._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ScriptingParameterEnumerationChoiceCollection, [IScriptingParameterEnumerationChoiceCollection, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{E4F13182-12CE-420B-AC3A-8530CC46BE35}", ScriptingParameterEnumerationChoiceCollection)
agcls.AgTypeNameMap["ScriptingParameterEnumerationChoiceCollection"] = ScriptingParameterEnumerationChoiceCollection

class ProfileSNOPTOptimizer(IProfileSNOPTOptimizer, IProfile, IRuntimeTypeInfoProvider):
    """SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IProfileSNOPTOptimizer.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileSNOPTOptimizer._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileSNOPTOptimizer, [IProfileSNOPTOptimizer, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{6F7AFA8D-FC45-4955-BEFB-BDE94553C02E}", ProfileSNOPTOptimizer)
agcls.AgTypeNameMap["ProfileSNOPTOptimizer"] = ProfileSNOPTOptimizer

class SNOPTControl(ISNOPTControl):
    """Control parameters for SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        ISNOPTControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISNOPTControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SNOPTControl, [ISNOPTControl])

agcls.AgClassCatalog.add_catalog_entry("{5CD8E3EB-8BCA-4D53-A361-484285E62C96}", SNOPTControl)
agcls.AgTypeNameMap["SNOPTControl"] = SNOPTControl

class SNOPTResult(ISNOPTResult):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    def __init__(self, sourceObject=None):
        ISNOPTResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISNOPTResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SNOPTResult, [ISNOPTResult])

agcls.AgClassCatalog.add_catalog_entry("{F739575C-EF90-4B58-917A-BD0C12C95055}", SNOPTResult)
agcls.AgTypeNameMap["SNOPTResult"] = SNOPTResult

class SNOPTControlCollection(ISNOPTControlCollection):
    """SNOPT control collection."""
    def __init__(self, sourceObject=None):
        ISNOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISNOPTControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SNOPTControlCollection, [ISNOPTControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{99EECA52-DE6C-4E2C-805E-725A3A009E4B}", SNOPTControlCollection)
agcls.AgTypeNameMap["SNOPTControlCollection"] = SNOPTControlCollection

class SNOPTResultCollection(ISNOPTResultCollection):
    """SNOPT result collection."""
    def __init__(self, sourceObject=None):
        ISNOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ISNOPTResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, SNOPTResultCollection, [ISNOPTResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{D27CBF33-3EC4-40A0-A138-5F41720B0B08}", SNOPTResultCollection)
agcls.AgTypeNameMap["SNOPTResultCollection"] = SNOPTResultCollection

class ProfileIPOPTOptimizer(IProfileIPOPTOptimizer, IProfile, IRuntimeTypeInfoProvider):
    """IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IProfileIPOPTOptimizer.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileIPOPTOptimizer._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileIPOPTOptimizer, [IProfileIPOPTOptimizer, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{59AB8108-2D2E-4D46-8B96-F1F43175CC77}", ProfileIPOPTOptimizer)
agcls.AgTypeNameMap["ProfileIPOPTOptimizer"] = ProfileIPOPTOptimizer

class IPOPTControl(IIPOPTControl):
    """Control parameters for IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IIPOPTControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IIPOPTControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, IPOPTControl, [IIPOPTControl])

agcls.AgClassCatalog.add_catalog_entry("{F7FF56DA-D284-4B28-88EC-BEE49D7E0CFD}", IPOPTControl)
agcls.AgTypeNameMap["IPOPTControl"] = IPOPTControl

class IPOPTResult(IIPOPTResult):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    def __init__(self, sourceObject=None):
        IIPOPTResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IIPOPTResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, IPOPTResult, [IIPOPTResult])

agcls.AgClassCatalog.add_catalog_entry("{DCFD15D6-9ACF-4FCB-B968-CB74B5E95B33}", IPOPTResult)
agcls.AgTypeNameMap["IPOPTResult"] = IPOPTResult

class IPOPTControlCollection(IIPOPTControlCollection):
    """Properties for the list of IPOPT control parameters."""
    def __init__(self, sourceObject=None):
        IIPOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IIPOPTControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, IPOPTControlCollection, [IIPOPTControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{522C81BC-6FFF-40FE-90C7-E4368FD1548D}", IPOPTControlCollection)
agcls.AgTypeNameMap["IPOPTControlCollection"] = IPOPTControlCollection

class IPOPTResultCollection(IIPOPTResultCollection):
    """IPOPT result collection."""
    def __init__(self, sourceObject=None):
        IIPOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IIPOPTResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, IPOPTResultCollection, [IIPOPTResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{4A10E1B9-87A1-4370-AAD8-F7856B099B5C}", IPOPTResultCollection)
agcls.AgTypeNameMap["IPOPTResultCollection"] = IPOPTResultCollection

class ManeuverOptimalFinite(IManeuverOptimalFinite, IManeuver, IRuntimeTypeInfoProvider):
    """The Optimal Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFinite.__init__(self, sourceObject)
        IManeuver.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFinite._private_init(self, intf)
        IManeuver._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFinite, [IManeuverOptimalFinite, IManeuver, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{6666593F-246D-4263-A0E4-78EFD0C04C7B}", ManeuverOptimalFinite)
agcls.AgTypeNameMap["ManeuverOptimalFinite"] = ManeuverOptimalFinite

class ManeuverOptimalFiniteSNOPTOptimizer(IManeuverOptimalFiniteSNOPTOptimizer):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteSNOPTOptimizer.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteSNOPTOptimizer._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteSNOPTOptimizer, [IManeuverOptimalFiniteSNOPTOptimizer])

agcls.AgClassCatalog.add_catalog_entry("{54E41ADE-C090-4C19-8B09-94F5030260C6}", ManeuverOptimalFiniteSNOPTOptimizer)
agcls.AgTypeNameMap["ManeuverOptimalFiniteSNOPTOptimizer"] = ManeuverOptimalFiniteSNOPTOptimizer

class ManeuverOptimalFiniteInitialBoundaryConditions(IManeuverOptimalFiniteInitialBoundaryConditions):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteInitialBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteInitialBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteInitialBoundaryConditions, [IManeuverOptimalFiniteInitialBoundaryConditions])

agcls.AgClassCatalog.add_catalog_entry("{3A8835CC-D4EF-4AFE-B198-FC4992E17D6B}", ManeuverOptimalFiniteInitialBoundaryConditions)
agcls.AgTypeNameMap["ManeuverOptimalFiniteInitialBoundaryConditions"] = ManeuverOptimalFiniteInitialBoundaryConditions

class ManeuverOptimalFiniteFinalBoundaryConditions(IManeuverOptimalFiniteFinalBoundaryConditions):
    """Properties of final boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteFinalBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteFinalBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteFinalBoundaryConditions, [IManeuverOptimalFiniteFinalBoundaryConditions])

agcls.AgClassCatalog.add_catalog_entry("{FF880BEA-2B6E-40ED-B7BC-85ED2367FC9C}", ManeuverOptimalFiniteFinalBoundaryConditions)
agcls.AgTypeNameMap["ManeuverOptimalFiniteFinalBoundaryConditions"] = ManeuverOptimalFiniteFinalBoundaryConditions

class ManeuverOptimalFinitePathBoundaryConditions(IManeuverOptimalFinitePathBoundaryConditions):
    """Properties of path boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFinitePathBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFinitePathBoundaryConditions._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFinitePathBoundaryConditions, [IManeuverOptimalFinitePathBoundaryConditions])

agcls.AgClassCatalog.add_catalog_entry("{C8E16C04-1A5A-43F9-B770-A67666512F8A}", ManeuverOptimalFinitePathBoundaryConditions)
agcls.AgTypeNameMap["ManeuverOptimalFinitePathBoundaryConditions"] = ManeuverOptimalFinitePathBoundaryConditions

class ManeuverOptimalFiniteSteeringNodeElement(IManeuverOptimalFiniteSteeringNodeElement):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteSteeringNodeElement.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteSteeringNodeElement._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteSteeringNodeElement, [IManeuverOptimalFiniteSteeringNodeElement])

agcls.AgClassCatalog.add_catalog_entry("{AE276E86-B321-4F0D-B657-852143B3F3EE}", ManeuverOptimalFiniteSteeringNodeElement)
agcls.AgTypeNameMap["ManeuverOptimalFiniteSteeringNodeElement"] = ManeuverOptimalFiniteSteeringNodeElement

class ManeuverOptimalFiniteSteeringNodeCollection(IManeuverOptimalFiniteSteeringNodeCollection):
    """Steering/nodes collection."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteSteeringNodeCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteSteeringNodeCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteSteeringNodeCollection, [IManeuverOptimalFiniteSteeringNodeCollection])

agcls.AgClassCatalog.add_catalog_entry("{23249624-8EFC-4AD8-9E67-A564A49D2D67}", ManeuverOptimalFiniteSteeringNodeCollection)
agcls.AgTypeNameMap["ManeuverOptimalFiniteSteeringNodeCollection"] = ManeuverOptimalFiniteSteeringNodeCollection

class ManeuverOptimalFiniteBounds(IManeuverOptimalFiniteBounds):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IManeuverOptimalFiniteBounds.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IManeuverOptimalFiniteBounds._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ManeuverOptimalFiniteBounds, [IManeuverOptimalFiniteBounds])

agcls.AgClassCatalog.add_catalog_entry("{0F56E447-2391-476B-863C-8B8596486F03}", ManeuverOptimalFiniteBounds)
agcls.AgTypeNameMap["ManeuverOptimalFiniteBounds"] = ManeuverOptimalFiniteBounds

class ProfileLambertProfile(IProfileLambertProfile, IProfile, IRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IProfileLambertProfile.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileLambertProfile._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileLambertProfile, [IProfileLambertProfile, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{3FA3162E-C38E-46D8-8F7C-B8421110EEB2}", ProfileLambertProfile)
agcls.AgTypeNameMap["ProfileLambertProfile"] = ProfileLambertProfile

class ProfileLambertSearchProfile(IProfileLambertSearchProfile, IProfile, IRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IProfileLambertSearchProfile.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileLambertSearchProfile._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileLambertSearchProfile, [IProfileLambertSearchProfile, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{9E98EFA2-5913-4BFA-8293-C294B80DFD4E}", ProfileLambertSearchProfile)
agcls.AgTypeNameMap["ProfileLambertSearchProfile"] = ProfileLambertSearchProfile

class ProfileGoldenSection(IProfileGoldenSection, IProfile, IRuntimeTypeInfoProvider):
    """The Golden Section profile."""
    def __init__(self, sourceObject=None):
        IProfileGoldenSection.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileGoldenSection._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileGoldenSection, [IProfileGoldenSection, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{8A0E8056-D72B-4C82-85F0-945A96AC4E2E}", ProfileGoldenSection)
agcls.AgTypeNameMap["ProfileGoldenSection"] = ProfileGoldenSection

class GoldenSectionControlCollection(IGoldenSectionControlCollection):
    """Properties for the list of Golden Section control parameters."""
    def __init__(self, sourceObject=None):
        IGoldenSectionControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGoldenSectionControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GoldenSectionControlCollection, [IGoldenSectionControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{5E3FCD6D-E592-4610-9831-87D9ABD81889}", GoldenSectionControlCollection)
agcls.AgTypeNameMap["GoldenSectionControlCollection"] = GoldenSectionControlCollection

class GoldenSectionControl(IGoldenSectionControl):
    """Control parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IGoldenSectionControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGoldenSectionControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GoldenSectionControl, [IGoldenSectionControl])

agcls.AgClassCatalog.add_catalog_entry("{00EBADDE-16F1-4FAC-8014-6952CBF0832E}", GoldenSectionControl)
agcls.AgTypeNameMap["GoldenSectionControl"] = GoldenSectionControl

class GoldenSectionResultCollection(IGoldenSectionResultCollection):
    """Properties for the list of Golden Section result parameters."""
    def __init__(self, sourceObject=None):
        IGoldenSectionResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGoldenSectionResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GoldenSectionResultCollection, [IGoldenSectionResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{72ADF8B9-9BE8-4112-B295-30B86DAF11F3}", GoldenSectionResultCollection)
agcls.AgTypeNameMap["GoldenSectionResultCollection"] = GoldenSectionResultCollection

class GoldenSectionResult(IGoldenSectionResult):
    """Result parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IGoldenSectionResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGoldenSectionResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GoldenSectionResult, [IGoldenSectionResult])

agcls.AgClassCatalog.add_catalog_entry("{A6F34FB1-1740-4EBB-B4FB-E6BB0B9EE427}", GoldenSectionResult)
agcls.AgTypeNameMap["GoldenSectionResult"] = GoldenSectionResult

class ProfileGridSearch(IProfileGridSearch, IProfile, IRuntimeTypeInfoProvider):
    """The Grid Search profile."""
    def __init__(self, sourceObject=None):
        IProfileGridSearch.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileGridSearch._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileGridSearch, [IProfileGridSearch, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{7C28EA98-702E-4CA9-8DE6-C49CEC2932E0}", ProfileGridSearch)
agcls.AgTypeNameMap["ProfileGridSearch"] = ProfileGridSearch

class GridSearchControlCollection(IGridSearchControlCollection):
    """Properties for the list of Grid Search control parameters."""
    def __init__(self, sourceObject=None):
        IGridSearchControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGridSearchControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GridSearchControlCollection, [IGridSearchControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{0A1300B1-D35A-46C5-BE62-3AFB811157C5}", GridSearchControlCollection)
agcls.AgTypeNameMap["GridSearchControlCollection"] = GridSearchControlCollection

class GridSearchControl(IGridSearchControl):
    """Control parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IGridSearchControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGridSearchControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GridSearchControl, [IGridSearchControl])

agcls.AgClassCatalog.add_catalog_entry("{DA10881F-2D20-41DF-88DD-F49F9A41BA76}", GridSearchControl)
agcls.AgTypeNameMap["GridSearchControl"] = GridSearchControl

class GridSearchResultCollection(IGridSearchResultCollection):
    """Properties for the list of Grid Search result parameters."""
    def __init__(self, sourceObject=None):
        IGridSearchResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGridSearchResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GridSearchResultCollection, [IGridSearchResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{E189AD76-0BE9-4922-8D76-3E28FAE74507}", GridSearchResultCollection)
agcls.AgTypeNameMap["GridSearchResultCollection"] = GridSearchResultCollection

class GridSearchResult(IGridSearchResult):
    """Result parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IGridSearchResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IGridSearchResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, GridSearchResult, [IGridSearchResult])

agcls.AgClassCatalog.add_catalog_entry("{B37527F8-1781-4484-985E-4F2BE2E8810A}", GridSearchResult)
agcls.AgTypeNameMap["GridSearchResult"] = GridSearchResult

class CalcObjectLinkEmbedControlCollection(ICalcObjectLinkEmbedControlCollection):
    """The Calculation Object link/embed component folder."""
    def __init__(self, sourceObject=None):
        ICalcObjectLinkEmbedControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        ICalcObjectLinkEmbedControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, CalcObjectLinkEmbedControlCollection, [ICalcObjectLinkEmbedControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{8EFFF2BC-B4AA-4F5E-BDF2-7218EBBE10FF}", CalcObjectLinkEmbedControlCollection)
agcls.AgTypeNameMap["CalcObjectLinkEmbedControlCollection"] = CalcObjectLinkEmbedControlCollection

class ProfileBisection(IProfileBisection, IProfile, IRuntimeTypeInfoProvider):
    """Single Parameter Bisection profile"""
    def __init__(self, sourceObject=None):
        IProfileBisection.__init__(self, sourceObject)
        IProfile.__init__(self, sourceObject)
        IRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IProfileBisection._private_init(self, intf)
        IProfile._private_init(self, intf)
        IRuntimeTypeInfoProvider._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, ProfileBisection, [IProfileBisection, IProfile, IRuntimeTypeInfoProvider])

agcls.AgClassCatalog.add_catalog_entry("{4A29B6D5-AF0C-4516-B362-5D111388524F}", ProfileBisection)
agcls.AgTypeNameMap["ProfileBisection"] = ProfileBisection

class BisectionControl(IBisectionControl):
    """Control parameters for  Bisection Seacrh Profile"""
    def __init__(self, sourceObject=None):
        IBisectionControl.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBisectionControl._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BisectionControl, [IBisectionControl])

agcls.AgClassCatalog.add_catalog_entry("{BC9B72FF-9317-4F85-B7C4-04D39B082CE2}", BisectionControl)
agcls.AgTypeNameMap["BisectionControl"] = BisectionControl

class BisectionControlCollection(IBisectionControlCollection):
    """Bisection control collection."""
    def __init__(self, sourceObject=None):
        IBisectionControlCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBisectionControlCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BisectionControlCollection, [IBisectionControlCollection])

agcls.AgClassCatalog.add_catalog_entry("{331CFC1C-3359-4B22-930F-19E3C152AB33}", BisectionControlCollection)
agcls.AgTypeNameMap["BisectionControlCollection"] = BisectionControlCollection

class BisectionResult(IBisectionResult):
    """Result parameters for Bisection profile."""
    def __init__(self, sourceObject=None):
        IBisectionResult.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBisectionResult._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BisectionResult, [IBisectionResult])

agcls.AgClassCatalog.add_catalog_entry("{56010C30-D445-40EF-9BFC-6CE97FCFD032}", BisectionResult)
agcls.AgTypeNameMap["BisectionResult"] = BisectionResult

class BisectionResultCollection(IBisectionResultCollection):
    """Bisection result collection."""
    def __init__(self, sourceObject=None):
        IBisectionResultCollection.__init__(self, sourceObject)
    def _private_init(self, intf:interface_proxy):
        self.__dict__["_intf"] = intf
        IBisectionResultCollection._private_init(self, intf)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        set_class_attribute(self, attrname, value, BisectionResultCollection, [IBisectionResultCollection])

agcls.AgClassCatalog.add_catalog_entry("{3F25CF16-ED89-486D-8F60-8F4F3729D41F}", BisectionResultCollection)
agcls.AgTypeNameMap["BisectionResultCollection"] = BisectionResultCollection


################################################################################
#          Copyright 2020-2023, Ansys Government Initiatives
################################################################################
