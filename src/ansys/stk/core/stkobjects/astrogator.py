################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################ 

__all__ = []

import typing

from ctypes   import byref, POINTER
from datetime import datetime
from enum     import IntEnum, IntFlag

try:
    from numpy import ndarray
except ModuleNotFoundError:
    pass
    
try:
    from pandas import DataFrame
except ModuleNotFoundError:
    pass

import agi.stk12.internal.comutil          as agcom
import agi.stk12.internal.coclassutil      as agcls
import agi.stk12.internal.marshall         as agmarshall
import agi.stk12.internal.dataanalysisutil as agdata
import agi.stk12.utilities.colors          as agcolor
from   agi.stk12.internal.comutil     import IUnknown, IDispatch, IPictureDisp, IAGFUNCTYPE, IEnumVARIANT
from   agi.stk12.internal.eventutil   import *
from   agi.stk12.utilities.exceptions import *


from agi.stk12.stkutil import *
from agi.stk12.stkobjects import *


def _raise_uninitialized_error(*args):
    raise STKRuntimeError("Valid STK object model classes are returned from STK methods and should not be created independently.")

class AgEVAGraphOption(IntEnum):
    """Mode that the mcs will run in."""
    # Don't graph.
    eVAGraphOptionNoGraph = 0,
    # Graph the difference.
    eVAGraphOptionGraphDifference = 1,
    # Graph the value.
    eVAGraphOptionGraphValue = 2

agcls.AgTypeNameMap["AgEVAGraphOption"] = AgEVAGraphOption
__all__.append("AgEVAGraphOption")

class AgEVASmartRunMode(IntEnum):
    """Mode that the mcs will run in."""
    # Run Entire Mission Control Sequence
    eVASmartRunModeEntireMCS = 0,
    # Run Only Changed Segments
    eVASmartRunModeOnlyChanged = 1

agcls.AgTypeNameMap["AgEVASmartRunMode"] = AgEVASmartRunMode
__all__.append("AgEVASmartRunMode")

class AgEVAFormulation(IntEnum):
    """Equinoctial Formulation."""
    # Posigrade.
    eVAFormulationPosigrade = 0,
    # Retrograde.
    eVAFormulationRetrograde = 1

agcls.AgTypeNameMap["AgEVAFormulation"] = AgEVAFormulation
__all__.append("AgEVAFormulation")

class AgEVALightingCondition(IntEnum):
    """The criteria of a Lighting stopping condition."""
    # The Enter Direct Sun criterion.
    eVALightingCriterionEnterDirectSun = 0,
    # The Exit Direct Sun criterion.
    eVALightingCriterionExitDirectSun = 1,
    # The Enter Umbra criterion.
    eVALightingCriterionEnterUmbra = 2,
    # The Exit Umbra criterion.
    eVALightingCriterionExitUmbra = 3

agcls.AgTypeNameMap["AgEVALightingCondition"] = AgEVALightingCondition
__all__.append("AgEVALightingCondition")

class AgEVAProfile(IntEnum):
    """Type of profile."""
    # Plugin search profile.
    eVAProfileSearchPlugin = 0,
    # Differential corrector profile.
    eVAProfileDifferentialCorrector = 2,
    # Change maneuver type profile.
    eVAProfileChangeManeuverType = 3,
    # Scripting tool profile.
    eVAProfileScriptingTool = 4,
    # Change return segment profile.
    eVAProfileChangeReturnSegment = 5,
    # Change propagator profile.
    eVAProfileChangePropagator = 6,
    # Change stop segment profile.
    eVAProfileChangeStopSegment = 7,
    # Change stopping condition state profile.
    eVAProfileChangeStoppingConditionState = 8,
    # Change seed finite maneuver profile.
    eVAProfileSeedFiniteManeuver = 9,
    # Run once profile.
    eVAProfileRunOnce = 10,
    # SNOPT Optimizer profile.
    eVAProfileSNOPTOptimizer = 11,
    # IPOPT Optimizer profile.
    eVAProfileIPOPTOptimizer = 12,
    # Lambert profile.
    eVAProfileLambertProfile = 13,
    # Lambert Search profile.
    eVAProfileLambertSearchProfile = 14,
    # Golden Section profile.
    eVAProfileGoldenSection = 15,
    # grid Search profile.
    eVAProfileGridSearch = 16

agcls.AgTypeNameMap["AgEVAProfile"] = AgEVAProfile
__all__.append("AgEVAProfile")

class AgEVAAccessCriterion(IntEnum):
    """The criteria of an Access stopping condition."""
    # The Gain Access criterion.
    eVAAccessCriterionGain = 0,
    # The Lose Access criterion.
    eVAAccessCriterionLose = 1,
    # The Either criterion.
    eVAAccessCriterionEither = 2

agcls.AgTypeNameMap["AgEVAAccessCriterion"] = AgEVAAccessCriterion
__all__.append("AgEVAAccessCriterion")

class AgEVAEclipsingBodiesSource(IntEnum):
    """The source types of the eclipsing bodies list."""
    # The eclipsing bodies list of the propagator's central body.
    eVAEclipsingBodiesPropagatorCb = 0,
    # A user-defined eclipsing bodies list related to the propagator's central body.
    eVAEclipsingBodiesUserDefined = 1,
    # The eclipsing bodies list of the vehicle's central body.
    eVAEclipsingBodiesVehicleCb = 2,
    # A list of eclipsing bodies from the vehicle's Basic Properties->Eclipse Bodies list.
    eVAEclipsingBodiesVehicleUserDefined = 3

agcls.AgTypeNameMap["AgEVAEclipsingBodiesSource"] = AgEVAEclipsingBodiesSource
__all__.append("AgEVAEclipsingBodiesSource")

class AgEVACriterion(IntEnum):
    """The stopping condition criterion types."""
    # The Cross Decreasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while decreasing.
    eVACriterionCrossDecreasing = 0,
    # The Cross Either criterion - the stopping condition is satisfied when either of the above situations occurs.
    eVACriterionCrossEither = 1,
    # The Cross Increasing criterion - the stopping condition is satisfied when the parameter reaches a value equal to the trip value while increasing.
    eVACriterionCrossIncreasing = 2

agcls.AgTypeNameMap["AgEVACriterion"] = AgEVACriterion
__all__.append("AgEVACriterion")

class AgEVACalcObjectReference(IntEnum):
    """The calculation object Reference Selection types."""
    # The Use Basic Reference type - uses the current satellite as the reference vehicle.
    eVACalcObjectReferenceBasic = 0,
    # The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle.
    eVACalcObjectReferenceSpecified = 1

agcls.AgTypeNameMap["AgEVACalcObjectReference"] = AgEVACalcObjectReference
__all__.append("AgEVACalcObjectReference")

class AgEVACalcObjectCentralBodyReference(IntEnum):
    """The calculation object Central Body Reference Selection types."""
    # The Use Basic Reference type - uses the current satellite as the reference vehicle.
    eVACalcObjectCentralBodyReferenceSpecified = 0,
    # The UserSpecifiedReference type - uses a user specified vehicle object as the reference vehicle.
    eVACalcObjectCentralBodyReferenceParent = 1

agcls.AgTypeNameMap["AgEVACalcObjectCentralBodyReference"] = AgEVACalcObjectCentralBodyReference
__all__.append("AgEVACalcObjectCentralBodyReference")

class AgEVACalcObjectElem(IntEnum):
    """The calculation object Element Types."""
    # Brouwer-Lyddane mean elements considering both the short and long period terms (i.e. resulting from averaging over the rotation of periapse). The perturbation terms are the J2, J3, J4 and J5 oblateness terms and it considers the term involving J2^2.
    eVACalcObjectElemBrouwerLyddaneMeanLong = 0,
    # Brouwer-Lyddane Mean Short - Brouwer-Lyddane mean elements considering only the short period terms (i.e. those involving averaging over the period of the orbit) where the only perturbation force is the oblateness arising from the J2 gravity term.
    eVACalcObjectElemBrouwerLyddaneMeanShort = 1,
    # Kozai-Izsak Mean - Kozai-Izsak mean elements for which only the short period terms (i.e. those involving averaging over the period of the orbit) are considered. The only perturbation force considered is the oblateness arising from the J2 gravity term.
    eVACalcObjectElemKozaiIzsakMean = 2,
    # Osculating.
    eVACalcObjectElemOsculating = 3

agcls.AgTypeNameMap["AgEVACalcObjectElem"] = AgEVACalcObjectElem
__all__.append("AgEVACalcObjectElem")

class AgEVAProfileMode(IntEnum):
    """The Target Sequence profile modes."""
    # Iterate - the Target Sequence will run the profile as it is configured in an attempt to attain the desired solution.
    eVAProfileModeIterate = 0,
    # Not Active - the Target Sequence will ignore the profile when running.
    eVAProfileModeNotActive = 1,
    # Run Once - the Target Sequence will run the profile once according to its current configuration.
    eVAProfileModeRunOnce = 2,
    # Active - the Target Sequence will apply the change that the profile passes when running.
    eVAProfileModeActive = 3

agcls.AgTypeNameMap["AgEVAProfileMode"] = AgEVAProfileMode
__all__.append("AgEVAProfileMode")

class AgEVAControlStoppingCondition(IntEnum):
    """The stopping condition control types."""
    # Trip - the value at which the stopping condition will be satisfied.
    eVAControlStoppingConditionTripValue = 0

agcls.AgTypeNameMap["AgEVAControlStoppingCondition"] = AgEVAControlStoppingCondition
__all__.append("AgEVAControlStoppingCondition")

class AgEVAState(IntEnum):
    """The Stop segment state types."""
    # Enabled - the segment stops the run of the MCS.
    eVAStateEnabled = 0,
    # Disabled - the MCS ignores this segment and continues to run.
    eVAStateDisabled = 1

agcls.AgTypeNameMap["AgEVAState"] = AgEVAState
__all__.append("AgEVAState")

class AgEVAReturnControl(IntEnum):
    """The Return segment control types"""
    # Enable - returns control of the MCS run to the parent segment.
    eVAReturnControlEnable = 0,
    # Disable - the MCS ignores this segment and continues to run.
    eVAReturnControlDisable = 1,
    # Enable (except Profiles bypass)- functions as enabled except when run from a Target Sequence profile (e.g., a differential corrector), which will ignore it.
    eVAReturnControlEnableExceptProfilesBypass = 2

agcls.AgTypeNameMap["AgEVAReturnControl"] = AgEVAReturnControl
__all__.append("AgEVAReturnControl")

class AgEVADrawPerturbation(IntEnum):
    """The Draw Perturbation types for a Differential Corrector profile."""
    # Segment Color - perturbations will be displayed in the trajectory color defined for the individual segments within the target sequence.
    eVADrawPerturbationSegmentColor = 0,
    # Don't Draw - perturbations will not be drawn, which may decrease the run time of the target sequence.
    eVADrawPerturbationDontDraw = 1,
    # Targeter Color - perturbations will be displayed in the trajectory color defined for the target sequence.
    eVADrawPerturbationTargeterColor = 2

agcls.AgTypeNameMap["AgEVADrawPerturbation"] = AgEVADrawPerturbation
__all__.append("AgEVADrawPerturbation")

class AgEVADeriveCalcMethod(IntEnum):
    """The Derivative Calculation method types for a Differential Corrector profile."""
    # Forward Difference - (f(x + delta) - f(x))/ delta
    eVADeriveCalcMethodForward = 0,
    # Central Difference - (f(x + delta) - f(x - delta)) / 2delta
    eVADeriveCalcMethodCentral = 1,
    # Signed Difference - if x is positive, use the forward difference; if x is negative, use the backward difference.
    eVADeriveCalcMethodSigned = 2

agcls.AgTypeNameMap["AgEVADeriveCalcMethod"] = AgEVADeriveCalcMethod
__all__.append("AgEVADeriveCalcMethod")

class AgEVAConvergenceCriteria(IntEnum):
    """The Convergence Criteria types for a Differential Corrector profile."""
    # Equality Constraints Satisfied - the differences between the achieved and desired equality constraint values must be within the specified tolerances for convergence.
    eVAConvergenceCriteriaEqualityConstraintWithinTolerance = 0,
    # Equality Constraints Satisfied or Parameter Variations within Tolerance - the differences between the achieved and desired EC values must be within tolerances, or the last updates to the control parameters must be within tolerances for convergence.
    eVAConvervenceCriteriaEitherEqualityConstraintsOrControlParams = 1

agcls.AgTypeNameMap["AgEVAConvergenceCriteria"] = AgEVAConvergenceCriteria
__all__.append("AgEVAConvergenceCriteria")

class AgEVADCScalingMethod(IntEnum):
    """The Scaling Method types for a Differential Corrector profile."""
    # By initial value.
    eVADCScalingMethodInitialValue = 0,
    # By one (no scaling).
    eVADCScalingMethodOneNoScaling = 1,
    # By specified value.
    eVADCScalingMethodSpecifiedValue = 2,
    # By tolerance.
    eVADCScalingMethodTolerance = 3

agcls.AgTypeNameMap["AgEVADCScalingMethod"] = AgEVADCScalingMethod
__all__.append("AgEVADCScalingMethod")

class AgEVAControlUpdate(IntEnum):
    """Update segment properties that can be selected as control parameters for a Target Sequence."""
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlUpdateCdVal = 100,
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlUpdateCrVal = 101,
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateDragAreaVal = 102,
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlUpdateDryMassVal = 103,
    # Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3).
    eVAControlUpdateFuelDensityVal = 104,
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlUpdateFuelMassVal = 105,
    # The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateRadiationPressureAreaVal = 106,
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlUpdateRadiationPressureCoefficientVal = 107,
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared.
    eVAControlUpdateSRPAreaVal = 108,
    # Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa).
    eVAControlUpdateTankPressureVal = 109,
    # Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit.
    eVAControlUpdateTankTempVal = 110

agcls.AgTypeNameMap["AgEVAControlUpdate"] = AgEVAControlUpdate
__all__.append("AgEVAControlUpdate")

class AgEVAControlFollow(IntEnum):
    """Follow segment properties that can be selected as control parameters for a Target Sequence."""
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowFuelMass = 200,
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlFollowCd = 201,
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlFollowCr = 202,
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowDragArea = 203,
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowDryMass = 204,
    # Fuel Density - the density of the fuel tank. Enter a value in the selected mass unit per the selected distance unit cubed (e.g. kg/m^3).
    eVAControlFollowFuelDensity = 205,
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlFollowK1 = 206,
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value.
    eVAControlFollowK2 = 207,
    # The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowRadiationPressureArea = 208,
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlFollowCk = 209,
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Enter a value in the selected distance unit squared.
    eVAControlFollowSRPArea = 210,
    # Tank Pressure - the fuel tank pressure. Enter a value in the selected pressure unit (e.g. Pa).
    eVAControlFollowTankPressure = 211,
    # Tank Temperature - the temperature of the fuel tank. Enter a value in the selected temperature unit.
    eVAControlFollowTankTemp = 212,
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Enter a value in the selected mass unit (e.g. kg).
    eVAControlFollowMaxFuelMass = 213,
    # Tank Volume - the volume of the fuel tank. Enter a value in the selected distance unit cubed (e.g. m^3). The minimum value is 1e-019 m^3.
    eVAControlFollowTankVolume = 214,
    # X Offset - the distance that the spacecraft will be offset from the leader's body frame along the X axis.
    eVAControlFollowXOffset = 215,
    # Y Offset - the distance that the spacecraft will be offset from the leader's body frame along the Y axis.
    eVAControlFollowYOffset = 216,
    # Z Offset - the distance that the spacecraft will be offset from the leader's body frame along the Z axis.
    eVAControlFollowZOffset = 217

agcls.AgTypeNameMap["AgEVAControlFollow"] = AgEVAControlFollow
__all__.append("AgEVAControlFollow")

class AgEVAControlInitState(IntEnum):
    """Initial State segment properties that can be selected as control parameters for a Target Sequence."""
    # Fuel Mass - the mass of the spacecraft propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlInitStateFuelMass = 300,
    # Vx Component - the X component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVx = 301,
    # Vy Component - the Y component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVy = 302,
    # Vz Component - the Z component of the spacecraft velocity vector.
    eVAControlInitStateCartesianVz = 303,
    # X Component - the X component of the spacecraft position vector.
    eVAControlInitStateCartesianX = 304,
    # Y Component - the Y component of the spacecraft position vector.
    eVAControlInitStateCartesianY = 305,
    # Z Component - the Z component of the spacecraft position vector.
    eVAControlInitStateCartesianZ = 306,
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlInitStateCd = 307,
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlInitStateCr = 308,
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Enter a value in the selected distance unit squared.
    eVAControlInitStateDragArea = 309,
    # Dry Mass - the mass of the spacecraft exclusive of propellant. Enter a value in the selected mass unit (e.g. kg).
    eVAControlInitStateDryMass = 310,
    # Epoch - the orbit epoch.
    eVAControlInitStateEpoch = 311,
    # Fuel Density - the density of the fuel tank.
    eVAControlInitStateFuelDensity = 312,
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlInitStateK1 = 313,
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (Y bias) value.
    eVAControlInitStateK2 = 314,
    # Eccentricity - the ratio of the distance between the foci to the major axis of the orbital ellipse. Dimensionless.
    eVAControlInitStateKeplerianEcc = 315,
    # Inclination - the angle from the +Z axis of the coordinate system to the angular momentum vector of the spacecraft's orbit.
    eVAControlInitStateKeplerianInc = 316,
    # Right Ascension of Ascending Node - the angle between the X direction of the coordinate system and the point where the orbit crosses the X-Y plane in the +Z direction.
    eVAControlInitStateKeplerianRAAN = 317,
    # Semimajor Axis - half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateKeplerianSMA = 318,
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateKeplerianTA = 319,
    # Argument of Periapsis - the angle measured in the direction of spacecraft motion, in the orbit plane, from the ascending node to the periapsis of the orbit.
    eVAControlInitStateKeplerianW = 320,
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAControlInitStateRadiationPressureArea = 327,
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlInitStateCk = 328,
    # Velocity Azimuth - the angle in the spacecraft local horizontal plane between the projection of the velocity vector onto that plane and the local +Z direction measured as positive in the clockwise direction from north.
    eVAControlInitStateSphericalAz = 329,
    # Declination - the angle from the X-Y plane of the coordinate system to the spacecraft position vector.
    eVAControlInitStateSphericalDec = 330,
    # Horizontal Flight Path Angle - the complement of the angle between the spacecraft velocity vector and the radius vector (90 deg minus the vertical flight path angle).
    eVAControlInitStateSphericalHorizFPA = 331,
    # Right Ascension - angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spacecraft position vector.
    eVAControlInitStateSphericalRA = 332,
    # Radius Magnitude - the magnitude of the spacecraft position vector.
    eVAControlInitStateSphericalRMag = 333,
    # Velocity Magnitude - the magnitude of the spacecraft velocity vector.
    eVAControlInitStateSphericalVMag = 334,
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAControlInitStateSRPArea = 335,
    # Tank Pressure - the fuel tank pressure.
    eVAControlInitStateTankPressure = 336,
    # Tank Temperature - the temperature of the fuel tank.
    eVAControlInitStateTankTemp = 337,
    # Declination of Incoming Asymptote - the declination of the incoming asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecInAsympDec = 338,
    # Right Ascension of Incoming Asymptote - the right ascension of the hyperbolic incoming asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecInAsympRA = 339,
    # Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis.
    eVAControlInitStateTargetVecInVelAzAtPeriapsis = 340,
    # C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis.
    eVAControlInitStateTargetVecInC3 = 341,
    # Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit.
    eVAControlInitStateTargetVecInRadOfPeriapsis = 342,
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateTargetVecInTrueAnomaly = 343,
    # Declination of Outgoing Asymptote - the declination of the outgoing asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecOutAsympDec = 344,
    # Right Ascension of Outgoing Asymptote - the right ascension of the hyperbolic outgoing asymptote in the selected coordinate system.
    eVAControlInitStateTargetVecOutAsympRA = 345,
    # Velocity Azimuth at Periapsis - the inertial flight path azimuth of the trajectory measured at periapsis.
    eVAControlInitStateTargetVecOutVelAzAtPeriapsis = 346,
    # C3 Energy - the energy of the orbit, computed as - mu / a, where mu is the gravity constant of the central body and a is the semimajor axis.
    eVAControlInitStateTargetVecOutC3 = 347,
    # Radius of Periapsis - distance from the center of mass of the central body to the periapsis of the hyperbolic orbit.
    eVAControlInitStateTargetVecOutRadOfPeriapsis = 348,
    # True Anomaly - the angle from the periapsis of the orbit to the spacecraft's position vector, measured in the direction of spacecraft motion.
    eVAControlInitStateTargetVecOutTrueAnomaly = 349,
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences.
    eVAControlInitStateMaxFuelMass = 350,
    # Tank Volume - the volume of the fuel tank.
    eVAControlInitStateTankVolume = 351,
    # G - Magnitude of orbital angular momentum, sqrt(GM * p).
    eVAControlInitStateDelaunayG = 352,
    # H - Z component of orbital angular momentum, G cos(inc).
    eVAControlInitStateDelaunayH = 353,
    # Inclination - The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis.
    eVAControlInitStateDelaunayInc = 354,
    # L - Related to two-body orbital energy, sqrt(GM * a)
    eVAControlInitStateDelaunayL = 355,
    # Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate.
    eVAControlInitStateDelaunayMeanAnomaly = 356,
    # Right Ascension of Ascending Node - The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane.
    eVAControlInitStateDelaunayRAAN = 357,
    # Semi-latus Rectum - Distance from focus to orbit at true anomaly of 90 degrees
    eVAControlInitStateDelaunaySemiLatusRectum = 358,
    # Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateDelaunaySMA = 359,
    # Argument of Periapsis - The angle from the ascending node to the eccentricity vector measured in the direction of the satellite's motion and in the orbit plane.
    eVAControlInitStateDelaunayW = 360,
    # H - With K, describe the shape and position of periapsis of the orbit, ecc * sin(RAAN + w)
    eVAControlInitStateEquinoctialH = 361,
    # K - With H, describe the shape and position of periapsis of the orbit, ecc * cos(RAAN + w)
    eVAControlInitStateEquinoctialK = 362,
    # Mean Longitude - RAAN + w + M
    eVAControlInitStateEquinoctialMeanLongitude = 363,
    # Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion.
    eVAControlInitStateEquinoctialMeanMotion = 364,
    # P - With Q, describes the orientation of the orbit plane, tan(inc/2) * sin(RAAN)
    eVAControlInitStateEquinoctialP = 365,
    # Q - With P, describes the orientation of the orbit plane, tan(inc/2) * cos(RAAN)
    eVAControlInitStateEquinoctialQ = 366,
    # Semimajor Axis - Half the length of the major (longest) axis of the orbital ellipse.
    eVAControlInitStateEquinoctialSMA = 367,
    # Altitude - The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid.
    eVAControlInitStateMixedSphericalAltitude = 368,
    # Azimuth - The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction.
    eVAControlInitStateMixedSphericalAzimuth = 369,
    # Horizontal Flight Path Angle - The complement of the angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateMixedSphericalHorizFPA = 370,
    # Latitude - The geodetic latitude of a point is the angle between the normal to the reference ellipsoid that passes through the satellite position and the equatorial plane.
    eVAControlInitStateMixedSphericalLatitude = 371,
    # Longitude
    eVAControlInitStateMixedSphericalLongitude = 372,
    # Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateMixedSphericalVerticalFPA = 373,
    # Velocity Magnitude - The magnitude of the inertial velocity vector.
    eVAControlInitStateMixedSphericalVMag = 374,
    # Vertical Flight Path Angle -  The angle between the inertial velocity vector and the radius vector.
    eVAControlInitStateSphericalVerticalFPA = 375,
    # Apoapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisAltShape = 376,
    # Apoapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisAltSize = 377,
    # Apoapsis Radius - Shape Parameter - Distance from the center of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisRadShape = 378,
    # Apoapsis Radius - Size Parameter - Distance from the center of the central body to the point of maximum radius in the orbit.
    eVAControlInitStateKeplerianApoapsisRadSize = 379,
    # Argument of Latitude - The sum of the True Anomaly and the Argument of Perigee.
    eVAControlInitStateKeplerianArgLat = 380,
    # Eccentric Anomaly - Angle measured with an origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse.
    eVAControlInitStateKeplerianEccAnomaly = 381,
    # Longitude of Ascending Node - Longitude of the Ascending Node is the Earth-fixed longitude where the satellite has crossed the inertial equator from south to north based on an assumption of two-body motion.
    eVAControlInitStateKeplerianLAN = 382,
    # Mean Anomaly - The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate.
    eVAControlInitStateKeplerianMeanAnomaly = 383,
    # Mean Motion - The number of orbits per day (86400 sec/period), based on assumed two-body motion.
    eVAControlInitStateKeplerianMeanMotion = 384,
    # Periapsis Altitude - Shape Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisAltShape = 385,
    # Periapsis Altitude - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisAltSize = 386,
    # Periapsis Radius - Shape Parameter - Distance from the center of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisRadShape = 387,
    # Periapsis Radius - Size Parameter - Distance from the surface of the central body to the point of minimum radius in the orbit.
    eVAControlInitStateKeplerianPeriapsisRadSize = 388,
    # Period - The duration of one orbit, based on assumed two-body motion.
    eVAControlInitStateKeplerianPeriod = 389,
    # Time Past Ascending Node - The elapsed time since the last ascending node crossing based on assumed two-body motion.
    eVAControlInitStateKeplerianTimePastAN = 390,
    # Time Past Periapsis - The elapsed time since the last perigee passage based on assumed two-body motion.
    eVAControlInitStateKeplerianTimePastPeriapsis = 391

agcls.AgTypeNameMap["AgEVAControlInitState"] = AgEVAControlInitState
__all__.append("AgEVAControlInitState")

class AgEVAControlManeuver(IntEnum):
    """Maneuver segment properties that can be selected as control parameters for a Target Sequence."""
    # The Cartesian X component of the thrust vector.
    eVAControlManeuverFiniteCartesianX = 400,
    # The Cartesian Y component of the thrust vector.
    eVAControlManeuverFiniteCartesianY = 401,
    # The Cartesian Z component of the thrust vector.
    eVAControlManeuverFiniteCartesianZ = 402,
    # The Euler A (Phi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles1 = 403,
    # The Euler B (Theta) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles2 = 404,
    # The Euler C (Psi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverFiniteEulerAngles3 = 405,
    # The spherical azimuth component of the thrust vector.
    eVAControlManeuverFiniteSphericalAz = 406,
    # The spherical elevation component of the thrust vector.
    eVAControlManeuverFiniteSphericalElev = 407,
    # The Cartesian X component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianX = 408,
    # The Cartesian Y component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianY = 409,
    # The Cartesian Z component of the thrust vector.
    eVAControlManeuverImpulsiveCartesianZ = 410,
    # The Euler A (Phi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles1 = 411,
    # The Euler B (Theta) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles2 = 412,
    # The Euler C (Psi) component of the rotation from the reference axes to the body frame.
    eVAControlManeuverImpulsiveEulerAngles3 = 413,
    # The spherical azimuth component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalAz = 414,
    # The spherical elevation component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalElev = 415,
    # The spherical magnitude component of the thrust vector.
    eVAControlManeuverImpulsiveSphericalMag = 416,
    # The burn center bias of the thrust.
    eVAControlManeuverFiniteBurnCenterBias = 417,
    # The thrust efficiency value.
    eVAControlManeuverFiniteThrustEfficiency = 418,
    # The time varying azimuth polynomial constant term.
    eVAControlManeuverFiniteAz0 = 419,
    # The time varying azimuth polynomial linear term.
    eVAControlManeuverFiniteAz1 = 420,
    # The time varying azimuth polynomial quadratic term.
    eVAControlManeuverFiniteAz2 = 421,
    # The time varying azimuth polynomial cubic term.
    eVAControlManeuverFiniteAz3 = 422,
    # The time varying azimuth polynomial quartic term.
    eVAControlManeuverFiniteAz4 = 423,
    # The time varying azimuth sine amplitude term.
    eVAControlManeuverFiniteAzA = 424,
    # The time varying azimuth sine frequency term.
    eVAControlManeuverFiniteAzF = 425,
    # The time varying azimuth sine phase term.
    eVAControlManeuverFiniteAzP = 426,
    # The time varying elevation polynomial constant term.
    eVAControlManeuverFiniteEl0 = 427,
    # The time varying elevation polynomial linear term.
    eVAControlManeuverFiniteEl1 = 428,
    # The time varying elevation polynomial quadratic term.
    eVAControlManeuverFiniteEl2 = 429,
    # The time varying elevation polynomial cubic term.
    eVAControlManeuverFiniteEl3 = 430,
    # The time varying elevation polynomial quartic term.
    eVAControlManeuverFiniteEl4 = 431,
    # The time varying elevation sine amplitude term.
    eVAControlManeuverFiniteElA = 432,
    # The time varying elevation sine frequency term.
    eVAControlManeuverFiniteElF = 433,
    # The time varying elevation sine phase term.
    eVAControlManeuverFiniteElP = 434

agcls.AgTypeNameMap["AgEVAControlManeuver"] = AgEVAControlManeuver
__all__.append("AgEVAControlManeuver")

class AgEVAControlLaunch(IntEnum):
    """Launch segment properties that can be selected as control parameters for a Target Sequence."""
    # The date and time of the launch.
    eVAControlLaunchEpoch = 500,
    # The geodetic latitude of the launch location.
    eVAControlLaunchGeodeticLat = 501,
    # The geodetic longitude of the launch location.
    eVAControlLaunchGeodeticLon = 502,
    # The geodetic altitude of the launch location.
    eVAControlLaunchGeodeticAlt = 503,
    # The geocentric latitude of the launch location.
    eVAControlLaunchGeocentricLat = 504,
    # The geocentric longitude of the launch location.
    eVAControlLaunchGeocentricLon = 505,
    # The geocentric radius of the launch location.
    eVAControlLaunchGeocentricRad = 506,
    # The time of flight, from launch until burnout.
    eVAControlLaunchTimeOfFlight = 507,
    # The geocentric latitude of the burnout point.
    eVAControlLaunchBurnoutGeocentricLat = 508,
    # The geocentric longitude of the burnout point.
    eVAControlLaunchBurnoutGeocentricLon = 509,
    # The geocentric radius of the burnout point.
    eVAControlLaunchBurnoutGeocentricRad = 510,
    # The geodetic latitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticLat = 511,
    # The geodetic longitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticLon = 512,
    # The geodetic altitude of the burnout point.
    eVAControlLaunchBurnoutGeodeticAlt = 513,
    # The geodetic azimuth of the launch trajectory.
    eVAControlLaunchBurnoutAzAltAz = 514,
    # The geodetic downrange distance of the burnout point.
    eVAControlLaunchBurnoutAzAltDownrangeDist = 515,
    # The geodetic altitude of the burnout point.
    eVAControlLaunchBurnoutAzAltAlt = 516,
    # The geocentric azimuth of the launch trajectory.
    eVAControlLaunchBurnoutAzRadAz = 517,
    # The geocentric downrange distnce of the burnout point.
    eVAControlLaunchBurnoutAzRadDownrangeDist = 518,
    # The geocentric radius of the burnout point.
    eVAControlLaunchBurnoutAzRadRad = 519,
    # The burnout velocity in the fixed frame.
    eVAControlLaunchBurnoutFixedVelocity = 520,
    # The burnout velocity in the inertial frame.
    eVAControlLaunchBurnoutInertialVelocity = 521,
    # Inertial Velocity Azimuth - the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed.
    eVAControlLaunchBurnoutInertialVelocityAzimuth = 522,
    # Inertial Horizontal FPA - the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle.
    eVAControlLaunchBurnoutInertialHorizontalFPA = 523,
    # Dry Mass - the mass of the spacecraft exclusive of propellant.
    eVAControlLaunchDryMass = 524,
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAControlLaunchCd = 525,
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations.
    eVAControlLaunchDragArea = 526,
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlLaunchCr = 527,
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAControlLaunchSRPArea = 528,
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAControlLaunchCk = 529,
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAControlLaunchRadiationPressureArea = 530,
    # GPS Solar Radiation Pressure K1 - if you are using a non-spherical SRP model, this field defines the model's K1 (scale) value.
    eVAControlLaunchK1 = 531,
    # GPS Solar Radiation Pressure K2 - if you are using a non-spherical SRP model, this field defines the model's K2 (scale) value.
    eVAControlLaunchK2 = 532,
    # The fuel tank pressure.
    eVAControlLaunchTankPressure = 533,
    # The volume of the fuel tank.
    eVAControlLaunchTankVolume = 534,
    # The fuel tank temperature.
    eVAControlLaunchTankTemp = 535,
    # The density of the fuel tank.
    eVAControlLaunchFuelDensity = 536,
    # The mass of the spacecraft propellant.
    eVAControlLaunchFuelMass = 537,
    # Maximum Fuel Mass - the maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences.
    eVAControlLaunchMaxFuelMass = 538

agcls.AgTypeNameMap["AgEVAControlLaunch"] = AgEVAControlLaunch
__all__.append("AgEVAControlLaunch")

class AgEVAControlAdvanced(IntEnum):
    """Propagate segment properties that can be selected as control parameters for a Target Sequence."""
    # The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied.
    eVAControlPropagateMaxPropTime = 600,
    # The minimum propagation time - minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction.
    eVAControlPropagateMinPropTime = 601

agcls.AgTypeNameMap["AgEVAControlAdvanced"] = AgEVAControlAdvanced
__all__.append("AgEVAControlAdvanced")

class AgEVATargetSeqAction(IntEnum):
    """Action options for Target Sequence profiles."""
    # Run Nominal Sequence - runs the mission control sequence.
    eVATargetSeqActionRunNominalSeq = 0,
    # Run Active Profiles - runs the mission control sequence allowing the active profiles to operate.
    eVATargetSeqActionRunActiveProfiles = 1,
    # Run Active Profiles Once - runs the profile with corrections applied to control parameters.
    eVATargetSeqActionRunActiveProfilesOnce = 2

agcls.AgTypeNameMap["AgEVATargetSeqAction"] = AgEVATargetSeqAction
__all__.append("AgEVATargetSeqAction")

class AgEVAProfilesFinish(IntEnum):
    """Action options for Target Sequence profiles convergence."""
    # Run To Return And Continue - run to the first Return segment in the sequence, then pass control to the next segment after this target sequence. Often, the only Return is at the end of the target sequence.
    eVAProfilesFinishRunToReturnAndContinue = 0,
    # Run To Return And Stop - run the target sequence to the first Return segment, and then stop running the MCS altogether.
    eVAProfilesFinishRunToReturnAndStop = 1,
    # Stop - stop the MCS as soon as the target sequence has converged.
    eVAProfilesFinishStop = 2

agcls.AgTypeNameMap["AgEVAProfilesFinish"] = AgEVAProfilesFinish
__all__.append("AgEVAProfilesFinish")

class AgEVAUpdateParam(IntEnum):
    """Spacecraft parameters that can be modified by an Update segment."""
    # Drag Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations.
    eVAUpdateParamDragArea = 0,
    # Solar Radiation Pressure (Spherical) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations.
    eVAUpdateParamSRPArea = 1,
    # Dry Mass - the mass of the spacecraft exclusive of propellant.
    eVAUpdateParamDryMass = 2,
    # The mass of the spacecraft propellant.
    eVAUpdateParamFuelMass = 3,
    # The density of the fuel tank.
    eVAUpdateParamFuelDensity = 4,
    # The fuel tank pressure.
    eVAUpdateParamTankPressure = 5,
    # The temperature of the fuel tank.
    eVAUpdateParamTankTemp = 6,
    # Solar Radiation Pressure (Spherical) Coefficient (Cr) - the reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAUpdateParamCr = 7,
    # Drag Coefficient (Cd) - the dimensionless drag coefficient associated with the drag area.
    eVAUpdateParamCd = 8,
    # Radiation Pressure (Albedo/Thermal) Coefficient (Ck) - the reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all.
    eVAUpdateParamCk = 9,
    # Radiation Pressure (Albedo/Thermal) Area - the cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations.
    eVAUpdateParamRadiationPressureArea = 10

agcls.AgTypeNameMap["AgEVAUpdateParam"] = AgEVAUpdateParam
__all__.append("AgEVAUpdateParam")

class AgEVAUpdateAction(IntEnum):
    """Actions for the Update segment."""
    # No change in value - leave the current value for this parameter unchanged (ignoring any quantity that may appear in the Value column).
    eVAUpdateActionNoChange = 0,
    # Add value - add the quantity entered in the Value column to the current value for this parameter.
    eVAUpdateActionAddValue = 1,
    # Subtract value - subtract the quantity entered in the Value column from the current value for this parameter.
    eVAUpdateActionSubtractValue = 2,
    # Set to new value - replace the current value for this parameter with the quantity entered in the Value column.
    eVAUpdateActionSetToNewValue = 3

agcls.AgTypeNameMap["AgEVAUpdateAction"] = AgEVAUpdateAction
__all__.append("AgEVAUpdateAction")

class AgEVAPressureMode(IntEnum):
    """Pressure Mode options."""
    # Blow-Down - pressure decreases as propellant is consumed and the volume occupied by the pressurant gas consequently increases. This is based on the ideal gas law.
    eVAPressureModeBlowDown = 0,
    # Pressure-Regulated - constant pressure is maintained in the fuel tank through some pressurization mechanism as the propellant mass decreases.
    eVAPressureModePressureRegulated = 1

agcls.AgTypeNameMap["AgEVAPressureMode"] = AgEVAPressureMode
__all__.append("AgEVAPressureMode")

class AgEVAThrustType(IntEnum):
    """Thrust options."""
    # Affects Acceleration and Mass Flow Calculations - may represent an inefficiency in the propulsion tanks and feed lines.
    eVAThrustTypeAffectsAccelAndMassFlow = 0,
    # Affects Acceleration Only - an efficiency of 0.98 means that only 98% of the fuel will be spent to get 98% thrust. For example, a thrust efficiency affecting acceleration only may represent some problem in the combustion chamber.
    eVAThrustTypeAffectsAccelOnly = 1

agcls.AgTypeNameMap["AgEVAThrustType"] = AgEVAThrustType
__all__.append("AgEVAThrustType")

class AgEVAAttitudeUpdate(IntEnum):
    """Attitude Update."""
    # Update during burn - updated throughout the maneuver so as to maintain the required thrust direction. This forces the thrust vector to the specified direction at every instant throughout the burn.
    eVAAttitudeUpdateDuringBurn = 0,
    # Inertial at ignition - specified by Attitude Control at ignition and remains the same throughout the maneuver. This fixes the thrust direction in the inertial direction calculated at the beginning of the burn and is used for inertially fixed spacecraft.
    eVAAttitudeUpdateInertialAtIgnition = 1,
    # Inertial at start - specified by Attitude Control at the beginning of the maneuver segment and remains the same throughout the maneuver.
    eVAAttitudeUpdateInertialAtStart = 2

agcls.AgTypeNameMap["AgEVAAttitudeUpdate"] = AgEVAAttitudeUpdate
__all__.append("AgEVAAttitudeUpdate")

class AgEVAPropulsionMethod(IntEnum):
    """Propulsion method options."""
    # Engine Model - can be used to quickly model the firing of a single engine.
    eVAPropulsionMethodEngineModel = 0,
    # Thruster Set - used to fire multiple engines simultaneously, and to simulate off-pulsing or complex engine pointing.
    eVAPropulsionMethodThrusterSet = 1

agcls.AgTypeNameMap["AgEVAPropulsionMethod"] = AgEVAPropulsionMethod
__all__.append("AgEVAPropulsionMethod")

class AgEVACustomFunction(IntEnum):
    """Attitude definition options for other STK functions."""
    # Use attitude page definition for other STK functions - the actual attitude during the maneuver is ignored and the satellite is considered to always be in the attitude specified by the page for all other calculations in STK.
    eVAEnablePageDefinition = 0,
    # Maneuver attitude will be used for the satellite during the time at the maneuver, and during the specified lead and trail times. This attitude will also show up in reports, graphs, sensor access calculations, and in the 3D Graphics window.
    eVAEnableManeuverAttitude = 1

agcls.AgTypeNameMap["AgEVACustomFunction"] = AgEVACustomFunction
__all__.append("AgEVACustomFunction")

class AgEVABodyAxis(IntEnum):
    """Attitude body axis options."""
    # The positive X engine acceleration direction.
    eVABodyAxisPlusX = 0,
    # The positive Y engine acceleration direction.
    eVABodyAxisPlusY = 1,
    # The positive Z engine acceleration direction.
    eVABodyAxisPlusZ = 2,
    # The negative X engine acceleration direction.
    eVABodyAxisMinusX = 3,
    # The negative Y engine acceleration direction.
    eVABodyAxisMinusY = 4,
    # The negative Z engine acceleration direction.
    eVABodyAxisMinusZ = 5

agcls.AgTypeNameMap["AgEVABodyAxis"] = AgEVABodyAxis
__all__.append("AgEVABodyAxis")

class AgEVAConstraintSign(IntEnum):
    """Constraint vector sign options."""
    # Positive.
    eVAConstraintSignPlus = 0,
    # Negative.
    eVAConstraintSignMinus = 1

agcls.AgTypeNameMap["AgEVAConstraintSign"] = AgEVAConstraintSign
__all__.append("AgEVAConstraintSign")

class AgEVAAttitudeControl(IntEnum):
    """Attitude Control options."""
    # Along Velocity Vector (impulsive/finite) - the total thrust vector is aligned with the spacecraft's velocity vector.
    eVAAttitudeControlVelocityVector = 0,
    # Anti-Velocity Vector (impulsive/finite) - the total thrust vector is opposite to the spacecraft's velocity vector.
    eVAAttitudeControlAntiVelocityVector = 1,
    # Attitude (impulsive/finite) - the thrust vector direction is defined using Euler Angles or a Quaternion. 
    eVAAttitudeControlAttitude = 2,
    # File (impulsive/finite) - uses an attitude file to set the thrust vector direction.
    eVAAttitudeControlFile = 3,
    # Thrust Vector (impulsive/finite) - the total thrust vector is explicitly specified in Cartesian or spherical form with respect to the thrust axes.
    eVAAttitudeControlThrustVector = 4,
    # Plugin (finite) - thrust vector direction is defined using a COM plugin.
    eVAAttitudeControlPlugin = 5,
    # Time Varying (finite) - polynomial and sine representations for the azimuth and elevation of the thrust vector.
    eVAAttitudeControlTimeVarying = 6,
    # Lagrange Interpolation (optimal finite, always set) - supports the 'Run current nodes' execution mode of the Optimal Finite Maneuver.
    eVAAttitudeControlLagrangeInterpolation = 7

agcls.AgTypeNameMap["AgEVAAttitudeControl"] = AgEVAAttitudeControl
__all__.append("AgEVAAttitudeControl")

class AgEVAFollowJoin(IntEnum):
    """Joining options for the Follow segment."""
    # Specify Joining Conditions - specify joining conditions to define when the spacecraft will begin to follow the leader. Joining conditions will become apparent on a new tab - Joining.
    eVAFollowJoinSpecify = 0,
    # Join at Beginning of Leader's Ephemeris - the spacecraft will follow the leader from the beginning of the leader's ephemeris.
    eVAFollowJoinAtBeginning = 1,
    # Join at End of Leader's Ephemeris - the spacecraft will use the leader's final ephemeris point as the initial and final state of the Follow segment; the separation parameter will automatically be set to 'Separate at End of Leader's Ephemeris'.
    eVAFollowJoinAtEnd = 2,
    # Join at Final Epoch of Previous Segment - the spacecraft will follow the leader from the final epoch at the end of the previous segment.
    eVAFollowJoinAtFinalEpochOfPreviousSeg = 3

agcls.AgTypeNameMap["AgEVAFollowJoin"] = AgEVAFollowJoin
__all__.append("AgEVAFollowJoin")

class AgEVAFollowSeparation(IntEnum):
    """Separation options for the Follow segment."""
    # Specify Separation Conditions - specify separation conditions to define when the spacecraft will stop following the leader. Separation conditions will become apparent on a new tab - Separation.
    eVAFollowSeparationSpecify = 0,
    # Separate at End of Leader's Ephemeris - the spacecraft will follow the leader to the end of the leader's ephemeris and then separate.
    eVAFollowSeparationAtEndOfLeadersEphem = 1

agcls.AgTypeNameMap["AgEVAFollowSeparation"] = AgEVAFollowSeparation
__all__.append("AgEVAFollowSeparation")

class AgEVAFollowSpacecraftAndFuelTank(IntEnum):
    """Spacecraft parameter options for the Follow segment."""
    # Specify Spacecraft Configuration - manually define the spacecraft for this segment. Spacecraft physical parameters will become apparent on new tabs - Spacecraft Parameters and Fuel Tank.
    eVAFollowSpacecraftAndFuelTankSpecify = 0,
    # Inherit Spacecraft Configuration From Previous Segment - the spacecraft will be defined by its configuration at the end of the previous segment. The configuration will not be changed by the Follow segment.
    eVAFollowSpacecraftAndFuelTankInherit = 1,
    # Inherit Spacecraft Configuration From Leader - if leader is an Astrogator satellite, configuration will be defined by the leader's configuration.
    eVAFollowSpacecraftAndFuelTankLeader = 2

agcls.AgTypeNameMap["AgEVAFollowSpacecraftAndFuelTank"] = AgEVAFollowSpacecraftAndFuelTank
__all__.append("AgEVAFollowSpacecraftAndFuelTank")

class AgEVABurnoutOptions(IntEnum):
    """Burnout options for the Launch segment."""
    # Use Fixed Velocity - the inclination of the final state of the launch segment is determined by the arc between the launch and insertion positions, and the horizontal flight path angle is set to zero.
    eVABurnoutOptionsFixedVelocity = 0,
    # Use Inertial Velocity - the final state of the launch segment is solely and completely determined by the burnout position and velocity.
    eVABurnoutOptionsInertialVelocity = 1

agcls.AgTypeNameMap["AgEVABurnoutOptions"] = AgEVABurnoutOptions
__all__.append("AgEVABurnoutOptions")

class AgEVABurnoutType(IntEnum):
    """Burnout point definition types for the Launch segment."""
    # Geocentric (Planetocentric) - the burnout point is measured from the center of mass of the Earth or other central body.
    eVABurnoutTypeGeocentric = 0,
    # Geodetic (Planetodetic) - the burnout point is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body).
    eVABurnoutTypeGeodetic = 1,
    # Launch Az / Radius - the burnout point is defined in reference to distance downrange along an azimuth, measured from the center of mass of the Earth or other central body.
    eVABurnoutTypeLaunchAzRad = 2,
    # Launch Az / Alt - the burnout point is defined in reference to distance downrange along an azimuth, measured from the surface of the Earth or other central body.
    eVABurnoutTypeLaunchAzAlt = 3,
    # Central Body Fixed Cartesian - the burnout state is specified in the central-body-fixed Cartesian coordinate system.
    eVABurnoutTypeCBFCartesian = 4

agcls.AgTypeNameMap["AgEVABurnoutType"] = AgEVABurnoutType
__all__.append("AgEVABurnoutType")

class AgEVAAscentType(IntEnum):
    """Ascent types for the Launch segment."""
    # Ellipse: Cubic Motion - the motion is computed on the basis of given positions and velocities.
    eVAAscentTypeEllipseCubicMotion = 0,
    # Ellipse: Quartic Motion - the motion is computed on the basis of given positions and velocities and initial acceleration.
    eVAAscentTypeEllipseQuarticMotion = 1

agcls.AgTypeNameMap["AgEVAAscentType"] = AgEVAAscentType
__all__.append("AgEVAAscentType")

class AgEVALaunchDisplaySystem(IntEnum):
    """Launch location coordinate types for the Launch segment."""
    # Geocentric (Planetocentric) - the location is measured from the center of mass of the Earth or other central body.
    eVADisplaySystemGeodetic = 0,
    # Geodetic (Planetodetic) - the location is measured along the normal to the surface of an ellipsoid defined with reference to the Earth (or other central body).
    eVADisplaySystemGeocentric = 1

agcls.AgTypeNameMap["AgEVALaunchDisplaySystem"] = AgEVALaunchDisplaySystem
__all__.append("AgEVALaunchDisplaySystem")

class AgEVARunCode(IntEnum):
    """The run code returned after the MCS is run."""
    # Marching - a segment has run successfully.
    eVARunCodeMarching = 0,
    # Profile Failure - a search profile failed to converge.
    eVARunCodeProfileFailure = 1,
    # Error - encountered an error.
    eVARunCodeError = 2,
    # Stopped - encountered a stop segment.
    eVARunCodeStopped = 3,
    # Returned - encountered a return segment.
    eVARunCodeReturned = 4,
    # Cancelled - cancelled by user.
    eVARunCodeCancelled = 5,
    # Global Stop - hit a global stopping condition.
    eVARunCodeHitGlobalStop = 6

agcls.AgTypeNameMap["AgEVARunCode"] = AgEVARunCode
__all__.append("AgEVARunCode")

class AgEVASequenceStateToPass(IntEnum):
    """State To Pass options for the Sequence segment."""
    # The initial state of the sequence.
    eVASequenceStateToPassInitial = 0,
    # The final state of the sequence.
    eVASequenceStateToPassFinal = 1

agcls.AgTypeNameMap["AgEVASequenceStateToPass"] = AgEVASequenceStateToPass
__all__.append("AgEVASequenceStateToPass")

class AgEVAManeuverType(IntEnum):
    """Maneuver types for the maneuver segment."""
    # Impulsive - calculates a state by adding the defined delta-V vector to the velocity of the final state of the previous segment, adds this new state to the ephemeris, and passes it to the next segment.
    eVAManeuverTypeImpulsive = 0,
    # Finite - effectively a Propagate segment with thrust. Like Propagate segments, each point calculated by the propagator is added to the ephemeris, and propagation continues until a stopping condition is met.
    eVAManeuverTypeFinite = 1,
    # Optimal Finite
    eVAManeuverTypeOptimalFinite = 2

agcls.AgTypeNameMap["AgEVAManeuverType"] = AgEVAManeuverType
__all__.append("AgEVAManeuverType")

class AgEVASegmentType(IntEnum):
    """Segment types."""
    # Initial State - can be used to define the initial conditions of your MCS, or of a subsequence within the MCS.
    eVASegmentTypeInitialState = 0,
    # Launch - can be used to model a simple spacecraft launch from Earth or another central body.
    eVASegmentTypeLaunch = 1,
    # Maneuver - can be used to model a spacecraft maneuver.
    eVASegmentTypeManeuver = 2,
    # Follow - can be used to set the spacecraft to follow another vehicle (Satellite, Launch Vehicle, Missile, Aircraft, Ship, or Ground Vehicle) at a specified offset, and to separate from that vehicle upon meeting specified conditions.
    eVASegmentTypeFollow = 3,
    # Hold - can be used to model landing or rendezvous operations by setting the spacecraft to maintain a fixed position in reference to another object or body, until meeting specified conditions.
    eVASegmentTypeHold = 4,
    # Propagate - can be used to model the movement of the spacecraft along its current trajectory until meeting specified stopping conditions.
    eVASegmentTypePropagate = 5,
    # Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS.
    eVASegmentTypeSequence = 6,
    # Return - can be used to control the execution of the Mission Control Sequence by returning control to its parent segment.
    eVASegmentTypeReturn = 7,
    # Target Sequence - can be used to define maneuvers and propagations in terms of the goals they are intended to achieve.
    eVASegmentTypeTargetSequence = 8,
    # Stop - can be used to control the execution of the Mission Control Sequence by halting execution of the MCS.
    eVASegmentTypeStop = 9,
    # Update - can be used to modify some of the satellite properties to reflect changes that occur during the mission.
    eVASegmentTypeUpdate = 10,
    # Backward Sequence - can be used to organize segments and define the nature of the results that are passed on to the next segment or sequence in the MCS.
    eVASegmentTypeBackwardSequence = 11,
    # End - The End segment is a default segment of the MCS that functions similarly to a Return segment; it returns control to the beginning of the MCS. The End segment cannot be disabled or deleted, nor can any segments be inserted into the MCS after it.
    eVASegmentTypeEnd = 12

agcls.AgTypeNameMap["AgEVASegmentType"] = AgEVASegmentType
__all__.append("AgEVASegmentType")

class AgEVAElementType(IntEnum):
    """Types of orbit element sets."""
    # Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system.
    eVAElementTypeCartesian = 0,
    # Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space.
    eVAElementTypeKeplerian = 1,
    # Spherical - a system in which positions are specified as a radial distance from the origin and two angles relative to a fundamental plane.
    eVAElementTypeSpherical = 3,
    # Target Vector Incoming Asymptote - used for hyperbolic arrival trajectories.
    eVAElementTypeTargetVectorIncomingAsymptote = 4,
    # Target Vector Outgoing Asymptote - used for hyperbolic departure trajectories.
    eVAElementTypeTargetVectorOutgoingAsymptote = 5,
    # Mixed Spherical.
    eVAElementTypeMixedSpherical = 6,
    # Delaunay.
    eVAElementTypeDelaunay = 7,
    # Equinoctial.
    eVAElementTypeEquinoctial = 8,
    # Geodetic.
    eVAElementTypeGeodetic = 9

agcls.AgTypeNameMap["AgEVAElementType"] = AgEVAElementType
__all__.append("AgEVAElementType")

class AgEVALanguage(IntEnum):
    """Scripting language types for the Scripting Tool."""
    # VBScript.
    eVALanguageVBScript = 0,
    # JScript.
    eVALanguageJScript = 1,
    # MATLAB.
    eVALanguageMATLAB = 2

agcls.AgTypeNameMap["AgEVALanguage"] = AgEVALanguage
__all__.append("AgEVALanguage")

class AgEVAStoppingCondition(IntEnum):
    """Type of stopping condition."""
    # Basic Stopping Condition.
    eVAStoppingConditionBasic = 0,
    # Before Stopping Condition.
    eVAStoppingConditionBefore = 1,
    # One Point Access Stopping Condition.
    eVAStoppingConditionOnePtAccess = 2,
    # Lighting Stopping Condition.
    eVAStoppingConditionLighting = 3

agcls.AgTypeNameMap["AgEVAStoppingCondition"] = AgEVAStoppingCondition
__all__.append("AgEVAStoppingCondition")

class AgEVAClearEphemerisDirection(IntEnum):
    """Direction in which to clear ephemeris."""
    # Clear ephemeris before selected time or state.
    eVAClearEphemerisBefore = -1,
    # Do not clear ephemeris.
    eVAClearEphemerisNoClear = 0,
    # Clear ephemeris after selected time or state.
    eVAClearEphemerisAfter = 1

agcls.AgTypeNameMap["AgEVAClearEphemerisDirection"] = AgEVAClearEphemerisDirection
__all__.append("AgEVAClearEphemerisDirection")

class AgEVAProfileInsertDirection(IntEnum):
    """Direction to insert profile."""
    # Insert profile before reference profile.
    eVAProfileInsertBefore = 0,
    # Insert profile after reference profile.
    eVAProfileInsertAfter = 1

agcls.AgTypeNameMap["AgEVAProfileInsertDirection"] = AgEVAProfileInsertDirection
__all__.append("AgEVAProfileInsertDirection")

class AgEVARootFindingAlgorithm(IntEnum):
    """Root-finding algorithms."""
    # Secant method.
    eVASecantMethod = 0,
    # Newton-Raphson method.
    eVANewtonRaphsonMethod = 1

agcls.AgTypeNameMap["AgEVARootFindingAlgorithm"] = AgEVARootFindingAlgorithm
__all__.append("AgEVARootFindingAlgorithm")

class AgEVAScriptingParameterType(IntEnum):
    """Scripting Tool parameter type."""
    # Double.
    eVAScriptingParameterTypeDouble = 0,
    # Quantity.
    eVAScriptingParameterTypeQuantity = 1,
    # Date.
    eVAScriptingParameterTypeDate = 2,
    # String.
    eVAScriptingParameterTypeString = 3,
    # Boolean.
    eVAScriptingParameterTypeBoolean = 4,
    # Integer.
    eVAScriptingParameterTypeInteger = 5,
    # Enumeration.
    eVAScriptingParameterTypeEnumeration = 6

agcls.AgTypeNameMap["AgEVAScriptingParameterType"] = AgEVAScriptingParameterType
__all__.append("AgEVAScriptingParameterType")

class AgEVASNOPTGoal(IntEnum):
    """The Goal types for a SNOPT profile."""
    # Minimize
    eVASNOPTGoalMinimize = 0,
    # Bound
    eVASNOPTGoalBound = 1

agcls.AgTypeNameMap["AgEVASNOPTGoal"] = AgEVASNOPTGoal
__all__.append("AgEVASNOPTGoal")

class AgEVAIPOPTGoal(IntEnum):
    """The Goal types for a IPOPT profile."""
    # Minimize
    eVAIPOPTGoalMinimize = 0,
    # Bound
    eVAIPOPTGoalBound = 1

agcls.AgTypeNameMap["AgEVAIPOPTGoal"] = AgEVAIPOPTGoal
__all__.append("AgEVAIPOPTGoal")

class AgEVAOptimalFiniteSeedMethod(IntEnum):
    """Seed methods."""
    # Seed initial guess from file.
    eVAOptimalFiniteSeedMethodInitialGuessFile = 0,
    # Seed initial guess from finite maneuver.
    eVAOptimalFiniteSeedMethodFiniteManeuver = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteSeedMethod"] = AgEVAOptimalFiniteSeedMethod
__all__.append("AgEVAOptimalFiniteSeedMethod")

class AgEVAOptimalFiniteRunMode(IntEnum):
    """Run modes."""
    # Run current nodes.
    eVAOptimalFiniteRunModeRunCurrentNodes = 0,
    # Optimize via direct transcription.
    eVAOptimalFiniteRunModeOptimizeViaDirectTranscription = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteRunMode"] = AgEVAOptimalFiniteRunMode
__all__.append("AgEVAOptimalFiniteRunMode")

class AgEVAOptimalFiniteDiscretizationStrategy(IntEnum):
    """Discretization Strategy."""
    # The Legendre-Gauss-Lobatto quadrature rule
    eVAOptimalFiniteDiscretizationStrategyLegendreGaussLobatto = 0,
    # The Legendre-Gauss-Radau quadrature rule.
    eVAOptimalFiniteDiscretizationStrategyLegendreGaussRadau = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteDiscretizationStrategy"] = AgEVAOptimalFiniteDiscretizationStrategy
__all__.append("AgEVAOptimalFiniteDiscretizationStrategy")

class AgEVAOptimalFiniteWorkingVariables(IntEnum):
    """Working Variables."""
    # Standard inertial equinoctial coordinates.
    eVAOptimalFiniteWorkingVariablesEquinoctial = 0,
    # Use semi-latus rectum instead of SMA and true longitude instead of mean longitude.
    eVAOptimalFiniteWorkingVariablesModifiedEquinoctial = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteWorkingVariables"] = AgEVAOptimalFiniteWorkingVariables
__all__.append("AgEVAOptimalFiniteWorkingVariables")

class AgEVAOptimalFiniteScalingOptions(IntEnum):
    """Scaling Options."""
    # No scaling.
    eVAOptimalFiniteScalingOptionsNoScaling = 0,
    # Scale based on canonical units.
    eVAOptimalFiniteScalingOptionsCanonicalUnits = 1,
    # Scale based on the initial state.
    eVAOptimalFiniteScalingOptionsInitialStateBased = 2

agcls.AgTypeNameMap["AgEVAOptimalFiniteScalingOptions"] = AgEVAOptimalFiniteScalingOptions
__all__.append("AgEVAOptimalFiniteScalingOptions")

class AgEVAOptimalFiniteSNOPTObjective(IntEnum):
    """Optimal Finite SNOPT objective."""
    # Minimize the total TOF along the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMinimizeTOF = 0,
    # Minimize the total calculated DeltaV along the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMaximizeFinalRad = 1,
    # Maximize the final mass after the collocation arc.
    eVAOptimalFiniteSNOPTObjectiveMinimizePropellantUse = 2

agcls.AgTypeNameMap["AgEVAOptimalFiniteSNOPTObjective"] = AgEVAOptimalFiniteSNOPTObjective
__all__.append("AgEVAOptimalFiniteSNOPTObjective")

class AgEVAOptimalFiniteSNOPTScaling(IntEnum):
    """Optimal Finite SNOPT scaling option."""
    # No scaling.
    eVAOptimalFiniteSNOPTScalingNone = 0,
    # Scale linear constraints and variables.
    eVAOptimalFiniteSNOPTScalingLinear = 1,
    # Scale all constraints and variables.
    eVAOptimalFiniteSNOPTScalingAll = 2

agcls.AgTypeNameMap["AgEVAOptimalFiniteSNOPTScaling"] = AgEVAOptimalFiniteSNOPTScaling
__all__.append("AgEVAOptimalFiniteSNOPTScaling")

class AgEVAOptimalFiniteExportNodesFormat(IntEnum):
    """Steering nodes export format."""
    # Export controls as Az/El = Ra/Dec angles.
    eVAOptimalFiniteExportNodesFormatAzimuthElevation = 0,
    # Export controls as unit vectors = direction cosines.
    eVAOptimalFiniteExportNodesFormatUnitVector = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteExportNodesFormat"] = AgEVAOptimalFiniteExportNodesFormat
__all__.append("AgEVAOptimalFiniteExportNodesFormat")

class AgEVAOptimalFiniteGuessMethod(IntEnum):
    """Guess interpolation method."""
    # Lagrange polynomial method.
    eVAOptimalFiniteGuessMethodLagrangePolynomial = 0,
    # Piecewise linear method.
    eVAOptimalFiniteGuessMethodPiecewiseLinear = 1

agcls.AgTypeNameMap["AgEVAOptimalFiniteGuessMethod"] = AgEVAOptimalFiniteGuessMethod
__all__.append("AgEVAOptimalFiniteGuessMethod")

class AgEVAImpDeltaVRep(IntEnum):
    """Vector representations for impulsive DeltaV specification"""
    # Cartesian - specify the impulsive DeltaV in Cartesian coordinates (X, Y, Z).
    eVACartesianImpDeltaV = 0,
    # Spherical - specify the impulsive DeltaV in spherical coordinates (Azimuth, Elevation, Magnitude).
    eVASphericalImpDeltaV = 1

agcls.AgTypeNameMap["AgEVAImpDeltaVRep"] = AgEVAImpDeltaVRep
__all__.append("AgEVAImpDeltaVRep")

class AgEVALambertTargetCoordType(IntEnum):
    """Lambert Target CoordType."""
    # Cartesian - specifying an orbit by three position elements and three velocity elements in a rectangular coordinate system.
    eVALambertTargetCoordTypeCartesian = 0,
    # Keplerian - the classical system, specifying an orbit by six elements describing its size, shape and three-dimensional orientation in space.
    eVALambertTargetCoordTypeKeplerian = 1

agcls.AgTypeNameMap["AgEVALambertTargetCoordType"] = AgEVALambertTargetCoordType
__all__.append("AgEVALambertTargetCoordType")

class AgEVALambertSolutionOptionType(IntEnum):
    """Lambert Solution Option Type."""
    # Fixed time - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionFixedTime = 0,
    # Minumum Eccentricity - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionMinEccentricity = 1,
    # Minimum Energy - The type of Lambert solution to calculate.
    eAgEVALambertSolutionOptionMinEnergy = 2

agcls.AgTypeNameMap["AgEVALambertSolutionOptionType"] = AgEVALambertSolutionOptionType
__all__.append("AgEVALambertSolutionOptionType")

class AgEVALambertOrbitalEnergyType(IntEnum):
    """Lambert Orbital Energy Type."""
    # Low energy- This is the orbital energy for the Lambert solution that corresponds to the smaller semimajor axis solution.
    eAgEVALambertOrbitalEnergyLow = 0,
    # High energy- This is the orbital energy for the Lambert solution that corresponds to the larger semimajor axis solution.
    eAgEVALambertOrbitalEnergyHigh = 1

agcls.AgTypeNameMap["AgEVALambertOrbitalEnergyType"] = AgEVALambertOrbitalEnergyType
__all__.append("AgEVALambertOrbitalEnergyType")

class AgEVALambertDirectionOfMotionType(IntEnum):
    """Lambert Direction Of Motion Type."""
    # The short direction of motion for the Lambert solution.
    eAgEVALambertDirectionOfMotionShort = 0,
    # The long direction of motion for the Lambert solution.
    eAgEVALambertDirectionOfMotionLong = 1

agcls.AgTypeNameMap["AgEVALambertDirectionOfMotionType"] = AgEVALambertDirectionOfMotionType
__all__.append("AgEVALambertDirectionOfMotionType")

class AgEVAGoldenSectionDesiredOperation(IntEnum):
    """The types for Desired Operation/Objective of golden section profile."""
    # Minimize value
    eVAGoldenSectionDesiredOpMinimizeValue = 0,
    # Maximize value
    eVAGoldenSectionDesiredOpMaximizeValue = 1

agcls.AgTypeNameMap["AgEVAGoldenSectionDesiredOperation"] = AgEVAGoldenSectionDesiredOperation
__all__.append("AgEVAGoldenSectionDesiredOperation")

class AgEVAGridSearchDesiredOperation(IntEnum):
    """The types for Desired Operation/Objective of Grid Search profile."""
    # Minimize value
    eVAGridSearchDesiredOpMinimizeValue = 0,
    # Maximize value
    eVAGridSearchDesiredOpMaximizeValue = 1

agcls.AgTypeNameMap["AgEVAGridSearchDesiredOperation"] = AgEVAGridSearchDesiredOperation
__all__.append("AgEVAGridSearchDesiredOperation")

class AgEVAElement(IntEnum):
    """Which type of elements (osculating or mean)"""
    # Osculating.
    eVAElementOsculating = 0,
    # Kozai-Izsak Mean.
    eVAElementKozaiIzsakMean = 1,
    # Brouwer-Lyddane Mean Long.
    eVAElementBrouwerLyddaneMeanLong = 2,
    # Brouwer-Lyddane Mean Short.
    eVAElementBrouwerLyddaneMeanShort = 3

agcls.AgTypeNameMap["AgEVAElement"] = AgEVAElement
__all__.append("AgEVAElement")

class AgEVABaseSelection(IntEnum):
    """Access base object selections types."""
    # An object in the current scenario.
    eVABaseSelectionSpecify = 0,
    # The current satellite.
    eVABaseSelectionCurrentSatellite = 1

agcls.AgTypeNameMap["AgEVABaseSelection"] = AgEVABaseSelection
__all__.append("AgEVABaseSelection")

class AgEVAControlOrbitStateValue(IntEnum):
    """Orbit State Value properties that can be selected as control parameters for a Target Sequence."""
    # The Vx velocity component of the orbit state.
    eVAControlOrbitStateValueVx = 0,
    # The Vy velocity component of the orbit state.
    eVAControlOrbitStateValueVy = 1,
    # The Vz velocity component of the orbit state.
    eVAControlOrbitStateValueVz = 2,
    # The x position component of the orbit state.
    eVAControlOrbitStateValueX = 3,
    # The y position component of the orbit state.
    eVAControlOrbitStateValueY = 4,
    # The z position component of the orbit state.
    eVAControlOrbitStateValueZ = 5

agcls.AgTypeNameMap["AgEVAControlOrbitStateValue"] = AgEVAControlOrbitStateValue
__all__.append("AgEVAControlOrbitStateValue")

class AgEVASegmentState(IntEnum):
    """Segment state to use types."""
    # The segment initial state.
    eVASegmentStateInitial = 0,
    # The segment final state.
    eVASegmentStateFinal = 1

agcls.AgTypeNameMap["AgEVASegmentState"] = AgEVASegmentState
__all__.append("AgEVASegmentState")

class AgEVADifferenceOrder(IntEnum):
    """The Difference order types."""
    # The initial minus current difference.
    eVADifferenceOrderInitialMinusCurrent = 0,
    # The current minus initial difference.
    eVADifferenceOrderCurrentMinusInitial = 1

agcls.AgTypeNameMap["AgEVADifferenceOrder"] = AgEVADifferenceOrder
__all__.append("AgEVADifferenceOrder")

class AgEVASegmentDifferenceOrder(IntEnum):
    """The Difference Across Segments order types."""
    # The current minus segment difference.
    eVASegmentDifferenceOrderCurrentMinusSegment = 0,
    # The segment minus current difference.
    eVASegmentDifferenceOrderSegmentMinusCurrent = 1

agcls.AgTypeNameMap["AgEVASegmentDifferenceOrder"] = AgEVASegmentDifferenceOrder
__all__.append("AgEVASegmentDifferenceOrder")

class AgEVAControlRepeatingGroundTrackErr(IntEnum):
    """Repeating Ground Track Equator Error properties that can be selected as control parameters for a Target Sequence."""
    # The reference longitude.
    eVAControlRepeatingGroundTrackErrRefLon = 0,
    # The repeat count.
    eVAControlRepeatingGroundTrackErrRepeatCount = 1

agcls.AgTypeNameMap["AgEVAControlRepeatingGroundTrackErr"] = AgEVAControlRepeatingGroundTrackErr
__all__.append("AgEVAControlRepeatingGroundTrackErr")

class AgEVACalcObjectDirection(IntEnum):
    """The direction to search for a desired value."""
    # Search in the direction of the next calculation object.
    eVACalcObjectDirectionNext = 0,
    # Search in the direction of the previous calculation object.
    eVACalcObjectDirectionPrevious = 1

agcls.AgTypeNameMap["AgEVACalcObjectDirection"] = AgEVACalcObjectDirection
__all__.append("AgEVACalcObjectDirection")

class AgEVACalcObjectOrbitPlaneSource(IntEnum):
    """The calculation object orbit plane source Types."""
    # Use the reference satellite to generate the orbit plane.
    eAgEVACalcObjectOrbitPlaneSourceReferenceSatellite = 0,
    # Use the satellite to generate the orbit plane.
    eAgEVACalcObjectOrbitPlaneSourceSatellite = 1

agcls.AgTypeNameMap["AgEVACalcObjectOrbitPlaneSource"] = AgEVACalcObjectOrbitPlaneSource
__all__.append("AgEVACalcObjectOrbitPlaneSource")

class AgEVACalcObjectSunPosition(IntEnum):
    """The calculation object sun location Types."""
    # Use the sun location apparent from satellite.
    eAgEVACalcObjectSunPositionApparentFromSatellite = 0,
    # Use the sun location apparent from reference satellite.
    eAgEVACalcObjectSunPositionApparentFromRefSatellite = 1,
    # Use the sun location true from satellite.
    eAgEVACalcObjectSunPositionTrueFromSatellite = 2,
    # Use the sun location true from reference satellite.
    eAgEVACalcObjectSunPositionTrueFromRefSatellite = 3

agcls.AgTypeNameMap["AgEVACalcObjectSunPosition"] = AgEVACalcObjectSunPosition
__all__.append("AgEVACalcObjectSunPosition")

class AgEVACalcObjectAngleSign(IntEnum):
    """The sign of the angle when the relative position has a component along the orbit normal."""
    # Use the positive sign for the angle when the relative position has a positive component along the orbit normal.
    eAgEVACalcObjectAngleSignPositive = 0,
    # Use the negative sign for the angle when the relative position does not have a poistive component along the orbit normal.
    eAgEVACalcObjectAngleSignNegative = 1

agcls.AgTypeNameMap["AgEVACalcObjectAngleSign"] = AgEVACalcObjectAngleSign
__all__.append("AgEVACalcObjectAngleSign")

class AgEVACalcObjectReferenceDirection(IntEnum):
    """Direction that establishes the zero value when projected into the orbit plane."""
    # Use the reference satellite position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionReferenceSatellitePosition = 0,
    # Use the satellite position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionSatellitePosition = 1,
    # Use the reference satellite nadir (centric) when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionReferenceSatelliteNadir = 2,
    # Use the satellite nadir (centric) position when projected into the orbit plane.
    eAgEVACalcObjectReferenceDirectionSatelliteNadir = 3

agcls.AgTypeNameMap["AgEVACalcObjectReferenceDirection"] = AgEVACalcObjectReferenceDirection
__all__.append("AgEVACalcObjectReferenceDirection")

class AgEVACalcObjectRelativePosition(IntEnum):
    """The calculation object relative position Types."""
    # Use the relative position satellite to reference satellite.
    eAgEVACalcObjectRelativePositionSatelliteToRefSatellite = 0,
    # Use the relative position reference satellite to satellite.
    eAgEVACalcObjectRelativePositionRefSatelliteToSatellite = 1

agcls.AgTypeNameMap["AgEVACalcObjectRelativePosition"] = AgEVACalcObjectRelativePosition
__all__.append("AgEVACalcObjectRelativePosition")

class AgEVACalcObjectReferenceEllipse(IntEnum):
    """The calculation object reference ellipse Types."""
    # Use the reference satellite orbit.
    eAgEVACalcObjectReferenceEllipseRefSatOrbit = 0,
    # Use the satellite orbit.
    eAgEVACalcObjectReferenceEllipseSatelliteOrbit = 1

agcls.AgTypeNameMap["AgEVACalcObjectReferenceEllipse"] = AgEVACalcObjectReferenceEllipse
__all__.append("AgEVACalcObjectReferenceEllipse")

class AgEVACalcObjectLocationSource(IntEnum):
    """The calculation object location source Types."""
    # Use the reference satellite.
    eAgEVACalcObjectLocationSourceRefSat = 0,
    # Use the satellite.
    eAgEVACalcObjectLocationSourceSatellite = 1

agcls.AgTypeNameMap["AgEVACalcObjectLocationSource"] = AgEVACalcObjectLocationSource
__all__.append("AgEVACalcObjectLocationSource")

class AgEVAGravitationalParameterSource(IntEnum):
    """The source of the gravitational parameter for a CAgVAStateCalcGravitationalParameter calculation object."""
    # Cb File.
    eVAGravitationalParameterSourceCbFile = 0,
    # Cb File -  System.
    eVAGravitationalParameterSourceCbFileSystem = 1,
    # DE File.
    eVAGravitationalParameterSourceDEFile = 2,
    # Gravity File.
    eVAGravitationalParameterSourceGravityFile = 3

agcls.AgTypeNameMap["AgEVAGravitationalParameterSource"] = AgEVAGravitationalParameterSource
__all__.append("AgEVAGravitationalParameterSource")

class AgEVAReferenceRadiusSource(IntEnum):
    """The source of the reference radius for a CAgVAStateCalcReferenceRadius calculation object."""
    # Cb File.
    eVAReferenceRadiusSourceCbFile = 0,
    # Gravity File.
    eVAReferenceRadiusSourceGravityFile = 1

agcls.AgTypeNameMap["AgEVAReferenceRadiusSource"] = AgEVAReferenceRadiusSource
__all__.append("AgEVAReferenceRadiusSource")

class AgEVAGravCoeffNormalizationType(IntEnum):
    """The normalization type for the CAgVAStateCalcGravCoeff calculation object."""
    # Normalized.
    eVAGravCoeffNormalized = 0,
    # Unnormalized.
    eVAGravCoeffUnnormalized = 1

agcls.AgTypeNameMap["AgEVAGravCoeffNormalizationType"] = AgEVAGravCoeffNormalizationType
__all__.append("AgEVAGravCoeffNormalizationType")

class AgEVAGravCoeffCoefficientType(IntEnum):
    """The coefficient type for the CAgVAStateCalcGravCoeff calculation object."""
    # Zonal.
    eVAGravCoeffCoefficientTypeZonal = 0,
    # Cosine.
    eVAGravCoeffCoefficientTypeCosine = 1,
    # Sine.
    eVAGravCoeffCoefficientTypeSine = 2

agcls.AgTypeNameMap["AgEVAGravCoeffCoefficientType"] = AgEVAGravCoeffCoefficientType
__all__.append("AgEVAGravCoeffCoefficientType")

class AgEVASTMPertVariables(IntEnum):
    """The initial and final Cartesian variational variables that describe an STM element."""
    # Designates the initial or final variation in the 'x' component of position.
    eVASTMPertVariablePosX = 0,
    # Designates the initial or final variation in the 'y' component of position.
    eVASTMPertVariablePosY = 1,
    # Designates the initial or final variation in the 'z' component of position.
    eVASTMPertVariablePosZ = 2,
    # Designates the initial or final variation in the 'x' component of velocity.
    eVASTMPertVariableVelX = 3,
    # Designates the initial or final variation in the 'y' component of velocity.
    eVASTMPertVariableVelY = 4,
    # Designates the initial or final variation in the 'z' component of velocity.
    eVASTMPertVariableVelZ = 5

agcls.AgTypeNameMap["AgEVASTMPertVariables"] = AgEVASTMPertVariables
__all__.append("AgEVASTMPertVariables")

class AgEVASTMEigenNumber(IntEnum):
    """The number that describes one of the 6 STM Eigenvalues or Eigenvectors."""
    # Designates the first Eigenvalue or Eigenvector.
    eVASTMEigenNumber1 = 0,
    # Designates the second Eigenvalue or Eigenvector.
    eVASTMEigenNumber2 = 1,
    # Designates the third Eigenvalue or Eigenvector.
    eVASTMEigenNumber3 = 2,
    # Designates the fourth Eigenvalue or Eigenvector.
    eVASTMEigenNumber4 = 3,
    # Designates the fifth Eigenvalue or Eigenvector.
    eVASTMEigenNumber5 = 4,
    # Designates the sixth Eigenvalue or Eigenvector.
    eVASTMEigenNumber6 = 5

agcls.AgTypeNameMap["AgEVASTMEigenNumber"] = AgEVASTMEigenNumber
__all__.append("AgEVASTMEigenNumber")

class AgEVAComplexNumber(IntEnum):
    """Whether a value represents the real or imaginary portion of a number."""
    # Designates the value as the real part.
    eVAComplexNumberReal = 0,
    # Designates the value as the imaginary part.
    eVAComplexNumberImaginary = 1

agcls.AgTypeNameMap["AgEVAComplexNumber"] = AgEVAComplexNumber
__all__.append("AgEVAComplexNumber")

class AgEVASquaredType(IntEnum):
    """Whether to calculate the value as the square of the sum of each component or the sum of the squares."""
    # Designates the calculation to be the sum of the squares.
    eVASumOfSquares = 0,
    # Designates the calculation to be the square of the sum.
    eVASquareOfSum = 1

agcls.AgTypeNameMap["AgEVASquaredType"] = AgEVASquaredType
__all__.append("AgEVASquaredType")

class AgEVACbGravityModel(IntEnum):
    """The gravity model."""
    # ZonalsToJ4 - (various) Gravity model for all central bodies except Sun, Earth and Moon.
    eVACbGravityModelZonalsToJ4 = 0,
    # Earth Simple gravity model.
    eVACbGravityModelEarthSimple = 1,
    # WGS84 - (Earth) World Geodetic System 1984; WGS 84 was created by the Defense Mapping Agency (DMA).
    eVACbGravityModelWGS84 = 2,
    # EGM96 - (Earth) Earth Gravity Model 1996, a geopotential model of the Earth consisting of spherical harmonic coefficients complete to degree and order 360. Developed jointly by NGA (formerly known as NIMA), NASA Goddard and Ohio State University.
    eVACbGravityModelEGM96 = 3,
    # GEMT1 - (Earth) Goddard Earth Model T1.
    eVACbGravityModelGEMT1 = 4,
    # JGM2 - (Earth) Joint Gravity Model version 2, a model that describes the Earth gravity field up to degree and order 70, developed by NASA/GSFC Space Geodesy Branch, the University of Texas Center for Space Research and CNES.
    eVACbGravityModelJGM2 = 5,
    # JGM3 - (Earth) Joint Gravity Model version 3, a model that describes the Earth gravity field up to degree and order 70, developed by the University of Texas and NASA/GSFC.
    eVACbGravityModelJGM3 = 6,
    # WGS84 EGM96 - (Earth) Uses the coefficients from EGM96 with the shape model of WGS84. This model is the recommended gravity model of the WGS84 definition document: NIMA TR8350.2, Third Edition, 4 July 1997.
    eVACbGravityModelWSG84EGM96 = 7,
    # WGS84 old - (Earth) Old version of WGS84.
    eVACbGravityModelWGS84Old = 8,
    # GLGM2 - (Moon) GM = 4.9028029535968e+12, reference distance = 1,738,000 m.
    eVACbGravityModelGLGM2 = 9,
    # LP165P - (Moon) GM = 4.902801056E+12, reference distance = 1,738,000.0 m.
    eVACbGravityModelLP165P = 10,
    # Icarus1987 - (Mercury) GM = 2.203209e+013, reference distance = 2,439,000 m. Reference: Anderson, J. J., Colombo, G., Esposito, P. B., Lau E. L., and Trager, G. B. 'The Mass, Gravity Field, and Ephemeris of Mercury', Icarus 71, 337-349, 1987.
    eVACbGravityModelIcarus1987 = 11,
    # MGNP180U - (Venus) GM = 3.248585920790000E+14, reference distance = 6,051,000.0 m.
    eVACbGravityModelMGNP180U = 12,
    # GMM1 - (Mars) GM = 4.28283579647735e+13, reference distance = 3,394,200.0 m.
    eVACbGravityModelGMM1 = 13,
    # GMM2B - (Mars) GM = 4.28283719012840e+13, reference distance = 3,397,000 m. Reference: These numbers came from the GMM-2B model published at http://bowie.gsfc.nasa.gov/926/MARS/GMM2B.html and submitted to Journal of Geophysics Research, November 2000.
    eVACbGravityModelGMM2B = 14,
    # Mars50c - (Mars) GM = 4.2828370371000e+13, reference distance = 3,394,200 m.
    eVACbGravityModelMars50c = 15,
    # JUP230 - (Jupiter) GM = 1.26686535e+017, reference distance = 71,492,000 m. Reference: Jacobson, R. A. The JUP230 orbit solution, 2003.
    eVACbGravityModelJUP230 = 16,
    # Astron2004 - (Saturn) GM = 3.7931284e+016, reference distance = 60,330,000 m.
    eVACbGravityModelAstron2004 = 17,
    # AstronAstro1991 - (Neptune) GM = 6.835107e+015, reference distance = 25,225,000 m.
    eVACbGravityModelAstronAstro1991 = 18,
    # Icarus2001 - (Callisto) GM = 7.179292e+12, reference distance = 2,410,300 m.
    eVACbGravityModelIcarus2001 = 19,
    # Science1998 - (Europa) GM =3.20272e+012, reference distance = 1,565,000 m.
    eVACbGravityModelScience1998 = 20,
    # Nature1996 - (Ganymede) GM = 9.8866e+12, reference distance = 2,634,000 m.
    eVACbGravityModelNature1996 = 21,
    # JGeoRes2001 - (Io) GM = 5.96e+12, reference distance = 1,821,600 m.
    eVACbGravityModelJGeoRes2001 = 22,
    # GGM01C - (Earth)
    eVACbGravityModelGGM01C = 23,
    # GGM02C - (Earth)
    eVACbGravityModelGGM02C = 24,
    # WGS72 ZonalsToJ4 - (Earth)
    eVACbGravityModelWGS72ZonalsToJ4 = 25,
    # LP100J - (Moon)
    eVACbGravityModelLP100J = 26,
    # LP100K - (Moon)
    eVACbGravityModelLP100K = 27,
    # LP150Q - (Moon)
    eVACbGravityModelLP150Q = 28,
    # LP75G - (Moon)
    eVACbGravityModelLP75G = 29

agcls.AgTypeNameMap["AgEVACbGravityModel"] = AgEVACbGravityModel
__all__.append("AgEVACbGravityModel")

class AgEVACbShape(IntEnum):
    """The central body shape types."""
    # A triaxial ellipsoid defined by a semi-major axis, semi-mid axis and semi-minor axis.
    eVACbShapeTriaxialEllipsoid = 0,
    # An oblate spheroid defined by a minimum and maximum radii, and a derived flattening coefficient.
    eVACbShapeOblateSpheroid = 1,
    # A sphere defined by a radius.
    eVACbShapeSphere = 2

agcls.AgTypeNameMap["AgEVACbShape"] = AgEVACbShape
__all__.append("AgEVACbShape")

class AgEVACbAttitude(IntEnum):
    """The central body attitude types."""
    # An IAU 1994 attitude definition.
    eVACbAttitudeIAU1994 = 0,
    # A rotation coefficient file.
    eVACbAttitudeRotationCoefficientsFile = 1

agcls.AgTypeNameMap["AgEVACbAttitude"] = AgEVACbAttitude
__all__.append("AgEVACbAttitude")

class AgEVACbEphemeris(IntEnum):
    """The central body ephemeris types."""
    # Specified values and rates of change for the classical orbital elements.
    eVACbEphemerisAnalyticOrbit = 0,
    # An external ephemeris (*.e) file.
    eVACbEphemerisFile = 1,
    # Ephemerides from the Jet Propulsion Laboratory's JPL DE set are used.
    eVACbEphemerisJPLDE = 2,
    # The SPICE propagator reads ephemeris from binary files that are in a standard format produced by the Jet Propulsion Laboratory for ephemeris for celestial bodies but can be used for spacecraft.
    eVACbEphemerisJPLSPICE = 3,
    # A planetary ephemeris (*.pe) file.
    eVACbEphemerisPlanetary = 4

agcls.AgTypeNameMap["AgEVACbEphemeris"] = AgEVACbEphemeris
__all__.append("AgEVACbEphemeris")

class AgEVAControlPowerInternal(IntEnum):
    """Internal Power properties that can be selected as control parameters for a Target Sequence."""
    # The power generated by the spacecraft from internal sources.
    eVAControlPowerInternalGeneratedPower = 0,
    # The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch.
    eVAControlPowerInternalPercentDegradation = 1,
    # The date and time used as a reference epoch for degradation.
    eVAControlPowerInternalEpoch = 2

agcls.AgTypeNameMap["AgEVAControlPowerInternal"] = AgEVAControlPowerInternal
__all__.append("AgEVAControlPowerInternal")

class AgEVAControlPowerProcessed(IntEnum):
    """Processed Power properties that can be selected as control parameters for a Target Sequence."""
    # The efficiency of the power processing unit(PPU).
    eVAControlPowerProcessedEfficiency = 0,
    # The power diverted from the power source and unavailable to the power processing unit(PPU).
    eVAControlPowerProcessedLoad = 1

agcls.AgTypeNameMap["AgEVAControlPowerProcessed"] = AgEVAControlPowerProcessed
__all__.append("AgEVAControlPowerProcessed")

class AgEVAControlPowerSolarArray(IntEnum):
    """Solar Array Power properties that can be selected as control parameters for a Target Sequence."""
    # The ThermalModel.C0 coefficient.
    eVAControlPowerSolarArrayC0 = 0,
    # The ThermalModel.C1 coefficient.
    eVAControlPowerSolarArrayC1 = 1,
    # The ThermalModel.C2 coefficient.
    eVAControlPowerSolarArrayC2 = 2,
    # The ThermalModel.C3 coefficient.
    eVAControlPowerSolarArrayC3 = 3,
    # The ThermalModel.C4 coefficient.
    eVAControlPowerSolarArrayC4 = 4,
    # The solar array panel area.
    eVAControlPowerSolarArrayArea = 5,
    # The array efficiency in producing output power from a collection of cells.
    eVAControlPowerSolarArrayEfficiency = 6,
    # The cell efficiency in producing output power from incident sunlight.
    eVAControlPowerSolarArrayCellEfficiency = 7,
    # The solar array concentration factor.
    eVAControlPowerSolarArrayConcentration = 8,
    # The angle from the panel normal vector to the apparent sun line.
    eVAControlPowerSolarArrayInclinationToSunLine = 9,
    # The percent degradation per year; degradation factor is (1 - x%/yr)timeSinceRefEpoch.
    eVAControlPowerSolarArrayPercentDegradation = 10,
    # The date and time used as a reference epoch for degradation.
    eVAControlPowerSolarArrayEpoch = 11

agcls.AgTypeNameMap["AgEVAControlPowerSolarArray"] = AgEVAControlPowerSolarArray
__all__.append("AgEVAControlPowerSolarArray")

class AgEVAThirdBodyMode(IntEnum):
    """The third body gravity mode."""
    # Defines the gravitational effect as a full Gravitational Force model
    eVAThirdBodyModeGravityField = 0,
    # Defines the gravitational effect as a third body point mass effect.
    eVAThirdBodyModePointMass = 1

agcls.AgTypeNameMap["AgEVAThirdBodyMode"] = AgEVAThirdBodyMode
__all__.append("AgEVAThirdBodyMode")

class AgEVAGravParamSource(IntEnum):
    """The gravity parameter source."""
    # The Cb file provided with STK; uses the default, body centered gravity source for the central body.
    eVAGravParamSourceCbFile = 0,
    # A DE file; body centered for the inner planets and barycentered for the outer planets.
    eVAGravParamSourceDEFile = 1,
    # User defined; requires you to specify the mu value of the Gravitational Parameter.
    eVAGravParamSourceUser = 2,
    # The Cb file provided with STK; uses the default, barycentered gravity source for the central body.
    eVAGravParamSourceCbFileSystem = 3

agcls.AgTypeNameMap["AgEVAGravParamSource"] = AgEVAGravParamSource
__all__.append("AgEVAGravParamSource")

class AgEVAEphemSource(IntEnum):
    """The ephemeris source type."""
    # The Cb file provided with STK; uses the default ephemeris source for that central body.
    eVAEphemSourceCbFile = 0,
    # A DE file; body centered for the inner planets and barycentered for the outer planets.
    eVAEphemSourceDEFile = 1,
    # A SPICE file, barycentered; uses the entire planetary system as a single effect, with the system center as the point mass.
    eVAEphemSourceSPICEBary = 2,
    # A SPICE file, body centered; uses only the planet as the effect, with the planet's center as the point mass.
    eVAEphemSourceSPICEBody = 3

agcls.AgTypeNameMap["AgEVAEphemSource"] = AgEVAEphemSource
__all__.append("AgEVAEphemSource")

class AgEVASolarForceMethod(IntEnum):
    """The solar force method type for a spherical or N-plate SRP model."""
    # Luminosity - used as the value for solar flux at 1 AU in the Solar Radiation computation.
    eVASolarForceMethodLuminosity = 0,
    # Mean Flux - used as the value for solar flux at 1 AU in the Solar Radiation computation.
    eVASolarForceMethodMeanFlux = 1

agcls.AgTypeNameMap["AgEVASolarForceMethod"] = AgEVASolarForceMethod
__all__.append("AgEVASolarForceMethod")

class AgEVAShadowModel(IntEnum):
    """The shadow model type."""
    # Cylindrical - assumes the Sun to be at infinite distance so that all light coming from the Sun moves in a direction parallel to the Sun to satellite vector.
    eVAShadowModelCylindrical = 0,
    # Dual Cone - uses the actual size and distance of the Sun to model regions of full, partial (penumbra) and zero (umbra) sunlight. The visible fraction of the solar disk is used to compute the acceleration during penumbra.
    eVAShadowModelDualCone = 1,
    # None - turns off all shadowing of the satellite.
    eVAShadowModelNone = 2

agcls.AgTypeNameMap["AgEVAShadowModel"] = AgEVAShadowModel
__all__.append("AgEVAShadowModel")

class AgEVASunPosition(IntEnum):
    """The sun position type."""
    # Apparent - takes into account the time required for light to travel from the sun to the position of the spacecraft.
    eVASunPositionApparent = 0,
    # Apparent Sun to True Cb - takes into account the time required for light to travel from the sun to the central body.
    eVASunPositionApparentToTrueCb = 1,
    # True - assumes that light from the sun reaches the spacecraft instantaneously.
    eVASunPositionTrue = 2

agcls.AgTypeNameMap["AgEVASunPosition"] = AgEVASunPosition
__all__.append("AgEVASunPosition")

class AgEVAAtmosDataSource(IntEnum):
    """The Atmospheric data source type."""
    # Constant Atmospheric data source.
    eVAAtmosDataSourceConstant = 0,
    # Atmopsheric data source from file.
    eVAAtmosDataSourceFile = 1

agcls.AgTypeNameMap["AgEVAAtmosDataSource"] = AgEVAAtmosDataSource
__all__.append("AgEVAAtmosDataSource")

class AgEVAGeoMagneticFluxSource(IntEnum):
    """Whether to use Kp or Ap data from the flux file."""
    # Read Ap from file.
    eVAGeoMagneticFluxSourceAp = 0,
    # Read Kp from file.
    eVAGeoMagneticFluxSourceKp = 1

agcls.AgTypeNameMap["AgEVAGeoMagneticFluxSource"] = AgEVAGeoMagneticFluxSource
__all__.append("AgEVAGeoMagneticFluxSource")

class AgEVAGeoMagneticFluxUpdateRate(IntEnum):
    """Method for using geomagnetic flux values from the flux file."""
    # Three hourly
    eVAGeoMagneticFluxUpdateRate3Hourly = 0,
    # Three hourly cubic spline
    eVAGeoMagneticFluxUpdateRate3HourlyCubicSpline = 1,
    # Three hourly interpolated
    eVAGeoMagneticFluxUpdateRate3HourlyInterpolated = 2,
    # Daily
    eVAGeoMagneticFluxUpdateRateDaily = 3

agcls.AgTypeNameMap["AgEVAGeoMagneticFluxUpdateRate"] = AgEVAGeoMagneticFluxUpdateRate
__all__.append("AgEVAGeoMagneticFluxUpdateRate")

class AgEVADragModelType(IntEnum):
    """Type of Drag Model."""
    # Spherical
    eVADragModelTypeSpherical = 0,
    # Plugin
    eVADragModelTypePlugin = 1,
    # Variable Area
    eVADragModelTypeVariableArea = 2,
    # N-Plate
    eVADragModelTypeNPlate = 3

agcls.AgTypeNameMap["AgEVADragModelType"] = AgEVADragModelType
__all__.append("AgEVADragModelType")

class AgEVAMarsGRAMDensityType(IntEnum):
    """Density Type for MarsGRAM Density Models"""
    # Low density
    eVAMarsGRAMDensityTypeLow = 0,
    # Mean density
    eVAMarsGRAMDensityTypeMean = 1,
    # High density
    eVAMarsGRAMDensityTypeHigh = 2,
    # Randomly perturbed density
    eVAMarsGRAMDensityTypeRandomlyPerturbed = 3

agcls.AgTypeNameMap["AgEVAMarsGRAMDensityType"] = AgEVAMarsGRAMDensityType
__all__.append("AgEVAMarsGRAMDensityType")

class AgEVAVenusGRAMDensityType(IntEnum):
    """Density Type for VenusGRAM Density Models"""
    # Low density
    eVAVenusGRAMDensityTypeLow = 0,
    # Mean density
    eVAVenusGRAMDensityTypeMean = 1,
    # High density
    eVAVenusGRAMDensityTypeHigh = 2,
    # Randomly perturbed density
    eVAVenusGRAMDensityTypeRandomlyPerturbed = 3

agcls.AgTypeNameMap["AgEVAVenusGRAMDensityType"] = AgEVAVenusGRAMDensityType
__all__.append("AgEVAVenusGRAMDensityType")

class AgEVATabVecInterpMethod(IntEnum):
    """The interpolation method for tabulated area vector file."""
    # Bilinear interpolation on the Cartesian grid.
    eVATabVecCartesianInterpolation = 0,
    # Bilinear interpolation in magnitude and direction space.
    eVATabVecMagDirInterpolation = 1

agcls.AgTypeNameMap["AgEVATabVecInterpMethod"] = AgEVATabVecInterpMethod
__all__.append("AgEVATabVecInterpMethod")

class AgEVAControlEngineConstAcc(IntEnum):
    """Constant Acceleration and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineConstAccGrav = 0,
    # The acceleration for the engine.
    eVAControlEngineConstAccAcceleration = 1,
    # The specific impulse for the engine.
    eVAControlEngineConstAccIsp = 2

agcls.AgTypeNameMap["AgEVAControlEngineConstAcc"] = AgEVAControlEngineConstAcc
__all__.append("AgEVAControlEngineConstAcc")

class AgEVAControlEngineConstant(IntEnum):
    """Constant Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineConstantGrav = 0,
    # The thrust for the engine.
    eVAControlEngineConstantThrust = 1,
    # The specific impulse for the engine.
    eVAControlEngineConstantIsp = 2

agcls.AgTypeNameMap["AgEVAControlEngineConstant"] = AgEVAControlEngineConstant
__all__.append("AgEVAControlEngineConstant")

class AgEVAControlEngineCustom(IntEnum):
    """Custom engine model properties that can be selected as control parameters for a Target Sequence."""
    # Earth surface gravity acceleration for Isp conversions.
    eVAControlEngineCustomGrav = 0

agcls.AgTypeNameMap["AgEVAControlEngineCustom"] = AgEVAControlEngineCustom
__all__.append("AgEVAControlEngineCustom")

class AgEVAControlEngineThrottleTable(IntEnum):
    """Throttle table engine model properties that can be selected as control parameters for a Target Sequence."""
    # Gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineThrottleTableGrav = 0,
    # The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year.
    eVAControlEngineThrottleTablePercentDegradationPerYear = 1,
    # The date and time used as a reference epoch for degradation.
    eVAControlEngineThrottleTableReferenceEpoch = 2

agcls.AgTypeNameMap["AgEVAControlEngineThrottleTable"] = AgEVAControlEngineThrottleTable
__all__.append("AgEVAControlEngineThrottleTable")

class AgEVAControlEngineIon(IntEnum):
    """Ion engine model properties that can be selected as control parameters for a Target Sequence."""
    # FlowRateModel.C0 - the constant coefficient.
    eVAControlEngineIonFlowRateC0 = 0,
    # FlowRateModel.C1 - the linear coefficient.
    eVAControlEngineIonFlowRateC1 = 1,
    # FlowRateModel.C2 - the quadratic coefficient.
    eVAControlEngineIonFlowRateC2 = 2,
    # FlowRateModel.C3 - the cubic coefficient.
    eVAControlEngineIonFlowRateC3 = 3,
    # Gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineIonGrav = 4,
    # IspModel.C0 - the constant coefficient.
    eVAControlEngineIonIspC0 = 5,
    # IspModel.C1 - the linear coefficient.
    eVAControlEngineIonIspC1 = 6,
    # IspModel.C2 - the quadratic coefficient.
    eVAControlEngineIonIspC2 = 7,
    # IspModel.C3 - the cubic coefficient.
    eVAControlEngineIonIspC3 = 8,
    # MassFlowEfficiencyModel.C0 - the constant coefficient.
    eVAControlEngineIonMassFlowEfficiencyC0 = 9,
    # MassFlowEfficiencyModel.C1 - the linear coefficient.
    eVAControlEngineIonMassFlowEfficiencyC1 = 10,
    # MassFlowEfficiencyModel.C2 - the quadratic coefficient.
    eVAControlEngineIonMassFlowEfficiencyC2 = 11,
    # MassFlowEfficiencyModel.C3 - the cubic coefficient.
    eVAControlEngineIonMassFlowEfficiencyC3 = 12,
    # Minimum power required for the engine to produce thrust. 
    eVAControlEngineIonMaxInputPower = 13,
    # Maximum power that can be used by the engine to produce thrust.
    eVAControlEngineIonMinRequiredPower = 14,
    # The degradation factor is (1 - x)n, where n is the time since epoch in years, and x is the percent degradation per year.
    eVAControlEngineIonPercentDegradationPerYear = 15,
    # Percentage of available thrust to use (100 is full on, 0 is off).
    eVAControlEngineIonPercentThrottle = 16,
    # PowerEfficiencyModel.C0 - the constant coefficient.
    eVAControlEngineIonPowerEfficiencyC0 = 17,
    # PowerEfficiencyModel.C1 - the linear coefficient.
    eVAControlEngineIonPowerEfficiencyC1 = 18,
    # PowerEfficiencyModel.C2 - the quadratic coefficient.
    eVAControlEngineIonPowerEfficiencyC2 = 19,
    # PowerEfficiencyModel.C3 - the cubic coefficient.
    eVAControlEngineIonPowerEfficiencyC3 = 20,
    # The date and time used as a reference epoch for degradation.
    eVAControlEngineIonReferenceEpoch = 21

agcls.AgTypeNameMap["AgEVAControlEngineIon"] = AgEVAControlEngineIon
__all__.append("AgEVAControlEngineIon")

class AgEVAControlEngineModelPoly(IntEnum):
    """Polynomial Thrust and Isp engine model properties that can be selected as control parameters for a Target Sequence."""
    # The thrust C0 coefficient.
    eVAControlEngineModelPolyThrustC0 = 0,
    # The thrust C1 coefficient.
    eVAControlEngineModelPolyThrustC1 = 1,
    # The thrust C2 coefficient.
    eVAControlEngineModelPolyThrustC2 = 2,
    # The thrust C3 coefficient.
    eVAControlEngineModelPolyThrustC3 = 3,
    # The thrust C4 coefficient.
    eVAControlEngineModelPolyThrustC4 = 4,
    # The thrust C5 coefficient.
    eVAControlEngineModelPolyThrustC5 = 5,
    # The thrust C6 coefficient.
    eVAControlEngineModelPolyThrustC6 = 6,
    # The thrust C7 coefficient.
    eVAControlEngineModelPolyThrustC7 = 7,
    # The thrust B7 coefficient.
    eVAControlEngineModelPolyThrustB7 = 8,
    # The thrust E4 coefficient.
    eVAControlEngineModelPolyThrustE4 = 9,
    # The thrust E5 coefficient.
    eVAControlEngineModelPolyThrustE5 = 10,
    # The thrust E6 coefficient.
    eVAControlEngineModelPolyThrustE6 = 11,
    # The thrust E7 coefficient.
    eVAControlEngineModelPolyThrustE7 = 12,
    # The thrust K0 coefficient.
    eVAControlEngineModelPolyThrustK0 = 13,
    # The thrust K1 coefficient.
    eVAControlEngineModelPolyThrustK1 = 14,
    # The thrust reference temperature, Tr.
    eVAControlEngineModelPolyThrustReferenceTemp = 15,
    # The specific impulse C0 coefficient.
    eVAControlEngineModelPolyIspC0 = 16,
    # The specific impulse C1 coefficient.
    eVAControlEngineModelPolyIspC1 = 17,
    # The specific impulse C2 coefficient.
    eVAControlEngineModelPolyIspC2 = 18,
    # The specific impulse C3 coefficient.
    eVAControlEngineModelPolyIspC3 = 19,
    # The specific impulse C4 coefficient.
    eVAControlEngineModelPolyIspC4 = 20,
    # The specific impulse C5 coefficient.
    eVAControlEngineModelPolyIspC5 = 21,
    # The specific impulse C6 coefficient.
    eVAControlEngineModelPolyIspC6 = 22,
    # The specific impulse C7 coefficient.
    eVAControlEngineModelPolyIspC7 = 23,
    # The specific impulse B7 coefficient.
    eVAControlEngineModelPolyIspB7 = 24,
    # The specific impulse E4 coefficient.
    eVAControlEngineModelPolyIspE4 = 25,
    # The specific impulse E5 coefficient.
    eVAControlEngineModelPolyIspE5 = 26,
    # The specific impulse E6 coefficient.
    eVAControlEngineModelPolyIspE6 = 27,
    # The specific impulse E7 coefficient.
    eVAControlEngineModelPolyIspE7 = 28,
    # The specific impulse K0 coefficient.
    eVAControlEngineModelPolyIspK0 = 29,
    # The specific impulse K1 coefficient.
    eVAControlEngineModelPolyIspK1 = 30,
    # The specific impulse reference temperature, Tr.
    eVAControlEngineModelPolyIspReferenceTemp = 31,
    # The gravitational acceleration constant at sea level on the Earth.
    eVAControlEngineModelPolyGrav = 32

agcls.AgTypeNameMap["AgEVAControlEngineModelPoly"] = AgEVAControlEngineModelPoly
__all__.append("AgEVAControlEngineModelPoly")

class AgEVAEngineModelFunction(IntEnum):
    """The engine model function types."""
    # Isp as an independent variable of an equation.
    eVAEngineModelFunctionIsp = 0,
    # Power as an independent variable of an equation.
    eVAEngineModelFunctionPower = 1,
    # Isp and Power as independent variables of an equation.
    eVAEngineModelFunctionIspAndPower = 2

agcls.AgTypeNameMap["AgEVAEngineModelFunction"] = AgEVAEngineModelFunction
__all__.append("AgEVAEngineModelFunction")

class AgEVAThrottleTableOperationMode(IntEnum):
    """Engine operation mode."""
    # Interpolation of engine performance data based on a regression polynomial model.
    eVAEngineOperationRegPoly = 0,
    # Interpolation of engine performance data based on a piecewise linear model.
    eVAEngineOperationPiecewiseLinear = 1,
    # Discrete engine opration: piecewise constant engine performance as a function of available power.
    eVAEngineOperationDiscrete = 2

agcls.AgTypeNameMap["AgEVAThrottleTableOperationMode"] = AgEVAThrottleTableOperationMode
__all__.append("AgEVAThrottleTableOperationMode")

class AgEVAControlThrusters(IntEnum):
    """Thruster properties that can be selected as control parameters for a Target Sequence."""
    # The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced.
    eVAControlThrustersEquivOnTime = 0,
    # The thruster efficiency.
    eVAControlThrustersThrustEfficiency = 1,
    # Thruster direction defined as a vector in the body frame. Spherical azimuth value.
    eVAControlThrustersSphericalAzimuth = 2,
    # Thruster direction defined as a vector in the body frame. Spherical elevation value.
    eVAControlThrustersSphericalElevation = 3,
    # Thruster direction defined as a vector in the body frame. Cartesian X value.
    eVAControlThrustersCartesianX = 4,
    # Thruster direction defined as a vector in the body frame. Cartesian Y value.
    eVAControlThrustersCartesianY = 5,
    # Thruster direction defined as a vector in the body frame. Cartesian Z value.
    eVAControlThrustersCartesianZ = 6

agcls.AgTypeNameMap["AgEVAControlThrusters"] = AgEVAControlThrusters
__all__.append("AgEVAControlThrusters")

class AgEVAThrusterDirection(IntEnum):
    """The thruster direction type."""
    # The direction that is opposite the direction of the exhaust.
    eVAThrusterDirectionAcceleration = 0,
    # The direction of engine exhaust.
    eVAThrusterDirectionExhaust = 1

agcls.AgTypeNameMap["AgEVAThrusterDirection"] = AgEVAThrusterDirection
__all__.append("AgEVAThrusterDirection")

class AgEVACriteria(IntEnum):
    """The criteria type."""
    # The test parameter must be equal (within the specified tolerance) to the specified value.
    eVACriteriaEquals = 0,
    # The test parameter must be greater than the specified value.
    eVACriteriaGreaterThan = 1,
    # The current value for the calculation object is greater by the specified tolerance than the minimum reached by that object during the segment.
    eVACriteriaGreaterThanMinimum = 2,
    # The test parameter must be less than the specified value.
    eVACriteriaLessThan = 3,
    # The current value for the calculation object is less by the specified tolerance than the maximum reached by that object during the segment.
    eVACriteriaLessThanMaximum = 4,
    # The test parameter must be not equal (within the specified tolerance) to the specified value.
    eVACriteriaNotEqualTo = 5

agcls.AgTypeNameMap["AgEVACriteria"] = AgEVACriteria
__all__.append("AgEVACriteria")

class AgEVAErrorControl(IntEnum):
    """Error Control for the numerical integrator."""
    # The error estimate of each integrated component is compared to the absolute error tolerance. Error control with this method is based on absolute values, e.g. in meters for position, m/sec for velocity, etc.
    eVAErrorControlAbsolute = 0,
    # The error estimate of each element being integrated relative to the element's value at the start of the step is compared to the relative error tolerance, and the absolute error estimate of each element is compared to the absolute error tolerance.
    eVAErrorControlRelativeByComponent = 1,
    # Relative to State error control.
    eVAErrorControlRelativeToState = 2,
    # Error estimate of each integrated component relative to the element's change in value over the step is compared to the relative error tolerance, and the absolute error estimate of each integrated component is compared to the absolute error tolerance.
    eVAErrorControlRelativeToStep = 3

agcls.AgTypeNameMap["AgEVAErrorControl"] = AgEVAErrorControl
__all__.append("AgEVAErrorControl")

class AgEVAPredictorCorrector(IntEnum):
    """Predictor corrector scheme for the numerical integrator."""
    # All force models are re-evaluated at each corrector step.
    eVAPredictorCorrectorFull = 0,
    # Only the two-body acceleration is re-evaluated at each corrector step.
    eVAPredictorCorrectorPseudo = 1

agcls.AgTypeNameMap["AgEVAPredictorCorrector"] = AgEVAPredictorCorrector
__all__.append("AgEVAPredictorCorrector")

class AgEVANumericalIntegrator(IntEnum):
    """Numerical integrator type."""
    # A 4th order Runge-Kutta integrator, adapting step size by comparing one full step to two half steps. Although this technique can be quite slow compared to the other algorithms, it is very common and can be used for comparison.
    eVANumericalIntegratorRK4thAdapt = 0,
    # A 7th order Runge-Kutta-Fehlberg integrator with 8th order error control. This is the default integrator used in the HPOP propagator.
    eVANumericalIntegratorRKF7th8th = 1,
    # A 9th order Runge-Kutta-Verner integrator with 8th order error control.
    eVANumericalIntegratorRKV8th9th = 2,
    # An integrator based on Richardson extrapolation with automatic step size control.
    eVANumericalIntegratorBulirschStoer = 3,
    # A 12th order Gauss-Jackson integrator for second order ODEs. There is currently no error control implemented for this method, meaning that a fixed step size is used.
    eVANumericalIntegratorGaussJackson = 4,
    # A 2nd order Runge-Kutta integrator with 3rd order error control, using Bogacki and Shampine coefficients.
    eVANumericalIntegratorRK2nd3rd = 5,
    # A 4th order Runge-Kutta integrator with 5th order error control, using Cash-Karp coefficients.
    eVANumericalIntegratorRK4th5th = 6,
    # A 4th order Runge-Kutta integrator that does not employ error control.
    eVANumericalIntegratorRK4th = 7

agcls.AgTypeNameMap["AgEVANumericalIntegrator"] = AgEVANumericalIntegrator
__all__.append("AgEVANumericalIntegrator")

class AgEVACoeffRKV8th9th(IntEnum):
    """Coefficient sets for RKV8th(9th) integrator."""
    # SIAM 1978.
    eVACoeffRKV8th9th1978 = 0,
    # Efficient.
    eVACoeffRKV8th9thEfficient = 1

agcls.AgTypeNameMap["AgEVACoeffRKV8th9th"] = AgEVACoeffRKV8th9th
__all__.append("AgEVACoeffRKV8th9th")


class IAgVAUserVariableDefinitionCollection(object):
    """The list of User Variables accessed through the Driver."""
    _uuid = "{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}"
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariableDefinitionCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableDefinitionCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariableDefinitionCollection = agcom.GUID(IAgVAUserVariableDefinitionCollection._uuid)
        vtable_offset_local = IAgVAUserVariableDefinitionCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+4, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+7, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinitionCollection, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableDefinitionCollection.__dict__ and type(IAgVAUserVariableDefinitionCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableDefinitionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableDefinitionCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAUserVariableDefinition":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariableDefinition":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableDefinition:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAUserVariableDefinition.COM_val)))
            return arg_ppVAUserVariableDefinition.python_val

    def Add(self, parameterName:str) -> "IAgVAUserVariableDefinition":
        """Adds a user variable to the collection."""
        with agmarshall.BSTR_arg(parameterName) as arg_parameterName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableDefinition:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_parameterName.COM_val, byref(arg_ppVAUserVariableDefinition.COM_val)))
            return arg_ppVAUserVariableDefinition.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a user variable."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all user variables."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAUserVariableDefinition":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableDefinition:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAUserVariableDefinition.COM_val)))
            return arg_ppVAUserVariableDefinition.python_val

    def GetItemByName(self, name:str) -> "IAgVAUserVariableDefinition":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableDefinition:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAUserVariableDefinition.COM_val)))
            return arg_ppVAUserVariableDefinition.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{4D460A14-D8C8-4BEB-A4D0-D387079AF0BC}", IAgVAUserVariableDefinitionCollection)
agcls.AgTypeNameMap["IAgVAUserVariableDefinitionCollection"] = IAgVAUserVariableDefinitionCollection
__all__.append("IAgVAUserVariableDefinitionCollection")

class IAgVAUserVariableCollection(object):
    """The list of User Variables accessed through a segment that sets initial conditions."""
    _uuid = "{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}"
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariableCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariableCollection = agcom.GUID(IAgVAUserVariableCollection._uuid)
        vtable_offset_local = IAgVAUserVariableCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableCollection, vtable_offset_local+4, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableCollection, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableCollection.__dict__ and type(IAgVAUserVariableCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAUserVariable":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariable":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariable:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAUserVariable.COM_val)))
            return arg_ppVAUserVariable.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAUserVariable":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariable:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAUserVariable.COM_val)))
            return arg_ppVAUserVariable.python_val

    def GetItemByName(self, name:str) -> "IAgVAUserVariable":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariable:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAUserVariable.COM_val)))
            return arg_ppVAUserVariable.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1BB5F3BC-51E2-4F2D-93E2-61322E3F65BE}", IAgVAUserVariableCollection)
agcls.AgTypeNameMap["IAgVAUserVariableCollection"] = IAgVAUserVariableCollection
__all__.append("IAgVAUserVariableCollection")

class IAgVAUserVariableUpdateCollection(object):
    """The list of User Variables accessed through an Update segment"""
    _uuid = "{7DC1728B-C032-4810-BE7B-7801C5CF906C}"
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariableUpdateCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableUpdateCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariableUpdateCollection = agcom.GUID(IAgVAUserVariableUpdateCollection._uuid)
        vtable_offset_local = IAgVAUserVariableUpdateCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdateCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdateCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdateCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdateCollection, vtable_offset_local+4, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdateCollection, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableUpdateCollection.__dict__ and type(IAgVAUserVariableUpdateCollection.__dict__[attrname]) == property:
            return IAgVAUserVariableUpdateCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableUpdateCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAUserVariableUpdate":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAUserVariableUpdate":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableUpdate:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAUserVariableUpdate.COM_val)))
            return arg_ppVAUserVariableUpdate.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAUserVariableUpdate":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableUpdate:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAUserVariableUpdate.COM_val)))
            return arg_ppVAUserVariableUpdate.python_val

    def GetItemByName(self, name:str) -> "IAgVAUserVariableUpdate":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAUserVariableUpdate:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAUserVariableUpdate.COM_val)))
            return arg_ppVAUserVariableUpdate.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{7DC1728B-C032-4810-BE7B-7801C5CF906C}", IAgVAUserVariableUpdateCollection)
agcls.AgTypeNameMap["IAgVAUserVariableUpdateCollection"] = IAgVAUserVariableUpdateCollection
__all__.append("IAgVAUserVariableUpdateCollection")

class IAgVACalculationGraphCollection(object):
    """The list of Calculations Graphs to display."""
    _uuid = "{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}"
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACalculationGraphCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACalculationGraphCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACalculationGraphCollection = agcom.GUID(IAgVACalculationGraphCollection._uuid)
        vtable_offset_local = IAgVACalculationGraphCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.BSTR))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+5, )
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVACalculationGraphCollection, vtable_offset_local+6, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACalculationGraphCollection.__dict__ and type(IAgVACalculationGraphCollection.__dict__[attrname]) == property:
            return IAgVACalculationGraphCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACalculationGraphCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> str:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> str:
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Add(self, graphName:str) -> None:
        """Adds a calculation graph"""
        with agmarshall.BSTR_arg(graphName) as arg_graphName:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_graphName.COM_val))

    def Remove(self, graphName:str) -> None:
        """Removes a parameter."""
        with agmarshall.BSTR_arg(graphName) as arg_graphName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_graphName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all parameters."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{77FD67C8-A85F-42F8-8546-9E1B944FF7F9}", IAgVACalculationGraphCollection)
agcls.AgTypeNameMap["IAgVACalculationGraphCollection"] = IAgVACalculationGraphCollection
__all__.append("IAgVACalculationGraphCollection")

class IAgVAConstraintCollection(object):
    """The list of constraints assigned to a stopping condition."""
    _uuid = "{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}"
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAConstraintCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAConstraintCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAConstraintCollection = agcom.GUID(IAgVAConstraintCollection._uuid)
        vtable_offset_local = IAgVAConstraintCollection._vtable_offset - 1
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+2, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+9, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAConstraintCollection, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAConstraintCollection.__dict__ and type(IAgVAConstraintCollection.__dict__[attrname]) == property:
            return IAgVAConstraintCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAConstraintCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAAsTriggerCondition":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Add(self, resultName:str) -> "IAgVAAsTriggerCondition":
        """Adds a constraint to the collection."""
        with agmarshall.BSTR_arg(resultName) as arg_resultName, \
             agmarshall.AgInterface_out_arg() as arg_ppResult:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_resultName.COM_val, byref(arg_ppResult.COM_val)))
            return arg_ppResult.python_val

    def Item(self, indexOrName:typing.Any) -> "IAgVAAsTriggerCondition":
        """A property that allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a specified constraint from the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """A property that allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the constraint into the clipboard and removes the constraint from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAAsTriggerCondition":
        """Pastes the constraint from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, cond:"IAgVAAsTriggerCondition") -> "IAgVAAsTriggerCondition":
        """Copies the constraint and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(cond, IAgVAAsTriggerCondition) as arg_cond, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_cond.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAAsTriggerCondition":
        """Retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def GetItemByName(self, name:str) -> "IAgVAAsTriggerCondition":
        """Retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{055FF747-D60B-4AE2-82CE-B1FA61F85A3E}", IAgVAConstraintCollection)
agcls.AgTypeNameMap["IAgVAConstraintCollection"] = IAgVAConstraintCollection
__all__.append("IAgVAConstraintCollection")

class IAgVAPluginProperties(object):
    """Properties of a plugin attitude control."""
    _uuid = "{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetProperty"] = _raise_uninitialized_error
        self.__dict__["_SetProperty"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableProperties"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPluginProperties._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPluginProperties from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPluginProperties = agcom.GUID(IAgVAPluginProperties._uuid)
        vtable_offset_local = IAgVAPluginProperties._vtable_offset - 1
        self.__dict__["_GetProperty"] = IAGFUNCTYPE(pUnk, IID_IAgVAPluginProperties, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.VARIANT))
        self.__dict__["_SetProperty"] = IAGFUNCTYPE(pUnk, IID_IAgVAPluginProperties, vtable_offset_local+2, agcom.BSTR, agcom.VARIANT)
        self.__dict__["_GetAvailableProperties"] = IAGFUNCTYPE(pUnk, IID_IAgVAPluginProperties, vtable_offset_local+3, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPluginProperties.__dict__ and type(IAgVAPluginProperties.__dict__[attrname]) == property:
            return IAgVAPluginProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPluginProperties.")
    
    def GetProperty(self, path:str) -> typing.Any:
        """Method to get a property."""
        with agmarshall.BSTR_arg(path) as arg_path, \
             agmarshall.VARIANT_arg() as arg_pPropertyValue:
            agcls.evaluate_hresult(self.__dict__["_GetProperty"](arg_path.COM_val, byref(arg_pPropertyValue.COM_val)))
            return arg_pPropertyValue.python_val

    def SetProperty(self, path:str, propertyValue:typing.Any) -> None:
        """Method to set a property."""
        with agmarshall.BSTR_arg(path) as arg_path, \
             agmarshall.VARIANT_arg(propertyValue) as arg_propertyValue:
            agcls.evaluate_hresult(self.__dict__["_SetProperty"](arg_path.COM_val, arg_propertyValue.COM_val))

    @property
    def AvailableProperties(self) -> list:
        """Returns an array of all available properties."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableProperties"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{E4AEB83C-8A8A-48F2-8DB8-BA2F4299CC97}", IAgVAPluginProperties)
agcls.AgTypeNameMap["IAgVAPluginProperties"] = IAgVAPluginProperties
__all__.append("IAgVAPluginProperties")

class IAgVASNOPTControlCollection(object):
    """Properties for the list of SNOPT control parameters."""
    _uuid = "{2E9D2998-066F-4DC6-9672-8EDF9F604351}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASNOPTControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASNOPTControlCollection = agcom.GUID(IAgVASNOPTControlCollection._uuid)
        vtable_offset_local = IAgVASNOPTControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTControlCollection.__dict__ and type(IAgVASNOPTControlCollection.__dict__[attrname]) == property:
            return IAgVASNOPTControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVASNOPTControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVASNOPTControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_sNOPTControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_sNOPTControl.COM_val)))
            return arg_sNOPTControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVASNOPTControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_sNOPTControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_sNOPTControl.COM_val)))
            return arg_sNOPTControl.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{2E9D2998-066F-4DC6-9672-8EDF9F604351}", IAgVASNOPTControlCollection)
agcls.AgTypeNameMap["IAgVASNOPTControlCollection"] = IAgVASNOPTControlCollection
__all__.append("IAgVASNOPTControlCollection")

class IAgVASNOPTResultCollection(object):
    """SNOPT result collection."""
    _uuid = "{53F7183C-7957-4C6F-8987-399A3F4C2A26}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASNOPTResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASNOPTResultCollection = agcom.GUID(IAgVASNOPTResultCollection._uuid)
        vtable_offset_local = IAgVASNOPTResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTResultCollection.__dict__ and type(IAgVASNOPTResultCollection.__dict__[attrname]) == property:
            return IAgVASNOPTResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVASNOPTResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVASNOPTResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_sNOPTResult:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_sNOPTResult.COM_val)))
            return arg_sNOPTResult.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVASNOPTResult":
        """Returns the result specified by the object/result names."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_sNOPTResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_sNOPTResult.COM_val)))
            return arg_sNOPTResult.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{53F7183C-7957-4C6F-8987-399A3F4C2A26}", IAgVASNOPTResultCollection)
agcls.AgTypeNameMap["IAgVASNOPTResultCollection"] = IAgVASNOPTResultCollection
__all__.append("IAgVASNOPTResultCollection")

class IAgVAIPOPTControlCollection(object):
    """Properties for the list of IPOPT control parameters."""
    _uuid = "{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAIPOPTControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAIPOPTControlCollection = agcom.GUID(IAgVAIPOPTControlCollection._uuid)
        vtable_offset_local = IAgVAIPOPTControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTControlCollection.__dict__ and type(IAgVAIPOPTControlCollection.__dict__[attrname]) == property:
            return IAgVAIPOPTControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAIPOPTControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAIPOPTControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_iPOPTControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_iPOPTControl.COM_val)))
            return arg_iPOPTControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAIPOPTControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_iPOPTControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_iPOPTControl.COM_val)))
            return arg_iPOPTControl.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{CAF26432-D3B9-4A8B-A9A2-9147DD520BBB}", IAgVAIPOPTControlCollection)
agcls.AgTypeNameMap["IAgVAIPOPTControlCollection"] = IAgVAIPOPTControlCollection
__all__.append("IAgVAIPOPTControlCollection")

class IAgVAIPOPTResultCollection(object):
    """IPOPT result collection."""
    _uuid = "{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAIPOPTResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAIPOPTResultCollection = agcom.GUID(IAgVAIPOPTResultCollection._uuid)
        vtable_offset_local = IAgVAIPOPTResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTResultCollection.__dict__ and type(IAgVAIPOPTResultCollection.__dict__[attrname]) == property:
            return IAgVAIPOPTResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAIPOPTResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAIPOPTResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_iPOPTResult:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_iPOPTResult.COM_val)))
            return arg_iPOPTResult.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAIPOPTResult":
        """Returns the result specified by the object/result names."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_iPOPTResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_iPOPTResult.COM_val)))
            return arg_iPOPTResult.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{DC5D0BFD-1459-4DAA-81B9-06790B157ED2}", IAgVAIPOPTResultCollection)
agcls.AgTypeNameMap["IAgVAIPOPTResultCollection"] = IAgVAIPOPTResultCollection
__all__.append("IAgVAIPOPTResultCollection")

class IAgVAManeuverOptimalFiniteSNOPTOptimizer(object):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    _uuid = "{176AB7BE-90C8-4558-8E24-9E9862CE18FD}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetObjective"] = _raise_uninitialized_error
        self.__dict__["_SetObjective"] = _raise_uninitialized_error
        self.__dict__["_GetMaxMajorIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxMajorIterations"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMajorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMajorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMajorOptimality"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMajorOptimality"] = _raise_uninitialized_error
        self.__dict__["_GetMaxMinorIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxMinorIterations"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMinorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMinorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetOptionsFilename"] = _raise_uninitialized_error
        self.__dict__["_SetOptionsFilename"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_GetUseConsoleMonitor"] = _raise_uninitialized_error
        self.__dict__["_SetUseConsoleMonitor"] = _raise_uninitialized_error
        self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"] = _raise_uninitialized_error
        self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"] = _raise_uninitialized_error
        self.__dict__["_GetSNOPTScaling"] = _raise_uninitialized_error
        self.__dict__["_SetSNOPTScaling"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteSNOPTOptimizer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSNOPTOptimizer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer = agcom.GUID(IAgVAManeuverOptimalFiniteSNOPTOptimizer._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteSNOPTOptimizer._vtable_offset - 1
        self.__dict__["_GetObjective"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetObjective"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMaxMajorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetMaxMajorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetToleranceOnMajorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMajorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetToleranceOnMajorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMajorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaxMinorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMaxMinorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetToleranceOnMinorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMinorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetUseConsoleMonitor"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseConsoleMonitor"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetSNOPTScaling"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetSNOPTScaling"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSNOPTOptimizer, vtable_offset_local+21, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__ and type(IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSNOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSNOPTOptimizer.")
    
    @property
    def Objective(self) -> "AgEVAOptimalFiniteSNOPTObjective":
        """Objective."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTObjective) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjective"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Objective.setter
    def Objective(self, newVal:"AgEVAOptimalFiniteSNOPTObjective") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTObjective, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjective"](arg_newVal.COM_val))

    @property
    def MaxMajorIterations(self) -> int:
        """The maximum number of major iterations allowed."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxMajorIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxMajorIterations.setter
    def MaxMajorIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxMajorIterations"](arg_newVal.COM_val))

    @property
    def ToleranceOnMajorFeasibility(self) -> float:
        """Specifies how accurately the nonlinear constraints should be satisfied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMajorFeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMajorFeasibility.setter
    def ToleranceOnMajorFeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMajorFeasibility"](arg_newVal.COM_val))

    @property
    def ToleranceOnMajorOptimality(self) -> float:
        """Specifies the final accuracy of the dual variables."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMajorOptimality"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMajorOptimality.setter
    def ToleranceOnMajorOptimality(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMajorOptimality"](arg_newVal.COM_val))

    @property
    def MaxMinorIterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxMinorIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxMinorIterations.setter
    def MaxMinorIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxMinorIterations"](arg_newVal.COM_val))

    @property
    def ToleranceOnMinorFeasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMinorFeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMinorFeasibility.setter
    def ToleranceOnMinorFeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMinorFeasibility"](arg_newVal.COM_val))

    @property
    def OptionsFilename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOptionsFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOptionsFilename"](arg_newVal.COM_val))

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UseConsoleMonitor(self) -> bool:
        """Whether to use the out-of-process console monitor for the optimizer."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseConsoleMonitor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseConsoleMonitor.setter
    def UseConsoleMonitor(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseConsoleMonitor"](arg_newVal.COM_val))

    @property
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AllowInternalPrimalInfeasibilityMeasureNormalization.setter
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"](arg_newVal.COM_val))

    @property
    def SNOPTScaling(self) -> "AgEVAOptimalFiniteSNOPTScaling":
        """SNOPT scaling option."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTScaling) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSNOPTScaling"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SNOPTScaling.setter
    def SNOPTScaling(self, newVal:"AgEVAOptimalFiniteSNOPTScaling") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSNOPTScaling, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSNOPTScaling"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{176AB7BE-90C8-4558-8E24-9E9862CE18FD}", IAgVAManeuverOptimalFiniteSNOPTOptimizer)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSNOPTOptimizer"] = IAgVAManeuverOptimalFiniteSNOPTOptimizer
__all__.append("IAgVAManeuverOptimalFiniteSNOPTOptimizer")

class IAgVAManeuverOptimalFiniteInitialBoundaryConditions(object):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    _uuid = "{872A109F-710B-49D4-9A7D-544E7044530B}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSetFromInitialGuess"] = _raise_uninitialized_error
        self.__dict__["_SetSetFromInitialGuess"] = _raise_uninitialized_error
        self.__dict__["_Geta"] = _raise_uninitialized_error
        self.__dict__["_Geth"] = _raise_uninitialized_error
        self.__dict__["_Getk"] = _raise_uninitialized_error
        self.__dict__["_Getp"] = _raise_uninitialized_error
        self.__dict__["_Getq"] = _raise_uninitialized_error
        self.__dict__["_GetL"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteInitialBoundaryConditions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions = agcom.GUID(IAgVAManeuverOptimalFiniteInitialBoundaryConditions._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteInitialBoundaryConditions._vtable_offset - 1
        self.__dict__["_GetSetFromInitialGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSetFromInitialGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_Geta"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Geth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Getk"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Getp"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Getq"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetL"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteInitialBoundaryConditions, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteInitialBoundaryConditions.")
    
    @property
    def SetFromInitialGuess(self) -> bool:
        """Set initial boundary condiitons from initial guess."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetFromInitialGuess"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SetFromInitialGuess.setter
    def SetFromInitialGuess(self, newVal:bool) -> None:
        """Set initial boundary condiitons from initial guess."""
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSetFromInitialGuess"](arg_newVal.COM_val))

    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geta"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geth"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getk"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getp"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getq"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_GetL"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{872A109F-710B-49D4-9A7D-544E7044530B}", IAgVAManeuverOptimalFiniteInitialBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteInitialBoundaryConditions"] = IAgVAManeuverOptimalFiniteInitialBoundaryConditions
__all__.append("IAgVAManeuverOptimalFiniteInitialBoundaryConditions")

class IAgVAManeuverOptimalFiniteFinalBoundaryConditions(object):
    """Properties of final boundary conditions for optimal finite maneuver."""
    _uuid = "{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSetFromFinalGuess"] = _raise_uninitialized_error
        self.__dict__["_SetSetFromFinalGuess"] = _raise_uninitialized_error
        self.__dict__["_Geta"] = _raise_uninitialized_error
        self.__dict__["_Geth"] = _raise_uninitialized_error
        self.__dict__["_Getk"] = _raise_uninitialized_error
        self.__dict__["_Getp"] = _raise_uninitialized_error
        self.__dict__["_Getq"] = _raise_uninitialized_error
        self.__dict__["_GetL"] = _raise_uninitialized_error
        self.__dict__["_GetLowerDeltaFinalTime"] = _raise_uninitialized_error
        self.__dict__["_SetLowerDeltaFinalTime"] = _raise_uninitialized_error
        self.__dict__["_GetUpperDeltaFinalTime"] = _raise_uninitialized_error
        self.__dict__["_SetUpperDeltaFinalTime"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteFinalBoundaryConditions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions = agcom.GUID(IAgVAManeuverOptimalFiniteFinalBoundaryConditions._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteFinalBoundaryConditions._vtable_offset - 1
        self.__dict__["_GetSetFromFinalGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSetFromFinalGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_Geta"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Geth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Getk"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Getp"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Getq"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetL"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetLowerDeltaFinalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowerDeltaFinalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetUpperDeltaFinalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpperDeltaFinalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteFinalBoundaryConditions, vtable_offset_local+13, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteFinalBoundaryConditions.")
    
    @property
    def SetFromFinalGuess(self) -> bool:
        """Set initial boundary conditions from initial guess."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetFromFinalGuess"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SetFromFinalGuess.setter
    def SetFromFinalGuess(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSetFromFinalGuess"](arg_newVal.COM_val))

    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geta"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geth"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getk"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getp"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getq"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_GetL"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def LowerDeltaFinalTime(self) -> float:
        """Lower delta for final time"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerDeltaFinalTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerDeltaFinalTime.setter
    def LowerDeltaFinalTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerDeltaFinalTime"](arg_newVal.COM_val))

    @property
    def UpperDeltaFinalTime(self) -> float:
        """Upper delta for final time"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperDeltaFinalTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperDeltaFinalTime.setter
    def UpperDeltaFinalTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperDeltaFinalTime"](arg_newVal.COM_val))

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{476E5210-09E8-4DD7-ABCC-AF09E67DB21D}", IAgVAManeuverOptimalFiniteFinalBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteFinalBoundaryConditions"] = IAgVAManeuverOptimalFiniteFinalBoundaryConditions
__all__.append("IAgVAManeuverOptimalFiniteFinalBoundaryConditions")

class IAgVAManeuverOptimalFinitePathBoundaryConditions(object):
    """Properties of path boundary conditions for optimal finite maneuver."""
    _uuid = "{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetComputeFromInitialGuess"] = _raise_uninitialized_error
        self.__dict__["_SetComputeFromInitialGuess"] = _raise_uninitialized_error
        self.__dict__["_Geta"] = _raise_uninitialized_error
        self.__dict__["_Geth"] = _raise_uninitialized_error
        self.__dict__["_Getk"] = _raise_uninitialized_error
        self.__dict__["_Getp"] = _raise_uninitialized_error
        self.__dict__["_Getq"] = _raise_uninitialized_error
        self.__dict__["_GetL"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBoundAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBoundAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBoundAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBoundAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBoundElevation"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBoundElevation"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBoundElevation"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBoundElevation"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFinitePathBoundaryConditions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFinitePathBoundaryConditions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFinitePathBoundaryConditions = agcom.GUID(IAgVAManeuverOptimalFinitePathBoundaryConditions._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFinitePathBoundaryConditions._vtable_offset - 1
        self.__dict__["_GetComputeFromInitialGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetComputeFromInitialGuess"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_Geta"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Geth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_Getk"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_Getp"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Getq"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetL"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetLowerBoundAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowerBoundAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetUpperBoundAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpperBoundAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetLowerBoundElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowerBoundElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetUpperBoundElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpperBoundElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinitePathBoundaryConditions, vtable_offset_local+17, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__ and type(IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFinitePathBoundaryConditions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFinitePathBoundaryConditions.")
    
    @property
    def ComputeFromInitialGuess(self) -> bool:
        """Compute path boundary condiitons from initial guess."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputeFromInitialGuess"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComputeFromInitialGuess.setter
    def ComputeFromInitialGuess(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetComputeFromInitialGuess"](arg_newVal.COM_val))

    @property
    def a(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element a."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geta"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def h(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element h."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Geth"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def k(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element k."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getk"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def p(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element p."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getp"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def q(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element q."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_Getq"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def L(self) -> "IAgVAManeuverOptimalFiniteBounds":
        """Bound limits for element L."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteBounds:
            agcls.evaluate_hresult(self.__dict__["_GetL"](byref(arg_ppAgVAManeuverOptimalFiniteBounds.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteBounds.python_val

    @property
    def LowerBoundAzimuth(self) -> float:
        """Thrust direction azimuth lower bound along the path"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBoundAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBoundAzimuth.setter
    def LowerBoundAzimuth(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBoundAzimuth"](arg_newVal.COM_val))

    @property
    def UpperBoundAzimuth(self) -> float:
        """Thrust direction azimuth upper bound along the path"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBoundAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBoundAzimuth.setter
    def UpperBoundAzimuth(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBoundAzimuth"](arg_newVal.COM_val))

    @property
    def LowerBoundElevation(self) -> float:
        """Thrust direction elevation lower bound along the path"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBoundElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBoundElevation.setter
    def LowerBoundElevation(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBoundElevation"](arg_newVal.COM_val))

    @property
    def UpperBoundElevation(self) -> float:
        """Thrust direction elevation upper bound along the path"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBoundElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBoundElevation.setter
    def UpperBoundElevation(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBoundElevation"](arg_newVal.COM_val))

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{BF41B9E6-80DE-4E15-8E36-00D735E7B40D}", IAgVAManeuverOptimalFinitePathBoundaryConditions)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFinitePathBoundaryConditions"] = IAgVAManeuverOptimalFinitePathBoundaryConditions
__all__.append("IAgVAManeuverOptimalFinitePathBoundaryConditions")

class IAgVAManeuverOptimalFiniteSteeringNodeCollection(object):
    """Steering/nodes collection."""
    _uuid = "{1808D2D6-FAB4-4750-AE06-B37D95779815}"
    _num_methods = 3
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSteeringNodeCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteSteeringNodeCollection = agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeCollection._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteSteeringNodeCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeCollection, vtable_offset_local+3, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__ and type(IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSteeringNodeCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSteeringNodeCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAManeuverOptimalFiniteSteeringNodeElement":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAManeuverOptimalFiniteSteeringNodeElement":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_steeringNodeElement:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_steeringNodeElement.COM_val)))
            return arg_steeringNodeElement.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1808D2D6-FAB4-4750-AE06-B37D95779815}", IAgVAManeuverOptimalFiniteSteeringNodeCollection)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSteeringNodeCollection"] = IAgVAManeuverOptimalFiniteSteeringNodeCollection
__all__.append("IAgVAManeuverOptimalFiniteSteeringNodeCollection")

class IAgVAManeuverOptimalFiniteBounds(object):
    """The bounds for boundary interfaces."""
    _uuid = "{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteBounds._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteBounds from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteBounds = agcom.GUID(IAgVAManeuverOptimalFiniteBounds._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteBounds._vtable_offset - 1
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteBounds, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteBounds, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteBounds, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteBounds, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteBounds.__dict__ and type(IAgVAManeuverOptimalFiniteBounds.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteBounds.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteBounds.")
    
    @property
    def LowerBound(self) -> float:
        """Lower bound for a boundary element."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> float:
        """Upper bound for a boundary element."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E2B960BB-5091-43DE-91DD-53D6E0EFA61D}", IAgVAManeuverOptimalFiniteBounds)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteBounds"] = IAgVAManeuverOptimalFiniteBounds
__all__.append("IAgVAManeuverOptimalFiniteBounds")

class IAgVAGoldenSectionControlCollection(object):
    """Properties for the list of Golden Section control parameters."""
    _uuid = "{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGoldenSectionControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGoldenSectionControlCollection = agcom.GUID(IAgVAGoldenSectionControlCollection._uuid)
        vtable_offset_local = IAgVAGoldenSectionControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionControlCollection.__dict__ and type(IAgVAGoldenSectionControlCollection.__dict__[attrname]) == property:
            return IAgVAGoldenSectionControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAGoldenSectionControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAGoldenSectionControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_goldenSectionControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_goldenSectionControl.COM_val)))
            return arg_goldenSectionControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAGoldenSectionControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_goldenSectionControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_goldenSectionControl.COM_val)))
            return arg_goldenSectionControl.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1E3A8FAA-05F5-4519-A63A-C793CCE4C27A}", IAgVAGoldenSectionControlCollection)
agcls.AgTypeNameMap["IAgVAGoldenSectionControlCollection"] = IAgVAGoldenSectionControlCollection
__all__.append("IAgVAGoldenSectionControlCollection")

class IAgVAGoldenSectionControl(object):
    """Properties for control parameters of a Golden Section profile."""
    _uuid = "{91407E31-8792-460C-AE98-32CF4690D53F}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGoldenSectionControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGoldenSectionControl = agcom.GUID(IAgVAGoldenSectionControl._uuid)
        vtable_offset_local = IAgVAGoldenSectionControl._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+12, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+13, agcom.BSTR)
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionControl, vtable_offset_local+15, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionControl.__dict__ and type(IAgVAGoldenSectionControl.__dict__[attrname]) == property:
            return IAgVAGoldenSectionControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionControl.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{91407E31-8792-460C-AE98-32CF4690D53F}", IAgVAGoldenSectionControl)
agcls.AgTypeNameMap["IAgVAGoldenSectionControl"] = IAgVAGoldenSectionControl
__all__.append("IAgVAGoldenSectionControl")

class IAgVAGoldenSectionResultCollection(object):
    """Properties for the list of Golden Section result parameters."""
    _uuid = "{50AD7420-2926-4B14-8C99-88E1942EF754}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGoldenSectionResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGoldenSectionResultCollection = agcom.GUID(IAgVAGoldenSectionResultCollection._uuid)
        vtable_offset_local = IAgVAGoldenSectionResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionResultCollection.__dict__ and type(IAgVAGoldenSectionResultCollection.__dict__[attrname]) == property:
            return IAgVAGoldenSectionResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAGoldenSectionResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAGoldenSectionResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_goldenSectionControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_goldenSectionControl.COM_val)))
            return arg_goldenSectionControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAGoldenSectionResult":
        """Returns the result specified by the object/result path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_goldenSectionResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_goldenSectionResult.COM_val)))
            return arg_goldenSectionResult.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{50AD7420-2926-4B14-8C99-88E1942EF754}", IAgVAGoldenSectionResultCollection)
agcls.AgTypeNameMap["IAgVAGoldenSectionResultCollection"] = IAgVAGoldenSectionResultCollection
__all__.append("IAgVAGoldenSectionResultCollection")

class IAgVAGoldenSectionResult(object):
    """Properties for result parameters of a Golden Section profile."""
    _uuid = "{67461697-37E6-4342-978D-9C6143528607}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetDesiredOperation"] = _raise_uninitialized_error
        self.__dict__["_SetDesiredOperation"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGoldenSectionResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGoldenSectionResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGoldenSectionResult = agcom.GUID(IAgVAGoldenSectionResult._uuid)
        vtable_offset_local = IAgVAGoldenSectionResult._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetDesiredOperation"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetDesiredOperation"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGoldenSectionResult, vtable_offset_local+11, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGoldenSectionResult.__dict__ and type(IAgVAGoldenSectionResult.__dict__[attrname]) == property:
            return IAgVAGoldenSectionResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGoldenSectionResult.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DesiredOperation(self) -> "AgEVAGoldenSectionDesiredOperation":
        """The Desired Operation/Objective of golden section."""
        with agmarshall.AgEnum_arg(AgEVAGoldenSectionDesiredOperation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesiredOperation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesiredOperation.setter
    def DesiredOperation(self, inVal:"AgEVAGoldenSectionDesiredOperation") -> None:
        with agmarshall.AgEnum_arg(AgEVAGoldenSectionDesiredOperation, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesiredOperation"](arg_inVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{67461697-37E6-4342-978D-9C6143528607}", IAgVAGoldenSectionResult)
agcls.AgTypeNameMap["IAgVAGoldenSectionResult"] = IAgVAGoldenSectionResult
__all__.append("IAgVAGoldenSectionResult")

class IAgVAGridSearchControlCollection(object):
    """Properties for the list of Grid Search control parameters."""
    _uuid = "{BD562D00-ABDC-411B-813D-84C1E3597CEF}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGridSearchControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGridSearchControlCollection = agcom.GUID(IAgVAGridSearchControlCollection._uuid)
        vtable_offset_local = IAgVAGridSearchControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchControlCollection.__dict__ and type(IAgVAGridSearchControlCollection.__dict__[attrname]) == property:
            return IAgVAGridSearchControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAGridSearchControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAGridSearchControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_gridSearchControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_gridSearchControl.COM_val)))
            return arg_gridSearchControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVAGridSearchControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_gridSearchControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_gridSearchControl.COM_val)))
            return arg_gridSearchControl.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BD562D00-ABDC-411B-813D-84C1E3597CEF}", IAgVAGridSearchControlCollection)
agcls.AgTypeNameMap["IAgVAGridSearchControlCollection"] = IAgVAGridSearchControlCollection
__all__.append("IAgVAGridSearchControlCollection")

class IAgVAGridSearchControl(object):
    """Properties for control parameters of a Grid Search profile."""
    _uuid = "{7E71EB52-998F-49E7-80BA-1B11574D59DF}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetStep"] = _raise_uninitialized_error
        self.__dict__["_SetStep"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGridSearchControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGridSearchControl = agcom.GUID(IAgVAGridSearchControl._uuid)
        vtable_offset_local = IAgVAGridSearchControl._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+12, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+13, agcom.BSTR)
        self.__dict__["_GetStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchControl, vtable_offset_local+15, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchControl.__dict__ and type(IAgVAGridSearchControl.__dict__[attrname]) == property:
            return IAgVAGridSearchControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchControl.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Step(self) -> typing.Any:
        """Specifies the step size to use when evaluating the grid search. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Step.setter
    def Step(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStep"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7E71EB52-998F-49E7-80BA-1B11574D59DF}", IAgVAGridSearchControl)
agcls.AgTypeNameMap["IAgVAGridSearchControl"] = IAgVAGridSearchControl
__all__.append("IAgVAGridSearchControl")

class IAgVAGridSearchResultCollection(object):
    """Properties for the list of Grid Search result parameters."""
    _uuid = "{BCA009A8-29CD-420A-955E-DC95A251CD9E}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGridSearchResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGridSearchResultCollection = agcom.GUID(IAgVAGridSearchResultCollection._uuid)
        vtable_offset_local = IAgVAGridSearchResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchResultCollection.__dict__ and type(IAgVAGridSearchResultCollection.__dict__[attrname]) == property:
            return IAgVAGridSearchResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAGridSearchResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVAGridSearchResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_gridSearchControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_gridSearchControl.COM_val)))
            return arg_gridSearchControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVAGridSearchResult":
        """Returns the result specified by the object/result path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_gridSearchResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_gridSearchResult.COM_val)))
            return arg_gridSearchResult.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BCA009A8-29CD-420A-955E-DC95A251CD9E}", IAgVAGridSearchResultCollection)
agcls.AgTypeNameMap["IAgVAGridSearchResultCollection"] = IAgVAGridSearchResultCollection
__all__.append("IAgVAGridSearchResultCollection")

class IAgVAGridSearchResult(object):
    """Properties for result parameters of a Grid Search profile."""
    _uuid = "{36F26633-D0C4-4692-A6D2-4D98451AB3A7}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetDesiredOperation"] = _raise_uninitialized_error
        self.__dict__["_SetDesiredOperation"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGridSearchResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGridSearchResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGridSearchResult = agcom.GUID(IAgVAGridSearchResult._uuid)
        vtable_offset_local = IAgVAGridSearchResult._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetDesiredOperation"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetDesiredOperation"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAGridSearchResult, vtable_offset_local+11, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGridSearchResult.__dict__ and type(IAgVAGridSearchResult.__dict__[attrname]) == property:
            return IAgVAGridSearchResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGridSearchResult.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DesiredOperation(self) -> "AgEVAGridSearchDesiredOperation":
        """The Desired Operation/Objective of grid search."""
        with agmarshall.AgEnum_arg(AgEVAGridSearchDesiredOperation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesiredOperation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesiredOperation.setter
    def DesiredOperation(self, inVal:"AgEVAGridSearchDesiredOperation") -> None:
        with agmarshall.AgEnum_arg(AgEVAGridSearchDesiredOperation, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesiredOperation"](arg_inVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{36F26633-D0C4-4692-A6D2-4D98451AB3A7}", IAgVAGridSearchResult)
agcls.AgTypeNameMap["IAgVAGridSearchResult"] = IAgVAGridSearchResult
__all__.append("IAgVAGridSearchResult")

class IAgVAStoppingConditionElement(object):
    """The status of a stopping condition."""
    _uuid = "{7508042C-1986-42AB-9B83-DE0AAA5626A0}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetActive"] = _raise_uninitialized_error
        self.__dict__["_SetActive"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetProperties"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStoppingConditionElement._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionElement from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStoppingConditionElement = agcom.GUID(IAgVAStoppingConditionElement._uuid)
        vtable_offset_local = IAgVAStoppingConditionElement._vtable_offset - 1
        self.__dict__["_GetActive"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetActive"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+5, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetProperties"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionElement, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionElement.__dict__ and type(IAgVAStoppingConditionElement.__dict__[attrname]) == property:
            return IAgVAStoppingConditionElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionElement.")
    
    @property
    def Active(self) -> bool:
        """If true, the stopping condition is active."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetActive"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Active.setter
    def Active(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetActive"](arg_newVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlStoppingCondition") -> None:
        """Enables or disables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlStoppingCondition, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlStoppingCondition") -> None:
        """Disables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlStoppingCondition, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlStoppingCondition") -> bool:
        """Sees if the specified control is enabled"""
        with agmarshall.AgEnum_arg(AgEVAControlStoppingCondition, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Properties(self) -> "IAgVAStoppingConditionComponent":
        """The properties available to the stopping condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProperties"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7508042C-1986-42AB-9B83-DE0AAA5626A0}", IAgVAStoppingConditionElement)
agcls.AgTypeNameMap["IAgVAStoppingConditionElement"] = IAgVAStoppingConditionElement
__all__.append("IAgVAStoppingConditionElement")

class IAgVAStoppingConditionCollection(object):
    """The list of Stopping Conditions."""
    _uuid = "{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}"
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStoppingConditionCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStoppingConditionCollection = agcom.GUID(IAgVAStoppingConditionCollection._uuid)
        vtable_offset_local = IAgVAStoppingConditionCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+9, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionCollection, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionCollection.__dict__ and type(IAgVAStoppingConditionCollection.__dict__[attrname]) == property:
            return IAgVAStoppingConditionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAStoppingConditionElement":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAStoppingConditionElement":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAStoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAStoppingCondition.COM_val)))
            return arg_ppVAStoppingCondition.python_val

    def Add(self, conditionName:str) -> "IAgVAStoppingConditionElement":
        """Adds a stopping condition."""
        with agmarshall.BSTR_arg(conditionName) as arg_conditionName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAStoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_conditionName.COM_val, byref(arg_ppVAStoppingCondition.COM_val)))
            return arg_ppVAStoppingCondition.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a stopping condition."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the stopping condition into the clipboard and removes the stopping condition from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAStoppingConditionElement":
        """Pastes the stopping condition from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, stopCond:"IAgVAStoppingConditionElement") -> "IAgVAStoppingConditionElement":
        """Copies the stopping condition and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(stopCond, IAgVAStoppingConditionElement) as arg_stopCond, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_stopCond.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAStoppingConditionElement":
        """Retrieves an item in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAStoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAStoppingCondition.COM_val)))
            return arg_ppVAStoppingCondition.python_val

    def GetItemByName(self, name:str) -> "IAgVAStoppingConditionElement":
        """Retrieves an item in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAStoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAStoppingCondition.COM_val)))
            return arg_ppVAStoppingCondition.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{47FEE61C-D8B9-4E24-8417-6A9D1DF966A9}", IAgVAStoppingConditionCollection)
agcls.AgTypeNameMap["IAgVAStoppingConditionCollection"] = IAgVAStoppingConditionCollection
__all__.append("IAgVAStoppingConditionCollection")

class IAgVAMCSSegmentCollection(object):
    """Properties for a collection of segments."""
    _uuid = "{550AD0AB-FAB1-4632-895D-774CA07B120E}"
    _num_methods = 13
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Insert"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_InsertByName"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSSegmentCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegmentCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSSegmentCollection = agcom.GUID(IAgVAMCSSegmentCollection._uuid)
        vtable_offset_local = IAgVAMCSSegmentCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Insert"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+2, agcom.LONG, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+4, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+9, agcom.PVOID, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_InsertByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+10, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+12, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentCollection, vtable_offset_local+13, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegmentCollection.__dict__ and type(IAgVAMCSSegmentCollection.__dict__[attrname]) == property:
            return IAgVAMCSSegmentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegmentCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAMCSSegment":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAMCSSegment":
        """Returns the specified segment(using segment name or index number)."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAMCSSegment.COM_val)))
            return arg_ppVAMCSSegment.python_val

    def Insert(self, segmentType:"AgEVASegmentType", segmentName:str, segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Adds a segment to the segment collection."""
        with agmarshall.AgEnum_arg(AgEVASegmentType, segmentType) as arg_segmentType, \
             agmarshall.BSTR_arg(segmentName) as arg_segmentName, \
             agmarshall.BSTR_arg(segmentToInsertBefore) as arg_segmentToInsertBefore, \
             agmarshall.AgInterface_out_arg() as arg_ppMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_Insert"](arg_segmentType.COM_val, arg_segmentName.COM_val, arg_segmentToInsertBefore.COM_val, byref(arg_ppMCSSegment.COM_val)))
            return arg_ppMCSSegment.python_val

    def Remove(self, segmentNameToRemove:str) -> None:
        """Removes a segment; the End segment cannot be deleted."""
        with agmarshall.BSTR_arg(segmentNameToRemove) as arg_segmentNameToRemove:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_segmentNameToRemove.COM_val))

    def RemoveAll(self) -> None:
        """Removes all segments; the End segment cannot be deleted."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, segmentNameToCut:str) -> None:
        """Copies the segment into the clipboard and removes the segment from the sequence."""
        with agmarshall.BSTR_arg(segmentNameToCut) as arg_segmentNameToCut:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_segmentNameToCut.COM_val))

    def Paste(self, segmentToPasteBefore:str) -> "IAgVAMCSSegment":
        """Pastes the segment from the clipboard and inserts in before the given segment name."""
        with agmarshall.BSTR_arg(segmentToPasteBefore) as arg_segmentToPasteBefore, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](arg_segmentToPasteBefore.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, segment:"IAgVAMCSSegment", segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Copies the segment pointer and inserts the copy before the given segment name."""
        with agmarshall.AgInterface_in_arg(segment, IAgVAMCSSegment) as arg_segment, \
             agmarshall.BSTR_arg(segmentToInsertBefore) as arg_segmentToInsertBefore, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_segment.COM_val, arg_segmentToInsertBefore.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertByName(self, segmentName:str, segmentToInsertBefore:str) -> "IAgVAMCSSegment":
        """Inserts a segment by name to the segment collection."""
        with agmarshall.BSTR_arg(segmentName) as arg_segmentName, \
             agmarshall.BSTR_arg(segmentToInsertBefore) as arg_segmentToInsertBefore, \
             agmarshall.AgInterface_out_arg() as arg_ppMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_InsertByName"](arg_segmentName.COM_val, arg_segmentToInsertBefore.COM_val, byref(arg_ppMCSSegment.COM_val)))
            return arg_ppMCSSegment.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAMCSSegment":
        """Returns the specified segment(using segment index number)."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAMCSSegment.COM_val)))
            return arg_ppVAMCSSegment.python_val

    def GetItemByName(self, name:str) -> "IAgVAMCSSegment":
        """Returns the specified segment(using segment name)."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAMCSSegment.COM_val)))
            return arg_ppVAMCSSegment.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{550AD0AB-FAB1-4632-895D-774CA07B120E}", IAgVAMCSSegmentCollection)
agcls.AgTypeNameMap["IAgVAMCSSegmentCollection"] = IAgVAMCSSegmentCollection
__all__.append("IAgVAMCSSegmentCollection")

class IAgVAState(object):
    """Spacecraft Parameters properties for the spacecraft configuration."""
    _uuid = "{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}"
    _num_methods = 33
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetElement"] = _raise_uninitialized_error
        self.__dict__["_GetEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetDryMass"] = _raise_uninitialized_error
        self.__dict__["_SetDryMass"] = _raise_uninitialized_error
        self.__dict__["_GetFuelMass"] = _raise_uninitialized_error
        self.__dict__["_SetFuelMass"] = _raise_uninitialized_error
        self.__dict__["_GetDragArea"] = _raise_uninitialized_error
        self.__dict__["_SetDragArea"] = _raise_uninitialized_error
        self.__dict__["_GetSRPArea"] = _raise_uninitialized_error
        self.__dict__["_SetSRPArea"] = _raise_uninitialized_error
        self.__dict__["_GetTankPressure"] = _raise_uninitialized_error
        self.__dict__["_SetTankPressure"] = _raise_uninitialized_error
        self.__dict__["_GetTankTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetTankTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetFuelDensity"] = _raise_uninitialized_error
        self.__dict__["_SetFuelDensity"] = _raise_uninitialized_error
        self.__dict__["_GetCr"] = _raise_uninitialized_error
        self.__dict__["_SetCr"] = _raise_uninitialized_error
        self.__dict__["_GetCd"] = _raise_uninitialized_error
        self.__dict__["_SetCd"] = _raise_uninitialized_error
        self.__dict__["_GetRadiationPressureCoeff"] = _raise_uninitialized_error
        self.__dict__["_SetRadiationPressureCoeff"] = _raise_uninitialized_error
        self.__dict__["_GetRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_SetRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_GetK1"] = _raise_uninitialized_error
        self.__dict__["_SetK1"] = _raise_uninitialized_error
        self.__dict__["_GetK2"] = _raise_uninitialized_error
        self.__dict__["_SetK2"] = _raise_uninitialized_error
        self.__dict__["_GetInFrameName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAState = agcom.GUID(IAgVAState._uuid)
        vtable_offset_local = IAgVAState._vtable_offset - 1
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetElement"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetDryMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDryMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetDragArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDragArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetSRPArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSRPArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetTankPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTankPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetTankTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTankTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetFuelDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetCr"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCr"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetCd"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCd"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetRadiationPressureCoeff"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiationPressureCoeff"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetK2"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK2"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetInFrameName"] = IAGFUNCTYPE(pUnk, IID_IAgVAState, vtable_offset_local+33, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAState.__dict__ and type(IAgVAState.__dict__[attrname]) == property:
            return IAgVAState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAState.")
    
    @property
    def ElementType(self) -> "AgEVAElementType":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVAElementType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetElementType(self, elementType:"AgEVAElementType") -> None:
        """Sets the element type."""
        with agmarshall.AgEnum_arg(AgEVAElementType, elementType) as arg_elementType:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_elementType.COM_val))

    @property
    def Element(self) -> "IAgVAElement":
        """Returns the currently selected element type."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAElement:
            agcls.evaluate_hresult(self.__dict__["_GetElement"](byref(arg_ppVAElement.COM_val)))
            return arg_ppVAElement.python_val

    @property
    def Epoch(self) -> typing.Any:
        """The epoch of the Orbit State. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pEpoch:
            agcls.evaluate_hresult(self.__dict__["_GetEpoch"](byref(arg_pEpoch.COM_val)))
            return arg_pEpoch.python_val

    @Epoch.setter
    def Epoch(self, epoch:typing.Any) -> None:
        with agmarshall.VARIANT_arg(epoch) as arg_epoch:
            agcls.evaluate_hresult(self.__dict__["_SetEpoch"](arg_epoch.COM_val))

    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        with agmarshall.BSTR_arg() as arg_pCoordSysName:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pCoordSysName.COM_val)))
            return arg_pCoordSysName.python_val

    @property
    def DryMass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pDryMass:
            agcls.evaluate_hresult(self.__dict__["_GetDryMass"](byref(arg_pDryMass.COM_val)))
            return arg_pDryMass.python_val

    @DryMass.setter
    def DryMass(self, dryMass:float) -> None:
        with agmarshall.DOUBLE_arg(dryMass) as arg_dryMass:
            agcls.evaluate_hresult(self.__dict__["_SetDryMass"](arg_dryMass.COM_val))

    @property
    def FuelMass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pFuelMass:
            agcls.evaluate_hresult(self.__dict__["_GetFuelMass"](byref(arg_pFuelMass.COM_val)))
            return arg_pFuelMass.python_val

    @FuelMass.setter
    def FuelMass(self, fuelMass:float) -> None:
        with agmarshall.DOUBLE_arg(fuelMass) as arg_fuelMass:
            agcls.evaluate_hresult(self.__dict__["_SetFuelMass"](arg_fuelMass.COM_val))

    @property
    def DragArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pFuelMass:
            agcls.evaluate_hresult(self.__dict__["_GetDragArea"](byref(arg_pFuelMass.COM_val)))
            return arg_pFuelMass.python_val

    @DragArea.setter
    def DragArea(self, fuelMass:float) -> None:
        with agmarshall.DOUBLE_arg(fuelMass) as arg_fuelMass:
            agcls.evaluate_hresult(self.__dict__["_SetDragArea"](arg_fuelMass.COM_val))

    @property
    def SRPArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pSRPArea:
            agcls.evaluate_hresult(self.__dict__["_GetSRPArea"](byref(arg_pSRPArea.COM_val)))
            return arg_pSRPArea.python_val

    @SRPArea.setter
    def SRPArea(self, sRPArea:float) -> None:
        with agmarshall.DOUBLE_arg(sRPArea) as arg_sRPArea:
            agcls.evaluate_hresult(self.__dict__["_SetSRPArea"](arg_sRPArea.COM_val))

    @property
    def TankPressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pTankPressure:
            agcls.evaluate_hresult(self.__dict__["_GetTankPressure"](byref(arg_pTankPressure.COM_val)))
            return arg_pTankPressure.python_val

    @TankPressure.setter
    def TankPressure(self, tankPressure:float) -> None:
        with agmarshall.DOUBLE_arg(tankPressure) as arg_tankPressure:
            agcls.evaluate_hresult(self.__dict__["_SetTankPressure"](arg_tankPressure.COM_val))

    @property
    def TankTemperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pTankTemperature:
            agcls.evaluate_hresult(self.__dict__["_GetTankTemperature"](byref(arg_pTankTemperature.COM_val)))
            return arg_pTankTemperature.python_val

    @TankTemperature.setter
    def TankTemperature(self, tankTemperature:float) -> None:
        with agmarshall.DOUBLE_arg(tankTemperature) as arg_tankTemperature:
            agcls.evaluate_hresult(self.__dict__["_SetTankTemperature"](arg_tankTemperature.COM_val))

    @property
    def FuelDensity(self) -> float:
        """The density of the fuel tank. Uses SmallDensity Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pFuelDensity:
            agcls.evaluate_hresult(self.__dict__["_GetFuelDensity"](byref(arg_pFuelDensity.COM_val)))
            return arg_pFuelDensity.python_val

    @FuelDensity.setter
    def FuelDensity(self, fuelDensity:float) -> None:
        with agmarshall.DOUBLE_arg(fuelDensity) as arg_fuelDensity:
            agcls.evaluate_hresult(self.__dict__["_SetFuelDensity"](arg_fuelDensity.COM_val))

    @property
    def Cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pCr:
            agcls.evaluate_hresult(self.__dict__["_GetCr"](byref(arg_pCr.COM_val)))
            return arg_pCr.python_val

    @Cr.setter
    def Cr(self, cr:float) -> None:
        with agmarshall.DOUBLE_arg(cr) as arg_cr:
            agcls.evaluate_hresult(self.__dict__["_SetCr"](arg_cr.COM_val))

    @property
    def Cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pCd:
            agcls.evaluate_hresult(self.__dict__["_GetCd"](byref(arg_pCd.COM_val)))
            return arg_pCd.python_val

    @Cd.setter
    def Cd(self, cd:float) -> None:
        with agmarshall.DOUBLE_arg(cd) as arg_cd:
            agcls.evaluate_hresult(self.__dict__["_SetCd"](arg_cd.COM_val))

    @property
    def RadiationPressureCoeff(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pRadiationPressureCoeff:
            agcls.evaluate_hresult(self.__dict__["_GetRadiationPressureCoeff"](byref(arg_pRadiationPressureCoeff.COM_val)))
            return arg_pRadiationPressureCoeff.python_val

    @RadiationPressureCoeff.setter
    def RadiationPressureCoeff(self, radiationPressureCoeff:float) -> None:
        with agmarshall.DOUBLE_arg(radiationPressureCoeff) as arg_radiationPressureCoeff:
            agcls.evaluate_hresult(self.__dict__["_SetRadiationPressureCoeff"](arg_radiationPressureCoeff.COM_val))

    @property
    def RadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses Small Area Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pRadiationPressureArea:
            agcls.evaluate_hresult(self.__dict__["_GetRadiationPressureArea"](byref(arg_pRadiationPressureArea.COM_val)))
            return arg_pRadiationPressureArea.python_val

    @RadiationPressureArea.setter
    def RadiationPressureArea(self, radPressureArea:float) -> None:
        with agmarshall.DOUBLE_arg(radPressureArea) as arg_radPressureArea:
            agcls.evaluate_hresult(self.__dict__["_SetRadiationPressureArea"](arg_radPressureArea.COM_val))

    @property
    def K1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pK1:
            agcls.evaluate_hresult(self.__dict__["_GetK1"](byref(arg_pK1.COM_val)))
            return arg_pK1.python_val

    @K1.setter
    def K1(self, k1:float) -> None:
        with agmarshall.DOUBLE_arg(k1) as arg_k1:
            agcls.evaluate_hresult(self.__dict__["_SetK1"](arg_k1.COM_val))

    @property
    def K2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pK2:
            agcls.evaluate_hresult(self.__dict__["_GetK2"](byref(arg_pK2.COM_val)))
            return arg_pK2.python_val

    @K2.setter
    def K2(self, k2:float) -> None:
        with agmarshall.DOUBLE_arg(k2) as arg_k2:
            agcls.evaluate_hresult(self.__dict__["_SetK2"](arg_k2.COM_val))

    def GetInFrameName(self, frameName:str) -> "IAgVAState":
        """Gets the orbit state in the specified frame."""
        with agmarshall.BSTR_arg(frameName) as arg_frameName, \
             agmarshall.AgInterface_out_arg() as arg_ppOrbitState:
            agcls.evaluate_hresult(self.__dict__["_GetInFrameName"](arg_frameName.COM_val, byref(arg_ppOrbitState.COM_val)))
            return arg_ppOrbitState.python_val


agcls.AgClassCatalog.add_catalog_entry("{44DC2BBF-BC83-42AE-80A1-C1C4B399637F}", IAgVAState)
agcls.AgTypeNameMap["IAgVAState"] = IAgVAState
__all__.append("IAgVAState")

class IAgVAStoppingConditionComponent(object):
    """Properties for a stopping condition."""
    _uuid = "{BB400CAB-0917-4921-BD15-73F6039F3AF2}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStoppingConditionType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStoppingConditionComponent._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingConditionComponent from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStoppingConditionComponent = agcom.GUID(IAgVAStoppingConditionComponent._uuid)
        vtable_offset_local = IAgVAStoppingConditionComponent._vtable_offset - 1
        self.__dict__["_GetStoppingConditionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingConditionComponent, vtable_offset_local+1, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingConditionComponent.__dict__ and type(IAgVAStoppingConditionComponent.__dict__[attrname]) == property:
            return IAgVAStoppingConditionComponent.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStoppingConditionComponent.")
    
    @property
    def StoppingConditionType(self) -> "AgEVAStoppingCondition":
        """The type of stopping condition."""
        with agmarshall.AgEnum_arg(AgEVAStoppingCondition) as arg_pEVAStoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_GetStoppingConditionType"](byref(arg_pEVAStoppingCondition.COM_val)))
            return arg_pEVAStoppingCondition.python_val


agcls.AgClassCatalog.add_catalog_entry("{BB400CAB-0917-4921-BD15-73F6039F3AF2}", IAgVAStoppingConditionComponent)
agcls.AgTypeNameMap["IAgVAStoppingConditionComponent"] = IAgVAStoppingConditionComponent
__all__.append("IAgVAStoppingConditionComponent")

class IAgVAAutomaticSequence(object):
    """Properties for automatic sequences."""
    _uuid = "{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_MakeCopy"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetUserComment"] = _raise_uninitialized_error
        self.__dict__["_SetUserComment"] = _raise_uninitialized_error
        self.__dict__["_GetSequence"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAutomaticSequence._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAutomaticSequence from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAAutomaticSequence = agcom.GUID(IAgVAAutomaticSequence._uuid)
        vtable_offset_local = IAgVAAutomaticSequence._vtable_offset - 1
        self.__dict__["_MakeCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_GetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_SetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+5, agcom.BSTR)
        self.__dict__["_GetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequence, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAutomaticSequence.__dict__ and type(IAgVAAutomaticSequence.__dict__[attrname]) == property:
            return IAgVAAutomaticSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAutomaticSequence.")
    
    def MakeCopy(self, uniqueName:str) -> "IAgVAAutomaticSequence":
        """Makes a copy of the sequence."""
        with agmarshall.BSTR_arg(uniqueName) as arg_uniqueName, \
             agmarshall.AgInterface_out_arg() as arg_ppAutomaticSequence:
            agcls.evaluate_hresult(self.__dict__["_MakeCopy"](arg_uniqueName.COM_val, byref(arg_ppAutomaticSequence.COM_val)))
            return arg_ppAutomaticSequence.python_val

    @property
    def Name(self) -> str:
        """The name of the sequence."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_newVal.COM_val))

    @property
    def UserComment(self) -> str:
        """The user comment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserComment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserComment.setter
    def UserComment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserComment"](arg_newVal.COM_val))

    @property
    def Sequence(self) -> "IAgVAMCSSegmentCollection":
        """Returns the segment collection of the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegmentCollection:
            agcls.evaluate_hresult(self.__dict__["_GetSequence"](byref(arg_ppVAMCSSegmentCollection.COM_val)))
            return arg_ppVAMCSSegmentCollection.python_val


agcls.AgClassCatalog.add_catalog_entry("{B38BC6BA-95F1-4F88-A09D-5657DB8A31AC}", IAgVAAutomaticSequence)
agcls.AgTypeNameMap["IAgVAAutomaticSequence"] = IAgVAAutomaticSequence
__all__.append("IAgVAAutomaticSequence")

class IAgVAAutomaticSequenceCollection(object):
    """Properties for the Automatic Sequence Browser."""
    _uuid = "{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}"
    _num_methods = 7
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAutomaticSequenceCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAutomaticSequenceCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAAutomaticSequenceCollection = agcom.GUID(IAgVAAutomaticSequenceCollection._uuid)
        vtable_offset_local = IAgVAAutomaticSequenceCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+6, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAutomaticSequenceCollection, vtable_offset_local+7, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAutomaticSequenceCollection.__dict__ and type(IAgVAAutomaticSequenceCollection.__dict__[attrname]) == property:
            return IAgVAAutomaticSequenceCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAutomaticSequenceCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAAutomaticSequence":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAAutomaticSequence":
        """Returns the given automatic sequence."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAAutomaticSequence:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAAutomaticSequence.COM_val)))
            return arg_ppVAAutomaticSequence.python_val

    def Add(self, name:str) -> "IAgVAAutomaticSequence":
        """Creates a new sequence."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAAutomaticSequence:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_name.COM_val, byref(arg_ppVAAutomaticSequence.COM_val)))
            return arg_ppVAAutomaticSequence.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a sequence."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """The size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAAutomaticSequence":
        """Returns the given automatic sequence found by the index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAAutomaticSequence:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAAutomaticSequence.COM_val)))
            return arg_ppVAAutomaticSequence.python_val

    def GetItemByName(self, name:str) -> "IAgVAAutomaticSequence":
        """Returns the given automatic sequence found by the name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAAutomaticSequence:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAAutomaticSequence.COM_val)))
            return arg_ppVAAutomaticSequence.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{E71D785F-1A4C-4E98-BDC1-4EE7055D1FDC}", IAgVAAutomaticSequenceCollection)
agcls.AgTypeNameMap["IAgVAAutomaticSequenceCollection"] = IAgVAAutomaticSequenceCollection
__all__.append("IAgVAAutomaticSequenceCollection")

class IAgVABPlaneCollection(object):
    """Properties for the collection of B-Planes."""
    _uuid = "{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}"
    _num_methods = 6
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABPlaneCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABPlaneCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABPlaneCollection = agcom.GUID(IAgVABPlaneCollection._uuid)
        vtable_offset_local = IAgVABPlaneCollection._vtable_offset - 1
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+1, agcom.BSTR)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+3, )
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+4, agcom.LONG, POINTER(agcom.BSTR))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVABPlaneCollection, vtable_offset_local+6, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABPlaneCollection.__dict__ and type(IAgVABPlaneCollection.__dict__[attrname]) == property:
            return IAgVABPlaneCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABPlaneCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> str:
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Add(self, bPlaneName:str) -> None:
        """Adds a BPlane."""
        with agmarshall.BSTR_arg(bPlaneName) as arg_bPlaneName:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_bPlaneName.COM_val))

    def Remove(self, bPlaneName:str) -> None:
        """Removes a BPlane."""
        with agmarshall.BSTR_arg(bPlaneName) as arg_bPlaneName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_bPlaneName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all BPlanes."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    def Item(self, index:int) -> str:
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppVal.COM_val)))
            return arg_ppVal.python_val

    @property
    def Count(self) -> int:
        """The number of active BPlanes."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{64D1804F-3A12-4DA5-AF4F-79C6AE3B39BC}", IAgVABPlaneCollection)
agcls.AgTypeNameMap["IAgVABPlaneCollection"] = IAgVABPlaneCollection
__all__.append("IAgVABPlaneCollection")

class IAgVACalcObjectCollection(object):
    """Collection of calculation objects."""
    _uuid = "{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}"
    _num_methods = 10
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACalcObjectCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACalcObjectCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACalcObjectCollection = agcom.GUID(IAgVACalcObjectCollection._uuid)
        vtable_offset_local = IAgVACalcObjectCollection._vtable_offset - 1
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+2, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+9, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACalcObjectCollection, vtable_offset_local+10, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACalcObjectCollection.__dict__ and type(IAgVACalcObjectCollection.__dict__[attrname]) == property:
            return IAgVACalcObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACalcObjectCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgComponentInfo":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Add(self, name:str) -> "IAgComponentInfo":
        """Adds a calc object to the collection."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_name.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def Item(self, indexOrName:typing.Any) -> "IAgComponentInfo":
        """Returns a calc object."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a calc object from the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a calc object to the clipboard and removes the calc object from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgComponentInfo":
        """Pastes a calc object from the clipboard into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppCalcObj:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppCalcObj.COM_val)))
            return arg_ppCalcObj.python_val

    def InsertCopy(self, calcObj:"IAgComponentInfo") -> "IAgComponentInfo":
        """Copies a calc object and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(calcObj, IAgComponentInfo) as arg_calcObj, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_calcObj.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgComponentInfo":
        """Returns a calc object found by the index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def GetItemByName(self, name:str) -> "IAgComponentInfo":
        """Returns a calc object found by the name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{ECCA3BE7-235C-439B-8DE8-8A5010C4A484}", IAgVACalcObjectCollection)
agcls.AgTypeNameMap["IAgVACalcObjectCollection"] = IAgVACalcObjectCollection
__all__.append("IAgVACalcObjectCollection")

class IAgVAManeuverFinitePropagator(object):
    """Properties for the propagation of a Finite Maneuver."""
    _uuid = "{6F8D5070-D155-4D40-A682-46EF2B69F1A3}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropagatorName"] = _raise_uninitialized_error
        self.__dict__["_SetPropagatorName"] = _raise_uninitialized_error
        self.__dict__["_GetStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_GetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_GetEnableCenterBurn"] = _raise_uninitialized_error
        self.__dict__["_SetEnableCenterBurn"] = _raise_uninitialized_error
        self.__dict__["_GetBias"] = _raise_uninitialized_error
        self.__dict__["_SetBias"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverFinitePropagator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverFinitePropagator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverFinitePropagator = agcom.GUID(IAgVAManeuverFinitePropagator._uuid)
        vtable_offset_local = IAgVAManeuverFinitePropagator._vtable_offset - 1
        self.__dict__["_GetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableCenterBurn"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableCenterBurn"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_GetBias"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetBias"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinitePropagator, vtable_offset_local+21, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverFinitePropagator.__dict__ and type(IAgVAManeuverFinitePropagator.__dict__[attrname]) == property:
            return IAgVAManeuverFinitePropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverFinitePropagator.")
    
    @property
    def PropagatorName(self) -> str:
        """The propagator."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropagatorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropagatorName"](arg_newVal.COM_val))

    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The stopping conditions list."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetStoppingConditions"](byref(arg_ppVAStoppingConditionCollection.COM_val)))
            return arg_ppVAStoppingConditionCollection.python_val

    @property
    def MinPropagationTime(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinPropagationTime"](arg_newVal.COM_val))

    @property
    def MaxPropagationTime(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableMaxPropagationTime(self) -> bool:
        """Enable Maximum Propagation Time - apply the maximum propagation time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableWarningMessage(self) -> bool:
        """Issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWarningMessage"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWarningMessage"](arg_newVal.COM_val))

    @property
    def EnableCenterBurn(self) -> bool:
        """This property is only available for use with a duration stopping condition. If selected, you are setting the maneuver to start half the time before the previous segment ended."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableCenterBurn"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableCenterBurn.setter
    def EnableCenterBurn(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableCenterBurn"](arg_newVal.COM_val))

    @property
    def Bias(self) -> float:
        """The value by which to adjust the centering of the burn. A positive value will center the burn after the previous segment ends by the amount specified in the Burn Center Bias field. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBias"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Bias.setter
    def Bias(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBias"](arg_newVal.COM_val))

    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"](arg_newVal.COM_val))

    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6F8D5070-D155-4D40-A682-46EF2B69F1A3}", IAgVAManeuverFinitePropagator)
agcls.AgTypeNameMap["IAgVAManeuverFinitePropagator"] = IAgVAManeuverFinitePropagator
__all__.append("IAgVAManeuverFinitePropagator")

class IAgVABurnoutVelocity(object):
    """Properties for the burnout velocity of a Launch segment."""
    _uuid = "{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBurnoutOption"] = _raise_uninitialized_error
        self.__dict__["_SetBurnoutOption"] = _raise_uninitialized_error
        self.__dict__["_GetFixedVelocity"] = _raise_uninitialized_error
        self.__dict__["_SetFixedVelocity"] = _raise_uninitialized_error
        self.__dict__["_GetInertialVelocity"] = _raise_uninitialized_error
        self.__dict__["_SetInertialVelocity"] = _raise_uninitialized_error
        self.__dict__["_GetInertialVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetInertialVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetInertialHorizontalFPA"] = _raise_uninitialized_error
        self.__dict__["_SetInertialHorizontalFPA"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutVelocity._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutVelocity from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABurnoutVelocity = agcom.GUID(IAgVABurnoutVelocity._uuid)
        vtable_offset_local = IAgVABurnoutVelocity._vtable_offset - 1
        self.__dict__["_GetBurnoutOption"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetBurnoutOption"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetFixedVelocity"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFixedVelocity"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetInertialVelocity"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInertialVelocity"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetInertialVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetInertialVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetInertialHorizontalFPA"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetInertialHorizontalFPA"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutVelocity, vtable_offset_local+10, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutVelocity.__dict__ and type(IAgVABurnoutVelocity.__dict__[attrname]) == property:
            return IAgVABurnoutVelocity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABurnoutVelocity.")
    
    @property
    def BurnoutOption(self) -> "AgEVABurnoutOptions":
        """Select to use the fixed or inertial frame."""
        with agmarshall.AgEnum_arg(AgEVABurnoutOptions) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnoutOption"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BurnoutOption.setter
    def BurnoutOption(self, newVal:"AgEVABurnoutOptions") -> None:
        with agmarshall.AgEnum_arg(AgEVABurnoutOptions, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBurnoutOption"](arg_newVal.COM_val))

    @property
    def FixedVelocity(self) -> float:
        """The velocity magnitude . Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFixedVelocity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FixedVelocity.setter
    def FixedVelocity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFixedVelocity"](arg_newVal.COM_val))

    @property
    def InertialVelocity(self) -> float:
        """The velocity magnitude. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInertialVelocity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InertialVelocity.setter
    def InertialVelocity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInertialVelocity"](arg_newVal.COM_val))

    @property
    def InertialVelocityAzimuth(self) -> typing.Any:
        """The inertial velocity azimuth. Inertial velocity azimuth is the angle from the projection of north in the local horizontal plane to the inertial velocity vector, right handed. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInertialVelocityAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InertialVelocityAzimuth.setter
    def InertialVelocityAzimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInertialVelocityAzimuth"](arg_newVal.COM_val))

    @property
    def InertialHorizontalFPA(self) -> typing.Any:
        """Inertial horizontal flight path angle is the angle from the local horizontal to the inertial velocity vector, positive towards radius. It is also 90 degrees minus vertical flight path angle. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInertialHorizontalFPA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InertialHorizontalFPA.setter
    def InertialHorizontalFPA(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInertialHorizontalFPA"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A1EA8DE5-41D0-4419-988E-98EEACEECAE9}", IAgVABurnoutVelocity)
agcls.AgTypeNameMap["IAgVABurnoutVelocity"] = IAgVABurnoutVelocity
__all__.append("IAgVABurnoutVelocity")

class IAgVAAttitudeControl(object):
    """Properties for attitude options for a maneuver segment."""
    _uuid = "{FC43EF22-B727-4538-9E97-B3CD445436CD}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLeadDuration"] = _raise_uninitialized_error
        self.__dict__["_SetLeadDuration"] = _raise_uninitialized_error
        self.__dict__["_GetTrailDuration"] = _raise_uninitialized_error
        self.__dict__["_SetTrailDuration"] = _raise_uninitialized_error
        self.__dict__["_GetBodyAxis"] = _raise_uninitialized_error
        self.__dict__["_SetBodyAxis"] = _raise_uninitialized_error
        self.__dict__["_GetConstraintSign"] = _raise_uninitialized_error
        self.__dict__["_SetConstraintSign"] = _raise_uninitialized_error
        self.__dict__["_GetConstraintVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetConstraintVectorName"] = _raise_uninitialized_error
        self.__dict__["_GetCustomFunction"] = _raise_uninitialized_error
        self.__dict__["_SetCustomFunction"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAAttitudeControl = agcom.GUID(IAgVAAttitudeControl._uuid)
        vtable_offset_local = IAgVAAttitudeControl._vtable_offset - 1
        self.__dict__["_GetLeadDuration"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLeadDuration"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetTrailDuration"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTrailDuration"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetBodyAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetBodyAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetConstraintSign"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetConstraintSign"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetConstraintVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetConstraintVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetCustomFunction"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetCustomFunction"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControl, vtable_offset_local+12, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControl.__dict__ and type(IAgVAAttitudeControl.__dict__[attrname]) == property:
            return IAgVAAttitudeControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAttitudeControl.")
    
    @property
    def LeadDuration(self) -> float:
        """How long before the maneuver starts the maneuver attitude. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLeadDuration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LeadDuration.setter
    def LeadDuration(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLeadDuration"](arg_newVal.COM_val))

    @property
    def TrailDuration(self) -> float:
        """How long to maintain that attitude after the maneuver. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrailDuration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrailDuration.setter
    def TrailDuration(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrailDuration"](arg_newVal.COM_val))

    @property
    def BodyAxis(self) -> "AgEVABodyAxis":
        """Whether the engine acceleration (the direction opposite the engine's exhaust) is aligned with positive or negative X, Y or Z body axis."""
        with agmarshall.AgEnum_arg(AgEVABodyAxis) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBodyAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @BodyAxis.setter
    def BodyAxis(self, newVal:"AgEVABodyAxis") -> None:
        with agmarshall.AgEnum_arg(AgEVABodyAxis, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetBodyAxis"](arg_newVal.COM_val))

    @property
    def ConstraintSign(self) -> "AgEVAConstraintSign":
        """Whether the Constraint Vector is positive or negative."""
        with agmarshall.AgEnum_arg(AgEVAConstraintSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstraintSign"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConstraintSign.setter
    def ConstraintSign(self, newVal:"AgEVAConstraintSign") -> None:
        with agmarshall.AgEnum_arg(AgEVAConstraintSign, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConstraintSign"](arg_newVal.COM_val))

    @property
    def ConstraintVectorName(self) -> str:
        """Constraint Vector - the vector toward which this body vector is constrained."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConstraintVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConstraintVectorName.setter
    def ConstraintVectorName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConstraintVectorName"](arg_newVal.COM_val))

    @property
    def CustomFunction(self) -> "AgEVACustomFunction":
        """The attitude definition to use for other STK functions."""
        with agmarshall.AgEnum_arg(AgEVACustomFunction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomFunction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomFunction.setter
    def CustomFunction(self, newVal:"AgEVACustomFunction") -> None:
        with agmarshall.AgEnum_arg(AgEVACustomFunction, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomFunction"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FC43EF22-B727-4538-9E97-B3CD445436CD}", IAgVAAttitudeControl)
agcls.AgTypeNameMap["IAgVAAttitudeControl"] = IAgVAAttitudeControl
__all__.append("IAgVAAttitudeControl")

class IAgVAAttitudeControlFinite(IAgVAAttitudeControl):
    """The attitude control of a finite maneuver"""
    _uuid = "{827F3B46-D066-462B-A3DB-1DCD56A816BA}"
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFinite._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFinite from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControl._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFinite = agcom.GUID(IAgVAAttitudeControlFinite._uuid)
        vtable_offset_local = IAgVAAttitudeControlFinite._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFinite.__dict__ and type(IAgVAAttitudeControlFinite.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{827F3B46-D066-462B-A3DB-1DCD56A816BA}", IAgVAAttitudeControlFinite)
agcls.AgTypeNameMap["IAgVAAttitudeControlFinite"] = IAgVAAttitudeControlFinite
__all__.append("IAgVAAttitudeControlFinite")

class IAgVAAttitudeControlImpulsive(IAgVAAttitudeControl):
    """The attitude control of an impulsive maneuver."""
    _uuid = "{0BD5E890-FBD8-415E-9E29-38731985F366}"
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControl._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsive = agcom.GUID(IAgVAAttitudeControlImpulsive._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsive._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsive.__dict__ and type(IAgVAAttitudeControlImpulsive.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{0BD5E890-FBD8-415E-9E29-38731985F366}", IAgVAAttitudeControlImpulsive)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsive"] = IAgVAAttitudeControlImpulsive
__all__.append("IAgVAAttitudeControlImpulsive")

class IAgVAAttitudeControlOptimalFinite(IAgVAAttitudeControl):
    """The attitude control of a optimal finite maneuver"""
    _uuid = "{EF8743CB-4A4F-4B89-AB50-D76843E4D618}"
    _num_methods = 0
    _vtable_offset = IAgVAAttitudeControl._vtable_offset + IAgVAAttitudeControl._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlOptimalFinite._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlOptimalFinite from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControl._private_init(self, pUnk)
        IID_IAgVAAttitudeControlOptimalFinite = agcom.GUID(IAgVAAttitudeControlOptimalFinite._uuid)
        vtable_offset_local = IAgVAAttitudeControlOptimalFinite._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlOptimalFinite.__dict__ and type(IAgVAAttitudeControlOptimalFinite.__dict__[attrname]) == property:
            return IAgVAAttitudeControlOptimalFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControl.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{EF8743CB-4A4F-4B89-AB50-D76843E4D618}", IAgVAAttitudeControlOptimalFinite)
agcls.AgTypeNameMap["IAgVAAttitudeControlOptimalFinite"] = IAgVAAttitudeControlOptimalFinite
__all__.append("IAgVAAttitudeControlOptimalFinite")

class IAgVAManeuver(object):
    """Properties of an Impulsive Maneuver Segment."""
    _uuid = "{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttitudeControlType"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeControlType"] = _raise_uninitialized_error
        self.__dict__["_GetAttitudeControl"] = _raise_uninitialized_error
        self.__dict__["_GetPropulsionMethod"] = _raise_uninitialized_error
        self.__dict__["_SetPropulsionMethod"] = _raise_uninitialized_error
        self.__dict__["_GetPropulsionMethodValue"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuver._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuver from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuver = agcom.GUID(IAgVAManeuver._uuid)
        vtable_offset_local = IAgVAManeuver._vtable_offset - 1
        self.__dict__["_GetAttitudeControlType"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeControlType"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetAttitudeControl"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetPropulsionMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetPropulsionMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+5, agcom.LONG, agcom.BSTR)
        self.__dict__["_GetPropulsionMethodValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuver, vtable_offset_local+6, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuver.__dict__ and type(IAgVAManeuver.__dict__[attrname]) == property:
            return IAgVAManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuver.")
    
    @property
    def AttitudeControlType(self) -> "AgEVAAttitudeControl":
        """Determines the attitude parameters available for you to specify."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeControlType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAttitudeControlType(self, attitudeControlType:"AgEVAAttitudeControl") -> None:
        """Sets the attitude control type."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeControl, attitudeControlType) as arg_attitudeControlType:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeControlType"](arg_attitudeControlType.COM_val))

    @property
    def AttitudeControl(self) -> "IAgVAAttitudeControl":
        """The attitude control properties collection."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAAttitudeControl:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeControl"](byref(arg_ppVAAttitudeControl.COM_val)))
            return arg_ppVAAttitudeControl.python_val

    @property
    def PropulsionMethod(self) -> "AgEVAPropulsionMethod":
        """The propulsion type to be modeled."""
        with agmarshall.AgEnum_arg(AgEVAPropulsionMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsionMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetPropulsionMethod(self, propulsionMethod:"AgEVAPropulsionMethod", value:str) -> None:
        """Sets the propulsion type and associated engine/thruster set."""
        with agmarshall.AgEnum_arg(AgEVAPropulsionMethod, propulsionMethod) as arg_propulsionMethod, \
             agmarshall.BSTR_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetPropulsionMethod"](arg_propulsionMethod.COM_val, arg_value.COM_val))

    @property
    def PropulsionMethodValue(self) -> str:
        """The specific engine model or thruster set to be used for the maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropulsionMethodValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{C70B417E-D1C4-40E8-8CDC-67EDED0B56AE}", IAgVAManeuver)
agcls.AgTypeNameMap["IAgVAManeuver"] = IAgVAManeuver
__all__.append("IAgVAManeuver")

class IAgVADisplaySystem(object):
    """The launch coordinate system."""
    _uuid = "{90BFC47C-35B5-4169-9543-36C65DFABB6A}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADisplaySystem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADisplaySystem = agcom.GUID(IAgVADisplaySystem._uuid)
        vtable_offset_local = IAgVADisplaySystem._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystem.__dict__ and type(IAgVADisplaySystem.__dict__[attrname]) == property:
            return IAgVADisplaySystem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADisplaySystem.")
    

agcls.AgClassCatalog.add_catalog_entry("{90BFC47C-35B5-4169-9543-36C65DFABB6A}", IAgVADisplaySystem)
agcls.AgTypeNameMap["IAgVADisplaySystem"] = IAgVADisplaySystem
__all__.append("IAgVADisplaySystem")

class IAgVABurnout(object):
    """The burnout point reference frame."""
    _uuid = "{0BEFC7BA-14CF-422D-BD67-352572ABB55F}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnout._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnout from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABurnout = agcom.GUID(IAgVABurnout._uuid)
        vtable_offset_local = IAgVABurnout._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnout.__dict__ and type(IAgVABurnout.__dict__[attrname]) == property:
            return IAgVABurnout.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABurnout.")
    

agcls.AgClassCatalog.add_catalog_entry("{0BEFC7BA-14CF-422D-BD67-352572ABB55F}", IAgVABurnout)
agcls.AgTypeNameMap["IAgVABurnout"] = IAgVABurnout
__all__.append("IAgVABurnout")

class IAgVAScriptingSegment(object):
    """Object properties for scripting options."""
    _uuid = "{08B0F341-8A54-43B8-A0B9-50A462E70C71}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetComponentName"] = _raise_uninitialized_error
        self.__dict__["_SetComponentName"] = _raise_uninitialized_error
        self.__dict__["_GetAttribute"] = _raise_uninitialized_error
        self.__dict__["_SetAttribute"] = _raise_uninitialized_error
        self.__dict__["_GetUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUnit"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableAttributeValues"] = _raise_uninitialized_error
        self.__dict__["_GetReadOnlyProperty"] = _raise_uninitialized_error
        self.__dict__["_SetReadOnlyProperty"] = _raise_uninitialized_error
        self.__dict__["_GetObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableObjectNames"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingSegment = agcom.GUID(IAgVAScriptingSegment._uuid)
        vtable_offset_local = IAgVAScriptingSegment._vtable_offset - 1
        self.__dict__["_GetComponentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetComponentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetAttribute"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetAttribute"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetAvailableAttributeValues"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+7, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetReadOnlyProperty"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetReadOnlyProperty"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+11, agcom.BSTR)
        self.__dict__["_GetAvailableObjectNames"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegment, vtable_offset_local+12, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingSegment.__dict__ and type(IAgVAScriptingSegment.__dict__[attrname]) == property:
            return IAgVAScriptingSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingSegment.")
    
    @property
    def ComponentName(self) -> str:
        """The name of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComponentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComponentName.setter
    def ComponentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetComponentName"](arg_inVal.COM_val))

    @property
    def Attribute(self) -> str:
        """The name of the attribute."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttribute"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Attribute.setter
    def Attribute(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttribute"](arg_inVal.COM_val))

    @property
    def Unit(self) -> str:
        """The unit."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Unit.setter
    def Unit(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnit"](arg_inVal.COM_val))

    @property
    def AvailableAttributeValues(self) -> list:
        """Returns a list of available attribute values."""
        with agmarshall.SAFEARRAY_arg() as arg_ppNewVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableAttributeValues"](byref(arg_ppNewVal.COM_val)))
            return arg_ppNewVal.python_val

    @property
    def ReadOnlyProperty(self) -> bool:
        """True if it is a read-only property."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReadOnlyProperty"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReadOnlyProperty.setter
    def ReadOnlyProperty(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReadOnlyProperty"](arg_inVal.COM_val))

    @property
    def ObjectName(self) -> str:
        """The profile/segment that contains the attribute."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ObjectName.setter
    def ObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetObjectName"](arg_inVal.COM_val))

    @property
    def AvailableObjectNames(self) -> list:
        """Returns a list of available profile/segment names."""
        with agmarshall.SAFEARRAY_arg() as arg_ppNewVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableObjectNames"](byref(arg_ppNewVal.COM_val)))
            return arg_ppNewVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{08B0F341-8A54-43B8-A0B9-50A462E70C71}", IAgVAScriptingSegment)
agcls.AgTypeNameMap["IAgVAScriptingSegment"] = IAgVAScriptingSegment
__all__.append("IAgVAScriptingSegment")

class IAgVAScriptingSegmentCollection(object):
    """The list of object properties that the script can interact with."""
    _uuid = "{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}"
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingSegmentCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingSegmentCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingSegmentCollection = agcom.GUID(IAgVAScriptingSegmentCollection._uuid)
        vtable_offset_local = IAgVAScriptingSegmentCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+4, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+10, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+11, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingSegmentCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingSegmentCollection.__dict__ and type(IAgVAScriptingSegmentCollection.__dict__[attrname]) == property:
            return IAgVAScriptingSegmentCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingSegmentCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAScriptingSegment":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingSegment":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingSegment:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAScriptingSegment.COM_val)))
            return arg_ppVAScriptingSegment.python_val

    def Add(self, componentName:str) -> "IAgVAScriptingSegment":
        """Adds an object property to the collection."""
        with agmarshall.BSTR_arg(componentName) as arg_componentName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingSegment:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_componentName.COM_val, byref(arg_ppVAScriptingSegment.COM_val)))
            return arg_ppVAScriptingSegment.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a object property."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all object properties."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the object property into the clipboard and removes the object property from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAScriptingSegment":
        """Pastes the object property from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, objProperty:"IAgVAScriptingSegment") -> "IAgVAScriptingSegment":
        """Copies the object property and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(objProperty, IAgVAScriptingSegment) as arg_objProperty, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_objProperty.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAScriptingSegment":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingSegment:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAScriptingSegment.COM_val)))
            return arg_ppVAScriptingSegment.python_val

    def GetItemByName(self, name:str) -> "IAgVAScriptingSegment":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingSegment:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAScriptingSegment.COM_val)))
            return arg_ppVAScriptingSegment.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{07549510-B2B9-4AA0-A9AA-E2FDFBC9BBEE}", IAgVAScriptingSegmentCollection)
agcls.AgTypeNameMap["IAgVAScriptingSegmentCollection"] = IAgVAScriptingSegmentCollection
__all__.append("IAgVAScriptingSegmentCollection")

class IAgVAScriptingParameterEnumerationChoice(object):
    """Enumeration choice."""
    _uuid = "{DED30CDF-730F-4125-AEB8-6A668248B484}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetValue"] = _raise_uninitialized_error
        self.__dict__["_SetValue"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingParameterEnumerationChoice._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterEnumerationChoice from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingParameterEnumerationChoice = agcom.GUID(IAgVAScriptingParameterEnumerationChoice._uuid)
        vtable_offset_local = IAgVAScriptingParameterEnumerationChoice._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoice, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoice, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoice, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoice, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterEnumerationChoice.__dict__ and type(IAgVAScriptingParameterEnumerationChoice.__dict__[attrname]) == property:
            return IAgVAScriptingParameterEnumerationChoice.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterEnumerationChoice.")
    
    @property
    def Name(self) -> str:
        """Name of the enumeration"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_inVal.COM_val))

    @property
    def Value(self) -> int:
        """Integer value of the enumeration"""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Value.setter
    def Value(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetValue"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{DED30CDF-730F-4125-AEB8-6A668248B484}", IAgVAScriptingParameterEnumerationChoice)
agcls.AgTypeNameMap["IAgVAScriptingParameterEnumerationChoice"] = IAgVAScriptingParameterEnumerationChoice
__all__.append("IAgVAScriptingParameterEnumerationChoice")

class IAgVAScriptingParameterEnumerationChoiceCollection(object):
    """The list of enumeration choices available when parameter type is Enumeration."""
    _uuid = "{FF132A94-418D-41DB-8AA2-9DA77625A1A0}"
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingParameterEnumerationChoiceCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterEnumerationChoiceCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingParameterEnumerationChoiceCollection = agcom.GUID(IAgVAScriptingParameterEnumerationChoiceCollection._uuid)
        vtable_offset_local = IAgVAScriptingParameterEnumerationChoiceCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+8, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+10, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterEnumerationChoiceCollection, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterEnumerationChoiceCollection.__dict__ and type(IAgVAScriptingParameterEnumerationChoiceCollection.__dict__[attrname]) == property:
            return IAgVAScriptingParameterEnumerationChoiceCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterEnumerationChoiceCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAScriptingParameterEnumerationChoice":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingParameterEnumerationChoice":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppChoice:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppChoice.COM_val)))
            return arg_ppChoice.python_val

    def Add(self, choiceName:str) -> "IAgVAScriptingParameterEnumerationChoice":
        """Adds an enumeration choice to the collection."""
        with agmarshall.BSTR_arg(choiceName) as arg_choiceName, \
             agmarshall.AgInterface_out_arg() as arg_ppChoice:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_choiceName.COM_val, byref(arg_ppChoice.COM_val)))
            return arg_ppChoice.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes an enumeration choice."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the enumeration choice into the clipboard and removes the enumeration choice from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAScriptingParameterEnumerationChoice":
        """Pastes the enumeration choice from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, choice:"IAgVAScriptingParameterEnumerationChoice") -> "IAgVAScriptingParameterEnumerationChoice":
        """Copies the enumeration choice and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(choice, IAgVAScriptingParameterEnumerationChoice) as arg_choice, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_choice.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAScriptingParameterEnumerationChoice":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppChoice:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppChoice.COM_val)))
            return arg_ppChoice.python_val

    def GetItemByName(self, name:str) -> "IAgVAScriptingParameterEnumerationChoice":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppChoice:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppChoice.COM_val)))
            return arg_ppChoice.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{FF132A94-418D-41DB-8AA2-9DA77625A1A0}", IAgVAScriptingParameterEnumerationChoiceCollection)
agcls.AgTypeNameMap["IAgVAScriptingParameterEnumerationChoiceCollection"] = IAgVAScriptingParameterEnumerationChoiceCollection
__all__.append("IAgVAScriptingParameterEnumerationChoiceCollection")

class IAgVAScriptingParameter(object):
    """Parameter properties for scripting options."""
    _uuid = "{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetParamValue"] = _raise_uninitialized_error
        self.__dict__["_SetParamValue"] = _raise_uninitialized_error
        self.__dict__["_GetUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUnit"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        self.__dict__["_SetType"] = _raise_uninitialized_error
        self.__dict__["_GetInheritValue"] = _raise_uninitialized_error
        self.__dict__["_SetInheritValue"] = _raise_uninitialized_error
        self.__dict__["_GetUserComment"] = _raise_uninitialized_error
        self.__dict__["_SetUserComment"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_SetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetEnumerationChoices"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinValue"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinValue"] = _raise_uninitialized_error
        self.__dict__["_GetMinValue"] = _raise_uninitialized_error
        self.__dict__["_SetMinValue"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxValue"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxValue"] = _raise_uninitialized_error
        self.__dict__["_GetMaxValue"] = _raise_uninitialized_error
        self.__dict__["_SetMaxValue"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingParameter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingParameter = agcom.GUID(IAgVAScriptingParameter._uuid)
        vtable_offset_local = IAgVAScriptingParameter._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetParamValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetParamValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetType"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetInheritValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInheritValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetEnumerationChoices"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetUseMinValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetMinValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+18, POINTER(agcom.VARIANT))
        self.__dict__["_SetMinValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+19, agcom.VARIANT)
        self.__dict__["_GetUseMaxValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+21, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+22, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameter, vtable_offset_local+23, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameter.__dict__ and type(IAgVAScriptingParameter.__dict__[attrname]) == property:
            return IAgVAScriptingParameter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameter.")
    
    @property
    def Name(self) -> str:
        """The parameter name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_inVal.COM_val))

    @property
    def ParamValue(self) -> typing.Any:
        """The parameter value.  Set in Object Model unit preference for selected dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParamValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParamValue.setter
    def ParamValue(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetParamValue"](arg_inVal.COM_val))

    @property
    def Unit(self) -> str:
        """The parameter's unit that is used to represent ParamValue during the scripting tool script execution. ParamValue is set in Object Model unit preference for selected dimension and not this unit. As with other units configurable in the desktop environment for STK, this unit is separate (and may differ) from the Object Model unit preference."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Unit.setter
    def Unit(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnit"](arg_inVal.COM_val))

    @property
    def Type(self) -> "AgEVAScriptingParameterType":
        """The parameter's type."""
        with agmarshall.AgEnum_arg(AgEVAScriptingParameterType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Type.setter
    def Type(self, inVal:"AgEVAScriptingParameterType") -> None:
        with agmarshall.AgEnum_arg(AgEVAScriptingParameterType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetType"](arg_inVal.COM_val))

    @property
    def InheritValue(self) -> bool:
        """If true, parameter value will be inherited from previous profile's value."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVAl:
            agcls.evaluate_hresult(self.__dict__["_GetInheritValue"](byref(arg_pVAl.COM_val)))
            return arg_pVAl.python_val

    @InheritValue.setter
    def InheritValue(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInheritValue"](arg_inVal.COM_val))

    @property
    def UserComment(self) -> str:
        """The parameter's comment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserComment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserComment"](arg_inVal.COM_val))

    @property
    def Dimension(self) -> str:
        """The parameter's dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Dimension.setter
    def Dimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDimension"](arg_inVal.COM_val))

    @property
    def EnumerationChoices(self) -> "IAgVAScriptingParameterEnumerationChoiceCollection":
        """The collection of enumerations to use when parameter type is eVAScriptingParameterTypeEnumeration."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnumerationChoices"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UseMinValue(self) -> bool:
        """If true, a minimum value will be enforced for the parameter value"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinValue.setter
    def UseMinValue(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinValue"](arg_inVal.COM_val))

    @property
    def MinValue(self) -> typing.Any:
        """The minimum value permitted for the parameter value"""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinValue.setter
    def MinValue(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinValue"](arg_inVal.COM_val))

    @property
    def UseMaxValue(self) -> bool:
        """If true, a maximum value will be enforced for the parameter value"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxValue.setter
    def UseMaxValue(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxValue"](arg_inVal.COM_val))

    @property
    def MaxValue(self) -> typing.Any:
        """The maximum value permitted for the parameter value"""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxValue.setter
    def MaxValue(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxValue"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9E855CDD-3359-4D5D-AE7D-5C260E0EE4B3}", IAgVAScriptingParameter)
agcls.AgTypeNameMap["IAgVAScriptingParameter"] = IAgVAScriptingParameter
__all__.append("IAgVAScriptingParameter")

class IAgVAScriptingParameterCollection(object):
    """The list of parameters that the script can interact with."""
    _uuid = "{57FC26AA-550D-4408-844E-24F983C94671}"
    _num_methods = 12
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingParameterCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingParameterCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingParameterCollection = agcom.GUID(IAgVAScriptingParameterCollection._uuid)
        vtable_offset_local = IAgVAScriptingParameterCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+4, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+10, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+11, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingParameterCollection, vtable_offset_local+12, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingParameterCollection.__dict__ and type(IAgVAScriptingParameterCollection.__dict__[attrname]) == property:
            return IAgVAScriptingParameterCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingParameterCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAScriptingParameter":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingParameter":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingParameter:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAScriptingParameter.COM_val)))
            return arg_ppVAScriptingParameter.python_val

    def Add(self, parameterName:str) -> "IAgVAScriptingParameter":
        """Adds a parameter to the collection."""
        with agmarshall.BSTR_arg(parameterName) as arg_parameterName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingParameter:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_parameterName.COM_val, byref(arg_ppVAScriptingParameter.COM_val)))
            return arg_ppVAScriptingParameter.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a parameter."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all parameters."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the parameter into the clipboard and removes the parameter from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAScriptingParameter":
        """Pastes the parameter from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, parameter:"IAgVAScriptingParameter") -> "IAgVAScriptingParameter":
        """Copies the parameter and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(parameter, IAgVAScriptingParameter) as arg_parameter, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_parameter.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAScriptingParameter":
        """Allows you to retrieve an element in the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingParameter:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAScriptingParameter.COM_val)))
            return arg_ppVAScriptingParameter.python_val

    def GetItemByName(self, name:str) -> "IAgVAScriptingParameter":
        """Allows you to retrieve an element in the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingParameter:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAScriptingParameter.COM_val)))
            return arg_ppVAScriptingParameter.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{57FC26AA-550D-4408-844E-24F983C94671}", IAgVAScriptingParameterCollection)
agcls.AgTypeNameMap["IAgVAScriptingParameterCollection"] = IAgVAScriptingParameterCollection
__all__.append("IAgVAScriptingParameterCollection")

class IAgVAScriptingCalcObject(object):
    """Calc Object properties for scripting options."""
    _uuid = "{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetComponentName"] = _raise_uninitialized_error
        self.__dict__["_SetComponentName"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObject"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObject"] = _raise_uninitialized_error
        self.__dict__["_GetUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUnit"] = _raise_uninitialized_error
        self.__dict__["_CopyCalcObjectToClipboard"] = _raise_uninitialized_error
        self.__dict__["_PasteCalcObjectFromClipboard"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingCalcObject._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingCalcObject from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingCalcObject = agcom.GUID(IAgVAScriptingCalcObject._uuid)
        vtable_offset_local = IAgVAScriptingCalcObject._vtable_offset - 1
        self.__dict__["_GetComponentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetComponentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_SetCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_GetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_CopyCalcObjectToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+9, )
        self.__dict__["_PasteCalcObjectFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObject, vtable_offset_local+10, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingCalcObject.__dict__ and type(IAgVAScriptingCalcObject.__dict__[attrname]) == property:
            return IAgVAScriptingCalcObject.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingCalcObject.")
    
    @property
    def ComponentName(self) -> str:
        """The name of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComponentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ComponentName.setter
    def ComponentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetComponentName"](arg_inVal.COM_val))

    @property
    def CalcObjectName(self) -> str:
        """The name of the calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def CalcObject(self) -> "IAgComponentInfo":
        """The calculation object type."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @CalcObject.setter
    def CalcObject(self, inVal:"IAgComponentInfo") -> None:
        with agmarshall.AgInterface_in_arg(inVal, IAgComponentInfo) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObject"](arg_inVal.COM_val))

    @property
    def Unit(self) -> str:
        """The unit."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Unit.setter
    def Unit(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnit"](arg_inVal.COM_val))

    def CopyCalcObjectToClipboard(self) -> None:
        """Copies the wrapped calc object to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyCalcObjectToClipboard"]())

    def PasteCalcObjectFromClipboard(self) -> None:
        """Replaces the wrapped calc object with the instance in the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteCalcObjectFromClipboard"]())


agcls.AgClassCatalog.add_catalog_entry("{6DDE7375-1872-436C-B2BE-ADBF1881FFF0}", IAgVAScriptingCalcObject)
agcls.AgTypeNameMap["IAgVAScriptingCalcObject"] = IAgVAScriptingCalcObject
__all__.append("IAgVAScriptingCalcObject")

class IAgVAScriptingCalcObjectCollection(object):
    """The list of calc objects that the script can interact with."""
    _uuid = "{C7742744-0197-46E3-AE3F-E6F60357FACD}"
    _num_methods = 9
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingCalcObjectCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingCalcObjectCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingCalcObjectCollection = agcom.GUID(IAgVAScriptingCalcObjectCollection._uuid)
        vtable_offset_local = IAgVAScriptingCalcObjectCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+2, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+4, )
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingCalcObjectCollection, vtable_offset_local+9, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingCalcObjectCollection.__dict__ and type(IAgVAScriptingCalcObjectCollection.__dict__[attrname]) == property:
            return IAgVAScriptingCalcObjectCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingCalcObjectCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAScriptingCalcObject":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAScriptingCalcObject":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppCalcObjectWrapper:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppCalcObjectWrapper.COM_val)))
            return arg_ppCalcObjectWrapper.python_val

    def Add(self, componentName:str) -> "IAgVAScriptingCalcObject":
        """Adds a calculation object to the collection."""
        with agmarshall.BSTR_arg(componentName) as arg_componentName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAScriptingParameter:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_componentName.COM_val, byref(arg_ppVAScriptingParameter.COM_val)))
            return arg_ppVAScriptingParameter.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a calculation object."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all calculation objects."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the calc object into the clipboard and removes the calc object from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAScriptingCalcObject":
        """Pastes the calc object from the clipboard and inserts into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, calcObj:"IAgVAScriptingCalcObject") -> "IAgVAScriptingCalcObject":
        """Copies the calc object and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(calcObj, IAgVAScriptingCalcObject) as arg_calcObj, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_calcObj.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{C7742744-0197-46E3-AE3F-E6F60357FACD}", IAgVAScriptingCalcObjectCollection)
agcls.AgTypeNameMap["IAgVAScriptingCalcObjectCollection"] = IAgVAScriptingCalcObjectCollection
__all__.append("IAgVAScriptingCalcObjectCollection")

class IAgVAScriptingTool(object):
    """Properties for the Scripting Tool."""
    _uuid = "{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentProperties"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObjects"] = _raise_uninitialized_error
        self.__dict__["_GetParameters"] = _raise_uninitialized_error
        self.__dict__["_GetLanguageType"] = _raise_uninitialized_error
        self.__dict__["_SetLanguageType"] = _raise_uninitialized_error
        self.__dict__["_ScriptText"] = _raise_uninitialized_error
        self.__dict__["_CopyToClipboard"] = _raise_uninitialized_error
        self.__dict__["_PasteFromClipboard"] = _raise_uninitialized_error
        self.__dict__["_GetPreIterate"] = _raise_uninitialized_error
        self.__dict__["_SetPreIterate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAScriptingTool._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAScriptingTool from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAScriptingTool = agcom.GUID(IAgVAScriptingTool._uuid)
        vtable_offset_local = IAgVAScriptingTool._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetSegmentProperties"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetCalcObjects"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetLanguageType"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetLanguageType"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_ScriptText"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_CopyToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+9, )
        self.__dict__["_PasteFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+10, )
        self.__dict__["_GetPreIterate"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPreIterate"] = IAGFUNCTYPE(pUnk, IID_IAgVAScriptingTool, vtable_offset_local+12, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAScriptingTool.__dict__ and type(IAgVAScriptingTool.__dict__[attrname]) == property:
            return IAgVAScriptingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAScriptingTool.")
    
    @property
    def Enable(self) -> bool:
        """If true, the scripting tool is enabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_inVal.COM_val))

    @property
    def SegmentProperties(self) -> "IAgVAScriptingSegmentCollection":
        """Returns the collection of the segment properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentProperties"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CalcObjects(self) -> "IAgVAScriptingCalcObjectCollection":
        """Returns the collection of the calculation objects."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Parameters(self) -> "IAgVAScriptingParameterCollection":
        """Returns the collection of parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LanguageType(self) -> "AgEVALanguage":
        """The scripting language being used."""
        with agmarshall.AgEnum_arg(AgEVALanguage) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLanguageType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LanguageType.setter
    def LanguageType(self, inVal:"AgEVALanguage") -> None:
        with agmarshall.AgEnum_arg(AgEVALanguage, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLanguageType"](arg_inVal.COM_val))

    def ScriptText(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        with agmarshall.BSTR_arg(script) as arg_script:
            agcls.evaluate_hresult(self.__dict__["_ScriptText"](arg_script.COM_val))

    def CopyToClipboard(self) -> None:
        """Copies entire scripting tool to clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyToClipboard"]())

    def PasteFromClipboard(self) -> None:
        """Replaces entire scripting tool with scripting tool in clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteFromClipboard"]())

    @property
    def PreIterate(self) -> bool:
        """If true, the sequence will run once before executing the script."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPreIterate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PreIterate.setter
    def PreIterate(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPreIterate"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BA2389F3-C687-40B6-B4FC-F61F2BF80E6E}", IAgVAScriptingTool)
agcls.AgTypeNameMap["IAgVAScriptingTool"] = IAgVAScriptingTool
__all__.append("IAgVAScriptingTool")

class IAgVAElement(object):
    """The elements of the selected coordinate type."""
    _uuid = "{D1D2C328-052A-4C2A-BC2F-739B55556384}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElement._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElement from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAElement = agcom.GUID(IAgVAElement._uuid)
        vtable_offset_local = IAgVAElement._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElement.__dict__ and type(IAgVAElement.__dict__[attrname]) == property:
            return IAgVAElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAElement.")
    

agcls.AgClassCatalog.add_catalog_entry("{D1D2C328-052A-4C2A-BC2F-739B55556384}", IAgVAElement)
agcls.AgTypeNameMap["IAgVAElement"] = IAgVAElement
__all__.append("IAgVAElement")

class IAgVASpacecraftParameters(object):
    """Properties for spacecraft configuration."""
    _uuid = "{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDryMass"] = _raise_uninitialized_error
        self.__dict__["_SetDryMass"] = _raise_uninitialized_error
        self.__dict__["_GetCd"] = _raise_uninitialized_error
        self.__dict__["_SetCd"] = _raise_uninitialized_error
        self.__dict__["_GetDragArea"] = _raise_uninitialized_error
        self.__dict__["_SetDragArea"] = _raise_uninitialized_error
        self.__dict__["_GetCr"] = _raise_uninitialized_error
        self.__dict__["_SetCr"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_GetCk"] = _raise_uninitialized_error
        self.__dict__["_SetCk"] = _raise_uninitialized_error
        self.__dict__["_GetRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_SetRadiationPressureArea"] = _raise_uninitialized_error
        self.__dict__["_GetK1"] = _raise_uninitialized_error
        self.__dict__["_SetK1"] = _raise_uninitialized_error
        self.__dict__["_GetK2"] = _raise_uninitialized_error
        self.__dict__["_SetK2"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASpacecraftParameters._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASpacecraftParameters from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASpacecraftParameters = agcom.GUID(IAgVASpacecraftParameters._uuid)
        vtable_offset_local = IAgVASpacecraftParameters._vtable_offset - 1
        self.__dict__["_GetDryMass"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDryMass"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetCd"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCd"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetDragArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDragArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetCr"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCr"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetSolarRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetCk"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCk"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiationPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetK2"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK2"] = IAGFUNCTYPE(pUnk, IID_IAgVASpacecraftParameters, vtable_offset_local+18, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASpacecraftParameters.__dict__ and type(IAgVASpacecraftParameters.__dict__[attrname]) == property:
            return IAgVASpacecraftParameters.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASpacecraftParameters.")
    
    @property
    def DryMass(self) -> float:
        """The mass of the spacecraft exclusive of propellant. Uses Mass Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDryMass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DryMass.setter
    def DryMass(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDryMass"](arg_newVal.COM_val))

    @property
    def Cd(self) -> float:
        """The dimensionless drag coefficient associated with the drag area. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCd"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Cd.setter
    def Cd(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCd"](arg_newVal.COM_val))

    @property
    def DragArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of motion, used for atmospheric drag calculations. Uses SmallArea Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragArea.setter
    def DragArea(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragArea"](arg_newVal.COM_val))

    @property
    def Cr(self) -> float:
        """The reflectivity of the spacecraft used for solar radiation pressure calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Cr.setter
    def Cr(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCr"](arg_newVal.COM_val))

    @property
    def SolarRadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of solar radiation, used for solar radiation calculations. Uses SmallArea Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadiationPressureArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadiationPressureArea.setter
    def SolarRadiationPressureArea(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadiationPressureArea"](arg_newVal.COM_val))

    @property
    def Ck(self) -> float:
        """The reflectivity of the spacecraft used for central body radiation pressure (albedo / thermal pressure) calculations, where 2.0 is fully reflective and 1.0 is not reflective at all. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCk"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Ck.setter
    def Ck(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCk"](arg_newVal.COM_val))

    @property
    def RadiationPressureArea(self) -> float:
        """The cross-sectional area of the spacecraft assumed perpendicular to the direction of central body radiation, used for central body radiation (albedo / thermal pressure) calculations. Uses SmallArea Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiationPressureArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiationPressureArea.setter
    def RadiationPressureArea(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiationPressureArea"](arg_newVal.COM_val))

    @property
    def K1(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K1 (scale) value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K1.setter
    def K1(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetK1"](arg_newVal.COM_val))

    @property
    def K2(self) -> float:
        """If you are using a non-spherical SRP model, this field defines the model's GPS solar radiation pressure K2 (scale) value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K2.setter
    def K2(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetK2"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6642A93A-65F8-4D50-A3E8-51B17A9AE3CF}", IAgVASpacecraftParameters)
agcls.AgTypeNameMap["IAgVASpacecraftParameters"] = IAgVASpacecraftParameters
__all__.append("IAgVASpacecraftParameters")

class IAgVAFuelTank(object):
    """Properties for fuel tank configuration."""
    _uuid = "{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTankPressure"] = _raise_uninitialized_error
        self.__dict__["_SetTankPressure"] = _raise_uninitialized_error
        self.__dict__["_GetTankVolume"] = _raise_uninitialized_error
        self.__dict__["_SetTankVolume"] = _raise_uninitialized_error
        self.__dict__["_GetTankTemperature"] = _raise_uninitialized_error
        self.__dict__["_SetTankTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetFuelDensity"] = _raise_uninitialized_error
        self.__dict__["_SetFuelDensity"] = _raise_uninitialized_error
        self.__dict__["_GetFuelMass"] = _raise_uninitialized_error
        self.__dict__["_SetFuelMass"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumFuelMass"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumFuelMass"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAFuelTank._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAFuelTank from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAFuelTank = agcom.GUID(IAgVAFuelTank._uuid)
        vtable_offset_local = IAgVAFuelTank._vtable_offset - 1
        self.__dict__["_GetTankPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTankPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetTankVolume"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTankVolume"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetTankTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTankTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFuelDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMaximumFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaximumFuelMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAFuelTank, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAFuelTank.__dict__ and type(IAgVAFuelTank.__dict__[attrname]) == property:
            return IAgVAFuelTank.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAFuelTank.")
    
    @property
    def TankPressure(self) -> float:
        """The fuel tank pressure. Uses Pressure Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTankPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TankPressure.setter
    def TankPressure(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTankPressure"](arg_newVal.COM_val))

    @property
    def TankVolume(self) -> float:
        """The volume of the fuel tank. Uses SmallVolume Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTankVolume"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TankVolume.setter
    def TankVolume(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTankVolume"](arg_newVal.COM_val))

    @property
    def TankTemperature(self) -> float:
        """The temperature of the fuel tank. Uses Temperature Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTankTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TankTemperature.setter
    def TankTemperature(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTankTemperature"](arg_newVal.COM_val))

    @property
    def FuelDensity(self) -> float:
        """The density of the fuel. Uses SmallDensity Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelDensity.setter
    def FuelDensity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelDensity"](arg_newVal.COM_val))

    @property
    def FuelMass(self) -> float:
        """The mass of the spacecraft propellant. Uses Mass Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFuelMass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FuelMass.setter
    def FuelMass(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFuelMass"](arg_newVal.COM_val))

    @property
    def MaximumFuelMass(self) -> float:
        """The maximum fuel mass of the spacecraft; this parameter specifically applies to Finite Maneuver segments that are being executed in Backward Sequences. Uses Mass Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumFuelMass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaximumFuelMass.setter
    def MaximumFuelMass(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumFuelMass"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6CB64830-3EDB-4E0E-A55B-DAC26DCCCA47}", IAgVAFuelTank)
agcls.AgTypeNameMap["IAgVAFuelTank"] = IAgVAFuelTank
__all__.append("IAgVAFuelTank")

class IAgVAMCSSegmentProperties(object):
    """The segment properties."""
    _uuid = "{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDisplayCoordinateSystem"] = _raise_uninitialized_error
        self.__dict__["_SetDisplayCoordinateSystem"] = _raise_uninitialized_error
        self.__dict__["_GetColor"] = _raise_uninitialized_error
        self.__dict__["_SetColor"] = _raise_uninitialized_error
        self.__dict__["_GetUpdateAnimationTimeAfterRun"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateAnimationTimeAfterRun"] = _raise_uninitialized_error
        self.__dict__["_ApplyFinalStateToBPlanes"] = _raise_uninitialized_error
        self.__dict__["_GetBPlanes"] = _raise_uninitialized_error
        self.__dict__["_GetLastRunCode"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSSegmentProperties._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegmentProperties from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSSegmentProperties = agcom.GUID(IAgVAMCSSegmentProperties._uuid)
        vtable_offset_local = IAgVAMCSSegmentProperties._vtable_offset - 1
        self.__dict__["_GetDisplayCoordinateSystem"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetDisplayCoordinateSystem"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetColor"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+3, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetColor"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+4, agcom.OLE_COLOR)
        self.__dict__["_GetUpdateAnimationTimeAfterRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUpdateAnimationTimeAfterRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_ApplyFinalStateToBPlanes"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+7, )
        self.__dict__["_GetBPlanes"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetLastRunCode"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegmentProperties, vtable_offset_local+9, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegmentProperties.__dict__ and type(IAgVAMCSSegmentProperties.__dict__[attrname]) == property:
            return IAgVAMCSSegmentProperties.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegmentProperties.")
    
    @property
    def DisplayCoordinateSystem(self) -> str:
        """The coordinate system that will be used in the segment summary report."""
        with agmarshall.BSTR_arg() as arg_pDisplayCoordinateSystem:
            agcls.evaluate_hresult(self.__dict__["_GetDisplayCoordinateSystem"](byref(arg_pDisplayCoordinateSystem.COM_val)))
            return arg_pDisplayCoordinateSystem.python_val

    @DisplayCoordinateSystem.setter
    def DisplayCoordinateSystem(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisplayCoordinateSystem"](arg_inVal.COM_val))

    @property
    def Color(self) -> agcolor.Color:
        """The display color of the segment."""
        with agmarshall.OLE_COLOR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetColor"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Color.setter
    def Color(self, inVal:agcolor.Color) -> None:
        with agmarshall.OLE_COLOR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetColor"](arg_inVal.COM_val))

    @property
    def UpdateAnimationTimeAfterRun(self) -> bool:
        """If true, Astrogator will set the animation time to the final epoch of the segment when the segment finishes running."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateAnimationTimeAfterRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpdateAnimationTimeAfterRun.setter
    def UpdateAnimationTimeAfterRun(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateAnimationTimeAfterRun"](arg_inVal.COM_val))

    def ApplyFinalStateToBPlanes(self) -> None:
        """Applies the last calculated final state of the segment to all selected B-Planes."""
        agcls.evaluate_hresult(self.__dict__["_ApplyFinalStateToBPlanes"]())

    @property
    def BPlanes(self) -> "IAgVABPlaneCollection":
        """The B-Plane or B-Planes to which the epoch, position, and velocity of the segment's final state will be applied, according to the B-Plane's definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppVABPlaneCollection:
            agcls.evaluate_hresult(self.__dict__["_GetBPlanes"](byref(arg_ppVABPlaneCollection.COM_val)))
            return arg_ppVABPlaneCollection.python_val

    @property
    def LastRunCode(self) -> "AgEVARunCode":
        """The last run code returned by the segment."""
        with agmarshall.AgEnum_arg(AgEVARunCode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLastRunCode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{B8C99C10-CB59-4C72-A97C-CBF561C41D4D}", IAgVAMCSSegmentProperties)
agcls.AgTypeNameMap["IAgVAMCSSegmentProperties"] = IAgVAMCSSegmentProperties
__all__.append("IAgVAMCSSegmentProperties")

class IAgVAMCSEnd(object):
    """Properties for an End segment."""
    _uuid = "{7AE91388-7900-4AA0-BF30-546957ACFE94}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSEnd._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSEnd from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSEnd = agcom.GUID(IAgVAMCSEnd._uuid)
        vtable_offset_local = IAgVAMCSEnd._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSEnd.__dict__ and type(IAgVAMCSEnd.__dict__[attrname]) == property:
            return IAgVAMCSEnd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSEnd.")
    

agcls.AgClassCatalog.add_catalog_entry("{7AE91388-7900-4AA0-BF30-546957ACFE94}", IAgVAMCSEnd)
agcls.AgTypeNameMap["IAgVAMCSEnd"] = IAgVAMCSEnd
__all__.append("IAgVAMCSEnd")

class IAgVAMCSInitialState(object):
    """Properties for an Initial State segment."""
    _uuid = "{D7458E20-A5E4-45C8-81A1-38A29F4131FD}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetSpacecraftParameters"] = _raise_uninitialized_error
        self.__dict__["_GetFuelTank"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetElement"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetUserVariables"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSInitialState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSInitialState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSInitialState = agcom.GUID(IAgVAMCSInitialState._uuid)
        vtable_offset_local = IAgVAMCSInitialState._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOrbitEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetOrbitEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetSpacecraftParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelTank"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetElement"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+12, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUserVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSInitialState, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSInitialState.__dict__ and type(IAgVAMCSInitialState.__dict__[attrname]) == property:
            return IAgVAMCSInitialState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSInitialState.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_newVal.COM_val))

    @property
    def OrbitEpoch(self) -> typing.Any:
        """The orbit epoch. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitEpoch.setter
    def OrbitEpoch(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitEpoch"](arg_newVal.COM_val))

    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """The spacecraft  parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppSpacecraftParameters:
            agcls.evaluate_hresult(self.__dict__["_GetSpacecraftParameters"](byref(arg_ppSpacecraftParameters.COM_val)))
            return arg_ppSpacecraftParameters.python_val

    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The fuel tank parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAFuelTank:
            agcls.evaluate_hresult(self.__dict__["_GetFuelTank"](byref(arg_ppVAFuelTank.COM_val)))
            return arg_ppVAFuelTank.python_val

    @property
    def ElementType(self) -> "AgEVAElementType":
        """The coordinate type."""
        with agmarshall.AgEnum_arg(AgEVAElementType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetElementType(self, elementType:"AgEVAElementType") -> None:
        """Selects an coordinate type."""
        with agmarshall.AgEnum_arg(AgEVAElementType, elementType) as arg_elementType:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_elementType.COM_val))

    @property
    def Element(self) -> "IAgVAElement":
        """The elements of the selected coordinate type."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAElement:
            agcls.evaluate_hresult(self.__dict__["_GetElement"](byref(arg_ppVAElement.COM_val)))
            return arg_ppVAElement.python_val

    def EnableControlParameter(self, param:"AgEVAControlInitState") -> None:
        """Enables a control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlInitState, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlInitState") -> None:
        """Disables a control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlInitState, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlInitState") -> bool:
        """Sees if a control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlInitState, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the initial state segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVariables"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{D7458E20-A5E4-45C8-81A1-38A29F4131FD}", IAgVAMCSInitialState)
agcls.AgTypeNameMap["IAgVAMCSInitialState"] = IAgVAMCSInitialState
__all__.append("IAgVAMCSInitialState")

class IAgVAMCSSegment(object):
    """General properties for segments."""
    _uuid = "{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetType"] = _raise_uninitialized_error
        self.__dict__["_GetProperties"] = _raise_uninitialized_error
        self.__dict__["_GetInitialState"] = _raise_uninitialized_error
        self.__dict__["_GetFinalState"] = _raise_uninitialized_error
        self.__dict__["_GetResultValue"] = _raise_uninitialized_error
        self.__dict__["_Run"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetExecSummary"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSSegment = agcom.GUID(IAgVAMCSSegment._uuid)
        vtable_offset_local = IAgVAMCSSegment._vtable_offset - 1
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetProperties"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetInitialState"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetFinalState"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetResultValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+5, agcom.BSTR, POINTER(agcom.VARIANT))
        self.__dict__["_Run"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetExecSummary"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSegment, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSegment.__dict__ and type(IAgVAMCSSegment.__dict__[attrname]) == property:
            return IAgVAMCSSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSegment.")
    
    @property
    def Type(self) -> "AgEVASegmentType":
        """Returns the type of segment."""
        with agmarshall.AgEnum_arg(AgEVASegmentType) as arg_pSegmentType:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pSegmentType.COM_val)))
            return arg_pSegmentType.python_val

    @property
    def Properties(self) -> "IAgVAMCSSegmentProperties":
        """Returns the properties of the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegmentProperties:
            agcls.evaluate_hresult(self.__dict__["_GetProperties"](byref(arg_ppVAMCSSegmentProperties.COM_val)))
            return arg_ppVAMCSSegmentProperties.python_val

    @property
    def InitialState(self) -> "IAgVAState":
        """The initial state of the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialState"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def FinalState(self) -> "IAgVAState":
        """The final state of the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalState"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetResultValue(self, resultName:str) -> typing.Any:
        """Returns a result value."""
        with agmarshall.BSTR_arg(resultName) as arg_resultName, \
             agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetResultValue"](arg_resultName.COM_val, byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    def Run(self) -> "IAgVAState":
        """Runs the segment in individual segment mode.  See IAgVADriverMCS."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Run"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Results(self) -> "IAgVACalcObjectCollection":
        """The results of the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppVACalcObjectCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVACalcObjectCollection.COM_val)))
            return arg_ppVACalcObjectCollection.python_val

    @property
    def ExecSummary(self) -> "IAgDrResult":
        """The segment summary report."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetExecSummary"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{46F093C1-5138-4A6F-A79C-7F4DB8E7BCB4}", IAgVAMCSSegment)
agcls.AgTypeNameMap["IAgVAMCSSegment"] = IAgVAMCSSegment
__all__.append("IAgVAMCSSegment")

class IAgVAMCSOptions(object):
    """Properties for the MCS Options."""
    _uuid = "{81715712-591E-4553-9DC7-A1266F82E7D9}"
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDrawTrajectoryIn2D"] = _raise_uninitialized_error
        self.__dict__["_SetDrawTrajectoryIn2D"] = _raise_uninitialized_error
        self.__dict__["_GetDrawTrajectoryIn3D"] = _raise_uninitialized_error
        self.__dict__["_SetDrawTrajectoryIn3D"] = _raise_uninitialized_error
        self.__dict__["_GetUpdateAnimationTimeForAllObjects"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateAnimationTimeForAllObjects"] = _raise_uninitialized_error
        self.__dict__["_GetClearDWCGraphicsBeforeEachRun"] = _raise_uninitialized_error
        self.__dict__["_SetClearDWCGraphicsBeforeEachRun"] = _raise_uninitialized_error
        self.__dict__["_GetClearAdditionalBPlanePoints"] = _raise_uninitialized_error
        self.__dict__["_SetClearAdditionalBPlanePoints"] = _raise_uninitialized_error
        self.__dict__["_GetPropagateOnApply"] = _raise_uninitialized_error
        self.__dict__["_SetPropagateOnApply"] = _raise_uninitialized_error
        self.__dict__["_GetEnableTrajectorySegmentColors"] = _raise_uninitialized_error
        self.__dict__["_SetEnableTrajectorySegmentColors"] = _raise_uninitialized_error
        self.__dict__["_GetSaveNumbersInRawFormat"] = _raise_uninitialized_error
        self.__dict__["_SetSaveNumbersInRawFormat"] = _raise_uninitialized_error
        self.__dict__["_GetStoppingConditionTimeTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetStoppingConditionTimeTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetEnableSegmentControls"] = _raise_uninitialized_error
        self.__dict__["_SetEnableSegmentControls"] = _raise_uninitialized_error
        self.__dict__["_GetEnableSegmentResults"] = _raise_uninitialized_error
        self.__dict__["_SetEnableSegmentResults"] = _raise_uninitialized_error
        self.__dict__["_GetEnableLogging"] = _raise_uninitialized_error
        self.__dict__["_SetEnableLogging"] = _raise_uninitialized_error
        self.__dict__["_GetGraphicsUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetGraphicsUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetPromoteControls"] = _raise_uninitialized_error
        self.__dict__["_SetPromoteControls"] = _raise_uninitialized_error
        self.__dict__["_GetUseNominalSettings"] = _raise_uninitialized_error
        self.__dict__["_SetUseNominalSettings"] = _raise_uninitialized_error
        self.__dict__["_GetMinEphemStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinEphemStep"] = _raise_uninitialized_error
        self.__dict__["_GetGenerateEphemeris"] = _raise_uninitialized_error
        self.__dict__["_SetGenerateEphemeris"] = _raise_uninitialized_error
        self.__dict__["_GetUserVariables"] = _raise_uninitialized_error
        self.__dict__["_GetSmartRunMode"] = _raise_uninitialized_error
        self.__dict__["_SetSmartRunMode"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSOptions._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSOptions from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSOptions = agcom.GUID(IAgVAMCSOptions._uuid)
        vtable_offset_local = IAgVAMCSOptions._vtable_offset - 1
        self.__dict__["_GetDrawTrajectoryIn2D"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDrawTrajectoryIn2D"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetDrawTrajectoryIn3D"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDrawTrajectoryIn3D"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUpdateAnimationTimeForAllObjects"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUpdateAnimationTimeForAllObjects"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetClearDWCGraphicsBeforeEachRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClearDWCGraphicsBeforeEachRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetClearAdditionalBPlanePoints"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClearAdditionalBPlanePoints"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetPropagateOnApply"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPropagateOnApply"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableTrajectorySegmentColors"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableTrajectorySegmentColors"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetSaveNumbersInRawFormat"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSaveNumbersInRawFormat"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+16, agcom.VARIANT_BOOL)
        self.__dict__["_GetStoppingConditionTimeTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStoppingConditionTimeTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetEnableSegmentControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableSegmentControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableSegmentResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableSegmentResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+22, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableLogging"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+23, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableLogging"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+24, agcom.VARIANT_BOOL)
        self.__dict__["_GetGraphicsUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGraphicsUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetPromoteControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetPromoteControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseNominalSettings"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseNominalSettings"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+30, agcom.VARIANT_BOOL)
        self.__dict__["_GetMinEphemStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinEphemStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetGenerateEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+33, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetGenerateEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+34, agcom.VARIANT_BOOL)
        self.__dict__["_GetUserVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+35, POINTER(agcom.PVOID))
        self.__dict__["_GetSmartRunMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+36, POINTER(agcom.LONG))
        self.__dict__["_SetSmartRunMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSOptions, vtable_offset_local+37, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSOptions.__dict__ and type(IAgVAMCSOptions.__dict__[attrname]) == property:
            return IAgVAMCSOptions.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSOptions.")
    
    @property
    def DrawTrajectoryIn2D(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 2D Graphics windows as the ephemeris is calculated during the current run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDrawTrajectoryIn2D"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DrawTrajectoryIn2D.setter
    def DrawTrajectoryIn2D(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDrawTrajectoryIn2D"](arg_newVal.COM_val))

    @property
    def DrawTrajectoryIn3D(self) -> bool:
        """If true, Astrogator will draw the trajectory in the 3D Graphics windows as the ephemeris is calculated during the current run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDrawTrajectoryIn3D"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DrawTrajectoryIn3D.setter
    def DrawTrajectoryIn3D(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDrawTrajectoryIn3D"](arg_newVal.COM_val))

    @property
    def UpdateAnimationTimeForAllObjects(self) -> bool:
        """If true, all other objects will be animated so that they appear at the proper position for the time being computed as the trajectory is calculated."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateAnimationTimeForAllObjects"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpdateAnimationTimeForAllObjects.setter
    def UpdateAnimationTimeForAllObjects(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateAnimationTimeForAllObjects"](arg_newVal.COM_val))

    @property
    def ClearDWCGraphicsBeforeEachRun(self) -> bool:
        """If true, Astrogator will automatically clear all target iteration graphics of the previous run - in all graphics windows - before the current run draws new calculations."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClearDWCGraphicsBeforeEachRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClearDWCGraphicsBeforeEachRun.setter
    def ClearDWCGraphicsBeforeEachRun(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClearDWCGraphicsBeforeEachRun"](arg_newVal.COM_val))

    @property
    def ClearAdditionalBPlanePoints(self) -> bool:
        """If true, Astrogator will clear all additional B-Plane points from any previous run - in all graphics windows - before the current run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClearAdditionalBPlanePoints"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClearAdditionalBPlanePoints.setter
    def ClearAdditionalBPlanePoints(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClearAdditionalBPlanePoints"](arg_newVal.COM_val))

    @property
    def PropagateOnApply(self) -> bool:
        """If true, Astrogator will propagate trajectories whenever you click OK or Apply on the Orbit page. If you want to close the Properties Browser for the satellite without running the MCS, make certain this option is disabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropagateOnApply"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropagateOnApply.setter
    def PropagateOnApply(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropagateOnApply"](arg_newVal.COM_val))

    @property
    def EnableTrajectorySegmentColors(self) -> bool:
        """If true, trajectory segments are displayed in the 2D Graphics window in the colors selected for the respective segments; otherwise the color of the trajectory is defined by the 2D Graphics Attributes page."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableTrajectorySegmentColors"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableTrajectorySegmentColors.setter
    def EnableTrajectorySegmentColors(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableTrajectorySegmentColors"](arg_newVal.COM_val))

    @property
    def SaveNumbersInRawFormat(self) -> bool:
        """If true, Astrogator will store satellite information in binary format - to preserve the maximum amount of precision."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSaveNumbersInRawFormat"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SaveNumbersInRawFormat.setter
    def SaveNumbersInRawFormat(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSaveNumbersInRawFormat"](arg_newVal.COM_val))

    @property
    def StoppingConditionTimeTolerance(self) -> float:
        """The time tolerance, which will be applied with respect to desired trip values throughout the MCS. If this value is set to zero, time tolerance will not be applied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStoppingConditionTimeTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StoppingConditionTimeTolerance.setter
    def StoppingConditionTimeTolerance(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStoppingConditionTimeTolerance"](arg_newVal.COM_val))

    @property
    def EnableSegmentControls(self) -> bool:
        """If true, Astrogator will automatically add independent variables to differential correctors."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableSegmentControls"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableSegmentControls.setter
    def EnableSegmentControls(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableSegmentControls"](arg_newVal.COM_val))

    @property
    def EnableSegmentResults(self) -> bool:
        """If true, Astrogator will automatically add dependent variables to differential correctors."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableSegmentResults"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableSegmentResults.setter
    def EnableSegmentResults(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableSegmentResults"](arg_newVal.COM_val))

    @property
    def EnableLogging(self) -> bool:
        """If true, target sequences can be set to produce 'run history' log files for differential corrector profiles. By default, a target sequence does not produce a log file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableLogging"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableLogging.setter
    def EnableLogging(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableLogging"](arg_newVal.COM_val))

    @property
    def GraphicsUpdateRate(self) -> float:
        """The rate (between 0 and 1) at which to update graphics. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGraphicsUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GraphicsUpdateRate.setter
    def GraphicsUpdateRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGraphicsUpdateRate"](arg_newVal.COM_val))

    @property
    def PromoteControls(self) -> bool:
        """If true, a target sequence will be able to affect controls and results within a nested target sequence in addition to its own."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPromoteControls"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PromoteControls.setter
    def PromoteControls(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPromoteControls"](arg_inVal.COM_val))

    @property
    def UseNominalSettings(self) -> bool:
        """If true, components or segments that are modified by a target sequence will be restored to their nominal values as soon as the target sequence completes its run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseNominalSettings"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseNominalSettings.setter
    def UseNominalSettings(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseNominalSettings"](arg_inVal.COM_val))

    @property
    def MinEphemStep(self) -> float:
        """The minimum step size for saving ephemeris. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinEphemStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinEphemStep.setter
    def MinEphemStep(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinEphemStep"](arg_newVal.COM_val))

    @property
    def GenerateEphemeris(self) -> bool:
        """If true, Astrogator will generate ephemeris."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGenerateEphemeris"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GenerateEphemeris.setter
    def GenerateEphemeris(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGenerateEphemeris"](arg_newVal.COM_val))

    @property
    def UserVariables(self) -> "IAgVAUserVariableDefinitionCollection":
        """Interface used to add/remove user variables."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVariables"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def SmartRunMode(self) -> "AgEVASmartRunMode":
        """Controls whether the run will attempt to only run changed segments."""
        with agmarshall.AgEnum_arg(AgEVASmartRunMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSmartRunMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SmartRunMode.setter
    def SmartRunMode(self, inVal:"AgEVASmartRunMode") -> None:
        """Controls whether the run will attempt to only run changed segments."""
        with agmarshall.AgEnum_arg(AgEVASmartRunMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSmartRunMode"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{81715712-591E-4553-9DC7-A1266F82E7D9}", IAgVAMCSOptions)
agcls.AgTypeNameMap["IAgVAMCSOptions"] = IAgVAMCSOptions
__all__.append("IAgVAMCSOptions")

class IAgVADriverMCS(object):
    """Properties for the Mission Control Sequence."""
    _uuid = "{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMainSequence"] = _raise_uninitialized_error
        self.__dict__["_GetOptions"] = _raise_uninitialized_error
        self.__dict__["_GetAutoSequence"] = _raise_uninitialized_error
        self.__dict__["_RunMCS"] = _raise_uninitialized_error
        self.__dict__["_BeginRun"] = _raise_uninitialized_error
        self.__dict__["_EndRun"] = _raise_uninitialized_error
        self.__dict__["_ClearDWCGraphics"] = _raise_uninitialized_error
        self.__dict__["_ResetAllProfiles"] = _raise_uninitialized_error
        self.__dict__["_ApplyAllProfileChanges"] = _raise_uninitialized_error
        self.__dict__["_AppendRun"] = _raise_uninitialized_error
        self.__dict__["_AppendRunFromTime"] = _raise_uninitialized_error
        self.__dict__["_AppendRunFromState"] = _raise_uninitialized_error
        self.__dict__["_RunMCS2"] = _raise_uninitialized_error
        self.__dict__["_GetCalculationGraphs"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADriverMCS._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADriverMCS from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADriverMCS = agcom.GUID(IAgVADriverMCS._uuid)
        vtable_offset_local = IAgVADriverMCS._vtable_offset - 1
        self.__dict__["_GetMainSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetOptions"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetAutoSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_RunMCS"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+4, )
        self.__dict__["_BeginRun"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+5, )
        self.__dict__["_EndRun"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+6, )
        self.__dict__["_ClearDWCGraphics"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+7, )
        self.__dict__["_ResetAllProfiles"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+8, )
        self.__dict__["_ApplyAllProfileChanges"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+9, )
        self.__dict__["_AppendRun"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+10, )
        self.__dict__["_AppendRunFromTime"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+11, agcom.VARIANT, agcom.LONG)
        self.__dict__["_AppendRunFromState"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+12, agcom.PVOID, agcom.LONG)
        self.__dict__["_RunMCS2"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_GetCalculationGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVADriverMCS, vtable_offset_local+14, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADriverMCS.__dict__ and type(IAgVADriverMCS.__dict__[attrname]) == property:
            return IAgVADriverMCS.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADriverMCS.")
    
    @property
    def MainSequence(self) -> "IAgVAMCSSegmentCollection":
        """The Mission Control Sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegmentCollection:
            agcls.evaluate_hresult(self.__dict__["_GetMainSequence"](byref(arg_ppVAMCSSegmentCollection.COM_val)))
            return arg_ppVAMCSSegmentCollection.python_val

    @property
    def Options(self) -> "IAgVAMCSOptions":
        """The Mission Control Sequence options."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSOptions:
            agcls.evaluate_hresult(self.__dict__["_GetOptions"](byref(arg_ppVAMCSOptions.COM_val)))
            return arg_ppVAMCSOptions.python_val

    @property
    def AutoSequence(self) -> "IAgVAAutomaticSequenceCollection":
        """The Automatic Sequences."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAAutomaticSequenceCollection:
            agcls.evaluate_hresult(self.__dict__["_GetAutoSequence"](byref(arg_ppVAAutomaticSequenceCollection.COM_val)))
            return arg_ppVAAutomaticSequenceCollection.python_val

    def RunMCS(self) -> None:
        """Runs the current MCS."""
        agcls.evaluate_hresult(self.__dict__["_RunMCS"]())

    def BeginRun(self) -> None:
        """Begins an individual segment mode run."""
        agcls.evaluate_hresult(self.__dict__["_BeginRun"]())

    def EndRun(self) -> None:
        """Ends an individual segment mode run."""
        agcls.evaluate_hresult(self.__dict__["_EndRun"]())

    def ClearDWCGraphics(self) -> None:
        """Clears the draw while calculating graphics"""
        agcls.evaluate_hresult(self.__dict__["_ClearDWCGraphics"]())

    def ResetAllProfiles(self) -> None:
        """Resets all active profiles in all target sequences."""
        agcls.evaluate_hresult(self.__dict__["_ResetAllProfiles"]())

    def ApplyAllProfileChanges(self) -> None:
        """Applies all active profile changes in all target sequences."""
        agcls.evaluate_hresult(self.__dict__["_ApplyAllProfileChanges"]())

    def AppendRun(self) -> None:
        """Append the existing ephemeris with another individual segment mode run"""
        agcls.evaluate_hresult(self.__dict__["_AppendRun"]())

    def AppendRunFromTime(self, epoch:typing.Any, clearEphemerisDirection:"AgEVAClearEphemerisDirection") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified time. Ephemeris is cleared from time based on clear direction."""
        with agmarshall.VARIANT_arg(epoch) as arg_epoch, \
             agmarshall.AgEnum_arg(AgEVAClearEphemerisDirection, clearEphemerisDirection) as arg_clearEphemerisDirection:
            agcls.evaluate_hresult(self.__dict__["_AppendRunFromTime"](arg_epoch.COM_val, arg_clearEphemerisDirection.COM_val))

    def AppendRunFromState(self, appendState:"IAgVAState", clearEphemerisDirection:"AgEVAClearEphemerisDirection") -> None:
        """Append the existing ephemeris with another individual segment mode run, starting at a specified state. Ephemeris is cleared from time based on clear direction."""
        with agmarshall.AgInterface_in_arg(appendState, IAgVAState) as arg_appendState, \
             agmarshall.AgEnum_arg(AgEVAClearEphemerisDirection, clearEphemerisDirection) as arg_clearEphemerisDirection:
            agcls.evaluate_hresult(self.__dict__["_AppendRunFromState"](arg_appendState.COM_val, arg_clearEphemerisDirection.COM_val))

    def RunMCS2(self) -> "AgEVARunCode":
        """Runs the current MCS and returns an error code."""
        with agmarshall.AgEnum_arg(AgEVARunCode) as arg_pRunCode:
            agcls.evaluate_hresult(self.__dict__["_RunMCS2"](byref(arg_pRunCode.COM_val)))
            return arg_pRunCode.python_val

    @property
    def CalculationGraphs(self) -> "IAgVACalculationGraphCollection":
        """The calculation graphs."""
        with agmarshall.AgInterface_out_arg() as arg_ppVACalculationGraphCollection:
            agcls.evaluate_hresult(self.__dict__["_GetCalculationGraphs"](byref(arg_ppVACalculationGraphCollection.COM_val)))
            return arg_ppVACalculationGraphCollection.python_val


agcls.AgClassCatalog.add_catalog_entry("{109E17B9-8E27-4B6B-A8BE-33DFF19A2C89}", IAgVADriverMCS)
agcls.AgTypeNameMap["IAgVADriverMCS"] = IAgVADriverMCS
__all__.append("IAgVADriverMCS")

class IAgVAElementCartesian(IAgVAElement):
    """Properties for Cartesian elements."""
    _uuid = "{63C45864-E165-498E-A88E-8104FABF50B9}"
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetX"] = _raise_uninitialized_error
        self.__dict__["_SetX"] = _raise_uninitialized_error
        self.__dict__["_GetY"] = _raise_uninitialized_error
        self.__dict__["_SetY"] = _raise_uninitialized_error
        self.__dict__["_GetZ"] = _raise_uninitialized_error
        self.__dict__["_SetZ"] = _raise_uninitialized_error
        self.__dict__["_GetVx"] = _raise_uninitialized_error
        self.__dict__["_SetVx"] = _raise_uninitialized_error
        self.__dict__["_GetVy"] = _raise_uninitialized_error
        self.__dict__["_SetVy"] = _raise_uninitialized_error
        self.__dict__["_GetVz"] = _raise_uninitialized_error
        self.__dict__["_SetVz"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementCartesian._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementCartesian from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementCartesian = agcom.GUID(IAgVAElementCartesian._uuid)
        vtable_offset_local = IAgVAElementCartesian._vtable_offset - 1
        self.__dict__["_GetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetVx"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVx"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetVy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetVz"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVz"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementCartesian, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementCartesian.__dict__ and type(IAgVAElementCartesian.__dict__[attrname]) == property:
            return IAgVAElementCartesian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def X(self) -> float:
        """X position component. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @X.setter
    def X(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetX"](arg_newVal.COM_val))

    @property
    def Y(self) -> float:
        """Y position component. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y.setter
    def Y(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetY"](arg_newVal.COM_val))

    @property
    def Z(self) -> float:
        """Z position component. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Z.setter
    def Z(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetZ"](arg_newVal.COM_val))

    @property
    def Vx(self) -> float:
        """Vx velocity component. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVx"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vx.setter
    def Vx(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVx"](arg_newVal.COM_val))

    @property
    def Vy(self) -> float:
        """Vy velocity component. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vy.setter
    def Vy(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVy"](arg_newVal.COM_val))

    @property
    def Vz(self) -> float:
        """Vz velocity component. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVz"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vz.setter
    def Vz(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVz"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{63C45864-E165-498E-A88E-8104FABF50B9}", IAgVAElementCartesian)
agcls.AgTypeNameMap["IAgVAElementCartesian"] = IAgVAElementCartesian
__all__.append("IAgVAElementCartesian")

class IAgVAElementKeplerian(IAgVAElement):
    """Properties for Keplerian elements"""
    _uuid = "{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}"
    _num_methods = 46
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_SetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_GetInclination"] = _raise_uninitialized_error
        self.__dict__["_SetInclination"] = _raise_uninitialized_error
        self.__dict__["_GetRAAN"] = _raise_uninitialized_error
        self.__dict__["_SetRAAN"] = _raise_uninitialized_error
        self.__dict__["_GetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetApoapsisAltitudeSize"] = _raise_uninitialized_error
        self.__dict__["_SetApoapsisAltitudeSize"] = _raise_uninitialized_error
        self.__dict__["_GetApoapsisRadiusSize"] = _raise_uninitialized_error
        self.__dict__["_SetApoapsisRadiusSize"] = _raise_uninitialized_error
        self.__dict__["_GetMeanMotion"] = _raise_uninitialized_error
        self.__dict__["_SetMeanMotion"] = _raise_uninitialized_error
        self.__dict__["_GetPeriapsisAltitudeSize"] = _raise_uninitialized_error
        self.__dict__["_SetPeriapsisAltitudeSize"] = _raise_uninitialized_error
        self.__dict__["_GetPeriapsisRadiusSize"] = _raise_uninitialized_error
        self.__dict__["_SetPeriapsisRadiusSize"] = _raise_uninitialized_error
        self.__dict__["_GetPeriod"] = _raise_uninitialized_error
        self.__dict__["_SetPeriod"] = _raise_uninitialized_error
        self.__dict__["_GetLAN"] = _raise_uninitialized_error
        self.__dict__["_SetLAN"] = _raise_uninitialized_error
        self.__dict__["_GetArgOfLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetArgOfLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetEccentricAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetEccentricAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetMeanAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetMeanAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetTimePastAscNode"] = _raise_uninitialized_error
        self.__dict__["_SetTimePastAscNode"] = _raise_uninitialized_error
        self.__dict__["_GetTimePastPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetTimePastPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetApoapsisAltitudeShape"] = _raise_uninitialized_error
        self.__dict__["_SetApoapsisAltitudeShape"] = _raise_uninitialized_error
        self.__dict__["_GetApoapsisRadiusShape"] = _raise_uninitialized_error
        self.__dict__["_SetApoapsisRadiusShape"] = _raise_uninitialized_error
        self.__dict__["_GetPeriapsisAltitudeShape"] = _raise_uninitialized_error
        self.__dict__["_SetPeriapsisAltitudeShape"] = _raise_uninitialized_error
        self.__dict__["_GetPeriapsisRadiusShape"] = _raise_uninitialized_error
        self.__dict__["_SetPeriapsisRadiusShape"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementKeplerian._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementKeplerian from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementKeplerian = agcom.GUID(IAgVAElementKeplerian._uuid)
        vtable_offset_local = IAgVAElementKeplerian._vtable_offset - 1
        self.__dict__["_GetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetApoapsisAltitudeSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApoapsisAltitudeSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetApoapsisRadiusSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApoapsisRadiusSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMeanMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetPeriapsisAltitudeSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPeriapsisAltitudeSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetPeriapsisRadiusSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPeriapsisRadiusSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetPeriod"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPeriod"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetLAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+25, POINTER(agcom.VARIANT))
        self.__dict__["_SetLAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+26, agcom.VARIANT)
        self.__dict__["_GetArgOfLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+27, POINTER(agcom.VARIANT))
        self.__dict__["_SetArgOfLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+28, agcom.VARIANT)
        self.__dict__["_GetEccentricAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+29, POINTER(agcom.VARIANT))
        self.__dict__["_SetEccentricAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+30, agcom.VARIANT)
        self.__dict__["_GetMeanAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+31, POINTER(agcom.VARIANT))
        self.__dict__["_SetMeanAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+32, agcom.VARIANT)
        self.__dict__["_GetTimePastAscNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimePastAscNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+34, agcom.DOUBLE)
        self.__dict__["_GetTimePastPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+35, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimePastPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+36, agcom.DOUBLE)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+38, agcom.LONG)
        self.__dict__["_GetApoapsisAltitudeShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+39, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApoapsisAltitudeShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+40, agcom.DOUBLE)
        self.__dict__["_GetApoapsisRadiusShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+41, POINTER(agcom.DOUBLE))
        self.__dict__["_SetApoapsisRadiusShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+42, agcom.DOUBLE)
        self.__dict__["_GetPeriapsisAltitudeShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+43, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPeriapsisAltitudeShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+44, agcom.DOUBLE)
        self.__dict__["_GetPeriapsisRadiusShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+45, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPeriapsisRadiusShape"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementKeplerian, vtable_offset_local+46, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementKeplerian.__dict__ and type(IAgVAElementKeplerian.__dict__[attrname]) == property:
            return IAgVAElementKeplerian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def SemiMajorAxis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxis"](arg_newVal.COM_val))

    @property
    def Eccentricity(self) -> float:
        """Describes the shape of the ellipse (a real number >= 0 and <1, where 0 = a circular orbit). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEccentricity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Eccentricity.setter
    def Eccentricity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEccentricity"](arg_newVal.COM_val))

    @property
    def Inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInclination"](arg_newVal.COM_val))

    @property
    def RAAN(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAAN"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAAN"](arg_newVal.COM_val))

    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArgOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArgOfPeriapsis"](arg_newVal.COM_val))

    @property
    def TrueAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector (points toward perigee) to the satellite position vector, measured in the direction of satellite motion and in the orbit plane. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrueAnomaly"](arg_newVal.COM_val))

    @property
    def ApoapsisAltitudeSize(self) -> float:
        """Measured from the \"surface\" of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApoapsisAltitudeSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ApoapsisAltitudeSize.setter
    def ApoapsisAltitudeSize(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApoapsisAltitudeSize"](arg_inVal.COM_val))

    @property
    def ApoapsisRadiusSize(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApoapsisRadiusSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ApoapsisRadiusSize.setter
    def ApoapsisRadiusSize(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApoapsisRadiusSize"](arg_inVal.COM_val))

    @property
    def MeanMotion(self) -> float:
        """The uniform rate of the satellite in a circular orbit of the same period, typically expressed as degrees or radians per second, or as revolutions per day. Uses AngleRate dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanMotion"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanMotion.setter
    def MeanMotion(self, inVal:float) -> None:
        """."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanMotion"](arg_inVal.COM_val))

    @property
    def PeriapsisAltitudeSize(self) -> float:
        """Measured from the \"surface\" of the Earth to the points of maximum and minimum radius in the orbit. For these values, the surface of the Earth is modeled as a sphere whose radius equals the equatorial radius of the Earth. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPeriapsisAltitudeSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PeriapsisAltitudeSize.setter
    def PeriapsisAltitudeSize(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPeriapsisAltitudeSize"](arg_inVal.COM_val))

    @property
    def PeriapsisRadiusSize(self) -> float:
        """Measured from the center of the Earth to the points of maximum and minimum radius in the orbit. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPeriapsisRadiusSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PeriapsisRadiusSize.setter
    def PeriapsisRadiusSize(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPeriapsisRadiusSize"](arg_inVal.COM_val))

    @property
    def Period(self) -> float:
        """The duration of one orbit, based on assumed two-body motion. Uses Time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPeriod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Period.setter
    def Period(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPeriod"](arg_inVal.COM_val))

    @property
    def LAN(self) -> typing.Any:
        """The Earth-fixed longitude where the satellite has crossed the inertial equator (the intersection of the ground track and the inertial equator) from south to north based on an assumption of two-body motion. Uses Angle dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLAN"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LAN.setter
    def LAN(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLAN"](arg_inVal.COM_val))

    @property
    def ArgOfLatitude(self) -> typing.Any:
        """The sum of the True Anomaly and the Argument of Perigee. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArgOfLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArgOfLatitude.setter
    def ArgOfLatitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArgOfLatitude"](arg_newVal.COM_val))

    @property
    def EccentricAnomaly(self) -> typing.Any:
        """Angle measured with origin at the center of the ellipse from the direction of perigee to a point on a circumscribing circle from which a line perpendicular to the SMA intersects the position of the satellite on the ellipse. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEccentricAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EccentricAnomaly.setter
    def EccentricAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEccentricAnomaly"](arg_newVal.COM_val))

    @property
    def MeanAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanAnomaly.setter
    def MeanAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanAnomaly"](arg_newVal.COM_val))

    @property
    def TimePastAscNode(self) -> float:
        """The elapsed time since the last ascending node crossing based on assumed two-body motion. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimePastAscNode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimePastAscNode.setter
    def TimePastAscNode(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimePastAscNode"](arg_newVal.COM_val))

    @property
    def TimePastPeriapsis(self) -> float:
        """The elapsed time since the last perigee passage based on assumed two-body motion. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimePastPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimePastPeriapsis.setter
    def TimePastPeriapsis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimePastPeriapsis"](arg_newVal.COM_val))

    @property
    def ElementType(self) -> "AgEVAElement":
        """Which type of element (osculating or mean)."""
        with agmarshall.AgEnum_arg(AgEVAElement) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """."""
        with agmarshall.AgEnum_arg(AgEVAElement, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def ApoapsisAltitudeShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApoapsisAltitudeShape"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ApoapsisAltitudeShape.setter
    def ApoapsisAltitudeShape(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApoapsisAltitudeShape"](arg_inVal.COM_val))

    @property
    def ApoapsisRadiusShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApoapsisRadiusShape"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ApoapsisRadiusShape.setter
    def ApoapsisRadiusShape(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetApoapsisRadiusShape"](arg_inVal.COM_val))

    @property
    def PeriapsisAltitudeShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPeriapsisAltitudeShape"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PeriapsisAltitudeShape.setter
    def PeriapsisAltitudeShape(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPeriapsisAltitudeShape"](arg_inVal.COM_val))

    @property
    def PeriapsisRadiusShape(self) -> float:
        """Describes the shape of the ellipse. Uses Distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPeriapsisRadiusShape"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PeriapsisRadiusShape.setter
    def PeriapsisRadiusShape(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPeriapsisRadiusShape"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3550E5F6-FDEF-4325-BDBA-2BA984208ECB}", IAgVAElementKeplerian)
agcls.AgTypeNameMap["IAgVAElementKeplerian"] = IAgVAElementKeplerian
__all__.append("IAgVAElementKeplerian")

class IAgVAElementDelaunay(IAgVAElement):
    """Properties for Delaunay elements"""
    _uuid = "{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}"
    _num_methods = 18
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMeanAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetMeanAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetRAAN"] = _raise_uninitialized_error
        self.__dict__["_SetRAAN"] = _raise_uninitialized_error
        self.__dict__["_GetDelaunayL"] = _raise_uninitialized_error
        self.__dict__["_SetDelaunayL"] = _raise_uninitialized_error
        self.__dict__["_GetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetDelaunayG"] = _raise_uninitialized_error
        self.__dict__["_SetDelaunayG"] = _raise_uninitialized_error
        self.__dict__["_GetSemilatusRectum"] = _raise_uninitialized_error
        self.__dict__["_SetSemilatusRectum"] = _raise_uninitialized_error
        self.__dict__["_GetDelaunayH"] = _raise_uninitialized_error
        self.__dict__["_SetDelaunayH"] = _raise_uninitialized_error
        self.__dict__["_GetInclination"] = _raise_uninitialized_error
        self.__dict__["_SetInclination"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementDelaunay._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementDelaunay from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementDelaunay = agcom.GUID(IAgVAElementDelaunay._uuid)
        vtable_offset_local = IAgVAElementDelaunay._vtable_offset - 1
        self.__dict__["_GetMeanAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetMeanAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetDelaunayL"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDelaunayL"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetDelaunayG"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDelaunayG"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetSemilatusRectum"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemilatusRectum"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetDelaunayH"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDelaunayH"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+17, POINTER(agcom.VARIANT))
        self.__dict__["_SetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementDelaunay, vtable_offset_local+18, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementDelaunay.__dict__ and type(IAgVAElementDelaunay.__dict__[attrname]) == property:
            return IAgVAElementDelaunay.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def MeanAnomaly(self) -> typing.Any:
        """The angle from the eccentricity vector to a position vector where the satellite would be if it were always moving at its average angular rate (l). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanAnomaly.setter
    def MeanAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanAnomaly"](arg_newVal.COM_val))

    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The angle from the ascending node to the eccentricity vector (lowest point of orbit) measured in the direction of the satellite's motion and in the orbit plane (g). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArgOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArgOfPeriapsis"](arg_newVal.COM_val))

    @property
    def RAAN(self) -> typing.Any:
        """The angle from the inertial X axis to the ascending node measured in a right-handed sense about the inertial Z axis in the equatorial plane (h). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAAN"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAAN"](arg_newVal.COM_val))

    @property
    def DelaunayL(self) -> float:
        """Related to the two-body orbital energy. Defined as sqrt(GM * a).   Uses AreaRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelaunayL"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelaunayL.setter
    def DelaunayL(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelaunayL"](arg_newVal.COM_val))

    @property
    def SemiMajorAxis(self) -> float:
        """One-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxis"](arg_newVal.COM_val))

    @property
    def DelaunayG(self) -> float:
        """The magnitude of the orbital angular momentum. Defined as sqrt(GM * p). Uses AreaRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelaunayG"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelaunayG.setter
    def DelaunayG(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelaunayG"](arg_newVal.COM_val))

    @property
    def SemilatusRectum(self) -> float:
        """Semi-latus Rectum. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemilatusRectum"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemilatusRectum.setter
    def SemilatusRectum(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemilatusRectum"](arg_newVal.COM_val))

    @property
    def DelaunayH(self) -> float:
        """The Z component of the orbital angular momentum. Defined as G cos(inc).  Uses AreaRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDelaunayH"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DelaunayH.setter
    def DelaunayH(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDelaunayH"](arg_newVal.COM_val))

    @property
    def Inclination(self) -> typing.Any:
        """The angle between the angular momentum vector (perpendicular to the plane of the orbit) and the inertial Z axis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInclination"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2D09DD04-C97C-43DB-B01A-D78DDD52FE1F}", IAgVAElementDelaunay)
agcls.AgTypeNameMap["IAgVAElementDelaunay"] = IAgVAElementDelaunay
__all__.append("IAgVAElementDelaunay")

class IAgVAElementEquinoctial(IAgVAElement):
    """Properties for Equinoctial elements"""
    _uuid = "{90FA8C03-AA29-446A-A23A-085B71502DAA}"
    _num_methods = 16
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetMeanMotion"] = _raise_uninitialized_error
        self.__dict__["_SetMeanMotion"] = _raise_uninitialized_error
        self.__dict__["_Geth"] = _raise_uninitialized_error
        self.__dict__["_Seth"] = _raise_uninitialized_error
        self.__dict__["_Getk"] = _raise_uninitialized_error
        self.__dict__["_Setk"] = _raise_uninitialized_error
        self.__dict__["_Getp"] = _raise_uninitialized_error
        self.__dict__["_Setp"] = _raise_uninitialized_error
        self.__dict__["_Getq"] = _raise_uninitialized_error
        self.__dict__["_Setq"] = _raise_uninitialized_error
        self.__dict__["_GetMeanLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetMeanLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetFormulation"] = _raise_uninitialized_error
        self.__dict__["_SetFormulation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementEquinoctial._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementEquinoctial from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementEquinoctial = agcom.GUID(IAgVAElementEquinoctial._uuid)
        vtable_offset_local = IAgVAElementEquinoctial._vtable_offset - 1
        self.__dict__["_GetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMeanMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_Geth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_Seth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_Getk"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_Setk"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_Getp"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_Setp"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_Getq"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_Setq"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMeanLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetMeanLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetFormulation"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetFormulation"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementEquinoctial, vtable_offset_local+16, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementEquinoctial.__dict__ and type(IAgVAElementEquinoctial.__dict__[attrname]) == property:
            return IAgVAElementEquinoctial.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def SemiMajorAxis(self) -> float:
        """Half the length of the major axis of the orbital ellipse. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxis"](arg_newVal.COM_val))

    @property
    def MeanMotion(self) -> float:
        """The average angular rate of the satellite based on 2 body motion. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanMotion"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanMotion.setter
    def MeanMotion(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanMotion"](arg_newVal.COM_val))

    @property
    def h(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Geth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @h.setter
    def h(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_Seth"](arg_newVal.COM_val))

    @property
    def k(self) -> float:
        """h/k collectively describe the shape of the satellite's orbit and the position of perigee. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getk"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @k.setter
    def k(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_Setk"](arg_newVal.COM_val))

    @property
    def p(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @p.setter
    def p(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_Setp"](arg_newVal.COM_val))

    @property
    def q(self) -> float:
        """p/q collectively describe the orientation of the satellite's orbit plane. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getq"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @q.setter
    def q(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_Setq"](arg_newVal.COM_val))

    @property
    def MeanLongitude(self) -> typing.Any:
        """Specifies a satellite's position within its orbit at epoch and equals the sum of the classical Right Ascension of the Ascending Node, Argument of Perigee, and Mean Anomaly. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanLongitude.setter
    def MeanLongitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanLongitude"](arg_newVal.COM_val))

    @property
    def Formulation(self) -> "AgEVAFormulation":
        """Retrograde, which has its singularity at an inclination of 0 deg. Posigrade, which has its singularity at an inclination of 180 deg."""
        with agmarshall.AgEnum_arg(AgEVAFormulation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFormulation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Formulation.setter
    def Formulation(self, inVal:"AgEVAFormulation") -> None:
        with agmarshall.AgEnum_arg(AgEVAFormulation, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetFormulation"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{90FA8C03-AA29-446A-A23A-085B71502DAA}", IAgVAElementEquinoctial)
agcls.AgTypeNameMap["IAgVAElementEquinoctial"] = IAgVAElementEquinoctial
__all__.append("IAgVAElementEquinoctial")

class IAgVAElementMixedSpherical(IAgVAElement):
    """Properties for Mixed Spherical elements"""
    _uuid = "{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}"
    _num_methods = 14
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetHorizontalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetHorizontalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetVerticalFlightPathAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementMixedSpherical._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementMixedSpherical from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementMixedSpherical = agcom.GUID(IAgVAElementMixedSpherical._uuid)
        vtable_offset_local = IAgVAElementMixedSpherical._vtable_offset - 1
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetHorizontalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetHorizontalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetVelocityMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVelocityMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetVerticalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetVerticalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementMixedSpherical, vtable_offset_local+14, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementMixedSpherical.__dict__ and type(IAgVAElementMixedSpherical.__dict__[attrname]) == property:
            return IAgVAElementMixedSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def Longitude(self) -> typing.Any:
        """Measured from -180.0 deg to +360.0 deg. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Latitude(self) -> typing.Any:
        """Measured from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between (1) the normal to the reference ellipsoid that passes through the satellite position and (2) the equatorial plane. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The object's position above or below the reference ellipsoid. Altitude is measured along a normal to the surface of the reference ellipsoid. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def HorizontalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHorizontalFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HorizontalFlightPathAngle.setter
    def HorizontalFlightPathAngle(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHorizontalFlightPathAngle"](arg_newVal.COM_val))

    @property
    def VelocityAzimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityAzimuth.setter
    def VelocityAzimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityAzimuth"](arg_newVal.COM_val))

    @property
    def VelocityMagnitude(self) -> float:
        """The angle in the satellite local horizontal plane between the projection of the inertial velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityMagnitude.setter
    def VelocityMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityMagnitude"](arg_newVal.COM_val))

    @property
    def VerticalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the inertial velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VerticalFlightPathAngle.setter
    def VerticalFlightPathAngle(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVerticalFlightPathAngle"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8A1D2A11-5A9D-49D8-9CE6-6435B1173292}", IAgVAElementMixedSpherical)
agcls.AgTypeNameMap["IAgVAElementMixedSpherical"] = IAgVAElementMixedSpherical
__all__.append("IAgVAElementMixedSpherical")

class IAgVAElementSpherical(IAgVAElement):
    """Properties for Spherical elements"""
    _uuid = "{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}"
    _num_methods = 14
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRightAscension"] = _raise_uninitialized_error
        self.__dict__["_SetRightAscension"] = _raise_uninitialized_error
        self.__dict__["_GetDeclination"] = _raise_uninitialized_error
        self.__dict__["_SetDeclination"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetHorizontalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetHorizontalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetVerticalFlightPathAngle"] = _raise_uninitialized_error
        self.__dict__["_SetVerticalFlightPathAngle"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementSpherical._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementSpherical from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementSpherical = agcom.GUID(IAgVAElementSpherical._uuid)
        vtable_offset_local = IAgVAElementSpherical._vtable_offset - 1
        self.__dict__["_GetRightAscension"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetRightAscension"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDeclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetDeclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRadiusMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetHorizontalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetHorizontalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetVelocityAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetVelocityMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetVelocityMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetVerticalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetVerticalFlightPathAngle"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementSpherical, vtable_offset_local+14, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementSpherical.__dict__ and type(IAgVAElementSpherical.__dict__[attrname]) == property:
            return IAgVAElementSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def RightAscension(self) -> typing.Any:
        """Defined as the angle from the X axis to the projection of the satellite position vector in the equatorial plane measured as positive in the direction of the Y axis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRightAscension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RightAscension.setter
    def RightAscension(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRightAscension"](arg_newVal.COM_val))

    @property
    def Declination(self) -> typing.Any:
        """Defined as the angle between the satellite position vector and the inertial equatorial plane measured as positive toward the positive inertial Z axis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Declination.setter
    def Declination(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeclination"](arg_newVal.COM_val))

    @property
    def RadiusMagnitude(self) -> float:
        """The magnitude of the satellite position vector. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusMagnitude.setter
    def RadiusMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusMagnitude"](arg_newVal.COM_val))

    @property
    def HorizontalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHorizontalFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HorizontalFlightPathAngle.setter
    def HorizontalFlightPathAngle(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHorizontalFlightPathAngle"](arg_newVal.COM_val))

    @property
    def VelocityAzimuth(self) -> typing.Any:
        """The angle in the satellite local horizontal plane between the projection of the velocity vector onto this plane and the local north direction measured as positive in the clockwise direction. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityAzimuth.setter
    def VelocityAzimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityAzimuth"](arg_newVal.COM_val))

    @property
    def VelocityMagnitude(self) -> float:
        """The magnitude of the velocity vector. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityMagnitude.setter
    def VelocityMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityMagnitude"](arg_newVal.COM_val))

    @property
    def VerticalFlightPathAngle(self) -> typing.Any:
        """Horizontal (Hor FPA) or vertical (Ver FPA) flight path angle. The angle between the velocity vector and the radius vector (vertical) or the complement of this angle (horizontal). Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVerticalFlightPathAngle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VerticalFlightPathAngle.setter
    def VerticalFlightPathAngle(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVerticalFlightPathAngle"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C2B6D754-C55A-4FE1-88AE-976A54FD0C75}", IAgVAElementSpherical)
agcls.AgTypeNameMap["IAgVAElementSpherical"] = IAgVAElementSpherical
__all__.append("IAgVAElementSpherical")

class IAgVAElementTargetVectorIncomingAsymptote(IAgVAElement):
    """Properties for Target Vector Incoming Asymptote elements."""
    _uuid = "{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}"
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRadiusOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetC3Energy"] = _raise_uninitialized_error
        self.__dict__["_SetC3Energy"] = _raise_uninitialized_error
        self.__dict__["_GetRAIncomingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_SetRAIncomingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_GetDeclinationIncomingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_SetDeclinationIncomingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityAzimuthPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityAzimuthPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetTrueAnomaly"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementTargetVectorIncomingAsymptote._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementTargetVectorIncomingAsymptote from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementTargetVectorIncomingAsymptote = agcom.GUID(IAgVAElementTargetVectorIncomingAsymptote._uuid)
        vtable_offset_local = IAgVAElementTargetVectorIncomingAsymptote._vtable_offset - 1
        self.__dict__["_GetRadiusOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetC3Energy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC3Energy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetRAIncomingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetRAIncomingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetDeclinationIncomingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetDeclinationIncomingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetVelocityAzimuthPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetVelocityAzimuthPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorIncomingAsymptote, vtable_offset_local+12, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementTargetVectorIncomingAsymptote.__dict__ and type(IAgVAElementTargetVectorIncomingAsymptote.__dict__[attrname]) == property:
            return IAgVAElementTargetVectorIncomingAsymptote.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def RadiusOfPeriapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusOfPeriapsis.setter
    def RadiusOfPeriapsis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusOfPeriapsis"](arg_newVal.COM_val))

    @property
    def C3Energy(self) -> float:
        """C3Energy (Rate squared)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC3Energy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C3Energy.setter
    def C3Energy(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetC3Energy"](arg_newVal.COM_val))

    @property
    def RAIncomingAsymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAIncomingAsymptote"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAIncomingAsymptote.setter
    def RAIncomingAsymptote(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAIncomingAsymptote"](arg_newVal.COM_val))

    @property
    def DeclinationIncomingAsymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeclinationIncomingAsymptote"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeclinationIncomingAsymptote.setter
    def DeclinationIncomingAsymptote(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeclinationIncomingAsymptote"](arg_newVal.COM_val))

    @property
    def VelocityAzimuthPeriapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityAzimuthPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityAzimuthPeriapsis.setter
    def VelocityAzimuthPeriapsis(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityAzimuthPeriapsis"](arg_newVal.COM_val))

    @property
    def TrueAnomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrueAnomaly"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B7EA61B2-6910-43E7-B4F7-CBA647EC19A3}", IAgVAElementTargetVectorIncomingAsymptote)
agcls.AgTypeNameMap["IAgVAElementTargetVectorIncomingAsymptote"] = IAgVAElementTargetVectorIncomingAsymptote
__all__.append("IAgVAElementTargetVectorIncomingAsymptote")

class IAgVAElementTargetVectorOutgoingAsymptote(IAgVAElement):
    """Properties for Target Vector Outgoing Asymptote elements."""
    _uuid = "{BE7E87B6-AC1F-4A19-A1C8-15272B707777}"
    _num_methods = 12
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRadiusOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetC3Energy"] = _raise_uninitialized_error
        self.__dict__["_SetC3Energy"] = _raise_uninitialized_error
        self.__dict__["_GetRAOutgoingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_SetRAOutgoingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_GetDeclinationOutgoingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_SetDeclinationOutgoingAsymptote"] = _raise_uninitialized_error
        self.__dict__["_GetVelocityAzimuthPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetVelocityAzimuthPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetTrueAnomaly"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementTargetVectorOutgoingAsymptote._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementTargetVectorOutgoingAsymptote from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementTargetVectorOutgoingAsymptote = agcom.GUID(IAgVAElementTargetVectorOutgoingAsymptote._uuid)
        vtable_offset_local = IAgVAElementTargetVectorOutgoingAsymptote._vtable_offset - 1
        self.__dict__["_GetRadiusOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetC3Energy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC3Energy"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetRAOutgoingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetRAOutgoingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetDeclinationOutgoingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetDeclinationOutgoingAsymptote"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetVelocityAzimuthPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetVelocityAzimuthPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementTargetVectorOutgoingAsymptote, vtable_offset_local+12, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementTargetVectorOutgoingAsymptote.__dict__ and type(IAgVAElementTargetVectorOutgoingAsymptote.__dict__[attrname]) == property:
            return IAgVAElementTargetVectorOutgoingAsymptote.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def RadiusOfPeriapsis(self) -> float:
        """Radius of Periapsis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusOfPeriapsis.setter
    def RadiusOfPeriapsis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusOfPeriapsis"](arg_newVal.COM_val))

    @property
    def C3Energy(self) -> float:
        """C3Energy (Rate Squared)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC3Energy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C3Energy.setter
    def C3Energy(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetC3Energy"](arg_newVal.COM_val))

    @property
    def RAOutgoingAsymptote(self) -> typing.Any:
        """Right Ascension of Incoming Asymptote. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAOutgoingAsymptote"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAOutgoingAsymptote.setter
    def RAOutgoingAsymptote(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAOutgoingAsymptote"](arg_newVal.COM_val))

    @property
    def DeclinationOutgoingAsymptote(self) -> typing.Any:
        """Declination of Incoming Asymptote. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeclinationOutgoingAsymptote"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeclinationOutgoingAsymptote.setter
    def DeclinationOutgoingAsymptote(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeclinationOutgoingAsymptote"](arg_newVal.COM_val))

    @property
    def VelocityAzimuthPeriapsis(self) -> typing.Any:
        """Velocity Azimuth at Periapsis. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelocityAzimuthPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VelocityAzimuthPeriapsis.setter
    def VelocityAzimuthPeriapsis(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetVelocityAzimuthPeriapsis"](arg_newVal.COM_val))

    @property
    def TrueAnomaly(self) -> typing.Any:
        """True Anomaly. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrueAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TrueAnomaly.setter
    def TrueAnomaly(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrueAnomaly"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BE7E87B6-AC1F-4A19-A1C8-15272B707777}", IAgVAElementTargetVectorOutgoingAsymptote)
agcls.AgTypeNameMap["IAgVAElementTargetVectorOutgoingAsymptote"] = IAgVAElementTargetVectorOutgoingAsymptote
__all__.append("IAgVAElementTargetVectorOutgoingAsymptote")

class IAgVAElementGeodetic(IAgVAElement):
    """Properties for Geodetic elements"""
    _uuid = "{091F376E-6C32-4567-BE00-D1CE1857B50F}"
    _num_methods = 16
    _vtable_offset = IAgVAElement._vtable_offset + IAgVAElement._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetLatitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetLatitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetLongitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetLongitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRate"] = _raise_uninitialized_error
        self.__dict__["_GetRadiusRate"] = _raise_uninitialized_error
        self.__dict__["_SetRadiusRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAElementGeodetic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAElementGeodetic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElement._private_init(self, pUnk)
        IID_IAgVAElementGeodetic = agcom.GUID(IAgVAElementGeodetic._uuid)
        vtable_offset_local = IAgVAElementGeodetic._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetRadiusMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetLatitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLatitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetLongitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLongitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetRadiusRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadiusRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAElementGeodetic, vtable_offset_local+16, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAElementGeodetic.__dict__ and type(IAgVAElementGeodetic.__dict__[attrname]) == property:
            return IAgVAElementGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAElement.__setattr__(self, attrname, value)
    
    @property
    def Latitude(self) -> typing.Any:
        """Measured in degrees from -90.0 deg to +90.0 deg. The geodetic latitude of a point is the angle between the normal to the reference ellipsoid and the equatorial plane. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """Measured in degrees from -360.0 deg to +360.0 deg. The longitude of a point is the angle between the projection of the position vector in the equatorial plane and the prime meridian. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """Measured along an outward normal to the surface of the ellipsoid. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))

    @property
    def RadiusMagnitude(self) -> float:
        """Measured from the center of the Earth. Specified as distance above or below the reference ellipsoid. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusMagnitude.setter
    def RadiusMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusMagnitude"](arg_newVal.COM_val))

    @property
    def LatitudeRate(self) -> float:
        """The rate of change of the satellite's latitude. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LatitudeRate.setter
    def LatitudeRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitudeRate"](arg_newVal.COM_val))

    @property
    def LongitudeRate(self) -> float:
        """The rate of change of the satellite's longitude. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LongitudeRate.setter
    def LongitudeRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitudeRate"](arg_newVal.COM_val))

    @property
    def AltitudeRate(self) -> float:
        """The rate of change of the altitude. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRate.setter
    def AltitudeRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRate"](arg_newVal.COM_val))

    @property
    def RadiusRate(self) -> float:
        """The rate of change of the radius. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadiusRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadiusRate.setter
    def RadiusRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadiusRate"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{091F376E-6C32-4567-BE00-D1CE1857B50F}", IAgVAElementGeodetic)
agcls.AgTypeNameMap["IAgVAElementGeodetic"] = IAgVAElementGeodetic
__all__.append("IAgVAElementGeodetic")

class IAgVAStoppingCondition(IAgVAStoppingConditionComponent):
    """Basic properties for a stopping condition."""
    _uuid = "{7B18D549-E67A-4532-9767-ECC78418475D}"
    _num_methods = 29
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTrip"] = _raise_uninitialized_error
        self.__dict__["_SetTrip"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_SetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_GetInherited"] = _raise_uninitialized_error
        self.__dict__["_SetInherited"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_GetCoordSystem"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystem"] = _raise_uninitialized_error
        self.__dict__["_GetSequence"] = _raise_uninitialized_error
        self.__dict__["_SetSequence"] = _raise_uninitialized_error
        self.__dict__["_GetConstraints"] = _raise_uninitialized_error
        self.__dict__["_GetUserCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetUserCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetUserCalcObject"] = _raise_uninitialized_error
        self.__dict__["_SetUserCalcObject"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetCriterion"] = _raise_uninitialized_error
        self.__dict__["_SetCriterion"] = _raise_uninitialized_error
        self.__dict__["_GetBeforeConditions"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_SetReferencePoint"] = _raise_uninitialized_error
        self.__dict__["_CopyUserCalcObjectToClipboard"] = _raise_uninitialized_error
        self.__dict__["_PasteUserCalcObjectFromClipboard"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStoppingCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStoppingCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IID_IAgVAStoppingCondition = agcom.GUID(IAgVAStoppingCondition._uuid)
        vtable_offset_local = IAgVAStoppingCondition._vtable_offset - 1
        self.__dict__["_GetTrip"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetTrip"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetCoordSystem"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystem"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetConstraints"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetUserCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_SetUserCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+17, agcom.BSTR)
        self.__dict__["_GetUserCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+18, POINTER(agcom.PVOID))
        self.__dict__["_SetUserCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+19, agcom.PVOID)
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+21, agcom.BSTR)
        self.__dict__["_GetCriterion"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetCriterion"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetBeforeConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+25, POINTER(agcom.BSTR))
        self.__dict__["_GetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetReferencePoint"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_CopyUserCalcObjectToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+28, )
        self.__dict__["_PasteUserCalcObjectFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAStoppingCondition, vtable_offset_local+29, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStoppingCondition.__dict__ and type(IAgVAStoppingCondition.__dict__[attrname]) == property:
            return IAgVAStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    @property
    def Trip(self) -> typing.Any:
        """The desired value - the value at which the condition will be satisfied. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTrip"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Trip.setter
    def Trip(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTrip"](arg_newVal.COM_val))

    @property
    def Tolerance(self) -> float:
        """The desired tolerance for achieving the stopping condition. Dimension depends on context."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Tolerance.setter
    def Tolerance(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_newVal.COM_val))

    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRepeatCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRepeatCount"](arg_newVal.COM_val))

    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInherited"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInherited"](arg_newVal.COM_val))

    @property
    def MaxTripTimes(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTripTimes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTripTimes"](arg_inVal.COM_val))

    @property
    def CoordSystem(self) -> str:
        """The coordinate system. The default coordinate system of a stopping condition is Earth Inertial."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystem"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystem.setter
    def CoordSystem(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystem"](arg_newVal.COM_val))

    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequence"](arg_newVal.COM_val))

    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAConstraintCollection:
            agcls.evaluate_hresult(self.__dict__["_GetConstraints"](byref(arg_ppVAConstraintCollection.COM_val)))
            return arg_ppVAConstraintCollection.python_val

    @property
    def UserCalcObjectName(self) -> str:
        """User Calc Object - a User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserCalcObjectName.setter
    def UserCalcObjectName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserCalcObjectName"](arg_newVal.COM_val))

    @property
    def UserCalcObject(self) -> "IAgComponentInfo":
        """A User Calculation Object for the highlighted stopping condition. For user-defined stopping conditions, use this field to specify what kind of value you want to stop on."""
        with agmarshall.AgInterface_out_arg() as arg_ppComponentInfo:
            agcls.evaluate_hresult(self.__dict__["_GetUserCalcObject"](byref(arg_ppComponentInfo.COM_val)))
            return arg_ppComponentInfo.python_val

    @UserCalcObject.setter
    def UserCalcObject(self, newVal:"IAgComponentInfo") -> None:
        with agmarshall.AgInterface_in_arg(newVal, IAgComponentInfo) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserCalcObject"](arg_newVal.COM_val))

    @property
    def CentralBodyName(self) -> str:
        """The central body. The default central body of a stopping condition is the Earth."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_newVal.COM_val))

    @property
    def Criterion(self) -> "AgEVACriterion":
        """Specifies the direction from which the stopping condition value must be achieved."""
        with agmarshall.AgEnum_arg(AgEVACriterion) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCriterion"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Criterion.setter
    def Criterion(self, newVal:"AgEVACriterion") -> None:
        with agmarshall.AgEnum_arg(AgEVACriterion, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCriterion"](arg_newVal.COM_val))

    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetBeforeConditions"](byref(arg_ppStoppingConditionCollection.COM_val)))
            return arg_ppStoppingConditionCollection.python_val

    @property
    def Dimension(self) -> str:
        """The dimension of the stopping condition."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ReferencePoint(self) -> str:
        """Reference point used for calculation."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePoint"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @ReferencePoint.setter
    def ReferencePoint(self, inVal:str) -> None:
        """Reference point used for calculation."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferencePoint"](arg_inVal.COM_val))

    def CopyUserCalcObjectToClipboard(self) -> None:
        """Copies the user-defined stopping condition calc object to the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyUserCalcObjectToClipboard"]())

    def PasteUserCalcObjectFromClipboard(self) -> None:
        """Replaces the user-defined stopping condition calc object with the calc object in the clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteUserCalcObjectFromClipboard"]())


agcls.AgClassCatalog.add_catalog_entry("{7B18D549-E67A-4532-9767-ECC78418475D}", IAgVAStoppingCondition)
agcls.AgTypeNameMap["IAgVAStoppingCondition"] = IAgVAStoppingCondition
__all__.append("IAgVAStoppingCondition")

class IAgVALightingStoppingCondition(IAgVAStoppingConditionComponent):
    """Properties for a lighting stopping condition."""
    _uuid = "{05642E87-6580-4E1F-82EF-BA6406DBAC65}"
    _num_methods = 18
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_GetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_SetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_GetConstraints"] = _raise_uninitialized_error
        self.__dict__["_GetBeforeConditions"] = _raise_uninitialized_error
        self.__dict__["_GetInherited"] = _raise_uninitialized_error
        self.__dict__["_SetInherited"] = _raise_uninitialized_error
        self.__dict__["_GetSequence"] = _raise_uninitialized_error
        self.__dict__["_SetSequence"] = _raise_uninitialized_error
        self.__dict__["_GetCondition"] = _raise_uninitialized_error
        self.__dict__["_SetCondition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodiesListSource"] = _raise_uninitialized_error
        self.__dict__["_SetEclipsingBodiesListSource"] = _raise_uninitialized_error
        self.__dict__["_AddEclipsingBody"] = _raise_uninitialized_error
        self.__dict__["_RemoveEclipsingBody"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableEclipsingBodies"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVALightingStoppingCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVALightingStoppingCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IID_IAgVALightingStoppingCondition = agcom.GUID(IAgVALightingStoppingCondition._uuid)
        vtable_offset_local = IAgVALightingStoppingCondition._vtable_offset - 1
        self.__dict__["_GetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetConstraints"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetBeforeConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetCondition"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetCondition"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetEclipsingBodiesListSource"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetEclipsingBodiesListSource"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_AddEclipsingBody"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+15, agcom.BSTR)
        self.__dict__["_RemoveEclipsingBody"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+16, agcom.BSTR)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+17, POINTER(agcom.SAFEARRAY))
        self.__dict__["_GetAvailableEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVALightingStoppingCondition, vtable_offset_local+18, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVALightingStoppingCondition.__dict__ and type(IAgVALightingStoppingCondition.__dict__[attrname]) == property:
            return IAgVALightingStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    @property
    def MaxTripTimes(self) -> float:
        """Rhe maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTripTimes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTripTimes"](arg_inVal.COM_val))

    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRepeatCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRepeatCount"](arg_newVal.COM_val))

    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAConstraintCollection:
            agcls.evaluate_hresult(self.__dict__["_GetConstraints"](byref(arg_ppVAConstraintCollection.COM_val)))
            return arg_ppVAConstraintCollection.python_val

    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetBeforeConditions"](byref(arg_ppStoppingConditionCollection.COM_val)))
            return arg_ppStoppingConditionCollection.python_val

    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInherited"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInherited"](arg_newVal.COM_val))

    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequence"](arg_newVal.COM_val))

    @property
    def Condition(self) -> "AgEVALightingCondition":
        """Specifies the direction from which the stopping condition value must be achieved."""
        with agmarshall.AgEnum_arg(AgEVALightingCondition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCondition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Condition.setter
    def Condition(self, newVal:"AgEVALightingCondition") -> None:
        with agmarshall.AgEnum_arg(AgEVALightingCondition, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCondition"](arg_newVal.COM_val))

    @property
    def EclipsingBodiesListSource(self) -> "AgEVAEclipsingBodiesSource":
        """Eclipsing Bodies List Source."""
        with agmarshall.AgEnum_arg(AgEVAEclipsingBodiesSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodiesListSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EclipsingBodiesListSource.setter
    def EclipsingBodiesListSource(self, newVal:"AgEVAEclipsingBodiesSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAEclipsingBodiesSource, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEclipsingBodiesListSource"](arg_newVal.COM_val))

    def AddEclipsingBody(self, eclipsingBody:str) -> None:
        """Adds an eclipsing body."""
        with agmarshall.BSTR_arg(eclipsingBody) as arg_eclipsingBody:
            agcls.evaluate_hresult(self.__dict__["_AddEclipsingBody"](arg_eclipsingBody.COM_val))

    def RemoveEclipsingBody(self, eclipsingBody:str) -> None:
        """Removes an eclipsing body."""
        with agmarshall.BSTR_arg(eclipsingBody) as arg_eclipsingBody:
            agcls.evaluate_hresult(self.__dict__["_RemoveEclipsingBody"](arg_eclipsingBody.COM_val))

    @property
    def EclipsingBodies(self) -> list:
        """Returns a list of user selected eclipsing bodies."""
        with agmarshall.SAFEARRAY_arg() as arg_ppNewVal:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppNewVal.COM_val)))
            return arg_ppNewVal.python_val

    @property
    def AvailableEclipsingBodies(self) -> list:
        """Returns a list of available eclipsing bodies."""
        with agmarshall.SAFEARRAY_arg() as arg_ppNewVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableEclipsingBodies"](byref(arg_ppNewVal.COM_val)))
            return arg_ppNewVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{05642E87-6580-4E1F-82EF-BA6406DBAC65}", IAgVALightingStoppingCondition)
agcls.AgTypeNameMap["IAgVALightingStoppingCondition"] = IAgVALightingStoppingCondition
__all__.append("IAgVALightingStoppingCondition")

class IAgVAAccessStoppingCondition(IAgVAStoppingConditionComponent):
    """Properties for an access stopping condition."""
    _uuid = "{2A2D2F12-9F9B-43F6-B6B0-00088C006504}"
    _num_methods = 28
    _vtable_offset = IAgVAStoppingConditionComponent._vtable_offset + IAgVAStoppingConditionComponent._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTimeConvergence"] = _raise_uninitialized_error
        self.__dict__["_SetTimeConvergence"] = _raise_uninitialized_error
        self.__dict__["_GetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_SetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_GetInherited"] = _raise_uninitialized_error
        self.__dict__["_SetInherited"] = _raise_uninitialized_error
        self.__dict__["_GetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_SetMaxTripTimes"] = _raise_uninitialized_error
        self.__dict__["_GetSequence"] = _raise_uninitialized_error
        self.__dict__["_SetSequence"] = _raise_uninitialized_error
        self.__dict__["_GetConstraints"] = _raise_uninitialized_error
        self.__dict__["_GetCriterion"] = _raise_uninitialized_error
        self.__dict__["_SetCriterion"] = _raise_uninitialized_error
        self.__dict__["_GetBeforeConditions"] = _raise_uninitialized_error
        self.__dict__["_GetAberrationType"] = _raise_uninitialized_error
        self.__dict__["_SetAberrationType"] = _raise_uninitialized_error
        self.__dict__["_SetBaseSelection"] = _raise_uninitialized_error
        self.__dict__["_GetBaseSelectionType"] = _raise_uninitialized_error
        self.__dict__["_GetBaseSelection"] = _raise_uninitialized_error
        self.__dict__["_GetClockHost"] = _raise_uninitialized_error
        self.__dict__["_SetClockHost"] = _raise_uninitialized_error
        self.__dict__["_GetSignalSense"] = _raise_uninitialized_error
        self.__dict__["_SetSignalSense"] = _raise_uninitialized_error
        self.__dict__["_GetTargetObject"] = _raise_uninitialized_error
        self.__dict__["_GetTimeDelayConvergenceTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTimeDelayConvergenceTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetUseLightTimeDelay"] = _raise_uninitialized_error
        self.__dict__["_SetUseLightTimeDelay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAccessStoppingCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAccessStoppingCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IID_IAgVAAccessStoppingCondition = agcom.GUID(IAgVAAccessStoppingCondition._uuid)
        vtable_offset_local = IAgVAAccessStoppingCondition._vtable_offset - 1
        self.__dict__["_GetTimeConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetInherited"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxTripTimes"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetConstraints"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetCriterion"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetCriterion"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetBeforeConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+14, POINTER(agcom.PVOID))
        self.__dict__["_GetAberrationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAberrationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_SetBaseSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetBaseSelectionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+18, POINTER(agcom.LONG))
        self.__dict__["_GetBaseSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_GetClockHost"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetClockHost"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetSignalSense"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetSignalSense"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetTargetObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+24, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeDelayConvergenceTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeDelayConvergenceTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetUseLightTimeDelay"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseLightTimeDelay"] = IAGFUNCTYPE(pUnk, IID_IAgVAAccessStoppingCondition, vtable_offset_local+28, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAccessStoppingCondition.__dict__ and type(IAgVAAccessStoppingCondition.__dict__[attrname]) == property:
            return IAgVAAccessStoppingCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAStoppingConditionComponent.__setattr__(self, attrname, value)
    
    @property
    def TimeConvergence(self) -> float:
        """Sets the time tolerance that is used by the access algorithms to determine the start times and stop times of access intervals. Uses Time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeConvergence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeConvergence.setter
    def TimeConvergence(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeConvergence"](arg_newVal.COM_val))

    @property
    def RepeatCount(self) -> float:
        """The number of times the condition must be satisfied before the propagation ends or moves on to the designated automatic sequence. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRepeatCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RepeatCount.setter
    def RepeatCount(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRepeatCount"](arg_newVal.COM_val))

    @property
    def Inherited(self) -> bool:
        """Condition Inherited by Automatic Sequences - if true, the stopping condition will be applied to any automatic sequences activated within the same segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInherited"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inherited.setter
    def Inherited(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInherited"](arg_newVal.COM_val))

    @property
    def MaxTripTimes(self) -> float:
        """The maximum number of times that the stopping condition will be applied - and any resulting automatic sequences executed. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxTripTimes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxTripTimes.setter
    def MaxTripTimes(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxTripTimes"](arg_inVal.COM_val))

    @property
    def Sequence(self) -> str:
        """The automatic sequence to trigger if the highlighted stopping condition is satisfied."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Sequence.setter
    def Sequence(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequence"](arg_newVal.COM_val))

    @property
    def Constraints(self) -> "IAgVAConstraintCollection":
        """Further conditions that must be met in order for the stopping condition to be deemed satisfied."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAConstraintCollection:
            agcls.evaluate_hresult(self.__dict__["_GetConstraints"](byref(arg_ppVAConstraintCollection.COM_val)))
            return arg_ppVAConstraintCollection.python_val

    @property
    def Criterion(self) -> "AgEVAAccessCriterion":
        """Specifies the direction from which the stopping condition value must be achieved."""
        with agmarshall.AgEnum_arg(AgEVAAccessCriterion) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCriterion"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Criterion.setter
    def Criterion(self, newVal:"AgEVAAccessCriterion") -> None:
        with agmarshall.AgEnum_arg(AgEVAAccessCriterion, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCriterion"](arg_newVal.COM_val))

    @property
    def BeforeConditions(self) -> "IAgVAStoppingConditionCollection":
        """A 'before' stopping condition is used to define a stopping condition that depends on two events. Astrogator will ignore a stopping condition until its 'before' conditions are met. Astrogator then interpolates backwards to the normal stopping condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetBeforeConditions"](byref(arg_ppStoppingConditionCollection.COM_val)))
            return arg_ppStoppingConditionCollection.python_val

    @property
    def AberrationType(self) -> "AgEAberrationType":
        """Sets the model of aberration to be used in access computations."""
        with agmarshall.AgEnum_arg(AgEAberrationType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAberrationType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AberrationType.setter
    def AberrationType(self, inVal:"AgEAberrationType") -> None:
        with agmarshall.AgEnum_arg(AgEAberrationType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAberrationType"](arg_inVal.COM_val))

    def SetBaseSelection(self, selection:"AgEVABaseSelection") -> None:
        """BaseSelection"""
        with agmarshall.AgEnum_arg(AgEVABaseSelection, selection) as arg_selection:
            agcls.evaluate_hresult(self.__dict__["_SetBaseSelection"](arg_selection.COM_val))

    @property
    def BaseSelectionType(self) -> "AgEVABaseSelection":
        """The base object for the access calculation."""
        with agmarshall.AgEnum_arg(AgEVABaseSelection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseSelectionType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def BaseSelection(self) -> "IAgLinkToObject":
        """Returns the base selection object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseSelection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ClockHost(self) -> "AgEIvClockHost":
        """Time values are reported with a clock colocated with the clock host object."""
        with agmarshall.AgEnum_arg(AgEIvClockHost) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClockHost"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClockHost.setter
    def ClockHost(self, inVal:"AgEIvClockHost") -> None:
        with agmarshall.AgEnum_arg(AgEIvClockHost, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetClockHost"](arg_inVal.COM_val))

    @property
    def SignalSense(self) -> "AgEIvTimeSense":
        """Sets the direction of the signal."""
        with agmarshall.AgEnum_arg(AgEIvTimeSense) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSignalSense"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SignalSense.setter
    def SignalSense(self, inVal:"AgEIvTimeSense") -> None:
        with agmarshall.AgEnum_arg(AgEIvTimeSense, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSignalSense"](arg_inVal.COM_val))

    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The target object for the access calculation."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeDelayConvergenceTolerance(self) -> float:
        """The tolerance used when iterating to determine the light time delay. The iteration stops when the improvement in the value is less than this tolerance. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeDelayConvergenceTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeDelayConvergenceTolerance.setter
    def TimeDelayConvergenceTolerance(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeDelayConvergenceTolerance"](arg_inVal.COM_val))

    @property
    def UseLightTimeDelay(self) -> bool:
        """Whether to consider light time delay in access computations."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseLightTimeDelay"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseLightTimeDelay.setter
    def UseLightTimeDelay(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseLightTimeDelay"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2A2D2F12-9F9B-43F6-B6B0-00088C006504}", IAgVAAccessStoppingCondition)
agcls.AgTypeNameMap["IAgVAAccessStoppingCondition"] = IAgVAAccessStoppingCondition
__all__.append("IAgVAAccessStoppingCondition")

class IAgVAMCSPropagate(object):
    """Properties for a Propagate segment."""
    _uuid = "{41E66E06-FD6A-4523-8956-B0DF0BE5479E}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPropagatorName"] = _raise_uninitialized_error
        self.__dict__["_SetPropagatorName"] = _raise_uninitialized_error
        self.__dict__["_GetStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_GetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSPropagate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSPropagate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSPropagate = agcom.GUID(IAgVAMCSPropagate._uuid)
        vtable_offset_local = IAgVAMCSPropagate._vtable_offset - 1
        self.__dict__["_GetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+14, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSPropagate, vtable_offset_local+21, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSPropagate.__dict__ and type(IAgVAMCSPropagate.__dict__[attrname]) == property:
            return IAgVAMCSPropagate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSPropagate.")
    
    @property
    def PropagatorName(self) -> str:
        """The propagator."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropagatorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropagatorName"](arg_newVal.COM_val))

    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The list of stopping conditions defined for the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetStoppingConditions"](byref(arg_ppVAStoppingConditionCollection.COM_val)))
            return arg_ppVAStoppingConditionCollection.python_val

    @property
    def MinPropagationTime(self) -> float:
        """The minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinPropagationTime"](arg_newVal.COM_val))

    @property
    def MaxPropagationTime(self) -> float:
        """The maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableMaxPropagationTime(self) -> bool:
        """If true, the maximum propagation time is enforced."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableWarningMessage(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWarningMessage"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWarningMessage"](arg_newVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Enables or disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlAdvanced") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"](arg_newVal.COM_val))

    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{41E66E06-FD6A-4523-8956-B0DF0BE5479E}", IAgVAMCSPropagate)
agcls.AgTypeNameMap["IAgVAMCSPropagate"] = IAgVAMCSPropagate
__all__.append("IAgVAMCSPropagate")

class IAgVAMCSSequence(object):
    """Properties for a Sequence segment."""
    _uuid = "{0FE48F27-40D3-4D78-9B87-6539D1977696}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_SetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_GetGenerateEphemeris"] = _raise_uninitialized_error
        self.__dict__["_SetGenerateEphemeris"] = _raise_uninitialized_error
        self.__dict__["_GetSegments"] = _raise_uninitialized_error
        self.__dict__["_GetSequenceStateToPass"] = _raise_uninitialized_error
        self.__dict__["_SetSequenceStateToPass"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_ApplyScript"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSSequence._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSSequence from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSSequence = agcom.GUID(IAgVAMCSSequence._uuid)
        vtable_offset_local = IAgVAMCSSequence._vtable_offset - 1
        self.__dict__["_GetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetGenerateEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetGenerateEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetSegments"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetSequenceStateToPass"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetSequenceStateToPass"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_ApplyScript"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSSequence, vtable_offset_local+9, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSSequence.__dict__ and type(IAgVAMCSSequence.__dict__[attrname]) == property:
            return IAgVAMCSSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSSequence.")
    
    @property
    def RepeatCount(self) -> int:
        """The number of times that the sequence will be executed. A sequence that is repeated is executed immediately subsequent to the previous execution of the sequence. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRepeatCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RepeatCount.setter
    def RepeatCount(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRepeatCount"](arg_newVal.COM_val))

    @property
    def GenerateEphemeris(self) -> bool:
        """If true, the sequence generates ephemeris and displays it in the 2D and 3D Graphics windows."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGenerateEphemeris"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GenerateEphemeris.setter
    def GenerateEphemeris(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGenerateEphemeris"](arg_newVal.COM_val))

    @property
    def Segments(self) -> "IAgVAMCSSegmentCollection":
        """The list of segments defined for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegmentCollection:
            agcls.evaluate_hresult(self.__dict__["_GetSegments"](byref(arg_ppVAMCSSegmentCollection.COM_val)))
            return arg_ppVAMCSSegmentCollection.python_val

    @property
    def SequenceStateToPass(self) -> "AgEVASequenceStateToPass":
        """State To Pass To Next Segment - the state of the sequence to pass."""
        with agmarshall.AgEnum_arg(AgEVASequenceStateToPass) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequenceStateToPass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SequenceStateToPass.setter
    def SequenceStateToPass(self, inVal:"AgEVASequenceStateToPass") -> None:
        with agmarshall.AgEnum_arg(AgEVASequenceStateToPass, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequenceStateToPass"](arg_inVal.COM_val))

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def ApplyScript(self) -> None:
        """Apply the script."""
        agcls.evaluate_hresult(self.__dict__["_ApplyScript"]())


agcls.AgClassCatalog.add_catalog_entry("{0FE48F27-40D3-4D78-9B87-6539D1977696}", IAgVAMCSSequence)
agcls.AgTypeNameMap["IAgVAMCSSequence"] = IAgVAMCSSequence
__all__.append("IAgVAMCSSequence")

class IAgVAMCSBackwardSequence(IAgVAMCSSequence):
    """Properties for a Backward Sequence segment."""
    _uuid = "{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}"
    _num_methods = 0
    _vtable_offset = IAgVAMCSSequence._vtable_offset + IAgVAMCSSequence._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSBackwardSequence._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSBackwardSequence from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSequence._private_init(self, pUnk)
        IID_IAgVAMCSBackwardSequence = agcom.GUID(IAgVAMCSBackwardSequence._uuid)
        vtable_offset_local = IAgVAMCSBackwardSequence._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSBackwardSequence.__dict__ and type(IAgVAMCSBackwardSequence.__dict__[attrname]) == property:
            return IAgVAMCSBackwardSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAMCSSequence.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{F9AF6E49-B8E0-4E5E-91CC-04E622CBC9EF}", IAgVAMCSBackwardSequence)
agcls.AgTypeNameMap["IAgVAMCSBackwardSequence"] = IAgVAMCSBackwardSequence
__all__.append("IAgVAMCSBackwardSequence")

class IAgVAMCSLaunch(object):
    """Properties for a Launch segment."""
    _uuid = "{C342C18C-80EF-4E1F-8363-90181B755E66}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetStepSize"] = _raise_uninitialized_error
        self.__dict__["_SetStepSize"] = _raise_uninitialized_error
        self.__dict__["_GetPreLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_SetPreLaunchTime"] = _raise_uninitialized_error
        self.__dict__["_GetEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetEpoch"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetInitialAcceleration"] = _raise_uninitialized_error
        self.__dict__["_SetInitialAcceleration"] = _raise_uninitialized_error
        self.__dict__["_GetSpacecraftParameters"] = _raise_uninitialized_error
        self.__dict__["_GetFuelTank"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySystemType"] = _raise_uninitialized_error
        self.__dict__["_SetDisplaySystemType"] = _raise_uninitialized_error
        self.__dict__["_GetDisplaySystem"] = _raise_uninitialized_error
        self.__dict__["_GetAscentType"] = _raise_uninitialized_error
        self.__dict__["_SetAscentType"] = _raise_uninitialized_error
        self.__dict__["_GetTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_SetTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_GetBurnoutType"] = _raise_uninitialized_error
        self.__dict__["_SetBurnoutType"] = _raise_uninitialized_error
        self.__dict__["_GetBurnout"] = _raise_uninitialized_error
        self.__dict__["_GetBurnoutVelocity"] = _raise_uninitialized_error
        self.__dict__["_GetUsePreviousSegmentState"] = _raise_uninitialized_error
        self.__dict__["_SetUsePreviousSegmentState"] = _raise_uninitialized_error
        self.__dict__["_GetSetMetEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetSetMetEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetUserVariables"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSLaunch._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSLaunch from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSLaunch = agcom.GUID(IAgVAMCSLaunch._uuid)
        vtable_offset_local = IAgVAMCSLaunch._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetStepSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStepSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetPreLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPreLaunchTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+11, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetInitialAcceleration"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialAcceleration"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetSpacecraftParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelTank"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+16, POINTER(agcom.PVOID))
        self.__dict__["_GetDisplaySystemType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetDisplaySystemType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetDisplaySystem"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+19, POINTER(agcom.PVOID))
        self.__dict__["_GetAscentType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetAscentType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetBurnoutType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetBurnoutType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetBurnout"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+26, POINTER(agcom.PVOID))
        self.__dict__["_GetBurnoutVelocity"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+27, POINTER(agcom.PVOID))
        self.__dict__["_GetUsePreviousSegmentState"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+28, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUsePreviousSegmentState"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+29, agcom.VARIANT_BOOL)
        self.__dict__["_GetSetMetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+30, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSetMetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+31, agcom.VARIANT_BOOL)
        self.__dict__["_GetUserVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSLaunch, vtable_offset_local+32, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSLaunch.__dict__ and type(IAgVAMCSLaunch.__dict__[attrname]) == property:
            return IAgVAMCSLaunch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSLaunch.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_newVal.COM_val))

    @property
    def StepSize(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStepSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StepSize.setter
    def StepSize(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStepSize"](arg_newVal.COM_val))

    @property
    def PreLaunchTime(self) -> float:
        """The amount of time before the spacecraft's launch that it will be created in the scenario. The vehicle will remain at the launch position until beginning of the launch epoch. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPreLaunchTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PreLaunchTime.setter
    def PreLaunchTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPreLaunchTime"](arg_newVal.COM_val))

    @property
    def Epoch(self) -> typing.Any:
        """The date and time of the launch. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Epoch.setter
    def Epoch(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEpoch"](arg_newVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlLaunch") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlLaunch, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlLaunch") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlLaunch, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlLaunch") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlLaunch, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InitialAcceleration(self) -> float:
        """The initial acceleration, for the Quartic Motion Ascent Type. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialAcceleration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialAcceleration.setter
    def InitialAcceleration(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialAcceleration"](arg_newVal.COM_val))

    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """Satellite Properties - the spacecraft's physical properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppVASpacecraftParameters:
            agcls.evaluate_hresult(self.__dict__["_GetSpacecraftParameters"](byref(arg_ppVASpacecraftParameters.COM_val)))
            return arg_ppVASpacecraftParameters.python_val

    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The spacecraft's fuel tank properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAFuelTank:
            agcls.evaluate_hresult(self.__dict__["_GetFuelTank"](byref(arg_ppVAFuelTank.COM_val)))
            return arg_ppVAFuelTank.python_val

    @property
    def DisplaySystemType(self) -> "AgEVALaunchDisplaySystem":
        """The launch coordinate type."""
        with agmarshall.AgEnum_arg(AgEVALaunchDisplaySystem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySystemType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDisplaySystemType(self, displaySystemType:"AgEVALaunchDisplaySystem") -> None:
        """Sets the display system type."""
        with agmarshall.AgEnum_arg(AgEVALaunchDisplaySystem, displaySystemType) as arg_displaySystemType:
            agcls.evaluate_hresult(self.__dict__["_SetDisplaySystemType"](arg_displaySystemType.COM_val))

    @property
    def DisplaySystem(self) -> "IAgVADisplaySystem":
        """Gets the current Display System."""
        with agmarshall.AgInterface_out_arg() as arg_ppVADisplaySystem:
            agcls.evaluate_hresult(self.__dict__["_GetDisplaySystem"](byref(arg_ppVADisplaySystem.COM_val)))
            return arg_ppVADisplaySystem.python_val

    @property
    def AscentType(self) -> "AgEVAAscentType":
        """The order of the spline used to generate the motion along the ellipse."""
        with agmarshall.AgEnum_arg(AgEVAAscentType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAscentType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AscentType.setter
    def AscentType(self, newVal:"AgEVAAscentType") -> None:
        with agmarshall.AgEnum_arg(AgEVAAscentType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAscentType"](arg_newVal.COM_val))

    @property
    def TimeOfFlight(self) -> float:
        """The time of flight (the time from launch to burnout). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeOfFlight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeOfFlight.setter
    def TimeOfFlight(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeOfFlight"](arg_newVal.COM_val))

    @property
    def BurnoutType(self) -> "AgEVABurnoutType":
        """The burnout type."""
        with agmarshall.AgEnum_arg(AgEVABurnoutType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBurnoutType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetBurnoutType(self, burnoutType:"AgEVABurnoutType") -> None:
        """Sets the burnout type."""
        with agmarshall.AgEnum_arg(AgEVABurnoutType, burnoutType) as arg_burnoutType:
            agcls.evaluate_hresult(self.__dict__["_SetBurnoutType"](arg_burnoutType.COM_val))

    @property
    def Burnout(self) -> "IAgVABurnout":
        """The burnout point definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppVABurnout:
            agcls.evaluate_hresult(self.__dict__["_GetBurnout"](byref(arg_ppVABurnout.COM_val)))
            return arg_ppVABurnout.python_val

    @property
    def BurnoutVelocity(self) -> "IAgVABurnoutVelocity":
        """The burnout velocity definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppVABurnoutVelocity:
            agcls.evaluate_hresult(self.__dict__["_GetBurnoutVelocity"](byref(arg_ppVABurnoutVelocity.COM_val)))
            return arg_ppVABurnoutVelocity.python_val

    @property
    def UsePreviousSegmentState(self) -> bool:
        """If true, the previous segment state is used to define the launch location parameters."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUsePreviousSegmentState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UsePreviousSegmentState.setter
    def UsePreviousSegmentState(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUsePreviousSegmentState"](arg_newVal.COM_val))

    @property
    def SetMetEpoch(self) -> bool:
        """If true, the Mission Elapsed Time epoch will be set to the launch epoch."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSetMetEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SetMetEpoch.setter
    def SetMetEpoch(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSetMetEpoch"](arg_newVal.COM_val))

    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the launch segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVariables"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{C342C18C-80EF-4E1F-8363-90181B755E66}", IAgVAMCSLaunch)
agcls.AgTypeNameMap["IAgVAMCSLaunch"] = IAgVAMCSLaunch
__all__.append("IAgVAMCSLaunch")

class IAgVADisplaySystemGeodetic(IAgVADisplaySystem):
    """Properties for a geodetic launch coordinate system."""
    _uuid = "{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}"
    _num_methods = 6
    _vtable_offset = IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADisplaySystemGeodetic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystemGeodetic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADisplaySystem._private_init(self, pUnk)
        IID_IAgVADisplaySystemGeodetic = agcom.GUID(IAgVADisplaySystemGeodetic._uuid)
        vtable_offset_local = IAgVADisplaySystemGeodetic._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeodetic, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystemGeodetic.__dict__ and type(IAgVADisplaySystemGeodetic.__dict__[attrname]) == property:
            return IAgVADisplaySystemGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVADisplaySystem.__setattr__(self, attrname, value)
    
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude of the launch location. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3A9597F2-E224-44C9-801F-60CA7A1CB2A1}", IAgVADisplaySystemGeodetic)
agcls.AgTypeNameMap["IAgVADisplaySystemGeodetic"] = IAgVADisplaySystemGeodetic
__all__.append("IAgVADisplaySystemGeodetic")

class IAgVADisplaySystemGeocentric(IAgVADisplaySystem):
    """Properties for a geocentric launch coordinate system."""
    _uuid = "{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}"
    _num_methods = 6
    _vtable_offset = IAgVADisplaySystem._vtable_offset + IAgVADisplaySystem._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        self.__dict__["_SetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADisplaySystemGeocentric._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADisplaySystemGeocentric from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADisplaySystem._private_init(self, pUnk)
        IID_IAgVADisplaySystemGeocentric = agcom.GUID(IAgVADisplaySystemGeocentric._uuid)
        vtable_offset_local = IAgVADisplaySystemGeocentric._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVADisplaySystemGeocentric, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADisplaySystemGeocentric.__dict__ and type(IAgVADisplaySystemGeocentric.__dict__[attrname]) == property:
            return IAgVADisplaySystemGeocentric.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVADisplaySystem.__setattr__(self, attrname, value)
    
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the launch location. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the launch location. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Radius(self) -> float:
        """The radius of the launch location. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Radius.setter
    def Radius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadius"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FD9BAAFA-0CDC-481C-A76C-9F25698C468A}", IAgVADisplaySystemGeocentric)
agcls.AgTypeNameMap["IAgVADisplaySystemGeocentric"] = IAgVADisplaySystemGeocentric
__all__.append("IAgVADisplaySystemGeocentric")

class IAgVABurnoutCBFCartesian(IAgVABurnout):
    """Properties for a Cartesian CBF burnout state definition."""
    _uuid = "{A45DD94F-A384-4CCB-B803-F29F2DA41A39}"
    _num_methods = 12
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCartesianBurnoutX"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutX"] = _raise_uninitialized_error
        self.__dict__["_GetCartesianBurnoutY"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutY"] = _raise_uninitialized_error
        self.__dict__["_GetCartesianBurnoutZ"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutZ"] = _raise_uninitialized_error
        self.__dict__["_GetCartesianBurnoutVX"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutVX"] = _raise_uninitialized_error
        self.__dict__["_GetCartesianBurnoutVY"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutVY"] = _raise_uninitialized_error
        self.__dict__["_GetCartesianBurnoutVZ"] = _raise_uninitialized_error
        self.__dict__["_SetCartesianBurnoutVZ"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutCBFCartesian._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutCBFCartesian from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnout._private_init(self, pUnk)
        IID_IAgVABurnoutCBFCartesian = agcom.GUID(IAgVABurnoutCBFCartesian._uuid)
        vtable_offset_local = IAgVABurnoutCBFCartesian._vtable_offset - 1
        self.__dict__["_GetCartesianBurnoutX"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutX"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetCartesianBurnoutY"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutY"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCartesianBurnoutZ"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutZ"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetCartesianBurnoutVX"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutVX"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetCartesianBurnoutVY"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutVY"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetCartesianBurnoutVZ"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCartesianBurnoutVZ"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutCBFCartesian, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutCBFCartesian.__dict__ and type(IAgVABurnoutCBFCartesian.__dict__[attrname]) == property:
            return IAgVABurnoutCBFCartesian.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    @property
    def CartesianBurnoutX(self) -> float:
        """The CBF x component of the spacecraft burnout location. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutX.setter
    def CartesianBurnoutX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutX"](arg_newVal.COM_val))

    @property
    def CartesianBurnoutY(self) -> float:
        """The CBF y component of the spacecraft burnout location. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutY.setter
    def CartesianBurnoutY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutY"](arg_newVal.COM_val))

    @property
    def CartesianBurnoutZ(self) -> float:
        """The CBF z component of the spacecraft burnout location. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutZ.setter
    def CartesianBurnoutZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutZ"](arg_newVal.COM_val))

    @property
    def CartesianBurnoutVX(self) -> float:
        """The CBF x component of the spacecraft burnout velocity. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutVX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutVX.setter
    def CartesianBurnoutVX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutVX"](arg_newVal.COM_val))

    @property
    def CartesianBurnoutVY(self) -> float:
        """The CBF y component of the spacecraft burnout velocity. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutVY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutVY.setter
    def CartesianBurnoutVY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutVY"](arg_newVal.COM_val))

    @property
    def CartesianBurnoutVZ(self) -> float:
        """The CBF z component of the spacecraft burnout velocity. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCartesianBurnoutVZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CartesianBurnoutVZ.setter
    def CartesianBurnoutVZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCartesianBurnoutVZ"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A45DD94F-A384-4CCB-B803-F29F2DA41A39}", IAgVABurnoutCBFCartesian)
agcls.AgTypeNameMap["IAgVABurnoutCBFCartesian"] = IAgVABurnoutCBFCartesian
__all__.append("IAgVABurnoutCBFCartesian")

class IAgVABurnoutGeodetic(IAgVABurnout):
    """Properties for a geodetic burnout point definition."""
    _uuid = "{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}"
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetAltitude"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutGeodetic._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutGeodetic from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnout._private_init(self, pUnk)
        IID_IAgVABurnoutGeodetic = agcom.GUID(IAgVABurnoutGeodetic._uuid)
        vtable_offset_local = IAgVABurnoutGeodetic._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeodetic, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutGeodetic.__dict__ and type(IAgVABurnoutGeodetic.__dict__[attrname]) == property:
            return IAgVABurnoutGeodetic.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Altitude(self) -> float:
        """The altitude of the spacecraft burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Altitude.setter
    def Altitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitude"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{CA74E0CB-01D7-4D65-BC0D-82A469B5E320}", IAgVABurnoutGeodetic)
agcls.AgTypeNameMap["IAgVABurnoutGeodetic"] = IAgVABurnoutGeodetic
__all__.append("IAgVABurnoutGeodetic")

class IAgVABurnoutGeocentric(IAgVABurnout):
    """{Properties for a geocentric burnout point definition."""
    _uuid = "{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}"
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLatitude"] = _raise_uninitialized_error
        self.__dict__["_SetLatitude"] = _raise_uninitialized_error
        self.__dict__["_GetLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        self.__dict__["_SetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutGeocentric._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutGeocentric from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnout._private_init(self, pUnk)
        IID_IAgVABurnoutGeocentric = agcom.GUID(IAgVABurnoutGeocentric._uuid)
        vtable_offset_local = IAgVABurnoutGeocentric._vtable_offset - 1
        self.__dict__["_GetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetLatitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutGeocentric, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutGeocentric.__dict__ and type(IAgVABurnoutGeocentric.__dict__[attrname]) == property:
            return IAgVABurnoutGeocentric.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    @property
    def Latitude(self) -> typing.Any:
        """The latitude of the spacecraft burnout. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Latitude.setter
    def Latitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatitude"](arg_newVal.COM_val))

    @property
    def Longitude(self) -> typing.Any:
        """The longitude of the spacecraft burnout. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Longitude.setter
    def Longitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLongitude"](arg_newVal.COM_val))

    @property
    def Radius(self) -> float:
        """The radius of the spacecraft burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Radius.setter
    def Radius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadius"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BFFA4B30-4A19-4FF9-849D-E6DD6534116D}", IAgVABurnoutGeocentric)
agcls.AgTypeNameMap["IAgVABurnoutGeocentric"] = IAgVABurnoutGeocentric
__all__.append("IAgVABurnoutGeocentric")

class IAgVABurnoutLaunchAzAlt(IAgVABurnout):
    """Properties for a launch azimuth / altitude burnout point definition."""
    _uuid = "{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}"
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetDownRangeDist"] = _raise_uninitialized_error
        self.__dict__["_SetDownRangeDist"] = _raise_uninitialized_error
        self.__dict__["_GetAltitudeRadius"] = _raise_uninitialized_error
        self.__dict__["_SetAltitudeRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutLaunchAzAlt._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutLaunchAzAlt from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnout._private_init(self, pUnk)
        IID_IAgVABurnoutLaunchAzAlt = agcom.GUID(IAgVABurnoutLaunchAzAlt._uuid)
        vtable_offset_local = IAgVABurnoutLaunchAzAlt._vtable_offset - 1
        self.__dict__["_GetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDownRangeDist"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDownRangeDist"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetAltitudeRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAltitudeRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzAlt, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutLaunchAzAlt.__dict__ and type(IAgVABurnoutLaunchAzAlt.__dict__[attrname]) == property:
            return IAgVABurnoutLaunchAzAlt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    @property
    def Azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzimuth"](arg_newVal.COM_val))

    @property
    def DownRangeDist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDownRangeDist"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DownRangeDist.setter
    def DownRangeDist(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDownRangeDist"](arg_newVal.COM_val))

    @property
    def AltitudeRadius(self) -> float:
        """The altitude of the spacecraft at burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAltitudeRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AltitudeRadius.setter
    def AltitudeRadius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAltitudeRadius"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FCE8CBAF-46BE-4F76-AB1A-E2116127A402}", IAgVABurnoutLaunchAzAlt)
agcls.AgTypeNameMap["IAgVABurnoutLaunchAzAlt"] = IAgVABurnoutLaunchAzAlt
__all__.append("IAgVABurnoutLaunchAzAlt")

class IAgVABurnoutLaunchAzRadius(IAgVABurnout):
    """Properties for a launch azimuth / radius burnout point definition."""
    _uuid = "{623DDE08-539E-4BAD-A63D-FCC195094F14}"
    _num_methods = 6
    _vtable_offset = IAgVABurnout._vtable_offset + IAgVABurnout._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetDownRangeDist"] = _raise_uninitialized_error
        self.__dict__["_SetDownRangeDist"] = _raise_uninitialized_error
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        self.__dict__["_SetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABurnoutLaunchAzRadius._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABurnoutLaunchAzRadius from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnout._private_init(self, pUnk)
        IID_IAgVABurnoutLaunchAzRadius = agcom.GUID(IAgVABurnoutLaunchAzRadius._uuid)
        vtable_offset_local = IAgVABurnoutLaunchAzRadius._vtable_offset - 1
        self.__dict__["_GetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDownRangeDist"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDownRangeDist"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVABurnoutLaunchAzRadius, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABurnoutLaunchAzRadius.__dict__ and type(IAgVABurnoutLaunchAzRadius.__dict__[attrname]) == property:
            return IAgVABurnoutLaunchAzRadius.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVABurnout.__setattr__(self, attrname, value)
    
    @property
    def Azimuth(self) -> typing.Any:
        """The azimuth of the launch trajectory. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzimuth"](arg_newVal.COM_val))

    @property
    def DownRangeDist(self) -> float:
        """The downrange distance of the spacecraft from launch at burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDownRangeDist"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DownRangeDist.setter
    def DownRangeDist(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDownRangeDist"](arg_newVal.COM_val))

    @property
    def Radius(self) -> float:
        """The radius of the spacecraft at burnout. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Radius.setter
    def Radius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadius"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{623DDE08-539E-4BAD-A63D-FCC195094F14}", IAgVABurnoutLaunchAzRadius)
agcls.AgTypeNameMap["IAgVABurnoutLaunchAzRadius"] = IAgVABurnoutLaunchAzRadius
__all__.append("IAgVABurnoutLaunchAzRadius")

class IAgVAMCSFollow(object):
    """Properties for a Follow segment."""
    _uuid = "{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLeader"] = _raise_uninitialized_error
        self.__dict__["_GetXOffset"] = _raise_uninitialized_error
        self.__dict__["_SetXOffset"] = _raise_uninitialized_error
        self.__dict__["_GetYOffset"] = _raise_uninitialized_error
        self.__dict__["_SetYOffset"] = _raise_uninitialized_error
        self.__dict__["_GetZOffset"] = _raise_uninitialized_error
        self.__dict__["_SetZOffset"] = _raise_uninitialized_error
        self.__dict__["_GetSeparationConditions"] = _raise_uninitialized_error
        self.__dict__["_GetSpacecraftParameters"] = _raise_uninitialized_error
        self.__dict__["_GetFuelTank"] = _raise_uninitialized_error
        self.__dict__["_GetJoiningType"] = _raise_uninitialized_error
        self.__dict__["_SetJoiningType"] = _raise_uninitialized_error
        self.__dict__["_GetSeparationType"] = _raise_uninitialized_error
        self.__dict__["_SetSeparationType"] = _raise_uninitialized_error
        self.__dict__["_GetSpacecraftAndFuelTankType"] = _raise_uninitialized_error
        self.__dict__["_SetSpacecraftAndFuelTankType"] = _raise_uninitialized_error
        self.__dict__["_GetJoiningConditions"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetUserVariables"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSFollow._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSFollow from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSFollow = agcom.GUID(IAgVAMCSFollow._uuid)
        vtable_offset_local = IAgVAMCSFollow._vtable_offset - 1
        self.__dict__["_GetLeader"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetXOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_SetXOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+3, agcom.DOUBLE)
        self.__dict__["_GetYOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetYOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetZOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetZOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetSeparationConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_GetSpacecraftParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetFuelTank"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetJoiningType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetJoiningType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetSeparationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetSeparationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetSpacecraftAndFuelTankType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetSpacecraftAndFuelTankType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetJoiningConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+19, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+20, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUserVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSFollow, vtable_offset_local+22, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSFollow.__dict__ and type(IAgVAMCSFollow.__dict__[attrname]) == property:
            return IAgVAMCSFollow.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSFollow.")
    
    @property
    def Leader(self) -> "IAgLinkToObject":
        """The leader object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetLeader"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def XOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the X axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetXOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @XOffset.setter
    def XOffset(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetXOffset"](arg_newVal.COM_val))

    @property
    def YOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Y axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetYOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @YOffset.setter
    def YOffset(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetYOffset"](arg_newVal.COM_val))

    @property
    def ZOffset(self) -> float:
        """The distance that the spacecraft will be offset from the leader's body frame along the Z axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetZOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ZOffset.setter
    def ZOffset(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetZOffset"](arg_newVal.COM_val))

    @property
    def SeparationConditions(self) -> "IAgVAStoppingConditionCollection":
        """If separation conditions are specified, the list of separation conditions."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetSeparationConditions"](byref(arg_ppVAStoppingConditionCollection.COM_val)))
            return arg_ppVAStoppingConditionCollection.python_val

    @property
    def SpacecraftParameters(self) -> "IAgVASpacecraftParameters":
        """The spacecraft's physical properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppVASpacecraftParameters:
            agcls.evaluate_hresult(self.__dict__["_GetSpacecraftParameters"](byref(arg_ppVASpacecraftParameters.COM_val)))
            return arg_ppVASpacecraftParameters.python_val

    @property
    def FuelTank(self) -> "IAgVAFuelTank":
        """The spacecraft's fuel tank properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAFuelTank:
            agcls.evaluate_hresult(self.__dict__["_GetFuelTank"](byref(arg_ppVAFuelTank.COM_val)))
            return arg_ppVAFuelTank.python_val

    @property
    def JoiningType(self) -> "AgEVAFollowJoin":
        """The joining type."""
        with agmarshall.AgEnum_arg(AgEVAFollowJoin) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJoiningType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @JoiningType.setter
    def JoiningType(self, newVal:"AgEVAFollowJoin") -> None:
        with agmarshall.AgEnum_arg(AgEVAFollowJoin, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJoiningType"](arg_newVal.COM_val))

    @property
    def SeparationType(self) -> "AgEVAFollowSeparation":
        """The separation type."""
        with agmarshall.AgEnum_arg(AgEVAFollowSeparation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSeparationType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SeparationType.setter
    def SeparationType(self, newVal:"AgEVAFollowSeparation") -> None:
        with agmarshall.AgEnum_arg(AgEVAFollowSeparation, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSeparationType"](arg_newVal.COM_val))

    @property
    def SpacecraftAndFuelTankType(self) -> "AgEVAFollowSpacecraftAndFuelTank":
        """The spacecraft snd fuel tank configuration type."""
        with agmarshall.AgEnum_arg(AgEVAFollowSpacecraftAndFuelTank) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSpacecraftAndFuelTankType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SpacecraftAndFuelTankType.setter
    def SpacecraftAndFuelTankType(self, newVal:"AgEVAFollowSpacecraftAndFuelTank") -> None:
        with agmarshall.AgEnum_arg(AgEVAFollowSpacecraftAndFuelTank, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSpacecraftAndFuelTankType"](arg_newVal.COM_val))

    @property
    def JoiningConditions(self) -> "IAgVAStoppingConditionCollection":
        """If joining conditions are specified, the list of joining conditions."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetJoiningConditions"](byref(arg_ppVAStoppingConditionCollection.COM_val)))
            return arg_ppVAStoppingConditionCollection.python_val

    def EnableControlParameter(self, param:"AgEVAControlFollow") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlFollow, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlFollow") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlFollow, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlFollow") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlFollow, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UserVariables(self) -> "IAgVAUserVariableCollection":
        """Interface used to modify user variables for the follow segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVariables"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{88C0BA74-B2B8-4B69-85B5-94B6CC7DEACE}", IAgVAMCSFollow)
agcls.AgTypeNameMap["IAgVAMCSFollow"] = IAgVAMCSFollow
__all__.append("IAgVAMCSFollow")

class IAgVAMCSManeuver(object):
    """General properties for a Maneuver segment."""
    _uuid = "{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetManeuverType"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverType"] = _raise_uninitialized_error
        self.__dict__["_GetManeuver"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSManeuver._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSManeuver from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSManeuver = agcom.GUID(IAgVAMCSManeuver._uuid)
        vtable_offset_local = IAgVAMCSManeuver._vtable_offset - 1
        self.__dict__["_GetManeuverType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetManeuverType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+6, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSManeuver, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSManeuver.__dict__ and type(IAgVAMCSManeuver.__dict__[attrname]) == property:
            return IAgVAMCSManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSManeuver.")
    
    @property
    def ManeuverType(self) -> "AgEVAManeuverType":
        """The maneuver type."""
        with agmarshall.AgEnum_arg(AgEVAManeuverType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetManeuverType(self, maneuverType:"AgEVAManeuverType") -> None:
        """Sets the maneuver type"""
        with agmarshall.AgEnum_arg(AgEVAManeuverType, maneuverType) as arg_maneuverType:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverType"](arg_maneuverType.COM_val))

    @property
    def Maneuver(self) -> "IAgVAManeuver":
        """The Maneuver properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAManeuver:
            agcls.evaluate_hresult(self.__dict__["_GetManeuver"](byref(arg_ppVAManeuver.COM_val)))
            return arg_ppVAManeuver.python_val

    def EnableControlParameter(self, param:"AgEVAControlManeuver") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlManeuver, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlManeuver") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlManeuver, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlManeuver") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlManeuver, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{B640A28E-36A1-4934-ABC6-1A74C1A1B9E5}", IAgVAMCSManeuver)
agcls.AgTypeNameMap["IAgVAMCSManeuver"] = IAgVAMCSManeuver
__all__.append("IAgVAMCSManeuver")

class IAgVAManeuverFinite(IAgVAManeuver):
    """Engine properties for a Finite Maneuver."""
    _uuid = "{2BE095B5-A674-4868-9178-6ADB00753CBF}"
    _num_methods = 7
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPressureMode"] = _raise_uninitialized_error
        self.__dict__["_SetPressureMode"] = _raise_uninitialized_error
        self.__dict__["_GetThrustEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetThrustEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetThrustEfficiencyMode"] = _raise_uninitialized_error
        self.__dict__["_SetThrustEfficiencyMode"] = _raise_uninitialized_error
        self.__dict__["_GetPropagator"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverFinite._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverFinite from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuver._private_init(self, pUnk)
        IID_IAgVAManeuverFinite = agcom.GUID(IAgVAManeuverFinite._uuid)
        vtable_offset_local = IAgVAManeuverFinite._vtable_offset - 1
        self.__dict__["_GetPressureMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPressureMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetThrustEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetThrustEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetThrustEfficiencyMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetThrustEfficiencyMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetPropagator"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverFinite, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverFinite.__dict__ and type(IAgVAManeuverFinite.__dict__[attrname]) == property:
            return IAgVAManeuverFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    @property
    def PressureMode(self) -> "AgEVAPressureMode":
        """The pressure mode."""
        with agmarshall.AgEnum_arg(AgEVAPressureMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPressureMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PressureMode.setter
    def PressureMode(self, newVal:"AgEVAPressureMode") -> None:
        with agmarshall.AgEnum_arg(AgEVAPressureMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPressureMode"](arg_newVal.COM_val))

    @property
    def ThrustEfficiency(self) -> float:
        """The thrust efficiency value. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustEfficiency.setter
    def ThrustEfficiency(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustEfficiency"](arg_newVal.COM_val))

    @property
    def ThrustEfficiencyMode(self) -> "AgEVAThrustType":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        with agmarshall.AgEnum_arg(AgEVAThrustType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustEfficiencyMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustEfficiencyMode.setter
    def ThrustEfficiencyMode(self, newVal:"AgEVAThrustType") -> None:
        with agmarshall.AgEnum_arg(AgEVAThrustType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustEfficiencyMode"](arg_newVal.COM_val))

    @property
    def Propagator(self) -> "IAgVAManeuverFinitePropagator":
        """The propagator."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAManeuverFinitePropagator:
            agcls.evaluate_hresult(self.__dict__["_GetPropagator"](byref(arg_ppVAManeuverFinitePropagator.COM_val)))
            return arg_ppVAManeuverFinitePropagator.python_val


agcls.AgClassCatalog.add_catalog_entry("{2BE095B5-A674-4868-9178-6ADB00753CBF}", IAgVAManeuverFinite)
agcls.AgTypeNameMap["IAgVAManeuverFinite"] = IAgVAManeuverFinite
__all__.append("IAgVAManeuverFinite")

class IAgVAManeuverImpulsive(IAgVAManeuver):
    """Properties for an Impulsive Maneuver."""
    _uuid = "{41595314-A798-41ED-80DD-0DA873CCF8A0}"
    _num_methods = 2
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUpdateMass"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateMass"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverImpulsive._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverImpulsive from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuver._private_init(self, pUnk)
        IID_IAgVAManeuverImpulsive = agcom.GUID(IAgVAManeuverImpulsive._uuid)
        vtable_offset_local = IAgVAManeuverImpulsive._vtable_offset - 1
        self.__dict__["_GetUpdateMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverImpulsive, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUpdateMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverImpulsive, vtable_offset_local+2, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverImpulsive.__dict__ and type(IAgVAManeuverImpulsive.__dict__[attrname]) == property:
            return IAgVAManeuverImpulsive.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    @property
    def UpdateMass(self) -> bool:
        """True if the mass of the spacecraft will be updated on the basis of fuel usage."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateMass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpdateMass.setter
    def UpdateMass(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateMass"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{41595314-A798-41ED-80DD-0DA873CCF8A0}", IAgVAManeuverImpulsive)
agcls.AgTypeNameMap["IAgVAManeuverImpulsive"] = IAgVAManeuverImpulsive
__all__.append("IAgVAManeuverImpulsive")

class IAgVAAttitudeControlImpulsiveVelocityVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Velocity Vector attitude control for an Impulsive Maneuver."""
    _uuid = "{EF098B53-D99D-4AB6-A227-DED98E48B4DB}"
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsiveVelocityVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveVelocityVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsiveVelocityVector = agcom.GUID(IAgVAAttitudeControlImpulsiveVelocityVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsiveVelocityVector._vtable_offset - 1
        self.__dict__["_GetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveVelocityVector, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveVelocityVector, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveVelocityVector, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveVelocityVector.__dict__ and type(IAgVAAttitudeControlImpulsiveVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeltaVMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeltaVMagnitude"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{EF098B53-D99D-4AB6-A227-DED98E48B4DB}", IAgVAAttitudeControlImpulsiveVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveVelocityVector"] = IAgVAAttitudeControlImpulsiveVelocityVector
__all__.append("IAgVAAttitudeControlImpulsiveVelocityVector")

class IAgVAAttitudeControlImpulsiveAntiVelocityVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Anti-Velocity Vector attitude control for an Impulsive Maneuver."""
    _uuid = "{711B2692-73A2-4C08-9AF3-CC1F93317DF2}"
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsiveAntiVelocityVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveAntiVelocityVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsiveAntiVelocityVector = agcom.GUID(IAgVAAttitudeControlImpulsiveAntiVelocityVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsiveAntiVelocityVector._vtable_offset - 1
        self.__dict__["_GetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAntiVelocityVector, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAntiVelocityVector, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAntiVelocityVector, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__ and type(IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveAntiVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the velocity vector. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeltaVMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeltaVMagnitude"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{711B2692-73A2-4C08-9AF3-CC1F93317DF2}", IAgVAAttitudeControlImpulsiveAntiVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveAntiVelocityVector"] = IAgVAAttitudeControlImpulsiveAntiVelocityVector
__all__.append("IAgVAAttitudeControlImpulsiveAntiVelocityVector")

class IAgVAAttitudeControlImpulsiveAttitude(IAgVAAttitudeControlImpulsive):
    """Properties for the Attitude attitude control for an Impulsive Maneuver."""
    _uuid = "{D9334B8B-9016-4F73-A134-0C61C91060E1}"
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetRefAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetRefAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsiveAttitude._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveAttitude from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsiveAttitude = agcom.GUID(IAgVAAttitudeControlImpulsiveAttitude._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsiveAttitude._vtable_offset - 1
        self.__dict__["_GetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAttitude, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAttitude, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRefAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAttitude, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetRefAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAttitude, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveAttitude, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveAttitude.__dict__ and type(IAgVAAttitudeControlImpulsiveAttitude.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied along the X axis - as defined by the selected axes and rotation. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeltaVMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeltaVMagnitude"](arg_newVal.COM_val))

    @property
    def RefAxesName(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefAxesName.setter
    def RefAxesName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefAxesName"](arg_newVal.COM_val))

    @property
    def Orientation(self) -> "IAgOrientation":
        """The orientation of the attitude."""
        with agmarshall.AgInterface_out_arg() as arg_ppOrientation:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppOrientation.COM_val)))
            return arg_ppOrientation.python_val


agcls.AgClassCatalog.add_catalog_entry("{D9334B8B-9016-4F73-A134-0C61C91060E1}", IAgVAAttitudeControlImpulsiveAttitude)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveAttitude"] = IAgVAAttitudeControlImpulsiveAttitude
__all__.append("IAgVAAttitudeControlImpulsiveAttitude")

class IAgVAAttitudeControlImpulsiveFile(IAgVAAttitudeControlImpulsive):
    """Properties for the File attitude control for an Impulsive Maneuver."""
    _uuid = "{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}"
    _num_methods = 7
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetDeltaVMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetFilename"] = _raise_uninitialized_error
        self.__dict__["_SetFilename"] = _raise_uninitialized_error
        self.__dict__["_GetFileTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetFileTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetFullFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsiveFile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveFile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsiveFile = agcom.GUID(IAgVAAttitudeControlImpulsiveFile._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsiveFile._vtable_offset - 1
        self.__dict__["_GetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeltaVMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetFileTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFileTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetFullFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveFile, vtable_offset_local+7, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveFile.__dict__ and type(IAgVAAttitudeControlImpulsiveFile.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    @property
    def DeltaVMagnitude(self) -> float:
        """The size of the delta-V to be applied to the orbit along the specified direction. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeltaVMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeltaVMagnitude.setter
    def DeltaVMagnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeltaVMagnitude"](arg_newVal.COM_val))

    @property
    def Filename(self) -> str:
        """The attitude file to use."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Filename.setter
    def Filename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFilename"](arg_newVal.COM_val))

    @property
    def FileTimeOffset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFileTimeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FileTimeOffset.setter
    def FileTimeOffset(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFileTimeOffset"](arg_newVal.COM_val))

    @property
    def FullFilename(self) -> str:
        """The full path and name of the attitude file to use."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFullFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{24B73A06-3F9E-4409-AE5E-00504C6A2AD7}", IAgVAAttitudeControlImpulsiveFile)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveFile"] = IAgVAAttitudeControlImpulsiveFile
__all__.append("IAgVAAttitudeControlImpulsiveFile")

class IAgVAAttitudeControlImpulsiveThrustVector(IAgVAAttitudeControlImpulsive):
    """Properties for the Thrust Vector attitude control for an Impulsive Maneuver."""
    _uuid = "{3C985D0B-4049-4C5E-81BC-E394CCE17787}"
    _num_methods = 23
    _vtable_offset = IAgVAAttitudeControlImpulsive._vtable_offset + IAgVAAttitudeControlImpulsive._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        self.__dict__["_GetAllowNegativeSphericalMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetAllowNegativeSphericalMagnitude"] = _raise_uninitialized_error
        self.__dict__["_GetCoordType"] = _raise_uninitialized_error
        self.__dict__["_SetCoordType"] = _raise_uninitialized_error
        self.__dict__["_GetX"] = _raise_uninitialized_error
        self.__dict__["_SetX"] = _raise_uninitialized_error
        self.__dict__["_GetY"] = _raise_uninitialized_error
        self.__dict__["_SetY"] = _raise_uninitialized_error
        self.__dict__["_GetZ"] = _raise_uninitialized_error
        self.__dict__["_SetZ"] = _raise_uninitialized_error
        self.__dict__["_GetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_SetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetElevation"] = _raise_uninitialized_error
        self.__dict__["_SetElevation"] = _raise_uninitialized_error
        self.__dict__["_GetMagnitude"] = _raise_uninitialized_error
        self.__dict__["_SetMagnitude"] = _raise_uninitialized_error
        self.__dict__["_AssignCartesian"] = _raise_uninitialized_error
        self.__dict__["_QueryCartesian"] = _raise_uninitialized_error
        self.__dict__["_AssignSpherical"] = _raise_uninitialized_error
        self.__dict__["_QuerySpherical"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlImpulsiveThrustVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlImpulsiveThrustVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IID_IAgVAAttitudeControlImpulsiveThrustVector = agcom.GUID(IAgVAAttitudeControlImpulsiveThrustVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlImpulsiveThrustVector._vtable_offset - 1
        self.__dict__["_GetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetAllowNegativeSphericalMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowNegativeSphericalMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+5, agcom.VARIANT_BOOL)
        self.__dict__["_GetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+15, agcom.VARIANT)
        self.__dict__["_GetElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+16, POINTER(agcom.VARIANT))
        self.__dict__["_SetElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+17, agcom.VARIANT)
        self.__dict__["_GetMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMagnitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_AssignCartesian"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+20, agcom.DOUBLE, agcom.DOUBLE, agcom.DOUBLE)
        self.__dict__["_QueryCartesian"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+21, POINTER(agcom.SAFEARRAY))
        self.__dict__["_AssignSpherical"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+22, agcom.VARIANT, agcom.VARIANT, agcom.DOUBLE)
        self.__dict__["_QuerySpherical"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlImpulsiveThrustVector, vtable_offset_local+23, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlImpulsiveThrustVector.__dict__ and type(IAgVAAttitudeControlImpulsiveThrustVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlImpulsiveThrustVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlImpulsive.__setattr__(self, attrname, value)
    
    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustAxesName"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val

    @property
    def AllowNegativeSphericalMagnitude(self) -> bool:
        """True if the spherical magnitude should be allowed to be less than zero."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowNegativeSphericalMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AllowNegativeSphericalMagnitude.setter
    def AllowNegativeSphericalMagnitude(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAllowNegativeSphericalMagnitude"](arg_newVal.COM_val))

    @property
    def CoordType(self) -> "AgEVAImpDeltaVRep":
        """The coordinate representation for the DeltaV."""
        with agmarshall.AgEnum_arg(AgEVAImpDeltaVRep) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordType.setter
    def CoordType(self, newVal:"AgEVAImpDeltaVRep") -> None:
        with agmarshall.AgEnum_arg(AgEVAImpDeltaVRep, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordType"](arg_newVal.COM_val))

    @property
    def X(self) -> float:
        """The Cartesian X component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @X.setter
    def X(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetX"](arg_newVal.COM_val))

    @property
    def Y(self) -> float:
        """The Cartesian Y component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y.setter
    def Y(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetY"](arg_newVal.COM_val))

    @property
    def Z(self) -> float:
        """The Cartesian Z component of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Z.setter
    def Z(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetZ"](arg_newVal.COM_val))

    @property
    def Azimuth(self) -> typing.Any:
        """The spherical Azimuth angle of the impulsive DeltaV (dimension: Angle)."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Azimuth.setter
    def Azimuth(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzimuth"](arg_newVal.COM_val))

    @property
    def Elevation(self) -> typing.Any:
        """The spherical Elevation angle of the impulsive DeltaV (dimension: Angle)."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Elevation.setter
    def Elevation(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetElevation"](arg_newVal.COM_val))

    @property
    def Magnitude(self) -> float:
        """The spherical Magnitude of the impulsive DeltaV (dimension: SmallDistance/Time)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMagnitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Magnitude.setter
    def Magnitude(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMagnitude"](arg_newVal.COM_val))

    def AssignCartesian(self, xVal:float, yVal:float, zVal:float) -> None:
        """Assign all three Cartesian components of the DeltaV vector (dimension: SmallDistance/Time)"""
        with agmarshall.DOUBLE_arg(xVal) as arg_xVal, \
             agmarshall.DOUBLE_arg(yVal) as arg_yVal, \
             agmarshall.DOUBLE_arg(zVal) as arg_zVal:
            agcls.evaluate_hresult(self.__dict__["_AssignCartesian"](arg_xVal.COM_val, arg_yVal.COM_val, arg_zVal.COM_val))

    def QueryCartesian(self) -> list:
        """Get all three Cartesian components of the DeltaV vector as an array (dimension: SmallDistance/Time)"""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_QueryCartesian"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def AssignSpherical(self, azVal:typing.Any, elVal:typing.Any, magVal:float) -> None:
        """Assign all three spherical components of the DeltaV vector (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        with agmarshall.VARIANT_arg(azVal) as arg_azVal, \
             agmarshall.VARIANT_arg(elVal) as arg_elVal, \
             agmarshall.DOUBLE_arg(magVal) as arg_magVal:
            agcls.evaluate_hresult(self.__dict__["_AssignSpherical"](arg_azVal.COM_val, arg_elVal.COM_val, arg_magVal.COM_val))

    def QuerySpherical(self) -> list:
        """Get all three spherical components of the DeltaV vector as an array (order Az, El, Mag; dimensions: Angle, Angle, SmallDistance/Time)"""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_QuerySpherical"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{3C985D0B-4049-4C5E-81BC-E394CCE17787}", IAgVAAttitudeControlImpulsiveThrustVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlImpulsiveThrustVector"] = IAgVAAttitudeControlImpulsiveThrustVector
__all__.append("IAgVAAttitudeControlImpulsiveThrustVector")

class IAgVAAttitudeControlFiniteAntiVelocityVector(IAgVAAttitudeControlFinite):
    """Properties for the Anti-Velocity Vector attitude control for a Finite Maneuver."""
    _uuid = "{DB9276FA-2033-425D-9453-A0862C3DC715}"
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteAntiVelocityVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteAntiVelocityVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteAntiVelocityVector = agcom.GUID(IAgVAAttitudeControlFiniteAntiVelocityVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteAntiVelocityVector._vtable_offset - 1
        self.__dict__["_GetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAntiVelocityVector, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAntiVelocityVector, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAntiVelocityVector, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__ and type(IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteAntiVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeUpdate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeUpdate"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{DB9276FA-2033-425D-9453-A0862C3DC715}", IAgVAAttitudeControlFiniteAntiVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteAntiVelocityVector"] = IAgVAAttitudeControlFiniteAntiVelocityVector
__all__.append("IAgVAAttitudeControlFiniteAntiVelocityVector")

class IAgVAAttitudeControlFiniteAttitude(IAgVAAttitudeControlFinite):
    """Properties for the Attitude attitude control for a Finite Maneuver."""
    _uuid = "{BE7E2121-2A2E-4045-BE6F-E75256FDD287}"
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_GetRefAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetRefAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetOrientation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteAttitude._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteAttitude from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteAttitude = agcom.GUID(IAgVAAttitudeControlFiniteAttitude._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteAttitude._vtable_offset - 1
        self.__dict__["_GetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAttitude, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAttitude, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetRefAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAttitude, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetRefAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAttitude, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetOrientation"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteAttitude, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteAttitude.__dict__ and type(IAgVAAttitudeControlFiniteAttitude.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeUpdate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeUpdate"](arg_newVal.COM_val))

    @property
    def RefAxesName(self) -> str:
        """Ref Axes - the reference axes to be used in modeling this maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefAxesName.setter
    def RefAxesName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefAxesName"](arg_newVal.COM_val))

    @property
    def Orientation(self) -> "IAgOrientation":
        """The orientation of the attitude."""
        with agmarshall.AgInterface_out_arg() as arg_ppOrientation:
            agcls.evaluate_hresult(self.__dict__["_GetOrientation"](byref(arg_ppOrientation.COM_val)))
            return arg_ppOrientation.python_val


agcls.AgClassCatalog.add_catalog_entry("{BE7E2121-2A2E-4045-BE6F-E75256FDD287}", IAgVAAttitudeControlFiniteAttitude)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteAttitude"] = IAgVAAttitudeControlFiniteAttitude
__all__.append("IAgVAAttitudeControlFiniteAttitude")

class IAgVAAttitudeControlFiniteFile(IAgVAAttitudeControlFinite):
    """Properties for the File attitude control for a Finite Maneuver."""
    _uuid = "{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}"
    _num_methods = 5
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilename"] = _raise_uninitialized_error
        self.__dict__["_SetFilename"] = _raise_uninitialized_error
        self.__dict__["_GetFileTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_SetFileTimeOffset"] = _raise_uninitialized_error
        self.__dict__["_GetFullFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteFile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteFile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteFile = agcom.GUID(IAgVAAttitudeControlFiniteFile._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteFile._vtable_offset - 1
        self.__dict__["_GetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteFile, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteFile, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetFileTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteFile, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFileTimeOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteFile, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetFullFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteFile, vtable_offset_local+5, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteFile.__dict__ and type(IAgVAAttitudeControlFiniteFile.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def Filename(self) -> str:
        """The attitude file to use."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Filename.setter
    def Filename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFilename"](arg_newVal.COM_val))

    @property
    def FileTimeOffset(self) -> float:
        """The time offset can be used to adjust the time stored in the attitude file. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFileTimeOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FileTimeOffset.setter
    def FileTimeOffset(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFileTimeOffset"](arg_newVal.COM_val))

    @property
    def FullFilename(self) -> str:
        """The full path and name of the attitude file to use."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFullFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{B2B44C74-C8D0-4AE0-A259-F73CD60AEC97}", IAgVAAttitudeControlFiniteFile)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteFile"] = IAgVAAttitudeControlFiniteFile
__all__.append("IAgVAAttitudeControlFiniteFile")

class IAgVAAttitudeControlFiniteThrustVector(IAgVAAttitudeControlFinite):
    """Properties for the Thrust Vector attitude control for a Finite Maneuver."""
    _uuid = "{5928D05A-399E-4773-A934-23E9B9EEF39E}"
    _num_methods = 6
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_GetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        self.__dict__["_GetThrustVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteThrustVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteThrustVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteThrustVector = agcom.GUID(IAgVAAttitudeControlFiniteThrustVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteThrustVector._vtable_offset - 1
        self.__dict__["_GetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetThrustVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteThrustVector, vtable_offset_local+6, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteThrustVector.__dict__ and type(IAgVAAttitudeControlFiniteThrustVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteThrustVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeUpdate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeUpdate"](arg_newVal.COM_val))

    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustAxesName"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val

    @property
    def ThrustVector(self) -> "IAgDirection":
        """Defines the thrust vector in the reference axes."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetThrustVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{5928D05A-399E-4773-A934-23E9B9EEF39E}", IAgVAAttitudeControlFiniteThrustVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteThrustVector"] = IAgVAAttitudeControlFiniteThrustVector
__all__.append("IAgVAAttitudeControlFiniteThrustVector")

class IAgVAAttitudeControlFiniteTimeVarying(IAgVAAttitudeControlFinite):
    """Properties for the Time Varying attitude control for a Finite Maneuver."""
    _uuid = "{52E48F6D-0FD1-4E30-9398-DCCA988454CE}"
    _num_methods = 35
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetThrustAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        self.__dict__["_GetAz0"] = _raise_uninitialized_error
        self.__dict__["_SetAz0"] = _raise_uninitialized_error
        self.__dict__["_GetAz1"] = _raise_uninitialized_error
        self.__dict__["_SetAz1"] = _raise_uninitialized_error
        self.__dict__["_GetAz2"] = _raise_uninitialized_error
        self.__dict__["_SetAz2"] = _raise_uninitialized_error
        self.__dict__["_GetAz3"] = _raise_uninitialized_error
        self.__dict__["_SetAz3"] = _raise_uninitialized_error
        self.__dict__["_GetAz4"] = _raise_uninitialized_error
        self.__dict__["_SetAz4"] = _raise_uninitialized_error
        self.__dict__["_GetAzA"] = _raise_uninitialized_error
        self.__dict__["_SetAzA"] = _raise_uninitialized_error
        self.__dict__["_GetAzF"] = _raise_uninitialized_error
        self.__dict__["_SetAzF"] = _raise_uninitialized_error
        self.__dict__["_GetAzP"] = _raise_uninitialized_error
        self.__dict__["_SetAzP"] = _raise_uninitialized_error
        self.__dict__["_GetEl0"] = _raise_uninitialized_error
        self.__dict__["_SetEl0"] = _raise_uninitialized_error
        self.__dict__["_GetEl1"] = _raise_uninitialized_error
        self.__dict__["_SetEl1"] = _raise_uninitialized_error
        self.__dict__["_GetEl2"] = _raise_uninitialized_error
        self.__dict__["_SetEl2"] = _raise_uninitialized_error
        self.__dict__["_GetEl3"] = _raise_uninitialized_error
        self.__dict__["_SetEl3"] = _raise_uninitialized_error
        self.__dict__["_GetEl4"] = _raise_uninitialized_error
        self.__dict__["_SetEl4"] = _raise_uninitialized_error
        self.__dict__["_GetElA"] = _raise_uninitialized_error
        self.__dict__["_SetElA"] = _raise_uninitialized_error
        self.__dict__["_GetElF"] = _raise_uninitialized_error
        self.__dict__["_SetElF"] = _raise_uninitialized_error
        self.__dict__["_GetElP"] = _raise_uninitialized_error
        self.__dict__["_SetElP"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteTimeVarying._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteTimeVarying from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteTimeVarying = agcom.GUID(IAgVAAttitudeControlFiniteTimeVarying._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteTimeVarying._vtable_offset - 1
        self.__dict__["_GetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetThrustAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetAz0"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAz0"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetAz1"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAz1"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+7, agcom.DOUBLE)
        self.__dict__["_GetAz2"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAz2"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetAz3"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAz3"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetAz4"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAz4"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetAzA"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAzA"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetAzF"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAzF"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetAzP"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAzP"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetEl0"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEl0"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetEl1"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEl1"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetEl2"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+24, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEl2"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+25, agcom.DOUBLE)
        self.__dict__["_GetEl3"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEl3"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+27, agcom.DOUBLE)
        self.__dict__["_GetEl4"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+28, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEl4"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+29, agcom.DOUBLE)
        self.__dict__["_GetElA"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+30, POINTER(agcom.DOUBLE))
        self.__dict__["_SetElA"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+31, agcom.DOUBLE)
        self.__dict__["_GetElF"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+32, POINTER(agcom.DOUBLE))
        self.__dict__["_SetElF"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+33, agcom.DOUBLE)
        self.__dict__["_GetElP"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+34, POINTER(agcom.DOUBLE))
        self.__dict__["_SetElP"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteTimeVarying, vtable_offset_local+35, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteTimeVarying.__dict__ and type(IAgVAAttitudeControlFiniteTimeVarying.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteTimeVarying.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def ThrustAxesName(self) -> str:
        """The thrust axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustAxesName.setter
    def ThrustAxesName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustAxesName"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val

    @property
    def Az0(self) -> float:
        """Azimuth constant term (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAz0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Az0.setter
    def Az0(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAz0"](arg_pVal.COM_val))

    @property
    def Az1(self) -> float:
        """Azimuth linear term (dimension: angle/time)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAz1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Az1.setter
    def Az1(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAz1"](arg_pVal.COM_val))

    @property
    def Az2(self) -> float:
        """Azimuth quadratic term (dimension: angle/time^2)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAz2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Az2.setter
    def Az2(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAz2"](arg_pVal.COM_val))

    @property
    def Az3(self) -> float:
        """Azimuth cubic term (dimension: angle/time^3)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAz3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Az3.setter
    def Az3(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAz3"](arg_pVal.COM_val))

    @property
    def Az4(self) -> float:
        """Azimuth quartic term (dimension: angle/time^4)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAz4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Az4.setter
    def Az4(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAz4"](arg_pVal.COM_val))

    @property
    def AzA(self) -> float:
        """Azimuth sine term amplitude (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AzA.setter
    def AzA(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzA"](arg_pVal.COM_val))

    @property
    def AzF(self) -> float:
        """Azimuth sine term frequency (dimension: angle/time)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzF"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AzF.setter
    def AzF(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzF"](arg_pVal.COM_val))

    @property
    def AzP(self) -> float:
        """Azimuth sine term phase (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzP"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AzP.setter
    def AzP(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetAzP"](arg_pVal.COM_val))

    @property
    def El0(self) -> float:
        """Elevation constant term (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEl0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @El0.setter
    def El0(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEl0"](arg_pVal.COM_val))

    @property
    def El1(self) -> float:
        """Elevation linear term (dimension: angle/time)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEl1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @El1.setter
    def El1(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEl1"](arg_pVal.COM_val))

    @property
    def El2(self) -> float:
        """Elevation quadratic term (dimension: angle/time^2)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEl2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @El2.setter
    def El2(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEl2"](arg_pVal.COM_val))

    @property
    def El3(self) -> float:
        """Elevation cubic term (dimension: angle/time^3)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEl3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @El3.setter
    def El3(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEl3"](arg_pVal.COM_val))

    @property
    def El4(self) -> float:
        """Elevation quartic term (dimension: angle/time^4)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEl4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @El4.setter
    def El4(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetEl4"](arg_pVal.COM_val))

    @property
    def ElA(self) -> float:
        """Elevation sine term amplitude (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElA"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElA.setter
    def ElA(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetElA"](arg_pVal.COM_val))

    @property
    def ElF(self) -> float:
        """Elevation sine term frequency (dimension: angle/time)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElF"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElF.setter
    def ElF(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetElF"](arg_pVal.COM_val))

    @property
    def ElP(self) -> float:
        """Elevation sine term phase (dimension: angle)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElP"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElP.setter
    def ElP(self, pVal:float) -> None:
        with agmarshall.DOUBLE_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetElP"](arg_pVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{52E48F6D-0FD1-4E30-9398-DCCA988454CE}", IAgVAAttitudeControlFiniteTimeVarying)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteTimeVarying"] = IAgVAAttitudeControlFiniteTimeVarying
__all__.append("IAgVAAttitudeControlFiniteTimeVarying")

class IAgVAAttitudeControlFiniteVelocityVector(IAgVAAttitudeControlFinite):
    """Properties for the Velocity Vector attitude control for a Finite Maneuver."""
    _uuid = "{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}"
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_SetAttitudeUpdate"] = _raise_uninitialized_error
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFiniteVelocityVector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFiniteVelocityVector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFiniteVelocityVector = agcom.GUID(IAgVAAttitudeControlFiniteVelocityVector._uuid)
        vtable_offset_local = IAgVAAttitudeControlFiniteVelocityVector._vtable_offset - 1
        self.__dict__["_GetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteVelocityVector, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAttitudeUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteVelocityVector, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFiniteVelocityVector, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFiniteVelocityVector.__dict__ and type(IAgVAAttitudeControlFiniteVelocityVector.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFiniteVelocityVector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    @property
    def AttitudeUpdate(self) -> "AgEVAAttitudeUpdate":
        """How and when the attitude will be updated."""
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAttitudeUpdate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AttitudeUpdate.setter
    def AttitudeUpdate(self, newVal:"AgEVAAttitudeUpdate") -> None:
        with agmarshall.AgEnum_arg(AgEVAAttitudeUpdate, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAttitudeUpdate"](arg_newVal.COM_val))

    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{0AD7345F-8B3C-474A-A1FC-AF0BA8BE4F38}", IAgVAAttitudeControlFiniteVelocityVector)
agcls.AgTypeNameMap["IAgVAAttitudeControlFiniteVelocityVector"] = IAgVAAttitudeControlFiniteVelocityVector
__all__.append("IAgVAAttitudeControlFiniteVelocityVector")

class IAgVAAttitudeControlFinitePlugin(IAgVAAttitudeControlFinite):
    """Properties for the Plugin attitude control for a Finite Maneuver."""
    _uuid = "{97762200-0ECD-423E-83FA-128D9DBC9C59}"
    _num_methods = 3
    _vtable_offset = IAgVAAttitudeControlFinite._vtable_offset + IAgVAAttitudeControlFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SelectPluginByName"] = _raise_uninitialized_error
        self.__dict__["_GetPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlFinitePlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlFinitePlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlFinitePlugin = agcom.GUID(IAgVAAttitudeControlFinitePlugin._uuid)
        vtable_offset_local = IAgVAAttitudeControlFinitePlugin._vtable_offset - 1
        self.__dict__["_SelectPluginByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFinitePlugin, vtable_offset_local+1, agcom.BSTR)
        self.__dict__["_GetPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFinitePlugin, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlFinitePlugin, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlFinitePlugin.__dict__ and type(IAgVAAttitudeControlFinitePlugin.__dict__[attrname]) == property:
            return IAgVAAttitudeControlFinitePlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlFinite.__setattr__(self, attrname, value)
    
    def SelectPluginByName(self, name:str) -> None:
        """Selects plugin using the plugin name."""
        with agmarshall.BSTR_arg(name) as arg_name:
            agcls.evaluate_hresult(self.__dict__["_SelectPluginByName"](arg_name.COM_val))

    @property
    def PluginName(self) -> str:
        """The selected plugin's name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{97762200-0ECD-423E-83FA-128D9DBC9C59}", IAgVAAttitudeControlFinitePlugin)
agcls.AgTypeNameMap["IAgVAAttitudeControlFinitePlugin"] = IAgVAAttitudeControlFinitePlugin
__all__.append("IAgVAAttitudeControlFinitePlugin")

class IAgVAAttitudeControlOptimalFiniteLagrange(IAgVAAttitudeControlOptimalFinite):
    """Properties for the Lagrange Interpolation attitude control for a Optimal Finite Maneuver."""
    _uuid = "{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}"
    _num_methods = 1
    _vtable_offset = IAgVAAttitudeControlOptimalFinite._vtable_offset + IAgVAAttitudeControlOptimalFinite._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetBodyConstraintVector"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAttitudeControlOptimalFiniteLagrange._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAttitudeControlOptimalFiniteLagrange from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlOptimalFinite._private_init(self, pUnk)
        IID_IAgVAAttitudeControlOptimalFiniteLagrange = agcom.GUID(IAgVAAttitudeControlOptimalFiniteLagrange._uuid)
        vtable_offset_local = IAgVAAttitudeControlOptimalFiniteLagrange._vtable_offset - 1
        self.__dict__["_GetBodyConstraintVector"] = IAGFUNCTYPE(pUnk, IID_IAgVAAttitudeControlOptimalFiniteLagrange, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAttitudeControlOptimalFiniteLagrange.__dict__ and type(IAgVAAttitudeControlOptimalFiniteLagrange.__dict__[attrname]) == property:
            return IAgVAAttitudeControlOptimalFiniteLagrange.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAAttitudeControlOptimalFinite.__setattr__(self, attrname, value)
    
    @property
    def BodyConstraintVector(self) -> "IAgDirection":
        """Defines a constraint vector in spacecraft body coordinates to complete the attitude definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetBodyConstraintVector"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val


agcls.AgClassCatalog.add_catalog_entry("{5E65B4C8-BFDB-4812-BE54-FF94FEDFDB12}", IAgVAAttitudeControlOptimalFiniteLagrange)
agcls.AgTypeNameMap["IAgVAAttitudeControlOptimalFiniteLagrange"] = IAgVAAttitudeControlOptimalFiniteLagrange
__all__.append("IAgVAAttitudeControlOptimalFiniteLagrange")

class IAgVAMCSHold(object):
    """Properties for a Hold segment."""
    _uuid = "{E53CB41B-2AFA-40B5-97AE-079CA69F0779}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetStepSize"] = _raise_uninitialized_error
        self.__dict__["_SetStepSize"] = _raise_uninitialized_error
        self.__dict__["_GetHoldFrameName"] = _raise_uninitialized_error
        self.__dict__["_SetHoldFrameName"] = _raise_uninitialized_error
        self.__dict__["_GetEnableHoldAttitude"] = _raise_uninitialized_error
        self.__dict__["_SetEnableHoldAttitude"] = _raise_uninitialized_error
        self.__dict__["_GetStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_GetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMinPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetEnableMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWarningMessage"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideMaxPropagationTime"] = _raise_uninitialized_error
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSHold._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSHold from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSHold = agcom.GUID(IAgVAMCSHold._uuid)
        vtable_offset_local = IAgVAMCSHold._vtable_offset - 1
        self.__dict__["_GetStepSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetStepSize"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetHoldFrameName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetHoldFrameName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetEnableHoldAttitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableHoldAttitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+12, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+13, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWarningMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+18, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOverrideMaxPropagationTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+21, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+22, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSHold, vtable_offset_local+23, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSHold.__dict__ and type(IAgVAMCSHold.__dict__[attrname]) == property:
            return IAgVAMCSHold.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSHold.")
    
    @property
    def StepSize(self) -> float:
        """The time interval between calculated ephemeris output points. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStepSize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StepSize.setter
    def StepSize(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStepSize"](arg_newVal.COM_val))

    @property
    def HoldFrameName(self) -> str:
        """Hold Frame - the reference frame of the Hold segment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHoldFrameName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HoldFrameName.setter
    def HoldFrameName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHoldFrameName"](arg_newVal.COM_val))

    @property
    def EnableHoldAttitude(self) -> bool:
        """Enable Hold Altitude - if true, the spacecraft's attitude is fixed within the hold frame."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableHoldAttitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableHoldAttitude.setter
    def EnableHoldAttitude(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableHoldAttitude"](arg_newVal.COM_val))

    @property
    def StoppingConditions(self) -> "IAgVAStoppingConditionCollection":
        """The stopping conditions defined for the segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAStoppingConditionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetStoppingConditions"](byref(arg_ppVAStoppingConditionCollection.COM_val)))
            return arg_ppVAStoppingConditionCollection.python_val

    @property
    def MinPropagationTime(self) -> float:
        """Minimum Propagation Time - the minimum time that must elapse from the beginning of the segment until Astrogator will begin checking stopping conditions for satisfaction. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinPropagationTime.setter
    def MinPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinPropagationTime"](arg_newVal.COM_val))

    @property
    def MaxPropagationTime(self) -> float:
        """Maximum Propagation Time - the maximum propagation time, after which the segment will end regardless of whether the stopping conditions have been satisfied. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxPropagationTime.setter
    def MaxPropagationTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableMaxPropagationTime(self) -> bool:
        """Enable Maximum Propagation Time - if true, the maximum propagation time will be enforced."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableMaxPropagationTime.setter
    def EnableMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def EnableWarningMessage(self) -> bool:
        """If true, Astrogator will issue a warning message if propagation is stopped by the Maximum Propagation Time parameter."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWarningMessage"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWarningMessage.setter
    def EnableWarningMessage(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWarningMessage"](arg_newVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Enables or disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlAdvanced") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlAdvanced") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlAdvanced, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OverrideMaxPropagationTime(self) -> bool:
        """Override Maximum Propagation Time - if there is a duration or epoch stopping condition that occurs after the maximum propagation time, ignore the maximum propagation time."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideMaxPropagationTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideMaxPropagationTime.setter
    def OverrideMaxPropagationTime(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideMaxPropagationTime"](arg_newVal.COM_val))

    @property
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self) -> bool:
        """Stop immediately if propagation begins beyond an active epoch stopping condition."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldStopForInitiallySurpassedEpochStoppingConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldStopForInitiallySurpassedEpochStoppingConditions.setter
    def ShouldStopForInitiallySurpassedEpochStoppingConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldStopForInitiallySurpassedEpochStoppingConditions"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E53CB41B-2AFA-40B5-97AE-079CA69F0779}", IAgVAMCSHold)
agcls.AgTypeNameMap["IAgVAMCSHold"] = IAgVAMCSHold
__all__.append("IAgVAMCSHold")

class IAgVAMCSUpdate(object):
    """Properties for an Update segment."""
    _uuid = "{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_SetActionAndValue"] = _raise_uninitialized_error
        self.__dict__["_GetAction"] = _raise_uninitialized_error
        self.__dict__["_GetValue"] = _raise_uninitialized_error
        self.__dict__["_SetAction"] = _raise_uninitialized_error
        self.__dict__["_SetValue"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        self.__dict__["_GetUserVariables"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSUpdate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSUpdate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSUpdate = agcom.GUID(IAgVAMCSUpdate._uuid)
        vtable_offset_local = IAgVAMCSUpdate._vtable_offset - 1
        self.__dict__["_SetActionAndValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+1, agcom.LONG, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_GetAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+2, agcom.LONG, POINTER(agcom.LONG))
        self.__dict__["_GetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+3, agcom.LONG, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+4, agcom.LONG, agcom.LONG)
        self.__dict__["_SetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+5, agcom.LONG, agcom.DOUBLE)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+8, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetUserVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSUpdate, vtable_offset_local+10, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSUpdate.__dict__ and type(IAgVAMCSUpdate.__dict__[attrname]) == property:
            return IAgVAMCSUpdate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSUpdate.")
    
    def SetActionAndValue(self, parameterType:"AgEVAUpdateParam", actionType:"AgEVAUpdateAction", value:float) -> None:
        """Sets an action and the new value."""
        with agmarshall.AgEnum_arg(AgEVAUpdateParam, parameterType) as arg_parameterType, \
             agmarshall.AgEnum_arg(AgEVAUpdateAction, actionType) as arg_actionType, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetActionAndValue"](arg_parameterType.COM_val, arg_actionType.COM_val, arg_value.COM_val))

    def GetAction(self, parameterType:"AgEVAUpdateParam") -> "AgEVAUpdateAction":
        """Gets the action type for a parameter."""
        with agmarshall.AgEnum_arg(AgEVAUpdateParam, parameterType) as arg_parameterType, \
             agmarshall.AgEnum_arg(AgEVAUpdateAction) as arg_pActionType:
            agcls.evaluate_hresult(self.__dict__["_GetAction"](arg_parameterType.COM_val, byref(arg_pActionType.COM_val)))
            return arg_pActionType.python_val

    def GetValue(self, parameterType:"AgEVAUpdateParam") -> float:
        """Gets the value type for a parameter."""
        with agmarshall.AgEnum_arg(AgEVAUpdateParam, parameterType) as arg_parameterType, \
             agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetValue"](arg_parameterType.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetAction(self, parameterName:"AgEVAUpdateParam", actionType:"AgEVAUpdateAction") -> None:
        """Sets the update action type."""
        with agmarshall.AgEnum_arg(AgEVAUpdateParam, parameterName) as arg_parameterName, \
             agmarshall.AgEnum_arg(AgEVAUpdateAction, actionType) as arg_actionType:
            agcls.evaluate_hresult(self.__dict__["_SetAction"](arg_parameterName.COM_val, arg_actionType.COM_val))

    def SetValue(self, parameterName:"AgEVAUpdateParam", value:float) -> None:
        """Sets the update value."""
        with agmarshall.AgEnum_arg(AgEVAUpdateParam, parameterName) as arg_parameterName, \
             agmarshall.DOUBLE_arg(value) as arg_value:
            agcls.evaluate_hresult(self.__dict__["_SetValue"](arg_parameterName.COM_val, arg_value.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlUpdate") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlUpdate, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlUpdate") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlUpdate, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlUpdate") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlUpdate, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UserVariables(self) -> "IAgVAUserVariableUpdateCollection":
        """Interface used to modify user variables for the update segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserVariables"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{070D13DE-2D3C-4002-8D20-A8483EA1F8E3}", IAgVAMCSUpdate)
agcls.AgTypeNameMap["IAgVAMCSUpdate"] = IAgVAMCSUpdate
__all__.append("IAgVAMCSUpdate")

class IAgVAMCSReturn(object):
    """Properties for a Return segment."""
    _uuid = "{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReturnControlToParentSequence"] = _raise_uninitialized_error
        self.__dict__["_SetReturnControlToParentSequence"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSReturn._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSReturn from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSReturn = agcom.GUID(IAgVAMCSReturn._uuid)
        vtable_offset_local = IAgVAMCSReturn._vtable_offset - 1
        self.__dict__["_GetReturnControlToParentSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSReturn, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetReturnControlToParentSequence"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSReturn, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSReturn.__dict__ and type(IAgVAMCSReturn.__dict__[attrname]) == property:
            return IAgVAMCSReturn.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSReturn.")
    
    @property
    def ReturnControlToParentSequence(self) -> "AgEVAReturnControl":
        """The state of the segment."""
        with agmarshall.AgEnum_arg(AgEVAReturnControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReturnControlToParentSequence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReturnControlToParentSequence.setter
    def ReturnControlToParentSequence(self, newVal:"AgEVAReturnControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAReturnControl, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetReturnControlToParentSequence"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9C9AB217-64E6-4697-98F8-3B4BCB34AD62}", IAgVAMCSReturn)
agcls.AgTypeNameMap["IAgVAMCSReturn"] = IAgVAMCSReturn
__all__.append("IAgVAMCSReturn")

class IAgVAMCSStop(object):
    """Properties for a Stop segment."""
    _uuid = "{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnabled"] = _raise_uninitialized_error
        self.__dict__["_SetEnabled"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSStop._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSStop from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSStop = agcom.GUID(IAgVAMCSStop._uuid)
        vtable_offset_local = IAgVAMCSStop._vtable_offset - 1
        self.__dict__["_GetEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSStop, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSStop, vtable_offset_local+2, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSStop.__dict__ and type(IAgVAMCSStop.__dict__[attrname]) == property:
            return IAgVAMCSStop.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSStop.")
    
    @property
    def Enabled(self) -> bool:
        """If true, the segment will stop the execution of the MCS."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enabled.setter
    def Enabled(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnabled"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E6CFAA75-3E0C-4B68-9897-66B5556DCD5B}", IAgVAMCSStop)
agcls.AgTypeNameMap["IAgVAMCSStop"] = IAgVAMCSStop
__all__.append("IAgVAMCSStop")

class IAgVAProfile(object):
    """General properties for target sequence profiles."""
    _uuid = "{CA331A4E-223E-410B-987C-9BE49AEC33A2}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Copy"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetStatus"] = _raise_uninitialized_error
        self.__dict__["_GetUserComment"] = _raise_uninitialized_error
        self.__dict__["_SetUserComment"] = _raise_uninitialized_error
        self.__dict__["_GetMode"] = _raise_uninitialized_error
        self.__dict__["_SetMode"] = _raise_uninitialized_error
        self.__dict__["_GetType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAProfile = agcom.GUID(IAgVAProfile._uuid)
        vtable_offset_local = IAgVAProfile._vtable_offset - 1
        self.__dict__["_Copy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_GetStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfile, vtable_offset_local+9, POINTER(agcom.LONG))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfile.__dict__ and type(IAgVAProfile.__dict__[attrname]) == property:
            return IAgVAProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAProfile.")
    
    def Copy(self) -> "IAgVAProfile":
        """Makes a copy of the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_Copy"](byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    @property
    def Name(self) -> str:
        """The name of the profile."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_inVal.COM_val))

    @property
    def Status(self) -> str:
        """The status of the profile."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStatus"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UserComment(self) -> str:
        """A user comment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserComment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserComment"](arg_inVal.COM_val))

    @property
    def Mode(self) -> "AgEVAProfileMode":
        """The profile's mode."""
        with agmarshall.AgEnum_arg(AgEVAProfileMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Mode.setter
    def Mode(self, inVal:"AgEVAProfileMode") -> None:
        with agmarshall.AgEnum_arg(AgEVAProfileMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMode"](arg_inVal.COM_val))

    @property
    def Type(self) -> "AgEVAProfile":
        """Return the current profile type."""
        with agmarshall.AgEnum_arg(AgEVAProfile) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{CA331A4E-223E-410B-987C-9BE49AEC33A2}", IAgVAProfile)
agcls.AgTypeNameMap["IAgVAProfile"] = IAgVAProfile
__all__.append("IAgVAProfile")

class IAgVAProfileCollection(object):
    """Properties for a list of target sequence profiles."""
    _uuid = "{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}"
    _num_methods = 14
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetAvailableProfiles"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_Add2"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAProfileCollection = agcom.GUID(IAgVAProfileCollection._uuid)
        vtable_offset_local = IAgVAProfileCollection._vtable_offset - 1
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+2, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetAvailableProfiles"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+5, POINTER(agcom.SAFEARRAY))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+7, )
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+10, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+11, agcom.PVOID, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Add2"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+12, agcom.BSTR, agcom.VARIANT, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+13, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileCollection, vtable_offset_local+14, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileCollection.__dict__ and type(IAgVAProfileCollection.__dict__[attrname]) == property:
            return IAgVAProfileCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAProfileCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAProfile":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Add(self, profileName:str) -> "IAgVAProfile":
        """Adds a profile."""
        with agmarshall.BSTR_arg(profileName) as arg_profileName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_profileName.COM_val, byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    def Item(self, indexOrName:typing.Any) -> "IAgVAProfile":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def AvailableProfiles(self) -> list:
        """Returns a list of available profiles."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetAvailableProfiles"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Remove(self, indexOrProfileName:typing.Any) -> None:
        """Removes an item from the profile collection."""
        with agmarshall.VARIANT_arg(indexOrProfileName) as arg_indexOrProfileName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrProfileName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all profiles from the profile collection."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies the profile into the clipboard and removes profile from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self, indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Pastes the profile from the clipboard and inserts into the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgEnum_arg(AgEVAProfileInsertDirection, direction) as arg_direction, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Paste"](arg_indexOrName.COM_val, arg_direction.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def InsertCopy(self, profile:"IAgVAProfile", indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Copies the profile and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(profile, IAgVAProfile) as arg_profile, \
             agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgEnum_arg(AgEVAProfileInsertDirection, direction) as arg_direction, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_profile.COM_val, arg_indexOrName.COM_val, arg_direction.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Add2(self, profileName:str, indexOrName:typing.Any, direction:"AgEVAProfileInsertDirection") -> "IAgVAProfile":
        """Adds a profile."""
        with agmarshall.BSTR_arg(profileName) as arg_profileName, \
             agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgEnum_arg(AgEVAProfileInsertDirection, direction) as arg_direction, \
             agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_Add2"](arg_profileName.COM_val, arg_indexOrName.COM_val, arg_direction.COM_val, byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAProfile":
        """Allows you to retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    def GetItemByName(self, name:str) -> "IAgVAProfile":
        """Allows you to retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppVAProfile:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppVAProfile.COM_val)))
            return arg_ppVAProfile.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{BA4A3DD4-79DF-4E22-A71B-A0F0A484CA5A}", IAgVAProfileCollection)
agcls.AgTypeNameMap["IAgVAProfileCollection"] = IAgVAProfileCollection
__all__.append("IAgVAProfileCollection")

class IAgVAMCSTargetSequence(object):
    """General properties of a TargetSequence segment."""
    _uuid = "{703A8064-AB76-41FC-AADA-5134C30DB1C9}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAction"] = _raise_uninitialized_error
        self.__dict__["_SetAction"] = _raise_uninitialized_error
        self.__dict__["_GetWhenProfilesFinish"] = _raise_uninitialized_error
        self.__dict__["_SetWhenProfilesFinish"] = _raise_uninitialized_error
        self.__dict__["_GetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_SetContinueOnFailure"] = _raise_uninitialized_error
        self.__dict__["_GetSegments"] = _raise_uninitialized_error
        self.__dict__["_GetProfiles"] = _raise_uninitialized_error
        self.__dict__["_ApplyProfiles"] = _raise_uninitialized_error
        self.__dict__["_ResetProfiles"] = _raise_uninitialized_error
        self.__dict__["_ApplyProfile"] = _raise_uninitialized_error
        self.__dict__["_ResetProfile"] = _raise_uninitialized_error
        self.__dict__["_ApplyProfileByName"] = _raise_uninitialized_error
        self.__dict__["_ResetProfileByName"] = _raise_uninitialized_error
        self.__dict__["_GetResetInnerTargeters"] = _raise_uninitialized_error
        self.__dict__["_SetResetInnerTargeters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMCSTargetSequence._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMCSTargetSequence from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMCSTargetSequence = agcom.GUID(IAgVAMCSTargetSequence._uuid)
        vtable_offset_local = IAgVAMCSTargetSequence._vtable_offset - 1
        self.__dict__["_GetAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetWhenProfilesFinish"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetWhenProfilesFinish"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetContinueOnFailure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetSegments"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetProfiles"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_ApplyProfiles"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+9, )
        self.__dict__["_ResetProfiles"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+10, )
        self.__dict__["_ApplyProfile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+11, agcom.PVOID)
        self.__dict__["_ResetProfile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+12, agcom.PVOID)
        self.__dict__["_ApplyProfileByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+13, agcom.BSTR)
        self.__dict__["_ResetProfileByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetResetInnerTargeters"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+15, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetResetInnerTargeters"] = IAGFUNCTYPE(pUnk, IID_IAgVAMCSTargetSequence, vtable_offset_local+16, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMCSTargetSequence.__dict__ and type(IAgVAMCSTargetSequence.__dict__[attrname]) == property:
            return IAgVAMCSTargetSequence.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMCSTargetSequence.")
    
    @property
    def Action(self) -> "AgEVATargetSeqAction":
        """Whether to run the sequence nominally or using profiles."""
        with agmarshall.AgEnum_arg(AgEVATargetSeqAction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Action.setter
    def Action(self, newVal:"AgEVATargetSeqAction") -> None:
        with agmarshall.AgEnum_arg(AgEVATargetSeqAction, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAction"](arg_newVal.COM_val))

    @property
    def WhenProfilesFinish(self) -> "AgEVAProfilesFinish":
        """When Profiles Converge - the action to be carried out if targeting has converged."""
        with agmarshall.AgEnum_arg(AgEVAProfilesFinish) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWhenProfilesFinish"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WhenProfilesFinish.setter
    def WhenProfilesFinish(self, newVal:"AgEVAProfilesFinish") -> None:
        with agmarshall.AgEnum_arg(AgEVAProfilesFinish, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWhenProfilesFinish"](arg_newVal.COM_val))

    @property
    def ContinueOnFailure(self) -> bool:
        """Continue if profiles don't converge - if true, the target sequence continues if a profile fails to converge; otherwise, the MCS will stop upon the failure of a search profile."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetContinueOnFailure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ContinueOnFailure.setter
    def ContinueOnFailure(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetContinueOnFailure"](arg_newVal.COM_val))

    @property
    def Segments(self) -> "IAgVAMCSSegmentCollection":
        """Returns the segments contained within the target sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSSegmentCollection:
            agcls.evaluate_hresult(self.__dict__["_GetSegments"](byref(arg_ppVAMCSSegmentCollection.COM_val)))
            return arg_ppVAMCSSegmentCollection.python_val

    @property
    def Profiles(self) -> "IAgVAProfileCollection":
        """Returns the profiles used within the target sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAProfileCollection:
            agcls.evaluate_hresult(self.__dict__["_GetProfiles"](byref(arg_ppVAProfileCollection.COM_val)))
            return arg_ppVAProfileCollection.python_val

    def ApplyProfiles(self) -> None:
        """Apply Changes - applies the current values of search profiles' controls and the changes specified by the segment configuration profiles to the segments within the target sequence."""
        agcls.evaluate_hresult(self.__dict__["_ApplyProfiles"]())

    def ResetProfiles(self) -> None:
        """Reset - resets the controls of the search profiles to the segments' values."""
        agcls.evaluate_hresult(self.__dict__["_ResetProfiles"]())

    def ApplyProfile(self, profile:"IAgVAProfile") -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        with agmarshall.AgInterface_in_arg(profile, IAgVAProfile) as arg_profile:
            agcls.evaluate_hresult(self.__dict__["_ApplyProfile"](arg_profile.COM_val))

    def ResetProfile(self, profile:"IAgVAProfile") -> None:
        """Reset - resets the current values of specified profile."""
        with agmarshall.AgInterface_in_arg(profile, IAgVAProfile) as arg_profile:
            agcls.evaluate_hresult(self.__dict__["_ResetProfile"](arg_profile.COM_val))

    def ApplyProfileByName(self, profile:str) -> None:
        """Apply Changes - applies the current values of specified profile to the segments within the target sequence."""
        with agmarshall.BSTR_arg(profile) as arg_profile:
            agcls.evaluate_hresult(self.__dict__["_ApplyProfileByName"](arg_profile.COM_val))

    def ResetProfileByName(self, profile:str) -> None:
        """Reset - resets the current values of specified profile."""
        with agmarshall.BSTR_arg(profile) as arg_profile:
            agcls.evaluate_hresult(self.__dict__["_ResetProfileByName"](arg_profile.COM_val))

    @property
    def ResetInnerTargeters(self) -> bool:
        """If true, inner target sequences will have their profiles reset before each run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResetInnerTargeters"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ResetInnerTargeters.setter
    def ResetInnerTargeters(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetResetInnerTargeters"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{703A8064-AB76-41FC-AADA-5134C30DB1C9}", IAgVAMCSTargetSequence)
agcls.AgTypeNameMap["IAgVAMCSTargetSequence"] = IAgVAMCSTargetSequence
__all__.append("IAgVAMCSTargetSequence")

class IAgVADCControl(object):
    """Properties for control parameters of a differential corrector profile."""
    _uuid = "{5F55DF8A-688A-48E6-A084-48E270AB766E}"
    _num_methods = 25
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetFinalValue"] = _raise_uninitialized_error
        self.__dict__["_GetLastUpdate"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetInitialValue"] = _raise_uninitialized_error
        self.__dict__["_GetPerturbation"] = _raise_uninitialized_error
        self.__dict__["_SetPerturbation"] = _raise_uninitialized_error
        self.__dict__["_GetCorrection"] = _raise_uninitialized_error
        self.__dict__["_SetCorrection"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetScalingMethod"] = _raise_uninitialized_error
        self.__dict__["_SetScalingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetValues"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADCControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADCControl = agcom.GUID(IAgVADCControl._uuid)
        vtable_offset_local = IAgVADCControl._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetFinalValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_GetLastUpdate"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetInitialValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_GetPerturbation"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetPerturbation"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetCorrection"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetCorrection"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+14, POINTER(agcom.VARIANT))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+15, agcom.VARIANT)
        self.__dict__["_GetScalingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+16, POINTER(agcom.LONG))
        self.__dict__["_SetScalingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+18, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+19, agcom.VARIANT)
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+22, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetValues"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControl, vtable_offset_local+25, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCControl.__dict__ and type(IAgVADCControl.__dict__[attrname]) == property:
            return IAgVADCControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCControl.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def FinalValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LastUpdate(self) -> typing.Any:
        """The amount by which the value of the independent variable changed during the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLastUpdate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Perturbation(self) -> typing.Any:
        """The value to be used in calculating numerical derivatives. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPerturbation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Perturbation.setter
    def Perturbation(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPerturbation"](arg_newVal.COM_val))

    @property
    def Correction(self) -> typing.Any:
        """The amount by which the nominal value of the parameter should be corrected to achieve the selected goals. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCorrection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Correction.setter
    def Correction(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCorrection"](arg_newVal.COM_val))

    @property
    def Tolerance(self) -> typing.Any:
        """The smallest update to the parameter to be made before the targeter stops. Only used if the convergence criteria is set to 'Either equality constraints or last control parameter updates within tolerance'. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_newVal.COM_val))

    @property
    def MaxStep(self) -> typing.Any:
        """The maximum increment to make to the value of the parameter in any one step. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_newVal.COM_val))

    @property
    def ScalingMethod(self) -> "AgEVADCScalingMethod":
        """Allows better numerical behavior if the parameters have very different magnitudes. The same scaling method is applied to all parameters."""
        with agmarshall.AgEnum_arg(AgEVADCScalingMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingMethod.setter
    def ScalingMethod(self, newVal:"AgEVADCScalingMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVADCScalingMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingMethod"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def Dimension(self) -> str:
        """Dimension of the constraint."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{5F55DF8A-688A-48E6-A084-48E270AB766E}", IAgVADCControl)
agcls.AgTypeNameMap["IAgVADCControl"] = IAgVADCControl
__all__.append("IAgVADCControl")

class IAgVADCResult(object):
    """Properties for equality constraints of a differential corrector profile."""
    _uuid = "{F55E0916-7FAE-469B-AB4F-9D09C26BB554}"
    _num_methods = 22
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_SetDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetDifference"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetScalingMethod"] = _raise_uninitialized_error
        self.__dict__["_SetScalingMethod"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetWeight"] = _raise_uninitialized_error
        self.__dict__["_SetWeight"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetValues"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADCResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADCResult = agcom.GUID(IAgVADCResult._uuid)
        vtable_offset_local = IAgVADCResult._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_SetDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetDifference"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetScalingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetScalingMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+19, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+21, agcom.BSTR)
        self.__dict__["_GetValues"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResult, vtable_offset_local+22, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCResult.__dict__ and type(IAgVADCResult.__dict__[attrname]) == property:
            return IAgVADCResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCResult.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DesiredValue(self) -> typing.Any:
        """The desired value. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDesiredValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DesiredValue.setter
    def DesiredValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDesiredValue"](arg_newVal.COM_val))

    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Difference(self) -> typing.Any:
        """The difference between the current and desired value for this dependent variable. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDifference"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Tolerance(self) -> typing.Any:
        """How close the targeter should come to the desired value before stopping. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Tolerance.setter
    def Tolerance(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_newVal.COM_val))

    @property
    def ScalingMethod(self) -> "AgEVADCScalingMethod":
        """Allows better numerical behavior if the constraints have very different magnitudes. The same scaling method is applied to all constraints."""
        with agmarshall.AgEnum_arg(AgEVADCScalingMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingMethod.setter
    def ScalingMethod(self, newVal:"AgEVADCScalingMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVADCScalingMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingMethod"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied. This is used to emphasize/de-emphasize the importance of one constraint relative to the others. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWeight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Weight.setter
    def Weight(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWeight"](arg_newVal.COM_val))

    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{F55E0916-7FAE-469B-AB4F-9D09C26BB554}", IAgVADCResult)
agcls.AgTypeNameMap["IAgVADCResult"] = IAgVADCResult
__all__.append("IAgVADCResult")

class IAgVASearchPluginControl(object):
    """Properties of search plugin control parameters."""
    _uuid = "{71AB197F-79CB-438C-8F0A-A48FA0069865}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetParentSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetInitialValue"] = _raise_uninitialized_error
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetValues"] = _raise_uninitialized_error
        self.__dict__["_SetCurrentValue"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASearchPluginControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASearchPluginControl = agcom.GUID(IAgVASearchPluginControl._uuid)
        vtable_offset_local = IAgVASearchPluginControl._vtable_offset - 1
        self.__dict__["_GetControlName"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+2, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetInitialValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+11, agcom.BSTR)
        self.__dict__["_GetValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+12, POINTER(agcom.SAFEARRAY))
        self.__dict__["_SetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControl, vtable_offset_local+13, agcom.VARIANT)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginControl.__dict__ and type(IAgVASearchPluginControl.__dict__[attrname]) == property:
            return IAgVASearchPluginControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginControl.")
    
    @property
    def ControlName(self) -> str:
        """The name of the control parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The current value of the control parameter."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentSegmentName(self) -> str:
        """The parent segment of the control parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InitialValue(self) -> typing.Any:
        """The initial value of the control parameter. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Values(self) -> list:
        """List of values of this independent variable at each iteration, including nominal run. Dimension depends on context."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCurrentValue"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{71AB197F-79CB-438C-8F0A-A48FA0069865}", IAgVASearchPluginControl)
agcls.AgTypeNameMap["IAgVASearchPluginControl"] = IAgVASearchPluginControl
__all__.append("IAgVASearchPluginControl")

class IAgVASearchPluginResult(object):
    """Properties of search plugin equality constraints."""
    _uuid = "{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetResultName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetParentSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        self.__dict__["_GetDimension"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetValues"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASearchPluginResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASearchPluginResult = agcom.GUID(IAgVASearchPluginResult._uuid)
        vtable_offset_local = IAgVASearchPluginResult._vtable_offset - 1
        self.__dict__["_GetResultName"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+2, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResult, vtable_offset_local+11, POINTER(agcom.SAFEARRAY))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginResult.__dict__ and type(IAgVASearchPluginResult.__dict__[attrname]) == property:
            return IAgVASearchPluginResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginResult.")
    
    @property
    def ResultName(self) -> str:
        """The name of the equality constraint."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResultName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The current value of the result variable."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentSegmentName(self) -> str:
        """The parent segment of the result variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Dimension(self) -> str:
        """The dimension of the values."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDimension"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def Values(self) -> list:
        """List of values of this dependent variable at each iteration, including nominal run. Dimension depends on context."""
        with agmarshall.SAFEARRAY_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValues"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{7881FB30-0FB9-43EF-98A1-9CF84D69A23F}", IAgVASearchPluginResult)
agcls.AgTypeNameMap["IAgVASearchPluginResult"] = IAgVASearchPluginResult
__all__.append("IAgVASearchPluginResult")

class IAgVASearchPluginResultCollection(object):
    """Properties for the list of search plugin equality constraints."""
    _uuid = "{48F5FEA5-9306-4115-B120-E479FD31A601}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASearchPluginResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASearchPluginResultCollection = agcom.GUID(IAgVASearchPluginResultCollection._uuid)
        vtable_offset_local = IAgVASearchPluginResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginResultCollection.__dict__ and type(IAgVASearchPluginResultCollection.__dict__[attrname]) == property:
            return IAgVASearchPluginResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVASearchPluginResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVASearchPluginResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_searchConstraintResult:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_searchConstraintResult.COM_val)))
            return arg_searchConstraintResult.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Function to enumerate through the collection"""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Size of the collection"""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVASearchPluginResult":
        """Returns the result specified by the object/result path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_searchConstraintResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_searchConstraintResult.COM_val)))
            return arg_searchConstraintResult.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{48F5FEA5-9306-4115-B120-E479FD31A601}", IAgVASearchPluginResultCollection)
agcls.AgTypeNameMap["IAgVASearchPluginResultCollection"] = IAgVASearchPluginResultCollection
__all__.append("IAgVASearchPluginResultCollection")

class IAgVASearchPluginControlCollection(object):
    """Properties for the list of search plugin control parameters."""
    _uuid = "{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASearchPluginControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASearchPluginControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASearchPluginControlCollection = agcom.GUID(IAgVASearchPluginControlCollection._uuid)
        vtable_offset_local = IAgVASearchPluginControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVASearchPluginControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASearchPluginControlCollection.__dict__ and type(IAgVASearchPluginControlCollection.__dict__[attrname]) == property:
            return IAgVASearchPluginControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASearchPluginControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVASearchPluginControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVASearchPluginControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_searchPluginControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_searchPluginControl.COM_val)))
            return arg_searchPluginControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Property that allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVASearchPluginControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_searchPluginControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_searchPluginControl.COM_val)))
            return arg_searchPluginControl.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6DAD8352-416A-402F-BD38-40CEF9E0CE4C}", IAgVASearchPluginControlCollection)
agcls.AgTypeNameMap["IAgVASearchPluginControlCollection"] = IAgVASearchPluginControlCollection
__all__.append("IAgVASearchPluginControlCollection")

class IAgVADCControlCollection(object):
    """Properties for the list of control parameters for a differential corrector profile."""
    _uuid = "{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}"
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetControlByPaths"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADCControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADCControlCollection = agcom.GUID(IAgVADCControlCollection._uuid)
        vtable_offset_local = IAgVADCControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetControlByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControlCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVADCControlCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCControlCollection.__dict__ and type(IAgVADCControlCollection.__dict__[attrname]) == property:
            return IAgVADCControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVADCControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVADCControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_dCControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_dCControl.COM_val)))
            return arg_dCControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetControlByPaths(self, objectPath:str, controlPath:str) -> "IAgVADCControl":
        """Returns the control specified by the object/control path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(controlPath) as arg_controlPath, \
             agmarshall.AgInterface_out_arg() as arg_dCControl:
            agcls.evaluate_hresult(self.__dict__["_GetControlByPaths"](arg_objectPath.COM_val, arg_controlPath.COM_val, byref(arg_dCControl.COM_val)))
            return arg_dCControl.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{271A0046-EC08-49FC-A75A-4D49B6E7AD3A}", IAgVADCControlCollection)
agcls.AgTypeNameMap["IAgVADCControlCollection"] = IAgVADCControlCollection
__all__.append("IAgVADCControlCollection")

class IAgVADCResultCollection(object):
    """Differential Corrector result collection."""
    _uuid = "{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}"
    _num_methods = 5
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetResultByPaths"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADCResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADCResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADCResultCollection = agcom.GUID(IAgVADCResultCollection._uuid)
        vtable_offset_local = IAgVADCResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetResultByPaths"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResultCollection, vtable_offset_local+4, agcom.BSTR, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVADCResultCollection, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADCResultCollection.__dict__ and type(IAgVADCResultCollection.__dict__[attrname]) == property:
            return IAgVADCResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADCResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVADCResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVADCResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_dCResult:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_dCResult.COM_val)))
            return arg_dCResult.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def GetResultByPaths(self, objectPath:str, resultPath:str) -> "IAgVADCResult":
        """Returns the result specified by the object/result path."""
        with agmarshall.BSTR_arg(objectPath) as arg_objectPath, \
             agmarshall.BSTR_arg(resultPath) as arg_resultPath, \
             agmarshall.AgInterface_out_arg() as arg_dCResult:
            agcls.evaluate_hresult(self.__dict__["_GetResultByPaths"](arg_objectPath.COM_val, arg_resultPath.COM_val, byref(arg_dCResult.COM_val)))
            return arg_dCResult.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{1AB78F87-F0BC-42DF-80C9-AAACF11FE5D4}", IAgVADCResultCollection)
agcls.AgTypeNameMap["IAgVADCResultCollection"] = IAgVADCResultCollection
__all__.append("IAgVADCResultCollection")

class IAgVATargeterGraphActiveControl(object):
    """Properties for targeter graph active control."""
    _uuid = "{341791C5-446F-4812-BDE8-702EE9D3D980}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetShowGraphValue"] = _raise_uninitialized_error
        self.__dict__["_SetShowGraphValue"] = _raise_uninitialized_error
        self.__dict__["_GetLineColor"] = _raise_uninitialized_error
        self.__dict__["_SetLineColor"] = _raise_uninitialized_error
        self.__dict__["_GetPointStyle"] = _raise_uninitialized_error
        self.__dict__["_SetPointStyle"] = _raise_uninitialized_error
        self.__dict__["_GetYAxis"] = _raise_uninitialized_error
        self.__dict__["_SetYAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraphActiveControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphActiveControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraphActiveControl = agcom.GUID(IAgVATargeterGraphActiveControl._uuid)
        vtable_offset_local = IAgVATargeterGraphActiveControl._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_GetShowGraphValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowGraphValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+5, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+6, agcom.OLE_COLOR)
        self.__dict__["_GetPointStyle"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetPointStyle"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetYAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetYAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControl, vtable_offset_local+10, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphActiveControl.__dict__ and type(IAgVATargeterGraphActiveControl.__dict__[attrname]) == property:
            return IAgVATargeterGraphActiveControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphActiveControl.")
    
    @property
    def Name(self) -> str:
        """The name of the active control."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ParentName(self) -> str:
        """The segment or component to which the element belongs."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ShowGraphValue(self) -> bool:
        """Show the value."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowGraphValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowGraphValue.setter
    def ShowGraphValue(self, inVal:bool) -> None:
        """Show the value."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowGraphValue"](arg_inVal.COM_val))

    @property
    def LineColor(self) -> agcolor.Color:
        """Line Color."""
        with agmarshall.OLE_COLOR_arg() as arg_pValue:
            agcls.evaluate_hresult(self.__dict__["_GetLineColor"](byref(arg_pValue.COM_val)))
            return arg_pValue.python_val

    @LineColor.setter
    def LineColor(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        with agmarshall.OLE_COLOR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLineColor"](arg_inVal.COM_val))

    @property
    def PointStyle(self) -> str:
        """Point Style."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPointStyle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PointStyle.setter
    def PointStyle(self, inVal:str) -> None:
        """Point Style."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPointStyle"](arg_inVal.COM_val))

    @property
    def YAxis(self) -> str:
        """Select whether to display the control's value range on the left or right side of the graph."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetYAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @YAxis.setter
    def YAxis(self, inVal:str) -> None:
        """Select whether to display the control's value range on the left or right side of the graph."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetYAxis"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{341791C5-446F-4812-BDE8-702EE9D3D980}", IAgVATargeterGraphActiveControl)
agcls.AgTypeNameMap["IAgVATargeterGraphActiveControl"] = IAgVATargeterGraphActiveControl
__all__.append("IAgVATargeterGraphActiveControl")

class IAgVATargeterGraphResult(object):
    """Properties for targeter graph result."""
    _uuid = "{16985A6D-61AE-467F-9A66-255556F9C8E1}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetShowDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_SetShowDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_GetLineColor"] = _raise_uninitialized_error
        self.__dict__["_SetLineColor"] = _raise_uninitialized_error
        self.__dict__["_GetPointStyle"] = _raise_uninitialized_error
        self.__dict__["_SetPointStyle"] = _raise_uninitialized_error
        self.__dict__["_GetYAxis"] = _raise_uninitialized_error
        self.__dict__["_SetYAxis"] = _raise_uninitialized_error
        self.__dict__["_GetGraphOption"] = _raise_uninitialized_error
        self.__dict__["_SetGraphOption"] = _raise_uninitialized_error
        self.__dict__["_GetShowToleranceBand"] = _raise_uninitialized_error
        self.__dict__["_SetShowToleranceBand"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraphResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraphResult = agcom.GUID(IAgVATargeterGraphResult._uuid)
        vtable_offset_local = IAgVATargeterGraphResult._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_GetShowDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+5, POINTER(agcom.OLE_COLOR))
        self.__dict__["_SetLineColor"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+6, agcom.OLE_COLOR)
        self.__dict__["_GetPointStyle"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetPointStyle"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetYAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetYAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetGraphOption"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetGraphOption"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetShowToleranceBand"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowToleranceBand"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResult, vtable_offset_local+14, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphResult.__dict__ and type(IAgVATargeterGraphResult.__dict__[attrname]) == property:
            return IAgVATargeterGraphResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphResult.")
    
    @property
    def Name(self) -> str:
        """The name of the result."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ParentName(self) -> str:
        """The segment or component for which this result has been selected."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ShowDesiredValue(self) -> bool:
        """Show the desired value."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowDesiredValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowDesiredValue.setter
    def ShowDesiredValue(self, inVal:bool) -> None:
        """Show the desired value."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowDesiredValue"](arg_inVal.COM_val))

    @property
    def LineColor(self) -> agcolor.Color:
        """Line Color."""
        with agmarshall.OLE_COLOR_arg() as arg_pValue:
            agcls.evaluate_hresult(self.__dict__["_GetLineColor"](byref(arg_pValue.COM_val)))
            return arg_pValue.python_val

    @LineColor.setter
    def LineColor(self, inVal:agcolor.Color) -> None:
        """Line Color."""
        with agmarshall.OLE_COLOR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLineColor"](arg_inVal.COM_val))

    @property
    def PointStyle(self) -> str:
        """Point Style."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPointStyle"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @PointStyle.setter
    def PointStyle(self, inVal:str) -> None:
        """Point Style."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPointStyle"](arg_inVal.COM_val))

    @property
    def YAxis(self) -> str:
        """Select whether to display the result's value range on the left or right side of the graph."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetYAxis"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @YAxis.setter
    def YAxis(self, inVal:str) -> None:
        """Select whether to display the result's value range on the left or right side of the graph."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetYAxis"](arg_inVal.COM_val))

    @property
    def GraphOption(self) -> "AgEVAGraphOption":
        """Graph option."""
        with agmarshall.AgEnum_arg(AgEVAGraphOption) as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetGraphOption"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @GraphOption.setter
    def GraphOption(self, inVal:"AgEVAGraphOption") -> None:
        """Graph option."""
        with agmarshall.AgEnum_arg(AgEVAGraphOption, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGraphOption"](arg_inVal.COM_val))

    @property
    def ShowToleranceBand(self) -> bool:
        """Show the tolerance band."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowToleranceBand"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowToleranceBand.setter
    def ShowToleranceBand(self, inVal:bool) -> None:
        """Show the tolerance band."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowToleranceBand"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{16985A6D-61AE-467F-9A66-255556F9C8E1}", IAgVATargeterGraphResult)
agcls.AgTypeNameMap["IAgVATargeterGraphResult"] = IAgVATargeterGraphResult
__all__.append("IAgVATargeterGraphResult")

class IAgVATargeterGraphActiveControlCollection(object):
    """Targeter graph active controls."""
    _uuid = "{57FE9616-8C44-4F5B-8B31-F005C0B678A2}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraphActiveControlCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphActiveControlCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraphActiveControlCollection = agcom.GUID(IAgVATargeterGraphActiveControlCollection._uuid)
        vtable_offset_local = IAgVATargeterGraphActiveControlCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControlCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControlCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControlCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphActiveControlCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphActiveControlCollection.__dict__ and type(IAgVATargeterGraphActiveControlCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphActiveControlCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphActiveControlCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVATargeterGraphActiveControl":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVATargeterGraphActiveControl":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_dCControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_dCControl.COM_val)))
            return arg_dCControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{57FE9616-8C44-4F5B-8B31-F005C0B678A2}", IAgVATargeterGraphActiveControlCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphActiveControlCollection"] = IAgVATargeterGraphActiveControlCollection
__all__.append("IAgVATargeterGraphActiveControlCollection")

class IAgVATargeterGraphResultCollection(object):
    """Targeter graph results."""
    _uuid = "{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}"
    _num_methods = 4
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraphResultCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphResultCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraphResultCollection = agcom.GUID(IAgVATargeterGraphResultCollection._uuid)
        vtable_offset_local = IAgVATargeterGraphResultCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResultCollection, vtable_offset_local+1, agcom.LONG, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResultCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResultCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphResultCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphResultCollection.__dict__ and type(IAgVATargeterGraphResultCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphResultCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphResultCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVATargeterGraphResult":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, index:int) -> "IAgVATargeterGraphResult":
        """Allows you to iterate through the collection."""
        with agmarshall.LONG_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_dCControl:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_index.COM_val, byref(arg_dCControl.COM_val)))
            return arg_dCControl.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{00E250BC-BA84-4ED7-A6A8-43FA17EF2731}", IAgVATargeterGraphResultCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphResultCollection"] = IAgVATargeterGraphResultCollection
__all__.append("IAgVATargeterGraphResultCollection")

class IAgVATargeterGraph(object):
    """Properties for a Targeter Graph."""
    _uuid = "{418A2587-7803-4746-9A49-1B1A87BB906A}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetGenerateOnRun"] = _raise_uninitialized_error
        self.__dict__["_SetGenerateOnRun"] = _raise_uninitialized_error
        self.__dict__["_GetUserComment"] = _raise_uninitialized_error
        self.__dict__["_SetUserComment"] = _raise_uninitialized_error
        self.__dict__["_GetShowLabelIterations"] = _raise_uninitialized_error
        self.__dict__["_SetShowLabelIterations"] = _raise_uninitialized_error
        self.__dict__["_GetShowDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_SetShowDesiredValue"] = _raise_uninitialized_error
        self.__dict__["_GetShowToleranceBand"] = _raise_uninitialized_error
        self.__dict__["_SetShowToleranceBand"] = _raise_uninitialized_error
        self.__dict__["_GetIndependentVariable"] = _raise_uninitialized_error
        self.__dict__["_SetIndependentVariable"] = _raise_uninitialized_error
        self.__dict__["_GetActiveControls"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraph._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraph from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraph = agcom.GUID(IAgVATargeterGraph._uuid)
        vtable_offset_local = IAgVATargeterGraph._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGenerateOnRun"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetGenerateOnRun"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetShowLabelIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowLabelIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowDesiredValue"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetShowToleranceBand"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShowToleranceBand"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetIndependentVariable"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetIndependentVariable"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetActiveControls"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraph, vtable_offset_local+16, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraph.__dict__ and type(IAgVATargeterGraph.__dict__[attrname]) == property:
            return IAgVATargeterGraph.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraph.")
    
    @property
    def Name(self) -> str:
        """The name of the graph."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Name.setter
    def Name(self, inVal:str) -> None:
        """The name of the graph."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_inVal.COM_val))

    @property
    def GenerateOnRun(self) -> bool:
        """Generate the graph while MCS is being run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGenerateOnRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GenerateOnRun.setter
    def GenerateOnRun(self, inVal:bool) -> None:
        """Generate the graph while MCS is being run."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGenerateOnRun"](arg_inVal.COM_val))

    @property
    def UserComment(self) -> str:
        """User Comment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserComment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        """User Comment."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserComment"](arg_inVal.COM_val))

    @property
    def ShowLabelIterations(self) -> bool:
        """Label each of the points on the graph labeled according to its iteration number."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowLabelIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowLabelIterations.setter
    def ShowLabelIterations(self, inVal:bool) -> None:
        """Label each of the points on the graph labeled according to its iteration number."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowLabelIterations"](arg_inVal.COM_val))

    @property
    def ShowDesiredValue(self) -> bool:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowDesiredValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowDesiredValue.setter
    def ShowDesiredValue(self, inVal:bool) -> None:
        """Show the desired equality constraint value(s) on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowDesiredValue"](arg_inVal.COM_val))

    @property
    def ShowToleranceBand(self) -> bool:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShowToleranceBand"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShowToleranceBand.setter
    def ShowToleranceBand(self, inVal:bool) -> None:
        """Show the tolerance band on the graph. Not applicable to SNOPT and IPOPT search profiles."""
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShowToleranceBand"](arg_inVal.COM_val))

    @property
    def IndependentVariable(self) -> str:
        """Select the graph's X axis."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetIndependentVariable"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @IndependentVariable.setter
    def IndependentVariable(self, inVal:str) -> None:
        """Select the graph's X axis."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIndependentVariable"](arg_inVal.COM_val))

    @property
    def ActiveControls(self) -> "IAgVATargeterGraphActiveControlCollection":
        """Active Controls."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetActiveControls"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Results(self) -> "IAgVATargeterGraphResultCollection":
        """Results."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{418A2587-7803-4746-9A49-1B1A87BB906A}", IAgVATargeterGraph)
agcls.AgTypeNameMap["IAgVATargeterGraph"] = IAgVATargeterGraph
__all__.append("IAgVATargeterGraph")

class IAgVATargeterGraphCollection(object):
    """The list of User Variables accessed through the Driver."""
    _uuid = "{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}"
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_AddGraph"] = _raise_uninitialized_error
        self.__dict__["_RemoveGraph"] = _raise_uninitialized_error
        self.__dict__["_GetProvideRuntimeTypeInfo"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATargeterGraphCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATargeterGraphCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATargeterGraphCollection = agcom.GUID(IAgVATargeterGraphCollection._uuid)
        vtable_offset_local = IAgVATargeterGraphCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_AddGraph"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_RemoveGraph"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_GetProvideRuntimeTypeInfo"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+6, POINTER(agcom.PVOID))
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+9, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+10, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVATargeterGraphCollection, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATargeterGraphCollection.__dict__ and type(IAgVATargeterGraphCollection.__dict__[attrname]) == property:
            return IAgVATargeterGraphCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATargeterGraphCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVATargeterGraph":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVATargeterGraph":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_targeterGraph:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_targeterGraph.COM_val)))
            return arg_targeterGraph.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def AddGraph(self) -> "IAgVATargeterGraph":
        """Adds a new targeter graph."""
        with agmarshall.AgInterface_out_arg() as arg_targeterGraph:
            agcls.evaluate_hresult(self.__dict__["_AddGraph"](byref(arg_targeterGraph.COM_val)))
            return arg_targeterGraph.python_val

    def RemoveGraph(self, indexOrName:typing.Any) -> None:
        """Removes a targeter graph."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_RemoveGraph"](arg_indexOrName.COM_val))

    @property
    def ProvideRuntimeTypeInfo(self) -> "IAgRuntimeTypeInfo":
        """Returns the IAgRuntimeTypeInfo interface to access properties at runtime."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetProvideRuntimeTypeInfo"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a targeter graph to the clipboard and removes the targeter graph from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVATargeterGraph":
        """Pastes a targeter graph from the clipboard into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppGraph:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppGraph.COM_val)))
            return arg_ppGraph.python_val

    def InsertCopy(self, graph:"IAgVATargeterGraph") -> "IAgVATargeterGraph":
        """Copies a targeter graph and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(graph, IAgVATargeterGraph) as arg_graph, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_graph.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVATargeterGraph":
        """Allows you to retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppTargeterGraph:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppTargeterGraph.COM_val)))
            return arg_ppTargeterGraph.python_val

    def GetItemByName(self, name:str) -> "IAgVATargeterGraph":
        """Allows you to retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppTargeterGraph:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppTargeterGraph.COM_val)))
            return arg_ppTargeterGraph.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{10EA0426-F62C-40C1-B1C6-A5B5E0BD0414}", IAgVATargeterGraphCollection)
agcls.AgTypeNameMap["IAgVATargeterGraphCollection"] = IAgVATargeterGraphCollection
__all__.append("IAgVATargeterGraphCollection")

class IAgVAProfileSearchPlugin(IAgVAProfile):
    """Properties of a plugin search profile."""
    _uuid = "{9380509D-A189-453D-B1EF-D1D8E34420FF}"
    _num_methods = 8
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControls"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_SetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileSearchPlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSearchPlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileSearchPlugin = agcom.GUID(IAgVAProfileSearchPlugin._uuid)
        vtable_offset_local = IAgVAProfileSearchPlugin._vtable_offset - 1
        self.__dict__["_GetControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSearchPlugin, vtable_offset_local+8, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSearchPlugin.__dict__ and type(IAgVAProfileSearchPlugin.__dict__[attrname]) == property:
            return IAgVAProfileSearchPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def Controls(self) -> "IAgVASearchPluginControlCollection":
        """The selected control parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppSearchPluginControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControls"](byref(arg_ppSearchPluginControlCollection.COM_val)))
            return arg_ppSearchPluginControlCollection.python_val

    @property
    def Results(self) -> "IAgVASearchPluginResultCollection":
        """The selected equality constraints."""
        with agmarshall.AgInterface_out_arg() as arg_ppSearchPluginResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppSearchPluginResultCollection.COM_val)))
            return arg_ppSearchPluginResultCollection.python_val

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def PluginIdentifier(self) -> str:
        """The plugin identifier."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResetControlsBeforeRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetResetControlsBeforeRun"](arg_newVal.COM_val))

    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{9380509D-A189-453D-B1EF-D1D8E34420FF}", IAgVAProfileSearchPlugin)
agcls.AgTypeNameMap["IAgVAProfileSearchPlugin"] = IAgVAProfileSearchPlugin
__all__.append("IAgVAProfileSearchPlugin")

class IAgVAProfileDifferentialCorrector(IAgVAProfile):
    """Properties for a Differential Corrector profile."""
    _uuid = "{E131F674-A7BA-408C-9109-BF50D16BE4F0}"
    _num_methods = 39
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlParameters"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_GetEnableDisplayStatus"] = _raise_uninitialized_error
        self.__dict__["_SetEnableDisplayStatus"] = _raise_uninitialized_error
        self.__dict__["_GetConvergenceCriteria"] = _raise_uninitialized_error
        self.__dict__["_SetConvergenceCriteria"] = _raise_uninitialized_error
        self.__dict__["_GetEnableLineSearch"] = _raise_uninitialized_error
        self.__dict__["_SetEnableLineSearch"] = _raise_uninitialized_error
        self.__dict__["_GetMaxLineSearchIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxLineSearchIterations"] = _raise_uninitialized_error
        self.__dict__["_GetLineSearchLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLineSearchLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetLineSearchUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetLineSearchUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetLineSearchTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetLineSearchTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetEnableHomotopy"] = _raise_uninitialized_error
        self.__dict__["_SetEnableHomotopy"] = _raise_uninitialized_error
        self.__dict__["_GetHomotopySteps"] = _raise_uninitialized_error
        self.__dict__["_SetHomotopySteps"] = _raise_uninitialized_error
        self.__dict__["_GetDerivativeCalcMethod"] = _raise_uninitialized_error
        self.__dict__["_SetDerivativeCalcMethod"] = _raise_uninitialized_error
        self.__dict__["_GetClearCorrectionsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_SetClearCorrectionsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_GetEnableBPlaneNominal"] = _raise_uninitialized_error
        self.__dict__["_SetEnableBPlaneNominal"] = _raise_uninitialized_error
        self.__dict__["_GetEnableBPlanePerturbations"] = _raise_uninitialized_error
        self.__dict__["_SetEnableBPlanePerturbations"] = _raise_uninitialized_error
        self.__dict__["_GetDrawPerturbation"] = _raise_uninitialized_error
        self.__dict__["_SetDrawPerturbation"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetRootFindingAlgorithm"] = _raise_uninitialized_error
        self.__dict__["_SetRootFindingAlgorithm"] = _raise_uninitialized_error
        self.__dict__["_GetNumIterations"] = _raise_uninitialized_error
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        self.__dict__["_GetStopOnLimitCycleDetection"] = _raise_uninitialized_error
        self.__dict__["_SetStopOnLimitCycleDetection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileDifferentialCorrector._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileDifferentialCorrector from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileDifferentialCorrector = agcom.GUID(IAgVAProfileDifferentialCorrector._uuid)
        vtable_offset_local = IAgVAProfileDifferentialCorrector._vtable_offset - 1
        self.__dict__["_GetControlParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetConvergenceCriteria"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetConvergenceCriteria"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetEnableLineSearch"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableLineSearch"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxLineSearchIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetMaxLineSearchIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetLineSearchLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLineSearchLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetLineSearchUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLineSearchUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetLineSearchTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLineSearchTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetEnableHomotopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableHomotopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+20, agcom.VARIANT_BOOL)
        self.__dict__["_GetHomotopySteps"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetHomotopySteps"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDerivativeCalcMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetDerivativeCalcMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetClearCorrectionsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+25, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetClearCorrectionsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+26, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableBPlaneNominal"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+27, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableBPlaneNominal"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+28, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableBPlanePerturbations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableBPlanePerturbations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+30, agcom.VARIANT_BOOL)
        self.__dict__["_GetDrawPerturbation"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+31, POINTER(agcom.LONG))
        self.__dict__["_SetDrawPerturbation"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+32, agcom.LONG)
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetRootFindingAlgorithm"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+34, POINTER(agcom.LONG))
        self.__dict__["_SetRootFindingAlgorithm"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+35, agcom.LONG)
        self.__dict__["_GetNumIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+36, POINTER(agcom.LONG))
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+37, POINTER(agcom.PVOID))
        self.__dict__["_GetStopOnLimitCycleDetection"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+38, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetStopOnLimitCycleDetection"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileDifferentialCorrector, vtable_offset_local+39, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileDifferentialCorrector.__dict__ and type(IAgVAProfileDifferentialCorrector.__dict__[attrname]) == property:
            return IAgVAProfileDifferentialCorrector.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def ControlParameters(self) -> "IAgVADCControlCollection":
        """The list of control parameters defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVADCControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControlParameters"](byref(arg_ppVADCControlCollection.COM_val)))
            return arg_ppVADCControlCollection.python_val

    @property
    def Results(self) -> "IAgVADCResultCollection":
        """The list of results defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVADCResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVADCResultCollection.COM_val)))
            return arg_ppVADCResultCollection.python_val

    @property
    def MaxIterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_newVal.COM_val))

    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableDisplayStatus"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableDisplayStatus"](arg_newVal.COM_val))

    @property
    def ConvergenceCriteria(self) -> "AgEVAConvergenceCriteria":
        """The convergence criteria."""
        with agmarshall.AgEnum_arg(AgEVAConvergenceCriteria) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConvergenceCriteria"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ConvergenceCriteria.setter
    def ConvergenceCriteria(self, newVal:"AgEVAConvergenceCriteria") -> None:
        with agmarshall.AgEnum_arg(AgEVAConvergenceCriteria, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetConvergenceCriteria"](arg_newVal.COM_val))

    @property
    def EnableLineSearch(self) -> bool:
        """If true, the profile will perform a line search."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableLineSearch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableLineSearch.setter
    def EnableLineSearch(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableLineSearch"](arg_newVal.COM_val))

    @property
    def MaxLineSearchIterations(self) -> int:
        """The number of line search iterations to try before stopping. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxLineSearchIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxLineSearchIterations.setter
    def MaxLineSearchIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxLineSearchIterations"](arg_newVal.COM_val))

    @property
    def LineSearchLowerBound(self) -> float:
        """The low boundary for the line search. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLineSearchLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LineSearchLowerBound.setter
    def LineSearchLowerBound(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLineSearchLowerBound"](arg_newVal.COM_val))

    @property
    def LineSearchUpperBound(self) -> float:
        """The high boundary for the line search. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLineSearchUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LineSearchUpperBound.setter
    def LineSearchUpperBound(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLineSearchUpperBound"](arg_newVal.COM_val))

    @property
    def LineSearchTolerance(self) -> float:
        """The tolerance for the line search. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLineSearchTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LineSearchTolerance.setter
    def LineSearchTolerance(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLineSearchTolerance"](arg_newVal.COM_val))

    @property
    def EnableHomotopy(self) -> bool:
        """If true, the profile will divide the problem into steps to solve it."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableHomotopy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableHomotopy.setter
    def EnableHomotopy(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableHomotopy"](arg_newVal.COM_val))

    @property
    def HomotopySteps(self) -> int:
        """The number of steps to divide a problem into for a homotopic calculation. Dimensionless - ."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHomotopySteps"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HomotopySteps.setter
    def HomotopySteps(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHomotopySteps"](arg_newVal.COM_val))

    @property
    def DerivativeCalcMethod(self) -> "AgEVADeriveCalcMethod":
        """The derivative calculation method."""
        with agmarshall.AgEnum_arg(AgEVADeriveCalcMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDerivativeCalcMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DerivativeCalcMethod.setter
    def DerivativeCalcMethod(self, newVal:"AgEVADeriveCalcMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVADeriveCalcMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDerivativeCalcMethod"](arg_newVal.COM_val))

    @property
    def ClearCorrectionsBeforeRun(self) -> bool:
        """Clear Corrections Before Each Run - if true, the differential corrector is automatically reset each time that it is run, discarding information that was computed the last time it was run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClearCorrectionsBeforeRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClearCorrectionsBeforeRun.setter
    def ClearCorrectionsBeforeRun(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetClearCorrectionsBeforeRun"](arg_newVal.COM_val))

    @property
    def EnableBPlaneNominal(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for the nominal run of each iteration during the targeting process."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableBPlaneNominal"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableBPlaneNominal.setter
    def EnableBPlaneNominal(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableBPlaneNominal"](arg_newVal.COM_val))

    @property
    def EnableBPlanePerturbations(self) -> bool:
        """If true, Astrogator will update the display of B-Planes for both of the perturbations of each iteration during the targeting process."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableBPlanePerturbations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableBPlanePerturbations.setter
    def EnableBPlanePerturbations(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableBPlanePerturbations"](arg_newVal.COM_val))

    @property
    def DrawPerturbation(self) -> "AgEVADrawPerturbation":
        """Defines the display of perturbations in the 2D and 3D Graphics windows, if you have set Astrogator to draw while calculating."""
        with agmarshall.AgEnum_arg(AgEVADrawPerturbation) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDrawPerturbation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DrawPerturbation.setter
    def DrawPerturbation(self, newVal:"AgEVADrawPerturbation") -> None:
        with agmarshall.AgEnum_arg(AgEVADrawPerturbation, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDrawPerturbation"](arg_newVal.COM_val))

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def RootFindingAlgorithm(self) -> "AgEVARootFindingAlgorithm":
        """The root-finding algorithm to use."""
        with agmarshall.AgEnum_arg(AgEVARootFindingAlgorithm) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRootFindingAlgorithm"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RootFindingAlgorithm.setter
    def RootFindingAlgorithm(self, pVal:"AgEVARootFindingAlgorithm") -> None:
        with agmarshall.AgEnum_arg(AgEVARootFindingAlgorithm, pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetRootFindingAlgorithm"](arg_pVal.COM_val))

    @property
    def NumIterations(self) -> int:
        """The number of iterations of the last run"""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def StopOnLimitCycleDetection(self) -> bool:
        """If true, Astrogator will stop targeting if a limit cycle is detected."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStopOnLimitCycleDetection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StopOnLimitCycleDetection.setter
    def StopOnLimitCycleDetection(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetStopOnLimitCycleDetection"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E131F674-A7BA-408C-9109-BF50D16BE4F0}", IAgVAProfileDifferentialCorrector)
agcls.AgTypeNameMap["IAgVAProfileDifferentialCorrector"] = IAgVAProfileDifferentialCorrector
__all__.append("IAgVAProfileDifferentialCorrector")

class IAgVAProfileChangeManeuverType(IAgVAProfile):
    """Properties for a Change Maneuver Type profile."""
    _uuid = "{17F50A61-1E84-4060-A86A-93434A5522D5}"
    _num_methods = 4
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegment"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetManeuverType"] = _raise_uninitialized_error
        self.__dict__["_SetManeuverType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileChangeManeuverType._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeManeuverType from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileChangeManeuverType = agcom.GUID(IAgVAProfileChangeManeuverType._uuid)
        vtable_offset_local = IAgVAProfileChangeManeuverType._vtable_offset - 1
        self.__dict__["_GetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeManeuverType, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeManeuverType, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetManeuverType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeManeuverType, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetManeuverType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeManeuverType, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeManeuverType.__dict__ and type(IAgVAProfileChangeManeuverType.__dict__[attrname]) == property:
            return IAgVAProfileChangeManeuverType.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def Segment(self) -> "IAgVAMCSManeuver":
        """The targeted maneuver segment."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAMCSManeuver:
            agcls.evaluate_hresult(self.__dict__["_GetSegment"](byref(arg_ppVAMCSManeuver.COM_val)))
            return arg_ppVAMCSManeuver.python_val

    @Segment.setter
    def Segment(self, pSegment:"IAgVAMCSManeuver") -> None:
        with agmarshall.AgInterface_in_arg(pSegment, IAgVAMCSManeuver) as arg_pSegment:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_pSegment.COM_val))

    @property
    def ManeuverType(self) -> "AgEVAManeuverType":
        """The new maneuver type for the targeted segment."""
        with agmarshall.AgEnum_arg(AgEVAManeuverType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetManeuverType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ManeuverType.setter
    def ManeuverType(self, newVal:"AgEVAManeuverType") -> None:
        with agmarshall.AgEnum_arg(AgEVAManeuverType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetManeuverType"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{17F50A61-1E84-4060-A86A-93434A5522D5}", IAgVAProfileChangeManeuverType)
agcls.AgTypeNameMap["IAgVAProfileChangeManeuverType"] = IAgVAProfileChangeManeuverType
__all__.append("IAgVAProfileChangeManeuverType")

class IAgVAProfileScriptingTool(IAgVAProfile):
    """Properties for a Scripting Tool profile."""
    _uuid = "{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}"
    _num_methods = 10
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentProperties"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObjects"] = _raise_uninitialized_error
        self.__dict__["_GetParameters"] = _raise_uninitialized_error
        self.__dict__["_GetLanguageType"] = _raise_uninitialized_error
        self.__dict__["_SetLanguageType"] = _raise_uninitialized_error
        self.__dict__["_ScriptText"] = _raise_uninitialized_error
        self.__dict__["_CopyToClipboard"] = _raise_uninitialized_error
        self.__dict__["_PasteFromClipboard"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileScriptingTool._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileScriptingTool from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileScriptingTool = agcom.GUID(IAgVAProfileScriptingTool._uuid)
        vtable_offset_local = IAgVAProfileScriptingTool._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetSegmentProperties"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetCalcObjects"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetLanguageType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetLanguageType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_ScriptText"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_CopyToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+9, )
        self.__dict__["_PasteFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileScriptingTool, vtable_offset_local+10, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileScriptingTool.__dict__ and type(IAgVAProfileScriptingTool.__dict__[attrname]) == property:
            return IAgVAProfileScriptingTool.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def Enable(self) -> bool:
        """If true, the scripting tool will be used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_inVal.COM_val))

    @property
    def SegmentProperties(self) -> "IAgVAScriptingSegmentCollection":
        """Returns the collection of the segment properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentProperties"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def CalcObjects(self) -> "IAgVAScriptingCalcObjectCollection":
        """Returns the collection of the calc objects."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjects"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Parameters(self) -> "IAgVAScriptingParameterCollection":
        """Returns the collection of parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetParameters"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def LanguageType(self) -> "AgEVALanguage":
        """The scripting language being used."""
        with agmarshall.AgEnum_arg(AgEVALanguage) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLanguageType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LanguageType.setter
    def LanguageType(self, inVal:"AgEVALanguage") -> None:
        with agmarshall.AgEnum_arg(AgEVALanguage, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLanguageType"](arg_inVal.COM_val))

    def ScriptText(self, script:str) -> None:
        """Injects the script into the scripting tool."""
        with agmarshall.BSTR_arg(script) as arg_script:
            agcls.evaluate_hresult(self.__dict__["_ScriptText"](arg_script.COM_val))

    def CopyToClipboard(self) -> None:
        """Copies entire scripting tool to clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyToClipboard"]())

    def PasteFromClipboard(self) -> None:
        """Replaces entire scripting tool with scripting tool in clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteFromClipboard"]())


agcls.AgClassCatalog.add_catalog_entry("{8D1192C7-8230-4475-BAFF-A135F9EE0ABD}", IAgVAProfileScriptingTool)
agcls.AgTypeNameMap["IAgVAProfileScriptingTool"] = IAgVAProfileScriptingTool
__all__.append("IAgVAProfileScriptingTool")

class IAgVAProfileChangeReturnSegment(IAgVAProfile):
    """Properties for a Change Return Segment profile."""
    _uuid = "{B65E05D2-1B1C-414C-A57E-A93333A5D57C}"
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetState"] = _raise_uninitialized_error
        self.__dict__["_SetState"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileChangeReturnSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeReturnSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileChangeReturnSegment = agcom.GUID(IAgVAProfileChangeReturnSegment._uuid)
        vtable_offset_local = IAgVAProfileChangeReturnSegment._vtable_offset - 1
        self.__dict__["_GetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeReturnSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeReturnSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeReturnSegment, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeReturnSegment, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeReturnSegment, vtable_offset_local+5, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeReturnSegment.__dict__ and type(IAgVAProfileChangeReturnSegment.__dict__[attrname]) == property:
            return IAgVAProfileChangeReturnSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def SegmentName(self) -> str:
        """The targeted return segment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentName"](arg_newVal.COM_val))

    def SetSegment(self, pVAMCSReturn:"IAgVAMCSReturn") -> None:
        """Sets the return segment to target."""
        with agmarshall.AgInterface_in_arg(pVAMCSReturn, IAgVAMCSReturn) as arg_pVAMCSReturn:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_pVAMCSReturn.COM_val))

    @property
    def State(self) -> "AgEVAReturnControl":
        """The new state for the targeted return segment."""
        with agmarshall.AgEnum_arg(AgEVAReturnControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @State.setter
    def State(self, newVal:"AgEVAReturnControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAReturnControl, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetState"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B65E05D2-1B1C-414C-A57E-A93333A5D57C}", IAgVAProfileChangeReturnSegment)
agcls.AgTypeNameMap["IAgVAProfileChangeReturnSegment"] = IAgVAProfileChangeReturnSegment
__all__.append("IAgVAProfileChangeReturnSegment")

class IAgVAProfileChangePropagator(IAgVAProfile):
    """Properties for a Change Propagator profile."""
    _uuid = "{FB6704EC-C787-4051-BE39-1584C5CAD0F6}"
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetPropagatorName"] = _raise_uninitialized_error
        self.__dict__["_SetPropagatorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileChangePropagator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangePropagator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileChangePropagator = agcom.GUID(IAgVAProfileChangePropagator._uuid)
        vtable_offset_local = IAgVAProfileChangePropagator._vtable_offset - 1
        self.__dict__["_GetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangePropagator, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangePropagator, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangePropagator, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangePropagator, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_SetPropagatorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangePropagator, vtable_offset_local+5, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangePropagator.__dict__ and type(IAgVAProfileChangePropagator.__dict__[attrname]) == property:
            return IAgVAProfileChangePropagator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def SegmentName(self) -> str:
        """The name of the profile."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentName"](arg_newVal.COM_val))

    def SetSegment(self, pVAMCSSegment:"IAgVAMCSSegment") -> None:
        """The targeted segment."""
        with agmarshall.AgInterface_in_arg(pVAMCSSegment, IAgVAMCSSegment) as arg_pVAMCSSegment:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_pVAMCSSegment.COM_val))

    @property
    def PropagatorName(self) -> str:
        """The new propagator's name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropagatorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropagatorName.setter
    def PropagatorName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropagatorName"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FB6704EC-C787-4051-BE39-1584C5CAD0F6}", IAgVAProfileChangePropagator)
agcls.AgTypeNameMap["IAgVAProfileChangePropagator"] = IAgVAProfileChangePropagator
__all__.append("IAgVAProfileChangePropagator")

class IAgVAProfileChangeStopSegment(IAgVAProfile):
    """Properties for a Change Stop Segment profile."""
    _uuid = "{1B9A0E28-8C19-448D-9CD1-AB10B492C767}"
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetState"] = _raise_uninitialized_error
        self.__dict__["_SetState"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileChangeStopSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeStopSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileChangeStopSegment = agcom.GUID(IAgVAProfileChangeStopSegment._uuid)
        vtable_offset_local = IAgVAProfileChangeStopSegment._vtable_offset - 1
        self.__dict__["_GetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStopSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStopSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStopSegment, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStopSegment, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStopSegment, vtable_offset_local+5, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeStopSegment.__dict__ and type(IAgVAProfileChangeStopSegment.__dict__[attrname]) == property:
            return IAgVAProfileChangeStopSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def SegmentName(self) -> str:
        """The targeted stop segment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentName"](arg_newVal.COM_val))

    def SetSegment(self, pVAMCSStop:"IAgVAMCSStop") -> None:
        """Sets the stop segment to target."""
        with agmarshall.AgInterface_in_arg(pVAMCSStop, IAgVAMCSStop) as arg_pVAMCSStop:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_pVAMCSStop.COM_val))

    @property
    def State(self) -> "AgEVAState":
        """The new state of the targeted stop segment."""
        with agmarshall.AgEnum_arg(AgEVAState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @State.setter
    def State(self, newVal:"AgEVAState") -> None:
        with agmarshall.AgEnum_arg(AgEVAState, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetState"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1B9A0E28-8C19-448D-9CD1-AB10B492C767}", IAgVAProfileChangeStopSegment)
agcls.AgTypeNameMap["IAgVAProfileChangeStopSegment"] = IAgVAProfileChangeStopSegment
__all__.append("IAgVAProfileChangeStopSegment")

class IAgVAProfileChangeStoppingConditionState(IAgVAProfile):
    """Properties for a Change Stopping Condition State profile."""
    _uuid = "{977C9F84-852A-4B5D-861B-8F9E3809CE7D}"
    _num_methods = 8
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetState"] = _raise_uninitialized_error
        self.__dict__["_SetState"] = _raise_uninitialized_error
        self.__dict__["_SetTrigger"] = _raise_uninitialized_error
        self.__dict__["_GetTriggerName"] = _raise_uninitialized_error
        self.__dict__["_SetTriggerName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileChangeStoppingConditionState._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileChangeStoppingConditionState from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileChangeStoppingConditionState = agcom.GUID(IAgVAProfileChangeStoppingConditionState._uuid)
        vtable_offset_local = IAgVAProfileChangeStoppingConditionState._vtable_offset - 1
        self.__dict__["_GetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_SetState"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_SetTrigger"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+6, agcom.PVOID)
        self.__dict__["_GetTriggerName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetTriggerName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileChangeStoppingConditionState, vtable_offset_local+8, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileChangeStoppingConditionState.__dict__ and type(IAgVAProfileChangeStoppingConditionState.__dict__[attrname]) == property:
            return IAgVAProfileChangeStoppingConditionState.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def SegmentName(self) -> str:
        """The segment that contains the targeted stopping condition."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentName.setter
    def SegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentName"](arg_inVal.COM_val))

    def SetSegment(self, mCSSegment:"IAgVAMCSSegment") -> None:
        """Sets the targeted segment."""
        with agmarshall.AgInterface_in_arg(mCSSegment, IAgVAMCSSegment) as arg_mCSSegment:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_mCSSegment.COM_val))

    @property
    def State(self) -> "AgEVAState":
        """The new state of the targeted stopping condition."""
        with agmarshall.AgEnum_arg(AgEVAState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetState"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @State.setter
    def State(self, newVal:"AgEVAState") -> None:
        with agmarshall.AgEnum_arg(AgEVAState, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetState"](arg_newVal.COM_val))

    def SetTrigger(self, stoppingCondition:"IAgVAStoppingCondition") -> None:
        """The targeted stopping condition."""
        with agmarshall.AgInterface_in_arg(stoppingCondition, IAgVAStoppingCondition) as arg_stoppingCondition:
            agcls.evaluate_hresult(self.__dict__["_SetTrigger"](arg_stoppingCondition.COM_val))

    @property
    def TriggerName(self) -> str:
        """The name of the targeted stopping condition."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTriggerName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TriggerName.setter
    def TriggerName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTriggerName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{977C9F84-852A-4B5D-861B-8F9E3809CE7D}", IAgVAProfileChangeStoppingConditionState)
agcls.AgTypeNameMap["IAgVAProfileChangeStoppingConditionState"] = IAgVAProfileChangeStoppingConditionState
__all__.append("IAgVAProfileChangeStoppingConditionState")

class IAgVAProfileSeedFiniteManeuver(IAgVAProfile):
    """Properties for a Seed Finite Maneuver segment."""
    _uuid = "{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}"
    _num_methods = 5
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetSegment"] = _raise_uninitialized_error
        self.__dict__["_GetLeaveAllActiveStoppingConditionsActive"] = _raise_uninitialized_error
        self.__dict__["_SetLeaveAllActiveStoppingConditionsActive"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileSeedFiniteManeuver._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSeedFiniteManeuver from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileSeedFiniteManeuver = agcom.GUID(IAgVAProfileSeedFiniteManeuver._uuid)
        vtable_offset_local = IAgVAProfileSeedFiniteManeuver._vtable_offset - 1
        self.__dict__["_GetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSeedFiniteManeuver, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSeedFiniteManeuver, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_SetSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSeedFiniteManeuver, vtable_offset_local+3, agcom.PVOID)
        self.__dict__["_GetLeaveAllActiveStoppingConditionsActive"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSeedFiniteManeuver, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetLeaveAllActiveStoppingConditionsActive"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSeedFiniteManeuver, vtable_offset_local+5, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSeedFiniteManeuver.__dict__ and type(IAgVAProfileSeedFiniteManeuver.__dict__[attrname]) == property:
            return IAgVAProfileSeedFiniteManeuver.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def SegmentName(self) -> str:
        """The targeted maneuver segment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentName.setter
    def SegmentName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentName"](arg_newVal.COM_val))

    def SetSegment(self, pVAMCSManeuver:"IAgVAMCSManeuver") -> None:
        """Sets the maneuver segment to target."""
        with agmarshall.AgInterface_in_arg(pVAMCSManeuver, IAgVAMCSManeuver) as arg_pVAMCSManeuver:
            agcls.evaluate_hresult(self.__dict__["_SetSegment"](arg_pVAMCSManeuver.COM_val))

    @property
    def LeaveAllActiveStoppingConditionsActive(self) -> bool:
        """If true, all active stopping conditions on the seeded maneuver will remain active during run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLeaveAllActiveStoppingConditionsActive"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LeaveAllActiveStoppingConditionsActive.setter
    def LeaveAllActiveStoppingConditionsActive(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLeaveAllActiveStoppingConditionsActive"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C56665D5-CEF3-47A1-854E-64CB0A8CA9CA}", IAgVAProfileSeedFiniteManeuver)
agcls.AgTypeNameMap["IAgVAProfileSeedFiniteManeuver"] = IAgVAProfileSeedFiniteManeuver
__all__.append("IAgVAProfileSeedFiniteManeuver")

class IAgVAProfileRunOnce(IAgVAProfile):
    """Properties for a Run Once profile."""
    _uuid = "{75574EA3-277E-4A6D-9529-3342088679DB}"
    _num_methods = 0
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileRunOnce._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileRunOnce from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileRunOnce = agcom.GUID(IAgVAProfileRunOnce._uuid)
        vtable_offset_local = IAgVAProfileRunOnce._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileRunOnce.__dict__ and type(IAgVAProfileRunOnce.__dict__[attrname]) == property:
            return IAgVAProfileRunOnce.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    

agcls.AgClassCatalog.add_catalog_entry("{75574EA3-277E-4A6D-9529-3342088679DB}", IAgVAProfileRunOnce)
agcls.AgTypeNameMap["IAgVAProfileRunOnce"] = IAgVAProfileRunOnce
__all__.append("IAgVAProfileRunOnce")

class IAgVAUserVariableDefinition(object):
    """Properties for a User Variable definition."""
    _uuid = "{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetVariableName"] = _raise_uninitialized_error
        self.__dict__["_SetVariableName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariableDefinition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableDefinition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariableDefinition = agcom.GUID(IAgVAUserVariableDefinition._uuid)
        vtable_offset_local = IAgVAUserVariableDefinition._vtable_offset - 1
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinition, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinition, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinition, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableDefinition, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableDefinition.__dict__ and type(IAgVAUserVariableDefinition.__dict__[attrname]) == property:
            return IAgVAUserVariableDefinition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableDefinition.")
    
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        """The dimension of the user variable."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))

    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableName.setter
    def VariableName(self, inVal:str) -> None:
        """The name of the user variable."""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{25F2A622-8F6A-4CBB-91C6-ED5AD9C24028}", IAgVAUserVariableDefinition)
agcls.AgTypeNameMap["IAgVAUserVariableDefinition"] = IAgVAUserVariableDefinition
__all__.append("IAgVAUserVariableDefinition")

class IAgVAUserVariable(object):
    """The properties for a User Variable initial value."""
    _uuid = "{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetVariableName"] = _raise_uninitialized_error
        self.__dict__["_GetVariableValue"] = _raise_uninitialized_error
        self.__dict__["_SetVariableValue"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariable._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariable from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariable = agcom.GUID(IAgVAUserVariable._uuid)
        vtable_offset_local = IAgVAUserVariable._vtable_offset - 1
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_GetVariableValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetVariableValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+5, )
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+6, )
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariable, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariable.__dict__ and type(IAgVAUserVariable.__dict__[attrname]) == property:
            return IAgVAUserVariable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariable.")
    
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VariableValue(self) -> typing.Any:
        """The initial value of the user variable."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableValue.setter
    def VariableValue(self, inVal:typing.Any) -> None:
        """The initial value of the user variable."""
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableValue"](arg_inVal.COM_val))

    def EnableControlParameter(self) -> None:
        """Enables or disables the specified control parameter."""
        agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"]())

    def DisableControlParameter(self) -> None:
        """Disables the specified control parameter."""
        agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"]())

    def IsControlParameterEnabled(self) -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{31B617D6-AE6D-46CE-845D-90FFCD7A5B13}", IAgVAUserVariable)
agcls.AgTypeNameMap["IAgVAUserVariable"] = IAgVAUserVariable
__all__.append("IAgVAUserVariable")

class IAgVAUserVariableUpdate(object):
    """Properties for a User Variable update."""
    _uuid = "{14F87E74-D85B-40D1-86FF-97E7F514FCF7}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetVariableName"] = _raise_uninitialized_error
        self.__dict__["_GetVariableValue"] = _raise_uninitialized_error
        self.__dict__["_SetVariableValue"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAction"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAction"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUserVariableUpdate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUserVariableUpdate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUserVariableUpdate = agcom.GUID(IAgVAUserVariableUpdate._uuid)
        vtable_offset_local = IAgVAUserVariableUpdate._vtable_offset - 1
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_GetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_GetVariableValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetVariableValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetVariableAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetVariableAction"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+7, )
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+8, )
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAUserVariableUpdate, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUserVariableUpdate.__dict__ and type(IAgVAUserVariableUpdate.__dict__[attrname]) == property:
            return IAgVAUserVariableUpdate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUserVariableUpdate.")
    
    @property
    def UnitDimension(self) -> str:
        """The dimension of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VariableName(self) -> str:
        """The name of the user variable."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VariableValue(self) -> typing.Any:
        """Update value of the user variable."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableValue.setter
    def VariableValue(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableValue"](arg_inVal.COM_val))

    @property
    def VariableAction(self) -> "AgEVAUpdateAction":
        """Action to be performed using the value."""
        with agmarshall.AgEnum_arg(AgEVAUpdateAction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAction"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAction.setter
    def VariableAction(self, inVal:"AgEVAUpdateAction") -> None:
        with agmarshall.AgEnum_arg(AgEVAUpdateAction, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAction"](arg_inVal.COM_val))

    def EnableControlParameter(self) -> None:
        """Enables or disables the specified control parameter."""
        agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"]())

    def DisableControlParameter(self) -> None:
        """Disables the specified control parameter."""
        agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"]())

    def IsControlParameterEnabled(self) -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{14F87E74-D85B-40D1-86FF-97E7F514FCF7}", IAgVAUserVariableUpdate)
agcls.AgTypeNameMap["IAgVAUserVariableUpdate"] = IAgVAUserVariableUpdate
__all__.append("IAgVAUserVariableUpdate")

class IAgVAProfileSNOPTOptimizer(IAgVAProfile):
    """Properties of SNOPT Optimizer profile."""
    _uuid = "{6BE54C72-2B85-4925-B969-5602527616A1}"
    _num_methods = 22
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlParameters"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_SetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_GetMaxMajorIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxMajorIterations"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMajorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMajorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMajorOptimality"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMajorOptimality"] = _raise_uninitialized_error
        self.__dict__["_GetMaxMinorIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxMinorIterations"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMinorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMinorFeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnMinorOptimality"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnMinorOptimality"] = _raise_uninitialized_error
        self.__dict__["_GetOptionsFilename"] = _raise_uninitialized_error
        self.__dict__["_SetOptionsFilename"] = _raise_uninitialized_error
        self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"] = _raise_uninitialized_error
        self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileSNOPTOptimizer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileSNOPTOptimizer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileSNOPTOptimizer = agcom.GUID(IAgVAProfileSNOPTOptimizer._uuid)
        vtable_offset_local = IAgVAProfileSNOPTOptimizer._vtable_offset - 1
        self.__dict__["_GetControlParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxMajorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMaxMajorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetToleranceOnMajorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMajorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetToleranceOnMajorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMajorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxMinorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetMaxMinorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetToleranceOnMinorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMinorFeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetToleranceOnMinorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnMinorOptimality"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+21, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileSNOPTOptimizer, vtable_offset_local+22, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileSNOPTOptimizer.__dict__ and type(IAgVAProfileSNOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAProfileSNOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def ControlParameters(self) -> "IAgVASNOPTControlCollection":
        """The list of control parameters defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVASNOPTControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControlParameters"](byref(arg_ppVASNOPTControlCollection.COM_val)))
            return arg_ppVASNOPTControlCollection.python_val

    @property
    def Results(self) -> "IAgVASNOPTResultCollection":
        """The list of results defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVASNOPTResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVASNOPTResultCollection.COM_val)))
            return arg_ppVASNOPTResultCollection.python_val

    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResetControlsBeforeRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetResetControlsBeforeRun"](arg_newVal.COM_val))

    @property
    def MaxMajorIterations(self) -> int:
        """The maximum number of major iterations allowed."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxMajorIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxMajorIterations.setter
    def MaxMajorIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxMajorIterations"](arg_newVal.COM_val))

    @property
    def ToleranceOnMajorFeasibility(self) -> float:
        """Specifies how accurately the nonlinear constraints should be satisfied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMajorFeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMajorFeasibility.setter
    def ToleranceOnMajorFeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMajorFeasibility"](arg_newVal.COM_val))

    @property
    def ToleranceOnMajorOptimality(self) -> float:
        """Specifies the final accuracy of the dual variables."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMajorOptimality"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMajorOptimality.setter
    def ToleranceOnMajorOptimality(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMajorOptimality"](arg_newVal.COM_val))

    @property
    def MaxMinorIterations(self) -> int:
        """The maximum number of iterations for the QP subproblem allowed during a single major iteration."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxMinorIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxMinorIterations.setter
    def MaxMinorIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxMinorIterations"](arg_newVal.COM_val))

    @property
    def ToleranceOnMinorFeasibility(self) -> float:
        """The tolerance which the QP subproblem must meet before being considered feasible."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMinorFeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMinorFeasibility.setter
    def ToleranceOnMinorFeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMinorFeasibility"](arg_newVal.COM_val))

    @property
    def ToleranceOnMinorOptimality(self) -> float:
        """This option is undocumented in the SNOPT literature, and included here for completeness in terms of tolerance options."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnMinorOptimality"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnMinorOptimality.setter
    def ToleranceOnMinorOptimality(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnMinorOptimality"](arg_newVal.COM_val))

    @property
    def OptionsFilename(self) -> str:
        """If used, the associated SNOPT specifications file may define any of the various SNOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOptionsFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOptionsFilename"](arg_newVal.COM_val))

    @property
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self) -> bool:
        """Whether to allow internal normalization of the primal infeasibility measure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAllowInternalPrimalInfeasibilityMeasureNormalization"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AllowInternalPrimalInfeasibilityMeasureNormalization.setter
    def AllowInternalPrimalInfeasibilityMeasureNormalization(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetAllowInternalPrimalInfeasibilityMeasureNormalization"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6BE54C72-2B85-4925-B969-5602527616A1}", IAgVAProfileSNOPTOptimizer)
agcls.AgTypeNameMap["IAgVAProfileSNOPTOptimizer"] = IAgVAProfileSNOPTOptimizer
__all__.append("IAgVAProfileSNOPTOptimizer")

class IAgVASNOPTControl(object):
    """Properties for control parameters of a SNOPT profile."""
    _uuid = "{4C637192-8687-4218-9BD6-A7B7C7B6E720}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetInitialValue"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_SetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASNOPTControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASNOPTControl = agcom.GUID(IAgVASNOPTControl._uuid)
        vtable_offset_local = IAgVASNOPTControl._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetInitialValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTControl, vtable_offset_local+17, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTControl.__dict__ and type(IAgVASNOPTControl.__dict__[attrname]) == property:
            return IAgVASNOPTControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTControl.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCurrentValue"](arg_newVal.COM_val))

    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4C637192-8687-4218-9BD6-A7B7C7B6E720}", IAgVASNOPTControl)
agcls.AgTypeNameMap["IAgVASNOPTControl"] = IAgVASNOPTControl
__all__.append("IAgVASNOPTControl")

class IAgVASNOPTResult(object):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    _uuid = "{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetWeight"] = _raise_uninitialized_error
        self.__dict__["_SetWeight"] = _raise_uninitialized_error
        self.__dict__["_GetGoal"] = _raise_uninitialized_error
        self.__dict__["_SetGoal"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASNOPTResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASNOPTResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASNOPTResult = agcom.GUID(IAgVASNOPTResult._uuid)
        vtable_offset_local = IAgVASNOPTResult._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetGoal"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetGoal"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+18, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVASNOPTResult, vtable_offset_local+19, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASNOPTResult.__dict__ and type(IAgVASNOPTResult.__dict__[attrname]) == property:
            return IAgVASNOPTResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASNOPTResult.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LowerBound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWeight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Weight.setter
    def Weight(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWeight"](arg_newVal.COM_val))

    @property
    def Goal(self) -> "AgEVASNOPTGoal":
        """The purpose of the element in the problem."""
        with agmarshall.AgEnum_arg(AgEVASNOPTGoal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGoal"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Goal.setter
    def Goal(self, inVal:"AgEVASNOPTGoal") -> None:
        with agmarshall.AgEnum_arg(AgEVASNOPTGoal, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGoal"](arg_inVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{79392E1D-E3C7-4403-9D4C-1C13AB8368A9}", IAgVASNOPTResult)
agcls.AgTypeNameMap["IAgVASNOPTResult"] = IAgVASNOPTResult
__all__.append("IAgVASNOPTResult")

class IAgVAProfileIPOPTOptimizer(IAgVAProfile):
    """Properties of IPOPT Optimizer profile."""
    _uuid = "{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}"
    _num_methods = 18
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetControlParameters"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_SetResetControlsBeforeRun"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnConvergence"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnConvergence"] = _raise_uninitialized_error
        self.__dict__["_GetMaximumIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaximumIterations"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnConstraintViolation"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnConstraintViolation"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnDualInfeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnDualInfeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetToleranceOnComplementaryInfeasibility"] = _raise_uninitialized_error
        self.__dict__["_SetToleranceOnComplementaryInfeasibility"] = _raise_uninitialized_error
        self.__dict__["_GetOptionsFilename"] = _raise_uninitialized_error
        self.__dict__["_SetOptionsFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileIPOPTOptimizer._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileIPOPTOptimizer from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileIPOPTOptimizer = agcom.GUID(IAgVAProfileIPOPTOptimizer._uuid)
        vtable_offset_local = IAgVAProfileIPOPTOptimizer._vtable_offset - 1
        self.__dict__["_GetControlParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetResetControlsBeforeRun"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetToleranceOnConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMaximumIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMaximumIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetToleranceOnConstraintViolation"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnConstraintViolation"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetToleranceOnDualInfeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnDualInfeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetToleranceOnComplementaryInfeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetToleranceOnComplementaryInfeasibility"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetOptionsFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileIPOPTOptimizer, vtable_offset_local+18, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileIPOPTOptimizer.__dict__ and type(IAgVAProfileIPOPTOptimizer.__dict__[attrname]) == property:
            return IAgVAProfileIPOPTOptimizer.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def ControlParameters(self) -> "IAgVAIPOPTControlCollection":
        """The list of control parameters defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAIPOPTControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControlParameters"](byref(arg_ppVAIPOPTControlCollection.COM_val)))
            return arg_ppVAIPOPTControlCollection.python_val

    @property
    def Results(self) -> "IAgVAIPOPTResultCollection":
        """The list of results defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAIPOPTResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVAIPOPTResultCollection.COM_val)))
            return arg_ppVAIPOPTResultCollection.python_val

    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ResetControlsBeforeRun(self) -> bool:
        """Reset controls before each run."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResetControlsBeforeRun"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ResetControlsBeforeRun.setter
    def ResetControlsBeforeRun(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetResetControlsBeforeRun"](arg_newVal.COM_val))

    @property
    def ToleranceOnConvergence(self) -> float:
        """The tolerance by which the optimality conditions must be satisfied for the problem to be considered converged. The default value is 1E-8."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnConvergence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnConvergence.setter
    def ToleranceOnConvergence(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnConvergence"](arg_newVal.COM_val))

    @property
    def MaximumIterations(self) -> int:
        """The maximum number of iterations before IPOPT should give up if it hasn't yet converged on a solution. The default value is 3000."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaximumIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaximumIterations.setter
    def MaximumIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaximumIterations"](arg_newVal.COM_val))

    @property
    def ToleranceOnConstraintViolation(self) -> float:
        """The tolerance by which user-specified constraints are allowed to be violated with the solution still considered feasible. The default value is 1.0E-4."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnConstraintViolation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnConstraintViolation.setter
    def ToleranceOnConstraintViolation(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnConstraintViolation"](arg_newVal.COM_val))

    @property
    def ToleranceOnDualInfeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the dual infeasibility. The default value is 1."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnDualInfeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnDualInfeasibility.setter
    def ToleranceOnDualInfeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnDualInfeasibility"](arg_newVal.COM_val))

    @property
    def ToleranceOnComplementaryInfeasibility(self) -> float:
        """The desired absolute tolerance on the maximum norm of the complementarity conditions. The default value is 1.0E-4."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetToleranceOnComplementaryInfeasibility"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ToleranceOnComplementaryInfeasibility.setter
    def ToleranceOnComplementaryInfeasibility(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetToleranceOnComplementaryInfeasibility"](arg_newVal.COM_val))

    @property
    def OptionsFilename(self) -> str:
        """If used, the associated IPOPT specifications file may define any of the various IPOPT options. Options in the file that conflict with options specified elsewhere will take precedence."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOptionsFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OptionsFilename.setter
    def OptionsFilename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOptionsFilename"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{23DCC03E-E187-41EF-85C8-FC3DCA09E7A8}", IAgVAProfileIPOPTOptimizer)
agcls.AgTypeNameMap["IAgVAProfileIPOPTOptimizer"] = IAgVAProfileIPOPTOptimizer
__all__.append("IAgVAProfileIPOPTOptimizer")

class IAgVAIPOPTControl(object):
    """Properties for control parameters of a IPOPT profile."""
    _uuid = "{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetInitialValue"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_SetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAIPOPTControl._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTControl from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAIPOPTControl = agcom.GUID(IAgVAIPOPTControl._uuid)
        vtable_offset_local = IAgVAIPOPTControl._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_GetInitialValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+12, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+13, agcom.VARIANT)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTControl, vtable_offset_local+17, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTControl.__dict__ and type(IAgVAIPOPTControl.__dict__[attrname]) == property:
            return IAgVAIPOPTControl.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTControl.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """The name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InitialValue(self) -> typing.Any:
        """The nominal value of the element selected as a parameter. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value of the independent variable after the last targeter run."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CurrentValue.setter
    def CurrentValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCurrentValue"](arg_newVal.COM_val))

    @property
    def LowerBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{EBDE767F-00E7-4779-ABB9-23DB3B87FE54}", IAgVAIPOPTControl)
agcls.AgTypeNameMap["IAgVAIPOPTControl"] = IAgVAIPOPTControl
__all__.append("IAgVAIPOPTControl")

class IAgVAIPOPTResult(object):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    _uuid = "{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEnable"] = _raise_uninitialized_error
        self.__dict__["_SetEnable"] = _raise_uninitialized_error
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_GetCurrentValue"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_SetLowerBound"] = _raise_uninitialized_error
        self.__dict__["_GetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_SetUpperBound"] = _raise_uninitialized_error
        self.__dict__["_GetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_SetScalingValue"] = _raise_uninitialized_error
        self.__dict__["_GetWeight"] = _raise_uninitialized_error
        self.__dict__["_SetWeight"] = _raise_uninitialized_error
        self.__dict__["_GetGoal"] = _raise_uninitialized_error
        self.__dict__["_SetGoal"] = _raise_uninitialized_error
        self.__dict__["_GetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetUseCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_GetCustomDisplayUnit"] = _raise_uninitialized_error
        self.__dict__["_SetCustomDisplayUnit"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAIPOPTResult._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAIPOPTResult from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAIPOPTResult = agcom.GUID(IAgVAIPOPTResult._uuid)
        vtable_offset_local = IAgVAIPOPTResult._vtable_offset - 1
        self.__dict__["_GetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnable"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_GetCurrentValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+4, POINTER(agcom.VARIANT))
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+6, POINTER(agcom.VARIANT))
        self.__dict__["_SetLowerBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_GetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+8, POINTER(agcom.VARIANT))
        self.__dict__["_SetUpperBound"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+9, agcom.VARIANT)
        self.__dict__["_GetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+10, POINTER(agcom.VARIANT))
        self.__dict__["_SetScalingValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+11, agcom.VARIANT)
        self.__dict__["_GetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetWeight"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetGoal"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetGoal"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_GetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+18, POINTER(agcom.BSTR))
        self.__dict__["_SetCustomDisplayUnit"] = IAGFUNCTYPE(pUnk, IID_IAgVAIPOPTResult, vtable_offset_local+19, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAIPOPTResult.__dict__ and type(IAgVAIPOPTResult.__dict__[attrname]) == property:
            return IAgVAIPOPTResult.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAIPOPTResult.")
    
    @property
    def Enable(self) -> bool:
        """If true, the variable is being used."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Enable.setter
    def Enable(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnable"](arg_newVal.COM_val))

    @property
    def Name(self) -> str:
        """The name of the parameter."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def CurrentValue(self) -> typing.Any:
        """The value achieved for this dependent variable in the last targeter run. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCurrentValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ParentName(self) -> str:
        """Object - the name of the segment to which the parameter belongs."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LowerBound(self) -> typing.Any:
        """The lower limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowerBound.setter
    def LowerBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowerBound"](arg_newVal.COM_val))

    @property
    def UpperBound(self) -> typing.Any:
        """The upper limit achievable by this quantity in the optimizer's iteration history. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUpperBound"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UpperBound.setter
    def UpperBound(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUpperBound"](arg_newVal.COM_val))

    @property
    def ScalingValue(self) -> typing.Any:
        """Applies to the Specified Value scaling method. Dimension depends on context."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingValue.setter
    def ScalingValue(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingValue"](arg_newVal.COM_val))

    @property
    def Weight(self) -> float:
        """The factor by which the constraint error is to be multiplied."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWeight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Weight.setter
    def Weight(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWeight"](arg_newVal.COM_val))

    @property
    def Goal(self) -> "AgEVAIPOPTGoal":
        """The purpose of the element in the problem."""
        with agmarshall.AgEnum_arg(AgEVAIPOPTGoal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGoal"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Goal.setter
    def Goal(self, inVal:"AgEVAIPOPTGoal") -> None:
        with agmarshall.AgEnum_arg(AgEVAIPOPTGoal, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGoal"](arg_inVal.COM_val))

    @property
    def UseCustomDisplayUnit(self) -> bool:
        """If true, allows display of values in another unit."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseCustomDisplayUnit.setter
    def UseCustomDisplayUnit(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseCustomDisplayUnit"](arg_newVal.COM_val))

    @property
    def CustomDisplayUnit(self) -> str:
        """The unit in which the value will be displayed in the GUI."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCustomDisplayUnit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CustomDisplayUnit.setter
    def CustomDisplayUnit(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCustomDisplayUnit"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{CBBEA11D-662A-4218-A9DC-84A16ABAE3D4}", IAgVAIPOPTResult)
agcls.AgTypeNameMap["IAgVAIPOPTResult"] = IAgVAIPOPTResult
__all__.append("IAgVAIPOPTResult")

class IAgVAManeuverOptimalFinite(IAgVAManeuver):
    """Engine properties for a Optimal Finite Maneuver."""
    _uuid = "{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}"
    _num_methods = 40
    _vtable_offset = IAgVAManeuver._vtable_offset + IAgVAManeuver._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPressureMode"] = _raise_uninitialized_error
        self.__dict__["_SetPressureMode"] = _raise_uninitialized_error
        self.__dict__["_GetThrustEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetThrustEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetThrustEfficiencyMode"] = _raise_uninitialized_error
        self.__dict__["_SetThrustEfficiencyMode"] = _raise_uninitialized_error
        self.__dict__["_GetNumberOfNodes"] = _raise_uninitialized_error
        self.__dict__["_SetNumberOfNodes"] = _raise_uninitialized_error
        self.__dict__["_GetInitialGuessFileName"] = _raise_uninitialized_error
        self.__dict__["_SetInitialGuessFileName"] = _raise_uninitialized_error
        self.__dict__["_GetSeedMethod"] = _raise_uninitialized_error
        self.__dict__["_SetSeedMethod"] = _raise_uninitialized_error
        self.__dict__["_RunSeed"] = _raise_uninitialized_error
        self.__dict__["_GetNodeStatusMessage"] = _raise_uninitialized_error
        self.__dict__["_GetRunMode"] = _raise_uninitialized_error
        self.__dict__["_SetRunMode"] = _raise_uninitialized_error
        self.__dict__["_GetHaltMCSWhenNoConvergence"] = _raise_uninitialized_error
        self.__dict__["_SetHaltMCSWhenNoConvergence"] = _raise_uninitialized_error
        self.__dict__["_GetDiscretizationStrategy"] = _raise_uninitialized_error
        self.__dict__["_SetDiscretizationStrategy"] = _raise_uninitialized_error
        self.__dict__["_GetWorkingVariables"] = _raise_uninitialized_error
        self.__dict__["_SetWorkingVariables"] = _raise_uninitialized_error
        self.__dict__["_GetScalingOptions"] = _raise_uninitialized_error
        self.__dict__["_SetScalingOptions"] = _raise_uninitialized_error
        self.__dict__["_GetEnableUnitVectorControls"] = _raise_uninitialized_error
        self.__dict__["_SetEnableUnitVectorControls"] = _raise_uninitialized_error
        self.__dict__["_GetThrustAxes"] = _raise_uninitialized_error
        self.__dict__["_GetSNOPTOptimizer"] = _raise_uninitialized_error
        self.__dict__["_GetInitialBoundaryConditions"] = _raise_uninitialized_error
        self.__dict__["_GetFinalBoundaryConditions"] = _raise_uninitialized_error
        self.__dict__["_GetPathBoundaryConditions"] = _raise_uninitialized_error
        self.__dict__["_GetLogFileName"] = _raise_uninitialized_error
        self.__dict__["_GetExportFormat"] = _raise_uninitialized_error
        self.__dict__["_SetExportFormat"] = _raise_uninitialized_error
        self.__dict__["_GetSteeringNodes"] = _raise_uninitialized_error
        self.__dict__["_ExportNodes"] = _raise_uninitialized_error
        self.__dict__["_GetInitialGuessInterpolationMethod"] = _raise_uninitialized_error
        self.__dict__["_SetInitialGuessInterpolationMethod"] = _raise_uninitialized_error
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFinite._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFinite from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuver._private_init(self, pUnk)
        IID_IAgVAManeuverOptimalFinite = agcom.GUID(IAgVAManeuverOptimalFinite._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFinite._vtable_offset - 1
        self.__dict__["_GetPressureMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetPressureMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetThrustEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetThrustEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetThrustEfficiencyMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetThrustEfficiencyMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetNumberOfNodes"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetNumberOfNodes"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetInitialGuessFileName"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetInitialGuessFileName"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetSeedMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetSeedMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_RunSeed"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+13, )
        self.__dict__["_GetNodeStatusMessage"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+14, POINTER(agcom.BSTR))
        self.__dict__["_GetRunMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetRunMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetHaltMCSWhenNoConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+17, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetHaltMCSWhenNoConvergence"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+18, agcom.VARIANT_BOOL)
        self.__dict__["_GetDiscretizationStrategy"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDiscretizationStrategy"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetWorkingVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetWorkingVariables"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetScalingOptions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetScalingOptions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetEnableUnitVectorControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+25, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableUnitVectorControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+26, agcom.VARIANT_BOOL)
        self.__dict__["_GetThrustAxes"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+27, POINTER(agcom.BSTR))
        self.__dict__["_GetSNOPTOptimizer"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_GetInitialBoundaryConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+29, POINTER(agcom.PVOID))
        self.__dict__["_GetFinalBoundaryConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+30, POINTER(agcom.PVOID))
        self.__dict__["_GetPathBoundaryConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+31, POINTER(agcom.PVOID))
        self.__dict__["_GetLogFileName"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+32, POINTER(agcom.BSTR))
        self.__dict__["_GetExportFormat"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+33, POINTER(agcom.LONG))
        self.__dict__["_SetExportFormat"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+34, agcom.LONG)
        self.__dict__["_GetSteeringNodes"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+35, POINTER(agcom.PVOID))
        self.__dict__["_ExportNodes"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+36, agcom.BSTR)
        self.__dict__["_GetInitialGuessInterpolationMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetInitialGuessInterpolationMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+38, agcom.LONG)
        self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+39, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFinite, vtable_offset_local+40, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFinite.__dict__ and type(IAgVAManeuverOptimalFinite.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFinite.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAManeuver.__setattr__(self, attrname, value)
    
    @property
    def PressureMode(self) -> "AgEVAPressureMode":
        """The pressure mode."""
        with agmarshall.AgEnum_arg(AgEVAPressureMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPressureMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PressureMode.setter
    def PressureMode(self, newVal:"AgEVAPressureMode") -> None:
        with agmarshall.AgEnum_arg(AgEVAPressureMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPressureMode"](arg_newVal.COM_val))

    @property
    def ThrustEfficiency(self) -> float:
        """The fraction of ideal thrust applied. Any number above zero is valid, with typical values around 0.98 to 1.02. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustEfficiency.setter
    def ThrustEfficiency(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustEfficiency"](arg_newVal.COM_val))

    @property
    def ThrustEfficiencyMode(self) -> "AgEVAThrustType":
        """Thrust - the calculations that are effected by the thrust efficiency value."""
        with agmarshall.AgEnum_arg(AgEVAThrustType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustEfficiencyMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrustEfficiencyMode.setter
    def ThrustEfficiencyMode(self, newVal:"AgEVAThrustType") -> None:
        """Mode indicating fraction of ideal thrust applied."""
        with agmarshall.AgEnum_arg(AgEVAThrustType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrustEfficiencyMode"](arg_newVal.COM_val))

    @property
    def NumberOfNodes(self) -> int:
        """Number of nodes to discretize collocation problem into."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumberOfNodes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NumberOfNodes.setter
    def NumberOfNodes(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNumberOfNodes"](arg_newVal.COM_val))

    @property
    def InitialGuessFileName(self) -> str:
        """File containing ephemeris for nodes that serve as an initial guess."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialGuessFileName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialGuessFileName.setter
    def InitialGuessFileName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialGuessFileName"](arg_newVal.COM_val))

    @property
    def SeedMethod(self) -> "AgEVAOptimalFiniteSeedMethod":
        """Initial seed method."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSeedMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSeedMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SeedMethod.setter
    def SeedMethod(self, newVal:"AgEVAOptimalFiniteSeedMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteSeedMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSeedMethod"](arg_newVal.COM_val))

    def RunSeed(self) -> None:
        """Run seed."""
        agcls.evaluate_hresult(self.__dict__["_RunSeed"]())

    @property
    def NodeStatusMessage(self) -> str:
        """A message that indicates what nodes are currently held by the segment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNodeStatusMessage"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def RunMode(self) -> "AgEVAOptimalFiniteRunMode":
        """Run mode."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteRunMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRunMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RunMode.setter
    def RunMode(self, newVal:"AgEVAOptimalFiniteRunMode") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteRunMode, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRunMode"](arg_newVal.COM_val))

    @property
    def HaltMCSWhenNoConvergence(self) -> bool:
        """Halt MCS and discard result if optimization is unsuccessful."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHaltMCSWhenNoConvergence"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HaltMCSWhenNoConvergence.setter
    def HaltMCSWhenNoConvergence(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetHaltMCSWhenNoConvergence"](arg_newVal.COM_val))

    @property
    def DiscretizationStrategy(self) -> "AgEVAOptimalFiniteDiscretizationStrategy":
        """Discretization Strategy."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteDiscretizationStrategy) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDiscretizationStrategy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DiscretizationStrategy.setter
    def DiscretizationStrategy(self, newVal:"AgEVAOptimalFiniteDiscretizationStrategy") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteDiscretizationStrategy, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDiscretizationStrategy"](arg_newVal.COM_val))

    @property
    def WorkingVariables(self) -> "AgEVAOptimalFiniteWorkingVariables":
        """Working Variables."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteWorkingVariables) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetWorkingVariables"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @WorkingVariables.setter
    def WorkingVariables(self, newVal:"AgEVAOptimalFiniteWorkingVariables") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteWorkingVariables, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetWorkingVariables"](arg_newVal.COM_val))

    @property
    def ScalingOptions(self) -> "AgEVAOptimalFiniteScalingOptions":
        """Scaling Options."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteScalingOptions) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalingOptions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalingOptions.setter
    def ScalingOptions(self, newVal:"AgEVAOptimalFiniteScalingOptions") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteScalingOptions, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalingOptions"](arg_newVal.COM_val))

    @property
    def EnableUnitVectorControls(self) -> bool:
        """Enable unit vector for thrust direction."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableUnitVectorControls"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableUnitVectorControls.setter
    def EnableUnitVectorControls(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableUnitVectorControls"](arg_newVal.COM_val))

    @property
    def ThrustAxes(self) -> str:
        """Label reflecting coordinate axes for the thrust vector"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrustAxes"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SNOPTOptimizer(self) -> "IAgVAManeuverOptimalFiniteSNOPTOptimizer":
        """SNOPT Optimizer Options."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteSNOPTOptimizer:
            agcls.evaluate_hresult(self.__dict__["_GetSNOPTOptimizer"](byref(arg_ppAgVAManeuverOptimalFiniteSNOPTOptimizer.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteSNOPTOptimizer.python_val

    @property
    def InitialBoundaryConditions(self) -> "IAgVAManeuverOptimalFiniteInitialBoundaryConditions":
        """Initial Boundary Conditions."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteInitialBoundaryConditions:
            agcls.evaluate_hresult(self.__dict__["_GetInitialBoundaryConditions"](byref(arg_ppAgVAManeuverOptimalFiniteInitialBoundaryConditions.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteInitialBoundaryConditions.python_val

    @property
    def FinalBoundaryConditions(self) -> "IAgVAManeuverOptimalFiniteFinalBoundaryConditions":
        """Final Boundary Conditions."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFiniteFinalBoundaryConditions:
            agcls.evaluate_hresult(self.__dict__["_GetFinalBoundaryConditions"](byref(arg_ppAgVAManeuverOptimalFiniteFinalBoundaryConditions.COM_val)))
            return arg_ppAgVAManeuverOptimalFiniteFinalBoundaryConditions.python_val

    @property
    def PathBoundaryConditions(self) -> "IAgVAManeuverOptimalFinitePathBoundaryConditions":
        """Path Boundary Conditions."""
        with agmarshall.AgInterface_out_arg() as arg_ppAgVAManeuverOptimalFinitePathBoundaryConditions:
            agcls.evaluate_hresult(self.__dict__["_GetPathBoundaryConditions"](byref(arg_ppAgVAManeuverOptimalFinitePathBoundaryConditions.COM_val)))
            return arg_ppAgVAManeuverOptimalFinitePathBoundaryConditions.python_val

    @property
    def LogFileName(self) -> str:
        """Log file name for optimal finite maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLogFileName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ExportFormat(self) -> "AgEVAOptimalFiniteExportNodesFormat":
        """Format for exporting collocation control variables."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteExportNodesFormat) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetExportFormat"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ExportFormat.setter
    def ExportFormat(self, newVal:"AgEVAOptimalFiniteExportNodesFormat") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteExportNodesFormat, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetExportFormat"](arg_newVal.COM_val))

    @property
    def SteeringNodes(self) -> "IAgVAManeuverOptimalFiniteSteeringNodeCollection":
        """The list of steering nodes."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAManeuverOptimalFiniteFinalSteeringNodeCollection:
            agcls.evaluate_hresult(self.__dict__["_GetSteeringNodes"](byref(arg_ppVAManeuverOptimalFiniteFinalSteeringNodeCollection.COM_val)))
            return arg_ppVAManeuverOptimalFiniteFinalSteeringNodeCollection.python_val

    def ExportNodes(self, fileName:str) -> None:
        """Exports the current set of collocation nodes to a file."""
        with agmarshall.BSTR_arg(fileName) as arg_fileName:
            agcls.evaluate_hresult(self.__dict__["_ExportNodes"](arg_fileName.COM_val))

    @property
    def InitialGuessInterpolationMethod(self) -> "AgEVAOptimalFiniteGuessMethod":
        """Guess interpolation method."""
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteGuessMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialGuessInterpolationMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialGuessInterpolationMethod.setter
    def InitialGuessInterpolationMethod(self, newVal:"AgEVAOptimalFiniteGuessMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVAOptimalFiniteGuessMethod, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialGuessInterpolationMethod"](arg_newVal.COM_val))

    @property
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self) -> bool:
        """If this segment is propagating the state transition matrix, reset it to the identity matrix at the start of the segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldReinitializeSTMAtStartOfSegmentPropagation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldReinitializeSTMAtStartOfSegmentPropagation.setter
    def ShouldReinitializeSTMAtStartOfSegmentPropagation(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldReinitializeSTMAtStartOfSegmentPropagation"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FDEE9E11-C6ED-495E-9DC3-F3674F0D4813}", IAgVAManeuverOptimalFinite)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFinite"] = IAgVAManeuverOptimalFinite
__all__.append("IAgVAManeuverOptimalFinite")

class IAgVAManeuverOptimalFiniteSteeringNodeElement(object):
    """The elements of the steering node."""
    _uuid = "{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetNodeIndex"] = _raise_uninitialized_error
        self.__dict__["_GetTime"] = _raise_uninitialized_error
        self.__dict__["_GetMass"] = _raise_uninitialized_error
        self.__dict__["_GetAzimuth"] = _raise_uninitialized_error
        self.__dict__["_GetElevation"] = _raise_uninitialized_error
        self.__dict__["_GetDirCosX"] = _raise_uninitialized_error
        self.__dict__["_GetDirCosY"] = _raise_uninitialized_error
        self.__dict__["_GetDirCosZ"] = _raise_uninitialized_error
        self.__dict__["_GetPosX"] = _raise_uninitialized_error
        self.__dict__["_GetPosY"] = _raise_uninitialized_error
        self.__dict__["_GetPosZ"] = _raise_uninitialized_error
        self.__dict__["_GetVelX"] = _raise_uninitialized_error
        self.__dict__["_GetVelY"] = _raise_uninitialized_error
        self.__dict__["_GetVelZ"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeElement._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAManeuverOptimalFiniteSteeringNodeElement from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAManeuverOptimalFiniteSteeringNodeElement = agcom.GUID(IAgVAManeuverOptimalFiniteSteeringNodeElement._uuid)
        vtable_offset_local = IAgVAManeuverOptimalFiniteSteeringNodeElement._vtable_offset - 1
        self.__dict__["_GetNodeIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_GetTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+2, POINTER(agcom.DOUBLE))
        self.__dict__["_GetMass"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_GetAzimuth"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_GetElevation"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDirCosX"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+6, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDirCosY"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_GetDirCosZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPosX"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPosY"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_GetPosZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_GetVelX"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_GetVelY"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_GetVelZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAManeuverOptimalFiniteSteeringNodeElement, vtable_offset_local+14, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__ and type(IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__[attrname]) == property:
            return IAgVAManeuverOptimalFiniteSteeringNodeElement.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAManeuverOptimalFiniteSteeringNodeElement.")
    
    @property
    def NodeIndex(self) -> int:
        """The index of the node in the array of nodes."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNodeIndex"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Time(self) -> float:
        """The time associated with the node."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Mass(self) -> float:
        """The mass at the node."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMass"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Azimuth(self) -> float:
        """The azimuth of the steering angle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAzimuth"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def Elevation(self) -> float:
        """The elevation of the steering angle."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElevation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DirCosX(self) -> float:
        """The first component of the steering unit vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirCosX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DirCosY(self) -> float:
        """The second component of the steering unit vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirCosY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DirCosZ(self) -> float:
        """The third component of the steering unit vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirCosZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PosX(self) -> float:
        """The X component of the position vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PosY(self) -> float:
        """The Y component of the position vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PosZ(self) -> float:
        """The Z component of the position vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPosZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VelX(self) -> float:
        """The X component of the velocity vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VelY(self) -> float:
        """The Y component of the velocity vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VelZ(self) -> float:
        """The Z component of the velocity vector."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVelZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{428CDEC6-6E07-4EDA-B656-AF669F95BB8E}", IAgVAManeuverOptimalFiniteSteeringNodeElement)
agcls.AgTypeNameMap["IAgVAManeuverOptimalFiniteSteeringNodeElement"] = IAgVAManeuverOptimalFiniteSteeringNodeElement
__all__.append("IAgVAManeuverOptimalFiniteSteeringNodeElement")

class IAgVAProfileLambertProfile(IAgVAProfile):
    """Properties for a Lambert profile."""
    _uuid = "{6F736B1F-850D-4736-9106-8BDC4FE52A30}"
    _num_methods = 56
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetTargetCoordType"] = _raise_uninitialized_error
        self.__dict__["_SetTargetCoordType"] = _raise_uninitialized_error
        self.__dict__["_GetEnableSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionX"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionX"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionY"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionY"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityX"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityX"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityY"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityY"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityZ"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityZ"] = _raise_uninitialized_error
        self.__dict__["_GetTargetSemimajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetTargetSemimajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetTargetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_SetTargetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_GetTargetInclination"] = _raise_uninitialized_error
        self.__dict__["_SetTargetInclination"] = _raise_uninitialized_error
        self.__dict__["_GetTargetRightAscensionOfAscendingNode"] = _raise_uninitialized_error
        self.__dict__["_SetTargetRightAscensionOfAscendingNode"] = _raise_uninitialized_error
        self.__dict__["_GetTargetArgumentOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetTargetArgumentOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetTargetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetTargetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetSolutionOption"] = _raise_uninitialized_error
        self.__dict__["_SetSolutionOption"] = _raise_uninitialized_error
        self.__dict__["_GetTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_SetTimeOfFlight"] = _raise_uninitialized_error
        self.__dict__["_GetRevolutions"] = _raise_uninitialized_error
        self.__dict__["_SetRevolutions"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitalEnergy"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitalEnergy"] = _raise_uninitialized_error
        self.__dict__["_GetDirectionOfMotion"] = _raise_uninitialized_error
        self.__dict__["_SetDirectionOfMotion"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyCollisionAltitudePadding"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyCollisionAltitudePadding"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteToFirstManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteToFirstManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetFirstManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_SetFirstManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteDurationToPropagate"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteDurationToPropagate"] = _raise_uninitialized_error
        self.__dict__["_GetDisableNonLambertPropagateStopConditions"] = _raise_uninitialized_error
        self.__dict__["_SetDisableNonLambertPropagateStopConditions"] = _raise_uninitialized_error
        self.__dict__["_GetPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_SetPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteToSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteToSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetSecondManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_SetSecondManeuverSegment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileLambertProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileLambertProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileLambertProfile = agcom.GUID(IAgVAProfileLambertProfile._uuid)
        vtable_offset_local = IAgVAProfileLambertProfile._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetTargetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetTargetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetEnableSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetTargetPositionX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetTargetPositionY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetTargetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetTargetSemimajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetSemimajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetTargetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetTargetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetTargetRightAscensionOfAscendingNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetRightAscensionOfAscendingNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetTargetArgumentOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetArgumentOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetTargetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetSolutionOption"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+31, POINTER(agcom.LONG))
        self.__dict__["_SetSolutionOption"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+32, agcom.LONG)
        self.__dict__["_GetTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeOfFlight"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+34, agcom.DOUBLE)
        self.__dict__["_GetRevolutions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+35, POINTER(agcom.LONG))
        self.__dict__["_SetRevolutions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+36, agcom.LONG)
        self.__dict__["_GetOrbitalEnergy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+37, POINTER(agcom.LONG))
        self.__dict__["_SetOrbitalEnergy"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+38, agcom.LONG)
        self.__dict__["_GetDirectionOfMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+39, POINTER(agcom.LONG))
        self.__dict__["_SetDirectionOfMotion"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+40, agcom.LONG)
        self.__dict__["_GetCentralBodyCollisionAltitudePadding"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+41, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCentralBodyCollisionAltitudePadding"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+42, agcom.DOUBLE)
        self.__dict__["_GetEnableWriteToFirstManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+43, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteToFirstManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+44, agcom.VARIANT_BOOL)
        self.__dict__["_GetFirstManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+45, POINTER(agcom.BSTR))
        self.__dict__["_SetFirstManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+46, agcom.BSTR)
        self.__dict__["_GetEnableWriteDurationToPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+47, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteDurationToPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+48, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisableNonLambertPropagateStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+49, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisableNonLambertPropagateStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+50, agcom.VARIANT_BOOL)
        self.__dict__["_GetPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+51, POINTER(agcom.BSTR))
        self.__dict__["_SetPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+52, agcom.BSTR)
        self.__dict__["_GetEnableWriteToSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+53, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteToSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+54, agcom.VARIANT_BOOL)
        self.__dict__["_GetSecondManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+55, POINTER(agcom.BSTR))
        self.__dict__["_SetSecondManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertProfile, vtable_offset_local+56, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileLambertProfile.__dict__ and type(IAgVAProfileLambertProfile.__dict__[attrname]) == property:
            return IAgVAProfileLambertProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_newVal.COM_val))

    @property
    def TargetCoordType(self) -> "AgEVALambertTargetCoordType":
        """The target coordinate type."""
        with agmarshall.AgEnum_arg(AgEVALambertTargetCoordType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetCoordType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTargetCoordType(self, elementType:"AgEVALambertTargetCoordType") -> None:
        """Selects a target coordinate type."""
        with agmarshall.AgEnum_arg(AgEVALambertTargetCoordType, elementType) as arg_elementType:
            agcls.evaluate_hresult(self.__dict__["_SetTargetCoordType"](arg_elementType.COM_val))

    @property
    def EnableSecondManeuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableSecondManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableSecondManeuver.setter
    def EnableSecondManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableSecondManeuver"](arg_newVal.COM_val))

    @property
    def TargetPositionX(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionX.setter
    def TargetPositionX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionX"](arg_newVal.COM_val))

    @property
    def TargetPositionY(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionY.setter
    def TargetPositionY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionY"](arg_newVal.COM_val))

    @property
    def TargetPositionZ(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionZ.setter
    def TargetPositionZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionZ"](arg_newVal.COM_val))

    @property
    def TargetVelocityX(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityX.setter
    def TargetVelocityX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityX"](arg_newVal.COM_val))

    @property
    def TargetVelocityY(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityY.setter
    def TargetVelocityY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityY"](arg_newVal.COM_val))

    @property
    def TargetVelocityZ(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityZ.setter
    def TargetVelocityZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityZ"](arg_newVal.COM_val))

    @property
    def TargetSemimajorAxis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetSemimajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetSemimajorAxis.setter
    def TargetSemimajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetSemimajorAxis"](arg_newVal.COM_val))

    @property
    def TargetEccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetEccentricity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetEccentricity.setter
    def TargetEccentricity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetEccentricity"](arg_newVal.COM_val))

    @property
    def TargetInclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetInclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetInclination.setter
    def TargetInclination(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetInclination"](arg_newVal.COM_val))

    @property
    def TargetRightAscensionOfAscendingNode(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetRightAscensionOfAscendingNode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetRightAscensionOfAscendingNode.setter
    def TargetRightAscensionOfAscendingNode(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetRightAscensionOfAscendingNode"](arg_newVal.COM_val))

    @property
    def TargetArgumentOfPeriapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetArgumentOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetArgumentOfPeriapsis.setter
    def TargetArgumentOfPeriapsis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetArgumentOfPeriapsis"](arg_newVal.COM_val))

    @property
    def TargetTrueAnomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetTrueAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetTrueAnomaly.setter
    def TargetTrueAnomaly(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetTrueAnomaly"](arg_newVal.COM_val))

    @property
    def SolutionOption(self) -> "AgEVALambertSolutionOptionType":
        """Lambert solution calculation type."""
        with agmarshall.AgEnum_arg(AgEVALambertSolutionOptionType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolutionOption"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolutionOption.setter
    def SolutionOption(self, newVal:"AgEVALambertSolutionOptionType") -> None:
        with agmarshall.AgEnum_arg(AgEVALambertSolutionOptionType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolutionOption"](arg_newVal.COM_val))

    @property
    def TimeOfFlight(self) -> float:
        """The time of flight between departure and arrival for the Lambert solution."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeOfFlight"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeOfFlight.setter
    def TimeOfFlight(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeOfFlight"](arg_newVal.COM_val))

    @property
    def Revolutions(self) -> int:
        """The number of revolutions. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRevolutions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Revolutions.setter
    def Revolutions(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRevolutions"](arg_newVal.COM_val))

    @property
    def OrbitalEnergy(self) -> "AgEVALambertOrbitalEnergyType":
        """The orbital energy for the Lambert solution."""
        with agmarshall.AgEnum_arg(AgEVALambertOrbitalEnergyType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitalEnergy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitalEnergy.setter
    def OrbitalEnergy(self, newVal:"AgEVALambertOrbitalEnergyType") -> None:
        with agmarshall.AgEnum_arg(AgEVALambertOrbitalEnergyType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitalEnergy"](arg_newVal.COM_val))

    @property
    def DirectionOfMotion(self) -> "AgEVALambertDirectionOfMotionType":
        """The direction of motion (long or short) for the Lambert solution."""
        with agmarshall.AgEnum_arg(AgEVALambertDirectionOfMotionType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirectionOfMotion"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DirectionOfMotion.setter
    def DirectionOfMotion(self, newVal:"AgEVALambertDirectionOfMotionType") -> None:
        with agmarshall.AgEnum_arg(AgEVALambertDirectionOfMotionType, newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDirectionOfMotion"](arg_newVal.COM_val))

    @property
    def CentralBodyCollisionAltitudePadding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyCollisionAltitudePadding"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyCollisionAltitudePadding.setter
    def CentralBodyCollisionAltitudePadding(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyCollisionAltitudePadding"](arg_newVal.COM_val))

    @property
    def EnableWriteToFirstManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteToFirstManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteToFirstManeuver.setter
    def EnableWriteToFirstManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteToFirstManeuver"](arg_newVal.COM_val))

    @property
    def FirstManeuverSegment(self) -> str:
        """The first maneuver segment to manipulate that occurs at the start of the transfer."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstManeuverSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstManeuverSegment.setter
    def FirstManeuverSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstManeuverSegment"](arg_newVal.COM_val))

    @property
    def EnableWriteDurationToPropagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the linked propagate segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteDurationToPropagate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteDurationToPropagate.setter
    def EnableWriteDurationToPropagate(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteDurationToPropagate"](arg_newVal.COM_val))

    @property
    def DisableNonLambertPropagateStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the propagate segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisableNonLambertPropagateStopConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisableNonLambertPropagateStopConditions.setter
    def DisableNonLambertPropagateStopConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisableNonLambertPropagateStopConditions"](arg_newVal.COM_val))

    @property
    def PropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPropagateSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PropagateSegment.setter
    def PropagateSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPropagateSegment"](arg_newVal.COM_val))

    @property
    def EnableWriteToSecondManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteToSecondManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteToSecondManeuver.setter
    def EnableWriteToSecondManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteToSecondManeuver"](arg_newVal.COM_val))

    @property
    def SecondManeuverSegment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondManeuverSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondManeuverSegment.setter
    def SecondManeuverSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondManeuverSegment"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6F736B1F-850D-4736-9106-8BDC4FE52A30}", IAgVAProfileLambertProfile)
agcls.AgTypeNameMap["IAgVAProfileLambertProfile"] = IAgVAProfileLambertProfile
__all__.append("IAgVAProfileLambertProfile")

class IAgVAProfileLambertSearchProfile(IAgVAProfile):
    """Properties for a Lambert Search Profile."""
    _uuid = "{22C5891F-AD49-40BE-9C99-58E23CCFD106}"
    _num_methods = 64
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetTargetCoordType"] = _raise_uninitialized_error
        self.__dict__["_SetTargetCoordType"] = _raise_uninitialized_error
        self.__dict__["_GetEnableSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetEnableTargetMatchPhase"] = _raise_uninitialized_error
        self.__dict__["_SetEnableTargetMatchPhase"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionX"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionX"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionY"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionY"] = _raise_uninitialized_error
        self.__dict__["_GetTargetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_SetTargetPositionZ"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityX"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityX"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityY"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityY"] = _raise_uninitialized_error
        self.__dict__["_GetTargetVelocityZ"] = _raise_uninitialized_error
        self.__dict__["_SetTargetVelocityZ"] = _raise_uninitialized_error
        self.__dict__["_GetTargetSemimajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetTargetSemimajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetTargetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_SetTargetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_GetTargetInclination"] = _raise_uninitialized_error
        self.__dict__["_SetTargetInclination"] = _raise_uninitialized_error
        self.__dict__["_GetTargetRightAscensionOfAscendingNode"] = _raise_uninitialized_error
        self.__dict__["_SetTargetRightAscensionOfAscendingNode"] = _raise_uninitialized_error
        self.__dict__["_GetTargetArgumentOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetTargetArgumentOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetTargetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_SetTargetTrueAnomaly"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteDepartureDelayToFirstPropagate"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteDepartureDelayToFirstPropagate"] = _raise_uninitialized_error
        self.__dict__["_GetDisableFirstPropagateNonLambertStopConditions"] = _raise_uninitialized_error
        self.__dict__["_SetDisableFirstPropagateNonLambertStopConditions"] = _raise_uninitialized_error
        self.__dict__["_GetFirstPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_SetFirstPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteToFirstManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteToFirstManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetFirstManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_SetFirstManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_GetLatestDepartureTime"] = _raise_uninitialized_error
        self.__dict__["_SetLatestDepartureTime"] = _raise_uninitialized_error
        self.__dict__["_GetEarliestArrivalTime"] = _raise_uninitialized_error
        self.__dict__["_SetEarliestArrivalTime"] = _raise_uninitialized_error
        self.__dict__["_GetLatestArrivalTime"] = _raise_uninitialized_error
        self.__dict__["_SetLatestArrivalTime"] = _raise_uninitialized_error
        self.__dict__["_GetGridSearchTimeStep"] = _raise_uninitialized_error
        self.__dict__["_SetGridSearchTimeStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRevolutions"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRevolutions"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyCollisionAltitudePadding"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyCollisionAltitudePadding"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteDurationToSecondPropagate"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteDurationToSecondPropagate"] = _raise_uninitialized_error
        self.__dict__["_GetDisableSecondPropagateNonLambertStopConditions"] = _raise_uninitialized_error
        self.__dict__["_SetDisableSecondPropagateNonLambertStopConditions"] = _raise_uninitialized_error
        self.__dict__["_GetSecondPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_SetSecondPropagateSegment"] = _raise_uninitialized_error
        self.__dict__["_GetEnableWriteToSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_SetEnableWriteToSecondManeuver"] = _raise_uninitialized_error
        self.__dict__["_GetSecondManeuverSegment"] = _raise_uninitialized_error
        self.__dict__["_SetSecondManeuverSegment"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileLambertSearchProfile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileLambertSearchProfile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileLambertSearchProfile = agcom.GUID(IAgVAProfileLambertSearchProfile._uuid)
        vtable_offset_local = IAgVAProfileLambertSearchProfile._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetTargetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetTargetCoordType"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetEnableSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetEnableTargetMatchPhase"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableTargetMatchPhase"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetTargetPositionX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetTargetPositionY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetTargetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetPositionZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityX"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityY"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetTargetVelocityZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetVelocityZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetTargetSemimajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetSemimajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetTargetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetTargetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetTargetRightAscensionOfAscendingNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetRightAscensionOfAscendingNode"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetTargetArgumentOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetArgumentOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetTargetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTargetTrueAnomaly"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetEnableWriteDepartureDelayToFirstPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+33, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteDepartureDelayToFirstPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+34, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisableFirstPropagateNonLambertStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+35, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisableFirstPropagateNonLambertStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+36, agcom.VARIANT_BOOL)
        self.__dict__["_GetFirstPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+37, POINTER(agcom.BSTR))
        self.__dict__["_SetFirstPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+38, agcom.BSTR)
        self.__dict__["_GetEnableWriteToFirstManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+39, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteToFirstManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+40, agcom.VARIANT_BOOL)
        self.__dict__["_GetFirstManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+41, POINTER(agcom.BSTR))
        self.__dict__["_SetFirstManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+42, agcom.BSTR)
        self.__dict__["_GetLatestDepartureTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+43, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLatestDepartureTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+44, agcom.DOUBLE)
        self.__dict__["_GetEarliestArrivalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+45, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEarliestArrivalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+46, agcom.DOUBLE)
        self.__dict__["_GetLatestArrivalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+47, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLatestArrivalTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+48, agcom.DOUBLE)
        self.__dict__["_GetGridSearchTimeStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+49, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGridSearchTimeStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+50, agcom.DOUBLE)
        self.__dict__["_GetMaxRevolutions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+51, POINTER(agcom.LONG))
        self.__dict__["_SetMaxRevolutions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+52, agcom.LONG)
        self.__dict__["_GetCentralBodyCollisionAltitudePadding"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+53, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCentralBodyCollisionAltitudePadding"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+54, agcom.DOUBLE)
        self.__dict__["_GetEnableWriteDurationToSecondPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+55, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteDurationToSecondPropagate"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+56, agcom.VARIANT_BOOL)
        self.__dict__["_GetDisableSecondPropagateNonLambertStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+57, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetDisableSecondPropagateNonLambertStopConditions"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+58, agcom.VARIANT_BOOL)
        self.__dict__["_GetSecondPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+59, POINTER(agcom.BSTR))
        self.__dict__["_SetSecondPropagateSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+60, agcom.BSTR)
        self.__dict__["_GetEnableWriteToSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+61, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableWriteToSecondManeuver"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+62, agcom.VARIANT_BOOL)
        self.__dict__["_GetSecondManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+63, POINTER(agcom.BSTR))
        self.__dict__["_SetSecondManeuverSegment"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileLambertSearchProfile, vtable_offset_local+64, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileLambertSearchProfile.__dict__ and type(IAgVAProfileLambertSearchProfile.__dict__[attrname]) == property:
            return IAgVAProfileLambertSearchProfile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_newVal.COM_val))

    @property
    def TargetCoordType(self) -> "AgEVALambertTargetCoordType":
        """The target coordinate type."""
        with agmarshall.AgEnum_arg(AgEVALambertTargetCoordType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetCoordType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetTargetCoordType(self, elementType:"AgEVALambertTargetCoordType") -> None:
        """Selects a target coordinate type."""
        with agmarshall.AgEnum_arg(AgEVALambertTargetCoordType, elementType) as arg_elementType:
            agcls.evaluate_hresult(self.__dict__["_SetTargetCoordType"](arg_elementType.COM_val))

    @property
    def EnableSecondManeuver(self) -> bool:
        """Enable to calculate second maneuver at destination."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableSecondManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableSecondManeuver.setter
    def EnableSecondManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableSecondManeuver"](arg_newVal.COM_val))

    @property
    def EnableTargetMatchPhase(self) -> bool:
        """Set this to true if the satellite should match the phase of the orbit at the target."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableTargetMatchPhase"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableTargetMatchPhase.setter
    def EnableTargetMatchPhase(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableTargetMatchPhase"](arg_newVal.COM_val))

    @property
    def TargetPositionX(self) -> float:
        """The X component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionX.setter
    def TargetPositionX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionX"](arg_newVal.COM_val))

    @property
    def TargetPositionY(self) -> float:
        """The Y component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionY.setter
    def TargetPositionY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionY"](arg_newVal.COM_val))

    @property
    def TargetPositionZ(self) -> float:
        """The Z component of the target position for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetPositionZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetPositionZ.setter
    def TargetPositionZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetPositionZ"](arg_newVal.COM_val))

    @property
    def TargetVelocityX(self) -> float:
        """The X component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityX.setter
    def TargetVelocityX(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityX"](arg_newVal.COM_val))

    @property
    def TargetVelocityY(self) -> float:
        """The Y component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityY.setter
    def TargetVelocityY(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityY"](arg_newVal.COM_val))

    @property
    def TargetVelocityZ(self) -> float:
        """The Z component of the target velocity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetVelocityZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetVelocityZ.setter
    def TargetVelocityZ(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetVelocityZ"](arg_newVal.COM_val))

    @property
    def TargetSemimajorAxis(self) -> float:
        """The target semimajor axis for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetSemimajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetSemimajorAxis.setter
    def TargetSemimajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetSemimajorAxis"](arg_newVal.COM_val))

    @property
    def TargetEccentricity(self) -> float:
        """The target eccentricity for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetEccentricity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetEccentricity.setter
    def TargetEccentricity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetEccentricity"](arg_newVal.COM_val))

    @property
    def TargetInclination(self) -> float:
        """The target inclination for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetInclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetInclination.setter
    def TargetInclination(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetInclination"](arg_newVal.COM_val))

    @property
    def TargetRightAscensionOfAscendingNode(self) -> float:
        """The target right ascension of the ascending node for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetRightAscensionOfAscendingNode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetRightAscensionOfAscendingNode.setter
    def TargetRightAscensionOfAscendingNode(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetRightAscensionOfAscendingNode"](arg_newVal.COM_val))

    @property
    def TargetArgumentOfPeriapsis(self) -> float:
        """The target argument of periapsis for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetArgumentOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetArgumentOfPeriapsis.setter
    def TargetArgumentOfPeriapsis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetArgumentOfPeriapsis"](arg_newVal.COM_val))

    @property
    def TargetTrueAnomaly(self) -> float:
        """The target true anomaly for the end of the Lambert transfer."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetTrueAnomaly"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetTrueAnomaly.setter
    def TargetTrueAnomaly(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetTrueAnomaly"](arg_newVal.COM_val))

    @property
    def EnableWriteDepartureDelayToFirstPropagate(self) -> bool:
        """Set this to true to write the departure delay duration before the Lambert transfer to the 'LambertDuration' stopping condition in the first linked propagate segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteDepartureDelayToFirstPropagate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteDepartureDelayToFirstPropagate.setter
    def EnableWriteDepartureDelayToFirstPropagate(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteDepartureDelayToFirstPropagate"](arg_newVal.COM_val))

    @property
    def DisableFirstPropagateNonLambertStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the first propagate segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisableFirstPropagateNonLambertStopConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisableFirstPropagateNonLambertStopConditions.setter
    def DisableFirstPropagateNonLambertStopConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisableFirstPropagateNonLambertStopConditions"](arg_newVal.COM_val))

    @property
    def FirstPropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the departure delay."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstPropagateSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstPropagateSegment.setter
    def FirstPropagateSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstPropagateSegment"](arg_newVal.COM_val))

    @property
    def EnableWriteToFirstManeuver(self) -> bool:
        """et this to true to write the Delta-V solution from Lambert at the start of the transfer to the linked maneuver."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteToFirstManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteToFirstManeuver.setter
    def EnableWriteToFirstManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteToFirstManeuver"](arg_newVal.COM_val))

    @property
    def FirstManeuverSegment(self) -> str:
        """This is the first maneuver segment to manipulate that occurs at the start of the transfer. It is visible when you select Write Initial Inertial Delta-V to Maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstManeuverSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstManeuverSegment.setter
    def FirstManeuverSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstManeuverSegment"](arg_newVal.COM_val))

    @property
    def LatestDepartureTime(self) -> float:
        """This is the latest time from the start of the target sequence for the first Lambert maneuver to occur."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatestDepartureTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LatestDepartureTime.setter
    def LatestDepartureTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatestDepartureTime"](arg_newVal.COM_val))

    @property
    def EarliestArrivalTime(self) -> float:
        """This is the earliest time from the start of the target sequence that the satellite should arrive at its destination."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEarliestArrivalTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EarliestArrivalTime.setter
    def EarliestArrivalTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEarliestArrivalTime"](arg_newVal.COM_val))

    @property
    def LatestArrivalTime(self) -> float:
        """This is the latest time from the start of the target sequence that the satellite should arrive at its destination."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLatestArrivalTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LatestArrivalTime.setter
    def LatestArrivalTime(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetLatestArrivalTime"](arg_newVal.COM_val))

    @property
    def GridSearchTimeStep(self) -> float:
        """This is the time step between Lambert evaluations for searching over both the departure window and arrival window of time."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGridSearchTimeStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GridSearchTimeStep.setter
    def GridSearchTimeStep(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGridSearchTimeStep"](arg_newVal.COM_val))

    @property
    def MaxRevolutions(self) -> int:
        """This is the maximum number of revolutions for the Lambert solution."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRevolutions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRevolutions.setter
    def MaxRevolutions(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRevolutions"](arg_newVal.COM_val))

    @property
    def CentralBodyCollisionAltitudePadding(self) -> float:
        """The minimum altitude below which the Lambert algorithm will consider the spacecraft to have hit the central body."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyCollisionAltitudePadding"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyCollisionAltitudePadding.setter
    def CentralBodyCollisionAltitudePadding(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyCollisionAltitudePadding"](arg_newVal.COM_val))

    @property
    def EnableWriteDurationToSecondPropagate(self) -> bool:
        """Set this to true to write the Lambert duration of transfer to the 'LambertDuration' stopping condition in the second linked propagate segment."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteDurationToSecondPropagate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteDurationToSecondPropagate.setter
    def EnableWriteDurationToSecondPropagate(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteDurationToSecondPropagate"](arg_newVal.COM_val))

    @property
    def DisableSecondPropagateNonLambertStopConditions(self) -> bool:
        """Set this to true to disable all non-LambertDuration stopping conditions in the second propagate segment. This is visible when you select Write Flight Duration to Second Propagate."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDisableSecondPropagateNonLambertStopConditions"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DisableSecondPropagateNonLambertStopConditions.setter
    def DisableSecondPropagateNonLambertStopConditions(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDisableSecondPropagateNonLambertStopConditions"](arg_newVal.COM_val))

    @property
    def SecondPropagateSegment(self) -> str:
        """This is the propagate segment to manipulate that contains the transfer duration. It is visible when you select Write Flight Duration to Second Propagate."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondPropagateSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondPropagateSegment.setter
    def SecondPropagateSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondPropagateSegment"](arg_newVal.COM_val))

    @property
    def EnableWriteToSecondManeuver(self) -> bool:
        """Set this to true to write the Delta-V solution from Lambert at the end of the transfer to the linked maneuver. It is visible when you select Calculate Second Maneuver At Destination ."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableWriteToSecondManeuver"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableWriteToSecondManeuver.setter
    def EnableWriteToSecondManeuver(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableWriteToSecondManeuver"](arg_newVal.COM_val))

    @property
    def SecondManeuverSegment(self) -> str:
        """This is the second maneuver segment to manipulate that occurs at the end of the transfer. It is visible when you select Write Final Inertial Delta-V to Maneuver."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondManeuverSegment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondManeuverSegment.setter
    def SecondManeuverSegment(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondManeuverSegment"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{22C5891F-AD49-40BE-9C99-58E23CCFD106}", IAgVAProfileLambertSearchProfile)
agcls.AgTypeNameMap["IAgVAProfileLambertSearchProfile"] = IAgVAProfileLambertSearchProfile
__all__.append("IAgVAProfileLambertSearchProfile")

class IAgVAProfileGoldenSection(IAgVAProfile):
    """Properties for a Golden Section profile."""
    _uuid = "{505EC87D-BE26-4477-B7E8-6586731428D0}"
    _num_methods = 9
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetControls"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_GetLogFile"] = _raise_uninitialized_error
        self.__dict__["_GetEnableDisplayStatus"] = _raise_uninitialized_error
        self.__dict__["_SetEnableDisplayStatus"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileGoldenSection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileGoldenSection from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileGoldenSection = agcom.GUID(IAgVAProfileGoldenSection._uuid)
        vtable_offset_local = IAgVAProfileGoldenSection._vtable_offset - 1
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetLogFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGoldenSection, vtable_offset_local+9, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileGoldenSection.__dict__ and type(IAgVAProfileGoldenSection.__dict__[attrname]) == property:
            return IAgVAProfileGoldenSection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Controls(self) -> "IAgVAGoldenSectionControlCollection":
        """The list of control parameters defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAGoldenSectionControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControls"](byref(arg_ppVAGoldenSectionControlCollection.COM_val)))
            return arg_ppVAGoldenSectionControlCollection.python_val

    @property
    def Results(self) -> "IAgVAGoldenSectionResultCollection":
        """The list of results defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAGoldenSectionResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVAGoldenSectionResultCollection.COM_val)))
            return arg_ppVAGoldenSectionResultCollection.python_val

    @property
    def MaxIterations(self) -> int:
        """The number of complete iterations of the profile to try before stopping. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, newVal:int) -> None:
        with agmarshall.LONG_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_newVal.COM_val))

    @property
    def LogFile(self) -> str:
        """Name of the log file for this profile."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLogFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableDisplayStatus"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableDisplayStatus"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{505EC87D-BE26-4477-B7E8-6586731428D0}", IAgVAProfileGoldenSection)
agcls.AgTypeNameMap["IAgVAProfileGoldenSection"] = IAgVAProfileGoldenSection
__all__.append("IAgVAProfileGoldenSection")

class IAgVAProfileGridSearch(IAgVAProfile):
    """Properties for a Grid Search profile."""
    _uuid = "{EDE96C58-0563-4B05-A7B6-735C3699FE87}"
    _num_methods = 9
    _vtable_offset = IAgVAProfile._vtable_offset + IAgVAProfile._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargeterGraphs"] = _raise_uninitialized_error
        self.__dict__["_GetScriptingTool"] = _raise_uninitialized_error
        self.__dict__["_GetControls"] = _raise_uninitialized_error
        self.__dict__["_GetResults"] = _raise_uninitialized_error
        self.__dict__["_GetLogFile"] = _raise_uninitialized_error
        self.__dict__["_GetEnableDisplayStatus"] = _raise_uninitialized_error
        self.__dict__["_SetEnableDisplayStatus"] = _raise_uninitialized_error
        self.__dict__["_GetShouldGenerateGraph"] = _raise_uninitialized_error
        self.__dict__["_SetShouldGenerateGraph"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAProfileGridSearch._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAProfileGridSearch from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfile._private_init(self, pUnk)
        IID_IAgVAProfileGridSearch = agcom.GUID(IAgVAProfileGridSearch._uuid)
        vtable_offset_local = IAgVAProfileGridSearch._vtable_offset - 1
        self.__dict__["_GetTargeterGraphs"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetScriptingTool"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetControls"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetResults"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetLogFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetEnableDisplayStatus"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+7, agcom.VARIANT_BOOL)
        self.__dict__["_GetShouldGenerateGraph"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetShouldGenerateGraph"] = IAGFUNCTYPE(pUnk, IID_IAgVAProfileGridSearch, vtable_offset_local+9, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAProfileGridSearch.__dict__ and type(IAgVAProfileGridSearch.__dict__[attrname]) == property:
            return IAgVAProfileGridSearch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVAProfile.__setattr__(self, attrname, value)
    
    @property
    def TargeterGraphs(self) -> "IAgVATargeterGraphCollection":
        """Graphs"""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargeterGraphs"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ScriptingTool(self) -> "IAgVAScriptingTool":
        """Returns the Scripting tool for the sequence."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptingTool"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Controls(self) -> "IAgVAGridSearchControlCollection":
        """The list of control parameters defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAGridSearchControlCollection:
            agcls.evaluate_hresult(self.__dict__["_GetControls"](byref(arg_ppVAGridSearchControlCollection.COM_val)))
            return arg_ppVAGridSearchControlCollection.python_val

    @property
    def Results(self) -> "IAgVAGridSearchResultCollection":
        """The list of results defined for the profile."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAGridSearchResultCollection:
            agcls.evaluate_hresult(self.__dict__["_GetResults"](byref(arg_ppVAGridSearchResultCollection.COM_val)))
            return arg_ppVAGridSearchResultCollection.python_val

    @property
    def LogFile(self) -> str:
        """Name of the log file for this profile."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLogFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def EnableDisplayStatus(self) -> bool:
        """If true, a page will appear during the targeting run to report the status of the targeting effort in terms of proximity to the desired value for each dependent variable in the profile."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEnableDisplayStatus"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EnableDisplayStatus.setter
    def EnableDisplayStatus(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEnableDisplayStatus"](arg_newVal.COM_val))

    @property
    def ShouldGenerateGraph(self) -> bool:
        """If true, a plot is automatically generate the selected result value versus the control value for the grid search when the profile runs."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShouldGenerateGraph"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShouldGenerateGraph.setter
    def ShouldGenerateGraph(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetShouldGenerateGraph"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{EDE96C58-0563-4B05-A7B6-735C3699FE87}", IAgVAProfileGridSearch)
agcls.AgTypeNameMap["IAgVAProfileGridSearch"] = IAgVAProfileGridSearch
__all__.append("IAgVAProfileGridSearch")

class IAgVAStateCalcHeightAboveTerrain(object):
    """Interface for StateCalcHeightAboveTerrain"""
    _uuid = "{30A4FAC3-1250-456A-BB29-689AA50F8D75}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcHeightAboveTerrain._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcHeightAboveTerrain from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcHeightAboveTerrain = agcom.GUID(IAgVAStateCalcHeightAboveTerrain._uuid)
        vtable_offset_local = IAgVAStateCalcHeightAboveTerrain._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcHeightAboveTerrain, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcHeightAboveTerrain, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcHeightAboveTerrain.__dict__ and type(IAgVAStateCalcHeightAboveTerrain.__dict__[attrname]) == property:
            return IAgVAStateCalcHeightAboveTerrain.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcHeightAboveTerrain.")
    
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{30A4FAC3-1250-456A-BB29-689AA50F8D75}", IAgVAStateCalcHeightAboveTerrain)
agcls.AgTypeNameMap["IAgVAStateCalcHeightAboveTerrain"] = IAgVAStateCalcHeightAboveTerrain
__all__.append("IAgVAStateCalcHeightAboveTerrain")

class IAgVAStateCalcEpoch(object):
    """Properties for an Epoch calculation object."""
    _uuid = "{F23ADE47-91EF-41B9-9606-DA034C50F69D}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEpoch._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEpoch from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEpoch = agcom.GUID(IAgVAStateCalcEpoch._uuid)
        vtable_offset_local = IAgVAStateCalcEpoch._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEpoch.__dict__ and type(IAgVAStateCalcEpoch.__dict__[attrname]) == property:
            return IAgVAStateCalcEpoch.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEpoch.")
    

agcls.AgClassCatalog.add_catalog_entry("{F23ADE47-91EF-41B9-9606-DA034C50F69D}", IAgVAStateCalcEpoch)
agcls.AgTypeNameMap["IAgVAStateCalcEpoch"] = IAgVAStateCalcEpoch
__all__.append("IAgVAStateCalcEpoch")

class IAgVAStateCalcOrbitDelaunayG(object):
    """Interface for AsStateCalcOrbitDelaunayG"""
    _uuid = "{8527A30E-E743-4040-8B0D-7AE1EB237279}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitDelaunayG._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayG from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitDelaunayG = agcom.GUID(IAgVAStateCalcOrbitDelaunayG._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitDelaunayG._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayG, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayG, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayG, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayG, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayG.__dict__ and type(IAgVAStateCalcOrbitDelaunayG.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayG.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayG.")
    
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8527A30E-E743-4040-8B0D-7AE1EB237279}", IAgVAStateCalcOrbitDelaunayG)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayG"] = IAgVAStateCalcOrbitDelaunayG
__all__.append("IAgVAStateCalcOrbitDelaunayG")

class IAgVAStateCalcOrbitDelaunayH(object):
    """Interface for AsStateCalcOrbitDelaunayH"""
    _uuid = "{01E122E4-2B6D-4301-81D2-B83B6C169CB5}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitDelaunayH._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayH from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitDelaunayH = agcom.GUID(IAgVAStateCalcOrbitDelaunayH._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitDelaunayH._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayH, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayH, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayH, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayH, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayH.__dict__ and type(IAgVAStateCalcOrbitDelaunayH.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayH.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayH.")
    
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{01E122E4-2B6D-4301-81D2-B83B6C169CB5}", IAgVAStateCalcOrbitDelaunayH)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayH"] = IAgVAStateCalcOrbitDelaunayH
__all__.append("IAgVAStateCalcOrbitDelaunayH")

class IAgVAStateCalcOrbitDelaunayL(object):
    """Interface for AsStateCalcOrbitDelaunayL"""
    _uuid = "{10C517CA-1CF0-45FF-B36E-3E3181269745}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitDelaunayL._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitDelaunayL from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitDelaunayL = agcom.GUID(IAgVAStateCalcOrbitDelaunayL._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitDelaunayL._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayL, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayL, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayL, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitDelaunayL, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitDelaunayL.__dict__ and type(IAgVAStateCalcOrbitDelaunayL.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitDelaunayL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitDelaunayL.")
    
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{10C517CA-1CF0-45FF-B36E-3E3181269745}", IAgVAStateCalcOrbitDelaunayL)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitDelaunayL"] = IAgVAStateCalcOrbitDelaunayL
__all__.append("IAgVAStateCalcOrbitDelaunayL")

class IAgVAStateCalcOrbitSemiLatusRectum(object):
    """Interface for AsStateCalcOrbitSemiLatusRectum"""
    _uuid = "{06396376-8F96-419A-86D4-32298E6A6087}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitSemiLatusRectum._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitSemiLatusRectum from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitSemiLatusRectum = agcom.GUID(IAgVAStateCalcOrbitSemiLatusRectum._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitSemiLatusRectum._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitSemiLatusRectum, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitSemiLatusRectum, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitSemiLatusRectum, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitSemiLatusRectum, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitSemiLatusRectum.__dict__ and type(IAgVAStateCalcOrbitSemiLatusRectum.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitSemiLatusRectum.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitSemiLatusRectum.")
    
    @property
    def CentralBodyName(self) -> str:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        """Central Body used for calculation"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVAElement":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVAElement") -> None:
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVAElement, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{06396376-8F96-419A-86D4-32298E6A6087}", IAgVAStateCalcOrbitSemiLatusRectum)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitSemiLatusRectum"] = IAgVAStateCalcOrbitSemiLatusRectum
__all__.append("IAgVAStateCalcOrbitSemiLatusRectum")

class IAgVAStateCalcJacobiConstant(object):
    """Properties for a Jacobi Constant calculation object."""
    _uuid = "{12857E60-E0BF-49BE-84EA-F9A0C73DB557}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcJacobiConstant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcJacobiConstant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcJacobiConstant = agcom.GUID(IAgVAStateCalcJacobiConstant._uuid)
        vtable_offset_local = IAgVAStateCalcJacobiConstant._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcJacobiConstant.__dict__ and type(IAgVAStateCalcJacobiConstant.__dict__[attrname]) == property:
            return IAgVAStateCalcJacobiConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcJacobiConstant.")
    

agcls.AgClassCatalog.add_catalog_entry("{12857E60-E0BF-49BE-84EA-F9A0C73DB557}", IAgVAStateCalcJacobiConstant)
agcls.AgTypeNameMap["IAgVAStateCalcJacobiConstant"] = IAgVAStateCalcJacobiConstant
__all__.append("IAgVAStateCalcJacobiConstant")

class IAgVAStateCalcCartesianElem(object):
    """Properties for a Cartesian Element calculation object."""
    _uuid = "{43611884-2507-4D9B-AFF2-9BC5AA0786BD}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCartesianElem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCartesianElem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCartesianElem = agcom.GUID(IAgVAStateCalcCartesianElem._uuid)
        vtable_offset_local = IAgVAStateCalcCartesianElem._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartesianElem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartesianElem, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCartesianElem.__dict__ and type(IAgVAStateCalcCartesianElem.__dict__[attrname]) == property:
            return IAgVAStateCalcCartesianElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCartesianElem.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{43611884-2507-4D9B-AFF2-9BC5AA0786BD}", IAgVAStateCalcCartesianElem)
agcls.AgTypeNameMap["IAgVAStateCalcCartesianElem"] = IAgVAStateCalcCartesianElem
__all__.append("IAgVAStateCalcCartesianElem")

class IAgVAStateCalcCartSTMElem(object):
    """Properties for a Cartesian STM Element calculation object."""
    _uuid = "{72B246C3-618A-40B7-8501-C39BF07E4B95}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetFinalVar"] = _raise_uninitialized_error
        self.__dict__["_SetFinalVar"] = _raise_uninitialized_error
        self.__dict__["_GetInitVar"] = _raise_uninitialized_error
        self.__dict__["_SetInitVar"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCartSTMElem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCartSTMElem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCartSTMElem = agcom.GUID(IAgVAStateCalcCartSTMElem._uuid)
        vtable_offset_local = IAgVAStateCalcCartSTMElem._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetFinalVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetFinalVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetInitVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetInitVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCartSTMElem, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCartSTMElem.__dict__ and type(IAgVAStateCalcCartSTMElem.__dict__[attrname]) == property:
            return IAgVAStateCalcCartSTMElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCartSTMElem.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def FinalVar(self) -> "AgEVASTMPertVariables":
        """The final variation variable."""
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFinalVar"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FinalVar.setter
    def FinalVar(self, inVal:"AgEVASTMPertVariables") -> None:
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetFinalVar"](arg_inVal.COM_val))

    @property
    def InitVar(self) -> "AgEVASTMPertVariables":
        """The initial variation variable."""
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitVar"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitVar.setter
    def InitVar(self, inVal:"AgEVASTMPertVariables") -> None:
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitVar"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{72B246C3-618A-40B7-8501-C39BF07E4B95}", IAgVAStateCalcCartSTMElem)
agcls.AgTypeNameMap["IAgVAStateCalcCartSTMElem"] = IAgVAStateCalcCartSTMElem
__all__.append("IAgVAStateCalcCartSTMElem")

class IAgVAStateCalcSTMEigenval(object):
    """Properties for an STM Eigenvalue calculation object."""
    _uuid = "{24838E22-D7CE-40FF-8268-9E72AE39467B}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetEigenvalueNumber"] = _raise_uninitialized_error
        self.__dict__["_SetEigenvalueNumber"] = _raise_uninitialized_error
        self.__dict__["_GetEigenvalueComplexPart"] = _raise_uninitialized_error
        self.__dict__["_SetEigenvalueComplexPart"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSTMEigenval._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSTMEigenval from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSTMEigenval = agcom.GUID(IAgVAStateCalcSTMEigenval._uuid)
        vtable_offset_local = IAgVAStateCalcSTMEigenval._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetEigenvalueNumber"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetEigenvalueNumber"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetEigenvalueComplexPart"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetEigenvalueComplexPart"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenval, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSTMEigenval.__dict__ and type(IAgVAStateCalcSTMEigenval.__dict__[attrname]) == property:
            return IAgVAStateCalcSTMEigenval.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSTMEigenval.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def EigenvalueNumber(self) -> "AgEVASTMEigenNumber":
        """The number identifying one of the six Eigenvalues."""
        with agmarshall.AgEnum_arg(AgEVASTMEigenNumber) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEigenvalueNumber"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EigenvalueNumber.setter
    def EigenvalueNumber(self, inVal:"AgEVASTMEigenNumber") -> None:
        with agmarshall.AgEnum_arg(AgEVASTMEigenNumber, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEigenvalueNumber"](arg_inVal.COM_val))

    @property
    def EigenvalueComplexPart(self) -> "AgEVAComplexNumber":
        """Whether this value represents the real or imaginary part of the Eigenvalue."""
        with agmarshall.AgEnum_arg(AgEVAComplexNumber) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEigenvalueComplexPart"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EigenvalueComplexPart.setter
    def EigenvalueComplexPart(self, inVal:"AgEVAComplexNumber") -> None:
        with agmarshall.AgEnum_arg(AgEVAComplexNumber, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEigenvalueComplexPart"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{24838E22-D7CE-40FF-8268-9E72AE39467B}", IAgVAStateCalcSTMEigenval)
agcls.AgTypeNameMap["IAgVAStateCalcSTMEigenval"] = IAgVAStateCalcSTMEigenval
__all__.append("IAgVAStateCalcSTMEigenval")

class IAgVAStateCalcSTMEigenvecElem(object):
    """Properties for an STM Eigenvector element calculation object."""
    _uuid = "{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetEigenvectorNumber"] = _raise_uninitialized_error
        self.__dict__["_SetEigenvectorNumber"] = _raise_uninitialized_error
        self.__dict__["_GetStateVariable"] = _raise_uninitialized_error
        self.__dict__["_SetStateVariable"] = _raise_uninitialized_error
        self.__dict__["_GetEigenvectorComplexPart"] = _raise_uninitialized_error
        self.__dict__["_SetEigenvectorComplexPart"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSTMEigenvecElem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSTMEigenvecElem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSTMEigenvecElem = agcom.GUID(IAgVAStateCalcSTMEigenvecElem._uuid)
        vtable_offset_local = IAgVAStateCalcSTMEigenvecElem._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetEigenvectorNumber"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetEigenvectorNumber"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetStateVariable"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetStateVariable"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEigenvectorComplexPart"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetEigenvectorComplexPart"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSTMEigenvecElem, vtable_offset_local+8, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSTMEigenvecElem.__dict__ and type(IAgVAStateCalcSTMEigenvecElem.__dict__[attrname]) == property:
            return IAgVAStateCalcSTMEigenvecElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSTMEigenvecElem.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def EigenvectorNumber(self) -> "AgEVASTMEigenNumber":
        """The number identifying one of the six Eigenvectors."""
        with agmarshall.AgEnum_arg(AgEVASTMEigenNumber) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEigenvectorNumber"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EigenvectorNumber.setter
    def EigenvectorNumber(self, inVal:"AgEVASTMEigenNumber") -> None:
        with agmarshall.AgEnum_arg(AgEVASTMEigenNumber, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEigenvectorNumber"](arg_inVal.COM_val))

    @property
    def StateVariable(self) -> "AgEVASTMPertVariables":
        """The variable identifying the component within an Eigenvector."""
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetStateVariable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @StateVariable.setter
    def StateVariable(self, inVal:"AgEVASTMPertVariables") -> None:
        with agmarshall.AgEnum_arg(AgEVASTMPertVariables, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetStateVariable"](arg_inVal.COM_val))

    @property
    def EigenvectorComplexPart(self) -> "AgEVAComplexNumber":
        """Whether this value represents the real or imaginary part of an Eigenvector element."""
        with agmarshall.AgEnum_arg(AgEVAComplexNumber) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEigenvectorComplexPart"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EigenvectorComplexPart.setter
    def EigenvectorComplexPart(self, inVal:"AgEVAComplexNumber") -> None:
        with agmarshall.AgEnum_arg(AgEVAComplexNumber, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEigenvectorComplexPart"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7D28974A-19AF-4E80-889E-5CDA7E9DACEB}", IAgVAStateCalcSTMEigenvecElem)
agcls.AgTypeNameMap["IAgVAStateCalcSTMEigenvecElem"] = IAgVAStateCalcSTMEigenvecElem
__all__.append("IAgVAStateCalcSTMEigenvecElem")

class IAgVAStateCalcEnvironment(object):
    """Properties for an Environment calculation object."""
    _uuid = "{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosModelName"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosModelName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEnvironment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEnvironment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEnvironment = agcom.GUID(IAgVAStateCalcEnvironment._uuid)
        vtable_offset_local = IAgVAStateCalcEnvironment._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEnvironment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEnvironment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetAtmosModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEnvironment, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEnvironment, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEnvironment.__dict__ and type(IAgVAStateCalcEnvironment.__dict__[attrname]) == property:
            return IAgVAStateCalcEnvironment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEnvironment.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def AtmosModelName(self) -> str:
        """The atmospheric density model of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosModelName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosModelName.setter
    def AtmosModelName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosModelName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BB89B6D8-34A3-42F2-B7B3-CFDAAA9BE00C}", IAgVAStateCalcEnvironment)
agcls.AgTypeNameMap["IAgVAStateCalcEnvironment"] = IAgVAStateCalcEnvironment
__all__.append("IAgVAStateCalcEnvironment")

class IAgVAStateCalcEquinoctialElem(object):
    """Properties for an Equinoctial Element calculation object."""
    _uuid = "{A63BA51C-CE64-410D-832F-7BDCE13E5069}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEquinoctialElem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEquinoctialElem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEquinoctialElem = agcom.GUID(IAgVAStateCalcEquinoctialElem._uuid)
        vtable_offset_local = IAgVAStateCalcEquinoctialElem._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEquinoctialElem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEquinoctialElem, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEquinoctialElem, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEquinoctialElem, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEquinoctialElem.__dict__ and type(IAgVAStateCalcEquinoctialElem.__dict__[attrname]) == property:
            return IAgVAStateCalcEquinoctialElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEquinoctialElem.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A63BA51C-CE64-410D-832F-7BDCE13E5069}", IAgVAStateCalcEquinoctialElem)
agcls.AgTypeNameMap["IAgVAStateCalcEquinoctialElem"] = IAgVAStateCalcEquinoctialElem
__all__.append("IAgVAStateCalcEquinoctialElem")

class IAgVAStateCalcDamageFlux(object):
    """Interface for AgAsStateCalcDamageFlux"""
    _uuid = "{5E7EBA7C-121F-4649-8599-A222F65BA10B}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDamageFlux._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDamageFlux from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDamageFlux = agcom.GUID(IAgVAStateCalcDamageFlux._uuid)
        vtable_offset_local = IAgVAStateCalcDamageFlux._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDamageFlux.__dict__ and type(IAgVAStateCalcDamageFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcDamageFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDamageFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{5E7EBA7C-121F-4649-8599-A222F65BA10B}", IAgVAStateCalcDamageFlux)
agcls.AgTypeNameMap["IAgVAStateCalcDamageFlux"] = IAgVAStateCalcDamageFlux
__all__.append("IAgVAStateCalcDamageFlux")

class IAgVAStateCalcDamageMassFlux(object):
    """Interface for AgAsStateCalcDamageMassFlux"""
    _uuid = "{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDamageMassFlux._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDamageMassFlux from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDamageMassFlux = agcom.GUID(IAgVAStateCalcDamageMassFlux._uuid)
        vtable_offset_local = IAgVAStateCalcDamageMassFlux._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDamageMassFlux.__dict__ and type(IAgVAStateCalcDamageMassFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcDamageMassFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDamageMassFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{CDA309A6-91BD-49DF-BE71-E3F194AB73AE}", IAgVAStateCalcDamageMassFlux)
agcls.AgTypeNameMap["IAgVAStateCalcDamageMassFlux"] = IAgVAStateCalcDamageMassFlux
__all__.append("IAgVAStateCalcDamageMassFlux")

class IAgVAStateCalcMagFieldDipoleL(object):
    """Interface for AgAsStateCalcMagFieldDipoleL"""
    _uuid = "{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMagFieldDipoleL._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMagFieldDipoleL from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMagFieldDipoleL = agcom.GUID(IAgVAStateCalcMagFieldDipoleL._uuid)
        vtable_offset_local = IAgVAStateCalcMagFieldDipoleL._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMagFieldDipoleL.__dict__ and type(IAgVAStateCalcMagFieldDipoleL.__dict__[attrname]) == property:
            return IAgVAStateCalcMagFieldDipoleL.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMagFieldDipoleL.")
    

agcls.AgClassCatalog.add_catalog_entry("{46E20C5A-4030-4D57-AAA7-38CFFD65D91D}", IAgVAStateCalcMagFieldDipoleL)
agcls.AgTypeNameMap["IAgVAStateCalcMagFieldDipoleL"] = IAgVAStateCalcMagFieldDipoleL
__all__.append("IAgVAStateCalcMagFieldDipoleL")

class IAgVAStateCalcSEETMagFieldFieldLineSepAngle(object):
    """Properties for a SEETMagFieldFieldLineSepAngle calculation object."""
    _uuid = "{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}"
    _num_methods = 1
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetObject"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSEETMagFieldFieldLineSepAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETMagFieldFieldLineSepAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSEETMagFieldFieldLineSepAngle = agcom.GUID(IAgVAStateCalcSEETMagFieldFieldLineSepAngle._uuid)
        vtable_offset_local = IAgVAStateCalcSEETMagFieldFieldLineSepAngle._vtable_offset - 1
        self.__dict__["_GetTargetObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSEETMagFieldFieldLineSepAngle, vtable_offset_local+1, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__ and type(IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETMagFieldFieldLineSepAngle.")
    
    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetTargetObject"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{FFCDD5EA-7808-4A0C-BDA5-5E4BC504F968}", IAgVAStateCalcSEETMagFieldFieldLineSepAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSEETMagFieldFieldLineSepAngle"] = IAgVAStateCalcSEETMagFieldFieldLineSepAngle
__all__.append("IAgVAStateCalcSEETMagFieldFieldLineSepAngle")

class IAgVAStateCalcImpactFlux(object):
    """Interface for AgAsStateCalcImpactFlux"""
    _uuid = "{70F6FCD6-139C-4166-B242-61652F690A89}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcImpactFlux._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcImpactFlux from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcImpactFlux = agcom.GUID(IAgVAStateCalcImpactFlux._uuid)
        vtable_offset_local = IAgVAStateCalcImpactFlux._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcImpactFlux.__dict__ and type(IAgVAStateCalcImpactFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcImpactFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcImpactFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{70F6FCD6-139C-4166-B242-61652F690A89}", IAgVAStateCalcImpactFlux)
agcls.AgTypeNameMap["IAgVAStateCalcImpactFlux"] = IAgVAStateCalcImpactFlux
__all__.append("IAgVAStateCalcImpactFlux")

class IAgVAStateCalcImpactMassFlux(object):
    """Interface for AgAsStateCalcImpactMassFlux"""
    _uuid = "{67D77299-1936-4E9A-A44F-C155686E4DB2}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcImpactMassFlux._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcImpactMassFlux from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcImpactMassFlux = agcom.GUID(IAgVAStateCalcImpactMassFlux._uuid)
        vtable_offset_local = IAgVAStateCalcImpactMassFlux._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcImpactMassFlux.__dict__ and type(IAgVAStateCalcImpactMassFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcImpactMassFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcImpactMassFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{67D77299-1936-4E9A-A44F-C155686E4DB2}", IAgVAStateCalcImpactMassFlux)
agcls.AgTypeNameMap["IAgVAStateCalcImpactMassFlux"] = IAgVAStateCalcImpactMassFlux
__all__.append("IAgVAStateCalcImpactMassFlux")

class IAgVAStateCalcSEETSAAFlux(object):
    """Interface for AgAsStateCalcSEETSAAFlux"""
    _uuid = "{3C633703-2759-4894-96EA-F6E3C2F98AA1}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSEETSAAFlux._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETSAAFlux from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSEETSAAFlux = agcom.GUID(IAgVAStateCalcSEETSAAFlux._uuid)
        vtable_offset_local = IAgVAStateCalcSEETSAAFlux._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETSAAFlux.__dict__ and type(IAgVAStateCalcSEETSAAFlux.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETSAAFlux.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETSAAFlux.")
    

agcls.AgClassCatalog.add_catalog_entry("{3C633703-2759-4894-96EA-F6E3C2F98AA1}", IAgVAStateCalcSEETSAAFlux)
agcls.AgTypeNameMap["IAgVAStateCalcSEETSAAFlux"] = IAgVAStateCalcSEETSAAFlux
__all__.append("IAgVAStateCalcSEETSAAFlux")

class IAgVAStateCalcSEETVehTemp(object):
    """Interface for AgAsStateCalcSEETVehTemp"""
    _uuid = "{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSEETVehTemp._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSEETVehTemp from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSEETVehTemp = agcom.GUID(IAgVAStateCalcSEETVehTemp._uuid)
        vtable_offset_local = IAgVAStateCalcSEETVehTemp._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSEETVehTemp.__dict__ and type(IAgVAStateCalcSEETVehTemp.__dict__[attrname]) == property:
            return IAgVAStateCalcSEETVehTemp.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSEETVehTemp.")
    

agcls.AgClassCatalog.add_catalog_entry("{4B70C4FB-3403-4F3F-9F3F-B2C0CF8DB393}", IAgVAStateCalcSEETVehTemp)
agcls.AgTypeNameMap["IAgVAStateCalcSEETVehTemp"] = IAgVAStateCalcSEETVehTemp
__all__.append("IAgVAStateCalcSEETVehTemp")

class IAgVAStateCalcCloseApproachBearing(object):
    """Properties for a CloseApproachBearing calculation object."""
    _uuid = "{E7717197-6955-4ECB-BF98-DA50AD7547F3}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachBearing._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachBearing from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachBearing = agcom.GUID(IAgVAStateCalcCloseApproachBearing._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachBearing._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachBearing, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachBearing, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachBearing, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachBearing, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachBearing, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachBearing.__dict__ and type(IAgVAStateCalcCloseApproachBearing.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachBearing.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{E7717197-6955-4ECB-BF98-DA50AD7547F3}", IAgVAStateCalcCloseApproachBearing)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachBearing"] = IAgVAStateCalcCloseApproachBearing
__all__.append("IAgVAStateCalcCloseApproachBearing")

class IAgVAStateCalcCloseApproachMag(object):
    """Properties for a CloseApproachMagnitude calculation object."""
    _uuid = "{DDACF6D7-29C0-46BB-A21A-123580E25161}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachMag._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachMag from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachMag = agcom.GUID(IAgVAStateCalcCloseApproachMag._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachMag._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachMag, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachMag, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachMag, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachMag, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachMag, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachMag.__dict__ and type(IAgVAStateCalcCloseApproachMag.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachMag.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{DDACF6D7-29C0-46BB-A21A-123580E25161}", IAgVAStateCalcCloseApproachMag)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachMag"] = IAgVAStateCalcCloseApproachMag
__all__.append("IAgVAStateCalcCloseApproachMag")

class IAgVAStateCalcCloseApproachTheta(object):
    """Properties for a CloseApproachTheta calculation object."""
    _uuid = "{2F89E7F5-154B-4CED-807A-040A064F1A14}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachTheta._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachTheta from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachTheta = agcom.GUID(IAgVAStateCalcCloseApproachTheta._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachTheta._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachTheta, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachTheta, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachTheta, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachTheta, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachTheta, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachTheta.__dict__ and type(IAgVAStateCalcCloseApproachTheta.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachTheta.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachTheta.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{2F89E7F5-154B-4CED-807A-040A064F1A14}", IAgVAStateCalcCloseApproachTheta)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachTheta"] = IAgVAStateCalcCloseApproachTheta
__all__.append("IAgVAStateCalcCloseApproachTheta")

class IAgVAStateCalcCloseApproachX(object):
    """Properties for a CloseApproachX calculation object."""
    _uuid = "{B57EFFE4-9742-4F26-989C-A8D64549F8ED}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachX._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachX from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachX = agcom.GUID(IAgVAStateCalcCloseApproachX._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachX._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachX, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachX, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachX, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachX, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachX, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachX.__dict__ and type(IAgVAStateCalcCloseApproachX.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachX.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{B57EFFE4-9742-4F26-989C-A8D64549F8ED}", IAgVAStateCalcCloseApproachX)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachX"] = IAgVAStateCalcCloseApproachX
__all__.append("IAgVAStateCalcCloseApproachX")

class IAgVAStateCalcCloseApproachY(object):
    """Properties for a CloseApproachY calculation object."""
    _uuid = "{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachY._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachY from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachY = agcom.GUID(IAgVAStateCalcCloseApproachY._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachY._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachY, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachY, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachY, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachY, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachY, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachY.__dict__ and type(IAgVAStateCalcCloseApproachY.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachY.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{7C03BAD0-6CF8-4A20-ABA9-B16006A4016E}", IAgVAStateCalcCloseApproachY)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachY"] = IAgVAStateCalcCloseApproachY
__all__.append("IAgVAStateCalcCloseApproachY")

class IAgVAStateCalcCloseApproachCosBearing(object):
    """Properties for a CosineOfCloseApproachBearing calculation object."""
    _uuid = "{ED9F8425-E6C7-49D0-842F-84FE096E6C27}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCloseApproachCosBearing._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCloseApproachCosBearing from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCloseApproachCosBearing = agcom.GUID(IAgVAStateCalcCloseApproachCosBearing._uuid)
        vtable_offset_local = IAgVAStateCalcCloseApproachCosBearing._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachCosBearing, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachCosBearing, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachCosBearing, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachCosBearing, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCloseApproachCosBearing, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCloseApproachCosBearing.__dict__ and type(IAgVAStateCalcCloseApproachCosBearing.__dict__[attrname]) == property:
            return IAgVAStateCalcCloseApproachCosBearing.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCloseApproachCosBearing.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{ED9F8425-E6C7-49D0-842F-84FE096E6C27}", IAgVAStateCalcCloseApproachCosBearing)
agcls.AgTypeNameMap["IAgVAStateCalcCloseApproachCosBearing"] = IAgVAStateCalcCloseApproachCosBearing
__all__.append("IAgVAStateCalcCloseApproachCosBearing")

class IAgVAStateCalcRelGroundTrackError(object):
    """Properties for a RelGroundTrackError calculation object."""
    _uuid = "{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetDirection"] = _raise_uninitialized_error
        self.__dict__["_SetDirection"] = _raise_uninitialized_error
        self.__dict__["_GetSigned"] = _raise_uninitialized_error
        self.__dict__["_SetSigned"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelGroundTrackError._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelGroundTrackError from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelGroundTrackError = agcom.GUID(IAgVAStateCalcRelGroundTrackError._uuid)
        vtable_offset_local = IAgVAStateCalcRelGroundTrackError._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSigned"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetSigned"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelGroundTrackError, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelGroundTrackError.__dict__ and type(IAgVAStateCalcRelGroundTrackError.__dict__[attrname]) == property:
            return IAgVAStateCalcRelGroundTrackError.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelGroundTrackError.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def Direction(self) -> "AgEVACalcObjectDirection":
        """The direction to search for the desired value."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Direction.setter
    def Direction(self, inVal:"AgEVACalcObjectDirection") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectDirection, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDirection"](arg_inVal.COM_val))

    @property
    def Signed(self) -> bool:
        """True if signed based on RxV."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSigned"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Signed.setter
    def Signed(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSigned"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{F9BD881C-FBBF-4B59-AA64-8D303DBBCC44}", IAgVAStateCalcRelGroundTrackError)
agcls.AgTypeNameMap["IAgVAStateCalcRelGroundTrackError"] = IAgVAStateCalcRelGroundTrackError
__all__.append("IAgVAStateCalcRelGroundTrackError")

class IAgVAStateCalcRelAtAOLMaster(object):
    """Properties for a RelativeAtAOL calculation object."""
    _uuid = "{8864FF20-53E7-4609-86A7-C9F7B113B651}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetDirection"] = _raise_uninitialized_error
        self.__dict__["_SetDirection"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelAtAOLMaster._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelAtAOLMaster from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelAtAOLMaster = agcom.GUID(IAgVAStateCalcRelAtAOLMaster._uuid)
        vtable_offset_local = IAgVAStateCalcRelAtAOLMaster._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelAtAOLMaster, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelAtAOLMaster.__dict__ and type(IAgVAStateCalcRelAtAOLMaster.__dict__[attrname]) == property:
            return IAgVAStateCalcRelAtAOLMaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelAtAOLMaster.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def CalcObjectName(self) -> str:
        """The calculation object of interest."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def Direction(self) -> "AgEVACalcObjectDirection":
        """The direction to search for the desired value."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Direction.setter
    def Direction(self, inVal:"AgEVACalcObjectDirection") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectDirection, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDirection"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{8864FF20-53E7-4609-86A7-C9F7B113B651}", IAgVAStateCalcRelAtAOLMaster)
agcls.AgTypeNameMap["IAgVAStateCalcRelAtAOLMaster"] = IAgVAStateCalcRelAtAOLMaster
__all__.append("IAgVAStateCalcRelAtAOLMaster")

class IAgVAStateCalcDeltaFromMaster(object):
    """Properties for a Rel Mean Mean Anomaly calculation object."""
    _uuid = "{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDeltaFromMaster._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaFromMaster from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDeltaFromMaster = agcom.GUID(IAgVAStateCalcDeltaFromMaster._uuid)
        vtable_offset_local = IAgVAStateCalcDeltaFromMaster._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaFromMaster, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaFromMaster, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaFromMaster, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaFromMaster, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaFromMaster, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaFromMaster.__dict__ and type(IAgVAStateCalcDeltaFromMaster.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaFromMaster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaFromMaster.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object of interest."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{6203B45E-E2E8-42D1-BB22-9BBF57CC1FDE}", IAgVAStateCalcDeltaFromMaster)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaFromMaster"] = IAgVAStateCalcDeltaFromMaster
__all__.append("IAgVAStateCalcDeltaFromMaster")

class IAgVAStateCalcLonDriftRate(object):
    """Properties for a Longitude Drift Rate calculation object."""
    _uuid = "{D464DED3-3358-452D-B55C-2B017D04C8F9}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcLonDriftRate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonDriftRate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcLonDriftRate = agcom.GUID(IAgVAStateCalcLonDriftRate._uuid)
        vtable_offset_local = IAgVAStateCalcLonDriftRate._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonDriftRate, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonDriftRate, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonDriftRate, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonDriftRate, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonDriftRate.__dict__ and type(IAgVAStateCalcLonDriftRate.__dict__[attrname]) == property:
            return IAgVAStateCalcLonDriftRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonDriftRate.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D464DED3-3358-452D-B55C-2B017D04C8F9}", IAgVAStateCalcLonDriftRate)
agcls.AgTypeNameMap["IAgVAStateCalcLonDriftRate"] = IAgVAStateCalcLonDriftRate
__all__.append("IAgVAStateCalcLonDriftRate")

class IAgVAStateCalcMeanEarthLon(object):
    """Properties for a Mean Earth Longitude calculation object."""
    _uuid = "{49D6969B-42BD-4E55-9016-0F951FF34DEE}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMeanEarthLon._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanEarthLon from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMeanEarthLon = agcom.GUID(IAgVAStateCalcMeanEarthLon._uuid)
        vtable_offset_local = IAgVAStateCalcMeanEarthLon._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanEarthLon, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanEarthLon, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanEarthLon.__dict__ and type(IAgVAStateCalcMeanEarthLon.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanEarthLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanEarthLon.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{49D6969B-42BD-4E55-9016-0F951FF34DEE}", IAgVAStateCalcMeanEarthLon)
agcls.AgTypeNameMap["IAgVAStateCalcMeanEarthLon"] = IAgVAStateCalcMeanEarthLon
__all__.append("IAgVAStateCalcMeanEarthLon")

class IAgVAStateCalcRectifiedLon(object):
    """Properties for a RectifiedLon calculation object."""
    _uuid = "{FD75BCCA-8F5C-49BA-AADE-040E1186385D}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRectifiedLon._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRectifiedLon from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRectifiedLon = agcom.GUID(IAgVAStateCalcRectifiedLon._uuid)
        vtable_offset_local = IAgVAStateCalcRectifiedLon._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRectifiedLon, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRectifiedLon, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRectifiedLon.__dict__ and type(IAgVAStateCalcRectifiedLon.__dict__[attrname]) == property:
            return IAgVAStateCalcRectifiedLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRectifiedLon.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FD75BCCA-8F5C-49BA-AADE-040E1186385D}", IAgVAStateCalcRectifiedLon)
agcls.AgTypeNameMap["IAgVAStateCalcRectifiedLon"] = IAgVAStateCalcRectifiedLon
__all__.append("IAgVAStateCalcRectifiedLon")

class IAgVAStateCalcGeodeticElem(object):
    """Properties for a Geodetic Element calculation object."""
    _uuid = "{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcGeodeticElem._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGeodeticElem from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcGeodeticElem = agcom.GUID(IAgVAStateCalcGeodeticElem._uuid)
        vtable_offset_local = IAgVAStateCalcGeodeticElem._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGeodeticElem, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGeodeticElem, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGeodeticElem.__dict__ and type(IAgVAStateCalcGeodeticElem.__dict__[attrname]) == property:
            return IAgVAStateCalcGeodeticElem.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGeodeticElem.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D827128C-F7C1-40CE-AE27-DDF0AAEBB150}", IAgVAStateCalcGeodeticElem)
agcls.AgTypeNameMap["IAgVAStateCalcGeodeticElem"] = IAgVAStateCalcGeodeticElem
__all__.append("IAgVAStateCalcGeodeticElem")

class IAgVAStateCalcRepeatingGroundTrackErr(object):
    """Properties for a RepeatingGroundTrackEquatorError calculation object."""
    _uuid = "{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_SetRepeatCount"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRepeatingGroundTrackErr._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRepeatingGroundTrackErr from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRepeatingGroundTrackErr = agcom.GUID(IAgVAStateCalcRepeatingGroundTrackErr._uuid)
        vtable_offset_local = IAgVAStateCalcRepeatingGroundTrackErr._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetReferenceLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRepeatCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+9, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRepeatingGroundTrackErr, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRepeatingGroundTrackErr.__dict__ and type(IAgVAStateCalcRepeatingGroundTrackErr.__dict__[attrname]) == property:
            return IAgVAStateCalcRepeatingGroundTrackErr.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRepeatingGroundTrackErr.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceLongitude(self) -> typing.Any:
        """The longitude at the equator to be used as a reference for the repeating ground track. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceLongitude.setter
    def ReferenceLongitude(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceLongitude"](arg_inVal.COM_val))

    @property
    def RepeatCount(self) -> float:
        """The number of orbits before the ground track repeats over the same longitude. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRepeatCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RepeatCount.setter
    def RepeatCount(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRepeatCount"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlRepeatingGroundTrackErr") -> None:
        """Enables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlRepeatingGroundTrackErr") -> None:
        """Disables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlRepeatingGroundTrackErr") -> bool:
        """Sees if the specified control is enabled"""
        with agmarshall.AgEnum_arg(AgEVAControlRepeatingGroundTrackErr, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{53C25A30-1C1E-42F0-AEA5-D67EF1037A18}", IAgVAStateCalcRepeatingGroundTrackErr)
agcls.AgTypeNameMap["IAgVAStateCalcRepeatingGroundTrackErr"] = IAgVAStateCalcRepeatingGroundTrackErr
__all__.append("IAgVAStateCalcRepeatingGroundTrackErr")

class IAgVAStateCalcAltOfApoapsis(object):
    """Properties for an Altitude of Apoapsis calculation object."""
    _uuid = "{891F3D94-A765-42AE-9459-7575CD33E62E}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcAltOfApoapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAltOfApoapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcAltOfApoapsis = agcom.GUID(IAgVAStateCalcAltOfApoapsis._uuid)
        vtable_offset_local = IAgVAStateCalcAltOfApoapsis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfApoapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfApoapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfApoapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfApoapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAltOfApoapsis.__dict__ and type(IAgVAStateCalcAltOfApoapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcAltOfApoapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAltOfApoapsis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{891F3D94-A765-42AE-9459-7575CD33E62E}", IAgVAStateCalcAltOfApoapsis)
agcls.AgTypeNameMap["IAgVAStateCalcAltOfApoapsis"] = IAgVAStateCalcAltOfApoapsis
__all__.append("IAgVAStateCalcAltOfApoapsis")

class IAgVAStateCalcAltOfPeriapsis(object):
    """Properties for an Altitude Of Periapsis calculation object."""
    _uuid = "{3A81E388-64C2-41BD-88FC-19E318F08D5C}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcAltOfPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAltOfPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcAltOfPeriapsis = agcom.GUID(IAgVAStateCalcAltOfPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcAltOfPeriapsis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfPeriapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfPeriapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAltOfPeriapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAltOfPeriapsis.__dict__ and type(IAgVAStateCalcAltOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcAltOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAltOfPeriapsis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3A81E388-64C2-41BD-88FC-19E318F08D5C}", IAgVAStateCalcAltOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcAltOfPeriapsis"] = IAgVAStateCalcAltOfPeriapsis
__all__.append("IAgVAStateCalcAltOfPeriapsis")

class IAgVAStateCalcArgOfLat(object):
    """Properties for an Argument of Latitude calculation object."""
    _uuid = "{C5B93283-1CEB-407C-837F-21BB7C8227BD}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcArgOfLat._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcArgOfLat from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcArgOfLat = agcom.GUID(IAgVAStateCalcArgOfLat._uuid)
        vtable_offset_local = IAgVAStateCalcArgOfLat._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfLat, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfLat, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfLat, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfLat, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcArgOfLat.__dict__ and type(IAgVAStateCalcArgOfLat.__dict__[attrname]) == property:
            return IAgVAStateCalcArgOfLat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcArgOfLat.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C5B93283-1CEB-407C-837F-21BB7C8227BD}", IAgVAStateCalcArgOfLat)
agcls.AgTypeNameMap["IAgVAStateCalcArgOfLat"] = IAgVAStateCalcArgOfLat
__all__.append("IAgVAStateCalcArgOfLat")

class IAgVAStateCalcArgOfPeriapsis(object):
    """Properties for an Argument of Periapsis calculation object."""
    _uuid = "{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcArgOfPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcArgOfPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcArgOfPeriapsis = agcom.GUID(IAgVAStateCalcArgOfPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcArgOfPeriapsis._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfPeriapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfPeriapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcArgOfPeriapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcArgOfPeriapsis.__dict__ and type(IAgVAStateCalcArgOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcArgOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcArgOfPeriapsis.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{30364B7E-BBCE-4FCF-BC76-7330A97ECE0F}", IAgVAStateCalcArgOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcArgOfPeriapsis"] = IAgVAStateCalcArgOfPeriapsis
__all__.append("IAgVAStateCalcArgOfPeriapsis")

class IAgVAStateCalcEccAnomaly(object):
    """Properties for an Eccentric Anomaly calculation object."""
    _uuid = "{9655A1AA-233C-4E4C-9A2E-93B91A439947}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEccAnomaly._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccAnomaly from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEccAnomaly = agcom.GUID(IAgVAStateCalcEccAnomaly._uuid)
        vtable_offset_local = IAgVAStateCalcEccAnomaly._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccAnomaly, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccAnomaly, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccAnomaly, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccAnomaly, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccAnomaly.__dict__ and type(IAgVAStateCalcEccAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcEccAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccAnomaly.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9655A1AA-233C-4E4C-9A2E-93B91A439947}", IAgVAStateCalcEccAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcEccAnomaly"] = IAgVAStateCalcEccAnomaly
__all__.append("IAgVAStateCalcEccAnomaly")

class IAgVAStateCalcEccentricity(object):
    """Properties for an Eccentricity calculation object."""
    _uuid = "{3AE52837-A597-473A-83A2-9DC9B2271101}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEccentricity._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEccentricity from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEccentricity = agcom.GUID(IAgVAStateCalcEccentricity._uuid)
        vtable_offset_local = IAgVAStateCalcEccentricity._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccentricity, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccentricity, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccentricity, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEccentricity, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEccentricity.__dict__ and type(IAgVAStateCalcEccentricity.__dict__[attrname]) == property:
            return IAgVAStateCalcEccentricity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEccentricity.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3AE52837-A597-473A-83A2-9DC9B2271101}", IAgVAStateCalcEccentricity)
agcls.AgTypeNameMap["IAgVAStateCalcEccentricity"] = IAgVAStateCalcEccentricity
__all__.append("IAgVAStateCalcEccentricity")

class IAgVAStateCalcInclination(object):
    """Properties for an Inclination calculation object."""
    _uuid = "{477CF8AA-81BE-4C13-8F6D-7157268869A3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInclination._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInclination from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInclination = agcom.GUID(IAgVAStateCalcInclination._uuid)
        vtable_offset_local = IAgVAStateCalcInclination._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInclination, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInclination, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInclination, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInclination, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInclination.__dict__ and type(IAgVAStateCalcInclination.__dict__[attrname]) == property:
            return IAgVAStateCalcInclination.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInclination.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{477CF8AA-81BE-4C13-8F6D-7157268869A3}", IAgVAStateCalcInclination)
agcls.AgTypeNameMap["IAgVAStateCalcInclination"] = IAgVAStateCalcInclination
__all__.append("IAgVAStateCalcInclination")

class IAgVAStateCalcLonOfAscNode(object):
    """Properties for a Longitude of Ascending Node calculation object."""
    _uuid = "{9A4EED12-F650-449B-B3C0-2278D58A8D92}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcLonOfAscNode._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonOfAscNode from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcLonOfAscNode = agcom.GUID(IAgVAStateCalcLonOfAscNode._uuid)
        vtable_offset_local = IAgVAStateCalcLonOfAscNode._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfAscNode, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfAscNode, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfAscNode, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfAscNode, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonOfAscNode.__dict__ and type(IAgVAStateCalcLonOfAscNode.__dict__[attrname]) == property:
            return IAgVAStateCalcLonOfAscNode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonOfAscNode.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9A4EED12-F650-449B-B3C0-2278D58A8D92}", IAgVAStateCalcLonOfAscNode)
agcls.AgTypeNameMap["IAgVAStateCalcLonOfAscNode"] = IAgVAStateCalcLonOfAscNode
__all__.append("IAgVAStateCalcLonOfAscNode")

class IAgVAStateCalcMeanAnomaly(object):
    """Properties for a MeanAnomaly calculation object."""
    _uuid = "{2E620A15-C918-467A-A8C3-817BF13FC602}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMeanAnomaly._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanAnomaly from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMeanAnomaly = agcom.GUID(IAgVAStateCalcMeanAnomaly._uuid)
        vtable_offset_local = IAgVAStateCalcMeanAnomaly._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanAnomaly, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanAnomaly, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanAnomaly, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanAnomaly, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanAnomaly.__dict__ and type(IAgVAStateCalcMeanAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanAnomaly.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2E620A15-C918-467A-A8C3-817BF13FC602}", IAgVAStateCalcMeanAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcMeanAnomaly"] = IAgVAStateCalcMeanAnomaly
__all__.append("IAgVAStateCalcMeanAnomaly")

class IAgVAStateCalcMeanMotion(object):
    """Properties for a Mean Motion calculation object."""
    _uuid = "{3CF417E4-9A1B-492B-BEA8-A019896B26E9}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMeanMotion._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanMotion from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMeanMotion = agcom.GUID(IAgVAStateCalcMeanMotion._uuid)
        vtable_offset_local = IAgVAStateCalcMeanMotion._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanMotion, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanMotion, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanMotion, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanMotion, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanMotion.__dict__ and type(IAgVAStateCalcMeanMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanMotion.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3CF417E4-9A1B-492B-BEA8-A019896B26E9}", IAgVAStateCalcMeanMotion)
agcls.AgTypeNameMap["IAgVAStateCalcMeanMotion"] = IAgVAStateCalcMeanMotion
__all__.append("IAgVAStateCalcMeanMotion")

class IAgVAStateCalcOrbitPeriod(object):
    """Properties for an Orbit Period calculation object."""
    _uuid = "{C108486C-571C-4007-9EFD-70CD8745C3D5}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitPeriod._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitPeriod from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitPeriod = agcom.GUID(IAgVAStateCalcOrbitPeriod._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitPeriod._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitPeriod, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitPeriod, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitPeriod, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitPeriod, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitPeriod.__dict__ and type(IAgVAStateCalcOrbitPeriod.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitPeriod.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitPeriod.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C108486C-571C-4007-9EFD-70CD8745C3D5}", IAgVAStateCalcOrbitPeriod)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitPeriod"] = IAgVAStateCalcOrbitPeriod
__all__.append("IAgVAStateCalcOrbitPeriod")

class IAgVAStateCalcNumRevs(object):
    """Properties for a Number of Revolutions calculation object."""
    _uuid = "{A9FF9984-5A98-44F1-A231-10C3F26A1082}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcNumRevs._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcNumRevs from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcNumRevs = agcom.GUID(IAgVAStateCalcNumRevs._uuid)
        vtable_offset_local = IAgVAStateCalcNumRevs._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNumRevs, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNumRevs, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNumRevs, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNumRevs, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcNumRevs.__dict__ and type(IAgVAStateCalcNumRevs.__dict__[attrname]) == property:
            return IAgVAStateCalcNumRevs.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcNumRevs.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A9FF9984-5A98-44F1-A231-10C3F26A1082}", IAgVAStateCalcNumRevs)
agcls.AgTypeNameMap["IAgVAStateCalcNumRevs"] = IAgVAStateCalcNumRevs
__all__.append("IAgVAStateCalcNumRevs")

class IAgVAStateCalcRAAN(object):
    """Properties for a RAAN calculation object."""
    _uuid = "{B2456E5C-7305-4AAD-8318-7A65D65C328A}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRAAN._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRAAN from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRAAN = agcom.GUID(IAgVAStateCalcRAAN._uuid)
        vtable_offset_local = IAgVAStateCalcRAAN._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRAAN, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRAAN, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRAAN, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRAAN, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRAAN.__dict__ and type(IAgVAStateCalcRAAN.__dict__[attrname]) == property:
            return IAgVAStateCalcRAAN.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRAAN.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B2456E5C-7305-4AAD-8318-7A65D65C328A}", IAgVAStateCalcRAAN)
agcls.AgTypeNameMap["IAgVAStateCalcRAAN"] = IAgVAStateCalcRAAN
__all__.append("IAgVAStateCalcRAAN")

class IAgVAStateCalcRadOfApoapsis(object):
    """Properties for a Radius Of Apoapsis calculation object."""
    _uuid = "{2B481148-138F-44EA-9EE2-03FC7FA82CEC}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRadOfApoapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadOfApoapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRadOfApoapsis = agcom.GUID(IAgVAStateCalcRadOfApoapsis._uuid)
        vtable_offset_local = IAgVAStateCalcRadOfApoapsis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfApoapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfApoapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfApoapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfApoapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadOfApoapsis.__dict__ and type(IAgVAStateCalcRadOfApoapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcRadOfApoapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadOfApoapsis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2B481148-138F-44EA-9EE2-03FC7FA82CEC}", IAgVAStateCalcRadOfApoapsis)
agcls.AgTypeNameMap["IAgVAStateCalcRadOfApoapsis"] = IAgVAStateCalcRadOfApoapsis
__all__.append("IAgVAStateCalcRadOfApoapsis")

class IAgVAStateCalcRadOfPeriapsis(object):
    """Properties for a Radius Of Periapsis calculation object."""
    _uuid = "{8AF6B875-ED5E-4734-B98B-17B03203FFE8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRadOfPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadOfPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRadOfPeriapsis = agcom.GUID(IAgVAStateCalcRadOfPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcRadOfPeriapsis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfPeriapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfPeriapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRadOfPeriapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadOfPeriapsis.__dict__ and type(IAgVAStateCalcRadOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcRadOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadOfPeriapsis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8AF6B875-ED5E-4734-B98B-17B03203FFE8}", IAgVAStateCalcRadOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcRadOfPeriapsis"] = IAgVAStateCalcRadOfPeriapsis
__all__.append("IAgVAStateCalcRadOfPeriapsis")

class IAgVAStateCalcSemiMajorAxis(object):
    """Properties for a Semimajor Axis calculation object."""
    _uuid = "{0DC03521-C37A-4D96-A820-E0D19835C7DF}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSemiMajorAxis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSemiMajorAxis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSemiMajorAxis = agcom.GUID(IAgVAStateCalcSemiMajorAxis._uuid)
        vtable_offset_local = IAgVAStateCalcSemiMajorAxis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSemiMajorAxis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSemiMajorAxis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSemiMajorAxis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSemiMajorAxis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSemiMajorAxis.__dict__ and type(IAgVAStateCalcSemiMajorAxis.__dict__[attrname]) == property:
            return IAgVAStateCalcSemiMajorAxis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSemiMajorAxis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0DC03521-C37A-4D96-A820-E0D19835C7DF}", IAgVAStateCalcSemiMajorAxis)
agcls.AgTypeNameMap["IAgVAStateCalcSemiMajorAxis"] = IAgVAStateCalcSemiMajorAxis
__all__.append("IAgVAStateCalcSemiMajorAxis")

class IAgVAStateCalcTimePastAscNode(object):
    """Properties for a Time Past Ascending Node calculation object."""
    _uuid = "{4ED0F733-4995-4D32-8533-D7A1801C4FBB}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcTimePastAscNode._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTimePastAscNode from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcTimePastAscNode = agcom.GUID(IAgVAStateCalcTimePastAscNode._uuid)
        vtable_offset_local = IAgVAStateCalcTimePastAscNode._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastAscNode, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastAscNode, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastAscNode, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastAscNode, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTimePastAscNode.__dict__ and type(IAgVAStateCalcTimePastAscNode.__dict__[attrname]) == property:
            return IAgVAStateCalcTimePastAscNode.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTimePastAscNode.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4ED0F733-4995-4D32-8533-D7A1801C4FBB}", IAgVAStateCalcTimePastAscNode)
agcls.AgTypeNameMap["IAgVAStateCalcTimePastAscNode"] = IAgVAStateCalcTimePastAscNode
__all__.append("IAgVAStateCalcTimePastAscNode")

class IAgVAStateCalcTimePastPeriapsis(object):
    """Properties for a Time Past Periapsis calculation object."""
    _uuid = "{30BCAEF0-2921-4EE5-B047-79CA370F9C83}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcTimePastPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTimePastPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcTimePastPeriapsis = agcom.GUID(IAgVAStateCalcTimePastPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcTimePastPeriapsis._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastPeriapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastPeriapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTimePastPeriapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTimePastPeriapsis.__dict__ and type(IAgVAStateCalcTimePastPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcTimePastPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTimePastPeriapsis.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{30BCAEF0-2921-4EE5-B047-79CA370F9C83}", IAgVAStateCalcTimePastPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcTimePastPeriapsis"] = IAgVAStateCalcTimePastPeriapsis
__all__.append("IAgVAStateCalcTimePastPeriapsis")

class IAgVAStateCalcDeltaV(object):
    """Properties for a DeltaV calculation object."""
    _uuid = "{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDeltaV._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaV from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDeltaV = agcom.GUID(IAgVAStateCalcDeltaV._uuid)
        vtable_offset_local = IAgVAStateCalcDeltaV._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaV.__dict__ and type(IAgVAStateCalcDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaV.")
    

agcls.AgClassCatalog.add_catalog_entry("{F6E77B5A-1A44-4CD0-A0BF-2991C1A33EBA}", IAgVAStateCalcDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaV"] = IAgVAStateCalcDeltaV
__all__.append("IAgVAStateCalcDeltaV")

class IAgVAStateCalcDeltaVSquared(object):
    """Properties for a DeltaV Squared calculation object."""
    _uuid = "{52506197-B072-4F2A-A1E6-10728D969E2A}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDeltaVSquared._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaVSquared from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDeltaVSquared = agcom.GUID(IAgVAStateCalcDeltaVSquared._uuid)
        vtable_offset_local = IAgVAStateCalcDeltaVSquared._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaVSquared.__dict__ and type(IAgVAStateCalcDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaVSquared.")
    

agcls.AgClassCatalog.add_catalog_entry("{52506197-B072-4F2A-A1E6-10728D969E2A}", IAgVAStateCalcDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaVSquared"] = IAgVAStateCalcDeltaVSquared
__all__.append("IAgVAStateCalcDeltaVSquared")

class IAgVAStateCalcMCSDeltaV(object):
    """Properties for a MCS DeltaV calculation object."""
    _uuid = "{6411CC14-1207-49C7-ACEF-31EC24908D59}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMCSDeltaV._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMCSDeltaV from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMCSDeltaV = agcom.GUID(IAgVAStateCalcMCSDeltaV._uuid)
        vtable_offset_local = IAgVAStateCalcMCSDeltaV._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMCSDeltaV.__dict__ and type(IAgVAStateCalcMCSDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcMCSDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMCSDeltaV.")
    

agcls.AgClassCatalog.add_catalog_entry("{6411CC14-1207-49C7-ACEF-31EC24908D59}", IAgVAStateCalcMCSDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcMCSDeltaV"] = IAgVAStateCalcMCSDeltaV
__all__.append("IAgVAStateCalcMCSDeltaV")

class IAgVAStateCalcMCSDeltaVSquared(object):
    """Properties for a MCS DeltaV Squared calculation object."""
    _uuid = "{17C279CA-79C4-4076-AF85-6018DA3FAB83}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSquaredType"] = _raise_uninitialized_error
        self.__dict__["_SetSquaredType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMCSDeltaVSquared._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMCSDeltaVSquared from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMCSDeltaVSquared = agcom.GUID(IAgVAStateCalcMCSDeltaVSquared._uuid)
        vtable_offset_local = IAgVAStateCalcMCSDeltaVSquared._vtable_offset - 1
        self.__dict__["_GetSquaredType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMCSDeltaVSquared, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetSquaredType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMCSDeltaVSquared, vtable_offset_local+2, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMCSDeltaVSquared.__dict__ and type(IAgVAStateCalcMCSDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcMCSDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMCSDeltaVSquared.")
    
    @property
    def SquaredType(self) -> "AgEVASquaredType":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        with agmarshall.AgEnum_arg(AgEVASquaredType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSquaredType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SquaredType.setter
    def SquaredType(self, inVal:"AgEVASquaredType") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        with agmarshall.AgEnum_arg(AgEVASquaredType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSquaredType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{17C279CA-79C4-4076-AF85-6018DA3FAB83}", IAgVAStateCalcMCSDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcMCSDeltaVSquared"] = IAgVAStateCalcMCSDeltaVSquared
__all__.append("IAgVAStateCalcMCSDeltaVSquared")

class IAgVAStateCalcSequenceDeltaV(object):
    """Properties for a Sequence DeltaV calculation object."""
    _uuid = "{0F7BEE65-4F80-404D-AA99-1F92F88E2525}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSequenceName"] = _raise_uninitialized_error
        self.__dict__["_SetSequenceName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSequenceDeltaV._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSequenceDeltaV from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSequenceDeltaV = agcom.GUID(IAgVAStateCalcSequenceDeltaV._uuid)
        vtable_offset_local = IAgVAStateCalcSequenceDeltaV._vtable_offset - 1
        self.__dict__["_GetSequenceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaV, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSequenceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaV, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSequenceDeltaV.__dict__ and type(IAgVAStateCalcSequenceDeltaV.__dict__[attrname]) == property:
            return IAgVAStateCalcSequenceDeltaV.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSequenceDeltaV.")
    
    @property
    def SequenceName(self) -> str:
        """The sequence whose DeltaV's are to be summed."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequenceName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SequenceName.setter
    def SequenceName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequenceName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0F7BEE65-4F80-404D-AA99-1F92F88E2525}", IAgVAStateCalcSequenceDeltaV)
agcls.AgTypeNameMap["IAgVAStateCalcSequenceDeltaV"] = IAgVAStateCalcSequenceDeltaV
__all__.append("IAgVAStateCalcSequenceDeltaV")

class IAgVAStateCalcSequenceDeltaVSquared(object):
    """Properties for a Sequence DeltaV Squared calculation object."""
    _uuid = "{D6D37B91-EDAE-4E35-865F-538C2155A239}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSequenceName"] = _raise_uninitialized_error
        self.__dict__["_SetSequenceName"] = _raise_uninitialized_error
        self.__dict__["_GetSquaredType"] = _raise_uninitialized_error
        self.__dict__["_SetSquaredType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSequenceDeltaVSquared._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSequenceDeltaVSquared from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSequenceDeltaVSquared = agcom.GUID(IAgVAStateCalcSequenceDeltaVSquared._uuid)
        vtable_offset_local = IAgVAStateCalcSequenceDeltaVSquared._vtable_offset - 1
        self.__dict__["_GetSequenceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaVSquared, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSequenceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaVSquared, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSquaredType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaVSquared, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSquaredType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSequenceDeltaVSquared, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSequenceDeltaVSquared.__dict__ and type(IAgVAStateCalcSequenceDeltaVSquared.__dict__[attrname]) == property:
            return IAgVAStateCalcSequenceDeltaVSquared.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSequenceDeltaVSquared.")
    
    @property
    def SequenceName(self) -> str:
        """The sequence whose DeltaV's are to be accumulated."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSequenceName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SequenceName.setter
    def SequenceName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSequenceName"](arg_inVal.COM_val))

    @property
    def SquaredType(self) -> "AgEVASquaredType":
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        with agmarshall.AgEnum_arg(AgEVASquaredType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSquaredType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SquaredType.setter
    def SquaredType(self, inVal:"AgEVASquaredType") -> None:
        """Whether the value should be calculated as the sum of the squares of the maneuver Delta-Vs or the square of the sum of the maneuver Delta-Vs."""
        with agmarshall.AgEnum_arg(AgEVASquaredType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSquaredType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D6D37B91-EDAE-4E35-865F-538C2155A239}", IAgVAStateCalcSequenceDeltaVSquared)
agcls.AgTypeNameMap["IAgVAStateCalcSequenceDeltaVSquared"] = IAgVAStateCalcSequenceDeltaVSquared
__all__.append("IAgVAStateCalcSequenceDeltaVSquared")

class IAgVAStateCalcFuelMass(object):
    """Properties for a FuelMass calculation object."""
    _uuid = "{2707D8D8-8D1E-477D-B246-0568788FE867}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcFuelMass._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcFuelMass from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcFuelMass = agcom.GUID(IAgVAStateCalcFuelMass._uuid)
        vtable_offset_local = IAgVAStateCalcFuelMass._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcFuelMass.__dict__ and type(IAgVAStateCalcFuelMass.__dict__[attrname]) == property:
            return IAgVAStateCalcFuelMass.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcFuelMass.")
    

agcls.AgClassCatalog.add_catalog_entry("{2707D8D8-8D1E-477D-B246-0568788FE867}", IAgVAStateCalcFuelMass)
agcls.AgTypeNameMap["IAgVAStateCalcFuelMass"] = IAgVAStateCalcFuelMass
__all__.append("IAgVAStateCalcFuelMass")

class IAgVAStateCalcDensity(object):
    """Properties for a Fuel Density calculation object."""
    _uuid = "{9AE849EC-D75D-45A2-A23A-404C041BDB7B}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDensity._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDensity from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDensity = agcom.GUID(IAgVAStateCalcDensity._uuid)
        vtable_offset_local = IAgVAStateCalcDensity._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDensity.__dict__ and type(IAgVAStateCalcDensity.__dict__[attrname]) == property:
            return IAgVAStateCalcDensity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDensity.")
    

agcls.AgClassCatalog.add_catalog_entry("{9AE849EC-D75D-45A2-A23A-404C041BDB7B}", IAgVAStateCalcDensity)
agcls.AgTypeNameMap["IAgVAStateCalcDensity"] = IAgVAStateCalcDensity
__all__.append("IAgVAStateCalcDensity")

class IAgVAStateCalcInertialDeltaVMag(object):
    """Properties for an Inertial DeltaV Magnitude calculation object."""
    _uuid = "{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInertialDeltaVMag._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVMag from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInertialDeltaVMag = agcom.GUID(IAgVAStateCalcInertialDeltaVMag._uuid)
        vtable_offset_local = IAgVAStateCalcInertialDeltaVMag._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVMag.__dict__ and type(IAgVAStateCalcInertialDeltaVMag.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVMag.")
    

agcls.AgClassCatalog.add_catalog_entry("{206A8426-8860-4E7B-A0A1-0C1A8D4A79C5}", IAgVAStateCalcInertialDeltaVMag)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVMag"] = IAgVAStateCalcInertialDeltaVMag
__all__.append("IAgVAStateCalcInertialDeltaVMag")

class IAgVAStateCalcInertialDeltaVx(object):
    """Properties for an Inertial DeltaVx calculation object."""
    _uuid = "{D18A9666-512E-476E-89C0-FF6B2D3C2428}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInertialDeltaVx._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVx from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInertialDeltaVx = agcom.GUID(IAgVAStateCalcInertialDeltaVx._uuid)
        vtable_offset_local = IAgVAStateCalcInertialDeltaVx._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVx, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVx, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVx.__dict__ and type(IAgVAStateCalcInertialDeltaVx.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVx.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVx.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D18A9666-512E-476E-89C0-FF6B2D3C2428}", IAgVAStateCalcInertialDeltaVx)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVx"] = IAgVAStateCalcInertialDeltaVx
__all__.append("IAgVAStateCalcInertialDeltaVx")

class IAgVAStateCalcInertialDeltaVy(object):
    """Properties for an Inertial DeltaVy calculation object."""
    _uuid = "{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInertialDeltaVy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInertialDeltaVy = agcom.GUID(IAgVAStateCalcInertialDeltaVy._uuid)
        vtable_offset_local = IAgVAStateCalcInertialDeltaVy._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVy, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVy, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVy.__dict__ and type(IAgVAStateCalcInertialDeltaVy.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVy.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4A5489A4-1EDC-4CD1-BF9F-EAF779ECFFD3}", IAgVAStateCalcInertialDeltaVy)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVy"] = IAgVAStateCalcInertialDeltaVy
__all__.append("IAgVAStateCalcInertialDeltaVy")

class IAgVAStateCalcInertialDeltaVz(object):
    """Properties for an Inertial DeltaVz calculation object."""
    _uuid = "{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInertialDeltaVz._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInertialDeltaVz from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInertialDeltaVz = agcom.GUID(IAgVAStateCalcInertialDeltaVz._uuid)
        vtable_offset_local = IAgVAStateCalcInertialDeltaVz._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVz, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInertialDeltaVz, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInertialDeltaVz.__dict__ and type(IAgVAStateCalcInertialDeltaVz.__dict__[attrname]) == property:
            return IAgVAStateCalcInertialDeltaVz.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInertialDeltaVz.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4301E169-DEE2-411A-9DBD-06DEC30F9EBD}", IAgVAStateCalcInertialDeltaVz)
agcls.AgTypeNameMap["IAgVAStateCalcInertialDeltaVz"] = IAgVAStateCalcInertialDeltaVz
__all__.append("IAgVAStateCalcInertialDeltaVz")

class IAgVAStateCalcManeuverSpecificImpulse(object):
    """Properties for a Specific Impulse calculation object."""
    _uuid = "{4EA5927D-76E7-405C-AA5A-903C19B576DC}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcManeuverSpecificImpulse._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcManeuverSpecificImpulse from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcManeuverSpecificImpulse = agcom.GUID(IAgVAStateCalcManeuverSpecificImpulse._uuid)
        vtable_offset_local = IAgVAStateCalcManeuverSpecificImpulse._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcManeuverSpecificImpulse.__dict__ and type(IAgVAStateCalcManeuverSpecificImpulse.__dict__[attrname]) == property:
            return IAgVAStateCalcManeuverSpecificImpulse.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcManeuverSpecificImpulse.")
    

agcls.AgClassCatalog.add_catalog_entry("{4EA5927D-76E7-405C-AA5A-903C19B576DC}", IAgVAStateCalcManeuverSpecificImpulse)
agcls.AgTypeNameMap["IAgVAStateCalcManeuverSpecificImpulse"] = IAgVAStateCalcManeuverSpecificImpulse
__all__.append("IAgVAStateCalcManeuverSpecificImpulse")

class IAgVAStateCalcPressure(object):
    """Properties for a Tank Pressure calculation object."""
    _uuid = "{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcPressure._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPressure from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcPressure = agcom.GUID(IAgVAStateCalcPressure._uuid)
        vtable_offset_local = IAgVAStateCalcPressure._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPressure.__dict__ and type(IAgVAStateCalcPressure.__dict__[attrname]) == property:
            return IAgVAStateCalcPressure.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPressure.")
    

agcls.AgClassCatalog.add_catalog_entry("{C37E82D4-7AA9-4BA0-92DA-1372268F63D6}", IAgVAStateCalcPressure)
agcls.AgTypeNameMap["IAgVAStateCalcPressure"] = IAgVAStateCalcPressure
__all__.append("IAgVAStateCalcPressure")

class IAgVAStateCalcTemperature(object):
    """Properties for a Tank Temperature calculation object."""
    _uuid = "{E0EC7C19-B337-4BFD-9A8B-30A88784D697}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcTemperature._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTemperature from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcTemperature = agcom.GUID(IAgVAStateCalcTemperature._uuid)
        vtable_offset_local = IAgVAStateCalcTemperature._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTemperature.__dict__ and type(IAgVAStateCalcTemperature.__dict__[attrname]) == property:
            return IAgVAStateCalcTemperature.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTemperature.")
    

agcls.AgClassCatalog.add_catalog_entry("{E0EC7C19-B337-4BFD-9A8B-30A88784D697}", IAgVAStateCalcTemperature)
agcls.AgTypeNameMap["IAgVAStateCalcTemperature"] = IAgVAStateCalcTemperature
__all__.append("IAgVAStateCalcTemperature")

class IAgVAStateCalcVectorX(object):
    """Properties for a Vector X calculation object."""
    _uuid = "{ADD32358-B55C-4758-BBB9-391728F24BB8}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetNormalize"] = _raise_uninitialized_error
        self.__dict__["_SetNormalize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorX._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorX from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorX = agcom.GUID(IAgVAStateCalcVectorX._uuid)
        vtable_offset_local = IAgVAStateCalcVectorX._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorX, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorX.__dict__ and type(IAgVAStateCalcVectorX.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorX.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorX.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))

    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))

    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormalize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNormalize"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{ADD32358-B55C-4758-BBB9-391728F24BB8}", IAgVAStateCalcVectorX)
agcls.AgTypeNameMap["IAgVAStateCalcVectorX"] = IAgVAStateCalcVectorX
__all__.append("IAgVAStateCalcVectorX")

class IAgVAStateCalcVectorY(object):
    """Properties for a Vector Y calculation object."""
    _uuid = "{BCF6F352-A2ED-491B-9961-5A164D6B5388}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetNormalize"] = _raise_uninitialized_error
        self.__dict__["_SetNormalize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorY._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorY from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorY = agcom.GUID(IAgVAStateCalcVectorY._uuid)
        vtable_offset_local = IAgVAStateCalcVectorY._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorY, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorY.__dict__ and type(IAgVAStateCalcVectorY.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorY.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorY.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))

    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))

    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormalize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNormalize"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BCF6F352-A2ED-491B-9961-5A164D6B5388}", IAgVAStateCalcVectorY)
agcls.AgTypeNameMap["IAgVAStateCalcVectorY"] = IAgVAStateCalcVectorY
__all__.append("IAgVAStateCalcVectorY")

class IAgVAStateCalcVectorZ(object):
    """Properties for a Vector Z calculation object."""
    _uuid = "{7F7E2A8A-7A33-48E3-A622-1A23E2672102}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_GetNormalize"] = _raise_uninitialized_error
        self.__dict__["_SetNormalize"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorZ._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorZ from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorZ = agcom.GUID(IAgVAStateCalcVectorZ._uuid)
        vtable_offset_local = IAgVAStateCalcVectorZ._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetNormalize"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorZ, vtable_offset_local+8, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorZ.__dict__ and type(IAgVAStateCalcVectorZ.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorZ.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorZ.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))

    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))

    @property
    def Normalize(self) -> bool:
        """If true, return the normalized magnitude."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormalize"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Normalize.setter
    def Normalize(self, newVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetNormalize"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7F7E2A8A-7A33-48E3-A622-1A23E2672102}", IAgVAStateCalcVectorZ)
agcls.AgTypeNameMap["IAgVAStateCalcVectorZ"] = IAgVAStateCalcVectorZ
__all__.append("IAgVAStateCalcVectorZ")

class IAgVAStateCalcMass(object):
    """Properties for a Total Mass calculation object."""
    _uuid = "{1C324BE8-C857-42F2-AFA9-88AD686E53CE}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMass._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMass from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMass = agcom.GUID(IAgVAStateCalcMass._uuid)
        vtable_offset_local = IAgVAStateCalcMass._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMass.__dict__ and type(IAgVAStateCalcMass.__dict__[attrname]) == property:
            return IAgVAStateCalcMass.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMass.")
    

agcls.AgClassCatalog.add_catalog_entry("{1C324BE8-C857-42F2-AFA9-88AD686E53CE}", IAgVAStateCalcMass)
agcls.AgTypeNameMap["IAgVAStateCalcMass"] = IAgVAStateCalcMass
__all__.append("IAgVAStateCalcMass")

class IAgVAStateCalcManeuverTotalMassFlowRate(object):
    """Properties for a Total Mass Flow Rate calculation object."""
    _uuid = "{DFD18CDB-7478-4CB0-86B3-46870753D290}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcManeuverTotalMassFlowRate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcManeuverTotalMassFlowRate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcManeuverTotalMassFlowRate = agcom.GUID(IAgVAStateCalcManeuverTotalMassFlowRate._uuid)
        vtable_offset_local = IAgVAStateCalcManeuverTotalMassFlowRate._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcManeuverTotalMassFlowRate.__dict__ and type(IAgVAStateCalcManeuverTotalMassFlowRate.__dict__[attrname]) == property:
            return IAgVAStateCalcManeuverTotalMassFlowRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcManeuverTotalMassFlowRate.")
    

agcls.AgClassCatalog.add_catalog_entry("{DFD18CDB-7478-4CB0-86B3-46870753D290}", IAgVAStateCalcManeuverTotalMassFlowRate)
agcls.AgTypeNameMap["IAgVAStateCalcManeuverTotalMassFlowRate"] = IAgVAStateCalcManeuverTotalMassFlowRate
__all__.append("IAgVAStateCalcManeuverTotalMassFlowRate")

class IAgVAStateCalcAbsoluteValue(object):
    """Properties for an Absolute Value calculation object."""
    _uuid = "{214DD350-1B42-48C1-9720-66D109A5376B}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcAbsoluteValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAbsoluteValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcAbsoluteValue = agcom.GUID(IAgVAStateCalcAbsoluteValue._uuid)
        vtable_offset_local = IAgVAStateCalcAbsoluteValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAbsoluteValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAbsoluteValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAbsoluteValue.__dict__ and type(IAgVAStateCalcAbsoluteValue.__dict__[attrname]) == property:
            return IAgVAStateCalcAbsoluteValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAbsoluteValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{214DD350-1B42-48C1-9720-66D109A5376B}", IAgVAStateCalcAbsoluteValue)
agcls.AgTypeNameMap["IAgVAStateCalcAbsoluteValue"] = IAgVAStateCalcAbsoluteValue
__all__.append("IAgVAStateCalcAbsoluteValue")

class IAgVAStateCalcDifference(object):
    """Properties for a Difference calculation object."""
    _uuid = "{4236F99F-8B4C-495E-BC83-41C4B0F1630E}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetDifferenceOrder"] = _raise_uninitialized_error
        self.__dict__["_SetDifferenceOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDifference._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifference from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDifference = agcom.GUID(IAgVAStateCalcDifference._uuid)
        vtable_offset_local = IAgVAStateCalcDifference._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifference, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifference, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifference, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifference, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifference.__dict__ and type(IAgVAStateCalcDifference.__dict__[attrname]) == property:
            return IAgVAStateCalcDifference.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifference.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def DifferenceOrder(self) -> "AgEVADifferenceOrder":
        """The order of the difference calculation."""
        with agmarshall.AgEnum_arg(AgEVADifferenceOrder) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDifferenceOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVADifferenceOrder") -> None:
        with agmarshall.AgEnum_arg(AgEVADifferenceOrder, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDifferenceOrder"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4236F99F-8B4C-495E-BC83-41C4B0F1630E}", IAgVAStateCalcDifference)
agcls.AgTypeNameMap["IAgVAStateCalcDifference"] = IAgVAStateCalcDifference
__all__.append("IAgVAStateCalcDifference")

class IAgVAStateCalcDifferenceOtherSegment(object):
    """Properties for a Difference Across Segments calculation object."""
    _uuid = "{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_GetDifferenceOrder"] = _raise_uninitialized_error
        self.__dict__["_SetDifferenceOrder"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDifferenceOtherSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifferenceOtherSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDifferenceOtherSegment = agcom.GUID(IAgVAStateCalcDifferenceOtherSegment._uuid)
        vtable_offset_local = IAgVAStateCalcDifferenceOtherSegment._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceOtherSegment, vtable_offset_local+8, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifferenceOtherSegment.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))

    @property
    def DifferenceOrder(self) -> "AgEVASegmentDifferenceOrder":
        """The order of the difference calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDifferenceOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVASegmentDifferenceOrder") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDifferenceOrder"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E5A6D40B-34F4-4325-AC8F-EE183AC7BA96}", IAgVAStateCalcDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcDifferenceOtherSegment"] = IAgVAStateCalcDifferenceOtherSegment
__all__.append("IAgVAStateCalcDifferenceOtherSegment")

class IAgVAStateCalcPosDifferenceOtherSegment(object):
    """Properties for a Position Difference Across Segments calculation object."""
    _uuid = "{168CD10A-F726-450F-A63F-E00A85FDEF87}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcPosDifferenceOtherSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPosDifferenceOtherSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcPosDifferenceOtherSegment = agcom.GUID(IAgVAStateCalcPosDifferenceOtherSegment._uuid)
        vtable_offset_local = IAgVAStateCalcPosDifferenceOtherSegment._vtable_offset - 1
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosDifferenceOtherSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosDifferenceOtherSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosDifferenceOtherSegment, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosDifferenceOtherSegment, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPosDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcPosDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcPosDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPosDifferenceOtherSegment.")
    
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{168CD10A-F726-450F-A63F-E00A85FDEF87}", IAgVAStateCalcPosDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcPosDifferenceOtherSegment"] = IAgVAStateCalcPosDifferenceOtherSegment
__all__.append("IAgVAStateCalcPosDifferenceOtherSegment")

class IAgVAStateCalcVelDifferenceOtherSegment(object):
    """Properties for a Velocity Difference Across Segments calculation object."""
    _uuid = "{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVelDifferenceOtherSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVelDifferenceOtherSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVelDifferenceOtherSegment = agcom.GUID(IAgVAStateCalcVelDifferenceOtherSegment._uuid)
        vtable_offset_local = IAgVAStateCalcVelDifferenceOtherSegment._vtable_offset - 1
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelDifferenceOtherSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelDifferenceOtherSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelDifferenceOtherSegment, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelDifferenceOtherSegment, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVelDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcVelDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcVelDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVelDifferenceOtherSegment.")
    
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9BE8161D-7D1A-4FF6-8B63-C160E22844D1}", IAgVAStateCalcVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcVelDifferenceOtherSegment"] = IAgVAStateCalcVelDifferenceOtherSegment
__all__.append("IAgVAStateCalcVelDifferenceOtherSegment")

class IAgVAStateCalcPosVelDifferenceOtherSegment(object):
    """Properties for a Position and Velocity Difference Across Segments calculation object."""
    _uuid = "{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcPosVelDifferenceOtherSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPosVelDifferenceOtherSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcPosVelDifferenceOtherSegment = agcom.GUID(IAgVAStateCalcPosVelDifferenceOtherSegment._uuid)
        vtable_offset_local = IAgVAStateCalcPosVelDifferenceOtherSegment._vtable_offset - 1
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosVelDifferenceOtherSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosVelDifferenceOtherSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosVelDifferenceOtherSegment, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPosVelDifferenceOtherSegment, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__ and type(IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcPosVelDifferenceOtherSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPosVelDifferenceOtherSegment.")
    
    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{58BA297D-0E89-46C4-9C9B-E8E7EA2B23AC}", IAgVAStateCalcPosVelDifferenceOtherSegment)
agcls.AgTypeNameMap["IAgVAStateCalcPosVelDifferenceOtherSegment"] = IAgVAStateCalcPosVelDifferenceOtherSegment
__all__.append("IAgVAStateCalcPosVelDifferenceOtherSegment")

class IAgVAStateCalcValueAtSegment(object):
    """Properties for a Value At Segment calculation object."""
    _uuid = "{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcValueAtSegment._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcValueAtSegment from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcValueAtSegment = agcom.GUID(IAgVAStateCalcValueAtSegment._uuid)
        vtable_offset_local = IAgVAStateCalcValueAtSegment._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegment, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcValueAtSegment.__dict__ and type(IAgVAStateCalcValueAtSegment.__dict__[attrname]) == property:
            return IAgVAStateCalcValueAtSegment.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcValueAtSegment.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{950DEE79-D37E-4EE5-AB69-6E145AAFB9AC}", IAgVAStateCalcValueAtSegment)
agcls.AgTypeNameMap["IAgVAStateCalcValueAtSegment"] = IAgVAStateCalcValueAtSegment
__all__.append("IAgVAStateCalcValueAtSegment")

class IAgVAStateCalcMaxValue(object):
    """Properties for a Maximum Value calculation object."""
    _uuid = "{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMaxValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMaxValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMaxValue = agcom.GUID(IAgVAStateCalcMaxValue._uuid)
        vtable_offset_local = IAgVAStateCalcMaxValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMaxValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMaxValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMaxValue.__dict__ and type(IAgVAStateCalcMaxValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMaxValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMaxValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A7B9EBBB-D87A-4F04-8DE3-E7812F322B66}", IAgVAStateCalcMaxValue)
agcls.AgTypeNameMap["IAgVAStateCalcMaxValue"] = IAgVAStateCalcMaxValue
__all__.append("IAgVAStateCalcMaxValue")

class IAgVAStateCalcMinValue(object):
    """Properties for a Minimum Value calculation object."""
    _uuid = "{22B15669-D363-4C73-87AE-424E1DF37ABA}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMinValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMinValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMinValue = agcom.GUID(IAgVAStateCalcMinValue._uuid)
        vtable_offset_local = IAgVAStateCalcMinValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMinValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMinValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMinValue.__dict__ and type(IAgVAStateCalcMinValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMinValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMinValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{22B15669-D363-4C73-87AE-424E1DF37ABA}", IAgVAStateCalcMinValue)
agcls.AgTypeNameMap["IAgVAStateCalcMinValue"] = IAgVAStateCalcMinValue
__all__.append("IAgVAStateCalcMinValue")

class IAgVAStateCalcMeanValue(object):
    """Properties for a Mean Value calculation object."""
    _uuid = "{7523BA0F-0B19-4660-8785-D9C23F29CB1C}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMeanValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMeanValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMeanValue = agcom.GUID(IAgVAStateCalcMeanValue._uuid)
        vtable_offset_local = IAgVAStateCalcMeanValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMeanValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMeanValue.__dict__ and type(IAgVAStateCalcMeanValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMeanValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMeanValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7523BA0F-0B19-4660-8785-D9C23F29CB1C}", IAgVAStateCalcMeanValue)
agcls.AgTypeNameMap["IAgVAStateCalcMeanValue"] = IAgVAStateCalcMeanValue
__all__.append("IAgVAStateCalcMeanValue")

class IAgVAStateCalcMedianValue(object):
    """Properties for a Median Value calculation object."""
    _uuid = "{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcMedianValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcMedianValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcMedianValue = agcom.GUID(IAgVAStateCalcMedianValue._uuid)
        vtable_offset_local = IAgVAStateCalcMedianValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMedianValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcMedianValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcMedianValue.__dict__ and type(IAgVAStateCalcMedianValue.__dict__[attrname]) == property:
            return IAgVAStateCalcMedianValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcMedianValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3B7D51C9-5395-4AAA-828D-2AFF5CAB5676}", IAgVAStateCalcMedianValue)
agcls.AgTypeNameMap["IAgVAStateCalcMedianValue"] = IAgVAStateCalcMedianValue
__all__.append("IAgVAStateCalcMedianValue")

class IAgVAStateCalcStandardDeviation(object):
    """Properties for a Standard Deviation calculation object."""
    _uuid = "{41847821-7A1E-46E9-AC78-B50A3D1D1500}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcStandardDeviation._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcStandardDeviation from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcStandardDeviation = agcom.GUID(IAgVAStateCalcStandardDeviation._uuid)
        vtable_offset_local = IAgVAStateCalcStandardDeviation._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcStandardDeviation, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcStandardDeviation, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcStandardDeviation.__dict__ and type(IAgVAStateCalcStandardDeviation.__dict__[attrname]) == property:
            return IAgVAStateCalcStandardDeviation.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcStandardDeviation.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{41847821-7A1E-46E9-AC78-B50A3D1D1500}", IAgVAStateCalcStandardDeviation)
agcls.AgTypeNameMap["IAgVAStateCalcStandardDeviation"] = IAgVAStateCalcStandardDeviation
__all__.append("IAgVAStateCalcStandardDeviation")

class IAgVAStateCalcNegative(object):
    """Properties for a Negative calculation object."""
    _uuid = "{AE894289-670C-4C3F-8EAB-ABD6056919F2}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcNegative._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcNegative from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcNegative = agcom.GUID(IAgVAStateCalcNegative._uuid)
        vtable_offset_local = IAgVAStateCalcNegative._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNegative, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcNegative, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcNegative.__dict__ and type(IAgVAStateCalcNegative.__dict__[attrname]) == property:
            return IAgVAStateCalcNegative.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcNegative.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation  object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{AE894289-670C-4C3F-8EAB-ABD6056919F2}", IAgVAStateCalcNegative)
agcls.AgTypeNameMap["IAgVAStateCalcNegative"] = IAgVAStateCalcNegative
__all__.append("IAgVAStateCalcNegative")

class IAgVAStateCalcTrueAnomaly(object):
    """Properties for a Mean True Anomaly calculation object."""
    _uuid = "{639BD92E-793C-49C3-A72C-3456824F43EE}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcTrueAnomaly._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTrueAnomaly from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcTrueAnomaly = agcom.GUID(IAgVAStateCalcTrueAnomaly._uuid)
        vtable_offset_local = IAgVAStateCalcTrueAnomaly._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueAnomaly, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueAnomaly, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueAnomaly, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueAnomaly, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTrueAnomaly.__dict__ and type(IAgVAStateCalcTrueAnomaly.__dict__[attrname]) == property:
            return IAgVAStateCalcTrueAnomaly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTrueAnomaly.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{639BD92E-793C-49C3-A72C-3456824F43EE}", IAgVAStateCalcTrueAnomaly)
agcls.AgTypeNameMap["IAgVAStateCalcTrueAnomaly"] = IAgVAStateCalcTrueAnomaly
__all__.append("IAgVAStateCalcTrueAnomaly")

class IAgVABDotRCalc(object):
    """Properties for a BDotR calculation object."""
    _uuid = "{BE67DDCF-6371-4275-996C-5DDB200E3B3F}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetRefVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetRefVectorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABDotRCalc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABDotRCalc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABDotRCalc = agcom.GUID(IAgVABDotRCalc._uuid)
        vtable_offset_local = IAgVABDotRCalc._vtable_offset - 1
        self.__dict__["_GetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotRCalc, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotRCalc, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotRCalc, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotRCalc, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABDotRCalc.__dict__ and type(IAgVABDotRCalc.__dict__[attrname]) == property:
            return IAgVABDotRCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABDotRCalc.")
    
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetBodyName"](arg_inVal.COM_val))

    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefVectorName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BE67DDCF-6371-4275-996C-5DDB200E3B3F}", IAgVABDotRCalc)
agcls.AgTypeNameMap["IAgVABDotRCalc"] = IAgVABDotRCalc
__all__.append("IAgVABDotRCalc")

class IAgVABDotTCalc(object):
    """Properties for a BDotT calculation object."""
    _uuid = "{E9BE921C-D864-4019-A3E7-A54DA59502FD}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetRefVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetRefVectorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABDotTCalc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABDotTCalc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABDotTCalc = agcom.GUID(IAgVABDotTCalc._uuid)
        vtable_offset_local = IAgVABDotTCalc._vtable_offset - 1
        self.__dict__["_GetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotTCalc, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotTCalc, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotTCalc, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABDotTCalc, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABDotTCalc.__dict__ and type(IAgVABDotTCalc.__dict__[attrname]) == property:
            return IAgVABDotTCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABDotTCalc.")
    
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetBodyName"](arg_inVal.COM_val))

    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefVectorName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E9BE921C-D864-4019-A3E7-A54DA59502FD}", IAgVABDotTCalc)
agcls.AgTypeNameMap["IAgVABDotTCalc"] = IAgVABDotTCalc
__all__.append("IAgVABDotTCalc")

class IAgVABMagCalc(object):
    """Properties for a BMagnitude calculation object."""
    _uuid = "{7D570198-8048-407E-B532-B7B2B86860C1}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABMagCalc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABMagCalc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABMagCalc = agcom.GUID(IAgVABMagCalc._uuid)
        vtable_offset_local = IAgVABMagCalc._vtable_offset - 1
        self.__dict__["_GetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABMagCalc, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABMagCalc, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABMagCalc.__dict__ and type(IAgVABMagCalc.__dict__[attrname]) == property:
            return IAgVABMagCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABMagCalc.")
    
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7D570198-8048-407E-B532-B7B2B86860C1}", IAgVABMagCalc)
agcls.AgTypeNameMap["IAgVABMagCalc"] = IAgVABMagCalc
__all__.append("IAgVABMagCalc")

class IAgVABThetaCalc(object):
    """Properties for a BTheta calculation object."""
    _uuid = "{F478A128-3084-457F-B098-09114FF32DB8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetTargetBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetRefVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetRefVectorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABThetaCalc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABThetaCalc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABThetaCalc = agcom.GUID(IAgVABThetaCalc._uuid)
        vtable_offset_local = IAgVABThetaCalc._vtable_offset - 1
        self.__dict__["_GetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABThetaCalc, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetTargetBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVABThetaCalc, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABThetaCalc, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetRefVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVABThetaCalc, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABThetaCalc.__dict__ and type(IAgVABThetaCalc.__dict__[attrname]) == property:
            return IAgVABThetaCalc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABThetaCalc.")
    
    @property
    def TargetBodyName(self) -> str:
        """The target body for B-plane computation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TargetBodyName.setter
    def TargetBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTargetBodyName"](arg_inVal.COM_val))

    @property
    def RefVectorName(self) -> str:
        """The reference vector to use to define the B-plane."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefVectorName.setter
    def RefVectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefVectorName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{F478A128-3084-457F-B098-09114FF32DB8}", IAgVABThetaCalc)
agcls.AgTypeNameMap["IAgVABThetaCalc"] = IAgVABThetaCalc
__all__.append("IAgVABThetaCalc")

class IAgVAStateCalcDeltaDec(object):
    """Properties for a Delta Declination calculation object."""
    _uuid = "{2C14B234-E769-4969-BFA3-54A5AB2C6F89}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceType"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceBody"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceBody"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDeltaDec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaDec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDeltaDec = agcom.GUID(IAgVAStateCalcDeltaDec._uuid)
        vtable_offset_local = IAgVAStateCalcDeltaDec._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReferenceBody"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetReferenceBody"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaDec, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaDec.__dict__ and type(IAgVAStateCalcDeltaDec.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaDec.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceType(self) -> "AgEVACalcObjectCentralBodyReference":
        """The central body's reference type"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceType.setter
    def ReferenceType(self, inVal:"AgEVACalcObjectCentralBodyReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceType"](arg_inVal.COM_val))

    @property
    def ReferenceBody(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceBody"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceBody.setter
    def ReferenceBody(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceBody"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2C14B234-E769-4969-BFA3-54A5AB2C6F89}", IAgVAStateCalcDeltaDec)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaDec"] = IAgVAStateCalcDeltaDec
__all__.append("IAgVAStateCalcDeltaDec")

class IAgVAStateCalcDeltaRA(object):
    """Properties for a Delta Right Asc calculation object."""
    _uuid = "{42FFF17F-F89E-438E-B5C9-0206AD20D09E}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceType"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceBody"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceBody"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDeltaRA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDeltaRA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDeltaRA = agcom.GUID(IAgVAStateCalcDeltaRA._uuid)
        vtable_offset_local = IAgVAStateCalcDeltaRA._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetReferenceBody"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetReferenceBody"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDeltaRA, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDeltaRA.__dict__ and type(IAgVAStateCalcDeltaRA.__dict__[attrname]) == property:
            return IAgVAStateCalcDeltaRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDeltaRA.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceType(self) -> "AgEVACalcObjectCentralBodyReference":
        """The central body's reference type"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceType.setter
    def ReferenceType(self, inVal:"AgEVACalcObjectCentralBodyReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectCentralBodyReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceType"](arg_inVal.COM_val))

    @property
    def ReferenceBody(self) -> str:
        """The reference body of the component. Read only when the ReferenceType is eVACalcObjectCentralBodyReferenceParent."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceBody"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceBody.setter
    def ReferenceBody(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceBody"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{42FFF17F-F89E-438E-B5C9-0206AD20D09E}", IAgVAStateCalcDeltaRA)
agcls.AgTypeNameMap["IAgVAStateCalcDeltaRA"] = IAgVAStateCalcDeltaRA
__all__.append("IAgVAStateCalcDeltaRA")

class IAgVAStateCalcBetaAngle(object):
    """Properties for a Beta Angle calculation object."""
    _uuid = "{6D251D91-4555-4C35-B56C-04832CF014E2}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcBetaAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcBetaAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcBetaAngle = agcom.GUID(IAgVAStateCalcBetaAngle._uuid)
        vtable_offset_local = IAgVAStateCalcBetaAngle._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcBetaAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcBetaAngle, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcBetaAngle.__dict__ and type(IAgVAStateCalcBetaAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcBetaAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcBetaAngle.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6D251D91-4555-4C35-B56C-04832CF014E2}", IAgVAStateCalcBetaAngle)
agcls.AgTypeNameMap["IAgVAStateCalcBetaAngle"] = IAgVAStateCalcBetaAngle
__all__.append("IAgVAStateCalcBetaAngle")

class IAgVAStateCalcLocalApparentSolarLon(object):
    """Properties for a Local Apparent Solar Longitude calculation object."""
    _uuid = "{619668AB-B09E-4160-9ED3-1365F3678C60}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcLocalApparentSolarLon._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLocalApparentSolarLon from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcLocalApparentSolarLon = agcom.GUID(IAgVAStateCalcLocalApparentSolarLon._uuid)
        vtable_offset_local = IAgVAStateCalcLocalApparentSolarLon._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLocalApparentSolarLon, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLocalApparentSolarLon, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLocalApparentSolarLon.__dict__ and type(IAgVAStateCalcLocalApparentSolarLon.__dict__[attrname]) == property:
            return IAgVAStateCalcLocalApparentSolarLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLocalApparentSolarLon.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{619668AB-B09E-4160-9ED3-1365F3678C60}", IAgVAStateCalcLocalApparentSolarLon)
agcls.AgTypeNameMap["IAgVAStateCalcLocalApparentSolarLon"] = IAgVAStateCalcLocalApparentSolarLon
__all__.append("IAgVAStateCalcLocalApparentSolarLon")

class IAgVAStateCalcLonOfPeriapsis(object):
    """Properties for a Longitude of Periapsis calculation object."""
    _uuid = "{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcLonOfPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcLonOfPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcLonOfPeriapsis = agcom.GUID(IAgVAStateCalcLonOfPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcLonOfPeriapsis._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfPeriapsis, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfPeriapsis, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcLonOfPeriapsis, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcLonOfPeriapsis.__dict__ and type(IAgVAStateCalcLonOfPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcLonOfPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcLonOfPeriapsis.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1F8ECEB0-EFBE-4A23-8781-9BDEFF119DF0}", IAgVAStateCalcLonOfPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcLonOfPeriapsis"] = IAgVAStateCalcLonOfPeriapsis
__all__.append("IAgVAStateCalcLonOfPeriapsis")

class IAgVAStateCalcOrbitStateValue(object):
    """Properties for an Orbit State Value calculation object."""
    _uuid = "{BE928A27-517C-4D52-A681-DA6CFC89E59F}"
    _num_methods = 20
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetInputCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetInputCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetX"] = _raise_uninitialized_error
        self.__dict__["_SetX"] = _raise_uninitialized_error
        self.__dict__["_GetY"] = _raise_uninitialized_error
        self.__dict__["_SetY"] = _raise_uninitialized_error
        self.__dict__["_GetZ"] = _raise_uninitialized_error
        self.__dict__["_SetZ"] = _raise_uninitialized_error
        self.__dict__["_GetVx"] = _raise_uninitialized_error
        self.__dict__["_SetVx"] = _raise_uninitialized_error
        self.__dict__["_GetVy"] = _raise_uninitialized_error
        self.__dict__["_SetVy"] = _raise_uninitialized_error
        self.__dict__["_GetVz"] = _raise_uninitialized_error
        self.__dict__["_SetVz"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOrbitStateValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOrbitStateValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOrbitStateValue = agcom.GUID(IAgVAStateCalcOrbitStateValue._uuid)
        vtable_offset_local = IAgVAStateCalcOrbitStateValue._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetInputCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetInputCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetX"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_GetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetY"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetZ"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetVx"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetVx"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetVy"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetVy"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetVz"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetVz"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+16, agcom.VARIANT)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+19, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOrbitStateValue, vtable_offset_local+20, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOrbitStateValue.__dict__ and type(IAgVAStateCalcOrbitStateValue.__dict__[attrname]) == property:
            return IAgVAStateCalcOrbitStateValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOrbitStateValue.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def InputCoordSystemName(self) -> str:
        """The coordinate system of the input state."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInputCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InputCoordSystemName.setter
    def InputCoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInputCoordSystemName"](arg_inVal.COM_val))

    @property
    def X(self) -> typing.Any:
        """The x position component. Uses Distance Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetX"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @X.setter
    def X(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetX"](arg_inVal.COM_val))

    @property
    def Y(self) -> typing.Any:
        """The y position component. Uses Distance Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y.setter
    def Y(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetY"](arg_inVal.COM_val))

    @property
    def Z(self) -> typing.Any:
        """The z position component. Uses Distance Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetZ"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Z.setter
    def Z(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetZ"](arg_inVal.COM_val))

    @property
    def Vx(self) -> typing.Any:
        """The x velocity component. Uses Rate Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVx"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vx.setter
    def Vx(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVx"](arg_inVal.COM_val))

    @property
    def Vy(self) -> typing.Any:
        """The y velocity component. Uses Rate Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVy"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vy.setter
    def Vy(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVy"](arg_inVal.COM_val))

    @property
    def Vz(self) -> typing.Any:
        """The z velocity component. Uses Rate Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVz"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vz.setter
    def Vz(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVz"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlOrbitStateValue") -> None:
        """Enables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlOrbitStateValue") -> None:
        """Disables the specified control parameter"""
        with agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlOrbitStateValue") -> bool:
        """Sees if the specified control is enabled"""
        with agmarshall.AgEnum_arg(AgEVAControlOrbitStateValue, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{BE928A27-517C-4D52-A681-DA6CFC89E59F}", IAgVAStateCalcOrbitStateValue)
agcls.AgTypeNameMap["IAgVAStateCalcOrbitStateValue"] = IAgVAStateCalcOrbitStateValue
__all__.append("IAgVAStateCalcOrbitStateValue")

class IAgVAStateCalcSignedEccentricity(object):
    """Properties for a SignedEccentricity calculation object."""
    _uuid = "{CCBD1A51-0C24-4FEA-936D-F8E173931C30}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSignedEccentricity._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSignedEccentricity from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSignedEccentricity = agcom.GUID(IAgVAStateCalcSignedEccentricity._uuid)
        vtable_offset_local = IAgVAStateCalcSignedEccentricity._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSignedEccentricity, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSignedEccentricity, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSignedEccentricity, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSignedEccentricity, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSignedEccentricity.__dict__ and type(IAgVAStateCalcSignedEccentricity.__dict__[attrname]) == property:
            return IAgVAStateCalcSignedEccentricity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSignedEccentricity.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{CCBD1A51-0C24-4FEA-936D-F8E173931C30}", IAgVAStateCalcSignedEccentricity)
agcls.AgTypeNameMap["IAgVAStateCalcSignedEccentricity"] = IAgVAStateCalcSignedEccentricity
__all__.append("IAgVAStateCalcSignedEccentricity")

class IAgVAStateCalcTrueLon(object):
    """Properties for a True Longitude calculation object."""
    _uuid = "{E7F127C5-C675-4952-A10C-17AFCBB90F1B}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcTrueLon._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcTrueLon from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcTrueLon = agcom.GUID(IAgVAStateCalcTrueLon._uuid)
        vtable_offset_local = IAgVAStateCalcTrueLon._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueLon, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueLon, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueLon, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcTrueLon, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcTrueLon.__dict__ and type(IAgVAStateCalcTrueLon.__dict__[attrname]) == property:
            return IAgVAStateCalcTrueLon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcTrueLon.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E7F127C5-C675-4952-A10C-17AFCBB90F1B}", IAgVAStateCalcTrueLon)
agcls.AgTypeNameMap["IAgVAStateCalcTrueLon"] = IAgVAStateCalcTrueLon
__all__.append("IAgVAStateCalcTrueLon")

class IAgVAStateCalcPower(object):
    """Properties for a Power calculation object."""
    _uuid = "{748E8F67-4505-4DE7-8206-4752EF3A9158}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_SetPowerSourceName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcPower._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPower from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcPower = agcom.GUID(IAgVAStateCalcPower._uuid)
        vtable_offset_local = IAgVAStateCalcPower._vtable_offset - 1
        self.__dict__["_GetPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPower, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcPower, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPower.__dict__ and type(IAgVAStateCalcPower.__dict__[attrname]) == property:
            return IAgVAStateCalcPower.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPower.")
    
    @property
    def PowerSourceName(self) -> str:
        """The power source."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerSourceName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerSourceName.setter
    def PowerSourceName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerSourceName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{748E8F67-4505-4DE7-8206-4752EF3A9158}", IAgVAStateCalcPower)
agcls.AgTypeNameMap["IAgVAStateCalcPower"] = IAgVAStateCalcPower
__all__.append("IAgVAStateCalcPower")

class IAgVAStateCalcRelMotion(object):
    """Properties for a Relative Motion calculation object."""
    _uuid = "{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOriginAtMaster"] = _raise_uninitialized_error
        self.__dict__["_SetOriginAtMaster"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelMotion._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelMotion from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelMotion = agcom.GUID(IAgVAStateCalcRelMotion._uuid)
        vtable_offset_local = IAgVAStateCalcRelMotion._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOriginAtMaster"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOriginAtMaster"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelMotion, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelMotion.__dict__ and type(IAgVAStateCalcRelMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcRelMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelMotion.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def OriginAtMaster(self) -> bool:
        """True if the origin is at the reference satellite, false if the origin is at the current satellite."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOriginAtMaster"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OriginAtMaster.setter
    def OriginAtMaster(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOriginAtMaster"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{9B36C269-5E68-456B-A2BD-B9BEA9B131DB}", IAgVAStateCalcRelMotion)
agcls.AgTypeNameMap["IAgVAStateCalcRelMotion"] = IAgVAStateCalcRelMotion
__all__.append("IAgVAStateCalcRelMotion")

class IAgVAStateCalcSolarBetaAngle(object):
    """Properties for a Solar Beta Angle calculation object."""
    _uuid = "{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetSignConvention"] = _raise_uninitialized_error
        self.__dict__["_SetSignConvention"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSolarBetaAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSolarBetaAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSolarBetaAngle = agcom.GUID(IAgVAStateCalcSolarBetaAngle._uuid)
        vtable_offset_local = IAgVAStateCalcSolarBetaAngle._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarBetaAngle, vtable_offset_local+13, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSolarBetaAngle.__dict__ and type(IAgVAStateCalcSolarBetaAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSolarBetaAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSolarBetaAngle.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitPlaneSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitPlaneSource"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def SunPosition(self) -> "AgEVACalcObjectSunPosition":
        """The type of the Sun location."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVACalcObjectSunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSignConvention"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSignConvention"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1CBEFF7B-1B28-4AEB-A8BD-B329419FC824}", IAgVAStateCalcSolarBetaAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSolarBetaAngle"] = IAgVAStateCalcSolarBetaAngle
__all__.append("IAgVAStateCalcSolarBetaAngle")

class IAgVAStateCalcSolarInPlaneAngle(object):
    """Properties for a Solar In Plane Angle calculation object."""
    _uuid = "{08345343-C64C-4CAF-B1C4-EE76DC4917B5}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetCounterClockwiseRotation"] = _raise_uninitialized_error
        self.__dict__["_SetCounterClockwiseRotation"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceDirection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSolarInPlaneAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSolarInPlaneAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSolarInPlaneAngle = agcom.GUID(IAgVAStateCalcSolarInPlaneAngle._uuid)
        vtable_offset_local = IAgVAStateCalcSolarInPlaneAngle._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetCounterClockwiseRotation"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetCounterClockwiseRotation"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetReferenceDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcSolarInPlaneAngle, vtable_offset_local+15, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSolarInPlaneAngle.__dict__ and type(IAgVAStateCalcSolarInPlaneAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcSolarInPlaneAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSolarInPlaneAngle.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitPlaneSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitPlaneSource"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def SunPosition(self) -> "AgEVACalcObjectSunPosition":
        """The type of the Sun location."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVACalcObjectSunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectSunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def CounterClockwiseRotation(self) -> "AgEVACalcObjectAngleSign":
        """Sets sign of the angle for counterclockwise rotation about orbit normal."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCounterClockwiseRotation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CounterClockwiseRotation.setter
    def CounterClockwiseRotation(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCounterClockwiseRotation"](arg_inVal.COM_val))

    @property
    def ReferenceDirection(self) -> "AgEVACalcObjectReferenceDirection":
        """Direction that establishes the zero value when projected into the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceDirection.setter
    def ReferenceDirection(self, inVal:"AgEVACalcObjectReferenceDirection") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceDirection"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{08345343-C64C-4CAF-B1C4-EE76DC4917B5}", IAgVAStateCalcSolarInPlaneAngle)
agcls.AgTypeNameMap["IAgVAStateCalcSolarInPlaneAngle"] = IAgVAStateCalcSolarInPlaneAngle
__all__.append("IAgVAStateCalcSolarInPlaneAngle")

class IAgVAStateCalcRelPosDecAngle(object):
    """Properties for a Relative Position Declination Angle calculation object."""
    _uuid = "{259D6521-23C1-48B4-A718-27AB113952E9}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        self.__dict__["_GetRelativePositionType"] = _raise_uninitialized_error
        self.__dict__["_SetRelativePositionType"] = _raise_uninitialized_error
        self.__dict__["_GetSignConvention"] = _raise_uninitialized_error
        self.__dict__["_SetSignConvention"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelPosDecAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelPosDecAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelPosDecAngle = agcom.GUID(IAgVAStateCalcRelPosDecAngle._uuid)
        vtable_offset_local = IAgVAStateCalcRelPosDecAngle._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetRelativePositionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetRelativePositionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosDecAngle, vtable_offset_local+13, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelPosDecAngle.__dict__ and type(IAgVAStateCalcRelPosDecAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcRelPosDecAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelPosDecAngle.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitPlaneSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitPlaneSource"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def RelativePositionType(self) -> "AgEVACalcObjectRelativePosition":
        """The type of the relative position."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativePositionType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativePositionType.setter
    def RelativePositionType(self, inVal:"AgEVACalcObjectRelativePosition") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativePositionType"](arg_inVal.COM_val))

    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSignConvention"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSignConvention"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{259D6521-23C1-48B4-A718-27AB113952E9}", IAgVAStateCalcRelPosDecAngle)
agcls.AgTypeNameMap["IAgVAStateCalcRelPosDecAngle"] = IAgVAStateCalcRelPosDecAngle
__all__.append("IAgVAStateCalcRelPosDecAngle")

class IAgVAStateCalcRelPosInPlaneAngle(object):
    """Properties for a Relative Position In Plane Angle calculation object."""
    _uuid = "{E00BF049-7F38-4938-986F-8AB987CE84D2}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_SetOrbitPlaneSource"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        self.__dict__["_GetRelativePositionType"] = _raise_uninitialized_error
        self.__dict__["_SetRelativePositionType"] = _raise_uninitialized_error
        self.__dict__["_GetCounterClockwiseRotation"] = _raise_uninitialized_error
        self.__dict__["_SetCounterClockwiseRotation"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceDirection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceDirection"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelPosInPlaneAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelPosInPlaneAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelPosInPlaneAngle = agcom.GUID(IAgVAStateCalcRelPosInPlaneAngle._uuid)
        vtable_offset_local = IAgVAStateCalcRelPosInPlaneAngle._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetOrbitPlaneSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetRelativePositionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetRelativePositionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetCounterClockwiseRotation"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetCounterClockwiseRotation"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetReferenceDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+14, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelPosInPlaneAngle, vtable_offset_local+15, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelPosInPlaneAngle.__dict__ and type(IAgVAStateCalcRelPosInPlaneAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcRelPosInPlaneAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelPosInPlaneAngle.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def OrbitPlaneSource(self) -> "AgEVACalcObjectOrbitPlaneSource":
        """Selection of the satellite that will generate the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrbitPlaneSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OrbitPlaneSource.setter
    def OrbitPlaneSource(self, inVal:"AgEVACalcObjectOrbitPlaneSource") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectOrbitPlaneSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrbitPlaneSource"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def RelativePositionType(self) -> "AgEVACalcObjectRelativePosition":
        """The type of the relative position."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRelativePositionType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RelativePositionType.setter
    def RelativePositionType(self, inVal:"AgEVACalcObjectRelativePosition") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectRelativePosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRelativePositionType"](arg_inVal.COM_val))

    @property
    def CounterClockwiseRotation(self) -> "AgEVACalcObjectAngleSign":
        """Sets sign of the angle for counterclockwise rotation about orbit normal."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCounterClockwiseRotation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CounterClockwiseRotation.setter
    def CounterClockwiseRotation(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCounterClockwiseRotation"](arg_inVal.COM_val))

    @property
    def ReferenceDirection(self) -> "AgEVACalcObjectReferenceDirection":
        """Direction that establishes the zero value when projected into the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceDirection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceDirection.setter
    def ReferenceDirection(self, inVal:"AgEVACalcObjectReferenceDirection") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceDirection, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceDirection"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E00BF049-7F38-4938-986F-8AB987CE84D2}", IAgVAStateCalcRelPosInPlaneAngle)
agcls.AgTypeNameMap["IAgVAStateCalcRelPosInPlaneAngle"] = IAgVAStateCalcRelPosInPlaneAngle
__all__.append("IAgVAStateCalcRelPosInPlaneAngle")

class IAgVAStateCalcRelativeInclination(object):
    """Properties for a Relative Inclination Angle calculation object."""
    _uuid = "{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetSatelliteOrbitNormalType"] = _raise_uninitialized_error
        self.__dict__["_SetSatelliteOrbitNormalType"] = _raise_uninitialized_error
        self.__dict__["_GetRefSatelliteOrbitNormalType"] = _raise_uninitialized_error
        self.__dict__["_SetRefSatelliteOrbitNormalType"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRelativeInclination._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRelativeInclination from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRelativeInclination = agcom.GUID(IAgVAStateCalcRelativeInclination._uuid)
        vtable_offset_local = IAgVAStateCalcRelativeInclination._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetSatelliteOrbitNormalType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSatelliteOrbitNormalType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetRefSatelliteOrbitNormalType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetRefSatelliteOrbitNormalType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRelativeInclination, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRelativeInclination.__dict__ and type(IAgVAStateCalcRelativeInclination.__dict__[attrname]) == property:
            return IAgVAStateCalcRelativeInclination.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRelativeInclination.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def SatelliteOrbitNormalType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements for describing the orbit plane."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSatelliteOrbitNormalType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SatelliteOrbitNormalType.setter
    def SatelliteOrbitNormalType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSatelliteOrbitNormalType"](arg_inVal.COM_val))

    @property
    def RefSatelliteOrbitNormalType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements for describing the orbit plane"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefSatelliteOrbitNormalType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefSatelliteOrbitNormalType.setter
    def RefSatelliteOrbitNormalType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefSatelliteOrbitNormalType"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{D0299E22-99A9-4FEF-82B3-A1A7E9B9C3C1}", IAgVAStateCalcRelativeInclination)
agcls.AgTypeNameMap["IAgVAStateCalcRelativeInclination"] = IAgVAStateCalcRelativeInclination
__all__.append("IAgVAStateCalcRelativeInclination")

class IAgVAStateCalcCurvilinearRelMotion(object):
    """Properties for Curvilinear Relative Motion  calculation object."""
    _uuid = "{5658DCFF-6F7B-4935-BA41-135F502DDC07}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceEllipse"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceEllipse"] = _raise_uninitialized_error
        self.__dict__["_GetLocationSource"] = _raise_uninitialized_error
        self.__dict__["_SetLocationSource"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceSelection"] = _raise_uninitialized_error
        self.__dict__["_GetReference"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        self.__dict__["_GetSignConvention"] = _raise_uninitialized_error
        self.__dict__["_SetSignConvention"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCurvilinearRelMotion._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCurvilinearRelMotion from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCurvilinearRelMotion = agcom.GUID(IAgVAStateCalcCurvilinearRelMotion._uuid)
        vtable_offset_local = IAgVAStateCalcCurvilinearRelMotion._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceEllipse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceEllipse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetLocationSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetLocationSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReference"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSignConvention"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCurvilinearRelMotion, vtable_offset_local+13, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCurvilinearRelMotion.__dict__ and type(IAgVAStateCalcCurvilinearRelMotion.__dict__[attrname]) == property:
            return IAgVAStateCalcCurvilinearRelMotion.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCurvilinearRelMotion.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceEllipse(self) -> "AgEVACalcObjectReferenceEllipse":
        """Selection of the satellite orbit that is used as the reference ellipse."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceEllipse) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceEllipse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceEllipse.setter
    def ReferenceEllipse(self, inVal:"AgEVACalcObjectReferenceEllipse") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReferenceEllipse, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceEllipse"](arg_inVal.COM_val))

    @property
    def LocationSource(self) -> "AgEVACalcObjectLocationSource":
        """Selection of the satellite whose location is being reported with respect to the reference ellipse."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectLocationSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLocationSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LocationSource.setter
    def LocationSource(self, inVal:"AgEVACalcObjectLocationSource") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectLocationSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLocationSource"](arg_inVal.COM_val))

    @property
    def ReferenceSelection(self) -> "AgEVACalcObjectReference":
        """The reference object selection."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSelection"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceSelection.setter
    def ReferenceSelection(self, inVal:"AgEVACalcObjectReference") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectReference, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceSelection"](arg_inVal.COM_val))

    @property
    def Reference(self) -> "IAgLinkToObject":
        """The reference object."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReference"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """Choice of osculating or mean elements"""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))

    @property
    def SignConvention(self) -> "AgEVACalcObjectAngleSign":
        """Sets the sign of the angle when the relative position has a positive component along the orbit normal."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSignConvention"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SignConvention.setter
    def SignConvention(self, inVal:"AgEVACalcObjectAngleSign") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectAngleSign, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSignConvention"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5658DCFF-6F7B-4935-BA41-135F502DDC07}", IAgVAStateCalcCurvilinearRelMotion)
agcls.AgTypeNameMap["IAgVAStateCalcCurvilinearRelMotion"] = IAgVAStateCalcCurvilinearRelMotion
__all__.append("IAgVAStateCalcCurvilinearRelMotion")

class IAgVAStateCalcCustomFunction(object):
    """Properties for a Custom Function calculation object."""
    _uuid = "{0943C88D-EE8E-48B1-8C5B-79A4748452C8}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetResetFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetResetFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetEvalFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetEvalFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCustomFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCustomFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCustomFunction = agcom.GUID(IAgVAStateCalcCustomFunction._uuid)
        vtable_offset_local = IAgVAStateCalcCustomFunction._vtable_offset - 1
        self.__dict__["_GetResetFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetResetFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetEvalFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetEvalFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCustomFunction, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCustomFunction.__dict__ and type(IAgVAStateCalcCustomFunction.__dict__[attrname]) == property:
            return IAgVAStateCalcCustomFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCustomFunction.")
    
    @property
    def ResetFunctionName(self) -> str:
        """The custom function called before computing, before each segment runs, and before reporting."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetResetFunctionName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ResetFunctionName.setter
    def ResetFunctionName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetResetFunctionName"](arg_inVal.COM_val))

    @property
    def EvalFunctionName(self) -> str:
        """The custom function used to calculate this object's value."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEvalFunctionName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EvalFunctionName.setter
    def EvalFunctionName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEvalFunctionName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0943C88D-EE8E-48B1-8C5B-79A4748452C8}", IAgVAStateCalcCustomFunction)
agcls.AgTypeNameMap["IAgVAStateCalcCustomFunction"] = IAgVAStateCalcCustomFunction
__all__.append("IAgVAStateCalcCustomFunction")

class IAgVAStateCalcScript(object):
    """Properties for a Script calculation object."""
    _uuid = "{42A2EAD1-9982-4895-9637-4C83524F2A02}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcArguments"] = _raise_uninitialized_error
        self.__dict__["_GetInlineFunc"] = _raise_uninitialized_error
        self.__dict__["_SetInlineFunc"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcScript._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcScript from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcScript = agcom.GUID(IAgVAStateCalcScript._uuid)
        vtable_offset_local = IAgVAStateCalcScript._vtable_offset - 1
        self.__dict__["_GetCalcArguments"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScript, vtable_offset_local+1, POINTER(agcom.PVOID))
        self.__dict__["_GetInlineFunc"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScript, vtable_offset_local+2, POINTER(agcom.BSTR))
        self.__dict__["_SetInlineFunc"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScript, vtable_offset_local+3, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScript, vtable_offset_local+4, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScript, vtable_offset_local+5, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcScript.__dict__ and type(IAgVAStateCalcScript.__dict__[attrname]) == property:
            return IAgVAStateCalcScript.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcScript.")
    
    @property
    def CalcArguments(self) -> "IAgVACalcObjectCollection":
        """The arguments to be applied to the function."""
        with agmarshall.AgInterface_out_arg() as arg_ppVACalcObjectCollection:
            agcls.evaluate_hresult(self.__dict__["_GetCalcArguments"](byref(arg_ppVACalcObjectCollection.COM_val)))
            return arg_ppVACalcObjectCollection.python_val

    @property
    def InlineFunc(self) -> str:
        """The expression to be applied as a function."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInlineFunc"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InlineFunc.setter
    def InlineFunc(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInlineFunc"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{42A2EAD1-9982-4895-9637-4C83524F2A02}", IAgVAStateCalcScript)
agcls.AgTypeNameMap["IAgVAStateCalcScript"] = IAgVAStateCalcScript
__all__.append("IAgVAStateCalcScript")

class IAgVAStateCalcCd(object):
    """Properties for a Cd calculation object."""
    _uuid = "{18430B84-59EA-4D47-84B4-E7D5589F1931}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCd._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCd from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCd = agcom.GUID(IAgVAStateCalcCd._uuid)
        vtable_offset_local = IAgVAStateCalcCd._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCd.__dict__ and type(IAgVAStateCalcCd.__dict__[attrname]) == property:
            return IAgVAStateCalcCd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCd.")
    

agcls.AgClassCatalog.add_catalog_entry("{18430B84-59EA-4D47-84B4-E7D5589F1931}", IAgVAStateCalcCd)
agcls.AgTypeNameMap["IAgVAStateCalcCd"] = IAgVAStateCalcCd
__all__.append("IAgVAStateCalcCd")

class IAgVAStateCalcCr(object):
    """Properties for a Cr calculation object."""
    _uuid = "{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCr._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCr from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCr = agcom.GUID(IAgVAStateCalcCr._uuid)
        vtable_offset_local = IAgVAStateCalcCr._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCr.__dict__ and type(IAgVAStateCalcCr.__dict__[attrname]) == property:
            return IAgVAStateCalcCr.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCr.")
    

agcls.AgClassCatalog.add_catalog_entry("{BC4AD651-BFCA-4E69-8409-54BB0880F9E6}", IAgVAStateCalcCr)
agcls.AgTypeNameMap["IAgVAStateCalcCr"] = IAgVAStateCalcCr
__all__.append("IAgVAStateCalcCr")

class IAgVAStateCalcDragArea(object):
    """Properties for a DragArea calculation object. CAgAsStateCalcDragArea"""
    _uuid = "{0D264D3F-4409-4CF7-95AD-0129F85F2A72}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDragArea._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDragArea from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDragArea = agcom.GUID(IAgVAStateCalcDragArea._uuid)
        vtable_offset_local = IAgVAStateCalcDragArea._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDragArea.__dict__ and type(IAgVAStateCalcDragArea.__dict__[attrname]) == property:
            return IAgVAStateCalcDragArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDragArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{0D264D3F-4409-4CF7-95AD-0129F85F2A72}", IAgVAStateCalcDragArea)
agcls.AgTypeNameMap["IAgVAStateCalcDragArea"] = IAgVAStateCalcDragArea
__all__.append("IAgVAStateCalcDragArea")

class IAgVAStateCalcRadiationPressureArea(object):
    """Properties for a RadPressureArea calculation object."""
    _uuid = "{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRadiationPressureArea._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadiationPressureArea from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRadiationPressureArea = agcom.GUID(IAgVAStateCalcRadiationPressureArea._uuid)
        vtable_offset_local = IAgVAStateCalcRadiationPressureArea._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadiationPressureArea.__dict__ and type(IAgVAStateCalcRadiationPressureArea.__dict__[attrname]) == property:
            return IAgVAStateCalcRadiationPressureArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadiationPressureArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{F6C33B19-2B4F-4DBB-8CA0-B3E8B971BC49}", IAgVAStateCalcRadiationPressureArea)
agcls.AgTypeNameMap["IAgVAStateCalcRadiationPressureArea"] = IAgVAStateCalcRadiationPressureArea
__all__.append("IAgVAStateCalcRadiationPressureArea")

class IAgVAStateCalcRadiationPressureCoefficient(object):
    """Properties for a RadiationPressureCoefficient calculation object."""
    _uuid = "{9AE54040-18D2-46FC-A12C-C03BDA65FE22}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRadiationPressureCoefficient._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRadiationPressureCoefficient from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRadiationPressureCoefficient = agcom.GUID(IAgVAStateCalcRadiationPressureCoefficient._uuid)
        vtable_offset_local = IAgVAStateCalcRadiationPressureCoefficient._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRadiationPressureCoefficient.__dict__ and type(IAgVAStateCalcRadiationPressureCoefficient.__dict__[attrname]) == property:
            return IAgVAStateCalcRadiationPressureCoefficient.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRadiationPressureCoefficient.")
    

agcls.AgClassCatalog.add_catalog_entry("{9AE54040-18D2-46FC-A12C-C03BDA65FE22}", IAgVAStateCalcRadiationPressureCoefficient)
agcls.AgTypeNameMap["IAgVAStateCalcRadiationPressureCoefficient"] = IAgVAStateCalcRadiationPressureCoefficient
__all__.append("IAgVAStateCalcRadiationPressureCoefficient")

class IAgVAStateCalcSRPArea(object):
    """Properties for an SRPArea calculation object."""
    _uuid = "{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSRPArea._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSRPArea from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSRPArea = agcom.GUID(IAgVAStateCalcSRPArea._uuid)
        vtable_offset_local = IAgVAStateCalcSRPArea._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSRPArea.__dict__ and type(IAgVAStateCalcSRPArea.__dict__[attrname]) == property:
            return IAgVAStateCalcSRPArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSRPArea.")
    

agcls.AgClassCatalog.add_catalog_entry("{776A4C17-4D73-4ED0-A564-E9BD0D1788EC}", IAgVAStateCalcSRPArea)
agcls.AgTypeNameMap["IAgVAStateCalcSRPArea"] = IAgVAStateCalcSRPArea
__all__.append("IAgVAStateCalcSRPArea")

class IAgVAStateCalcCosOfVerticalFPA(object):
    """Properties for a Cosine of Vertical FPA calculation object."""
    _uuid = "{D2C32FFB-6C5C-46E8-B386-2E69262118C8}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCosOfVerticalFPA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCosOfVerticalFPA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCosOfVerticalFPA = agcom.GUID(IAgVAStateCalcCosOfVerticalFPA._uuid)
        vtable_offset_local = IAgVAStateCalcCosOfVerticalFPA._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCosOfVerticalFPA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCosOfVerticalFPA, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCosOfVerticalFPA.__dict__ and type(IAgVAStateCalcCosOfVerticalFPA.__dict__[attrname]) == property:
            return IAgVAStateCalcCosOfVerticalFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCosOfVerticalFPA.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D2C32FFB-6C5C-46E8-B386-2E69262118C8}", IAgVAStateCalcCosOfVerticalFPA)
agcls.AgTypeNameMap["IAgVAStateCalcCosOfVerticalFPA"] = IAgVAStateCalcCosOfVerticalFPA
__all__.append("IAgVAStateCalcCosOfVerticalFPA")

class IAgVAStateCalcDec(object):
    """Properties for a Declination calculation object."""
    _uuid = "{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDec = agcom.GUID(IAgVAStateCalcDec._uuid)
        vtable_offset_local = IAgVAStateCalcDec._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDec, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDec, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDec.__dict__ and type(IAgVAStateCalcDec.__dict__[attrname]) == property:
            return IAgVAStateCalcDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDec.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B3277FB5-1B7A-4A02-91B1-F6682F29CB87}", IAgVAStateCalcDec)
agcls.AgTypeNameMap["IAgVAStateCalcDec"] = IAgVAStateCalcDec
__all__.append("IAgVAStateCalcDec")

class IAgVAStateCalcFPA(object):
    """Properties for a Flight Path Angle calculation object."""
    _uuid = "{0A7406E7-049A-4054-A1FE-3E86D1998733}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcFPA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcFPA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcFPA = agcom.GUID(IAgVAStateCalcFPA._uuid)
        vtable_offset_local = IAgVAStateCalcFPA._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcFPA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcFPA, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcFPA.__dict__ and type(IAgVAStateCalcFPA.__dict__[attrname]) == property:
            return IAgVAStateCalcFPA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcFPA.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0A7406E7-049A-4054-A1FE-3E86D1998733}", IAgVAStateCalcFPA)
agcls.AgTypeNameMap["IAgVAStateCalcFPA"] = IAgVAStateCalcFPA
__all__.append("IAgVAStateCalcFPA")

class IAgVAStateCalcRMag(object):
    """Properties for an R Mag calculation object. AsStateCalcRMag"""
    _uuid = "{3E6FAE70-AA94-4036-9FBA-75954E96D759}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetReferencePointName"] = _raise_uninitialized_error
        self.__dict__["_SetReferencePointName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRMag._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRMag from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRMag = agcom.GUID(IAgVAStateCalcRMag._uuid)
        vtable_offset_local = IAgVAStateCalcRMag._vtable_offset - 1
        self.__dict__["_GetReferencePointName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRMag, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetReferencePointName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRMag, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRMag.__dict__ and type(IAgVAStateCalcRMag.__dict__[attrname]) == property:
            return IAgVAStateCalcRMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRMag.")
    
    @property
    def ReferencePointName(self) -> str:
        """Reference point used for calculation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferencePointName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferencePointName.setter
    def ReferencePointName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferencePointName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3E6FAE70-AA94-4036-9FBA-75954E96D759}", IAgVAStateCalcRMag)
agcls.AgTypeNameMap["IAgVAStateCalcRMag"] = IAgVAStateCalcRMag
__all__.append("IAgVAStateCalcRMag")

class IAgVAStateCalcRA(object):
    """Properties for a Right Asc calculation object."""
    _uuid = "{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRA = agcom.GUID(IAgVAStateCalcRA._uuid)
        vtable_offset_local = IAgVAStateCalcRA._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRA, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRA.__dict__ and type(IAgVAStateCalcRA.__dict__[attrname]) == property:
            return IAgVAStateCalcRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRA.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3D404DD1-E609-4CA0-87BE-3D9EDD9A7BCE}", IAgVAStateCalcRA)
agcls.AgTypeNameMap["IAgVAStateCalcRA"] = IAgVAStateCalcRA
__all__.append("IAgVAStateCalcRA")

class IAgVAStateCalcVMag(object):
    """Properties for a V Mag calculation object."""
    _uuid = "{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVMag._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVMag from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVMag = agcom.GUID(IAgVAStateCalcVMag._uuid)
        vtable_offset_local = IAgVAStateCalcVMag._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVMag, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVMag, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVMag.__dict__ and type(IAgVAStateCalcVMag.__dict__[attrname]) == property:
            return IAgVAStateCalcVMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVMag.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{6795C6E5-3D87-42A9-A40F-DAFEDA08235B}", IAgVAStateCalcVMag)
agcls.AgTypeNameMap["IAgVAStateCalcVMag"] = IAgVAStateCalcVMag
__all__.append("IAgVAStateCalcVMag")

class IAgVAStateCalcVelAz(object):
    """Properties for a Velocity Azimuth calculation object."""
    _uuid = "{5B86F143-59CB-4014-A920-7F46613F2FB5}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVelAz._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVelAz from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVelAz = agcom.GUID(IAgVAStateCalcVelAz._uuid)
        vtable_offset_local = IAgVAStateCalcVelAz._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelAz, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVelAz, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVelAz.__dict__ and type(IAgVAStateCalcVelAz.__dict__[attrname]) == property:
            return IAgVAStateCalcVelAz.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVelAz.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5B86F143-59CB-4014-A920-7F46613F2FB5}", IAgVAStateCalcVelAz)
agcls.AgTypeNameMap["IAgVAStateCalcVelAz"] = IAgVAStateCalcVelAz
__all__.append("IAgVAStateCalcVelAz")

class IAgVAStateCalcC3Energy(object):
    """Properties for a C3 Energy calculation object."""
    _uuid = "{23937635-E460-428B-90CC-2EAA1C51870B}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetElementType"] = _raise_uninitialized_error
        self.__dict__["_SetElementType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcC3Energy._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcC3Energy from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcC3Energy = agcom.GUID(IAgVAStateCalcC3Energy._uuid)
        vtable_offset_local = IAgVAStateCalcC3Energy._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcC3Energy, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcC3Energy, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcC3Energy, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetElementType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcC3Energy, vtable_offset_local+4, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcC3Energy.__dict__ and type(IAgVAStateCalcC3Energy.__dict__[attrname]) == property:
            return IAgVAStateCalcC3Energy.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcC3Energy.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ElementType(self) -> "AgEVACalcObjectElem":
        """The element type - osculating or a mean type."""
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetElementType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ElementType.setter
    def ElementType(self, inVal:"AgEVACalcObjectElem") -> None:
        with agmarshall.AgEnum_arg(AgEVACalcObjectElem, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetElementType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{23937635-E460-428B-90CC-2EAA1C51870B}", IAgVAStateCalcC3Energy)
agcls.AgTypeNameMap["IAgVAStateCalcC3Energy"] = IAgVAStateCalcC3Energy
__all__.append("IAgVAStateCalcC3Energy")

class IAgVAStateCalcInAsympDec(object):
    """Properties for an Incoming Asymptote Dec calculation object."""
    _uuid = "{BE07A06D-B79A-45C7-A460-A2D22467F1CF}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInAsympDec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInAsympDec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInAsympDec = agcom.GUID(IAgVAStateCalcInAsympDec._uuid)
        vtable_offset_local = IAgVAStateCalcInAsympDec._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInAsympDec, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInAsympDec, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInAsympDec.__dict__ and type(IAgVAStateCalcInAsympDec.__dict__[attrname]) == property:
            return IAgVAStateCalcInAsympDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInAsympDec.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BE07A06D-B79A-45C7-A460-A2D22467F1CF}", IAgVAStateCalcInAsympDec)
agcls.AgTypeNameMap["IAgVAStateCalcInAsympDec"] = IAgVAStateCalcInAsympDec
__all__.append("IAgVAStateCalcInAsympDec")

class IAgVAStateCalcInAsympRA(object):
    """Properties for a Incoming Asymptote RA calculation object."""
    _uuid = "{732CE68C-1443-4C38-A037-BD228DD1DD50}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInAsympRA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInAsympRA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInAsympRA = agcom.GUID(IAgVAStateCalcInAsympRA._uuid)
        vtable_offset_local = IAgVAStateCalcInAsympRA._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInAsympRA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInAsympRA, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInAsympRA.__dict__ and type(IAgVAStateCalcInAsympRA.__dict__[attrname]) == property:
            return IAgVAStateCalcInAsympRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInAsympRA.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{732CE68C-1443-4C38-A037-BD228DD1DD50}", IAgVAStateCalcInAsympRA)
agcls.AgTypeNameMap["IAgVAStateCalcInAsympRA"] = IAgVAStateCalcInAsympRA
__all__.append("IAgVAStateCalcInAsympRA")

class IAgVAStateCalcInVelAzAtPeriapsis(object):
    """Properties for an Incoming Vel Az at Periapsis calculation object."""
    _uuid = "{10C8047E-4366-4951-A479-BEB44FE74322}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcInVelAzAtPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcInVelAzAtPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcInVelAzAtPeriapsis = agcom.GUID(IAgVAStateCalcInVelAzAtPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcInVelAzAtPeriapsis._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInVelAzAtPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcInVelAzAtPeriapsis, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcInVelAzAtPeriapsis.__dict__ and type(IAgVAStateCalcInVelAzAtPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcInVelAzAtPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcInVelAzAtPeriapsis.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{10C8047E-4366-4951-A479-BEB44FE74322}", IAgVAStateCalcInVelAzAtPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcInVelAzAtPeriapsis"] = IAgVAStateCalcInVelAzAtPeriapsis
__all__.append("IAgVAStateCalcInVelAzAtPeriapsis")

class IAgVAStateCalcOutAsympDec(object):
    """Properties for a Outgoing Asymptote Dec calculation object."""
    _uuid = "{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOutAsympDec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutAsympDec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOutAsympDec = agcom.GUID(IAgVAStateCalcOutAsympDec._uuid)
        vtable_offset_local = IAgVAStateCalcOutAsympDec._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutAsympDec, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutAsympDec, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutAsympDec.__dict__ and type(IAgVAStateCalcOutAsympDec.__dict__[attrname]) == property:
            return IAgVAStateCalcOutAsympDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutAsympDec.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{0DB1FF5A-2DA1-4472-A3DF-52B52989E27B}", IAgVAStateCalcOutAsympDec)
agcls.AgTypeNameMap["IAgVAStateCalcOutAsympDec"] = IAgVAStateCalcOutAsympDec
__all__.append("IAgVAStateCalcOutAsympDec")

class IAgVAStateCalcOutAsympRA(object):
    """Properties for a Outgoing Asymptote RA calculation object."""
    _uuid = "{F2386148-5F54-40D2-91DD-322B912712B3}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOutAsympRA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutAsympRA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOutAsympRA = agcom.GUID(IAgVAStateCalcOutAsympRA._uuid)
        vtable_offset_local = IAgVAStateCalcOutAsympRA._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutAsympRA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutAsympRA, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutAsympRA.__dict__ and type(IAgVAStateCalcOutAsympRA.__dict__[attrname]) == property:
            return IAgVAStateCalcOutAsympRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutAsympRA.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{F2386148-5F54-40D2-91DD-322B912712B3}", IAgVAStateCalcOutAsympRA)
agcls.AgTypeNameMap["IAgVAStateCalcOutAsympRA"] = IAgVAStateCalcOutAsympRA
__all__.append("IAgVAStateCalcOutAsympRA")

class IAgVAStateCalcOutVelAzAtPeriapsis(object):
    """Properties for a Outgoing Vel Az at Periapsis calculation object."""
    _uuid = "{F908643D-9C89-4EDF-B45F-948B9303F260}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOutVelAzAtPeriapsis._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOutVelAzAtPeriapsis from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOutVelAzAtPeriapsis = agcom.GUID(IAgVAStateCalcOutVelAzAtPeriapsis._uuid)
        vtable_offset_local = IAgVAStateCalcOutVelAzAtPeriapsis._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutVelAzAtPeriapsis, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOutVelAzAtPeriapsis, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOutVelAzAtPeriapsis.__dict__ and type(IAgVAStateCalcOutVelAzAtPeriapsis.__dict__[attrname]) == property:
            return IAgVAStateCalcOutVelAzAtPeriapsis.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOutVelAzAtPeriapsis.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{F908643D-9C89-4EDF-B45F-948B9303F260}", IAgVAStateCalcOutVelAzAtPeriapsis)
agcls.AgTypeNameMap["IAgVAStateCalcOutVelAzAtPeriapsis"] = IAgVAStateCalcOutVelAzAtPeriapsis
__all__.append("IAgVAStateCalcOutVelAzAtPeriapsis")

class IAgVAStateCalcDuration(object):
    """Properties for a Duration calculation object."""
    _uuid = "{429E860D-8706-4C30-9F40-B0113E00BAF8}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDuration._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDuration from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDuration = agcom.GUID(IAgVAStateCalcDuration._uuid)
        vtable_offset_local = IAgVAStateCalcDuration._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDuration.__dict__ and type(IAgVAStateCalcDuration.__dict__[attrname]) == property:
            return IAgVAStateCalcDuration.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDuration.")
    

agcls.AgClassCatalog.add_catalog_entry("{429E860D-8706-4C30-9F40-B0113E00BAF8}", IAgVAStateCalcDuration)
agcls.AgTypeNameMap["IAgVAStateCalcDuration"] = IAgVAStateCalcDuration
__all__.append("IAgVAStateCalcDuration")

class IAgVAStateCalcUserValue(object):
    """Interface for CAgAsStateCalcUserValue"""
    _uuid = "{BB517244-9226-45E2-9048-9D4E289BA920}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetVariableName"] = _raise_uninitialized_error
        self.__dict__["_SetVariableName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcUserValue._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcUserValue from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcUserValue = agcom.GUID(IAgVAStateCalcUserValue._uuid)
        vtable_offset_local = IAgVAStateCalcUserValue._vtable_offset - 1
        self.__dict__["_GetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcUserValue, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcUserValue, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcUserValue.__dict__ and type(IAgVAStateCalcUserValue.__dict__[attrname]) == property:
            return IAgVAStateCalcUserValue.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcUserValue.")
    
    @property
    def VariableName(self) -> str:
        """Name of the user variable"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableName.setter
    def VariableName(self, inVal:str) -> None:
        """Name of the user variable"""
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BB517244-9226-45E2-9048-9D4E289BA920}", IAgVAStateCalcUserValue)
agcls.AgTypeNameMap["IAgVAStateCalcUserValue"] = IAgVAStateCalcUserValue
__all__.append("IAgVAStateCalcUserValue")

class IAgVAStateCalcCrdnAngle(object):
    """Properties for an Vector Geometry Tool Angle calculation object."""
    _uuid = "{7EC926A3-7ED6-4091-9E74-EBA5700075A5}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAngleName"] = _raise_uninitialized_error
        self.__dict__["_SetAngleName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcCrdnAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcCrdnAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcCrdnAngle = agcom.GUID(IAgVAStateCalcCrdnAngle._uuid)
        vtable_offset_local = IAgVAStateCalcCrdnAngle._vtable_offset - 1
        self.__dict__["_GetAngleName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCrdnAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetAngleName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcCrdnAngle, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcCrdnAngle.__dict__ and type(IAgVAStateCalcCrdnAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcCrdnAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcCrdnAngle.")
    
    @property
    def AngleName(self) -> str:
        """The angle."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAngleName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AngleName.setter
    def AngleName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAngleName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7EC926A3-7ED6-4091-9E74-EBA5700075A5}", IAgVAStateCalcCrdnAngle)
agcls.AgTypeNameMap["IAgVAStateCalcCrdnAngle"] = IAgVAStateCalcCrdnAngle
__all__.append("IAgVAStateCalcCrdnAngle")

class IAgVAStateCalcAngle(object):
    """Properties for an Angle Between Vectors calculation object."""
    _uuid = "{E703F5BA-3C07-407B-8BE6-5361172E97FF}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetVector1Name"] = _raise_uninitialized_error
        self.__dict__["_SetVector1Name"] = _raise_uninitialized_error
        self.__dict__["_GetVector2Name"] = _raise_uninitialized_error
        self.__dict__["_SetVector2Name"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcAngle._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcAngle from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcAngle = agcom.GUID(IAgVAStateCalcAngle._uuid)
        vtable_offset_local = IAgVAStateCalcAngle._vtable_offset - 1
        self.__dict__["_GetVector1Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAngle, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetVector1Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAngle, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVector2Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAngle, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVector2Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcAngle, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcAngle.__dict__ and type(IAgVAStateCalcAngle.__dict__[attrname]) == property:
            return IAgVAStateCalcAngle.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcAngle.")
    
    @property
    def Vector1Name(self) -> str:
        """The first vector of the angle."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVector1Name"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vector1Name.setter
    def Vector1Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVector1Name"](arg_inVal.COM_val))

    @property
    def Vector2Name(self) -> str:
        """The second vector of the angle."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVector2Name"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vector2Name.setter
    def Vector2Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVector2Name"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E703F5BA-3C07-407B-8BE6-5361172E97FF}", IAgVAStateCalcAngle)
agcls.AgTypeNameMap["IAgVAStateCalcAngle"] = IAgVAStateCalcAngle
__all__.append("IAgVAStateCalcAngle")

class IAgVAStateCalcDotProduct(object):
    """Properties for a Dot Product calculation object."""
    _uuid = "{8B3C8283-79EC-48D1-BFBD-66775AA10803}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetVector1Name"] = _raise_uninitialized_error
        self.__dict__["_SetVector1Name"] = _raise_uninitialized_error
        self.__dict__["_GetVector2Name"] = _raise_uninitialized_error
        self.__dict__["_SetVector2Name"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDotProduct._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDotProduct from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDotProduct = agcom.GUID(IAgVAStateCalcDotProduct._uuid)
        vtable_offset_local = IAgVAStateCalcDotProduct._vtable_offset - 1
        self.__dict__["_GetVector1Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDotProduct, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetVector1Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDotProduct, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVector2Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDotProduct, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVector2Name"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDotProduct, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDotProduct.__dict__ and type(IAgVAStateCalcDotProduct.__dict__[attrname]) == property:
            return IAgVAStateCalcDotProduct.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDotProduct.")
    
    @property
    def Vector1Name(self) -> str:
        """The first vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVector1Name"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vector1Name.setter
    def Vector1Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVector1Name"](arg_inVal.COM_val))

    @property
    def Vector2Name(self) -> str:
        """The second vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVector2Name"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Vector2Name.setter
    def Vector2Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVector2Name"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8B3C8283-79EC-48D1-BFBD-66775AA10803}", IAgVAStateCalcDotProduct)
agcls.AgTypeNameMap["IAgVAStateCalcDotProduct"] = IAgVAStateCalcDotProduct
__all__.append("IAgVAStateCalcDotProduct")

class IAgVAStateCalcVectorDec(object):
    """Properties for a Vector Dec calculation object."""
    _uuid = "{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorDec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorDec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorDec = agcom.GUID(IAgVAStateCalcVectorDec._uuid)
        vtable_offset_local = IAgVAStateCalcVectorDec._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorDec, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorDec, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorDec, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorDec, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorDec.__dict__ and type(IAgVAStateCalcVectorDec.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorDec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorDec.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))

    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5709E392-CEF3-4D83-BC2C-FD3F67EE363F}", IAgVAStateCalcVectorDec)
agcls.AgTypeNameMap["IAgVAStateCalcVectorDec"] = IAgVAStateCalcVectorDec
__all__.append("IAgVAStateCalcVectorDec")

class IAgVAStateCalcVectorMag(object):
    """Properties for a Vector Mag calculation object."""
    _uuid = "{522AF5A3-02FE-49E3-931A-3E8234EF896F}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorMag._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorMag from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorMag = agcom.GUID(IAgVAStateCalcVectorMag._uuid)
        vtable_offset_local = IAgVAStateCalcVectorMag._vtable_offset - 1
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorMag, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorMag, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorMag, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorMag, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorMag.__dict__ and type(IAgVAStateCalcVectorMag.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorMag.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorMag.")
    
    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{522AF5A3-02FE-49E3-931A-3E8234EF896F}", IAgVAStateCalcVectorMag)
agcls.AgTypeNameMap["IAgVAStateCalcVectorMag"] = IAgVAStateCalcVectorMag
__all__.append("IAgVAStateCalcVectorMag")

class IAgVAStateCalcVectorRA(object):
    """Properties for a Vector RA calculation object."""
    _uuid = "{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordAxesName"] = _raise_uninitialized_error
        self.__dict__["_GetVectorName"] = _raise_uninitialized_error
        self.__dict__["_SetVectorName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcVectorRA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcVectorRA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcVectorRA = agcom.GUID(IAgVAStateCalcVectorRA._uuid)
        vtable_offset_local = IAgVAStateCalcVectorRA._vtable_offset - 1
        self.__dict__["_GetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorRA, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordAxesName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorRA, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorRA, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetVectorName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcVectorRA, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcVectorRA.__dict__ and type(IAgVAStateCalcVectorRA.__dict__[attrname]) == property:
            return IAgVAStateCalcVectorRA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcVectorRA.")
    
    @property
    def CoordAxesName(self) -> str:
        """The coordinate axes."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordAxesName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordAxesName.setter
    def CoordAxesName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordAxesName"](arg_inVal.COM_val))

    @property
    def VectorName(self) -> str:
        """The vector."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVectorName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VectorName.setter
    def VectorName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVectorName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E6AF6E11-F9BC-46E0-83C0-ACD79B45B4AD}", IAgVAStateCalcVectorRA)
agcls.AgTypeNameMap["IAgVAStateCalcVectorRA"] = IAgVAStateCalcVectorRA
__all__.append("IAgVAStateCalcVectorRA")

class IAgVAStateCalcOnePtAccess(object):
    """Properties for an Access calculation object."""
    _uuid = "{EE091E20-3104-48F9-8163-29272A8B81C8}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAberrationType"] = _raise_uninitialized_error
        self.__dict__["_SetAberrationType"] = _raise_uninitialized_error
        self.__dict__["_SetBaseSelection"] = _raise_uninitialized_error
        self.__dict__["_GetBaseSelectionType"] = _raise_uninitialized_error
        self.__dict__["_GetBaseSelection"] = _raise_uninitialized_error
        self.__dict__["_GetClockHost"] = _raise_uninitialized_error
        self.__dict__["_SetClockHost"] = _raise_uninitialized_error
        self.__dict__["_GetSignalSense"] = _raise_uninitialized_error
        self.__dict__["_SetSignalSense"] = _raise_uninitialized_error
        self.__dict__["_GetTargetObject"] = _raise_uninitialized_error
        self.__dict__["_GetTimeDelayConvergenceTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTimeDelayConvergenceTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetUseLightTimeDelay"] = _raise_uninitialized_error
        self.__dict__["_SetUseLightTimeDelay"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcOnePtAccess._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcOnePtAccess from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcOnePtAccess = agcom.GUID(IAgVAStateCalcOnePtAccess._uuid)
        vtable_offset_local = IAgVAStateCalcOnePtAccess._vtable_offset - 1
        self.__dict__["_GetAberrationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetAberrationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_SetBaseSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+3, agcom.LONG)
        self.__dict__["_GetBaseSelectionType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+4, POINTER(agcom.LONG))
        self.__dict__["_GetBaseSelection"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetClockHost"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetClockHost"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetSignalSense"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetSignalSense"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetTargetObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetTimeDelayConvergenceTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTimeDelayConvergenceTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetUseLightTimeDelay"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseLightTimeDelay"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcOnePtAccess, vtable_offset_local+14, agcom.VARIANT_BOOL)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcOnePtAccess.__dict__ and type(IAgVAStateCalcOnePtAccess.__dict__[attrname]) == property:
            return IAgVAStateCalcOnePtAccess.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcOnePtAccess.")
    
    @property
    def AberrationType(self) -> "AgEAberrationType":
        """The type of aberration to use, if light time delay is applied."""
        with agmarshall.AgEnum_arg(AgEAberrationType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAberrationType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AberrationType.setter
    def AberrationType(self, inVal:"AgEAberrationType") -> None:
        with agmarshall.AgEnum_arg(AgEAberrationType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAberrationType"](arg_inVal.COM_val))

    def SetBaseSelection(self, selection:"AgEVABaseSelection") -> None:
        """Base Selection"""
        with agmarshall.AgEnum_arg(AgEVABaseSelection, selection) as arg_selection:
            agcls.evaluate_hresult(self.__dict__["_SetBaseSelection"](arg_selection.COM_val))

    @property
    def BaseSelectionType(self) -> "AgEVABaseSelection":
        """The base selection type."""
        with agmarshall.AgEnum_arg(AgEVABaseSelection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseSelectionType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def BaseSelection(self) -> "IAgLinkToObject":
        """The base selection object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetBaseSelection"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def ClockHost(self) -> "AgEIvClockHost":
        """The object whose location is associated with time."""
        with agmarshall.AgEnum_arg(AgEIvClockHost) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetClockHost"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ClockHost.setter
    def ClockHost(self, inVal:"AgEIvClockHost") -> None:
        with agmarshall.AgEnum_arg(AgEIvClockHost, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetClockHost"](arg_inVal.COM_val))

    @property
    def SignalSense(self) -> "AgEIvTimeSense":
        """Sense of the signal at the base object."""
        with agmarshall.AgEnum_arg(AgEIvTimeSense) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSignalSense"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SignalSense.setter
    def SignalSense(self, inVal:"AgEIvTimeSense") -> None:
        with agmarshall.AgEnum_arg(AgEIvTimeSense, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSignalSense"](arg_inVal.COM_val))

    @property
    def TargetObject(self) -> "IAgLinkToObject":
        """The target object."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTargetObject"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def TimeDelayConvergenceTolerance(self) -> float:
        """The time delay convergence tolerance, if light time delay is applied. Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTimeDelayConvergenceTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TimeDelayConvergenceTolerance.setter
    def TimeDelayConvergenceTolerance(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTimeDelayConvergenceTolerance"](arg_inVal.COM_val))

    @property
    def UseLightTimeDelay(self) -> bool:
        """Tue if light time delay is applied."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseLightTimeDelay"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseLightTimeDelay.setter
    def UseLightTimeDelay(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseLightTimeDelay"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{EE091E20-3104-48F9-8163-29272A8B81C8}", IAgVAStateCalcOnePtAccess)
agcls.AgTypeNameMap["IAgVAStateCalcOnePtAccess"] = IAgVAStateCalcOnePtAccess
__all__.append("IAgVAStateCalcOnePtAccess")

class IAgVAStateCalcDifferenceAcrossSegmentsOtherSat(object):
    """Properties for a Difference Across Segments Across Satellites calculation object."""
    _uuid = "{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_GetDifferenceOrder"] = _raise_uninitialized_error
        self.__dict__["_SetDifferenceOrder"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDifferenceAcrossSegmentsOtherSat from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat = agcom.GUID(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._uuid)
        vtable_offset_local = IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetDifferenceOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetReferenceSat"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDifferenceAcrossSegmentsOtherSat, vtable_offset_local+9, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__ and type(IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__[attrname]) == property:
            return IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))

    @property
    def DifferenceOrder(self) -> "AgEVASegmentDifferenceOrder":
        """The order of the difference calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDifferenceOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DifferenceOrder.setter
    def DifferenceOrder(self, inVal:"AgEVASegmentDifferenceOrder") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentDifferenceOrder, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDifferenceOrder"](arg_inVal.COM_val))

    @property
    def ReferenceSat(self) -> "IAgLinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSat"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{C5C0E056-EC28-4D88-A55F-6BA6D2F2976E}", IAgVAStateCalcDifferenceAcrossSegmentsOtherSat)
agcls.AgTypeNameMap["IAgVAStateCalcDifferenceAcrossSegmentsOtherSat"] = IAgVAStateCalcDifferenceAcrossSegmentsOtherSat
__all__.append("IAgVAStateCalcDifferenceAcrossSegmentsOtherSat")

class IAgVAStateCalcValueAtSegmentOtherSat(object):
    """Properties for a Value At Segment Across Satellites calculation object."""
    _uuid = "{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}"
    _num_methods = 7
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_SetOtherSegmentName"] = _raise_uninitialized_error
        self.__dict__["_GetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_SetSegmentStateToUse"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceSat"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcValueAtSegmentOtherSat._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcValueAtSegmentOtherSat from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcValueAtSegmentOtherSat = agcom.GUID(IAgVAStateCalcValueAtSegmentOtherSat._uuid)
        vtable_offset_local = IAgVAStateCalcValueAtSegmentOtherSat._vtable_offset - 1
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetOtherSegmentName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSegmentStateToUse"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetReferenceSat"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcValueAtSegmentOtherSat, vtable_offset_local+7, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcValueAtSegmentOtherSat.__dict__ and type(IAgVAStateCalcValueAtSegmentOtherSat.__dict__[attrname]) == property:
            return IAgVAStateCalcValueAtSegmentOtherSat.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcValueAtSegmentOtherSat.")
    
    @property
    def CalcObjectName(self) -> str:
        """The calculation object."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def OtherSegmentName(self) -> str:
        """The segment to be compared against."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOtherSegmentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OtherSegmentName.setter
    def OtherSegmentName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOtherSegmentName"](arg_inVal.COM_val))

    @property
    def SegmentStateToUse(self) -> "AgEVASegmentState":
        """The segment state to use in the calculation."""
        with agmarshall.AgEnum_arg(AgEVASegmentState) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSegmentStateToUse"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SegmentStateToUse.setter
    def SegmentStateToUse(self, inVal:"AgEVASegmentState") -> None:
        with agmarshall.AgEnum_arg(AgEVASegmentState, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSegmentStateToUse"](arg_inVal.COM_val))

    @property
    def ReferenceSat(self) -> "IAgLinkToObject":
        """The Astrogator satellite on which the segment to be compared exists."""
        with agmarshall.AgInterface_out_arg() as arg_ppLinkToObject:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceSat"](byref(arg_ppLinkToObject.COM_val)))
            return arg_ppLinkToObject.python_val


agcls.AgClassCatalog.add_catalog_entry("{1F7F3653-10FD-4377-B8FB-8C42DABDACC3}", IAgVAStateCalcValueAtSegmentOtherSat)
agcls.AgTypeNameMap["IAgVAStateCalcValueAtSegmentOtherSat"] = IAgVAStateCalcValueAtSegmentOtherSat
__all__.append("IAgVAStateCalcValueAtSegmentOtherSat")

class IAgVAStateCalcRARate(object):
    """Properties for a Right Ascension Rate calculation object"""
    _uuid = "{69DDD91C-168B-47BD-9977-EB8431B4C112}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcRARate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcRARate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcRARate = agcom.GUID(IAgVAStateCalcRARate._uuid)
        vtable_offset_local = IAgVAStateCalcRARate._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRARate, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcRARate, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcRARate.__dict__ and type(IAgVAStateCalcRARate.__dict__[attrname]) == property:
            return IAgVAStateCalcRARate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcRARate.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{69DDD91C-168B-47BD-9977-EB8431B4C112}", IAgVAStateCalcRARate)
agcls.AgTypeNameMap["IAgVAStateCalcRARate"] = IAgVAStateCalcRARate
__all__.append("IAgVAStateCalcRARate")

class IAgVAStateCalcDecRate(object):
    """Properties for a Declination Rate calculation object"""
    _uuid = "{EE447FA6-4B21-4823-8811-E0E3C38A29E2}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCoordSystemName"] = _raise_uninitialized_error
        self.__dict__["_SetCoordSystemName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcDecRate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcDecRate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcDecRate = agcom.GUID(IAgVAStateCalcDecRate._uuid)
        vtable_offset_local = IAgVAStateCalcDecRate._vtable_offset - 1
        self.__dict__["_GetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDecRate, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCoordSystemName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcDecRate, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcDecRate.__dict__ and type(IAgVAStateCalcDecRate.__dict__[attrname]) == property:
            return IAgVAStateCalcDecRate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcDecRate.")
    
    @property
    def CoordSystemName(self) -> str:
        """The coordinate system within which the element is defined."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoordSystemName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoordSystemName.setter
    def CoordSystemName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoordSystemName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{EE447FA6-4B21-4823-8811-E0E3C38A29E2}", IAgVAStateCalcDecRate)
agcls.AgTypeNameMap["IAgVAStateCalcDecRate"] = IAgVAStateCalcDecRate
__all__.append("IAgVAStateCalcDecRate")

class IAgVAStateCalcGravitationalParameter(object):
    """Properties for a Gravitational Parameter calculation object."""
    _uuid = "{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetGravSource"] = _raise_uninitialized_error
        self.__dict__["_SetGravSource"] = _raise_uninitialized_error
        self.__dict__["_GetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_SetGravityFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcGravitationalParameter._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGravitationalParameter from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcGravitationalParameter = agcom.GUID(IAgVAStateCalcGravitationalParameter._uuid)
        vtable_offset_local = IAgVAStateCalcGravitationalParameter._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravitationalParameter, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGravitationalParameter.__dict__ and type(IAgVAStateCalcGravitationalParameter.__dict__[attrname]) == property:
            return IAgVAStateCalcGravitationalParameter.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGravitationalParameter.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def GravSource(self) -> "AgEVAGravitationalParameterSource":
        """The source for the gravitational parameter."""
        with agmarshall.AgEnum_arg(AgEVAGravitationalParameterSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravitationalParameterSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGravitationalParameterSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravSource"](arg_inVal.COM_val))

    @property
    def GravityFilename(self) -> str:
        """Source for the gravitational parameter if GravSource is set to Gravity File."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravityFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravityFilename"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1FE2F1B7-9FE8-409E-AAD8-92CC002CDED0}", IAgVAStateCalcGravitationalParameter)
agcls.AgTypeNameMap["IAgVAStateCalcGravitationalParameter"] = IAgVAStateCalcGravitationalParameter
__all__.append("IAgVAStateCalcGravitationalParameter")

class IAgVAStateCalcReferenceRadius(object):
    """Properties for a Reference Radius calculation object."""
    _uuid = "{E736A217-0B66-48F6-99FA-D338835B4D40}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceRadiusSource"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceRadiusSource"] = _raise_uninitialized_error
        self.__dict__["_GetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_SetGravityFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcReferenceRadius._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcReferenceRadius from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcReferenceRadius = agcom.GUID(IAgVAStateCalcReferenceRadius._uuid)
        vtable_offset_local = IAgVAStateCalcReferenceRadius._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetReferenceRadiusSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetReferenceRadiusSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcReferenceRadius, vtable_offset_local+6, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcReferenceRadius.__dict__ and type(IAgVAStateCalcReferenceRadius.__dict__[attrname]) == property:
            return IAgVAStateCalcReferenceRadius.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcReferenceRadius.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def ReferenceRadiusSource(self) -> "AgEVAReferenceRadiusSource":
        """The source for the reference radius."""
        with agmarshall.AgEnum_arg(AgEVAReferenceRadiusSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceRadiusSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceRadiusSource.setter
    def ReferenceRadiusSource(self, inVal:"AgEVAReferenceRadiusSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAReferenceRadiusSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceRadiusSource"](arg_inVal.COM_val))

    @property
    def GravityFilename(self) -> str:
        """Source for the reference radius if RefRadSource is set to Gravity File."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravityFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravityFilename"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E736A217-0B66-48F6-99FA-D338835B4D40}", IAgVAStateCalcReferenceRadius)
agcls.AgTypeNameMap["IAgVAStateCalcReferenceRadius"] = IAgVAStateCalcReferenceRadius
__all__.append("IAgVAStateCalcReferenceRadius")

class IAgVAStateCalcGravCoeff(object):
    """Properties for a gravity coefficient calculation object."""
    _uuid = "{057976B1-EBDA-4674-9FC0-556D7BD87599}"
    _num_methods = 12
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_SetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_GetCoefficientType"] = _raise_uninitialized_error
        self.__dict__["_SetCoefficientType"] = _raise_uninitialized_error
        self.__dict__["_GetDegree"] = _raise_uninitialized_error
        self.__dict__["_SetDegree"] = _raise_uninitialized_error
        self.__dict__["_GetOrder"] = _raise_uninitialized_error
        self.__dict__["_SetOrder"] = _raise_uninitialized_error
        self.__dict__["_GetNormalizationType"] = _raise_uninitialized_error
        self.__dict__["_SetNormalizationType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcGravCoeff._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcGravCoeff from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcGravCoeff = agcom.GUID(IAgVAStateCalcGravCoeff._uuid)
        vtable_offset_local = IAgVAStateCalcGravCoeff._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetCoefficientType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetCoefficientType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+7, POINTER(agcom.INT))
        self.__dict__["_SetDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+8, agcom.INT)
        self.__dict__["_GetOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+9, POINTER(agcom.INT))
        self.__dict__["_SetOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+10, agcom.INT)
        self.__dict__["_GetNormalizationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetNormalizationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcGravCoeff, vtable_offset_local+12, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcGravCoeff.__dict__ and type(IAgVAStateCalcGravCoeff.__dict__[attrname]) == property:
            return IAgVAStateCalcGravCoeff.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcGravCoeff.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def GravityFilename(self) -> str:
        """Source for the gravity coefficient."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravityFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravityFilename"](arg_inVal.COM_val))

    @property
    def CoefficientType(self) -> "AgEVAGravCoeffCoefficientType":
        """Coefficient type."""
        with agmarshall.AgEnum_arg(AgEVAGravCoeffCoefficientType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoefficientType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoefficientType.setter
    def CoefficientType(self, inVal:"AgEVAGravCoeffCoefficientType") -> None:
        with agmarshall.AgEnum_arg(AgEVAGravCoeffCoefficientType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoefficientType"](arg_inVal.COM_val))

    @property
    def Degree(self) -> int:
        """Degree of the coefficient."""
        with agmarshall.INT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDegree"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Degree.setter
    def Degree(self, inVal:int) -> None:
        with agmarshall.INT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDegree"](arg_inVal.COM_val))

    @property
    def Order(self) -> int:
        """Order of the coefficient."""
        with agmarshall.INT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Order.setter
    def Order(self, inVal:int) -> None:
        with agmarshall.INT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrder"](arg_inVal.COM_val))

    @property
    def NormalizationType(self) -> "AgEVAGravCoeffNormalizationType":
        """Normalization type."""
        with agmarshall.AgEnum_arg(AgEVAGravCoeffNormalizationType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNormalizationType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NormalizationType.setter
    def NormalizationType(self, inVal:"AgEVAGravCoeffNormalizationType") -> None:
        with agmarshall.AgEnum_arg(AgEVAGravCoeffNormalizationType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNormalizationType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{057976B1-EBDA-4674-9FC0-556D7BD87599}", IAgVAStateCalcGravCoeff)
agcls.AgTypeNameMap["IAgVAStateCalcGravCoeff"] = IAgVAStateCalcGravCoeff
__all__.append("IAgVAStateCalcGravCoeff")

class IAgVAStateCalcSpeedOfLight(object):
    """Properties for a Speed of Light calculation object."""
    _uuid = "{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcSpeedOfLight._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcSpeedOfLight from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcSpeedOfLight = agcom.GUID(IAgVAStateCalcSpeedOfLight._uuid)
        vtable_offset_local = IAgVAStateCalcSpeedOfLight._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcSpeedOfLight.__dict__ and type(IAgVAStateCalcSpeedOfLight.__dict__[attrname]) == property:
            return IAgVAStateCalcSpeedOfLight.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcSpeedOfLight.")
    

agcls.AgClassCatalog.add_catalog_entry("{6B7D157C-43CA-4ED4-9C3C-DF8E4ABAE4E0}", IAgVAStateCalcSpeedOfLight)
agcls.AgTypeNameMap["IAgVAStateCalcSpeedOfLight"] = IAgVAStateCalcSpeedOfLight
__all__.append("IAgVAStateCalcSpeedOfLight")

class IAgVAStateCalcPi(object):
    """Properties for a Pi calculation object."""
    _uuid = "{DDE94FB4-1751-4F38-9304-5ACC35CDC811}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcPi._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcPi from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcPi = agcom.GUID(IAgVAStateCalcPi._uuid)
        vtable_offset_local = IAgVAStateCalcPi._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcPi.__dict__ and type(IAgVAStateCalcPi.__dict__[attrname]) == property:
            return IAgVAStateCalcPi.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcPi.")
    

agcls.AgClassCatalog.add_catalog_entry("{DDE94FB4-1751-4F38-9304-5ACC35CDC811}", IAgVAStateCalcPi)
agcls.AgTypeNameMap["IAgVAStateCalcPi"] = IAgVAStateCalcPi
__all__.append("IAgVAStateCalcPi")

class IAgVAStateCalcScalar(object):
    """Properties for a Scalar calculation object."""
    _uuid = "{D792B480-CCC7-4040-BD41-A26E56DE6CA8}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetScalarName"] = _raise_uninitialized_error
        self.__dict__["_SetScalarName"] = _raise_uninitialized_error
        self.__dict__["_GetUnitDimension"] = _raise_uninitialized_error
        self.__dict__["_SetUnitDimension"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcScalar._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcScalar from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcScalar = agcom.GUID(IAgVAStateCalcScalar._uuid)
        vtable_offset_local = IAgVAStateCalcScalar._vtable_offset - 1
        self.__dict__["_GetScalarName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScalar, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetScalarName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScalar, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScalar, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetUnitDimension"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcScalar, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcScalar.__dict__ and type(IAgVAStateCalcScalar.__dict__[attrname]) == property:
            return IAgVAStateCalcScalar.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcScalar.")
    
    @property
    def ScalarName(self) -> str:
        """The scalar name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScalarName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScalarName.setter
    def ScalarName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetScalarName"](arg_inVal.COM_val))

    @property
    def UnitDimension(self) -> str:
        """The unit dimension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUnitDimension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UnitDimension.setter
    def UnitDimension(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUnitDimension"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D792B480-CCC7-4040-BD41-A26E56DE6CA8}", IAgVAStateCalcScalar)
agcls.AgTypeNameMap["IAgVAStateCalcScalar"] = IAgVAStateCalcScalar
__all__.append("IAgVAStateCalcScalar")

class IAgVAStateCalcApparentSolarTime(object):
    """Properties for an Apparent Solar Time calculation object."""
    _uuid = "{439AD289-B0FE-4596-A6AC-A29B6F98C313}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcApparentSolarTime._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcApparentSolarTime from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcApparentSolarTime = agcom.GUID(IAgVAStateCalcApparentSolarTime._uuid)
        vtable_offset_local = IAgVAStateCalcApparentSolarTime._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcApparentSolarTime, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcApparentSolarTime, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcApparentSolarTime.__dict__ and type(IAgVAStateCalcApparentSolarTime.__dict__[attrname]) == property:
            return IAgVAStateCalcApparentSolarTime.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcApparentSolarTime.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{439AD289-B0FE-4596-A6AC-A29B6F98C313}", IAgVAStateCalcApparentSolarTime)
agcls.AgTypeNameMap["IAgVAStateCalcApparentSolarTime"] = IAgVAStateCalcApparentSolarTime
__all__.append("IAgVAStateCalcApparentSolarTime")

class IAgVAStateCalcEarthMeanSolarTime(object):
    """Properties for an Earth Mean Solar Time calculation object."""
    _uuid = "{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEarthMeanSolarTime._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEarthMeanSolarTime from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEarthMeanSolarTime = agcom.GUID(IAgVAStateCalcEarthMeanSolarTime._uuid)
        vtable_offset_local = IAgVAStateCalcEarthMeanSolarTime._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEarthMeanSolarTime, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEarthMeanSolarTime, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEarthMeanSolarTime.__dict__ and type(IAgVAStateCalcEarthMeanSolarTime.__dict__[attrname]) == property:
            return IAgVAStateCalcEarthMeanSolarTime.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEarthMeanSolarTime.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{45C37D81-A752-4AA8-AC7D-7FAD78AA7763}", IAgVAStateCalcEarthMeanSolarTime)
agcls.AgTypeNameMap["IAgVAStateCalcEarthMeanSolarTime"] = IAgVAStateCalcEarthMeanSolarTime
__all__.append("IAgVAStateCalcEarthMeanSolarTime")

class IAgVAStateCalcEarthMeanLocTimeAN(object):
    """Properties for an Earth Mean Local Time of Ascending Node calculation object."""
    _uuid = "{325E3769-FB5E-4B6B-AC89-48CD5A09C528}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateCalcEarthMeanLocTimeAN._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateCalcEarthMeanLocTimeAN from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateCalcEarthMeanLocTimeAN = agcom.GUID(IAgVAStateCalcEarthMeanLocTimeAN._uuid)
        vtable_offset_local = IAgVAStateCalcEarthMeanLocTimeAN._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEarthMeanLocTimeAN, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAStateCalcEarthMeanLocTimeAN, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateCalcEarthMeanLocTimeAN.__dict__ and type(IAgVAStateCalcEarthMeanLocTimeAN.__dict__[attrname]) == property:
            return IAgVAStateCalcEarthMeanLocTimeAN.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateCalcEarthMeanLocTimeAN.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body of the component."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{325E3769-FB5E-4B6B-AC89-48CD5A09C528}", IAgVAStateCalcEarthMeanLocTimeAN)
agcls.AgTypeNameMap["IAgVAStateCalcEarthMeanLocTimeAN"] = IAgVAStateCalcEarthMeanLocTimeAN
__all__.append("IAgVAStateCalcEarthMeanLocTimeAN")

class IAgVACentralBodyCollection(object):
    """The list of central bodies."""
    _uuid = "{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}"
    _num_methods = 8
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACentralBodyCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACentralBodyCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACentralBodyCollection = agcom.GUID(IAgVACentralBodyCollection._uuid)
        vtable_offset_local = IAgVACentralBodyCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+2, POINTER(agcom.LONG))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+6, )
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+7, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBodyCollection, vtable_offset_local+8, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACentralBodyCollection.__dict__ and type(IAgVACentralBodyCollection.__dict__[attrname]) == property:
            return IAgVACentralBodyCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACentralBodyCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVACentralBody":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrCbName:typing.Any) -> "IAgVACentralBody":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrCbName) as arg_indexOrCbName, \
             agmarshall.AgInterface_out_arg() as arg_ppCentralBody:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrCbName.COM_val, byref(arg_ppCentralBody.COM_val)))
            return arg_ppCentralBody.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Iterates through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def Add(self, cbName:str) -> None:
        """Adds a central body to the collection."""
        with agmarshall.BSTR_arg(cbName) as arg_cbName:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_cbName.COM_val))

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a central body from the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Remove all central bodies from the collection."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    def GetItemByIndex(self, index:int) -> "IAgVACentralBody":
        """Retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppCentralBody:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppCentralBody.COM_val)))
            return arg_ppCentralBody.python_val

    def GetItemByName(self, cbName:str) -> "IAgVACentralBody":
        """Retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(cbName) as arg_cbName, \
             agmarshall.AgInterface_out_arg() as arg_ppCentralBody:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_cbName.COM_val, byref(arg_ppCentralBody.COM_val)))
            return arg_ppCentralBody.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{6A2BFAF1-F26A-439B-AF23-AD83B82A0D4A}", IAgVACentralBodyCollection)
agcls.AgTypeNameMap["IAgVACentralBodyCollection"] = IAgVACentralBodyCollection
__all__.append("IAgVACentralBodyCollection")

class IAgVACbEphemeris(object):
    """The central body ephemeris source."""
    _uuid = "{AE91748E-8A2D-4D9D-9C39-88017D0CB591}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemeris._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemeris from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACbEphemeris = agcom.GUID(IAgVACbEphemeris._uuid)
        vtable_offset_local = IAgVACbEphemeris._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemeris.__dict__ and type(IAgVACbEphemeris.__dict__[attrname]) == property:
            return IAgVACbEphemeris.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbEphemeris.")
    

agcls.AgClassCatalog.add_catalog_entry("{AE91748E-8A2D-4D9D-9C39-88017D0CB591}", IAgVACbEphemeris)
agcls.AgTypeNameMap["IAgVACbEphemeris"] = IAgVACbEphemeris
__all__.append("IAgVACbEphemeris")

class IAgVACbGravityModel(object):
    """Properties for a central body gravity model."""
    _uuid = "{B20E4246-ED81-4131-82AF-C76FAD7C57A8}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGravitationalParam"] = _raise_uninitialized_error
        self.__dict__["_SetGravitationalParam"] = _raise_uninitialized_error
        self.__dict__["_GetRefDistance"] = _raise_uninitialized_error
        self.__dict__["_SetRefDistance"] = _raise_uninitialized_error
        self.__dict__["_GetJ2"] = _raise_uninitialized_error
        self.__dict__["_SetJ2"] = _raise_uninitialized_error
        self.__dict__["_GetJ3"] = _raise_uninitialized_error
        self.__dict__["_SetJ3"] = _raise_uninitialized_error
        self.__dict__["_GetJ4"] = _raise_uninitialized_error
        self.__dict__["_SetJ4"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbGravityModel._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbGravityModel from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACbGravityModel = agcom.GUID(IAgVACbGravityModel._uuid)
        vtable_offset_local = IAgVACbGravityModel._vtable_offset - 1
        self.__dict__["_GetGravitationalParam"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGravitationalParam"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetRefDistance"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRefDistance"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetJ2"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetJ2"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetJ3"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetJ3"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetJ4"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetJ4"] = IAGFUNCTYPE(pUnk, IID_IAgVACbGravityModel, vtable_offset_local+10, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbGravityModel.__dict__ and type(IAgVACbGravityModel.__dict__[attrname]) == property:
            return IAgVACbGravityModel.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbGravityModel.")
    
    @property
    def GravitationalParam(self) -> float:
        """The gravitational parameter to be used for purposes of this gravity model. Uses Gravitational Param Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravitationalParam"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravitationalParam.setter
    def GravitationalParam(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravitationalParam"](arg_newVal.COM_val))

    @property
    def RefDistance(self) -> float:
        """Distance from the center of mass of the central body to its surface. Typically defaults to the Maximum Radius entered in the Shape frame of the Central Body parameters window. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRefDistance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RefDistance.setter
    def RefDistance(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRefDistance"](arg_newVal.COM_val))

    @property
    def J2(self) -> float:
        """The J2 property. Taking into account first order Earth oblateness effects. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJ2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @J2.setter
    def J2(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJ2"](arg_newVal.COM_val))

    @property
    def J3(self) -> float:
        """The J3 property. Taking into account first order longitudinal variations of the Earth's shape. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJ3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @J3.setter
    def J3(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJ3"](arg_newVal.COM_val))

    @property
    def J4(self) -> float:
        """The J4 property. Taking into account first and second order Earth oblateness effects. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJ4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @J4.setter
    def J4(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJ4"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B20E4246-ED81-4131-82AF-C76FAD7C57A8}", IAgVACbGravityModel)
agcls.AgTypeNameMap["IAgVACbGravityModel"] = IAgVACbGravityModel
__all__.append("IAgVACbGravityModel")

class IAgVACbShape(object):
    """The central body shape."""
    _uuid = "{4DD8FE3F-7B64-4477-9D9E-97226A04584D}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbShape._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShape from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACbShape = agcom.GUID(IAgVACbShape._uuid)
        vtable_offset_local = IAgVACbShape._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShape.__dict__ and type(IAgVACbShape.__dict__[attrname]) == property:
            return IAgVACbShape.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbShape.")
    

agcls.AgClassCatalog.add_catalog_entry("{4DD8FE3F-7B64-4477-9D9E-97226A04584D}", IAgVACbShape)
agcls.AgTypeNameMap["IAgVACbShape"] = IAgVACbShape
__all__.append("IAgVACbShape")

class IAgVACbShapeSphere(IAgVACbShape):
    """Properties for the central body sphere shape."""
    _uuid = "{BF7B6D1A-62E6-4897-8861-233465975488}"
    _num_methods = 2
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRadius"] = _raise_uninitialized_error
        self.__dict__["_SetRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbShapeSphere._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeSphere from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShape._private_init(self, pUnk)
        IID_IAgVACbShapeSphere = agcom.GUID(IAgVACbShapeSphere._uuid)
        vtable_offset_local = IAgVACbShapeSphere._vtable_offset - 1
        self.__dict__["_GetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeSphere, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeSphere, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeSphere.__dict__ and type(IAgVACbShapeSphere.__dict__[attrname]) == property:
            return IAgVACbShapeSphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    @property
    def Radius(self) -> float:
        """The radius. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Radius.setter
    def Radius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadius"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{BF7B6D1A-62E6-4897-8861-233465975488}", IAgVACbShapeSphere)
agcls.AgTypeNameMap["IAgVACbShapeSphere"] = IAgVACbShapeSphere
__all__.append("IAgVACbShapeSphere")

class IAgVACbShapeOblateSpheroid(IAgVACbShape):
    """Properties for the central body oblate spheroid shape."""
    _uuid = "{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}"
    _num_methods = 5
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetMinRadius"] = _raise_uninitialized_error
        self.__dict__["_SetMinRadius"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRadius"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRadius"] = _raise_uninitialized_error
        self.__dict__["_GetFlatteningCoefficient"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbShapeOblateSpheroid._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeOblateSpheroid from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShape._private_init(self, pUnk)
        IID_IAgVACbShapeOblateSpheroid = agcom.GUID(IAgVACbShapeOblateSpheroid._uuid)
        vtable_offset_local = IAgVACbShapeOblateSpheroid._vtable_offset - 1
        self.__dict__["_GetMinRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeOblateSpheroid, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeOblateSpheroid, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaxRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeOblateSpheroid, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeOblateSpheroid, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetFlatteningCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeOblateSpheroid, vtable_offset_local+5, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeOblateSpheroid.__dict__ and type(IAgVACbShapeOblateSpheroid.__dict__[attrname]) == property:
            return IAgVACbShapeOblateSpheroid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    @property
    def MinRadius(self) -> float:
        """The minimum radius. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinRadius.setter
    def MinRadius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinRadius"](arg_newVal.COM_val))

    @property
    def MaxRadius(self) -> float:
        """The maximum radius. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRadius.setter
    def MaxRadius(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRadius"](arg_newVal.COM_val))

    @property
    def FlatteningCoefficient(self) -> float:
        """The flattening coefficient; automatically derived from the minimum and maximum radii. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFlatteningCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{583AE2E3-8639-4C1F-B188-3C6AF867F0CD}", IAgVACbShapeOblateSpheroid)
agcls.AgTypeNameMap["IAgVACbShapeOblateSpheroid"] = IAgVACbShapeOblateSpheroid
__all__.append("IAgVACbShapeOblateSpheroid")

class IAgVACbShapeTriaxialEllipsoid(IAgVACbShape):
    """Properties for the central body triaxial ellipsoid shape."""
    _uuid = "{E446F44B-EDEB-4643-BEDA-6EA807C27882}"
    _num_methods = 6
    _vtable_offset = IAgVACbShape._vtable_offset + IAgVACbShape._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetSemiMidAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMidAxis"] = _raise_uninitialized_error
        self.__dict__["_GetSemiMinorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMinorAxis"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbShapeTriaxialEllipsoid._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbShapeTriaxialEllipsoid from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShape._private_init(self, pUnk)
        IID_IAgVACbShapeTriaxialEllipsoid = agcom.GUID(IAgVACbShapeTriaxialEllipsoid._uuid)
        vtable_offset_local = IAgVACbShapeTriaxialEllipsoid._vtable_offset - 1
        self.__dict__["_GetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetSemiMidAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMidAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetSemiMinorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMinorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbShapeTriaxialEllipsoid, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbShapeTriaxialEllipsoid.__dict__ and type(IAgVACbShapeTriaxialEllipsoid.__dict__[attrname]) == property:
            return IAgVACbShapeTriaxialEllipsoid.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbShape.__setattr__(self, attrname, value)
    
    @property
    def SemiMajorAxis(self) -> float:
        """The semi-major axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxis"](arg_newVal.COM_val))

    @property
    def SemiMidAxis(self) -> float:
        """The semi-mid axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMidAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMidAxis.setter
    def SemiMidAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMidAxis"](arg_newVal.COM_val))

    @property
    def SemiMinorAxis(self) -> float:
        """The semi-minor axis. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMinorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMinorAxis.setter
    def SemiMinorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMinorAxis"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E446F44B-EDEB-4643-BEDA-6EA807C27882}", IAgVACbShapeTriaxialEllipsoid)
agcls.AgTypeNameMap["IAgVACbShapeTriaxialEllipsoid"] = IAgVACbShapeTriaxialEllipsoid
__all__.append("IAgVACbShapeTriaxialEllipsoid")

class IAgVACbAttitude(object):
    """The central body attitude."""
    _uuid = "{DF0EB27A-4546-4A2C-B154-49E86527784D}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbAttitude._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitude from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACbAttitude = agcom.GUID(IAgVACbAttitude._uuid)
        vtable_offset_local = IAgVACbAttitude._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitude.__dict__ and type(IAgVACbAttitude.__dict__[attrname]) == property:
            return IAgVACbAttitude.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACbAttitude.")
    

agcls.AgClassCatalog.add_catalog_entry("{DF0EB27A-4546-4A2C-B154-49E86527784D}", IAgVACbAttitude)
agcls.AgTypeNameMap["IAgVACbAttitude"] = IAgVACbAttitude
__all__.append("IAgVACbAttitude")

class IAgVACbAttitudeRotationCoefficientsFile(IAgVACbAttitude):
    """Properties for a rotation coefficients file attitude definition."""
    _uuid = "{E0F3153F-7F2D-46B7-B317-99EDABD12360}"
    _num_methods = 2
    _vtable_offset = IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilename"] = _raise_uninitialized_error
        self.__dict__["_SetFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbAttitudeRotationCoefficientsFile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitudeRotationCoefficientsFile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbAttitude._private_init(self, pUnk)
        IID_IAgVACbAttitudeRotationCoefficientsFile = agcom.GUID(IAgVACbAttitudeRotationCoefficientsFile._uuid)
        vtable_offset_local = IAgVACbAttitudeRotationCoefficientsFile._vtable_offset - 1
        self.__dict__["_GetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeRotationCoefficientsFile, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeRotationCoefficientsFile, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitudeRotationCoefficientsFile.__dict__ and type(IAgVACbAttitudeRotationCoefficientsFile.__dict__[attrname]) == property:
            return IAgVACbAttitudeRotationCoefficientsFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbAttitude.__setattr__(self, attrname, value)
    
    @property
    def Filename(self) -> str:
        """The name of the rotation coefficients file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Filename.setter
    def Filename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFilename"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E0F3153F-7F2D-46B7-B317-99EDABD12360}", IAgVACbAttitudeRotationCoefficientsFile)
agcls.AgTypeNameMap["IAgVACbAttitudeRotationCoefficientsFile"] = IAgVACbAttitudeRotationCoefficientsFile
__all__.append("IAgVACbAttitudeRotationCoefficientsFile")

class IAgVACbAttitudeIAU1994(IAgVACbAttitude):
    """Properties for an IAU1994 attitude definition."""
    _uuid = "{7F28E973-1139-4D02-8F8C-C0F68E3035A9}"
    _num_methods = 12
    _vtable_offset = IAgVACbAttitude._vtable_offset + IAgVACbAttitude._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetRightAscension"] = _raise_uninitialized_error
        self.__dict__["_SetRightAscension"] = _raise_uninitialized_error
        self.__dict__["_GetDeclination"] = _raise_uninitialized_error
        self.__dict__["_SetDeclination"] = _raise_uninitialized_error
        self.__dict__["_GetRightAscensionRate"] = _raise_uninitialized_error
        self.__dict__["_SetRightAscensionRate"] = _raise_uninitialized_error
        self.__dict__["_GetDeclinationRate"] = _raise_uninitialized_error
        self.__dict__["_SetDeclinationRate"] = _raise_uninitialized_error
        self.__dict__["_GetRotationOffset"] = _raise_uninitialized_error
        self.__dict__["_SetRotationOffset"] = _raise_uninitialized_error
        self.__dict__["_GetRotationRate"] = _raise_uninitialized_error
        self.__dict__["_SetRotationRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbAttitudeIAU1994._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbAttitudeIAU1994 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbAttitude._private_init(self, pUnk)
        IID_IAgVACbAttitudeIAU1994 = agcom.GUID(IAgVACbAttitudeIAU1994._uuid)
        vtable_offset_local = IAgVACbAttitudeIAU1994._vtable_offset - 1
        self.__dict__["_GetRightAscension"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+1, POINTER(agcom.VARIANT))
        self.__dict__["_SetRightAscension"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+2, agcom.VARIANT)
        self.__dict__["_GetDeclination"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+3, POINTER(agcom.VARIANT))
        self.__dict__["_SetDeclination"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+4, agcom.VARIANT)
        self.__dict__["_GetRightAscensionRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRightAscensionRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetDeclinationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDeclinationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetRotationOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetRotationOffset"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetRotationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRotationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbAttitudeIAU1994, vtable_offset_local+12, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbAttitudeIAU1994.__dict__ and type(IAgVACbAttitudeIAU1994.__dict__[attrname]) == property:
            return IAgVACbAttitudeIAU1994.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbAttitude.__setattr__(self, attrname, value)
    
    @property
    def RightAscension(self) -> typing.Any:
        """The right ascension; the angle measured in the inertial equatorial plane from the inertial X axis in a right-handed sense about the inertial Z axis to the spin axis -- the angle  in the drawing below. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRightAscension"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RightAscension.setter
    def RightAscension(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRightAscension"](arg_newVal.COM_val))

    @property
    def Declination(self) -> typing.Any:
        """The declination; the angle from the X-Y plane of the coordinate system to the spin axis vector. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Declination.setter
    def Declination(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeclination"](arg_newVal.COM_val))

    @property
    def RightAscensionRate(self) -> float:
        """The right ascension rate; the rate of change in the right ascension. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRightAscensionRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RightAscensionRate.setter
    def RightAscensionRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRightAscensionRate"](arg_newVal.COM_val))

    @property
    def DeclinationRate(self) -> float:
        """The declination rate; the rate of change in the declination. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDeclinationRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DeclinationRate.setter
    def DeclinationRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetDeclinationRate"](arg_newVal.COM_val))

    @property
    def RotationOffset(self) -> typing.Any:
        """The rotation offset; the angle from the inertially fixed reference direction to the body-fixed prime meridian (0 deg longitude) at the time of epoch. Uses AngleUnit Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationOffset"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RotationOffset.setter
    def RotationOffset(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRotationOffset"](arg_newVal.COM_val))

    @property
    def RotationRate(self) -> float:
        """The rotation rate; the rate of the central body's rotation. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRotationRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RotationRate.setter
    def RotationRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRotationRate"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7F28E973-1139-4D02-8F8C-C0F68E3035A9}", IAgVACbAttitudeIAU1994)
agcls.AgTypeNameMap["IAgVACbAttitudeIAU1994"] = IAgVACbAttitudeIAU1994
__all__.append("IAgVACbAttitudeIAU1994")

class IAgVACbEphemerisAnalyticOrbit(IAgVACbEphemeris):
    """Properties for the Analytic Orbit ephemeris source."""
    _uuid = "{662F2BBE-2CFB-41F7-A928-26A4909C31AB}"
    _num_methods = 26
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxis"] = _raise_uninitialized_error
        self.__dict__["_GetSemiMajorAxisRate"] = _raise_uninitialized_error
        self.__dict__["_SetSemiMajorAxisRate"] = _raise_uninitialized_error
        self.__dict__["_GetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_SetEccentricity"] = _raise_uninitialized_error
        self.__dict__["_GetEccentricityRate"] = _raise_uninitialized_error
        self.__dict__["_SetEccentricityRate"] = _raise_uninitialized_error
        self.__dict__["_GetInclination"] = _raise_uninitialized_error
        self.__dict__["_SetInclination"] = _raise_uninitialized_error
        self.__dict__["_GetInclinationRate"] = _raise_uninitialized_error
        self.__dict__["_SetInclinationRate"] = _raise_uninitialized_error
        self.__dict__["_GetRAAN"] = _raise_uninitialized_error
        self.__dict__["_SetRAAN"] = _raise_uninitialized_error
        self.__dict__["_GetRAANRate"] = _raise_uninitialized_error
        self.__dict__["_SetRAANRate"] = _raise_uninitialized_error
        self.__dict__["_GetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_SetArgOfPeriapsis"] = _raise_uninitialized_error
        self.__dict__["_GetArgOfPeriapsisRate"] = _raise_uninitialized_error
        self.__dict__["_SetArgOfPeriapsisRate"] = _raise_uninitialized_error
        self.__dict__["_GetMeanLongitude"] = _raise_uninitialized_error
        self.__dict__["_SetMeanLongitude"] = _raise_uninitialized_error
        self.__dict__["_GetMeanLongitudeRate"] = _raise_uninitialized_error
        self.__dict__["_SetMeanLongitudeRate"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemerisAnalyticOrbit._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisAnalyticOrbit from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemeris._private_init(self, pUnk)
        IID_IAgVACbEphemerisAnalyticOrbit = agcom.GUID(IAgVACbEphemerisAnalyticOrbit._uuid)
        vtable_offset_local = IAgVACbEphemerisAnalyticOrbit._vtable_offset - 1
        self.__dict__["_GetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetSemiMajorAxisRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSemiMajorAxisRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEccentricity"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetEccentricityRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEccentricityRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetInclination"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetInclinationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInclinationRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+15, POINTER(agcom.VARIANT))
        self.__dict__["_SetRAAN"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+16, agcom.VARIANT)
        self.__dict__["_GetRAANRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRAANRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+19, POINTER(agcom.VARIANT))
        self.__dict__["_SetArgOfPeriapsis"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+20, agcom.VARIANT)
        self.__dict__["_GetArgOfPeriapsisRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetArgOfPeriapsisRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetMeanLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+23, POINTER(agcom.VARIANT))
        self.__dict__["_SetMeanLongitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+24, agcom.VARIANT)
        self.__dict__["_GetMeanLongitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanLongitudeRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisAnalyticOrbit, vtable_offset_local+26, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisAnalyticOrbit.__dict__ and type(IAgVACbEphemerisAnalyticOrbit.__dict__[attrname]) == property:
            return IAgVACbEphemerisAnalyticOrbit.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    @property
    def Epoch(self) -> float:
        """The epoch. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Epoch.setter
    def Epoch(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEpoch"](arg_newVal.COM_val))

    @property
    def SemiMajorAxis(self) -> float:
        """The semi-major axis; one-half the distance along the long axis of the elliptical orbit. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxis.setter
    def SemiMajorAxis(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxis"](arg_newVal.COM_val))

    @property
    def SemiMajorAxisRate(self) -> float:
        """The semi-major axis rate of change. Uses Rate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSemiMajorAxisRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SemiMajorAxisRate.setter
    def SemiMajorAxisRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetSemiMajorAxisRate"](arg_newVal.COM_val))

    @property
    def Eccentricity(self) -> float:
        """The eccentricity; the ratio of the distance between the two foci of the ellipse and its major axis. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEccentricity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Eccentricity.setter
    def Eccentricity(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEccentricity"](arg_newVal.COM_val))

    @property
    def EccentricityRate(self) -> float:
        """The eccentricity rate of change. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEccentricityRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EccentricityRate.setter
    def EccentricityRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetEccentricityRate"](arg_newVal.COM_val))

    @property
    def Inclination(self) -> typing.Any:
        """The inclination; the angle from the Z axis of the inertial coordinate system to the orbit angular velocity vector. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInclination"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Inclination.setter
    def Inclination(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInclination"](arg_newVal.COM_val))

    @property
    def InclinationRate(self) -> float:
        """The inclination rate of change. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInclinationRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InclinationRate.setter
    def InclinationRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetInclinationRate"](arg_newVal.COM_val))

    @property
    def RAAN(self) -> typing.Any:
        """The right ascension; the angle from the X axis of the inertial coordinate system to the point where the orbit crosses the X-Y plane in the +Z direction. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAAN"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAAN.setter
    def RAAN(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAAN"](arg_newVal.COM_val))

    @property
    def RAANRate(self) -> float:
        """The right ascension rate of change. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRAANRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RAANRate.setter
    def RAANRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetRAANRate"](arg_newVal.COM_val))

    @property
    def ArgOfPeriapsis(self) -> typing.Any:
        """The argument of periapsis; The angle measured in direction of the body's orbital motion, and in the orbit plane, from the ascending node to the periapsis of the orbit. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArgOfPeriapsis"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArgOfPeriapsis.setter
    def ArgOfPeriapsis(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArgOfPeriapsis"](arg_newVal.COM_val))

    @property
    def ArgOfPeriapsisRate(self) -> float:
        """The argument of periapsis rate of change. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArgOfPeriapsisRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArgOfPeriapsisRate.setter
    def ArgOfPeriapsisRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetArgOfPeriapsisRate"](arg_newVal.COM_val))

    @property
    def MeanLongitude(self) -> typing.Any:
        """The mean longitude; the sum of the Right Ascension of the Ascending Node, the Argument of Periapsis and the Mean Anomaly. Uses Angle Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanLongitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanLongitude.setter
    def MeanLongitude(self, newVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanLongitude"](arg_newVal.COM_val))

    @property
    def MeanLongitudeRate(self) -> float:
        """The mean longitude rate of change. Uses AngleRate Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanLongitudeRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanLongitudeRate.setter
    def MeanLongitudeRate(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanLongitudeRate"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{662F2BBE-2CFB-41F7-A928-26A4909C31AB}", IAgVACbEphemerisAnalyticOrbit)
agcls.AgTypeNameMap["IAgVACbEphemerisAnalyticOrbit"] = IAgVACbEphemerisAnalyticOrbit
__all__.append("IAgVACbEphemerisAnalyticOrbit")

class IAgVACbEphemerisJPLSpice(IAgVACbEphemeris):
    """Properties for the JPL SPICE ephemeris source."""
    _uuid = "{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}"
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetJPLSpiceId"] = _raise_uninitialized_error
        self.__dict__["_SetJPLSpiceId"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemerisJPLSpice._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisJPLSpice from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemeris._private_init(self, pUnk)
        IID_IAgVACbEphemerisJPLSpice = agcom.GUID(IAgVACbEphemerisJPLSpice._uuid)
        vtable_offset_local = IAgVACbEphemerisJPLSpice._vtable_offset - 1
        self.__dict__["_GetJPLSpiceId"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisJPLSpice, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetJPLSpiceId"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisJPLSpice, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisJPLSpice.__dict__ and type(IAgVACbEphemerisJPLSpice.__dict__[attrname]) == property:
            return IAgVACbEphemerisJPLSpice.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    @property
    def JPLSpiceId(self) -> str:
        """The SPICE file name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJPLSpiceId"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @JPLSpiceId.setter
    def JPLSpiceId(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJPLSpiceId"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B6A4A547-92B1-4584-B8E9-D3C12ED6CC9C}", IAgVACbEphemerisJPLSpice)
agcls.AgTypeNameMap["IAgVACbEphemerisJPLSpice"] = IAgVACbEphemerisJPLSpice
__all__.append("IAgVACbEphemerisJPLSpice")

class IAgVACbEphemerisFile(IAgVACbEphemeris):
    """Properties for the Ephemeris File ephemeris source."""
    _uuid = "{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}"
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetFilename"] = _raise_uninitialized_error
        self.__dict__["_SetFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemerisFile._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisFile from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemeris._private_init(self, pUnk)
        IID_IAgVACbEphemerisFile = agcom.GUID(IAgVACbEphemerisFile._uuid)
        vtable_offset_local = IAgVACbEphemerisFile._vtable_offset - 1
        self.__dict__["_GetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisFile, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisFile, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisFile.__dict__ and type(IAgVACbEphemerisFile.__dict__[attrname]) == property:
            return IAgVACbEphemerisFile.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    @property
    def Filename(self) -> str:
        """The ephemeris file name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Filename.setter
    def Filename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetFilename"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8B38CE6C-B8E1-489F-8ED1-B3703A13D986}", IAgVACbEphemerisFile)
agcls.AgTypeNameMap["IAgVACbEphemerisFile"] = IAgVACbEphemerisFile
__all__.append("IAgVACbEphemerisFile")

class IAgVACbEphemerisJPLDE(IAgVACbEphemeris):
    """Properties for the JPL DE ephemeris source."""
    _uuid = "{FCD86AB9-0919-46BC-BF99-287F49837BD5}"
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetJPLDEFilename"] = _raise_uninitialized_error
        self.__dict__["_SetJPLDEFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemerisJPLDE._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisJPLDE from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemeris._private_init(self, pUnk)
        IID_IAgVACbEphemerisJPLDE = agcom.GUID(IAgVACbEphemerisJPLDE._uuid)
        vtable_offset_local = IAgVACbEphemerisJPLDE._vtable_offset - 1
        self.__dict__["_GetJPLDEFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisJPLDE, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetJPLDEFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisJPLDE, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisJPLDE.__dict__ and type(IAgVACbEphemerisJPLDE.__dict__[attrname]) == property:
            return IAgVACbEphemerisJPLDE.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    @property
    def JPLDEFilename(self) -> str:
        """The DE file name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetJPLDEFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @JPLDEFilename.setter
    def JPLDEFilename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetJPLDEFilename"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FCD86AB9-0919-46BC-BF99-287F49837BD5}", IAgVACbEphemerisJPLDE)
agcls.AgTypeNameMap["IAgVACbEphemerisJPLDE"] = IAgVACbEphemerisJPLDE
__all__.append("IAgVACbEphemerisJPLDE")

class IAgVACbEphemerisPlanetary(IAgVACbEphemeris):
    """Properties for the Planetary Ephemeris file ephemeris source."""
    _uuid = "{471AE49F-1C98-4572-9EDD-16060AFA9208}"
    _num_methods = 2
    _vtable_offset = IAgVACbEphemeris._vtable_offset + IAgVACbEphemeris._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPlanetaryFilename"] = _raise_uninitialized_error
        self.__dict__["_SetPlanetaryFilename"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACbEphemerisPlanetary._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACbEphemerisPlanetary from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemeris._private_init(self, pUnk)
        IID_IAgVACbEphemerisPlanetary = agcom.GUID(IAgVACbEphemerisPlanetary._uuid)
        vtable_offset_local = IAgVACbEphemerisPlanetary._vtable_offset - 1
        self.__dict__["_GetPlanetaryFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisPlanetary, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPlanetaryFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACbEphemerisPlanetary, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACbEphemerisPlanetary.__dict__ and type(IAgVACbEphemerisPlanetary.__dict__[attrname]) == property:
            return IAgVACbEphemerisPlanetary.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            IAgVACbEphemeris.__setattr__(self, attrname, value)
    
    @property
    def PlanetaryFilename(self) -> str:
        """The planetary ephemeris file name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPlanetaryFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PlanetaryFilename.setter
    def PlanetaryFilename(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetPlanetaryFilename"](arg_newVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{471AE49F-1C98-4572-9EDD-16060AFA9208}", IAgVACbEphemerisPlanetary)
agcls.AgTypeNameMap["IAgVACbEphemerisPlanetary"] = IAgVACbEphemerisPlanetary
__all__.append("IAgVACbEphemerisPlanetary")

class IAgVACentralBody(object):
    """General properties for a central body."""
    _uuid = "{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}"
    _num_methods = 41
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGravitationalParam"] = _raise_uninitialized_error
        self.__dict__["_SetGravitationalParam"] = _raise_uninitialized_error
        self.__dict__["_GetParentName"] = _raise_uninitialized_error
        self.__dict__["_SetParentName"] = _raise_uninitialized_error
        self.__dict__["_GetChildren"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultGravityModelName"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultGravityModelByName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultGravityModelData"] = _raise_uninitialized_error
        self.__dict__["_AddGravityModel"] = _raise_uninitialized_error
        self.__dict__["_RemoveGravityModelByName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultShapeName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultShapeData"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultShapeByName"] = _raise_uninitialized_error
        self.__dict__["_AddShape"] = _raise_uninitialized_error
        self.__dict__["_RemoveShapeByName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultAttitudeName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultAttitudeData"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultAttitudeByName"] = _raise_uninitialized_error
        self.__dict__["_AddAttitude"] = _raise_uninitialized_error
        self.__dict__["_RemoveAttitudeByName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultEphemerisName"] = _raise_uninitialized_error
        self.__dict__["_SetDefaultEphemerisByName"] = _raise_uninitialized_error
        self.__dict__["_GetDefaultEphemerisData"] = _raise_uninitialized_error
        self.__dict__["_AddEphemeris"] = _raise_uninitialized_error
        self.__dict__["_RemoveEphemerisByName"] = _raise_uninitialized_error
        self.__dict__["_CutGravityModelByName"] = _raise_uninitialized_error
        self.__dict__["_CopyGravityModelByName"] = _raise_uninitialized_error
        self.__dict__["_PasteGravityModel"] = _raise_uninitialized_error
        self.__dict__["_AddCopyOfGravityModel"] = _raise_uninitialized_error
        self.__dict__["_CutShapeByName"] = _raise_uninitialized_error
        self.__dict__["_CopyShapeByName"] = _raise_uninitialized_error
        self.__dict__["_PasteShape"] = _raise_uninitialized_error
        self.__dict__["_AddCopyOfShape"] = _raise_uninitialized_error
        self.__dict__["_CutAttitudeByName"] = _raise_uninitialized_error
        self.__dict__["_CopyAttitudeByName"] = _raise_uninitialized_error
        self.__dict__["_PasteAttitude"] = _raise_uninitialized_error
        self.__dict__["_AddCopyOfAttitude"] = _raise_uninitialized_error
        self.__dict__["_CutEphemerisByName"] = _raise_uninitialized_error
        self.__dict__["_CopyEphemerisByName"] = _raise_uninitialized_error
        self.__dict__["_PasteEphemeris"] = _raise_uninitialized_error
        self.__dict__["_AddCopyOfEphemeris"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACentralBody._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACentralBody from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACentralBody = agcom.GUID(IAgVACentralBody._uuid)
        vtable_offset_local = IAgVACentralBody._vtable_offset - 1
        self.__dict__["_GetGravitationalParam"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGravitationalParam"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetParentName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetChildren"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetDefaultGravityModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_SetDefaultGravityModelByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_GetDefaultGravityModelData"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_AddGravityModel"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+9, agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_RemoveGravityModelByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDefaultShapeName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_GetDefaultShapeData"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_SetDefaultShapeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+13, agcom.BSTR)
        self.__dict__["_AddShape"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+14, agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_RemoveShapeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+15, agcom.BSTR)
        self.__dict__["_GetDefaultAttitudeName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_GetDefaultAttitudeData"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_SetDefaultAttitudeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_AddAttitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+19, agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_RemoveAttitudeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDefaultEphemerisName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDefaultEphemerisByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDefaultEphemerisData"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_AddEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+24, agcom.LONG, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_RemoveEphemerisByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_CutGravityModelByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+26, agcom.BSTR)
        self.__dict__["_CopyGravityModelByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_PasteGravityModel"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+28, POINTER(agcom.PVOID))
        self.__dict__["_AddCopyOfGravityModel"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+29, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_CutShapeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+30, agcom.BSTR)
        self.__dict__["_CopyShapeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+31, agcom.BSTR)
        self.__dict__["_PasteShape"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+32, POINTER(agcom.PVOID))
        self.__dict__["_AddCopyOfShape"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+33, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_CutAttitudeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+34, agcom.BSTR)
        self.__dict__["_CopyAttitudeByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+35, agcom.BSTR)
        self.__dict__["_PasteAttitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+36, POINTER(agcom.PVOID))
        self.__dict__["_AddCopyOfAttitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+37, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_CutEphemerisByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+38, agcom.BSTR)
        self.__dict__["_CopyEphemerisByName"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+39, agcom.BSTR)
        self.__dict__["_PasteEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+40, POINTER(agcom.PVOID))
        self.__dict__["_AddCopyOfEphemeris"] = IAGFUNCTYPE(pUnk, IID_IAgVACentralBody, vtable_offset_local+41, agcom.PVOID, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACentralBody.__dict__ and type(IAgVACentralBody.__dict__[attrname]) == property:
            return IAgVACentralBody.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACentralBody.")
    
    @property
    def GravitationalParam(self) -> float:
        """The gravitational parameter to be used. Uses Gravity Parameter Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravitationalParam"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravitationalParam.setter
    def GravitationalParam(self, newVal:float) -> None:
        with agmarshall.DOUBLE_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravitationalParam"](arg_newVal.COM_val))

    @property
    def ParentName(self) -> str:
        """The parent of this central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetParentName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ParentName.setter
    def ParentName(self, newVal:str) -> None:
        with agmarshall.BSTR_arg(newVal) as arg_newVal:
            agcls.evaluate_hresult(self.__dict__["_SetParentName"](arg_newVal.COM_val))

    @property
    def Children(self) -> "IAgVACentralBodyCollection":
        """The children of this central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetChildren"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def DefaultGravityModelName(self) -> str:
        """The gravity model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultGravityModelName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDefaultGravityModelByName(self, gravityModelName:str) -> None:
        """Selects a gravity model"""
        with agmarshall.BSTR_arg(gravityModelName) as arg_gravityModelName:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultGravityModelByName"](arg_gravityModelName.COM_val))

    @property
    def DefaultGravityModelData(self) -> "IAgVACbGravityModel":
        """The gravity model parameters."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbGravityModel:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultGravityModelData"](byref(arg_ppCbGravityModel.COM_val)))
            return arg_ppCbGravityModel.python_val

    def AddGravityModel(self, eGravityModel:"AgEVACbGravityModel", uniqueName:str) -> "IAgVACbGravityModel":
        """Adds a central body gravity model type."""
        with agmarshall.AgEnum_arg(AgEVACbGravityModel, eGravityModel) as arg_eGravityModel, \
             agmarshall.BSTR_arg(uniqueName) as arg_uniqueName, \
             agmarshall.AgInterface_out_arg() as arg_ppCbGravityModel:
            agcls.evaluate_hresult(self.__dict__["_AddGravityModel"](arg_eGravityModel.COM_val, arg_uniqueName.COM_val, byref(arg_ppCbGravityModel.COM_val)))
            return arg_ppCbGravityModel.python_val

    def RemoveGravityModelByName(self, gravityModelName:str) -> None:
        """Removes a central body gravity model type."""
        with agmarshall.BSTR_arg(gravityModelName) as arg_gravityModelName:
            agcls.evaluate_hresult(self.__dict__["_RemoveGravityModelByName"](arg_gravityModelName.COM_val))

    @property
    def DefaultShapeName(self) -> str:
        """The shape of the central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultShapeName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DefaultShapeData(self) -> "IAgVACbShape":
        """The parameters of the central body shape."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbShape:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultShapeData"](byref(arg_ppCbShape.COM_val)))
            return arg_ppCbShape.python_val

    def SetDefaultShapeByName(self, shapeName:str) -> None:
        """Selects a central body shape."""
        with agmarshall.BSTR_arg(shapeName) as arg_shapeName:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultShapeByName"](arg_shapeName.COM_val))

    def AddShape(self, eShape:"AgEVACbShape", uniqueName:str) -> "IAgVACbShape":
        """Adds a central body shape type from the available types."""
        with agmarshall.AgEnum_arg(AgEVACbShape, eShape) as arg_eShape, \
             agmarshall.BSTR_arg(uniqueName) as arg_uniqueName, \
             agmarshall.AgInterface_out_arg() as arg_ppCbShape:
            agcls.evaluate_hresult(self.__dict__["_AddShape"](arg_eShape.COM_val, arg_uniqueName.COM_val, byref(arg_ppCbShape.COM_val)))
            return arg_ppCbShape.python_val

    def RemoveShapeByName(self, shapeName:str) -> None:
        """Removes a central body shape type."""
        with agmarshall.BSTR_arg(shapeName) as arg_shapeName:
            agcls.evaluate_hresult(self.__dict__["_RemoveShapeByName"](arg_shapeName.COM_val))

    @property
    def DefaultAttitudeName(self) -> str:
        """The attitude of the central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultAttitudeName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DefaultAttitudeData(self) -> "IAgVACbAttitude":
        """The parameters of the central body attitude."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbAttitude:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultAttitudeData"](byref(arg_ppCbAttitude.COM_val)))
            return arg_ppCbAttitude.python_val

    def SetDefaultAttitudeByName(self, attitudeName:str) -> None:
        """Selects a central body attitude."""
        with agmarshall.BSTR_arg(attitudeName) as arg_attitudeName:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultAttitudeByName"](arg_attitudeName.COM_val))

    def AddAttitude(self, eAttitude:"AgEVACbAttitude", uniqueName:str) -> "IAgVACbAttitude":
        """Adds a central body attitude type from the available types."""
        with agmarshall.AgEnum_arg(AgEVACbAttitude, eAttitude) as arg_eAttitude, \
             agmarshall.BSTR_arg(uniqueName) as arg_uniqueName, \
             agmarshall.AgInterface_out_arg() as arg_ppCbAttitude:
            agcls.evaluate_hresult(self.__dict__["_AddAttitude"](arg_eAttitude.COM_val, arg_uniqueName.COM_val, byref(arg_ppCbAttitude.COM_val)))
            return arg_ppCbAttitude.python_val

    def RemoveAttitudeByName(self, attitudeName:str) -> None:
        """Removes a central body attitude type."""
        with agmarshall.BSTR_arg(attitudeName) as arg_attitudeName:
            agcls.evaluate_hresult(self.__dict__["_RemoveAttitudeByName"](arg_attitudeName.COM_val))

    @property
    def DefaultEphemerisName(self) -> str:
        """The ephemeris of the central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultEphemerisName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetDefaultEphemerisByName(self, ephemerisName:str) -> None:
        """Selects an ephemeris type."""
        with agmarshall.BSTR_arg(ephemerisName) as arg_ephemerisName:
            agcls.evaluate_hresult(self.__dict__["_SetDefaultEphemerisByName"](arg_ephemerisName.COM_val))

    @property
    def DefaultEphemerisData(self) -> "IAgVACbEphemeris":
        """The  parameters of the central body ephemeris."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbEphemeris:
            agcls.evaluate_hresult(self.__dict__["_GetDefaultEphemerisData"](byref(arg_ppCbEphemeris.COM_val)))
            return arg_ppCbEphemeris.python_val

    def AddEphemeris(self, eEphemeris:"AgEVACbEphemeris", uniqueName:str) -> "IAgVACbEphemeris":
        """Adds an ephemeris type from the available types."""
        with agmarshall.AgEnum_arg(AgEVACbEphemeris, eEphemeris) as arg_eEphemeris, \
             agmarshall.BSTR_arg(uniqueName) as arg_uniqueName, \
             agmarshall.AgInterface_out_arg() as arg_ppCbEphemeris:
            agcls.evaluate_hresult(self.__dict__["_AddEphemeris"](arg_eEphemeris.COM_val, arg_uniqueName.COM_val, byref(arg_ppCbEphemeris.COM_val)))
            return arg_ppCbEphemeris.python_val

    def RemoveEphemerisByName(self, ephemerisName:str) -> None:
        """Removes an ephemeris type."""
        with agmarshall.BSTR_arg(ephemerisName) as arg_ephemerisName:
            agcls.evaluate_hresult(self.__dict__["_RemoveEphemerisByName"](arg_ephemerisName.COM_val))

    def CutGravityModelByName(self, gravityModelName:str) -> None:
        """Copies a gravity model to the clipboard and removes it from the central body"""
        with agmarshall.BSTR_arg(gravityModelName) as arg_gravityModelName:
            agcls.evaluate_hresult(self.__dict__["_CutGravityModelByName"](arg_gravityModelName.COM_val))

    def CopyGravityModelByName(self, gravityModelName:str) -> None:
        """Copies a gravity model to the clipboard."""
        with agmarshall.BSTR_arg(gravityModelName) as arg_gravityModelName:
            agcls.evaluate_hresult(self.__dict__["_CopyGravityModelByName"](arg_gravityModelName.COM_val))

    def PasteGravityModel(self) -> "IAgVACbGravityModel":
        """Adds the gravity model in the clipboard to the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbGravityModel:
            agcls.evaluate_hresult(self.__dict__["_PasteGravityModel"](byref(arg_ppCbGravityModel.COM_val)))
            return arg_ppCbGravityModel.python_val

    def AddCopyOfGravityModel(self, gravityModel:"IAgVACbGravityModel") -> "IAgVACbGravityModel":
        """Adds the gravity model to the central body"""
        with agmarshall.AgInterface_in_arg(gravityModel, IAgVACbGravityModel) as arg_gravityModel, \
             agmarshall.AgInterface_out_arg() as arg_ppCbGravityModel:
            agcls.evaluate_hresult(self.__dict__["_AddCopyOfGravityModel"](arg_gravityModel.COM_val, byref(arg_ppCbGravityModel.COM_val)))
            return arg_ppCbGravityModel.python_val

    def CutShapeByName(self, shapeName:str) -> None:
        """Copies a central body shape to the clipboard and removes it from the central body"""
        with agmarshall.BSTR_arg(shapeName) as arg_shapeName:
            agcls.evaluate_hresult(self.__dict__["_CutShapeByName"](arg_shapeName.COM_val))

    def CopyShapeByName(self, shapeName:str) -> None:
        """Copies a central body shape to the clipboard."""
        with agmarshall.BSTR_arg(shapeName) as arg_shapeName:
            agcls.evaluate_hresult(self.__dict__["_CopyShapeByName"](arg_shapeName.COM_val))

    def PasteShape(self) -> "IAgVACbShape":
        """Adds the central body shape in the clipboard to the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbShape:
            agcls.evaluate_hresult(self.__dict__["_PasteShape"](byref(arg_ppCbShape.COM_val)))
            return arg_ppCbShape.python_val

    def AddCopyOfShape(self, shape:"IAgVACbShape") -> "IAgVACbShape":
        """Adds the central body shape to the central body"""
        with agmarshall.AgInterface_in_arg(shape, IAgVACbShape) as arg_shape, \
             agmarshall.AgInterface_out_arg() as arg_ppCbShape:
            agcls.evaluate_hresult(self.__dict__["_AddCopyOfShape"](arg_shape.COM_val, byref(arg_ppCbShape.COM_val)))
            return arg_ppCbShape.python_val

    def CutAttitudeByName(self, attitudeName:str) -> None:
        """Copies a central body attitude definition to the clipboard and removes it from the central body"""
        with agmarshall.BSTR_arg(attitudeName) as arg_attitudeName:
            agcls.evaluate_hresult(self.__dict__["_CutAttitudeByName"](arg_attitudeName.COM_val))

    def CopyAttitudeByName(self, attitudeName:str) -> None:
        """Copies a central body attitude definition to the clipboard."""
        with agmarshall.BSTR_arg(attitudeName) as arg_attitudeName:
            agcls.evaluate_hresult(self.__dict__["_CopyAttitudeByName"](arg_attitudeName.COM_val))

    def PasteAttitude(self) -> "IAgVACbAttitude":
        """Adds the central body attitude definition in the clipboard to the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbAttitude:
            agcls.evaluate_hresult(self.__dict__["_PasteAttitude"](byref(arg_ppCbAttitude.COM_val)))
            return arg_ppCbAttitude.python_val

    def AddCopyOfAttitude(self, attitude:"IAgVACbAttitude") -> "IAgVACbAttitude":
        """Adds the central body attitude definition to the central body"""
        with agmarshall.AgInterface_in_arg(attitude, IAgVACbAttitude) as arg_attitude, \
             agmarshall.AgInterface_out_arg() as arg_ppCbAttitude:
            agcls.evaluate_hresult(self.__dict__["_AddCopyOfAttitude"](arg_attitude.COM_val, byref(arg_ppCbAttitude.COM_val)))
            return arg_ppCbAttitude.python_val

    def CutEphemerisByName(self, ephemerisName:str) -> None:
        """Copies a central body ephemeris definition to the clipboard and removes it from the central body"""
        with agmarshall.BSTR_arg(ephemerisName) as arg_ephemerisName:
            agcls.evaluate_hresult(self.__dict__["_CutEphemerisByName"](arg_ephemerisName.COM_val))

    def CopyEphemerisByName(self, ephemerisName:str) -> None:
        """Copies a central body ephemeris definition to the clipboard."""
        with agmarshall.BSTR_arg(ephemerisName) as arg_ephemerisName:
            agcls.evaluate_hresult(self.__dict__["_CopyEphemerisByName"](arg_ephemerisName.COM_val))

    def PasteEphemeris(self) -> "IAgVACbEphemeris":
        """Adds the central body ephemeris definition in the clipboard to the central body."""
        with agmarshall.AgInterface_out_arg() as arg_ppCbEphemeris:
            agcls.evaluate_hresult(self.__dict__["_PasteEphemeris"](byref(arg_ppCbEphemeris.COM_val)))
            return arg_ppCbEphemeris.python_val

    def AddCopyOfEphemeris(self, ephemeris:"IAgVACbEphemeris") -> "IAgVACbEphemeris":
        """Adds the central body ephemeris definition to the central body"""
        with agmarshall.AgInterface_in_arg(ephemeris, IAgVACbEphemeris) as arg_ephemeris, \
             agmarshall.AgInterface_out_arg() as arg_ppCbEphemeris:
            agcls.evaluate_hresult(self.__dict__["_AddCopyOfEphemeris"](arg_ephemeris.COM_val, byref(arg_ppCbEphemeris.COM_val)))
            return arg_ppCbEphemeris.python_val


agcls.AgClassCatalog.add_catalog_entry("{5AA2ACF6-1764-4E46-BA4F-4619640CBC83}", IAgVACentralBody)
agcls.AgTypeNameMap["IAgVACentralBody"] = IAgVACentralBody
__all__.append("IAgVACentralBody")

class IAgVAPowerInternal(object):
    """Properties for the Internal Power power source component."""
    _uuid = "{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGeneratedPower"] = _raise_uninitialized_error
        self.__dict__["_SetGeneratedPower"] = _raise_uninitialized_error
        self.__dict__["_GetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_SetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPowerInternal._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerInternal from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPowerInternal = agcom.GUID(IAgVAPowerInternal._uuid)
        vtable_offset_local = IAgVAPowerInternal._vtable_offset - 1
        self.__dict__["_GetGeneratedPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetGeneratedPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+5, POINTER(agcom.VARIANT))
        self.__dict__["_SetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+6, agcom.VARIANT)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+9, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerInternal, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerInternal.__dict__ and type(IAgVAPowerInternal.__dict__[attrname]) == property:
            return IAgVAPowerInternal.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerInternal.")
    
    @property
    def GeneratedPower(self) -> float:
        """The power generated by the spacecraft from internal sources. Uses Power Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGeneratedPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GeneratedPower.setter
    def GeneratedPower(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGeneratedPower"](arg_inVal.COM_val))

    @property
    def PercentDegradationPerYear(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPercentDegradationPerYear"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPercentDegradationPerYear"](arg_inVal.COM_val))

    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceEpoch"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlPowerInternal") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerInternal, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlPowerInternal") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerInternal, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlPowerInternal") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerInternal, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{8ACB8A4A-52E8-4E71-8FD1-37B53E392858}", IAgVAPowerInternal)
agcls.AgTypeNameMap["IAgVAPowerInternal"] = IAgVAPowerInternal
__all__.append("IAgVAPowerInternal")

class IAgVAPowerProcessed(object):
    """Properties for the Processed Power power source component."""
    _uuid = "{D3C19CA2-B73F-48BB-9B24-A7860136AE03}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetLoad"] = _raise_uninitialized_error
        self.__dict__["_SetLoad"] = _raise_uninitialized_error
        self.__dict__["_GetEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_SetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPowerProcessed._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerProcessed from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPowerProcessed = agcom.GUID(IAgVAPowerProcessed._uuid)
        vtable_offset_local = IAgVAPowerProcessed._vtable_offset - 1
        self.__dict__["_GetLoad"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLoad"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+9, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerProcessed, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerProcessed.__dict__ and type(IAgVAPowerProcessed.__dict__[attrname]) == property:
            return IAgVAPowerProcessed.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerProcessed.")
    
    @property
    def Load(self) -> float:
        """The power diverted from power source and unavailable to PPU. Uses Power Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLoad"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Load.setter
    def Load(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLoad"](arg_inVal.COM_val))

    @property
    def Efficiency(self) -> float:
        """The efficiency of the PPU unit. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Efficiency.setter
    def Efficiency(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEfficiency"](arg_inVal.COM_val))

    @property
    def InputPowerSourceName(self) -> str:
        """The source of power available to PPU."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInputPowerSourceName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InputPowerSourceName.setter
    def InputPowerSourceName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInputPowerSourceName"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlPowerProcessed") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerProcessed, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlPowerProcessed") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerProcessed, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlPowerProcessed") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerProcessed, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{D3C19CA2-B73F-48BB-9B24-A7860136AE03}", IAgVAPowerProcessed)
agcls.AgTypeNameMap["IAgVAPowerProcessed"] = IAgVAPowerProcessed
__all__.append("IAgVAPowerProcessed")

class IAgVAPowerSolarArray(object):
    """Properties for the Solar Array Power power source component."""
    _uuid = "{E8776401-2DE0-49E8-8080-FD0442E57701}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetArea"] = _raise_uninitialized_error
        self.__dict__["_SetArea"] = _raise_uninitialized_error
        self.__dict__["_GetConcentration"] = _raise_uninitialized_error
        self.__dict__["_SetConcentration"] = _raise_uninitialized_error
        self.__dict__["_GetCellEfficiencyPercent"] = _raise_uninitialized_error
        self.__dict__["_SetCellEfficiencyPercent"] = _raise_uninitialized_error
        self.__dict__["_GetArrayEfficiencyPercent"] = _raise_uninitialized_error
        self.__dict__["_SetArrayEfficiencyPercent"] = _raise_uninitialized_error
        self.__dict__["_GetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_SetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetInclinationToSunLine"] = _raise_uninitialized_error
        self.__dict__["_SetInclinationToSunLine"] = _raise_uninitialized_error
        self.__dict__["_GetC0"] = _raise_uninitialized_error
        self.__dict__["_SetC0"] = _raise_uninitialized_error
        self.__dict__["_GetC1"] = _raise_uninitialized_error
        self.__dict__["_SetC1"] = _raise_uninitialized_error
        self.__dict__["_GetC2"] = _raise_uninitialized_error
        self.__dict__["_SetC2"] = _raise_uninitialized_error
        self.__dict__["_GetC3"] = _raise_uninitialized_error
        self.__dict__["_SetC3"] = _raise_uninitialized_error
        self.__dict__["_GetC4"] = _raise_uninitialized_error
        self.__dict__["_SetC4"] = _raise_uninitialized_error
        self.__dict__["_GetApproximationFormula"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPowerSolarArray._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPowerSolarArray from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPowerSolarArray = agcom.GUID(IAgVAPowerSolarArray._uuid)
        vtable_offset_local = IAgVAPowerSolarArray._vtable_offset - 1
        self.__dict__["_GetArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetArea"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetConcentration"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetConcentration"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCellEfficiencyPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetCellEfficiencyPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetArrayEfficiencyPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetArrayEfficiencyPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetInclinationToSunLine"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetInclinationToSunLine"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_GetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetApproximationFormula"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+25, POINTER(agcom.BSTR))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+26, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+27, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+28, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAPowerSolarArray, vtable_offset_local+29, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPowerSolarArray.__dict__ and type(IAgVAPowerSolarArray.__dict__[attrname]) == property:
            return IAgVAPowerSolarArray.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPowerSolarArray.")
    
    @property
    def Area(self) -> float:
        """The solar array panel area. Uses Area Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Area.setter
    def Area(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetArea"](arg_inVal.COM_val))

    @property
    def Concentration(self) -> float:
        """The solar array concentrator factor. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetConcentration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Concentration.setter
    def Concentration(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetConcentration"](arg_inVal.COM_val))

    @property
    def CellEfficiencyPercent(self) -> float:
        """The cell efficiency in producing output power from incident sunlight. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCellEfficiencyPercent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CellEfficiencyPercent.setter
    def CellEfficiencyPercent(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCellEfficiencyPercent"](arg_inVal.COM_val))

    @property
    def ArrayEfficiencyPercent(self) -> float:
        """The array efficiency in producing output power from a collection of cells. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetArrayEfficiencyPercent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ArrayEfficiencyPercent.setter
    def ArrayEfficiencyPercent(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetArrayEfficiencyPercent"](arg_inVal.COM_val))

    @property
    def PercentDegradationPerYear(self) -> float:
        """The percent degradation per year; degradation factor is (1-x%/yr)^(timeSinceRefEpoch). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPercentDegradationPerYear"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPercentDegradationPerYear"](arg_inVal.COM_val))

    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceEpoch"](arg_inVal.COM_val))

    @property
    def InclinationToSunLine(self) -> typing.Any:
        """The angle between the panel normal vector to the apparent sun line. Uses AngleUnit Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInclinationToSunLine"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InclinationToSunLine.setter
    def InclinationToSunLine(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInclinationToSunLine"](arg_inVal.COM_val))

    @property
    def C0(self) -> float:
        """The ThermalModel.C0 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C0.setter
    def C0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC0"](arg_inVal.COM_val))

    @property
    def C1(self) -> float:
        """The ThermalModel.C1 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C1.setter
    def C1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC1"](arg_inVal.COM_val))

    @property
    def C2(self) -> float:
        """The ThermalModel.C2 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C2.setter
    def C2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC2"](arg_inVal.COM_val))

    @property
    def C3(self) -> float:
        """The ThermalModel.C3 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C3.setter
    def C3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC3"](arg_inVal.COM_val))

    @property
    def C4(self) -> float:
        """The ThermalModel.C4 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C4.setter
    def C4(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC4"](arg_inVal.COM_val))

    @property
    def ApproximationFormula(self) -> str:
        """The thermal factor as function of distance (in AU) to Sun."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetApproximationFormula"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def EnableControlParameter(self, param:"AgEVAControlPowerSolarArray") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlPowerSolarArray") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlPowerSolarArray") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlPowerSolarArray, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{E8776401-2DE0-49E8-8080-FD0442E57701}", IAgVAPowerSolarArray)
agcls.AgTypeNameMap["IAgVAPowerSolarArray"] = IAgVAPowerSolarArray
__all__.append("IAgVAPowerSolarArray")

class IAgVAGeneralRelativityFunction(object):
    """Properties for the General Relativity propagator function."""
    _uuid = "{020E7294-1784-40AA-95C2-153F87CB086F}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGeneralRelativityFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGeneralRelativityFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGeneralRelativityFunction = agcom.GUID(IAgVAGeneralRelativityFunction._uuid)
        vtable_offset_local = IAgVAGeneralRelativityFunction._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGeneralRelativityFunction.__dict__ and type(IAgVAGeneralRelativityFunction.__dict__[attrname]) == property:
            return IAgVAGeneralRelativityFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGeneralRelativityFunction.")
    

agcls.AgClassCatalog.add_catalog_entry("{020E7294-1784-40AA-95C2-153F87CB086F}", IAgVAGeneralRelativityFunction)
agcls.AgTypeNameMap["IAgVAGeneralRelativityFunction"] = IAgVAGeneralRelativityFunction
__all__.append("IAgVAGeneralRelativityFunction")

class IAgVAStateTransFunction(object):
    """Properties for the State Transition propagator function."""
    _uuid = "{67F8B465-6BC4-4736-8A83-EC7E55D45177}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAStateTransFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAStateTransFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAStateTransFunction = agcom.GUID(IAgVAStateTransFunction._uuid)
        vtable_offset_local = IAgVAStateTransFunction._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAStateTransFunction.__dict__ and type(IAgVAStateTransFunction.__dict__[attrname]) == property:
            return IAgVAStateTransFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAStateTransFunction.")
    

agcls.AgClassCatalog.add_catalog_entry("{67F8B465-6BC4-4736-8A83-EC7E55D45177}", IAgVAStateTransFunction)
agcls.AgTypeNameMap["IAgVAStateTransFunction"] = IAgVAStateTransFunction
__all__.append("IAgVAStateTransFunction")

class IAgVACR3BPFunc(object):
    """Properties for the CR3BP propagator function."""
    _uuid = "{1A2E3655-CF88-4272-8B52-257397D913BF}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetSecondaryName"] = _raise_uninitialized_error
        self.__dict__["_SetSecondaryName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACR3BPFunc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACR3BPFunc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACR3BPFunc = agcom.GUID(IAgVACR3BPFunc._uuid)
        vtable_offset_local = IAgVACR3BPFunc._vtable_offset - 1
        self.__dict__["_GetSecondaryName"] = IAGFUNCTYPE(pUnk, IID_IAgVACR3BPFunc, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetSecondaryName"] = IAGFUNCTYPE(pUnk, IID_IAgVACR3BPFunc, vtable_offset_local+2, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACR3BPFunc.__dict__ and type(IAgVACR3BPFunc.__dict__[attrname]) == property:
            return IAgVACR3BPFunc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACR3BPFunc.")
    
    @property
    def SecondaryName(self) -> str:
        """The secondary body following CR3BP model definitions."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondaryName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondaryName.setter
    def SecondaryName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondaryName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1A2E3655-CF88-4272-8B52-257397D913BF}", IAgVACR3BPFunc)
agcls.AgTypeNameMap["IAgVACR3BPFunc"] = IAgVACR3BPFunc
__all__.append("IAgVACR3BPFunc")

class IAgVARadiationPressureFunction(object):
    """Properties for the Radiation Pressure propagator function."""
    _uuid = "{CED70D8F-A1BF-402D-A767-E7A6E857507C}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIncludeAlbedo"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeAlbedo"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeThermalRadiationPressure"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeThermalRadiationPressure"] = _raise_uninitialized_error
        self.__dict__["_GetGroundReflectionModelFilename"] = _raise_uninitialized_error
        self.__dict__["_SetGroundReflectionModelFilename"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOverrideSegmentSettings"] = _raise_uninitialized_error
        self.__dict__["_SetOverrideSegmentSettings"] = _raise_uninitialized_error
        self.__dict__["_GetRadPressureCoeff"] = _raise_uninitialized_error
        self.__dict__["_SetRadPressureCoeff"] = _raise_uninitialized_error
        self.__dict__["_GetRadPressureArea"] = _raise_uninitialized_error
        self.__dict__["_SetRadPressureArea"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARadiationPressureFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARadiationPressureFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARadiationPressureFunction = agcom.GUID(IAgVARadiationPressureFunction._uuid)
        vtable_offset_local = IAgVARadiationPressureFunction._vtable_offset - 1
        self.__dict__["_GetIncludeAlbedo"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeAlbedo"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetIncludeThermalRadiationPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeThermalRadiationPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetGroundReflectionModelFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetGroundReflectionModelFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetOverrideSegmentSettings"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetOverrideSegmentSettings"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetRadPressureCoeff"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadPressureCoeff"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetRadPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRadPressureArea"] = IAGFUNCTYPE(pUnk, IID_IAgVARadiationPressureFunction, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARadiationPressureFunction.__dict__ and type(IAgVARadiationPressureFunction.__dict__[attrname]) == property:
            return IAgVARadiationPressureFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARadiationPressureFunction.")
    
    @property
    def IncludeAlbedo(self) -> bool:
        """True if including accelerations derived from albedo (reflected sunlight radiation from the central body)."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeAlbedo"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IncludeAlbedo.setter
    def IncludeAlbedo(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeAlbedo"](arg_inVal.COM_val))

    @property
    def IncludeThermalRadiationPressure(self) -> bool:
        """True if including accelerations derived from thermal radiation pressure from the central body."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeThermalRadiationPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IncludeThermalRadiationPressure.setter
    def IncludeThermalRadiationPressure(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeThermalRadiationPressure"](arg_inVal.COM_val))

    @property
    def GroundReflectionModelFilename(self) -> str:
        """A file containing a ground reflection model used for albedo and thermal radiation pressure."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGroundReflectionModelFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GroundReflectionModelFilename.setter
    def GroundReflectionModelFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGroundReflectionModelFilename"](arg_inVal.COM_val))

    @property
    def CentralBodyName(self) -> str:
        """Name of the central body."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OverrideSegmentSettings(self) -> bool:
        """True to use Ck and area values defined on this component for radiation pressure computations, rather than those defined in the MCS segments."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOverrideSegmentSettings"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OverrideSegmentSettings.setter
    def OverrideSegmentSettings(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOverrideSegmentSettings"](arg_inVal.COM_val))

    @property
    def RadPressureCoeff(self) -> float:
        """Coefficient, Ck, for use with radiation pressure computation."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadPressureCoeff"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadPressureCoeff.setter
    def RadPressureCoeff(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadPressureCoeff"](arg_inVal.COM_val))

    @property
    def RadPressureArea(self) -> float:
        """Area to be used for radiation pressure computations. Small area dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRadPressureArea"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RadPressureArea.setter
    def RadPressureArea(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRadPressureArea"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{CED70D8F-A1BF-402D-A767-E7A6E857507C}", IAgVARadiationPressureFunction)
agcls.AgTypeNameMap["IAgVARadiationPressureFunction"] = IAgVARadiationPressureFunction
__all__.append("IAgVARadiationPressureFunction")

class IAgVAYarkovskyFunc(object):
    """Properties for the Yarkovsky Effect propagator function."""
    _uuid = "{AA6781B4-EACD-4100-8E23-C2771351BD7A}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getalpha"] = _raise_uninitialized_error
        self.__dict__["_Setalpha"] = _raise_uninitialized_error
        self.__dict__["_GetR0"] = _raise_uninitialized_error
        self.__dict__["_SetR0"] = _raise_uninitialized_error
        self.__dict__["_GetNM"] = _raise_uninitialized_error
        self.__dict__["_SetNM"] = _raise_uninitialized_error
        self.__dict__["_GetNN"] = _raise_uninitialized_error
        self.__dict__["_SetNN"] = _raise_uninitialized_error
        self.__dict__["_GetNK"] = _raise_uninitialized_error
        self.__dict__["_SetNK"] = _raise_uninitialized_error
        self.__dict__["_GetA1"] = _raise_uninitialized_error
        self.__dict__["_SetA1"] = _raise_uninitialized_error
        self.__dict__["_GetA2"] = _raise_uninitialized_error
        self.__dict__["_SetA2"] = _raise_uninitialized_error
        self.__dict__["_GetA3"] = _raise_uninitialized_error
        self.__dict__["_SetA3"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAYarkovskyFunc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAYarkovskyFunc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAYarkovskyFunc = agcom.GUID(IAgVAYarkovskyFunc._uuid)
        vtable_offset_local = IAgVAYarkovskyFunc._vtable_offset - 1
        self.__dict__["_Getalpha"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setalpha"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetR0"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetR0"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetNM"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNM"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetNN"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNN"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetNK"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetNK"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetA1"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetA1"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetA2"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetA2"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetA3"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetA3"] = IAGFUNCTYPE(pUnk, IID_IAgVAYarkovskyFunc, vtable_offset_local+16, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAYarkovskyFunc.__dict__ and type(IAgVAYarkovskyFunc.__dict__[attrname]) == property:
            return IAgVAYarkovskyFunc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAYarkovskyFunc.")
    
    @property
    def alpha(self) -> float:
        """Yarkovsky effect alpha constant. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getalpha"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @alpha.setter
    def alpha(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setalpha"](arg_inVal.COM_val))

    @property
    def R0(self) -> float:
        """Heliocentric sublimation distance. Uses distance dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetR0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @R0.setter
    def R0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetR0"](arg_inVal.COM_val))

    @property
    def NM(self) -> float:
        """Yarkovsky effect m exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNM"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NM.setter
    def NM(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNM"](arg_inVal.COM_val))

    @property
    def NN(self) -> float:
        """Yarkovsky effect n exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNN"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NN.setter
    def NN(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNN"](arg_inVal.COM_val))

    @property
    def NK(self) -> float:
        """Yarkovsky effect k exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNK"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NK.setter
    def NK(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNK"](arg_inVal.COM_val))

    @property
    def A1(self) -> float:
        """Radial acceleration multiplier. Uses acceleration dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetA1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @A1.setter
    def A1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetA1"](arg_inVal.COM_val))

    @property
    def A2(self) -> float:
        """Velocity tangent acceleration multiplier. Uses acceleration dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetA2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @A2.setter
    def A2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetA2"](arg_inVal.COM_val))

    @property
    def A3(self) -> float:
        """Orbit normal acceleration multiplier. Uses acceleration dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetA3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @A3.setter
    def A3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetA3"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{AA6781B4-EACD-4100-8E23-C2771351BD7A}", IAgVAYarkovskyFunc)
agcls.AgTypeNameMap["IAgVAYarkovskyFunc"] = IAgVAYarkovskyFunc
__all__.append("IAgVAYarkovskyFunc")

class IAgVABlendedDensity(object):
    """Properties for the blended atmospheric density propagator function."""
    _uuid = "{E1951825-092B-48C8-88AE-7C878FBF40C3}"
    _num_methods = 9
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_AtmDensityModel"] = _raise_uninitialized_error
        self.__dict__["_LowAltAtmDensityModel"] = _raise_uninitialized_error
        self.__dict__["_GetDensityBlendingAltRange"] = _raise_uninitialized_error
        self.__dict__["_SetDensityBlendingAltRange"] = _raise_uninitialized_error
        self.__dict__["_GetAtmDensityModelName"] = _raise_uninitialized_error
        self.__dict__["_GetLowAltAtmDensityModelName"] = _raise_uninitialized_error
        self.__dict__["_GetUseApproxAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproxAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetLowerBoundUpperAtmModel"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABlendedDensity._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABlendedDensity from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABlendedDensity = agcom.GUID(IAgVABlendedDensity._uuid)
        vtable_offset_local = IAgVABlendedDensity._vtable_offset - 1
        self.__dict__["_AtmDensityModel"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+1, agcom.PVOID)
        self.__dict__["_LowAltAtmDensityModel"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+2, agcom.PVOID)
        self.__dict__["_GetDensityBlendingAltRange"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDensityBlendingAltRange"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetAtmDensityModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_GetLowAltAtmDensityModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_GetUseApproxAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproxAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetLowerBoundUpperAtmModel"] = IAGFUNCTYPE(pUnk, IID_IAgVABlendedDensity, vtable_offset_local+9, POINTER(agcom.DOUBLE))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABlendedDensity.__dict__ and type(IAgVABlendedDensity.__dict__[attrname]) == property:
            return IAgVABlendedDensity.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABlendedDensity.")
    
    def AtmDensityModel(self, pInVal:"IAgComponentInfo") -> None:
        """Embeds a nominal atmosphere model from the component browser."""
        with agmarshall.AgInterface_in_arg(pInVal, IAgComponentInfo) as arg_pInVal:
            agcls.evaluate_hresult(self.__dict__["_AtmDensityModel"](arg_pInVal.COM_val))

    def LowAltAtmDensityModel(self, pInVal:"IAgComponentInfo") -> None:
        """Embeds a low altitude atmosphere model from the component browser."""
        with agmarshall.AgInterface_in_arg(pInVal, IAgComponentInfo) as arg_pInVal:
            agcls.evaluate_hresult(self.__dict__["_LowAltAtmDensityModel"](arg_pInVal.COM_val))

    @property
    def DensityBlendingAltRange(self) -> float:
        """The blending range (distance dimension), begins at lower bound of upper model."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityBlendingAltRange"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityBlendingAltRange.setter
    def DensityBlendingAltRange(self, inVal:float) -> None:
        """Set the blending range."""
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityBlendingAltRange"](arg_inVal.COM_val))

    @property
    def AtmDensityModelName(self) -> str:
        """Returns the name of the embedded nominal atmospheric model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmDensityModelName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def LowAltAtmDensityModelName(self) -> str:
        """Returns the name of the embedded low altitude atmospheric model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowAltAtmDensityModelName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def UseApproxAltitude(self) -> bool:
        """True if using approximate altitude formula (enforced on embedded models)."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproxAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproxAltitude.setter
    def UseApproxAltitude(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproxAltitude"](arg_pVal.COM_val))

    @property
    def LowerBoundUpperAtmModel(self) -> float:
        """The lowest valid altitude of the upper atmospheric density model."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowerBoundUpperAtmModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{E1951825-092B-48C8-88AE-7C878FBF40C3}", IAgVABlendedDensity)
agcls.AgTypeNameMap["IAgVABlendedDensity"] = IAgVABlendedDensity
__all__.append("IAgVABlendedDensity")

class IAgVADragModelPlugin(object):
    """Properties for the Drag Model plugin."""
    _uuid = "{00D06156-07AD-4321-9741-9722A3D7BF85}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADragModelPlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADragModelPlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADragModelPlugin = agcom.GUID(IAgVADragModelPlugin._uuid)
        vtable_offset_local = IAgVADragModelPlugin._vtable_offset - 1
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVADragModelPlugin, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVADragModelPlugin, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVADragModelPlugin, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADragModelPlugin.__dict__ and type(IAgVADragModelPlugin.__dict__[attrname]) == property:
            return IAgVADragModelPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADragModelPlugin.")
    
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{00D06156-07AD-4321-9741-9722A3D7BF85}", IAgVADragModelPlugin)
agcls.AgTypeNameMap["IAgVADragModelPlugin"] = IAgVADragModelPlugin
__all__.append("IAgVADragModelPlugin")

class IAgVACira72Function(object):
    """Properties for the CIRA 72 atmospheric model."""
    _uuid = "{9FFC517F-7B30-4780-8028-A3E309E5BAE4}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACira72Function._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACira72Function from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACira72Function = agcom.GUID(IAgVACira72Function._uuid)
        vtable_offset_local = IAgVACira72Function._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVACira72Function, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACira72Function.__dict__ and type(IAgVACira72Function.__dict__[attrname]) == property:
            return IAgVACira72Function.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACira72Function.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{9FFC517F-7B30-4780-8028-A3E309E5BAE4}", IAgVACira72Function)
agcls.AgTypeNameMap["IAgVACira72Function"] = IAgVACira72Function
__all__.append("IAgVACira72Function")

class IAgVAExponential(object):
    """Properties for the Exponential atmospheric model - a model that calculates atmospheric density using an equation involving a reference density, reference altitude, and scale altitude."""
    _uuid = "{987B718C-47F4-4638-900E-B87B0AAFEFBA}"
    _num_methods = 17
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceDensity"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceDensity"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetScaleAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetScaleAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAExponential._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAExponential from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAExponential = agcom.GUID(IAgVAExponential._uuid)
        vtable_offset_local = IAgVAExponential._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetReferenceDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetReferenceDensity"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetReferenceAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetReferenceAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetScaleAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetScaleAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+13, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+14, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+15, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAExponential, vtable_offset_local+17, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAExponential.__dict__ and type(IAgVAExponential.__dict__[attrname]) == property:
            return IAgVAExponential.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAExponential.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ReferenceDensity(self) -> float:
        """The reference density. Uses Density Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceDensity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceDensity.setter
    def ReferenceDensity(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceDensity"](arg_inVal.COM_val))

    @property
    def ReferenceAltitude(self) -> float:
        """The reference altitude. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceAltitude.setter
    def ReferenceAltitude(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceAltitude"](arg_inVal.COM_val))

    @property
    def ScaleAltitude(self) -> float:
        """The scale altitude. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScaleAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScaleAltitude.setter
    def ScaleAltitude(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetScaleAltitude"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{987B718C-47F4-4638-900E-B87B0AAFEFBA}", IAgVAExponential)
agcls.AgTypeNameMap["IAgVAExponential"] = IAgVAExponential
__all__.append("IAgVAExponential")

class IAgVAHarrisPriester(object):
    """Properties for the Harris-Priester atmospheric model - a model that takes into account a 10.7 cm solar flux level and diurnal bulge."""
    _uuid = "{4481139D-2D5D-48F0-9372-2385F8F95658}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAHarrisPriester._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAHarrisPriester from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAHarrisPriester = agcom.GUID(IAgVAHarrisPriester._uuid)
        vtable_offset_local = IAgVAHarrisPriester._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+16, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+18, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+19, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAHarrisPriester, vtable_offset_local+21, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAHarrisPriester.__dict__ and type(IAgVAHarrisPriester.__dict__[attrname]) == property:
            return IAgVAHarrisPriester.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAHarrisPriester.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4481139D-2D5D-48F0-9372-2385F8F95658}", IAgVAHarrisPriester)
agcls.AgTypeNameMap["IAgVAHarrisPriester"] = IAgVAHarrisPriester
__all__.append("IAgVAHarrisPriester")

class IAgVADensityModelPlugin(object):
    """Properties for the plugin atmospheric density model."""
    _uuid = "{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}"
    _num_methods = 51
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10"] = _raise_uninitialized_error
        self.__dict__["_SetF10"] = _raise_uninitialized_error
        self.__dict__["_GetF10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetM10"] = _raise_uninitialized_error
        self.__dict__["_SetM10"] = _raise_uninitialized_error
        self.__dict__["_GetM10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetM10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetS10"] = _raise_uninitialized_error
        self.__dict__["_SetS10"] = _raise_uninitialized_error
        self.__dict__["_GetS10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetS10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetY10"] = _raise_uninitialized_error
        self.__dict__["_SetY10"] = _raise_uninitialized_error
        self.__dict__["_GetY10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetY10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetDstDTc"] = _raise_uninitialized_error
        self.__dict__["_SetDstDTc"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosAugDataFile"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAugDataFile"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosAugDTCFile"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAugDTCFile"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetUsesAugmentedSpaceWeather"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADensityModelPlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADensityModelPlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADensityModelPlugin = agcom.GUID(IAgVADensityModelPlugin._uuid)
        vtable_offset_local = IAgVADensityModelPlugin._vtable_offset - 1
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+5, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+6, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+11, agcom.LONG)
        self.__dict__["_GetF10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+13, agcom.DOUBLE)
        self.__dict__["_GetF10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+14, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+15, agcom.DOUBLE)
        self.__dict__["_GetM10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+16, POINTER(agcom.DOUBLE))
        self.__dict__["_SetM10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+17, agcom.DOUBLE)
        self.__dict__["_GetM10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetM10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetS10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetS10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetS10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetS10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetY10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+24, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY10"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+25, agcom.DOUBLE)
        self.__dict__["_GetY10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+27, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+28, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+29, agcom.DOUBLE)
        self.__dict__["_GetDstDTc"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+30, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDstDTc"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+31, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+32, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+33, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+34, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+35, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+36, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+37, agcom.BSTR)
        self.__dict__["_GetAtmosAugDataFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+38, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosAugDataFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+39, agcom.BSTR)
        self.__dict__["_GetAtmosAugDTCFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+40, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosAugDTCFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+41, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+42, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+43, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+44, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+45, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+46, POINTER(agcom.PVOID))
        self.__dict__["_GetUsesAugmentedSpaceWeather"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+47, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+48, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+49, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+50, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADensityModelPlugin, vtable_offset_local+51, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADensityModelPlugin.__dict__ and type(IAgVADensityModelPlugin.__dict__[attrname]) == property:
            return IAgVADensityModelPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADensityModelPlugin.")
    
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10.setter
    def F10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10"](arg_inVal.COM_val))

    @property
    def F10Avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10Avg.setter
    def F10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10Avg"](arg_inVal.COM_val))

    @property
    def M10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetM10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @M10.setter
    def M10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetM10"](arg_inVal.COM_val))

    @property
    def M10Avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetM10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @M10Avg.setter
    def M10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetM10Avg"](arg_inVal.COM_val))

    @property
    def S10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetS10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @S10.setter
    def S10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetS10"](arg_inVal.COM_val))

    @property
    def S10Avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetS10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @S10Avg.setter
    def S10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetS10Avg"](arg_inVal.COM_val))

    @property
    def Y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y10.setter
    def Y10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetY10"](arg_inVal.COM_val))

    @property
    def Y10Avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y10Avg.setter
    def Y10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetY10Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def DstDTc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDstDTc"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DstDTc.setter
    def DstDTc(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDstDTc"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def AtmosAugDataFile(self) -> str:
        """The atmospheric model augmented data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAugDataFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAugDataFile.setter
    def AtmosAugDataFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAugDataFile"](arg_inVal.COM_val))

    @property
    def AtmosAugDTCFile(self) -> str:
        """The atmospheric model augmented geomagnetic data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAugDTCFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAugDTCFile.setter
    def AtmosAugDTCFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAugDTCFile"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def UsesAugmentedSpaceWeather(self) -> bool:
        """Flag indicates whether this model uses augmented flux data."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUsesAugmentedSpaceWeather"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{FCE828BB-B2CE-4F2C-91EC-42ED00564FF4}", IAgVADensityModelPlugin)
agcls.AgTypeNameMap["IAgVADensityModelPlugin"] = IAgVADensityModelPlugin
__all__.append("IAgVADensityModelPlugin")

class IAgVAJacchiaRoberts(object):
    """Properties for the Jacchia-Roberts atmospheric model - a model that is similar to Jacchia 1971 but uses analytical methods to improve performance."""
    _uuid = "{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAJacchiaRoberts._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchiaRoberts from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAJacchiaRoberts = agcom.GUID(IAgVAJacchiaRoberts._uuid)
        vtable_offset_local = IAgVAJacchiaRoberts._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaRoberts, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchiaRoberts.__dict__ and type(IAgVAJacchiaRoberts.__dict__[attrname]) == property:
            return IAgVAJacchiaRoberts.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchiaRoberts.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{EEC62B17-9E4D-4527-AC53-B8A7180A4A65}", IAgVAJacchiaRoberts)
agcls.AgTypeNameMap["IAgVAJacchiaRoberts"] = IAgVAJacchiaRoberts
__all__.append("IAgVAJacchiaRoberts")

class IAgVAJacchiaBowman2008(object):
    """Properties for the Jacchia Bowman 2008 atmospheric density model."""
    _uuid = "{49B828F8-A541-4E9E-99DD-DF3708B3559F}"
    _num_methods = 37
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10"] = _raise_uninitialized_error
        self.__dict__["_SetF10"] = _raise_uninitialized_error
        self.__dict__["_GetF10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetM10"] = _raise_uninitialized_error
        self.__dict__["_SetM10"] = _raise_uninitialized_error
        self.__dict__["_GetM10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetM10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetS10"] = _raise_uninitialized_error
        self.__dict__["_SetS10"] = _raise_uninitialized_error
        self.__dict__["_GetS10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetS10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetY10"] = _raise_uninitialized_error
        self.__dict__["_SetY10"] = _raise_uninitialized_error
        self.__dict__["_GetY10Avg"] = _raise_uninitialized_error
        self.__dict__["_SetY10Avg"] = _raise_uninitialized_error
        self.__dict__["_GetDstDTc"] = _raise_uninitialized_error
        self.__dict__["_SetDstDTc"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosAugDataFile"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAugDataFile"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosAugDTCFile"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAugDTCFile"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAJacchiaBowman2008._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchiaBowman2008 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAJacchiaBowman2008 = agcom.GUID(IAgVAJacchiaBowman2008._uuid)
        vtable_offset_local = IAgVAJacchiaBowman2008._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetF10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetF10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetM10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetM10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetM10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetM10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetS10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetS10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetS10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetS10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetY10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY10"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetY10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetY10Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetDstDTc"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetDstDTc"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetAtmosAugDataFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+25, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosAugDataFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+26, agcom.BSTR)
        self.__dict__["_GetAtmosAugDTCFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+27, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosAugDTCFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+28, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+29, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+30, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+31, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+32, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+33, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+34, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+35, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+36, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchiaBowman2008, vtable_offset_local+37, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchiaBowman2008.__dict__ and type(IAgVAJacchiaBowman2008.__dict__[attrname]) == property:
            return IAgVAJacchiaBowman2008.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchiaBowman2008.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10(self) -> float:
        """Solar Flux (F10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10.setter
    def F10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10"](arg_inVal.COM_val))

    @property
    def F10Avg(self) -> float:
        """Average solar Flux (F10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10Avg.setter
    def F10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10Avg"](arg_inVal.COM_val))

    @property
    def M10(self) -> float:
        """Solar Flux (M10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetM10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @M10.setter
    def M10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetM10"](arg_inVal.COM_val))

    @property
    def M10Avg(self) -> float:
        """Average solar Flux (M10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetM10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @M10Avg.setter
    def M10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetM10Avg"](arg_inVal.COM_val))

    @property
    def S10(self) -> float:
        """Solar Flux (S10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetS10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @S10.setter
    def S10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetS10"](arg_inVal.COM_val))

    @property
    def S10Avg(self) -> float:
        """Average solar Flux (S10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetS10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @S10Avg.setter
    def S10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetS10Avg"](arg_inVal.COM_val))

    @property
    def Y10(self) -> float:
        """Solar Flux (Y10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY10"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y10.setter
    def Y10(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetY10"](arg_inVal.COM_val))

    @property
    def Y10Avg(self) -> float:
        """Average solar Flux (Y10). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetY10Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Y10Avg.setter
    def Y10Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetY10Avg"](arg_inVal.COM_val))

    @property
    def DstDTc(self) -> float:
        """Temperature change calculated from disturbance storm time (DstDTc). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDstDTc"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DstDTc.setter
    def DstDTc(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDstDTc"](arg_inVal.COM_val))

    @property
    def AtmosAugDataFile(self) -> str:
        """The atmospheric model space weather data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAugDataFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAugDataFile.setter
    def AtmosAugDataFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAugDataFile"](arg_inVal.COM_val))

    @property
    def AtmosAugDTCFile(self) -> str:
        """The atmospheric model DTC file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAugDTCFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAugDTCFile.setter
    def AtmosAugDTCFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAugDTCFile"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{49B828F8-A541-4E9E-99DD-DF3708B3559F}", IAgVAJacchiaBowman2008)
agcls.AgTypeNameMap["IAgVAJacchiaBowman2008"] = IAgVAJacchiaBowman2008
__all__.append("IAgVAJacchiaBowman2008")

class IAgVAJacchia_1960(object):
    """Properties for the Jacchia 1960 atmospheric model - an outdated atmospheric model provided for making comparisons with other software."""
    _uuid = "{B32376D4-28EE-4D16-820F-A3A553103168}"
    _num_methods = 15
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAJacchia_1960._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1960 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAJacchia_1960 = agcom.GUID(IAgVAJacchia_1960._uuid)
        vtable_offset_local = IAgVAJacchia_1960._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+12, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+13, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+14, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1960, vtable_offset_local+15, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1960.__dict__ and type(IAgVAJacchia_1960.__dict__[attrname]) == property:
            return IAgVAJacchia_1960.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1960.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B32376D4-28EE-4D16-820F-A3A553103168}", IAgVAJacchia_1960)
agcls.AgTypeNameMap["IAgVAJacchia_1960"] = IAgVAJacchia_1960
__all__.append("IAgVAJacchia_1960")

class IAgVAJacchia_1970(object):
    """Properties for the Jacchia 1970 atmospheric model - a model that computes atmospheric density based on the composition of the atmosphere, which depends on altitude as well as seasonal variation. Valid range is 100-2500 km."""
    _uuid = "{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAJacchia_1970._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1970 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAJacchia_1970 = agcom.GUID(IAgVAJacchia_1970._uuid)
        vtable_offset_local = IAgVAJacchia_1970._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1970, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1970.__dict__ and type(IAgVAJacchia_1970.__dict__[attrname]) == property:
            return IAgVAJacchia_1970.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1970.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file"""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{7308B6EE-F3DF-4B83-A9FB-F750AAE436F5}", IAgVAJacchia_1970)
agcls.AgTypeNameMap["IAgVAJacchia_1970"] = IAgVAJacchia_1970
__all__.append("IAgVAJacchia_1970")

class IAgVAJacchia_1971(object):
    """Properties for the Jacchia 1971 atmospheric model - a model that is similar to Jacchia 1970, with improved treatment of certain solar effects."""
    _uuid = "{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAJacchia_1971._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAJacchia_1971 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAJacchia_1971 = agcom.GUID(IAgVAJacchia_1971._uuid)
        vtable_offset_local = IAgVAJacchia_1971._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAJacchia_1971, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAJacchia_1971.__dict__ and type(IAgVAJacchia_1971.__dict__[attrname]) == property:
            return IAgVAJacchia_1971.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAJacchia_1971.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{36089BD6-3BB0-4B0F-B8D8-81F6492E3309}", IAgVAJacchia_1971)
agcls.AgTypeNameMap["IAgVAJacchia_1971"] = IAgVAJacchia_1971
__all__.append("IAgVAJacchia_1971")

class IAgVAMSISE_1990(object):
    """Properties for the MSISE 1990 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1990 version, valid range of 0-1000 km."""
    _uuid = "{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMSISE_1990._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMSISE_1990 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMSISE_1990 = agcom.GUID(IAgVAMSISE_1990._uuid)
        vtable_offset_local = IAgVAMSISE_1990._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSISE_1990, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMSISE_1990.__dict__ and type(IAgVAMSISE_1990.__dict__[attrname]) == property:
            return IAgVAMSISE_1990.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMSISE_1990.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C6AE62A3-103D-4E39-9F25-6AD5CCFF9530}", IAgVAMSISE_1990)
agcls.AgTypeNameMap["IAgVAMSISE_1990"] = IAgVAMSISE_1990
__all__.append("IAgVAMSISE_1990")

class IAgVAMSIS_1986(object):
    """Properties for the MSIS 1986 atmospheric model - an empirical density model developed by Hedin based on satellite data. Finds the total density by accounting for the contribution of N2, O, O2, He, Ar and H. 1986 version, valid range of 90-1000 km."""
    _uuid = "{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMSIS_1986._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMSIS_1986 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMSIS_1986 = agcom.GUID(IAgVAMSIS_1986._uuid)
        vtable_offset_local = IAgVAMSIS_1986._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMSIS_1986, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMSIS_1986.__dict__ and type(IAgVAMSIS_1986.__dict__[attrname]) == property:
            return IAgVAMSIS_1986.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMSIS_1986.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation"""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{F7608E83-8539-4B2E-B0DB-F4F1010DDDED}", IAgVAMSIS_1986)
agcls.AgTypeNameMap["IAgVAMSIS_1986"] = IAgVAMSIS_1986
__all__.append("IAgVAMSIS_1986")

class IAgVANRLMSISE_2000(object):
    """Properties for the NRLMSISE 2000 atmospheric model."""
    _uuid = "{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVANRLMSISE_2000._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVANRLMSISE_2000 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVANRLMSISE_2000 = agcom.GUID(IAgVANRLMSISE_2000._uuid)
        vtable_offset_local = IAgVANRLMSISE_2000._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+20, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+23, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+24, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+25, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVANRLMSISE_2000, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANRLMSISE_2000.__dict__ and type(IAgVANRLMSISE_2000.__dict__[attrname]) == property:
            return IAgVANRLMSISE_2000.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANRLMSISE_2000.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate for geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{A2CAC8B0-74EF-4067-9B76-9B2D6938303D}", IAgVANRLMSISE_2000)
agcls.AgTypeNameMap["IAgVANRLMSISE_2000"] = IAgVANRLMSISE_2000
__all__.append("IAgVANRLMSISE_2000")

class IAgVAUS_Standard_Atmosphere(object):
    """Properties for the US Standard Atmosphere atmospheric model."""
    _uuid = "{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAUS_Standard_Atmosphere._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAUS_Standard_Atmosphere from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAUS_Standard_Atmosphere = agcom.GUID(IAgVAUS_Standard_Atmosphere._uuid)
        vtable_offset_local = IAgVAUS_Standard_Atmosphere._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+10, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+11, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+12, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAUS_Standard_Atmosphere, vtable_offset_local+13, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAUS_Standard_Atmosphere.__dict__ and type(IAgVAUS_Standard_Atmosphere.__dict__[attrname]) == property:
            return IAgVAUS_Standard_Atmosphere.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAUS_Standard_Atmosphere.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C1E85F74-4770-4D1F-B2D9-0AE42AC245EA}", IAgVAUS_Standard_Atmosphere)
agcls.AgTypeNameMap["IAgVAUS_Standard_Atmosphere"] = IAgVAUS_Standard_Atmosphere
__all__.append("IAgVAUS_Standard_Atmosphere")

class IAgVAMarsGRAM37(object):
    """Properties for the Mars-GRAM 3.7 atmospheric model."""
    _uuid = "{2855777F-3062-4699-AB5D-2FE73D161472}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMarsGRAM37._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM37 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMarsGRAM37 = agcom.GUID(IAgVAMarsGRAM37._uuid)
        vtable_offset_local = IAgVAMarsGRAM37._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+24, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM37, vtable_offset_local+27, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM37.__dict__ and type(IAgVAMarsGRAM37.__dict__[attrname]) == property:
            return IAgVAMarsGRAM37.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM37.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean or high density type."""
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2855777F-3062-4699-AB5D-2FE73D161472}", IAgVAMarsGRAM37)
agcls.AgTypeNameMap["IAgVAMarsGRAM37"] = IAgVAMarsGRAM37
__all__.append("IAgVAMarsGRAM37")

class IAgVAMarsGRAM2005(object):
    """Properties for the Mars-GRAM 2005 atmospheric model."""
    _uuid = "{E8649FED-5172-444A-9FC2-3B69586A8B91}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMarsGRAM2005._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2005 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMarsGRAM2005 = agcom.GUID(IAgVAMarsGRAM2005._uuid)
        vtable_offset_local = IAgVAMarsGRAM2005._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+24, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2005, vtable_offset_local+27, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2005.__dict__ and type(IAgVAMarsGRAM2005.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2005.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2005.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E8649FED-5172-444A-9FC2-3B69586A8B91}", IAgVAMarsGRAM2005)
agcls.AgTypeNameMap["IAgVAMarsGRAM2005"] = IAgVAMarsGRAM2005
__all__.append("IAgVAMarsGRAM2005")

class IAgVAVenusGRAM2005(object):
    """Properties for the Venus-GRAM 2005 atmospheric model."""
    _uuid = "{270C541C-FF9B-4E56-81B0-36CF43D3BE54}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAVenusGRAM2005._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAVenusGRAM2005 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAVenusGRAM2005 = agcom.GUID(IAgVAVenusGRAM2005._uuid)
        vtable_offset_local = IAgVAVenusGRAM2005._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+13, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+14, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+16, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+17, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+18, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAVenusGRAM2005, vtable_offset_local+19, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAVenusGRAM2005.__dict__ and type(IAgVAVenusGRAM2005.__dict__[attrname]) == property:
            return IAgVAVenusGRAM2005.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAVenusGRAM2005.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAVenusGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        with agmarshall.AgEnum_arg(AgEVAVenusGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAVenusGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAVenusGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{270C541C-FF9B-4E56-81B0-36CF43D3BE54}", IAgVAVenusGRAM2005)
agcls.AgTypeNameMap["IAgVAVenusGRAM2005"] = IAgVAVenusGRAM2005
__all__.append("IAgVAVenusGRAM2005")

class IAgVAMarsGRAM2010(object):
    """Properties for the Mars-GRAM 2010 atmospheric model."""
    _uuid = "{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMarsGRAM2010._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2010 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMarsGRAM2010 = agcom.GUID(IAgVAMarsGRAM2010._uuid)
        vtable_offset_local = IAgVAMarsGRAM2010._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+24, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2010, vtable_offset_local+27, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2010.__dict__ and type(IAgVAMarsGRAM2010.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2010.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2010.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C9E4AA59-8B84-4AC1-938E-E5E92A12EC4F}", IAgVAMarsGRAM2010)
agcls.AgTypeNameMap["IAgVAMarsGRAM2010"] = IAgVAMarsGRAM2010
__all__.append("IAgVAMarsGRAM2010")

class IAgVAMarsGRAM2001(object):
    """Properties for the Mars-GRAM 2001 atmospheric model."""
    _uuid = "{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMarsGRAM2001._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2001 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMarsGRAM2001 = agcom.GUID(IAgVAMarsGRAM2001._uuid)
        vtable_offset_local = IAgVAMarsGRAM2001._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+24, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2001, vtable_offset_local+27, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2001.__dict__ and type(IAgVAMarsGRAM2001.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2001.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2001.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Path to namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{D9213F74-E8C9-4251-9BD6-FA0C0138AFCD}", IAgVAMarsGRAM2001)
agcls.AgTypeNameMap["IAgVAMarsGRAM2001"] = IAgVAMarsGRAM2001
__all__.append("IAgVAMarsGRAM2001")

class IAgVAMarsGRAM2000(object):
    """Properties for the Mars-GRAM 2000 atmospheric model."""
    _uuid = "{E3458F58-63AD-4974-9EDA-524E9418A1DF}"
    _num_methods = 27
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_SetDataDirectory"] = _raise_uninitialized_error
        self.__dict__["_GetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_SetNamelistFile"] = _raise_uninitialized_error
        self.__dict__["_GetDensityType"] = _raise_uninitialized_error
        self.__dict__["_SetDensityType"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAMarsGRAM2000._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAMarsGRAM2000 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAMarsGRAM2000 = agcom.GUID(IAgVAMarsGRAM2000._uuid)
        vtable_offset_local = IAgVAMarsGRAM2000._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetDataDirectory"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetNamelistFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+11, POINTER(agcom.LONG))
        self.__dict__["_SetDensityType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+12, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+17, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+18, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+19, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+20, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+21, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+22, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+23, POINTER(agcom.PVOID))
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+24, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+25, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVAMarsGRAM2000, vtable_offset_local+27, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAMarsGRAM2000.__dict__ and type(IAgVAMarsGRAM2000.__dict__[attrname]) == property:
            return IAgVAMarsGRAM2000.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAMarsGRAM2000.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def DataDirectory(self) -> str:
        """Path to the data directory."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDataDirectory"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DataDirectory.setter
    def DataDirectory(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDataDirectory"](arg_inVal.COM_val))

    @property
    def NamelistFile(self) -> str:
        """Full path of namelist file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNamelistFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NamelistFile.setter
    def NamelistFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNamelistFile"](arg_inVal.COM_val))

    @property
    def DensityType(self) -> "AgEVAMarsGRAMDensityType":
        """Low, mean, high or randomly perturbed density type."""
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDensityType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DensityType.setter
    def DensityType(self, inVal:"AgEVAMarsGRAMDensityType") -> None:
        with agmarshall.AgEnum_arg(AgEVAMarsGRAMDensityType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDensityType"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """The atmospheric model data file path."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E3458F58-63AD-4974-9EDA-524E9418A1DF}", IAgVAMarsGRAM2000)
agcls.AgTypeNameMap["IAgVAMarsGRAM2000"] = IAgVAMarsGRAM2000
__all__.append("IAgVAMarsGRAM2000")

class IAgVADTM2012(object):
    """Properties for the DTM 2012 atmospheric model."""
    _uuid = "{4840E65F-6197-4A64-A80A-E0DF1E1048E0}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADTM2012._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADTM2012 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADTM2012 = agcom.GUID(IAgVADTM2012._uuid)
        vtable_offset_local = IAgVADTM2012._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+16, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2012, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADTM2012.__dict__ and type(IAgVADTM2012.__dict__[attrname]) == property:
            return IAgVADTM2012.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADTM2012.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4840E65F-6197-4A64-A80A-E0DF1E1048E0}", IAgVADTM2012)
agcls.AgTypeNameMap["IAgVADTM2012"] = IAgVADTM2012
__all__.append("IAgVADTM2012")

class IAgVADTM2020(object):
    """Properties for the DTM 2020 atmospheric model."""
    _uuid = "{50AA8B32-1905-416D-B45E-631E78F5F174}"
    _num_methods = 29
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_SetUseApproximateAltitude"] = _raise_uninitialized_error
        self.__dict__["_GetComputesTemperature"] = _raise_uninitialized_error
        self.__dict__["_GetComputesPressure"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataSource"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7Avg"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelType"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_SetDragModelPluginName"] = _raise_uninitialized_error
        self.__dict__["_GetDragModelPlugin"] = _raise_uninitialized_error
        self.__dict__["_GetF10p7"] = _raise_uninitialized_error
        self.__dict__["_SetF10p7"] = _raise_uninitialized_error
        self.__dict__["_GetKp"] = _raise_uninitialized_error
        self.__dict__["_SetKp"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVADTM2020._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVADTM2020 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVADTM2020 = agcom.GUID(IAgVADTM2020._uuid)
        vtable_offset_local = IAgVADTM2020._vtable_offset - 1
        self.__dict__["_GetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+1, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseApproximateAltitude"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+2, agcom.VARIANT_BOOL)
        self.__dict__["_GetComputesTemperature"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetComputesPressure"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+4, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7Avg"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetAtmosDataFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_GetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetDragModelType"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_GetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+15, POINTER(agcom.BSTR))
        self.__dict__["_SetDragModelPluginName"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+16, agcom.BSTR)
        self.__dict__["_GetDragModelPlugin"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+17, POINTER(agcom.PVOID))
        self.__dict__["_GetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetF10p7"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetKp"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxSource"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+26, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+27, agcom.BSTR)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+28, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVADTM2020, vtable_offset_local+29, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVADTM2020.__dict__ and type(IAgVADTM2020.__dict__[attrname]) == property:
            return IAgVADTM2020.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVADTM2020.")
    
    @property
    def UseApproximateAltitude(self) -> bool:
        """True if using approximate altitude formula."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseApproximateAltitude"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseApproximateAltitude.setter
    def UseApproximateAltitude(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseApproximateAltitude"](arg_inVal.COM_val))

    @property
    def ComputesTemperature(self) -> bool:
        """Flag indicates whether this model computes temperature."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesTemperature"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ComputesPressure(self) -> bool:
        """Flag indicates whether this model computes pressure."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetComputesPressure"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def AtmosDataSource(self) -> "AgEVAAtmosDataSource":
        """The atmospheric model data source - data file or constant values."""
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataSource.setter
    def AtmosDataSource(self, inVal:"AgEVAAtmosDataSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAAtmosDataSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataSource"](arg_inVal.COM_val))

    @property
    def F10p7Avg(self) -> float:
        """Average solar Flux (F10.7); the 81-day averaged Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7Avg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7Avg.setter
    def F10p7Avg(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7Avg"](arg_inVal.COM_val))

    @property
    def AtmosDataFilename(self) -> str:
        """Flux file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataFilename.setter
    def AtmosDataFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataFilename"](arg_inVal.COM_val))

    @property
    def DragModelType(self) -> "AgEVADragModelType":
        """Drag model type."""
        with agmarshall.AgEnum_arg(AgEVADragModelType) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelType.setter
    def DragModelType(self, inVal:"AgEVADragModelType") -> None:
        with agmarshall.AgEnum_arg(AgEVADragModelType, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelType"](arg_inVal.COM_val))

    @property
    def DragModelPluginName(self) -> str:
        """The name of the drag model plugin."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPluginName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DragModelPluginName.setter
    def DragModelPluginName(self, pVal:str) -> None:
        with agmarshall.BSTR_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetDragModelPluginName"](arg_pVal.COM_val))

    @property
    def DragModelPlugin(self) -> "IAgVADragModelPlugin":
        """Drag model plugin properties."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetDragModelPlugin"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def F10p7(self) -> float:
        """Solar Flux (F10.7); the daily Ottawa 10.7 cm solar flux value. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetF10p7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @F10p7.setter
    def F10p7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetF10p7"](arg_inVal.COM_val))

    @property
    def Kp(self) -> float:
        """Geomagnetic Index (Kp). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetKp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Kp.setter
    def Kp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetKp"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxSource(self) -> "AgEVAGeoMagneticFluxSource":
        """Whether to use Kp or Ap data from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxSource.setter
    def AtmosDataGeoMagneticFluxSource(self, inVal:"AgEVAGeoMagneticFluxSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxSource"](arg_inVal.COM_val))

    @property
    def AtmosDataGeoMagneticFluxUpdateRate(self) -> "AgEVAGeoMagneticFluxUpdateRate":
        """The update rate of geomagnetic flux values from the flux file."""
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosDataGeoMagneticFluxUpdateRate"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosDataGeoMagneticFluxUpdateRate.setter
    def AtmosDataGeoMagneticFluxUpdateRate(self, inVal:"AgEVAGeoMagneticFluxUpdateRate") -> None:
        with agmarshall.AgEnum_arg(AgEVAGeoMagneticFluxUpdateRate, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosDataGeoMagneticFluxUpdateRate"](arg_inVal.COM_val))

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Drag variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Drag N-Plate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{50AA8B32-1905-416D-B45E-631E78F5F174}", IAgVADTM2020)
agcls.AgTypeNameMap["IAgVADTM2020"] = IAgVADTM2020
__all__.append("IAgVADTM2020")

class IAgVAGravityFieldFunction(object):
    """Properties for the Gravitational Force gravity model - a complex gravitational force calculation, optionally including solid and ocean tide effects."""
    _uuid = "{B199E3B6-9964-4CAA-A824-1F106886E0DE}"
    _num_methods = 35
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_SetGravityFilename"] = _raise_uninitialized_error
        self.__dict__["_GetDegree"] = _raise_uninitialized_error
        self.__dict__["_SetDegree"] = _raise_uninitialized_error
        self.__dict__["_GetOrder"] = _raise_uninitialized_error
        self.__dict__["_SetOrder"] = _raise_uninitialized_error
        self.__dict__["_GetMaxDegreeText"] = _raise_uninitialized_error
        self.__dict__["_GetMaxOrderText"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeTimeDependentSolidTides"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeTimeDependentSolidTides"] = _raise_uninitialized_error
        self.__dict__["_GetSolidTideMinAmp"] = _raise_uninitialized_error
        self.__dict__["_SetSolidTideMinAmp"] = _raise_uninitialized_error
        self.__dict__["_GetUseOceanTides"] = _raise_uninitialized_error
        self.__dict__["_SetUseOceanTides"] = _raise_uninitialized_error
        self.__dict__["_GetOceanTideMinAmp"] = _raise_uninitialized_error
        self.__dict__["_SetOceanTideMinAmp"] = _raise_uninitialized_error
        self.__dict__["_GetMinRadiusPercent"] = _raise_uninitialized_error
        self.__dict__["_SetMinRadiusPercent"] = _raise_uninitialized_error
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetOceanTideMaxDegree"] = _raise_uninitialized_error
        self.__dict__["_SetOceanTideMaxDegree"] = _raise_uninitialized_error
        self.__dict__["_GetOceanTideMaxOrder"] = _raise_uninitialized_error
        self.__dict__["_SetOceanTideMaxOrder"] = _raise_uninitialized_error
        self.__dict__["_GetSolidTideType"] = _raise_uninitialized_error
        self.__dict__["_SetSolidTideType"] = _raise_uninitialized_error
        self.__dict__["_GetTruncateSolidTides"] = _raise_uninitialized_error
        self.__dict__["_SetTruncateSolidTides"] = _raise_uninitialized_error
        self.__dict__["_GetUseSecularVariations"] = _raise_uninitialized_error
        self.__dict__["_SetUseSecularVariations"] = _raise_uninitialized_error
        self.__dict__["_GetPartialsDegree"] = _raise_uninitialized_error
        self.__dict__["_SetPartialsDegree"] = _raise_uninitialized_error
        self.__dict__["_GetPartialsOrder"] = _raise_uninitialized_error
        self.__dict__["_SetPartialsOrder"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPartialsDegreeText"] = _raise_uninitialized_error
        self.__dict__["_GetMaxPartialsOrderText"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGravityFieldFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGravityFieldFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGravityFieldFunction = agcom.GUID(IAgVAGravityFieldFunction._uuid)
        vtable_offset_local = IAgVAGravityFieldFunction._vtable_offset - 1
        self.__dict__["_GetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetGravityFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMaxDegreeText"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_GetMaxOrderText"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+8, POINTER(agcom.BSTR))
        self.__dict__["_GetIncludeTimeDependentSolidTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+9, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeTimeDependentSolidTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+10, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolidTideMinAmp"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolidTideMinAmp"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetUseOceanTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseOceanTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetOceanTideMinAmp"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetOceanTideMinAmp"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMinRadiusPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinRadiusPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_GetOceanTideMaxDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+20, POINTER(agcom.LONG))
        self.__dict__["_SetOceanTideMaxDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+21, agcom.LONG)
        self.__dict__["_GetOceanTideMaxOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetOceanTideMaxOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+23, agcom.LONG)
        self.__dict__["_GetSolidTideType"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+24, POINTER(agcom.LONG))
        self.__dict__["_SetSolidTideType"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+25, agcom.LONG)
        self.__dict__["_GetTruncateSolidTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+26, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetTruncateSolidTides"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+27, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSecularVariations"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+28, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSecularVariations"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+29, agcom.VARIANT_BOOL)
        self.__dict__["_GetPartialsDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+30, POINTER(agcom.LONG))
        self.__dict__["_SetPartialsDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+31, agcom.LONG)
        self.__dict__["_GetPartialsOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+32, POINTER(agcom.LONG))
        self.__dict__["_SetPartialsOrder"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+33, agcom.LONG)
        self.__dict__["_GetMaxPartialsDegreeText"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+34, POINTER(agcom.BSTR))
        self.__dict__["_GetMaxPartialsOrderText"] = IAGFUNCTYPE(pUnk, IID_IAgVAGravityFieldFunction, vtable_offset_local+35, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGravityFieldFunction.__dict__ and type(IAgVAGravityFieldFunction.__dict__[attrname]) == property:
            return IAgVAGravityFieldFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGravityFieldFunction.")
    
    @property
    def GravityFilename(self) -> str:
        """The name of the file containing the gravity field."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravityFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravityFilename.setter
    def GravityFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravityFilename"](arg_inVal.COM_val))

    @property
    def Degree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDegree"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Degree.setter
    def Degree(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDegree"](arg_inVal.COM_val))

    @property
    def Order(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity computations. Valid range is from 0 to 90, depending on the gravity model. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Order.setter
    def Order(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOrder"](arg_inVal.COM_val))

    @property
    def MaxDegreeText(self) -> str:
        """Displays the maximum degree permissible for the gravity model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxDegreeText"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxOrderText(self) -> str:
        """Displays the maximum order permissible for the gravity model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxOrderText"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def IncludeTimeDependentSolidTides(self) -> bool:
        """True if including time dependent solid tides."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeTimeDependentSolidTides"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IncludeTimeDependentSolidTides.setter
    def IncludeTimeDependentSolidTides(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeTimeDependentSolidTides"](arg_inVal.COM_val))

    @property
    def SolidTideMinAmp(self) -> float:
        """The minimum amplitude for solid tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolidTideMinAmp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolidTideMinAmp.setter
    def SolidTideMinAmp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolidTideMinAmp"](arg_inVal.COM_val))

    @property
    def UseOceanTides(self) -> bool:
        """True if using ocean tides/"""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseOceanTides"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseOceanTides.setter
    def UseOceanTides(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseOceanTides"](arg_inVal.COM_val))

    @property
    def OceanTideMinAmp(self) -> float:
        """The minimum amplitude for ocean tides; contributors that are below the minimum amplitude will not be factored into the computation. Uses SmallDistance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOceanTideMinAmp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OceanTideMinAmp.setter
    def OceanTideMinAmp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOceanTideMinAmp"](arg_inVal.COM_val))

    @property
    def MinRadiusPercent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinRadiusPercent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinRadiusPercent.setter
    def MinRadiusPercent(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinRadiusPercent"](arg_inVal.COM_val))

    @property
    def CentralBodyName(self) -> str:
        """The name of the central body"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def OceanTideMaxDegree(self) -> int:
        """The maximum degree for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOceanTideMaxDegree"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OceanTideMaxDegree.setter
    def OceanTideMaxDegree(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOceanTideMaxDegree"](arg_inVal.COM_val))

    @property
    def OceanTideMaxOrder(self) -> int:
        """The maximum order for force contributions from ocean tides that will be included in the computation. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOceanTideMaxOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OceanTideMaxOrder.setter
    def OceanTideMaxOrder(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOceanTideMaxOrder"](arg_inVal.COM_val))

    @property
    def SolidTideType(self) -> "AgESolidTide":
        """The type of solid tide contribution to be modeled."""
        with agmarshall.AgEnum_arg(AgESolidTide) as arg_pSolidTide:
            agcls.evaluate_hresult(self.__dict__["_GetSolidTideType"](byref(arg_pSolidTide.COM_val)))
            return arg_pSolidTide.python_val

    @SolidTideType.setter
    def SolidTideType(self, solidTide:"AgESolidTide") -> None:
        with agmarshall.AgEnum_arg(AgESolidTide, solidTide) as arg_solidTide:
            agcls.evaluate_hresult(self.__dict__["_SetSolidTideType"](arg_solidTide.COM_val))

    @property
    def TruncateSolidTides(self) -> bool:
        """True if solid tide terms (including permanent tide) won't be included beyond the degree and order selected for the gravity model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTruncateSolidTides"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TruncateSolidTides.setter
    def TruncateSolidTides(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetTruncateSolidTides"](arg_pVal.COM_val))

    @property
    def UseSecularVariations(self) -> bool:
        """Opt whether to include or ignore secular variations defined by the gravity field model."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSecularVariations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSecularVariations.setter
    def UseSecularVariations(self, pVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(pVal) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSecularVariations"](arg_pVal.COM_val))

    @property
    def PartialsDegree(self) -> int:
        """The degree of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the degree used for state computations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPartialsDegree"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PartialsDegree.setter
    def PartialsDegree(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPartialsDegree"](arg_inVal.COM_val))

    @property
    def PartialsOrder(self) -> int:
        """The order of geopotential coefficients to be included for Central Body gravity state transition matrix computations. Valid range is from 0 to 90, depending on the gravity model and the order used for state computations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPartialsOrder"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PartialsOrder.setter
    def PartialsOrder(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPartialsOrder"](arg_inVal.COM_val))

    @property
    def MaxPartialsDegreeText(self) -> str:
        """Displays the maximum degree permissible for the gravity model partials used in the STM."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPartialsDegreeText"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MaxPartialsOrderText(self) -> str:
        """Displays the maximum order permissible for the gravity model partials used in the STM."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxPartialsOrderText"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{B199E3B6-9964-4CAA-A824-1F106886E0DE}", IAgVAGravityFieldFunction)
agcls.AgTypeNameMap["IAgVAGravityFieldFunction"] = IAgVAGravityFieldFunction
__all__.append("IAgVAGravityFieldFunction")

class IAgVAPointMassFunction(object):
    """Properties for the Point Mass Function."""
    _uuid = "{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGravSource"] = _raise_uninitialized_error
        self.__dict__["_SetGravSource"] = _raise_uninitialized_error
        self.__dict__["_GetMu"] = _raise_uninitialized_error
        self.__dict__["_SetMu"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPointMassFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPointMassFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPointMassFunction = agcom.GUID(IAgVAPointMassFunction._uuid)
        vtable_offset_local = IAgVAPointMassFunction._vtable_offset - 1
        self.__dict__["_GetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAPointMassFunction, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAPointMassFunction, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMu"] = IAGFUNCTYPE(pUnk, IID_IAgVAPointMassFunction, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMu"] = IAGFUNCTYPE(pUnk, IID_IAgVAPointMassFunction, vtable_offset_local+4, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPointMassFunction.__dict__ and type(IAgVAPointMassFunction.__dict__[attrname]) == property:
            return IAgVAPointMassFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPointMassFunction.")
    
    @property
    def GravSource(self) -> "AgEVAGravParamSource":
        """The source for the third body's gravitational parameter."""
        with agmarshall.AgEnum_arg(AgEVAGravParamSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravParamSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGravParamSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravSource"](arg_inVal.COM_val))

    @property
    def Mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMu"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Mu.setter
    def Mu(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMu"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{DF0A48DA-12AA-4BCF-A9E1-CDE80A2C89A3}", IAgVAPointMassFunction)
agcls.AgTypeNameMap["IAgVAPointMassFunction"] = IAgVAPointMassFunction
__all__.append("IAgVAPointMassFunction")

class IAgVATwoBodyFunction(object):
    """Properties for the Two Body gravity model - a standard point mass model."""
    _uuid = "{827AF54A-9389-4151-8193-7B3FAE64E66D}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetGravSource"] = _raise_uninitialized_error
        self.__dict__["_SetGravSource"] = _raise_uninitialized_error
        self.__dict__["_GetMu"] = _raise_uninitialized_error
        self.__dict__["_SetMu"] = _raise_uninitialized_error
        self.__dict__["_GetMinRadiusPercent"] = _raise_uninitialized_error
        self.__dict__["_SetMinRadiusPercent"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVATwoBodyFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVATwoBodyFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVATwoBodyFunction = agcom.GUID(IAgVATwoBodyFunction._uuid)
        vtable_offset_local = IAgVATwoBodyFunction._vtable_offset - 1
        self.__dict__["_GetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetGravSource"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetMu"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMu"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetMinRadiusPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinRadiusPercent"] = IAGFUNCTYPE(pUnk, IID_IAgVATwoBodyFunction, vtable_offset_local+6, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVATwoBodyFunction.__dict__ and type(IAgVATwoBodyFunction.__dict__[attrname]) == property:
            return IAgVATwoBodyFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVATwoBodyFunction.")
    
    @property
    def GravSource(self) -> "AgEVAGravParamSource":
        """The source for the gravitational parameter."""
        with agmarshall.AgEnum_arg(AgEVAGravParamSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetGravSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @GravSource.setter
    def GravSource(self, inVal:"AgEVAGravParamSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAGravParamSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetGravSource"](arg_inVal.COM_val))

    @property
    def Mu(self) -> float:
        """The gravitational parameter. Uses Gravity Param Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMu"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Mu.setter
    def Mu(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMu"](arg_inVal.COM_val))

    @property
    def MinRadiusPercent(self) -> float:
        """The percentage of the central body's minimum radius at which a modified force model (only the two-body force) will be used - provided there is no altitude stopping condition. Uses Percent Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinRadiusPercent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinRadiusPercent.setter
    def MinRadiusPercent(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinRadiusPercent"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{827AF54A-9389-4151-8193-7B3FAE64E66D}", IAgVATwoBodyFunction)
agcls.AgTypeNameMap["IAgVATwoBodyFunction"] = IAgVATwoBodyFunction
__all__.append("IAgVATwoBodyFunction")

class IAgVAHPOPPluginFunction(object):
    """Properties for the HPOP Plugin propagator function."""
    _uuid = "{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAHPOPPluginFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAHPOPPluginFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAHPOPPluginFunction = agcom.GUID(IAgVAHPOPPluginFunction._uuid)
        vtable_offset_local = IAgVAHPOPPluginFunction._vtable_offset - 1
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAHPOPPluginFunction, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAHPOPPluginFunction, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVAHPOPPluginFunction, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAHPOPPluginFunction.__dict__ and type(IAgVAHPOPPluginFunction.__dict__[attrname]) == property:
            return IAgVAHPOPPluginFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAHPOPPluginFunction.")
    
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{53854E6C-8125-44F8-B0B3-8CB5175C8AE9}", IAgVAHPOPPluginFunction)
agcls.AgTypeNameMap["IAgVAHPOPPluginFunction"] = IAgVAHPOPPluginFunction
__all__.append("IAgVAHPOPPluginFunction")

class IAgVAEOMFuncPluginFunction(object):
    """Properties for the EOM Function Plugin propagator function."""
    _uuid = "{D652969D-D848-4AF2-91C9-8BD479D0F681}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEOMFuncPluginFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEOMFuncPluginFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEOMFuncPluginFunction = agcom.GUID(IAgVAEOMFuncPluginFunction._uuid)
        vtable_offset_local = IAgVAEOMFuncPluginFunction._vtable_offset - 1
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAEOMFuncPluginFunction, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAEOMFuncPluginFunction, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVAEOMFuncPluginFunction, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEOMFuncPluginFunction.__dict__ and type(IAgVAEOMFuncPluginFunction.__dict__[attrname]) == property:
            return IAgVAEOMFuncPluginFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEOMFuncPluginFunction.")
    
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{D652969D-D848-4AF2-91C9-8BD479D0F681}", IAgVAEOMFuncPluginFunction)
agcls.AgTypeNameMap["IAgVAEOMFuncPluginFunction"] = IAgVAEOMFuncPluginFunction
__all__.append("IAgVAEOMFuncPluginFunction")

class IAgVASRPAeroT20(object):
    """Properties for the Aerospace T20 solar radiation pressure model for GPS block IIA."""
    _uuid = "{1B712154-4552-4453-B784-5C773A9F88C0}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPAeroT20._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPAeroT20 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPAeroT20 = agcom.GUID(IAgVASRPAeroT20._uuid)
        vtable_offset_local = IAgVASRPAeroT20._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT20, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPAeroT20.__dict__ and type(IAgVASRPAeroT20.__dict__[attrname]) == property:
            return IAgVASRPAeroT20.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPAeroT20.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{1B712154-4552-4453-B784-5C773A9F88C0}", IAgVASRPAeroT20)
agcls.AgTypeNameMap["IAgVASRPAeroT20"] = IAgVASRPAeroT20
__all__.append("IAgVASRPAeroT20")

class IAgVASRPAeroT30(object):
    """Properties for the Aerospace T30 solar radiation pressure model for GPS block IIR."""
    _uuid = "{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPAeroT30._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPAeroT30 from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPAeroT30 = agcom.GUID(IAgVASRPAeroT30._uuid)
        vtable_offset_local = IAgVASRPAeroT30._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPAeroT30, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPAeroT30.__dict__ and type(IAgVASRPAeroT30.__dict__[attrname]) == property:
            return IAgVASRPAeroT30.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPAeroT30.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E29DBFD3-883F-465C-A4D4-D090A83F5EBC}", IAgVASRPAeroT30)
agcls.AgTypeNameMap["IAgVASRPAeroT30"] = IAgVASRPAeroT30
__all__.append("IAgVASRPAeroT30")

class IAgVASRPGSPM04aIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIA."""
    _uuid = "{73504326-18B8-40FB-A466-DB8908769B9D}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPGSPM04aIIA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aIIA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPGSPM04aIIA = agcom.GUID(IAgVASRPGSPM04aIIA._uuid)
        vtable_offset_local = IAgVASRPGSPM04aIIA._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIA, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aIIA.__dict__ and type(IAgVASRPGSPM04aIIA.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aIIA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aIIA.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{73504326-18B8-40FB-A466-DB8908769B9D}", IAgVASRPGSPM04aIIA)
agcls.AgTypeNameMap["IAgVASRPGSPM04aIIA"] = IAgVASRPGSPM04aIIA
__all__.append("IAgVASRPGSPM04aIIA")

class IAgVASRPGSPM04aIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04a for block IIR."""
    _uuid = "{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPGSPM04aIIR._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aIIR from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPGSPM04aIIR = agcom.GUID(IAgVASRPGSPM04aIIR._uuid)
        vtable_offset_local = IAgVASRPGSPM04aIIR._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aIIR, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aIIR.__dict__ and type(IAgVASRPGSPM04aIIR.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aIIR.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aIIR.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{79FEA80C-9B5F-4FDE-9661-286B1DAFF645}", IAgVASRPGSPM04aIIR)
agcls.AgTypeNameMap["IAgVASRPGSPM04aIIR"] = IAgVASRPGSPM04aIIR
__all__.append("IAgVASRPGSPM04aIIR")

class IAgVASRPGSPM04aeIIA(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIA."""
    _uuid = "{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPGSPM04aeIIA._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aeIIA from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPGSPM04aeIIA = agcom.GUID(IAgVASRPGSPM04aeIIA._uuid)
        vtable_offset_local = IAgVASRPGSPM04aeIIA._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIA, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aeIIA.__dict__ and type(IAgVASRPGSPM04aeIIA.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aeIIA.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aeIIA.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3F99DF3B-1BC5-40F2-826D-751DCE4BB77C}", IAgVASRPGSPM04aeIIA)
agcls.AgTypeNameMap["IAgVASRPGSPM04aeIIA"] = IAgVASRPGSPM04aeIIA
__all__.append("IAgVASRPGSPM04aeIIA")

class IAgVASRPGSPM04aeIIR(object):
    """Properties for the Bar-Sever GPS Solar Pressure Model 04ae for block IIR."""
    _uuid = "{8A1CAF39-9680-4405-942D-A86D279EAE24}"
    _num_methods = 13
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPGSPM04aeIIR._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPGSPM04aeIIR from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPGSPM04aeIIR = agcom.GUID(IAgVASRPGSPM04aeIIR._uuid)
        vtable_offset_local = IAgVASRPGSPM04aeIIR._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+9, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+11, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+12, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPGSPM04aeIIR, vtable_offset_local+13, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPGSPM04aeIIR.__dict__ and type(IAgVASRPGSPM04aeIIR.__dict__[attrname]) == property:
            return IAgVASRPGSPM04aeIIR.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPGSPM04aeIIR.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar radius should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{8A1CAF39-9680-4405-942D-A86D279EAE24}", IAgVASRPGSPM04aeIIR)
agcls.AgTypeNameMap["IAgVASRPGSPM04aeIIR"] = IAgVASRPGSPM04aeIIR
__all__.append("IAgVASRPGSPM04aeIIR")

class IAgVASRPSpherical(object):
    """Properties for the Spherical SRP model; assumes a spherical spacecraft. The equation used by STK is described in the Solar Radiation technical note."""
    _uuid = "{B8F7E804-16B0-447F-A75A-B75DF05287B0}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_SetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_GetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_SetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_GetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_SetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPSpherical._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPSpherical from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPSpherical = agcom.GUID(IAgVASRPSpherical._uuid)
        vtable_offset_local = IAgVASRPSpherical._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPSpherical, vtable_offset_local+19, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPSpherical.__dict__ and type(IAgVASRPSpherical.__dict__[attrname]) == property:
            return IAgVASRPSpherical.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPSpherical.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanFlux"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanFlux"](arg_inVal.COM_val))

    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLuminosity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLuminosity"](arg_inVal.COM_val))

    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarForceMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarForceMethod"](arg_inVal.COM_val))

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B8F7E804-16B0-447F-A75A-B75DF05287B0}", IAgVASRPSpherical)
agcls.AgTypeNameMap["IAgVASRPSpherical"] = IAgVASRPSpherical
__all__.append("IAgVASRPSpherical")

class IAgVASRPNPlate(object):
    """Properties for the N-plate SRP model."""
    _uuid = "{5DE80C27-861E-4596-9461-414741A793D1}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_SetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_GetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_SetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_GetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_SetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_GetNPlateDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetNPlateDefinitionFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPNPlate._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPNPlate from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPNPlate = agcom.GUID(IAgVASRPNPlate._uuid)
        vtable_offset_local = IAgVASRPNPlate._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetNPlateDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPNPlate, vtable_offset_local+21, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPNPlate.__dict__ and type(IAgVASRPNPlate.__dict__[attrname]) == property:
            return IAgVASRPNPlate.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPNPlate.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanFlux"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanFlux"](arg_inVal.COM_val))

    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLuminosity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLuminosity"](arg_inVal.COM_val))

    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarForceMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarForceMethod"](arg_inVal.COM_val))

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))

    @property
    def NPlateDefinitionFile(self) -> str:
        """Full path of NPlate definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNPlateDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @NPlateDefinitionFile.setter
    def NPlateDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetNPlateDefinitionFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5DE80C27-861E-4596-9461-414741A793D1}", IAgVASRPNPlate)
agcls.AgTypeNameMap["IAgVASRPNPlate"] = IAgVASRPNPlate
__all__.append("IAgVASRPNPlate")

class IAgVASRPTabAreaVec(object):
    """Properties for the tabulated area vector SRP model."""
    _uuid = "{796EAE38-5298-4315-AA74-29C810F2E3FE}"
    _num_methods = 23
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_SetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_GetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_SetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_GetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_SetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_GetTabAreaVectorDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_SetTabAreaVectorDefinitionFile"] = _raise_uninitialized_error
        self.__dict__["_GetInterpolationMethod"] = _raise_uninitialized_error
        self.__dict__["_SetInterpolationMethod"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPTabAreaVec._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPTabAreaVec from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPTabAreaVec = agcom.GUID(IAgVASRPTabAreaVec._uuid)
        vtable_offset_local = IAgVASRPTabAreaVec._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetTabAreaVectorDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetTabAreaVectorDefinitionFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+21, agcom.BSTR)
        self.__dict__["_GetInterpolationMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+22, POINTER(agcom.LONG))
        self.__dict__["_SetInterpolationMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPTabAreaVec, vtable_offset_local+23, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPTabAreaVec.__dict__ and type(IAgVASRPTabAreaVec.__dict__[attrname]) == property:
            return IAgVASRPTabAreaVec.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPTabAreaVec.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanFlux"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanFlux"](arg_inVal.COM_val))

    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLuminosity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLuminosity"](arg_inVal.COM_val))

    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarForceMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarForceMethod"](arg_inVal.COM_val))

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))

    @property
    def TabAreaVectorDefinitionFile(self) -> str:
        """Full path of the tabulated area vector definition file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTabAreaVectorDefinitionFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @TabAreaVectorDefinitionFile.setter
    def TabAreaVectorDefinitionFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTabAreaVectorDefinitionFile"](arg_inVal.COM_val))

    @property
    def InterpolationMethod(self) -> "AgEVATabVecInterpMethod":
        """The file interpolation method."""
        with agmarshall.AgEnum_arg(AgEVATabVecInterpMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInterpolationMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InterpolationMethod.setter
    def InterpolationMethod(self, inVal:"AgEVATabVecInterpMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVATabVecInterpMethod, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInterpolationMethod"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{796EAE38-5298-4315-AA74-29C810F2E3FE}", IAgVASRPTabAreaVec)
agcls.AgTypeNameMap["IAgVASRPTabAreaVec"] = IAgVASRPTabAreaVec
__all__.append("IAgVASRPTabAreaVec")

class IAgVASRPVariableArea(object):
    """Properties for the Variable Area SRP model."""
    _uuid = "{4124EBC1-ABC6-4933-84D2-0F1232D8B630}"
    _num_methods = 21
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_SetMeanFlux"] = _raise_uninitialized_error
        self.__dict__["_GetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_SetLuminosity"] = _raise_uninitialized_error
        self.__dict__["_GetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_SetSolarForceMethod"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_GetVariableAreaHistoryFile"] = _raise_uninitialized_error
        self.__dict__["_SetVariableAreaHistoryFile"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPVariableArea._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPVariableArea from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPVariableArea = agcom.GUID(IAgVASRPVariableArea._uuid)
        vtable_offset_local = IAgVASRPVariableArea._vtable_offset - 1
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+7, POINTER(agcom.PVOID))
        self.__dict__["_GetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMeanFlux"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLuminosity"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+12, POINTER(agcom.LONG))
        self.__dict__["_SetSolarForceMethod"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+14, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+15, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+17, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+18, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+19, agcom.DOUBLE)
        self.__dict__["_GetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+20, POINTER(agcom.BSTR))
        self.__dict__["_SetVariableAreaHistoryFile"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPVariableArea, vtable_offset_local+21, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPVariableArea.__dict__ and type(IAgVASRPVariableArea.__dict__[attrname]) == property:
            return IAgVASRPVariableArea.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPVariableArea.")
    
    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def MeanFlux(self) -> float:
        """The mean solar flux at 1 au (W/m^2)."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMeanFlux"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MeanFlux.setter
    def MeanFlux(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMeanFlux"](arg_inVal.COM_val))

    @property
    def Luminosity(self) -> float:
        """The luminosity of sun. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLuminosity"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Luminosity.setter
    def Luminosity(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLuminosity"](arg_inVal.COM_val))

    @property
    def SolarForceMethod(self) -> "AgEVASolarForceMethod":
        """The solar force method"""
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarForceMethod"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarForceMethod.setter
    def SolarForceMethod(self, inVal:"AgEVASolarForceMethod") -> None:
        with agmarshall.AgEnum_arg(AgEVASolarForceMethod, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarForceMethod"](arg_inVal.COM_val))

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))

    @property
    def VariableAreaHistoryFile(self) -> str:
        """Full path of the variable area history file."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetVariableAreaHistoryFile"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @VariableAreaHistoryFile.setter
    def VariableAreaHistoryFile(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetVariableAreaHistoryFile"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{4124EBC1-ABC6-4933-84D2-0F1232D8B630}", IAgVASRPVariableArea)
agcls.AgTypeNameMap["IAgVASRPVariableArea"] = IAgVASRPVariableArea
__all__.append("IAgVASRPVariableArea")

class IAgVAThirdBodyFunction(object):
    """Properties for a Third Body propagator function. The IAgComponentInfo object returned by the mode property can be cast to IAgVAGravityFieldFunction or IAgVAPointMassFunction depending on the selected ModeType."""
    _uuid = "{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetThirdBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetThirdBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetEphemSource"] = _raise_uninitialized_error
        self.__dict__["_SetEphemSource"] = _raise_uninitialized_error
        self.__dict__["_GetMode"] = _raise_uninitialized_error
        self.__dict__["_SetModeType"] = _raise_uninitialized_error
        self.__dict__["_GetModeType"] = _raise_uninitialized_error
        self.__dict__["_GetEphemerisSourceWarning"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAThirdBodyFunction._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThirdBodyFunction from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAThirdBodyFunction = agcom.GUID(IAgVAThirdBodyFunction._uuid)
        vtable_offset_local = IAgVAThirdBodyFunction._vtable_offset - 1
        self.__dict__["_GetThirdBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetThirdBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetEphemSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetEphemSource"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_SetModeType"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetModeType"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_GetEphemerisSourceWarning"] = IAGFUNCTYPE(pUnk, IID_IAgVAThirdBodyFunction, vtable_offset_local+8, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThirdBodyFunction.__dict__ and type(IAgVAThirdBodyFunction.__dict__[attrname]) == property:
            return IAgVAThirdBodyFunction.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThirdBodyFunction.")
    
    @property
    def ThirdBodyName(self) -> str:
        """The selected third body model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThirdBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThirdBodyName.setter
    def ThirdBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetThirdBodyName"](arg_inVal.COM_val))

    @property
    def EphemSource(self) -> "AgEVAEphemSource":
        """Source for the third body's ephemeris"""
        with agmarshall.AgEnum_arg(AgEVAEphemSource) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEphemSource"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EphemSource.setter
    def EphemSource(self, inVal:"AgEVAEphemSource") -> None:
        with agmarshall.AgEnum_arg(AgEVAEphemSource, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEphemSource"](arg_inVal.COM_val))

    @property
    def Mode(self) -> "IAgComponentInfo":
        """The third body gravity mode. The IAgComponentInfo object returned by this property can be cast to IAgVAGravityFieldFunction or IAgVAPointMassFunction depending on the selected ModeType."""
        with agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetMode"](byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def SetModeType(self, mode:"AgEVAThirdBodyMode") -> None:
        """The third body gravity mode."""
        with agmarshall.AgEnum_arg(AgEVAThirdBodyMode, mode) as arg_mode:
            agcls.evaluate_hresult(self.__dict__["_SetModeType"](arg_mode.COM_val))

    @property
    def ModeType(self) -> "AgEVAThirdBodyMode":
        """The third body gravity mode type."""
        with agmarshall.AgEnum_arg(AgEVAThirdBodyMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetModeType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def EphemerisSourceWarning(self) -> str:
        """Returns a warning message if the Ephemeris source and the gravity are not compatible"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEphemerisSourceWarning"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{86FDAC1D-8E57-4915-AA9B-E6C35E06C9BC}", IAgVAThirdBodyFunction)
agcls.AgTypeNameMap["IAgVAThirdBodyFunction"] = IAgVAThirdBodyFunction
__all__.append("IAgVAThirdBodyFunction")

class IAgVASRPReflectionPlugin(object):
    """Properties for the plugin SRP Refelction."""
    _uuid = "{2DF13668-98B3-4E69-89CA-C8136EAE49D9}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        self.__dict__["_GetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_SetAtmosAlt"] = _raise_uninitialized_error
        self.__dict__["_GetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_SetShadowModel"] = _raise_uninitialized_error
        self.__dict__["_GetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_SetSunPosition"] = _raise_uninitialized_error
        self.__dict__["_GetEclipsingBodies"] = _raise_uninitialized_error
        self.__dict__["_GetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_SetIncludeBoundaryMitigation"] = _raise_uninitialized_error
        self.__dict__["_GetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_SetUseSunCbFileValues"] = _raise_uninitialized_error
        self.__dict__["_GetSolarRadius"] = _raise_uninitialized_error
        self.__dict__["_SetSolarRadius"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVASRPReflectionPlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVASRPReflectionPlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVASRPReflectionPlugin = agcom.GUID(IAgVASRPReflectionPlugin._uuid)
        vtable_offset_local = IAgVASRPReflectionPlugin._vtable_offset - 1
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+4, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAtmosAlt"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+5, agcom.DOUBLE)
        self.__dict__["_GetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+6, POINTER(agcom.LONG))
        self.__dict__["_SetShadowModel"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_GetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+8, POINTER(agcom.LONG))
        self.__dict__["_SetSunPosition"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+9, agcom.LONG)
        self.__dict__["_GetEclipsingBodies"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+10, POINTER(agcom.PVOID))
        self.__dict__["_GetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetIncludeBoundaryMitigation"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+13, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseSunCbFileValues"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+14, agcom.VARIANT_BOOL)
        self.__dict__["_GetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSolarRadius"] = IAGFUNCTYPE(pUnk, IID_IAgVASRPReflectionPlugin, vtable_offset_local+16, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVASRPReflectionPlugin.__dict__ and type(IAgVASRPReflectionPlugin.__dict__[attrname]) == property:
            return IAgVASRPReflectionPlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVASRPReflectionPlugin.")
    
    @property
    def PluginIdentifier(self) -> str:
        """The plugin name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the selected plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def AtmosAlt(self) -> float:
        """The atmospheric altitude for eclipse. A simple model to account for some measure of attenuation that simply increases the shape of the Earth by the defined altitude height, often taken to be 23 km. Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAtmosAlt"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @AtmosAlt.setter
    def AtmosAlt(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAtmosAlt"](arg_inVal.COM_val))

    @property
    def ShadowModel(self) -> "AgEVAShadowModel":
        """The shadow model type."""
        with agmarshall.AgEnum_arg(AgEVAShadowModel) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetShadowModel"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ShadowModel.setter
    def ShadowModel(self, inVal:"AgEVAShadowModel") -> None:
        with agmarshall.AgEnum_arg(AgEVAShadowModel, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetShadowModel"](arg_inVal.COM_val))

    @property
    def SunPosition(self) -> "AgEVASunPosition":
        """The sun position computation."""
        with agmarshall.AgEnum_arg(AgEVASunPosition) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSunPosition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SunPosition.setter
    def SunPosition(self, inVal:"AgEVASunPosition") -> None:
        with agmarshall.AgEnum_arg(AgEVASunPosition, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSunPosition"](arg_inVal.COM_val))

    @property
    def EclipsingBodies(self) -> "IAgVACentralBodyCollection":
        """Other eclipsing bodies."""
        with agmarshall.AgInterface_out_arg() as arg_ppCentralBodyCollection:
            agcls.evaluate_hresult(self.__dict__["_GetEclipsingBodies"](byref(arg_ppCentralBodyCollection.COM_val)))
            return arg_ppCentralBodyCollection.python_val

    @property
    def IncludeBoundaryMitigation(self) -> bool:
        """True if shadow boundary mitigation should be performed; the state of the satellite after crossing a shadow boundary will be corrected for errors possibly caused by the sudden change in SRP which occurred during the integration step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pMitigation:
            agcls.evaluate_hresult(self.__dict__["_GetIncludeBoundaryMitigation"](byref(arg_pMitigation.COM_val)))
            return arg_pMitigation.python_val

    @IncludeBoundaryMitigation.setter
    def IncludeBoundaryMitigation(self, mitigation:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(mitigation) as arg_mitigation:
            agcls.evaluate_hresult(self.__dict__["_SetIncludeBoundaryMitigation"](arg_mitigation.COM_val))

    @property
    def UseSunCbFileValues(self) -> bool:
        """True if solar values should come from the Sun.cb file."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseSunCbFileValues"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseSunCbFileValues.setter
    def UseSunCbFileValues(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseSunCbFileValues"](arg_inVal.COM_val))

    @property
    def SolarRadius(self) -> float:
        """The solar radius value to use in eclipse calculations.  Uses Distance Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSolarRadius"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SolarRadius.setter
    def SolarRadius(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSolarRadius"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2DF13668-98B3-4E69-89CA-C8136EAE49D9}", IAgVASRPReflectionPlugin)
agcls.AgTypeNameMap["IAgVASRPReflectionPlugin"] = IAgVASRPReflectionPlugin
__all__.append("IAgVASRPReflectionPlugin")

class IAgVAEngineModelThrustCoefficients(object):
    """Thrust coefficient properties for engine definition."""
    _uuid = "{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetC0"] = _raise_uninitialized_error
        self.__dict__["_SetC0"] = _raise_uninitialized_error
        self.__dict__["_GetC1"] = _raise_uninitialized_error
        self.__dict__["_SetC1"] = _raise_uninitialized_error
        self.__dict__["_GetC2"] = _raise_uninitialized_error
        self.__dict__["_SetC2"] = _raise_uninitialized_error
        self.__dict__["_GetC3"] = _raise_uninitialized_error
        self.__dict__["_SetC3"] = _raise_uninitialized_error
        self.__dict__["_GetC4"] = _raise_uninitialized_error
        self.__dict__["_SetC4"] = _raise_uninitialized_error
        self.__dict__["_GetC5"] = _raise_uninitialized_error
        self.__dict__["_SetC5"] = _raise_uninitialized_error
        self.__dict__["_GetC6"] = _raise_uninitialized_error
        self.__dict__["_SetC6"] = _raise_uninitialized_error
        self.__dict__["_GetC7"] = _raise_uninitialized_error
        self.__dict__["_SetC7"] = _raise_uninitialized_error
        self.__dict__["_GetE4"] = _raise_uninitialized_error
        self.__dict__["_SetE4"] = _raise_uninitialized_error
        self.__dict__["_GetE5"] = _raise_uninitialized_error
        self.__dict__["_SetE5"] = _raise_uninitialized_error
        self.__dict__["_GetE6"] = _raise_uninitialized_error
        self.__dict__["_SetE6"] = _raise_uninitialized_error
        self.__dict__["_GetE7"] = _raise_uninitialized_error
        self.__dict__["_SetE7"] = _raise_uninitialized_error
        self.__dict__["_GetB7"] = _raise_uninitialized_error
        self.__dict__["_SetB7"] = _raise_uninitialized_error
        self.__dict__["_GetK0"] = _raise_uninitialized_error
        self.__dict__["_SetK0"] = _raise_uninitialized_error
        self.__dict__["_GetK1"] = _raise_uninitialized_error
        self.__dict__["_SetK1"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceTemp"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceTemp"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineModelThrustCoefficients._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelThrustCoefficients from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineModelThrustCoefficients = agcom.GUID(IAgVAEngineModelThrustCoefficients._uuid)
        vtable_offset_local = IAgVAEngineModelThrustCoefficients._vtable_offset - 1
        self.__dict__["_GetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetC5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetC6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetC7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetE4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetE5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetE6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetE7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetB7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetB7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetK0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetReferenceTemp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetReferenceTemp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelThrustCoefficients, vtable_offset_local+32, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelThrustCoefficients.__dict__ and type(IAgVAEngineModelThrustCoefficients.__dict__[attrname]) == property:
            return IAgVAEngineModelThrustCoefficients.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelThrustCoefficients.")
    
    @property
    def C0(self) -> float:
        """C0 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C0.setter
    def C0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC0"](arg_inVal.COM_val))

    @property
    def C1(self) -> float:
        """C1 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C1.setter
    def C1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC1"](arg_inVal.COM_val))

    @property
    def C2(self) -> float:
        """C2 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C2.setter
    def C2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC2"](arg_inVal.COM_val))

    @property
    def C3(self) -> float:
        """C3 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C3.setter
    def C3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC3"](arg_inVal.COM_val))

    @property
    def C4(self) -> float:
        """C4 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C4.setter
    def C4(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC4"](arg_inVal.COM_val))

    @property
    def C5(self) -> float:
        """C5 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC5"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C5.setter
    def C5(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC5"](arg_inVal.COM_val))

    @property
    def C6(self) -> float:
        """C6 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC6"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C6.setter
    def C6(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC6"](arg_inVal.COM_val))

    @property
    def C7(self) -> float:
        """C7 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C7.setter
    def C7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC7"](arg_inVal.COM_val))

    @property
    def E4(self) -> float:
        """E4 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E4.setter
    def E4(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE4"](arg_inVal.COM_val))

    @property
    def E5(self) -> float:
        """E5 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE5"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E5.setter
    def E5(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE5"](arg_inVal.COM_val))

    @property
    def E6(self) -> float:
        """E6 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE6"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E6.setter
    def E6(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE6"](arg_inVal.COM_val))

    @property
    def E7(self) -> float:
        """E7 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E7.setter
    def E7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE7"](arg_inVal.COM_val))

    @property
    def B7(self) -> float:
        """B7 base. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetB7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @B7.setter
    def B7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetB7"](arg_inVal.COM_val))

    @property
    def K0(self) -> float:
        """K0 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K0.setter
    def K0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetK0"](arg_inVal.COM_val))

    @property
    def K1(self) -> float:
        """K1 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K1.setter
    def K1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetK1"](arg_inVal.COM_val))

    @property
    def ReferenceTemp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceTemp.setter
    def ReferenceTemp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceTemp"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2F905CDC-4D91-497F-85E2-AE1E2F3A4FA3}", IAgVAEngineModelThrustCoefficients)
agcls.AgTypeNameMap["IAgVAEngineModelThrustCoefficients"] = IAgVAEngineModelThrustCoefficients
__all__.append("IAgVAEngineModelThrustCoefficients")

class IAgVAEngineModelIspCoefficients(object):
    """Isp coefficient properties for engine definition."""
    _uuid = "{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}"
    _num_methods = 32
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetC0"] = _raise_uninitialized_error
        self.__dict__["_SetC0"] = _raise_uninitialized_error
        self.__dict__["_GetC1"] = _raise_uninitialized_error
        self.__dict__["_SetC1"] = _raise_uninitialized_error
        self.__dict__["_GetC2"] = _raise_uninitialized_error
        self.__dict__["_SetC2"] = _raise_uninitialized_error
        self.__dict__["_GetC3"] = _raise_uninitialized_error
        self.__dict__["_SetC3"] = _raise_uninitialized_error
        self.__dict__["_GetC4"] = _raise_uninitialized_error
        self.__dict__["_SetC4"] = _raise_uninitialized_error
        self.__dict__["_GetC5"] = _raise_uninitialized_error
        self.__dict__["_SetC5"] = _raise_uninitialized_error
        self.__dict__["_GetC6"] = _raise_uninitialized_error
        self.__dict__["_SetC6"] = _raise_uninitialized_error
        self.__dict__["_GetC7"] = _raise_uninitialized_error
        self.__dict__["_SetC7"] = _raise_uninitialized_error
        self.__dict__["_GetE4"] = _raise_uninitialized_error
        self.__dict__["_SetE4"] = _raise_uninitialized_error
        self.__dict__["_GetE5"] = _raise_uninitialized_error
        self.__dict__["_SetE5"] = _raise_uninitialized_error
        self.__dict__["_GetE6"] = _raise_uninitialized_error
        self.__dict__["_SetE6"] = _raise_uninitialized_error
        self.__dict__["_GetE7"] = _raise_uninitialized_error
        self.__dict__["_SetE7"] = _raise_uninitialized_error
        self.__dict__["_GetB7"] = _raise_uninitialized_error
        self.__dict__["_SetB7"] = _raise_uninitialized_error
        self.__dict__["_GetK0"] = _raise_uninitialized_error
        self.__dict__["_SetK0"] = _raise_uninitialized_error
        self.__dict__["_GetK1"] = _raise_uninitialized_error
        self.__dict__["_SetK1"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceTemp"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceTemp"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineModelIspCoefficients._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelIspCoefficients from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineModelIspCoefficients = agcom.GUID(IAgVAEngineModelIspCoefficients._uuid)
        vtable_offset_local = IAgVAEngineModelIspCoefficients._vtable_offset - 1
        self.__dict__["_GetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetC5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetC6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetC7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetC7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetE4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE4"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetE5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE5"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetE6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE6"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetE7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetE7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+24, agcom.DOUBLE)
        self.__dict__["_GetB7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+25, POINTER(agcom.DOUBLE))
        self.__dict__["_SetB7"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+26, agcom.DOUBLE)
        self.__dict__["_GetK0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+27, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+28, agcom.DOUBLE)
        self.__dict__["_GetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+29, POINTER(agcom.DOUBLE))
        self.__dict__["_SetK1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+30, agcom.DOUBLE)
        self.__dict__["_GetReferenceTemp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetReferenceTemp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelIspCoefficients, vtable_offset_local+32, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelIspCoefficients.__dict__ and type(IAgVAEngineModelIspCoefficients.__dict__[attrname]) == property:
            return IAgVAEngineModelIspCoefficients.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelIspCoefficients.")
    
    @property
    def C0(self) -> float:
        """C0 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C0.setter
    def C0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC0"](arg_inVal.COM_val))

    @property
    def C1(self) -> float:
        """C1 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C1.setter
    def C1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC1"](arg_inVal.COM_val))

    @property
    def C2(self) -> float:
        """C2 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C2.setter
    def C2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC2"](arg_inVal.COM_val))

    @property
    def C3(self) -> float:
        """C3 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C3.setter
    def C3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC3"](arg_inVal.COM_val))

    @property
    def C4(self) -> float:
        """C4 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C4.setter
    def C4(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC4"](arg_inVal.COM_val))

    @property
    def C5(self) -> float:
        """C5 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC5"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C5.setter
    def C5(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC5"](arg_inVal.COM_val))

    @property
    def C6(self) -> float:
        """C6 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC6"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C6.setter
    def C6(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC6"](arg_inVal.COM_val))

    @property
    def C7(self) -> float:
        """C7 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetC7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @C7.setter
    def C7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetC7"](arg_inVal.COM_val))

    @property
    def E4(self) -> float:
        """E4 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE4"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E4.setter
    def E4(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE4"](arg_inVal.COM_val))

    @property
    def E5(self) -> float:
        """E5 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE5"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E5.setter
    def E5(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE5"](arg_inVal.COM_val))

    @property
    def E6(self) -> float:
        """E6 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE6"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E6.setter
    def E6(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE6"](arg_inVal.COM_val))

    @property
    def E7(self) -> float:
        """E7 exponent. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetE7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @E7.setter
    def E7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetE7"](arg_inVal.COM_val))

    @property
    def B7(self) -> float:
        """B7 base. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetB7"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @B7.setter
    def B7(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetB7"](arg_inVal.COM_val))

    @property
    def K0(self) -> float:
        """K0 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K0.setter
    def K0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetK0"](arg_inVal.COM_val))

    @property
    def K1(self) -> float:
        """K1 coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetK1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @K1.setter
    def K1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetK1"](arg_inVal.COM_val))

    @property
    def ReferenceTemp(self) -> float:
        """Reference temperature for data. Uses Temperature Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceTemp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceTemp.setter
    def ReferenceTemp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceTemp"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{3D092FFB-ED99-4F4A-94E5-8BFA7CEF328C}", IAgVAEngineModelIspCoefficients)
agcls.AgTypeNameMap["IAgVAEngineModelIspCoefficients"] = IAgVAEngineModelIspCoefficients
__all__.append("IAgVAEngineModelIspCoefficients")

class IAgVAEngineConstAcc(object):
    """Properties for a Constant Acceleration and Isp engine model."""
    _uuid = "{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetAcceleration"] = _raise_uninitialized_error
        self.__dict__["_SetAcceleration"] = _raise_uninitialized_error
        self.__dict__["_GetIsp"] = _raise_uninitialized_error
        self.__dict__["_SetIsp"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineConstAcc._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineConstAcc from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineConstAcc = agcom.GUID(IAgVAEngineConstAcc._uuid)
        vtable_offset_local = IAgVAEngineConstAcc._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetAcceleration"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetAcceleration"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetIsp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIsp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+9, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstAcc, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineConstAcc.__dict__ and type(IAgVAEngineConstAcc.__dict__[attrname]) == property:
            return IAgVAEngineConstAcc.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineConstAcc.")
    
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def Acceleration(self) -> float:
        """The acceleration for this engine. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetAcceleration"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Acceleration.setter
    def Acceleration(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetAcceleration"](arg_inVal.COM_val))

    @property
    def Isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Isp.setter
    def Isp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIsp"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlEngineConstAcc") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineConstAcc") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineConstAcc") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstAcc, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{32A0554F-7D4A-4A7E-80B7-5B57ED17B9D2}", IAgVAEngineConstAcc)
agcls.AgTypeNameMap["IAgVAEngineConstAcc"] = IAgVAEngineConstAcc
__all__.append("IAgVAEngineConstAcc")

class IAgVAEngineConstant(object):
    """Properties for a Constant Thrust and Isp engine model."""
    _uuid = "{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}"
    _num_methods = 10
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetThrust"] = _raise_uninitialized_error
        self.__dict__["_SetThrust"] = _raise_uninitialized_error
        self.__dict__["_GetIsp"] = _raise_uninitialized_error
        self.__dict__["_SetIsp"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineConstant._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineConstant from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineConstant = agcom.GUID(IAgVAEngineConstant._uuid)
        vtable_offset_local = IAgVAEngineConstant._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetThrust"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetThrust"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetIsp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIsp"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+7, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+9, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineConstant, vtable_offset_local+10, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineConstant.__dict__ and type(IAgVAEngineConstant.__dict__[attrname]) == property:
            return IAgVAEngineConstant.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineConstant.")
    
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def Thrust(self) -> float:
        """The thrust for this engine. Uses Force Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrust"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Thrust.setter
    def Thrust(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrust"](arg_inVal.COM_val))

    @property
    def Isp(self) -> float:
        """The specific impulse for this engine. Uses SpecificImpulse Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIsp"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Isp.setter
    def Isp(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIsp"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlEngineConstant") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstant, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineConstant") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstant, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineConstant") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineConstant, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1BA84003-AFE1-4AD5-B36B-967D7B9FF8B0}", IAgVAEngineConstant)
agcls.AgTypeNameMap["IAgVAEngineConstant"] = IAgVAEngineConstant
__all__.append("IAgVAEngineConstant")

class IAgVAEngineDefinition(object):
    """Properties for engine definition for an Ion engine model."""
    _uuid = "{74BF5209-9E9B-45E3-8AE0-E68971558447}"
    _num_methods = 42
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetIspC0"] = _raise_uninitialized_error
        self.__dict__["_SetIspC0"] = _raise_uninitialized_error
        self.__dict__["_GetIspC1"] = _raise_uninitialized_error
        self.__dict__["_SetIspC1"] = _raise_uninitialized_error
        self.__dict__["_GetIspC2"] = _raise_uninitialized_error
        self.__dict__["_SetIspC2"] = _raise_uninitialized_error
        self.__dict__["_GetIspC3"] = _raise_uninitialized_error
        self.__dict__["_SetIspC3"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateEquationType"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowRateEquationType"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateC0"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowRateC0"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateC1"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowRateC1"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateC2"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowRateC2"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateC3"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowRateC3"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowRateEquation"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyC0"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowEfficiencyC0"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyC1"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowEfficiencyC1"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyC2"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowEfficiencyC2"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyC3"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowEfficiencyC3"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyIndependentVar"] = _raise_uninitialized_error
        self.__dict__["_SetMassFlowEfficiencyIndependentVar"] = _raise_uninitialized_error
        self.__dict__["_GetMassFlowEfficiencyEquation"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyC0"] = _raise_uninitialized_error
        self.__dict__["_SetPowerEfficiencyC0"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyC1"] = _raise_uninitialized_error
        self.__dict__["_SetPowerEfficiencyC1"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyC2"] = _raise_uninitialized_error
        self.__dict__["_SetPowerEfficiencyC2"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyC3"] = _raise_uninitialized_error
        self.__dict__["_SetPowerEfficiencyC3"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyIndependentVar"] = _raise_uninitialized_error
        self.__dict__["_SetPowerEfficiencyIndependentVar"] = _raise_uninitialized_error
        self.__dict__["_GetPowerEfficiencyEquation"] = _raise_uninitialized_error
        self.__dict__["_GetInputPowerSourceName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineDefinition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineDefinition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineDefinition = agcom.GUID(IAgVAEngineDefinition._uuid)
        vtable_offset_local = IAgVAEngineDefinition._vtable_offset - 1
        self.__dict__["_GetIspC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIspC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetIspC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIspC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetIspC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIspC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetIspC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetIspC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetMassFlowRateEquationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetMassFlowRateEquationType"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetMassFlowRateC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowRateC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMassFlowRateC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowRateC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMassFlowRateC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowRateC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetMassFlowRateC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowRateC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetMassFlowRateEquation"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+19, POINTER(agcom.BSTR))
        self.__dict__["_GetMassFlowEfficiencyC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+20, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowEfficiencyC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+21, agcom.DOUBLE)
        self.__dict__["_GetMassFlowEfficiencyC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+22, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowEfficiencyC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+23, agcom.DOUBLE)
        self.__dict__["_GetMassFlowEfficiencyC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+24, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowEfficiencyC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+25, agcom.DOUBLE)
        self.__dict__["_GetMassFlowEfficiencyC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+26, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMassFlowEfficiencyC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+27, agcom.DOUBLE)
        self.__dict__["_GetMassFlowEfficiencyIndependentVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+28, POINTER(agcom.LONG))
        self.__dict__["_SetMassFlowEfficiencyIndependentVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+29, agcom.LONG)
        self.__dict__["_GetMassFlowEfficiencyEquation"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+30, POINTER(agcom.BSTR))
        self.__dict__["_GetPowerEfficiencyC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+31, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPowerEfficiencyC0"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+32, agcom.DOUBLE)
        self.__dict__["_GetPowerEfficiencyC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+33, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPowerEfficiencyC1"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+34, agcom.DOUBLE)
        self.__dict__["_GetPowerEfficiencyC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+35, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPowerEfficiencyC2"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+36, agcom.DOUBLE)
        self.__dict__["_GetPowerEfficiencyC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+37, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPowerEfficiencyC3"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+38, agcom.DOUBLE)
        self.__dict__["_GetPowerEfficiencyIndependentVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+39, POINTER(agcom.LONG))
        self.__dict__["_SetPowerEfficiencyIndependentVar"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+40, agcom.LONG)
        self.__dict__["_GetPowerEfficiencyEquation"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+41, POINTER(agcom.BSTR))
        self.__dict__["_GetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineDefinition, vtable_offset_local+42, POINTER(agcom.BSTR))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineDefinition.__dict__ and type(IAgVAEngineDefinition.__dict__[attrname]) == property:
            return IAgVAEngineDefinition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineDefinition.")
    
    @property
    def IspC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIspC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IspC0.setter
    def IspC0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIspC0"](arg_inVal.COM_val))

    @property
    def IspC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIspC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IspC1.setter
    def IspC1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIspC1"](arg_inVal.COM_val))

    @property
    def IspC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIspC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IspC2.setter
    def IspC2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIspC2"](arg_inVal.COM_val))

    @property
    def IspC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetIspC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @IspC3.setter
    def IspC3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetIspC3"](arg_inVal.COM_val))

    @property
    def MassFlowRateEquationType(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the mass flow rate equation."""
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateEquationType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowRateEquationType.setter
    def MassFlowRateEquationType(self, inVal:"AgEVAEngineModelFunction") -> None:
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowRateEquationType"](arg_inVal.COM_val))

    @property
    def MassFlowRateC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowRateC0.setter
    def MassFlowRateC0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowRateC0"](arg_inVal.COM_val))

    @property
    def MassFlowRateC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowRateC1.setter
    def MassFlowRateC1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowRateC1"](arg_inVal.COM_val))

    @property
    def MassFlowRateC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowRateC2.setter
    def MassFlowRateC2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowRateC2"](arg_inVal.COM_val))

    @property
    def MassFlowRateC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowRateC3.setter
    def MassFlowRateC3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowRateC3"](arg_inVal.COM_val))

    @property
    def MassFlowRateEquation(self) -> str:
        """The equation for mass flow rate."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowRateEquation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def MassFlowEfficiencyC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowEfficiencyC0.setter
    def MassFlowEfficiencyC0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowEfficiencyC0"](arg_inVal.COM_val))

    @property
    def MassFlowEfficiencyC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowEfficiencyC1.setter
    def MassFlowEfficiencyC1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowEfficiencyC1"](arg_inVal.COM_val))

    @property
    def MassFlowEfficiencyC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowEfficiencyC2.setter
    def MassFlowEfficiencyC2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowEfficiencyC2"](arg_inVal.COM_val))

    @property
    def MassFlowEfficiencyC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowEfficiencyC3.setter
    def MassFlowEfficiencyC3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowEfficiencyC3"](arg_inVal.COM_val))

    @property
    def MassFlowEfficiencyIndependentVar(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the mass flow efficiency equation."""
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyIndependentVar"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MassFlowEfficiencyIndependentVar.setter
    def MassFlowEfficiencyIndependentVar(self, inVal:"AgEVAEngineModelFunction") -> None:
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMassFlowEfficiencyIndependentVar"](arg_inVal.COM_val))

    @property
    def MassFlowEfficiencyEquation(self) -> str:
        """The equation for mass flow efficiency."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMassFlowEfficiencyEquation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def PowerEfficiencyC0(self) -> float:
        """The constant coefficient (C0). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyC0"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerEfficiencyC0.setter
    def PowerEfficiencyC0(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerEfficiencyC0"](arg_inVal.COM_val))

    @property
    def PowerEfficiencyC1(self) -> float:
        """The linear coefficient (C1). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyC1"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerEfficiencyC1.setter
    def PowerEfficiencyC1(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerEfficiencyC1"](arg_inVal.COM_val))

    @property
    def PowerEfficiencyC2(self) -> float:
        """The quadratic coefficient (C2). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyC2"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerEfficiencyC2.setter
    def PowerEfficiencyC2(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerEfficiencyC2"](arg_inVal.COM_val))

    @property
    def PowerEfficiencyC3(self) -> float:
        """The cubic coefficient (C3). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyC3"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerEfficiencyC3.setter
    def PowerEfficiencyC3(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerEfficiencyC3"](arg_inVal.COM_val))

    @property
    def PowerEfficiencyIndependentVar(self) -> "AgEVAEngineModelFunction":
        """The independent variable for the power efficiency equation."""
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyIndependentVar"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PowerEfficiencyIndependentVar.setter
    def PowerEfficiencyIndependentVar(self, inVal:"AgEVAEngineModelFunction") -> None:
        with agmarshall.AgEnum_arg(AgEVAEngineModelFunction, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPowerEfficiencyIndependentVar"](arg_inVal.COM_val))

    @property
    def PowerEfficiencyEquation(self) -> str:
        """The equation for power efficiency."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPowerEfficiencyEquation"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def InputPowerSourceName(self) -> str:
        """Object that computes the power input to the engine"""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInputPowerSourceName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74BF5209-9E9B-45E3-8AE0-E68971558447}", IAgVAEngineDefinition)
agcls.AgTypeNameMap["IAgVAEngineDefinition"] = IAgVAEngineDefinition
__all__.append("IAgVAEngineDefinition")

class IAgVAEngineThrottleTable(object):
    """Properties for engine parameters for a Throttle Table engine model"""
    _uuid = "{74EFDF26-3F92-4664-8CA1-47E86FCAB002}"
    _num_methods = 18
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetThrottleTableFilename"] = _raise_uninitialized_error
        self.__dict__["_SetThrottleTableFilename"] = _raise_uninitialized_error
        self.__dict__["_GetOperationModeDefinition"] = _raise_uninitialized_error
        self.__dict__["_SetOperationModeDefinition"] = _raise_uninitialized_error
        self.__dict__["_GetRegressionPolynomialDegree"] = _raise_uninitialized_error
        self.__dict__["_SetRegressionPolynomialDegree"] = _raise_uninitialized_error
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_SetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_GetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_SetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineThrottleTable._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineThrottleTable from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineThrottleTable = agcom.GUID(IAgVAEngineThrottleTable._uuid)
        vtable_offset_local = IAgVAEngineThrottleTable._vtable_offset - 1
        self.__dict__["_GetThrottleTableFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetThrottleTableFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetOperationModeDefinition"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_SetOperationModeDefinition"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+4, agcom.LONG)
        self.__dict__["_GetRegressionPolynomialDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetRegressionPolynomialDegree"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+13, POINTER(agcom.VARIANT))
        self.__dict__["_SetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+14, agcom.VARIANT)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+15, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+17, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineThrottleTable, vtable_offset_local+18, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineThrottleTable.__dict__ and type(IAgVAEngineThrottleTable.__dict__[attrname]) == property:
            return IAgVAEngineThrottleTable.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineThrottleTable.")
    
    @property
    def ThrottleTableFilename(self) -> str:
        """A file containing the engine performance data in the tabular format."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrottleTableFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrottleTableFilename.setter
    def ThrottleTableFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrottleTableFilename"](arg_inVal.COM_val))

    @property
    def OperationModeDefinition(self) -> "AgEVAThrottleTableOperationMode":
        """The engine operation mode definition."""
        with agmarshall.AgEnum_arg(AgEVAThrottleTableOperationMode) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetOperationModeDefinition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @OperationModeDefinition.setter
    def OperationModeDefinition(self, inVal:"AgEVAThrottleTableOperationMode") -> None:
        with agmarshall.AgEnum_arg(AgEVAThrottleTableOperationMode, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetOperationModeDefinition"](arg_inVal.COM_val))

    @property
    def RegressionPolynomialDegree(self) -> int:
        """The degree of the regression polynomial. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRegressionPolynomialDegree"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RegressionPolynomialDegree.setter
    def RegressionPolynomialDegree(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRegressionPolynomialDegree"](arg_inVal.COM_val))

    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def InputPowerSourceName(self) -> str:
        """The object that computes the power input to the engine."""
        with agmarshall.BSTR_arg() as arg_pPowerSource:
            agcls.evaluate_hresult(self.__dict__["_GetInputPowerSourceName"](byref(arg_pPowerSource.COM_val)))
            return arg_pPowerSource.python_val

    @InputPowerSourceName.setter
    def InputPowerSourceName(self, powerSource:str) -> None:
        with agmarshall.BSTR_arg(powerSource) as arg_powerSource:
            agcls.evaluate_hresult(self.__dict__["_SetInputPowerSourceName"](arg_powerSource.COM_val))

    @property
    def PercentDegradationPerYear(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPercentDegradationPerYear"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPercentDegradationPerYear"](arg_inVal.COM_val))

    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceEpoch"](arg_inVal.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlEngineThrottleTable") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineThrottleTable") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineThrottleTable") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineThrottleTable, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{74EFDF26-3F92-4664-8CA1-47E86FCAB002}", IAgVAEngineThrottleTable)
agcls.AgTypeNameMap["IAgVAEngineThrottleTable"] = IAgVAEngineThrottleTable
__all__.append("IAgVAEngineThrottleTable")

class IAgVAEngineIon(object):
    """Properties for engine parameters for an Ion engine model"""
    _uuid = "{1A331BF6-2901-41F4-8A68-23DD4628A68D}"
    _num_methods = 19
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_SetInputPowerSourceName"] = _raise_uninitialized_error
        self.__dict__["_GetMinRequiredPower"] = _raise_uninitialized_error
        self.__dict__["_SetMinRequiredPower"] = _raise_uninitialized_error
        self.__dict__["_GetMaxInputPower"] = _raise_uninitialized_error
        self.__dict__["_SetMaxInputPower"] = _raise_uninitialized_error
        self.__dict__["_GetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_SetPercentDegradationPerYear"] = _raise_uninitialized_error
        self.__dict__["_GetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_SetReferenceEpoch"] = _raise_uninitialized_error
        self.__dict__["_GetPercentThrottle"] = _raise_uninitialized_error
        self.__dict__["_SetPercentThrottle"] = _raise_uninitialized_error
        self.__dict__["_GetEngineDefinition"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineIon._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineIon from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineIon = agcom.GUID(IAgVAEngineIon._uuid)
        vtable_offset_local = IAgVAEngineIon._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetInputPowerSourceName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetMinRequiredPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+5, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinRequiredPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+6, agcom.DOUBLE)
        self.__dict__["_GetMaxInputPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxInputPower"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPercentDegradationPerYear"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+11, POINTER(agcom.VARIANT))
        self.__dict__["_SetReferenceEpoch"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+12, agcom.VARIANT)
        self.__dict__["_GetPercentThrottle"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetPercentThrottle"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetEngineDefinition"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+15, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+17, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+18, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineIon, vtable_offset_local+19, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineIon.__dict__ and type(IAgVAEngineIon.__dict__[attrname]) == property:
            return IAgVAEngineIon.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineIon.")
    
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def InputPowerSourceName(self) -> str:
        """The object that computes the power input to the engine."""
        with agmarshall.BSTR_arg() as arg_pPowerSource:
            agcls.evaluate_hresult(self.__dict__["_GetInputPowerSourceName"](byref(arg_pPowerSource.COM_val)))
            return arg_pPowerSource.python_val

    @InputPowerSourceName.setter
    def InputPowerSourceName(self, powerSource:str) -> None:
        with agmarshall.BSTR_arg(powerSource) as arg_powerSource:
            agcls.evaluate_hresult(self.__dict__["_SetInputPowerSourceName"](arg_powerSource.COM_val))

    @property
    def MinRequiredPower(self) -> float:
        """The minimum power required for engine to produce thrust. Uses Power Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinRequiredPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinRequiredPower.setter
    def MinRequiredPower(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinRequiredPower"](arg_inVal.COM_val))

    @property
    def MaxInputPower(self) -> float:
        """The maximum power that can be used by engine to produce thrust. Uses Power Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxInputPower"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxInputPower.setter
    def MaxInputPower(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxInputPower"](arg_inVal.COM_val))

    @property
    def PercentDegradationPerYear(self) -> float:
        """The degradation factor is (1-x%/yr)^(timeSinceRefEpoch)"""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPercentDegradationPerYear"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PercentDegradationPerYear.setter
    def PercentDegradationPerYear(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPercentDegradationPerYear"](arg_inVal.COM_val))

    @property
    def ReferenceEpoch(self) -> typing.Any:
        """The date and Time used as reference epoch for degradation. Uses DateFormat Dimension."""
        with agmarshall.VARIANT_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetReferenceEpoch"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ReferenceEpoch.setter
    def ReferenceEpoch(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetReferenceEpoch"](arg_inVal.COM_val))

    @property
    def PercentThrottle(self) -> float:
        """The percentage of available thrust to use (100 is full on, 0 is off). Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPercentThrottle"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PercentThrottle.setter
    def PercentThrottle(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPercentThrottle"](arg_inVal.COM_val))

    @property
    def EngineDefinition(self) -> "IAgVAEngineDefinition":
        """The engine definition."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAEngineDefinition:
            agcls.evaluate_hresult(self.__dict__["_GetEngineDefinition"](byref(arg_ppVAEngineDefinition.COM_val)))
            return arg_ppVAEngineDefinition.python_val

    def EnableControlParameter(self, param:"AgEVAControlEngineIon") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineIon, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineIon") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineIon, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineIon") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineIon, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{1A331BF6-2901-41F4-8A68-23DD4628A68D}", IAgVAEngineIon)
agcls.AgTypeNameMap["IAgVAEngineIon"] = IAgVAEngineIon
__all__.append("IAgVAEngineIon")

class IAgVAEngineCustom(object):
    """Properties for a Custom engine model."""
    _uuid = "{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetEvalFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetEvalFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetPostFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetPostFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetPreFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetPreFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetSegStartFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetSegStartFunctionName"] = _raise_uninitialized_error
        self.__dict__["_GetUpdateFunctionName"] = _raise_uninitialized_error
        self.__dict__["_SetUpdateFunctionName"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineCustom._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineCustom from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineCustom = agcom.GUID(IAgVAEngineCustom._uuid)
        vtable_offset_local = IAgVAEngineCustom._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetEvalFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetEvalFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetPostFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetPostFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetPreFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+7, POINTER(agcom.BSTR))
        self.__dict__["_SetPreFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+8, agcom.BSTR)
        self.__dict__["_GetSegStartFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+9, POINTER(agcom.BSTR))
        self.__dict__["_SetSegStartFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+10, agcom.BSTR)
        self.__dict__["_GetUpdateFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+11, POINTER(agcom.BSTR))
        self.__dict__["_SetUpdateFunctionName"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+12, agcom.BSTR)
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+15, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineCustom, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineCustom.__dict__ and type(IAgVAEngineCustom.__dict__[attrname]) == property:
            return IAgVAEngineCustom.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineCustom.")
    
    @property
    def g(self) -> float:
        """The earth surface gravity acceleration for Isp conversions. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def EvalFunctionName(self) -> str:
        """The EvalFunction - custom function to call at every thrust evaluation."""
        with agmarshall.BSTR_arg() as arg_pEvalFunction:
            agcls.evaluate_hresult(self.__dict__["_GetEvalFunctionName"](byref(arg_pEvalFunction.COM_val)))
            return arg_pEvalFunction.python_val

    @EvalFunctionName.setter
    def EvalFunctionName(self, evalFunction:str) -> None:
        with agmarshall.BSTR_arg(evalFunction) as arg_evalFunction:
            agcls.evaluate_hresult(self.__dict__["_SetEvalFunctionName"](arg_evalFunction.COM_val))

    @property
    def PostFunctionName(self) -> str:
        """The PostFunction - custom function to call after all propagation ends."""
        with agmarshall.BSTR_arg() as arg_pPostFunction:
            agcls.evaluate_hresult(self.__dict__["_GetPostFunctionName"](byref(arg_pPostFunction.COM_val)))
            return arg_pPostFunction.python_val

    @PostFunctionName.setter
    def PostFunctionName(self, postFunction:str) -> None:
        with agmarshall.BSTR_arg(postFunction) as arg_postFunction:
            agcls.evaluate_hresult(self.__dict__["_SetPostFunctionName"](arg_postFunction.COM_val))

    @property
    def PreFunctionName(self) -> str:
        """The PreFunction - custom function to call before any propagation begins."""
        with agmarshall.BSTR_arg() as arg_pPreFunction:
            agcls.evaluate_hresult(self.__dict__["_GetPreFunctionName"](byref(arg_pPreFunction.COM_val)))
            return arg_pPreFunction.python_val

    @PreFunctionName.setter
    def PreFunctionName(self, preFunction:str) -> None:
        with agmarshall.BSTR_arg(preFunction) as arg_preFunction:
            agcls.evaluate_hresult(self.__dict__["_SetPreFunctionName"](arg_preFunction.COM_val))

    @property
    def SegStartFunctionName(self) -> str:
        """The SegStartFunction - custom function to call at the beginning of each segment."""
        with agmarshall.BSTR_arg() as arg_pSegStartFunction:
            agcls.evaluate_hresult(self.__dict__["_GetSegStartFunctionName"](byref(arg_pSegStartFunction.COM_val)))
            return arg_pSegStartFunction.python_val

    @SegStartFunctionName.setter
    def SegStartFunctionName(self, segStartFunction:str) -> None:
        with agmarshall.BSTR_arg(segStartFunction) as arg_segStartFunction:
            agcls.evaluate_hresult(self.__dict__["_SetSegStartFunctionName"](arg_segStartFunction.COM_val))

    @property
    def UpdateFunctionName(self) -> str:
        """The UpdateFunction - custom function to call at the beginning of each integration step."""
        with agmarshall.BSTR_arg() as arg_pUpdateFunction:
            agcls.evaluate_hresult(self.__dict__["_GetUpdateFunctionName"](byref(arg_pUpdateFunction.COM_val)))
            return arg_pUpdateFunction.python_val

    @UpdateFunctionName.setter
    def UpdateFunctionName(self, updateFunction:str) -> None:
        with agmarshall.BSTR_arg(updateFunction) as arg_updateFunction:
            agcls.evaluate_hresult(self.__dict__["_SetUpdateFunctionName"](arg_updateFunction.COM_val))

    def EnableControlParameter(self, param:"AgEVAControlEngineCustom") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineCustom, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineCustom") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineCustom, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineCustom") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineCustom, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{E17088BF-A34C-4C6B-8BF2-CEA2D489B428}", IAgVAEngineCustom)
agcls.AgTypeNameMap["IAgVAEngineCustom"] = IAgVAEngineCustom
__all__.append("IAgVAEngineCustom")

class IAgVAEnginePlugin(object):
    """Properties for a Plugin engine model."""
    _uuid = "{68ED720F-ABB6-4891-A1B9-973719400161}"
    _num_methods = 5
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_SetPluginIdentifier"] = _raise_uninitialized_error
        self.__dict__["_GetPluginConfig"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEnginePlugin._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEnginePlugin from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEnginePlugin = agcom.GUID(IAgVAEnginePlugin._uuid)
        vtable_offset_local = IAgVAEnginePlugin._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEnginePlugin, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEnginePlugin, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAEnginePlugin, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetPluginIdentifier"] = IAGFUNCTYPE(pUnk, IID_IAgVAEnginePlugin, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_GetPluginConfig"] = IAGFUNCTYPE(pUnk, IID_IAgVAEnginePlugin, vtable_offset_local+5, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEnginePlugin.__dict__ and type(IAgVAEnginePlugin.__dict__[attrname]) == property:
            return IAgVAEnginePlugin.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEnginePlugin.")
    
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def PluginIdentifier(self) -> str:
        """The PluginIdentifier - the ProgID of the COM component you are using for this model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginIdentifier"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @PluginIdentifier.setter
    def PluginIdentifier(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetPluginIdentifier"](arg_inVal.COM_val))

    @property
    def PluginConfig(self) -> "IAgVAPluginProperties":
        """The properties of the plugin."""
        with agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetPluginConfig"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{68ED720F-ABB6-4891-A1B9-973719400161}", IAgVAEnginePlugin)
agcls.AgTypeNameMap["IAgVAEnginePlugin"] = IAgVAEnginePlugin
__all__.append("IAgVAEnginePlugin")

class IAgVAEngineModelPoly(object):
    """Properties for a Polynomial Thrust and Isp engine model."""
    _uuid = "{4AC9E570-FB42-4636-B6DA-F9FEF353165B}"
    _num_methods = 8
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Getg"] = _raise_uninitialized_error
        self.__dict__["_Setg"] = _raise_uninitialized_error
        self.__dict__["_GetThrustCoefficients"] = _raise_uninitialized_error
        self.__dict__["_GetIspCoefficients"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAEngineModelPoly._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAEngineModelPoly from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAEngineModelPoly = agcom.GUID(IAgVAEngineModelPoly._uuid)
        vtable_offset_local = IAgVAEngineModelPoly._vtable_offset - 1
        self.__dict__["_Getg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_Setg"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetThrustCoefficients"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetIspCoefficients"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+5, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+7, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAEngineModelPoly, vtable_offset_local+8, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAEngineModelPoly.__dict__ and type(IAgVAEngineModelPoly.__dict__[attrname]) == property:
            return IAgVAEngineModelPoly.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAEngineModelPoly.")
    
    @property
    def g(self) -> float:
        """The gravitational acceleration constant at sea level on the Earth. Uses Acceleration Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_Getg"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @g.setter
    def g(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_Setg"](arg_inVal.COM_val))

    @property
    def ThrustCoefficients(self) -> "IAgVAEngineModelThrustCoefficients":
        """The thrust Coefficients."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAEngineModelThrustCoefficients:
            agcls.evaluate_hresult(self.__dict__["_GetThrustCoefficients"](byref(arg_ppVAEngineModelThrustCoefficients.COM_val)))
            return arg_ppVAEngineModelThrustCoefficients.python_val

    @property
    def IspCoefficients(self) -> "IAgVAEngineModelIspCoefficients":
        """The Isp Coefficients."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAEngineModelIspCoefficients:
            agcls.evaluate_hresult(self.__dict__["_GetIspCoefficients"](byref(arg_ppVAEngineModelIspCoefficients.COM_val)))
            return arg_ppVAEngineModelIspCoefficients.python_val

    def EnableControlParameter(self, param:"AgEVAControlEngineModelPoly") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlEngineModelPoly") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlEngineModelPoly") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlEngineModelPoly, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{4AC9E570-FB42-4636-B6DA-F9FEF353165B}", IAgVAEngineModelPoly)
agcls.AgTypeNameMap["IAgVAEngineModelPoly"] = IAgVAEngineModelPoly
__all__.append("IAgVAEngineModelPoly")

class IAgVAThruster(object):
    """Properties for individual thrusters."""
    _uuid = "{61A386B1-675B-4DB6-85B9-078760AB8339}"
    _num_methods = 16
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetName"] = _raise_uninitialized_error
        self.__dict__["_SetName"] = _raise_uninitialized_error
        self.__dict__["_GetUserComment"] = _raise_uninitialized_error
        self.__dict__["_SetUserComment"] = _raise_uninitialized_error
        self.__dict__["_Copy"] = _raise_uninitialized_error
        self.__dict__["_GetEngineModelName"] = _raise_uninitialized_error
        self.__dict__["_SetEngineModelName"] = _raise_uninitialized_error
        self.__dict__["_GetThrusterEfficiency"] = _raise_uninitialized_error
        self.__dict__["_SetThrusterEfficiency"] = _raise_uninitialized_error
        self.__dict__["_GetEquivalentOnTime"] = _raise_uninitialized_error
        self.__dict__["_SetEquivalentOnTime"] = _raise_uninitialized_error
        self.__dict__["_GetThrusterDirection"] = _raise_uninitialized_error
        self.__dict__["_EnableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_DisableControlParameter"] = _raise_uninitialized_error
        self.__dict__["_IsControlParameterEnabled"] = _raise_uninitialized_error
        self.__dict__["_GetControlParametersAvailable"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAThruster._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThruster from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAThruster = agcom.GUID(IAgVAThruster._uuid)
        vtable_offset_local = IAgVAThruster._vtable_offset - 1
        self.__dict__["_GetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetUserComment"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+4, agcom.BSTR)
        self.__dict__["_Copy"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+5, POINTER(agcom.PVOID))
        self.__dict__["_GetEngineModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+6, POINTER(agcom.BSTR))
        self.__dict__["_SetEngineModelName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+7, agcom.BSTR)
        self.__dict__["_GetThrusterEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+8, POINTER(agcom.DOUBLE))
        self.__dict__["_SetThrusterEfficiency"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+9, agcom.DOUBLE)
        self.__dict__["_GetEquivalentOnTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+10, POINTER(agcom.DOUBLE))
        self.__dict__["_SetEquivalentOnTime"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+11, agcom.DOUBLE)
        self.__dict__["_GetThrusterDirection"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_EnableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+13, agcom.LONG)
        self.__dict__["_DisableControlParameter"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+14, agcom.LONG)
        self.__dict__["_IsControlParameterEnabled"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+15, agcom.LONG, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_GetControlParametersAvailable"] = IAGFUNCTYPE(pUnk, IID_IAgVAThruster, vtable_offset_local+16, POINTER(agcom.VARIANT_BOOL))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThruster.__dict__ and type(IAgVAThruster.__dict__[attrname]) == property:
            return IAgVAThruster.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThruster.")
    
    @property
    def Name(self) -> str:
        """The thruster name."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Name.setter
    def Name(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetName"](arg_inVal.COM_val))

    @property
    def UserComment(self) -> str:
        """A user comment."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUserComment"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UserComment.setter
    def UserComment(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUserComment"](arg_inVal.COM_val))

    def Copy(self) -> "IAgVAThruster":
        """Makes a copy of the specified thruster."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAThruster:
            agcls.evaluate_hresult(self.__dict__["_Copy"](byref(arg_ppVAThruster.COM_val)))
            return arg_ppVAThruster.python_val

    @property
    def EngineModelName(self) -> str:
        """The engine model."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEngineModelName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EngineModelName.setter
    def EngineModelName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEngineModelName"](arg_inVal.COM_val))

    @property
    def ThrusterEfficiency(self) -> float:
        """The thruster efficiency. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetThrusterEfficiency"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ThrusterEfficiency.setter
    def ThrusterEfficiency(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetThrusterEfficiency"](arg_inVal.COM_val))

    @property
    def EquivalentOnTime(self) -> float:
        """The equivalent on-time percentage is a factor multiplied by the thrust. The thrust is applied continuously throughout the maneuver and is reduced by the percentage. The mass flow rate is likewise reduced. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetEquivalentOnTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @EquivalentOnTime.setter
    def EquivalentOnTime(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetEquivalentOnTime"](arg_inVal.COM_val))

    @property
    def ThrusterDirection(self) -> "IAgDirection":
        """A thruster direction value."""
        with agmarshall.AgInterface_out_arg() as arg_ppDirection:
            agcls.evaluate_hresult(self.__dict__["_GetThrusterDirection"](byref(arg_ppDirection.COM_val)))
            return arg_ppDirection.python_val

    def EnableControlParameter(self, param:"AgEVAControlThrusters") -> None:
        """Enables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlThrusters, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_EnableControlParameter"](arg_param.COM_val))

    def DisableControlParameter(self, param:"AgEVAControlThrusters") -> None:
        """Disables the specified control parameter."""
        with agmarshall.AgEnum_arg(AgEVAControlThrusters, param) as arg_param:
            agcls.evaluate_hresult(self.__dict__["_DisableControlParameter"](arg_param.COM_val))

    def IsControlParameterEnabled(self, param:"AgEVAControlThrusters") -> bool:
        """Sees if the specified control is enabled."""
        with agmarshall.AgEnum_arg(AgEVAControlThrusters, param) as arg_param, \
             agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_IsControlParameterEnabled"](arg_param.COM_val, byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @property
    def ControlParametersAvailable(self) -> bool:
        """Returns whether or not the control parameters can be set."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetControlParametersAvailable"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val


agcls.AgClassCatalog.add_catalog_entry("{61A386B1-675B-4DB6-85B9-078760AB8339}", IAgVAThruster)
agcls.AgTypeNameMap["IAgVAThruster"] = IAgVAThruster
__all__.append("IAgVAThruster")

class IAgVAThrusterSetCollection(object):
    """The list of thrusters in a thruster set."""
    _uuid = "{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}"
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAThrusterSetCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThrusterSetCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAThrusterSetCollection = agcom.GUID(IAgVAThrusterSetCollection._uuid)
        vtable_offset_local = IAgVAThrusterSetCollection._vtable_offset - 1
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+1, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+2, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+3, POINTER(agcom.LONG))
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+4, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+5, agcom.VARIANT)
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+6, )
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+9, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+10, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSetCollection, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThrusterSetCollection.__dict__ and type(IAgVAThrusterSetCollection.__dict__[attrname]) == property:
            return IAgVAThrusterSetCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThrusterSetCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgVAThruster":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Item(self, indexOrName:typing.Any) -> "IAgVAThruster":
        """A property that allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAThruster:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppVAThruster.COM_val)))
            return arg_ppVAThruster.python_val

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """A property that allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """The number of thrusters in the set."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def Add(self, thrusterName:str) -> "IAgVAThruster":
        """Adds a new thruster."""
        with agmarshall.BSTR_arg(thrusterName) as arg_thrusterName, \
             agmarshall.AgInterface_out_arg() as arg_ppVAThruster:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_thrusterName.COM_val, byref(arg_ppVAThruster.COM_val)))
            return arg_ppVAThruster.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes a specified thruster."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    def RemoveAll(self) -> None:
        """Removes all thrusters."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a thruster to the clipboard and removes the thruster from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgVAThruster":
        """Pastes a thruster from the clipboard into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAThruster:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppVAThruster.COM_val)))
            return arg_ppVAThruster.python_val

    def InsertCopy(self, thruster:"IAgVAThruster") -> "IAgVAThruster":
        """Copies a thruster and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(thruster, IAgVAThruster) as arg_thruster, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_thruster.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgVAThruster":
        """Retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def GetItemByName(self, name:str) -> "IAgVAThruster":
        """Retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{C60E997C-7AF3-477B-8B8A-8E1CA0D55681}", IAgVAThrusterSetCollection)
agcls.AgTypeNameMap["IAgVAThrusterSetCollection"] = IAgVAThrusterSetCollection
__all__.append("IAgVAThrusterSetCollection")

class IAgVAThrusterSet(object):
    """The properties of a thruster set."""
    _uuid = "{AA4BEFC3-C3E6-4888-B920-109F57621589}"
    _num_methods = 3
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetDirectionDefinition"] = _raise_uninitialized_error
        self.__dict__["_SetDirectionDefinition"] = _raise_uninitialized_error
        self.__dict__["_GetThrusters"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAThrusterSet._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAThrusterSet from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAThrusterSet = agcom.GUID(IAgVAThrusterSet._uuid)
        vtable_offset_local = IAgVAThrusterSet._vtable_offset - 1
        self.__dict__["_GetDirectionDefinition"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSet, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetDirectionDefinition"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSet, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetThrusters"] = IAGFUNCTYPE(pUnk, IID_IAgVAThrusterSet, vtable_offset_local+3, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAThrusterSet.__dict__ and type(IAgVAThrusterSet.__dict__[attrname]) == property:
            return IAgVAThrusterSet.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAThrusterSet.")
    
    @property
    def DirectionDefinition(self) -> "AgEVAThrusterDirection":
        """The thruster set direction definition."""
        with agmarshall.AgEnum_arg(AgEVAThrusterDirection) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetDirectionDefinition"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @DirectionDefinition.setter
    def DirectionDefinition(self, inVal:"AgEVAThrusterDirection") -> None:
        with agmarshall.AgEnum_arg(AgEVAThrusterDirection, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetDirectionDefinition"](arg_inVal.COM_val))

    @property
    def Thrusters(self) -> "IAgVAThrusterSetCollection":
        """The list of thrusters."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAThrusterSetCollection:
            agcls.evaluate_hresult(self.__dict__["_GetThrusters"](byref(arg_ppVAThrusterSetCollection.COM_val)))
            return arg_ppVAThrusterSetCollection.python_val


agcls.AgClassCatalog.add_catalog_entry("{AA4BEFC3-C3E6-4888-B920-109F57621589}", IAgVAThrusterSet)
agcls.AgTypeNameMap["IAgVAThrusterSet"] = IAgVAThrusterSet
__all__.append("IAgVAThrusterSet")

class IAgVAAsTriggerCondition(object):
    """Properties for a constraint - an additional condition to be met to satisfy a stopping condition."""
    _uuid = "{5670AC34-2864-42ED-B32A-5572363C0CE7}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCriteria"] = _raise_uninitialized_error
        self.__dict__["_SetCriteria"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObject"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObject"] = _raise_uninitialized_error
        self.__dict__["_GetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_SetCalcObjectName"] = _raise_uninitialized_error
        self.__dict__["_GetValue"] = _raise_uninitialized_error
        self.__dict__["_SetValue"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetUseAbsoluteValue"] = _raise_uninitialized_error
        self.__dict__["_SetUseAbsoluteValue"] = _raise_uninitialized_error
        self.__dict__["_CopyCalcObjectToClipboard"] = _raise_uninitialized_error
        self.__dict__["_PasteCalcObjectFromClipboard"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAAsTriggerCondition._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAAsTriggerCondition from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAAsTriggerCondition = agcom.GUID(IAgVAAsTriggerCondition._uuid)
        vtable_offset_local = IAgVAAsTriggerCondition._vtable_offset - 1
        self.__dict__["_GetCriteria"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+1, POINTER(agcom.LONG))
        self.__dict__["_SetCriteria"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+2, agcom.LONG)
        self.__dict__["_GetCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_SetCalcObject"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+4, agcom.PVOID)
        self.__dict__["_GetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+5, POINTER(agcom.BSTR))
        self.__dict__["_SetCalcObjectName"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+6, agcom.BSTR)
        self.__dict__["_GetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+7, POINTER(agcom.VARIANT))
        self.__dict__["_SetValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+8, agcom.VARIANT)
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+9, POINTER(agcom.VARIANT))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+10, agcom.VARIANT)
        self.__dict__["_GetUseAbsoluteValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+11, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseAbsoluteValue"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+12, agcom.VARIANT_BOOL)
        self.__dict__["_CopyCalcObjectToClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+13, )
        self.__dict__["_PasteCalcObjectFromClipboard"] = IAGFUNCTYPE(pUnk, IID_IAgVAAsTriggerCondition, vtable_offset_local+14, )
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAAsTriggerCondition.__dict__ and type(IAgVAAsTriggerCondition.__dict__[attrname]) == property:
            return IAgVAAsTriggerCondition.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAAsTriggerCondition.")
    
    @property
    def Criteria(self) -> "AgEVACriteria":
        """The criteria to be applied to the desired value."""
        with agmarshall.AgEnum_arg(AgEVACriteria) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCriteria"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Criteria.setter
    def Criteria(self, inVal:"AgEVACriteria") -> None:
        with agmarshall.AgEnum_arg(AgEVACriteria, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCriteria"](arg_inVal.COM_val))

    @property
    def CalcObject(self) -> "IAgComponentInfo":
        """The calculation object to perform calculation to evaluate condition."""
        with agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObject"](byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    @CalcObject.setter
    def CalcObject(self, inVal:"IAgComponentInfo") -> None:
        with agmarshall.AgInterface_in_arg(inVal, IAgComponentInfo) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObject"](arg_inVal.COM_val))

    @property
    def CalcObjectName(self) -> str:
        """The name of the calculation object to perform calculation to evaluate condition."""
        with agmarshall.BSTR_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetCalcObjectName"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @CalcObjectName.setter
    def CalcObjectName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCalcObjectName"](arg_inVal.COM_val))

    @property
    def Value(self) -> typing.Any:
        """The value to satisfy the condition. Dimension depends on CalcObject."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetValue"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Value.setter
    def Value(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetValue"](arg_inVal.COM_val))

    @property
    def Tolerance(self) -> typing.Any:
        """How closely the test parameter must approximate the desired value for the constraint. Dimension depends on CalcObject."""
        with agmarshall.VARIANT_arg() as arg_pRetVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pRetVal.COM_val)))
            return arg_pRetVal.python_val

    @Tolerance.setter
    def Tolerance(self, inVal:typing.Any) -> None:
        with agmarshall.VARIANT_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_inVal.COM_val))

    @property
    def UseAbsoluteValue(self) -> bool:
        """Whether or not to take the absolute value of the calculation."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseAbsoluteValue"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseAbsoluteValue.setter
    def UseAbsoluteValue(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseAbsoluteValue"](arg_inVal.COM_val))

    def CopyCalcObjectToClipboard(self) -> None:
        """Copy calculation object to clipboard."""
        agcls.evaluate_hresult(self.__dict__["_CopyCalcObjectToClipboard"]())

    def PasteCalcObjectFromClipboard(self) -> None:
        """Replace calculation object with instance in clipboard."""
        agcls.evaluate_hresult(self.__dict__["_PasteCalcObjectFromClipboard"]())


agcls.AgClassCatalog.add_catalog_entry("{5670AC34-2864-42ED-B32A-5572363C0CE7}", IAgVAAsTriggerCondition)
agcls.AgTypeNameMap["IAgVAAsTriggerCondition"] = IAgVAAsTriggerCondition
__all__.append("IAgVAAsTriggerCondition")

class IAgVACustomFunctionScriptEngine(object):
    """Properties for custom functions."""
    _uuid = "{02AA62BC-AA81-400C-83A0-961729880708}"
    _num_methods = 4
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetScriptFilename"] = _raise_uninitialized_error
        self.__dict__["_SetScriptFilename"] = _raise_uninitialized_error
        self.__dict__["_GetFileExtensionName"] = _raise_uninitialized_error
        self.__dict__["_SetFileExtensionName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVACustomFunctionScriptEngine._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVACustomFunctionScriptEngine from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVACustomFunctionScriptEngine = agcom.GUID(IAgVACustomFunctionScriptEngine._uuid)
        vtable_offset_local = IAgVACustomFunctionScriptEngine._vtable_offset - 1
        self.__dict__["_GetScriptFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACustomFunctionScriptEngine, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetScriptFilename"] = IAGFUNCTYPE(pUnk, IID_IAgVACustomFunctionScriptEngine, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetFileExtensionName"] = IAGFUNCTYPE(pUnk, IID_IAgVACustomFunctionScriptEngine, vtable_offset_local+3, POINTER(agcom.BSTR))
        self.__dict__["_SetFileExtensionName"] = IAGFUNCTYPE(pUnk, IID_IAgVACustomFunctionScriptEngine, vtable_offset_local+4, agcom.BSTR)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVACustomFunctionScriptEngine.__dict__ and type(IAgVACustomFunctionScriptEngine.__dict__[attrname]) == property:
            return IAgVACustomFunctionScriptEngine.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVACustomFunctionScriptEngine.")
    
    @property
    def ScriptFilename(self) -> str:
        """The file containing the function to call."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetScriptFilename"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ScriptFilename.setter
    def ScriptFilename(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetScriptFilename"](arg_inVal.COM_val))

    @property
    def FileExtensionName(self) -> str:
        """The file extension."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFileExtensionName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FileExtensionName.setter
    def FileExtensionName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetFileExtensionName"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{02AA62BC-AA81-400C-83A0-961729880708}", IAgVACustomFunctionScriptEngine)
agcls.AgTypeNameMap["IAgVACustomFunctionScriptEngine"] = IAgVACustomFunctionScriptEngine
__all__.append("IAgVACustomFunctionScriptEngine")

class IAgVANumericalIntegrator(object):
    """The type of numerical integrator to be used by the propagator."""
    _uuid = "{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}"
    _num_methods = 0
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVANumericalIntegrator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalIntegrator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVANumericalIntegrator = agcom.GUID(IAgVANumericalIntegrator._uuid)
        vtable_offset_local = IAgVANumericalIntegrator._vtable_offset - 1
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalIntegrator.__dict__ and type(IAgVANumericalIntegrator.__dict__[attrname]) == property:
            return IAgVANumericalIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalIntegrator.")
    

agcls.AgClassCatalog.add_catalog_entry("{5E802B1E-D8EF-4190-B238-7E0F4AFCA355}", IAgVANumericalIntegrator)
agcls.AgTypeNameMap["IAgVANumericalIntegrator"] = IAgVANumericalIntegrator
__all__.append("IAgVANumericalIntegrator")

class IAgVAPropagatorFunctionCollection(object):
    """The list of propagator functions - affecting forces that you want to model for orbit propagation."""
    _uuid = "{373180B3-D083-4CB1-ACC8-9D6C738F19E6}"
    _num_methods = 11
    _vtable_offset = IDispatch._vtable_offset + IDispatch._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_Add"] = _raise_uninitialized_error
        self.__dict__["_Item"] = _raise_uninitialized_error
        self.__dict__["_Remove"] = _raise_uninitialized_error
        self.__dict__["_Get_NewEnum"] = _raise_uninitialized_error
        self.__dict__["_GetCount"] = _raise_uninitialized_error
        self.__dict__["_RemoveAll"] = _raise_uninitialized_error
        self.__dict__["_Cut"] = _raise_uninitialized_error
        self.__dict__["_Paste"] = _raise_uninitialized_error
        self.__dict__["_InsertCopy"] = _raise_uninitialized_error
        self.__dict__["_GetItemByIndex"] = _raise_uninitialized_error
        self.__dict__["_GetItemByName"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAPropagatorFunctionCollection._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAPropagatorFunctionCollection from source object.")
        self.__dict__["enumerator"] = None
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAPropagatorFunctionCollection = agcom.GUID(IAgVAPropagatorFunctionCollection._uuid)
        vtable_offset_local = IAgVAPropagatorFunctionCollection._vtable_offset - 1
        self.__dict__["_Add"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+1, agcom.BSTR, POINTER(agcom.PVOID))
        self.__dict__["_Item"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+2, agcom.VARIANT, POINTER(agcom.PVOID))
        self.__dict__["_Remove"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+3, agcom.VARIANT)
        self.__dict__["_Get_NewEnum"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetCount"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_RemoveAll"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+6, )
        self.__dict__["_Cut"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+7, agcom.VARIANT)
        self.__dict__["_Paste"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+8, POINTER(agcom.PVOID))
        self.__dict__["_InsertCopy"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+9, agcom.PVOID, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByIndex"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+10, agcom.INT, POINTER(agcom.PVOID))
        self.__dict__["_GetItemByName"] = IAGFUNCTYPE(pUnk, IID_IAgVAPropagatorFunctionCollection, vtable_offset_local+11, agcom.BSTR, POINTER(agcom.PVOID))
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAPropagatorFunctionCollection.__dict__ and type(IAgVAPropagatorFunctionCollection.__dict__[attrname]) == property:
            return IAgVAPropagatorFunctionCollection.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAPropagatorFunctionCollection.")
    def __iter__(self):
        self.__dict__["enumerator"] = self._NewEnum
        self.__dict__["enumerator"].Reset()
        return self
    def __next__(self) -> "IAgComponentInfo":
        if self.__dict__["enumerator"] is None:
            raise StopIteration
        nextval = self.__dict__["enumerator"].Next()
        if nextval is None:
            raise StopIteration
        return agmarshall.python_val_from_VARIANT(nextval)
    
    def Add(self, resultName:str) -> "IAgComponentInfo":
        """Adds a function to the collection."""
        with agmarshall.BSTR_arg(resultName) as arg_resultName, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_Add"](arg_resultName.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def Item(self, indexOrName:typing.Any) -> "IAgComponentInfo":
        """Allows you to iterate through the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_Item"](arg_indexOrName.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def Remove(self, indexOrName:typing.Any) -> None:
        """Removes the specified function from the collection."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Remove"](arg_indexOrName.COM_val))

    @property
    def _NewEnum(self) -> IEnumVARIANT:
        """Allows you to enumerate through the collection."""
        with agmarshall.IEnumVARIANT_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_Get_NewEnum"](byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    @property
    def Count(self) -> int:
        """Returns the size of the collection."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCount"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def RemoveAll(self) -> None:
        """Removes all functions from the collection."""
        agcls.evaluate_hresult(self.__dict__["_RemoveAll"]())

    def Cut(self, indexOrName:typing.Any) -> None:
        """Copies a propagator function to the clipboard and removes the propagator function from the list."""
        with agmarshall.VARIANT_arg(indexOrName) as arg_indexOrName:
            agcls.evaluate_hresult(self.__dict__["_Cut"](arg_indexOrName.COM_val))

    def Paste(self) -> "IAgComponentInfo":
        """Pastes a propagator function from the clipboard into the list."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAPropFunc:
            agcls.evaluate_hresult(self.__dict__["_Paste"](byref(arg_ppVAPropFunc.COM_val)))
            return arg_ppVAPropFunc.python_val

    def InsertCopy(self, propFunc:"IAgComponentInfo") -> "IAgComponentInfo":
        """Copies a propagator function and inserts the copy into the list."""
        with agmarshall.AgInterface_in_arg(propFunc, IAgComponentInfo) as arg_propFunc, \
             agmarshall.AgInterface_out_arg() as arg_ppRetVal:
            agcls.evaluate_hresult(self.__dict__["_InsertCopy"](arg_propFunc.COM_val, byref(arg_ppRetVal.COM_val)))
            return arg_ppRetVal.python_val

    def GetItemByIndex(self, index:int) -> "IAgComponentInfo":
        """Retrieve an item from the collection by index."""
        with agmarshall.INT_arg(index) as arg_index, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByIndex"](arg_index.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    def GetItemByName(self, name:str) -> "IAgComponentInfo":
        """Retrieve an item from the collection by name."""
        with agmarshall.BSTR_arg(name) as arg_name, \
             agmarshall.AgInterface_out_arg() as arg_ppComponent:
            agcls.evaluate_hresult(self.__dict__["_GetItemByName"](arg_name.COM_val, byref(arg_ppComponent.COM_val)))
            return arg_ppComponent.python_val

    __getitem__ = Item



agcls.AgClassCatalog.add_catalog_entry("{373180B3-D083-4CB1-ACC8-9D6C738F19E6}", IAgVAPropagatorFunctionCollection)
agcls.AgTypeNameMap["IAgVAPropagatorFunctionCollection"] = IAgVAPropagatorFunctionCollection
__all__.append("IAgVAPropagatorFunctionCollection")

class IAgVANumericalPropagatorWrapper(object):
    """General properties for propagators."""
    _uuid = "{5E7589D9-478E-4C8F-A856-2E548833C9C5}"
    _num_methods = 14
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetUseVariationOfParameters"] = _raise_uninitialized_error
        self.__dict__["_SetUseVariationOfParameters"] = _raise_uninitialized_error
        self.__dict__["_GetUseRegularizedTime"] = _raise_uninitialized_error
        self.__dict__["_SetUseRegularizedTime"] = _raise_uninitialized_error
        self.__dict__["_GetRegularizedTimeExponent"] = _raise_uninitialized_error
        self.__dict__["_SetRegularizedTimeExponent"] = _raise_uninitialized_error
        self.__dict__["_GetRegularizedTimeStepsPerOrbit"] = _raise_uninitialized_error
        self.__dict__["_SetRegularizedTimeStepsPerOrbit"] = _raise_uninitialized_error
        self.__dict__["_GetPropagatorFunctions"] = _raise_uninitialized_error
        self.__dict__["_GetNumericalIntegrator"] = _raise_uninitialized_error
        self.__dict__["_GetNumericalIntegratorType"] = _raise_uninitialized_error
        self.__dict__["_SetNumericalIntegrator"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVANumericalPropagatorWrapper._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalPropagatorWrapper from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVANumericalPropagatorWrapper = agcom.GUID(IAgVANumericalPropagatorWrapper._uuid)
        vtable_offset_local = IAgVANumericalPropagatorWrapper._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetUseVariationOfParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseVariationOfParameters"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseRegularizedTime"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseRegularizedTime"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetRegularizedTimeExponent"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+7, POINTER(agcom.DOUBLE))
        self.__dict__["_SetRegularizedTimeExponent"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+8, agcom.DOUBLE)
        self.__dict__["_GetRegularizedTimeStepsPerOrbit"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+9, POINTER(agcom.LONG))
        self.__dict__["_SetRegularizedTimeStepsPerOrbit"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+10, agcom.LONG)
        self.__dict__["_GetPropagatorFunctions"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+11, POINTER(agcom.PVOID))
        self.__dict__["_GetNumericalIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+12, POINTER(agcom.PVOID))
        self.__dict__["_GetNumericalIntegratorType"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+13, POINTER(agcom.LONG))
        self.__dict__["_SetNumericalIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapper, vtable_offset_local+14, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalPropagatorWrapper.__dict__ and type(IAgVANumericalPropagatorWrapper.__dict__[attrname]) == property:
            return IAgVANumericalPropagatorWrapper.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalPropagatorWrapper.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body for Propagation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def UseVariationOfParameters(self) -> bool:
        """Whether or not to use a variation of parameters(VOP) in universal variables formulation of the equations of motion; related to numerical integrator."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseVariationOfParameters"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseVariationOfParameters.setter
    def UseVariationOfParameters(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseVariationOfParameters"](arg_inVal.COM_val))

    @property
    def UseRegularizedTime(self) -> bool:
        """Whether or not to use regularized time; related to numerical integrator."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseRegularizedTime"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseRegularizedTime.setter
    def UseRegularizedTime(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseRegularizedTime"](arg_inVal.COM_val))

    @property
    def RegularizedTimeExponent(self) -> float:
        """The exponent to use in regularized time; related to numerical integrator. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRegularizedTimeExponent"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RegularizedTimeExponent.setter
    def RegularizedTimeExponent(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRegularizedTimeExponent"](arg_inVal.COM_val))

    @property
    def RegularizedTimeStepsPerOrbit(self) -> int:
        """The steps per orbit used in regularized time; related to numerical integrator. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetRegularizedTimeStepsPerOrbit"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @RegularizedTimeStepsPerOrbit.setter
    def RegularizedTimeStepsPerOrbit(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetRegularizedTimeStepsPerOrbit"](arg_inVal.COM_val))

    @property
    def PropagatorFunctions(self) -> "IAgVAPropagatorFunctionCollection":
        """The list of propagator functions."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAPropagatorFunctionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetPropagatorFunctions"](byref(arg_ppVAPropagatorFunctionCollection.COM_val)))
            return arg_ppVAPropagatorFunctionCollection.python_val

    @property
    def NumericalIntegrator(self) -> "IAgVANumericalIntegrator":
        """The numerical integrator."""
        with agmarshall.AgInterface_out_arg() as arg_ppVANumericalIntegrator:
            agcls.evaluate_hresult(self.__dict__["_GetNumericalIntegrator"](byref(arg_ppVANumericalIntegrator.COM_val)))
            return arg_ppVANumericalIntegrator.python_val

    @property
    def NumericalIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The single step integrator type."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumericalIntegratorType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetNumericalIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the single step integrator."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator, integrator) as arg_integrator:
            agcls.evaluate_hresult(self.__dict__["_SetNumericalIntegrator"](arg_integrator.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{5E7589D9-478E-4C8F-A856-2E548833C9C5}", IAgVANumericalPropagatorWrapper)
agcls.AgTypeNameMap["IAgVANumericalPropagatorWrapper"] = IAgVANumericalPropagatorWrapper
__all__.append("IAgVANumericalPropagatorWrapper")

class IAgVANumericalPropagatorWrapperCR3BP(object):
    """General properties for three-body problem propagators."""
    _uuid = "{C0662E79-7987-4363-B97D-2277A12A7B5B}"
    _num_methods = 6
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_SetCentralBodyName"] = _raise_uninitialized_error
        self.__dict__["_GetPropagatorFunctions"] = _raise_uninitialized_error
        self.__dict__["_GetNumericalIntegrator"] = _raise_uninitialized_error
        self.__dict__["_GetNumericalIntegratorType"] = _raise_uninitialized_error
        self.__dict__["_SetNumericalIntegrator"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVANumericalPropagatorWrapperCR3BP._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVANumericalPropagatorWrapperCR3BP from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVANumericalPropagatorWrapperCR3BP = agcom.GUID(IAgVANumericalPropagatorWrapperCR3BP._uuid)
        vtable_offset_local = IAgVANumericalPropagatorWrapperCR3BP._vtable_offset - 1
        self.__dict__["_GetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+1, POINTER(agcom.BSTR))
        self.__dict__["_SetCentralBodyName"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+2, agcom.BSTR)
        self.__dict__["_GetPropagatorFunctions"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+3, POINTER(agcom.PVOID))
        self.__dict__["_GetNumericalIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+4, POINTER(agcom.PVOID))
        self.__dict__["_GetNumericalIntegratorType"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetNumericalIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVANumericalPropagatorWrapperCR3BP, vtable_offset_local+6, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVANumericalPropagatorWrapperCR3BP.__dict__ and type(IAgVANumericalPropagatorWrapperCR3BP.__dict__[attrname]) == property:
            return IAgVANumericalPropagatorWrapperCR3BP.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVANumericalPropagatorWrapperCR3BP.")
    
    @property
    def CentralBodyName(self) -> str:
        """The central body for Propagation."""
        with agmarshall.BSTR_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCentralBodyName"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CentralBodyName.setter
    def CentralBodyName(self, inVal:str) -> None:
        with agmarshall.BSTR_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCentralBodyName"](arg_inVal.COM_val))

    @property
    def PropagatorFunctions(self) -> "IAgVAPropagatorFunctionCollection":
        """The list of propagator functions."""
        with agmarshall.AgInterface_out_arg() as arg_ppVAPropagatorFunctionCollection:
            agcls.evaluate_hresult(self.__dict__["_GetPropagatorFunctions"](byref(arg_ppVAPropagatorFunctionCollection.COM_val)))
            return arg_ppVAPropagatorFunctionCollection.python_val

    @property
    def NumericalIntegrator(self) -> "IAgVANumericalIntegrator":
        """The numerical integrator."""
        with agmarshall.AgInterface_out_arg() as arg_ppVANumericalIntegrator:
            agcls.evaluate_hresult(self.__dict__["_GetNumericalIntegrator"](byref(arg_ppVANumericalIntegrator.COM_val)))
            return arg_ppVANumericalIntegrator.python_val

    @property
    def NumericalIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The numerical integrator type."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetNumericalIntegratorType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetNumericalIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the numerical integrator."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator, integrator) as arg_integrator:
            agcls.evaluate_hresult(self.__dict__["_SetNumericalIntegrator"](arg_integrator.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C0662E79-7987-4363-B97D-2277A12A7B5B}", IAgVANumericalPropagatorWrapperCR3BP)
agcls.AgTypeNameMap["IAgVANumericalPropagatorWrapperCR3BP"] = IAgVANumericalPropagatorWrapperCR3BP
__all__.append("IAgVANumericalPropagatorWrapperCR3BP")

class IAgVABulirschStoerIntegrator(object):
    """Properties for the Bulirsch-Stoer numerical integrator."""
    _uuid = "{2A307A62-0365-405B-B493-5F11810DF50C}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxSequences"] = _raise_uninitialized_error
        self.__dict__["_SetMaxSequences"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_GetTolerance"] = _raise_uninitialized_error
        self.__dict__["_SetTolerance"] = _raise_uninitialized_error
        self.__dict__["_GetFirstSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetFirstSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetSecondSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetSecondSafetyCoefficient"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVABulirschStoerIntegrator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVABulirschStoerIntegrator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVABulirschStoerIntegrator = agcom.GUID(IAgVABulirschStoerIntegrator._uuid)
        vtable_offset_local = IAgVABulirschStoerIntegrator._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxSequences"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+15, POINTER(agcom.LONG))
        self.__dict__["_SetMaxSequences"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+16, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+17, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+18, agcom.LONG)
        self.__dict__["_GetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetTolerance"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetFirstSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+21, POINTER(agcom.DOUBLE))
        self.__dict__["_SetFirstSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+22, agcom.DOUBLE)
        self.__dict__["_GetSecondSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+23, POINTER(agcom.DOUBLE))
        self.__dict__["_SetSecondSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVABulirschStoerIntegrator, vtable_offset_local+24, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVABulirschStoerIntegrator.__dict__ and type(IAgVABulirschStoerIntegrator.__dict__[attrname]) == property:
            return IAgVABulirschStoerIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVABulirschStoerIntegrator.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxSequences(self) -> int:
        """The maximum number of sequences. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxSequences"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxSequences.setter
    def MaxSequences(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxSequences"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum number of iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))

    @property
    def Tolerance(self) -> float:
        """The error tolerance for step size control. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetTolerance"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @Tolerance.setter
    def Tolerance(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetTolerance"](arg_inVal.COM_val))

    @property
    def FirstSafetyCoefficient(self) -> float:
        """The first safety coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetFirstSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @FirstSafetyCoefficient.setter
    def FirstSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetFirstSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def SecondSafetyCoefficient(self) -> float:
        """The second safety coefficient. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSecondSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @SecondSafetyCoefficient.setter
    def SecondSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetSecondSafetyCoefficient"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2A307A62-0365-405B-B493-5F11810DF50C}", IAgVABulirschStoerIntegrator)
agcls.AgTypeNameMap["IAgVABulirschStoerIntegrator"] = IAgVABulirschStoerIntegrator
__all__.append("IAgVABulirschStoerIntegrator")

class IAgVAGaussJacksonIntegrator(object):
    """Properties for the Gauss-Jackson numerical integrator."""
    _uuid = "{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}"
    _num_methods = 11
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCorrectorRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCorrectorRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetCorrectorMode"] = _raise_uninitialized_error
        self.__dict__["_SetCorrectorMode"] = _raise_uninitialized_error
        self.__dict__["_GetMaxCorrectorIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxCorrectorIterations"] = _raise_uninitialized_error
        self.__dict__["_GetSingleStepIntegrator"] = _raise_uninitialized_error
        self.__dict__["_GetSingleStepIntegratorType"] = _raise_uninitialized_error
        self.__dict__["_SetSingleStepIntegrator"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVAGaussJacksonIntegrator._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVAGaussJacksonIntegrator from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVAGaussJacksonIntegrator = agcom.GUID(IAgVAGaussJacksonIntegrator._uuid)
        vtable_offset_local = IAgVAGaussJacksonIntegrator._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetMaxCorrectorRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+3, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxCorrectorRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+4, agcom.DOUBLE)
        self.__dict__["_GetCorrectorMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+5, POINTER(agcom.LONG))
        self.__dict__["_SetCorrectorMode"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+6, agcom.LONG)
        self.__dict__["_GetMaxCorrectorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+7, POINTER(agcom.LONG))
        self.__dict__["_SetMaxCorrectorIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+8, agcom.LONG)
        self.__dict__["_GetSingleStepIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+9, POINTER(agcom.PVOID))
        self.__dict__["_GetSingleStepIntegratorType"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+10, POINTER(agcom.LONG))
        self.__dict__["_SetSingleStepIntegrator"] = IAGFUNCTYPE(pUnk, IID_IAgVAGaussJacksonIntegrator, vtable_offset_local+11, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVAGaussJacksonIntegrator.__dict__ and type(IAgVAGaussJacksonIntegrator.__dict__[attrname]) == property:
            return IAgVAGaussJacksonIntegrator.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVAGaussJacksonIntegrator.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def MaxCorrectorRelErr(self) -> float:
        """The maximum relative error between corrector iterations. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCorrectorRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCorrectorRelErr.setter
    def MaxCorrectorRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCorrectorRelErr"](arg_inVal.COM_val))

    @property
    def CorrectorMode(self) -> "AgEVAPredictorCorrector":
        """The Predictor Corrector scheme."""
        with agmarshall.AgEnum_arg(AgEVAPredictorCorrector) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCorrectorMode"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CorrectorMode.setter
    def CorrectorMode(self, inVal:"AgEVAPredictorCorrector") -> None:
        with agmarshall.AgEnum_arg(AgEVAPredictorCorrector, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCorrectorMode"](arg_inVal.COM_val))

    @property
    def MaxCorrectorIterations(self) -> int:
        """The maximum corrector iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxCorrectorIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxCorrectorIterations.setter
    def MaxCorrectorIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxCorrectorIterations"](arg_inVal.COM_val))

    @property
    def SingleStepIntegrator(self) -> "IAgVANumericalIntegrator":
        """The stopping integrator; a single-step integrator."""
        with agmarshall.AgInterface_out_arg() as arg_ppVANumericalIntegrator:
            agcls.evaluate_hresult(self.__dict__["_GetSingleStepIntegrator"](byref(arg_ppVANumericalIntegrator.COM_val)))
            return arg_ppVANumericalIntegrator.python_val

    @property
    def SingleStepIntegratorType(self) -> "AgEVANumericalIntegrator":
        """The stopping integrator type."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetSingleStepIntegratorType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    def SetSingleStepIntegrator(self, integrator:"AgEVANumericalIntegrator") -> None:
        """Changes the stopping integrator."""
        with agmarshall.AgEnum_arg(AgEVANumericalIntegrator, integrator) as arg_integrator:
            agcls.evaluate_hresult(self.__dict__["_SetSingleStepIntegrator"](arg_integrator.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{C68E6FDF-DA4F-4FA6-A313-3CA4EF865E0C}", IAgVAGaussJacksonIntegrator)
agcls.AgTypeNameMap["IAgVAGaussJacksonIntegrator"] = IAgVAGaussJacksonIntegrator
__all__.append("IAgVAGaussJacksonIntegrator")

class IAgVARK2nd3rd(object):
    """Properties for the RK2nd3rd numerical integrator."""
    _uuid = "{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_GetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_SetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARK2nd3rd._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK2nd3rd from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARK2nd3rd = agcom.GUID(IAgVARK2nd3rd._uuid)
        vtable_offset_local = IAgVARK2nd3rd._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK2nd3rd, vtable_offset_local+24, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK2nd3rd.__dict__ and type(IAgVARK2nd3rd.__dict__[attrname]) == property:
            return IAgVARK2nd3rd.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK2nd3rd.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsErr"](arg_inVal.COM_val))

    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to decrease step size if the error is too high. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to increase step size if the error is too low. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        with agmarshall.AgEnum_arg(AgEVAErrorControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetErrorControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAErrorControl, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetErrorControl"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{B45A629D-EAD2-45CB-9757-0AF4BBC0967A}", IAgVARK2nd3rd)
agcls.AgTypeNameMap["IAgVARK2nd3rd"] = IAgVARK2nd3rd
__all__.append("IAgVARK2nd3rd")

class IAgVARK4th(object):
    """Properties for the RK4th numerical integrator."""
    _uuid = "{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}"
    _num_methods = 2
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARK4th._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4th from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARK4th = agcom.GUID(IAgVARK4th._uuid)
        vtable_offset_local = IAgVARK4th._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th, vtable_offset_local+2, agcom.DOUBLE)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4th.__dict__ and type(IAgVARK4th.__dict__[attrname]) == property:
            return IAgVARK4th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4th.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{AC6ACE9D-D174-4A09-9E10-7EE104ED8E9C}", IAgVARK4th)
agcls.AgTypeNameMap["IAgVARK4th"] = IAgVARK4th
__all__.append("IAgVARK4th")

class IAgVARK4th5th(object):
    """Properties for the RK4th5th numerical integrator."""
    _uuid = "{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_GetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_SetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARK4th5th._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4th5th from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARK4th5th = agcom.GUID(IAgVARK4th5th._uuid)
        vtable_offset_local = IAgVARK4th5th._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4th5th, vtable_offset_local+24, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4th5th.__dict__ and type(IAgVARK4th5th.__dict__[attrname]) == property:
            return IAgVARK4th5th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4th5th.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsErr"](arg_inVal.COM_val))

    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to decrease step size if the error is too high. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to increase step size if the error is too low. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        with agmarshall.AgEnum_arg(AgEVAErrorControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetErrorControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAErrorControl, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetErrorControl"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{F71F9E83-14BD-4BA3-BB99-AD7CDA3FCA40}", IAgVARK4th5th)
agcls.AgTypeNameMap["IAgVARK4th5th"] = IAgVARK4th5th
__all__.append("IAgVARK4th5th")

class IAgVARK4thAdapt(object):
    """Properties for the RK4thAdapt numerical integrator."""
    _uuid = "{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_GetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_SetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARK4thAdapt._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARK4thAdapt from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARK4thAdapt = agcom.GUID(IAgVARK4thAdapt._uuid)
        vtable_offset_local = IAgVARK4thAdapt._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARK4thAdapt, vtable_offset_local+24, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARK4thAdapt.__dict__ and type(IAgVARK4thAdapt.__dict__[attrname]) == property:
            return IAgVARK4thAdapt.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARK4thAdapt.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsErr"](arg_inVal.COM_val))

    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to decrease step size if the error is too high. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to increase step size if the error is too low. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        with agmarshall.AgEnum_arg(AgEVAErrorControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetErrorControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAErrorControl, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetErrorControl"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{2FD2C00D-0DB5-4933-99A1-759E7D0F6A85}", IAgVARK4thAdapt)
agcls.AgTypeNameMap["IAgVARK4thAdapt"] = IAgVARK4thAdapt
__all__.append("IAgVARK4thAdapt")

class IAgVARKF7th8th(object):
    """Properties for the RK7th8th numerical integrator."""
    _uuid = "{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}"
    _num_methods = 24
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_GetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_SetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARKF7th8th._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARKF7th8th from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARKF7th8th = agcom.GUID(IAgVARKF7th8th._uuid)
        vtable_offset_local = IAgVARKF7th8th._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARKF7th8th, vtable_offset_local+24, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARKF7th8th.__dict__ and type(IAgVARKF7th8th.__dict__[attrname]) == property:
            return IAgVARKF7th8th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARKF7th8th.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsErr"](arg_inVal.COM_val))

    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to decrease step size if the error is too high. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to increase step size if the error is too low. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        with agmarshall.AgEnum_arg(AgEVAErrorControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetErrorControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAErrorControl, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetErrorControl"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{05ADCD42-57F9-456E-B29A-AB3AADD9DB1C}", IAgVARKF7th8th)
agcls.AgTypeNameMap["IAgVARKF7th8th"] = IAgVARKF7th8th
__all__.append("IAgVARKF7th8th")

class IAgVARKV8th9th(object):
    """Properties for the RK8th9th numerical integrator."""
    _uuid = "{E4CEAA67-BE78-472F-B746-52878835E818}"
    _num_methods = 26
    _vtable_offset = IUnknown._vtable_offset + IUnknown._num_methods
    def __init__(self, sourceObject=None):
        self.__dict__["_pUnk"] = None
        self.__dict__["_GetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_SetInitialStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseFixedStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetUseMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_SetMaxStep"] = _raise_uninitialized_error
        self.__dict__["_GetMinStep"] = _raise_uninitialized_error
        self.__dict__["_SetMinStep"] = _raise_uninitialized_error
        self.__dict__["_GetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxRelErr"] = _raise_uninitialized_error
        self.__dict__["_GetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_SetMaxAbsErr"] = _raise_uninitialized_error
        self.__dict__["_GetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetHighSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_SetLowSafetyCoefficient"] = _raise_uninitialized_error
        self.__dict__["_GetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_SetErrorControl"] = _raise_uninitialized_error
        self.__dict__["_GetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_SetMaxIterations"] = _raise_uninitialized_error
        self.__dict__["_GetCoeffType"] = _raise_uninitialized_error
        self.__dict__["_SetCoeffType"] = _raise_uninitialized_error
        if sourceObject is not None and sourceObject.__dict__["_pUnk"] is not None:
            pUnk = sourceObject.__dict__["_pUnk"].QueryInterface(agcom.GUID(IAgVARKV8th9th._uuid))
            if pUnk is not None:
                self._private_init(pUnk)
                del(pUnk)
            else:
                raise STKInvalidCastError("Failed to create IAgVARKV8th9th from source object.")
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IID_IAgVARKV8th9th = agcom.GUID(IAgVARKV8th9th._uuid)
        vtable_offset_local = IAgVARKV8th9th._vtable_offset - 1
        self.__dict__["_GetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+1, POINTER(agcom.DOUBLE))
        self.__dict__["_SetInitialStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+2, agcom.DOUBLE)
        self.__dict__["_GetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+3, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseFixedStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+4, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+5, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+6, agcom.VARIANT_BOOL)
        self.__dict__["_GetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+7, POINTER(agcom.VARIANT_BOOL))
        self.__dict__["_SetUseMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+8, agcom.VARIANT_BOOL)
        self.__dict__["_GetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+9, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+10, agcom.DOUBLE)
        self.__dict__["_GetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+11, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMinStep"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+12, agcom.DOUBLE)
        self.__dict__["_GetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+13, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxRelErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+14, agcom.DOUBLE)
        self.__dict__["_GetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+15, POINTER(agcom.DOUBLE))
        self.__dict__["_SetMaxAbsErr"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+16, agcom.DOUBLE)
        self.__dict__["_GetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+17, POINTER(agcom.DOUBLE))
        self.__dict__["_SetHighSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+18, agcom.DOUBLE)
        self.__dict__["_GetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+19, POINTER(agcom.DOUBLE))
        self.__dict__["_SetLowSafetyCoefficient"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+20, agcom.DOUBLE)
        self.__dict__["_GetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+21, POINTER(agcom.LONG))
        self.__dict__["_SetErrorControl"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+22, agcom.LONG)
        self.__dict__["_GetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+23, POINTER(agcom.LONG))
        self.__dict__["_SetMaxIterations"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+24, agcom.LONG)
        self.__dict__["_GetCoeffType"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+25, POINTER(agcom.LONG))
        self.__dict__["_SetCoeffType"] = IAGFUNCTYPE(pUnk, IID_IAgVARKV8th9th, vtable_offset_local+26, agcom.LONG)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def _get_property(self, attrname):
        if attrname in IAgVARKV8th9th.__dict__ and type(IAgVARKV8th9th.__dict__[attrname]) == property:
            return IAgVARKV8th9th.__dict__[attrname]
        return None
    def __setattr__(self, attrname, value):
        if self._get_property(attrname) is not None:
            self._get_property(attrname).__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in IAgVARKV8th9th.")
    
    @property
    def InitialStep(self) -> float:
        """The initial step. Uses time dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetInitialStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @InitialStep.setter
    def InitialStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetInitialStep"](arg_inVal.COM_val))

    @property
    def UseFixedStep(self) -> bool:
        """True if running in fixed-step mode."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseFixedStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseFixedStep.setter
    def UseFixedStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseFixedStep"](arg_inVal.COM_val))

    @property
    def UseMaxStep(self) -> bool:
        """Whether or not to enforce the maximum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMaxStep.setter
    def UseMaxStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMaxStep"](arg_inVal.COM_val))

    @property
    def UseMinStep(self) -> bool:
        """Whether or not to enforce the minimum step."""
        with agmarshall.VARIANT_BOOL_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetUseMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @UseMinStep.setter
    def UseMinStep(self, inVal:bool) -> None:
        with agmarshall.VARIANT_BOOL_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetUseMinStep"](arg_inVal.COM_val))

    @property
    def MaxStep(self) -> float:
        """The maximum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxStep.setter
    def MaxStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxStep"](arg_inVal.COM_val))

    @property
    def MinStep(self) -> float:
        """The minimum step size to allow (absolute value). Uses Time Dimension."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMinStep"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MinStep.setter
    def MinStep(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMinStep"](arg_inVal.COM_val))

    @property
    def MaxRelErr(self) -> float:
        """The maximum relative error used to control step size. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxRelErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxRelErr.setter
    def MaxRelErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxRelErr"](arg_inVal.COM_val))

    @property
    def MaxAbsErr(self) -> float:
        """The maximum absolute error; Also used if relative scale is too small. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxAbsErr"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxAbsErr.setter
    def MaxAbsErr(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxAbsErr"](arg_inVal.COM_val))

    @property
    def HighSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to decrease step size if the error is too high. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetHighSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @HighSafetyCoefficient.setter
    def HighSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetHighSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def LowSafetyCoefficient(self) -> float:
        """The 'safety' coefficent used to increase step size if the error is too low. Dimensionless."""
        with agmarshall.DOUBLE_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetLowSafetyCoefficient"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @LowSafetyCoefficient.setter
    def LowSafetyCoefficient(self, inVal:float) -> None:
        with agmarshall.DOUBLE_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetLowSafetyCoefficient"](arg_inVal.COM_val))

    @property
    def ErrorControl(self) -> "AgEVAErrorControl":
        """The error control method."""
        with agmarshall.AgEnum_arg(AgEVAErrorControl) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetErrorControl"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @ErrorControl.setter
    def ErrorControl(self, inVal:"AgEVAErrorControl") -> None:
        with agmarshall.AgEnum_arg(AgEVAErrorControl, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetErrorControl"](arg_inVal.COM_val))

    @property
    def MaxIterations(self) -> int:
        """The maximum iterations. Dimensionless."""
        with agmarshall.LONG_arg() as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetMaxIterations"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @MaxIterations.setter
    def MaxIterations(self, inVal:int) -> None:
        with agmarshall.LONG_arg(inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetMaxIterations"](arg_inVal.COM_val))

    @property
    def CoeffType(self) -> "AgEVACoeffRKV8th9th":
        """The set of coefficients to use."""
        with agmarshall.AgEnum_arg(AgEVACoeffRKV8th9th) as arg_pVal:
            agcls.evaluate_hresult(self.__dict__["_GetCoeffType"](byref(arg_pVal.COM_val)))
            return arg_pVal.python_val

    @CoeffType.setter
    def CoeffType(self, inVal:"AgEVACoeffRKV8th9th") -> None:
        with agmarshall.AgEnum_arg(AgEVACoeffRKV8th9th, inVal) as arg_inVal:
            agcls.evaluate_hresult(self.__dict__["_SetCoeffType"](arg_inVal.COM_val))


agcls.AgClassCatalog.add_catalog_entry("{E4CEAA67-BE78-472F-B746-52878835E818}", IAgVARKV8th9th)
agcls.AgTypeNameMap["IAgVARKV8th9th"] = IAgVARKV8th9th
__all__.append("IAgVARKV8th9th")



class AgVADriverMCS(IAgVADriverMCS, IAgVePropagator):
    """Basic properties of an Astrogator satellite."""
    def __init__(self, sourceObject=None):
        IAgVADriverMCS.__init__(self, sourceObject)
        IAgVePropagator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADriverMCS._private_init(self, pUnk)
        IAgVePropagator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADriverMCS._get_property(self, attrname) is not None: found_prop = IAgVADriverMCS._get_property(self, attrname)
        if IAgVePropagator._get_property(self, attrname) is not None: found_prop = IAgVePropagator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADriverMCS.")
        
agcls.AgClassCatalog.add_catalog_entry("{56D84C70-9D0D-4ACA-8CE5-C41E951E024C}", AgVADriverMCS)
__all__.append("AgVADriverMCS")


class AgVAMCSSegmentCollection(IAgVAMCSSegmentCollection, IAgRuntimeTypeInfoProvider):
    """The Mission Control Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegmentCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegmentCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegmentCollection._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegmentCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSegmentCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2F91182-1E74-4422-A660-6250A42732C3}", AgVAMCSSegmentCollection)
__all__.append("AgVAMCSSegmentCollection")


class AgVAMCSEnd(IAgVAMCSEnd, IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgComponentInfo):
    """The End segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSEnd.__init__(self, sourceObject)
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSEnd._private_init(self, pUnk)
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSEnd._get_property(self, attrname) is not None: found_prop = IAgVAMCSEnd._get_property(self, attrname)
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSEnd.")
        
agcls.AgClassCatalog.add_catalog_entry("{048FE652-88E7-4000-B371-A2D708599F34}", AgVAMCSEnd)
__all__.append("AgVAMCSEnd")


class AgVAMCSInitialState(IAgVAMCSInitialState, IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgComponentInfo, IAgCloneable):
    """The Initial State segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSInitialState.__init__(self, sourceObject)
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSInitialState._private_init(self, pUnk)
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSInitialState._get_property(self, attrname) is not None: found_prop = IAgVAMCSInitialState._get_property(self, attrname)
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSInitialState.")
        
agcls.AgClassCatalog.add_catalog_entry("{E3010ADE-CB96-470C-B380-3C58B23173AC}", AgVAMCSInitialState)
__all__.append("AgVAMCSInitialState")


class AgVASpacecraftParameters(IAgVASpacecraftParameters, IAgRuntimeTypeInfoProvider):
    """Spacecraft parameters."""
    def __init__(self, sourceObject=None):
        IAgVASpacecraftParameters.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASpacecraftParameters._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASpacecraftParameters._get_property(self, attrname) is not None: found_prop = IAgVASpacecraftParameters._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASpacecraftParameters.")
        
agcls.AgClassCatalog.add_catalog_entry("{75F1E929-B0B9-4AE8-8C84-7273B9211771}", AgVASpacecraftParameters)
__all__.append("AgVASpacecraftParameters")


class AgVAFuelTank(IAgVAFuelTank, IAgRuntimeTypeInfoProvider):
    """Fuel Tank parameters."""
    def __init__(self, sourceObject=None):
        IAgVAFuelTank.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAFuelTank._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAFuelTank._get_property(self, attrname) is not None: found_prop = IAgVAFuelTank._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAFuelTank.")
        
agcls.AgClassCatalog.add_catalog_entry("{03CC0FE4-A9E2-4F80-8AC8-C510F9691D3B}", AgVAFuelTank)
__all__.append("AgVAFuelTank")


class AgVAElementCartesian(IAgVAElementCartesian, IAgVAElement, IAgRuntimeTypeInfoProvider):
    """Cartesian elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementCartesian.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementCartesian._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementCartesian._get_property(self, attrname) is not None: found_prop = IAgVAElementCartesian._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementCartesian.")
        
agcls.AgClassCatalog.add_catalog_entry("{8C98158E-6B98-4C50-8500-7ABCE96A049E}", AgVAElementCartesian)
__all__.append("AgVAElementCartesian")


class AgVAElementKeplerian(IAgVAElementKeplerian, IAgVAElement):
    """Keplerian elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementKeplerian.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementKeplerian._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementKeplerian._get_property(self, attrname) is not None: found_prop = IAgVAElementKeplerian._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementKeplerian.")
        
agcls.AgClassCatalog.add_catalog_entry("{F34624C5-E351-4321-B16E-04DB098F9E29}", AgVAElementKeplerian)
__all__.append("AgVAElementKeplerian")


class AgVAElementEquinoctial(IAgVAElementEquinoctial, IAgVAElement):
    """Equinoctial elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementEquinoctial.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementEquinoctial._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementEquinoctial._get_property(self, attrname) is not None: found_prop = IAgVAElementEquinoctial._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementEquinoctial.")
        
agcls.AgClassCatalog.add_catalog_entry("{5588137F-A05E-4011-A219-925F175F1447}", AgVAElementEquinoctial)
__all__.append("AgVAElementEquinoctial")


class AgVAElementDelaunay(IAgVAElementDelaunay, IAgVAElement):
    """Delaunay elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementDelaunay.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementDelaunay._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementDelaunay._get_property(self, attrname) is not None: found_prop = IAgVAElementDelaunay._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementDelaunay.")
        
agcls.AgClassCatalog.add_catalog_entry("{FDE891B2-2C91-48A8-B4C0-956BD55B8496}", AgVAElementDelaunay)
__all__.append("AgVAElementDelaunay")


class AgVAElementMixedSpherical(IAgVAElementMixedSpherical, IAgVAElement):
    """Mixed Spherical elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementMixedSpherical.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementMixedSpherical._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementMixedSpherical._get_property(self, attrname) is not None: found_prop = IAgVAElementMixedSpherical._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementMixedSpherical.")
        
agcls.AgClassCatalog.add_catalog_entry("{C6E11D55-8708-4667-AC84-8FC413A32FF0}", AgVAElementMixedSpherical)
__all__.append("AgVAElementMixedSpherical")


class AgVAElementSpherical(IAgVAElementSpherical, IAgVAElement):
    """Spherical elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementSpherical.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementSpherical._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementSpherical._get_property(self, attrname) is not None: found_prop = IAgVAElementSpherical._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementSpherical.")
        
agcls.AgClassCatalog.add_catalog_entry("{ECF59D66-A748-47DD-BD0E-C8FD0CD78D05}", AgVAElementSpherical)
__all__.append("AgVAElementSpherical")


class AgVAElementTargetVectorIncomingAsymptote(IAgVAElementTargetVectorIncomingAsymptote, IAgVAElement):
    """Target Vector Incoming Asymptote elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementTargetVectorIncomingAsymptote.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementTargetVectorIncomingAsymptote._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementTargetVectorIncomingAsymptote._get_property(self, attrname) is not None: found_prop = IAgVAElementTargetVectorIncomingAsymptote._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementTargetVectorIncomingAsymptote.")
        
agcls.AgClassCatalog.add_catalog_entry("{E05BEA68-902F-427F-9E65-A33FBE044A75}", AgVAElementTargetVectorIncomingAsymptote)
__all__.append("AgVAElementTargetVectorIncomingAsymptote")


class AgVAElementTargetVectorOutgoingAsymptote(IAgVAElementTargetVectorOutgoingAsymptote, IAgVAElement):
    """Target Vector Outgoing Asymptote elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementTargetVectorOutgoingAsymptote.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementTargetVectorOutgoingAsymptote._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementTargetVectorOutgoingAsymptote._get_property(self, attrname) is not None: found_prop = IAgVAElementTargetVectorOutgoingAsymptote._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementTargetVectorOutgoingAsymptote.")
        
agcls.AgClassCatalog.add_catalog_entry("{95B24C8E-7781-4FA6-8A70-49443C5FFCF9}", AgVAElementTargetVectorOutgoingAsymptote)
__all__.append("AgVAElementTargetVectorOutgoingAsymptote")


class AgVAElementGeodetic(IAgVAElementGeodetic, IAgVAElement):
    """Geodetic elements."""
    def __init__(self, sourceObject=None):
        IAgVAElementGeodetic.__init__(self, sourceObject)
        IAgVAElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAElementGeodetic._private_init(self, pUnk)
        IAgVAElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAElementGeodetic._get_property(self, attrname) is not None: found_prop = IAgVAElementGeodetic._get_property(self, attrname)
        if IAgVAElement._get_property(self, attrname) is not None: found_prop = IAgVAElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAElementGeodetic.")
        
agcls.AgClassCatalog.add_catalog_entry("{6E74D006-FB3C-4085-810E-9B1E5AE73905}", AgVAElementGeodetic)
__all__.append("AgVAElementGeodetic")


class AgVAMCSPropagate(IAgVAMCSSegment, IAgVAMCSPropagate, IAgComponentInfo, IAgCloneable, IAgRuntimeTypeInfoProvider):
    """The Propagate segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgVAMCSPropagate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgVAMCSPropagate._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgVAMCSPropagate._get_property(self, attrname) is not None: found_prop = IAgVAMCSPropagate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSPropagate.")
        
agcls.AgClassCatalog.add_catalog_entry("{172B88CD-3CDC-4818-A03E-6538C4FD3B8D}", AgVAMCSPropagate)
__all__.append("AgVAMCSPropagate")


class AgVAState(IAgVAState, IAgRuntimeTypeInfoProvider):
    """The orbit state."""
    def __init__(self, sourceObject=None):
        IAgVAState.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAState._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAState._get_property(self, attrname) is not None: found_prop = IAgVAState._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAState.")
        
agcls.AgClassCatalog.add_catalog_entry("{D09183D5-B72C-428B-B586-CD67D09B7BC1}", AgVAState)
__all__.append("AgVAState")


class AgVAStoppingConditionCollection(IAgVAStoppingConditionCollection, IAgRuntimeTypeInfoProvider):
    """The stopping conditions collection."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingConditionCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingConditionCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingConditionCollection._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingConditionCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{9301C787-450F-49B9-B5BD-E263F5DEF4AF}", AgVAStoppingConditionCollection)
__all__.append("AgVAStoppingConditionCollection")


class AgVAAccessStoppingCondition(IAgComponentInfo, IAgCloneable, IAgVAAccessStoppingCondition, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """The Access stopping condition."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAAccessStoppingCondition.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAAccessStoppingCondition._private_init(self, pUnk)
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAAccessStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVAAccessStoppingCondition._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAccessStoppingCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{7526A10E-68CF-42C7-A1B6-DC58E4C83F8B}", AgVAAccessStoppingCondition)
__all__.append("AgVAAccessStoppingCondition")


class AgVALightingStoppingCondition(IAgComponentInfo, IAgCloneable, IAgVALightingStoppingCondition, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """The Lighting stopping condition."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVALightingStoppingCondition.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVALightingStoppingCondition._private_init(self, pUnk)
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVALightingStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVALightingStoppingCondition._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVALightingStoppingCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{9AE4C815-0880-4912-A024-7A326AF7F9BB}", AgVALightingStoppingCondition)
__all__.append("AgVALightingStoppingCondition")


class AgVAStoppingCondition(IAgVAStoppingCondition, IAgComponentInfo, IAgCloneable, IAgVAStoppingConditionComponent, IAgRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingCondition.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStoppingConditionComponent.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingCondition._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStoppingConditionComponent._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingCondition._get_property(self, attrname) is not None: found_prop = IAgVAStoppingCondition._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStoppingConditionComponent._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionComponent._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{87FDFED8-E83F-4963-92BD-4F151BE3E5CA}", AgVAStoppingCondition)
__all__.append("AgVAStoppingCondition")


class AgVAStoppingConditionElement(IAgVAStoppingConditionElement, IAgComponentInfo, IAgRuntimeTypeInfoProvider):
    """A stopping condition."""
    def __init__(self, sourceObject=None):
        IAgVAStoppingConditionElement.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStoppingConditionElement._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStoppingConditionElement._get_property(self, attrname) is not None: found_prop = IAgVAStoppingConditionElement._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStoppingConditionElement.")
        
agcls.AgClassCatalog.add_catalog_entry("{EBE02320-241C-462D-93F5-1BE2B72C8FB5}", AgVAStoppingConditionElement)
__all__.append("AgVAStoppingConditionElement")


class AgVAMCSSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSSequence, IAgComponentInfo, IAgCloneable):
    """The Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSSequence._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSequence.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D98B9CE-047C-419E-9A58-5939ECD853EF}", AgVAMCSSequence)
__all__.append("AgVAMCSSequence")


class AgVAMCSBackwardSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSBackwardSequence, IAgVAMCSSequence, IAgComponentInfo, IAgCloneable):
    """The Backward Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSBackwardSequence.__init__(self, sourceObject)
        IAgVAMCSSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSBackwardSequence._private_init(self, pUnk)
        IAgVAMCSSequence._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSBackwardSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSBackwardSequence._get_property(self, attrname)
        if IAgVAMCSSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSBackwardSequence.")
        
agcls.AgClassCatalog.add_catalog_entry("{EDA33DE4-2AE3-4C19-87A4-2A3215ADB6FE}", AgVAMCSBackwardSequence)
__all__.append("AgVAMCSBackwardSequence")


class AgVAMCSLaunch(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSLaunch, IAgComponentInfo, IAgCloneable):
    """The Launch segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSLaunch.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSLaunch._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSLaunch._get_property(self, attrname) is not None: found_prop = IAgVAMCSLaunch._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSLaunch.")
        
agcls.AgClassCatalog.add_catalog_entry("{1540C136-4AA5-449B-A845-A822E99422E2}", AgVAMCSLaunch)
__all__.append("AgVAMCSLaunch")


class AgVADisplaySystemGeodetic(IAgVADisplaySystemGeodetic, IAgVADisplaySystem):
    """The geodetic launch location."""
    def __init__(self, sourceObject=None):
        IAgVADisplaySystemGeodetic.__init__(self, sourceObject)
        IAgVADisplaySystem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADisplaySystemGeodetic._private_init(self, pUnk)
        IAgVADisplaySystem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADisplaySystemGeodetic._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystemGeodetic._get_property(self, attrname)
        if IAgVADisplaySystem._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADisplaySystemGeodetic.")
        
agcls.AgClassCatalog.add_catalog_entry("{792B26D7-7643-47F5-8BBD-B4FE0708F3AB}", AgVADisplaySystemGeodetic)
__all__.append("AgVADisplaySystemGeodetic")


class AgVADisplaySystemGeocentric(IAgVADisplaySystemGeocentric, IAgVADisplaySystem):
    """The geocentric launch location."""
    def __init__(self, sourceObject=None):
        IAgVADisplaySystemGeocentric.__init__(self, sourceObject)
        IAgVADisplaySystem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADisplaySystemGeocentric._private_init(self, pUnk)
        IAgVADisplaySystem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADisplaySystemGeocentric._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystemGeocentric._get_property(self, attrname)
        if IAgVADisplaySystem._get_property(self, attrname) is not None: found_prop = IAgVADisplaySystem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADisplaySystemGeocentric.")
        
agcls.AgClassCatalog.add_catalog_entry("{32F981ED-81EA-4C65-87DF-DC725A979056}", AgVADisplaySystemGeocentric)
__all__.append("AgVADisplaySystemGeocentric")


class AgVABurnoutGeodetic(IAgVABurnoutGeodetic, IAgVABurnout):
    """The geodetic burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutGeodetic.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutGeodetic._private_init(self, pUnk)
        IAgVABurnout._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutGeodetic._get_property(self, attrname) is not None: found_prop = IAgVABurnoutGeodetic._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutGeodetic.")
        
agcls.AgClassCatalog.add_catalog_entry("{011100E5-8DE0-4CE1-BC6D-F66B77814B78}", AgVABurnoutGeodetic)
__all__.append("AgVABurnoutGeodetic")


class AgVABurnoutCBFCartesian(IAgVABurnoutCBFCartesian, IAgVABurnout):
    """The burnout state in CBF Cartesian coordinates."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutCBFCartesian.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutCBFCartesian._private_init(self, pUnk)
        IAgVABurnout._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutCBFCartesian._get_property(self, attrname) is not None: found_prop = IAgVABurnoutCBFCartesian._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutCBFCartesian.")
        
agcls.AgClassCatalog.add_catalog_entry("{3EE3ED29-6154-49CA-93C4-8623E801B58F}", AgVABurnoutCBFCartesian)
__all__.append("AgVABurnoutCBFCartesian")


class AgVABurnoutGeocentric(IAgVABurnoutGeocentric, IAgVABurnout):
    """The geocentric burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutGeocentric.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutGeocentric._private_init(self, pUnk)
        IAgVABurnout._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutGeocentric._get_property(self, attrname) is not None: found_prop = IAgVABurnoutGeocentric._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutGeocentric.")
        
agcls.AgClassCatalog.add_catalog_entry("{B7BD1F63-9D91-4DA5-9099-D6BE607F2702}", AgVABurnoutGeocentric)
__all__.append("AgVABurnoutGeocentric")


class AgVABurnoutLaunchAzAlt(IAgVABurnoutLaunchAzAlt, IAgVABurnout):
    """The launch azimuth and altitude burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutLaunchAzAlt.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutLaunchAzAlt._private_init(self, pUnk)
        IAgVABurnout._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutLaunchAzAlt._get_property(self, attrname) is not None: found_prop = IAgVABurnoutLaunchAzAlt._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutLaunchAzAlt.")
        
agcls.AgClassCatalog.add_catalog_entry("{E5A780AE-0173-4FF8-AD0F-43886E1FAE85}", AgVABurnoutLaunchAzAlt)
__all__.append("AgVABurnoutLaunchAzAlt")


class AgVABurnoutLaunchAzRadius(IAgVABurnoutLaunchAzRadius, IAgVABurnout):
    """The launch azimuth and radius burnout point."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutLaunchAzRadius.__init__(self, sourceObject)
        IAgVABurnout.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutLaunchAzRadius._private_init(self, pUnk)
        IAgVABurnout._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutLaunchAzRadius._get_property(self, attrname) is not None: found_prop = IAgVABurnoutLaunchAzRadius._get_property(self, attrname)
        if IAgVABurnout._get_property(self, attrname) is not None: found_prop = IAgVABurnout._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutLaunchAzRadius.")
        
agcls.AgClassCatalog.add_catalog_entry("{ABC361CE-B104-427C-BDDB-CF77EBDC9B8E}", AgVABurnoutLaunchAzRadius)
__all__.append("AgVABurnoutLaunchAzRadius")


class AgVABurnoutVelocity(IAgVABurnoutVelocity):
    """The burnout velocity."""
    def __init__(self, sourceObject=None):
        IAgVABurnoutVelocity.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABurnoutVelocity._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABurnoutVelocity._get_property(self, attrname) is not None: found_prop = IAgVABurnoutVelocity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABurnoutVelocity.")
        
agcls.AgClassCatalog.add_catalog_entry("{DFD439A9-42BD-4A59-9681-A70BBC94E083}", AgVABurnoutVelocity)
__all__.append("AgVABurnoutVelocity")


class AgVAMCSFollow(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSFollow, IAgComponentInfo, IAgCloneable):
    """The Follow segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSFollow.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSFollow._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSFollow._get_property(self, attrname) is not None: found_prop = IAgVAMCSFollow._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSFollow.")
        
agcls.AgClassCatalog.add_catalog_entry("{322FC7F6-FCDF-408B-A31C-F25A1F5456EB}", AgVAMCSFollow)
__all__.append("AgVAMCSFollow")


class AgVAMCSManeuver(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSManeuver, IAgComponentInfo, IAgCloneable):
    """The Maneuver segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSManeuver.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSManeuver._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSManeuver._get_property(self, attrname) is not None: found_prop = IAgVAMCSManeuver._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSManeuver.")
        
agcls.AgClassCatalog.add_catalog_entry("{1EE05100-A5B8-4820-9C6D-F4AE0639E1EE}", AgVAMCSManeuver)
__all__.append("AgVAMCSManeuver")


class AgVAManeuverFinite(IAgVAManeuverFinite, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverFinite.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverFinite._private_init(self, pUnk)
        IAgVAManeuver._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverFinite._get_property(self, attrname) is not None: found_prop = IAgVAManeuverFinite._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverFinite.")
        
agcls.AgClassCatalog.add_catalog_entry("{22EAD08A-6355-48BA-96EC-5DD996A5D926}", AgVAManeuverFinite)
__all__.append("AgVAManeuverFinite")


class AgVAManeuverImpulsive(IAgVAManeuverImpulsive, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Impulsive Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverImpulsive.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverImpulsive._private_init(self, pUnk)
        IAgVAManeuver._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAManeuverImpulsive._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverImpulsive.")
        
agcls.AgClassCatalog.add_catalog_entry("{E4DCF8C5-987F-4739-9592-E4C49B9A827E}", AgVAManeuverImpulsive)
__all__.append("AgVAManeuverImpulsive")


class AgVAAttitudeControlImpulsiveVelocityVector(IAgVAAttitudeControlImpulsiveVelocityVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsiveVelocityVector._private_init(self, pUnk)
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveVelocityVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{C466E73A-E301-43C8-8402-700D0CE8DE41}", AgVAAttitudeControlImpulsiveVelocityVector)
__all__.append("AgVAAttitudeControlImpulsiveVelocityVector")


class AgVAAttitudeControlImpulsiveAntiVelocityVector(IAgVAAttitudeControlImpulsiveAntiVelocityVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveAntiVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsiveAntiVelocityVector._private_init(self, pUnk)
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveAntiVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveAntiVelocityVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{B51D8BDC-E2A5-484C-8CB8-88E4D1BBC5A1}", AgVAAttitudeControlImpulsiveAntiVelocityVector)
__all__.append("AgVAAttitudeControlImpulsiveAntiVelocityVector")


class AgVAAttitudeControlImpulsiveAttitude(IAgVAAttitudeControlImpulsiveAttitude, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The attitude attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveAttitude.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsiveAttitude._private_init(self, pUnk)
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveAttitude._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveAttitude._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveAttitude.")
        
agcls.AgClassCatalog.add_catalog_entry("{8854FD36-7CEA-4FBC-B699-E47007BA7825}", AgVAAttitudeControlImpulsiveAttitude)
__all__.append("AgVAAttitudeControlImpulsiveAttitude")


class AgVAAttitudeControlImpulsiveFile(IAgVAAttitudeControlImpulsiveFile, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The file attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveFile.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsiveFile._private_init(self, pUnk)
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveFile._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveFile._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveFile.")
        
agcls.AgClassCatalog.add_catalog_entry("{18E769AB-177B-4575-A9E0-BBB5BEEA78AE}", AgVAAttitudeControlImpulsiveFile)
__all__.append("AgVAAttitudeControlImpulsiveFile")


class AgVAAttitudeControlImpulsiveThrustVector(IAgVAAttitudeControlImpulsiveThrustVector, IAgVAAttitudeControlImpulsive, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The thrust vector attitude control for an impulsive maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlImpulsiveThrustVector.__init__(self, sourceObject)
        IAgVAAttitudeControlImpulsive.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlImpulsiveThrustVector._private_init(self, pUnk)
        IAgVAAttitudeControlImpulsive._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlImpulsiveThrustVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsiveThrustVector._get_property(self, attrname)
        if IAgVAAttitudeControlImpulsive._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlImpulsive._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlImpulsiveThrustVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{B17F3D0C-2021-4D60-80B7-1F55934FACAF}", AgVAAttitudeControlImpulsiveThrustVector)
__all__.append("AgVAAttitudeControlImpulsiveThrustVector")


class AgVAAttitudeControlFiniteAntiVelocityVector(IAgVAAttitudeControlFiniteAntiVelocityVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The anti-velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteAntiVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteAntiVelocityVector._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteAntiVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteAntiVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteAntiVelocityVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{2C11B410-A573-446A-9637-A472B987A987}", AgVAAttitudeControlFiniteAntiVelocityVector)
__all__.append("AgVAAttitudeControlFiniteAntiVelocityVector")


class AgVAAttitudeControlFiniteAttitude(IAgVAAttitudeControlFiniteAttitude, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The attitude attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteAttitude.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteAttitude._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteAttitude._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteAttitude._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteAttitude.")
        
agcls.AgClassCatalog.add_catalog_entry("{EA2C6994-7191-4CEF-9C8D-3BE0AA6BB756}", AgVAAttitudeControlFiniteAttitude)
__all__.append("AgVAAttitudeControlFiniteAttitude")


class AgVAAttitudeControlFiniteFile(IAgVAAttitudeControlFiniteFile, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The file attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteFile.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteFile._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteFile._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteFile._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteFile.")
        
agcls.AgClassCatalog.add_catalog_entry("{7F2333DC-4E2B-499C-9F14-A4F1932F9C62}", AgVAAttitudeControlFiniteFile)
__all__.append("AgVAAttitudeControlFiniteFile")


class AgVAAttitudeControlFiniteThrustVector(IAgVAAttitudeControlFiniteThrustVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The thrust vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteThrustVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteThrustVector._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteThrustVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteThrustVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteThrustVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{9B31C16F-C862-498D-ADFB-5C4F50D45DF1}", AgVAAttitudeControlFiniteThrustVector)
__all__.append("AgVAAttitudeControlFiniteThrustVector")


class AgVAAttitudeControlFiniteTimeVarying(IAgVAAttitudeControlFiniteTimeVarying, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The time varying attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteTimeVarying.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteTimeVarying._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteTimeVarying._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteTimeVarying._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteTimeVarying.")
        
agcls.AgClassCatalog.add_catalog_entry("{F28DCCA6-0AFE-4142-BDB1-0957F1B3CB6F}", AgVAAttitudeControlFiniteTimeVarying)
__all__.append("AgVAAttitudeControlFiniteTimeVarying")


class AgVAAttitudeControlFiniteVelocityVector(IAgVAAttitudeControlFiniteVelocityVector, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The velocity vector attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFiniteVelocityVector.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFiniteVelocityVector._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFiniteVelocityVector._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFiniteVelocityVector._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFiniteVelocityVector.")
        
agcls.AgClassCatalog.add_catalog_entry("{90EE5B69-A270-4A1D-862F-C7A9A532F33F}", AgVAAttitudeControlFiniteVelocityVector)
__all__.append("AgVAAttitudeControlFiniteVelocityVector")


class AgVAAttitudeControlFinitePlugin(IAgVAAttitudeControlFinitePlugin, IAgVAAttitudeControlFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The plugin attitude control for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlFinitePlugin.__init__(self, sourceObject)
        IAgVAAttitudeControlFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlFinitePlugin._private_init(self, pUnk)
        IAgVAAttitudeControlFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlFinitePlugin._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinitePlugin._get_property(self, attrname)
        if IAgVAAttitudeControlFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlFinitePlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{41C29436-C581-4FD2-BFFB-090FCDA9C090}", AgVAAttitudeControlFinitePlugin)
__all__.append("AgVAAttitudeControlFinitePlugin")


class AgVAAttitudeControlOptimalFiniteLagrange(IAgVAAttitudeControlOptimalFiniteLagrange, IAgVAAttitudeControlOptimalFinite, IAgVAAttitudeControl, IAgRuntimeTypeInfoProvider):
    """The Lagrange Interpolation attitude control for a optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAAttitudeControlOptimalFiniteLagrange.__init__(self, sourceObject)
        IAgVAAttitudeControlOptimalFinite.__init__(self, sourceObject)
        IAgVAAttitudeControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAttitudeControlOptimalFiniteLagrange._private_init(self, pUnk)
        IAgVAAttitudeControlOptimalFinite._private_init(self, pUnk)
        IAgVAAttitudeControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAttitudeControlOptimalFiniteLagrange._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlOptimalFiniteLagrange._get_property(self, attrname)
        if IAgVAAttitudeControlOptimalFinite._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControlOptimalFinite._get_property(self, attrname)
        if IAgVAAttitudeControl._get_property(self, attrname) is not None: found_prop = IAgVAAttitudeControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAttitudeControlOptimalFiniteLagrange.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE88E914-B911-41DB-9811-37CFBC7DAECC}", AgVAAttitudeControlOptimalFiniteLagrange)
__all__.append("AgVAAttitudeControlOptimalFiniteLagrange")


class AgVAManeuverFinitePropagator(IAgVAManeuverFinitePropagator, IAgRuntimeTypeInfoProvider):
    """Propagation for a finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverFinitePropagator.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverFinitePropagator._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverFinitePropagator._get_property(self, attrname) is not None: found_prop = IAgVAManeuverFinitePropagator._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverFinitePropagator.")
        
agcls.AgClassCatalog.add_catalog_entry("{4F2C7CA9-D775-4CE0-8297-A8806F56F094}", AgVAManeuverFinitePropagator)
__all__.append("AgVAManeuverFinitePropagator")


class AgVAMCSHold(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSHold, IAgComponentInfo, IAgCloneable):
    """The Hold segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSHold.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSHold._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSHold._get_property(self, attrname) is not None: found_prop = IAgVAMCSHold._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSHold.")
        
agcls.AgClassCatalog.add_catalog_entry("{51159257-B7FD-45E5-AB02-7FEB20D924E5}", AgVAMCSHold)
__all__.append("AgVAMCSHold")


class AgVAMCSUpdate(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSUpdate, IAgComponentInfo, IAgCloneable):
    """The Update segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSUpdate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSUpdate._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSUpdate._get_property(self, attrname) is not None: found_prop = IAgVAMCSUpdate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSUpdate.")
        
agcls.AgClassCatalog.add_catalog_entry("{3A975A07-EB14-4231-B8E7-C977B091D8B0}", AgVAMCSUpdate)
__all__.append("AgVAMCSUpdate")


class AgVAMCSReturn(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSReturn, IAgComponentInfo, IAgCloneable):
    """The Return segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSReturn.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSReturn._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSReturn._get_property(self, attrname) is not None: found_prop = IAgVAMCSReturn._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSReturn.")
        
agcls.AgClassCatalog.add_catalog_entry("{0D4E769A-CBA7-4A17-89BA-F61B59F15D09}", AgVAMCSReturn)
__all__.append("AgVAMCSReturn")


class AgVAMCSStop(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSStop, IAgComponentInfo, IAgCloneable):
    """The Stop segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSStop.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSStop._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSStop._get_property(self, attrname) is not None: found_prop = IAgVAMCSStop._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSStop.")
        
agcls.AgClassCatalog.add_catalog_entry("{59CF0A59-0E77-4D5F-BE88-E151D8899331}", AgVAMCSStop)
__all__.append("AgVAMCSStop")


class AgVAMCSTargetSequence(IAgVAMCSSegment, IAgRuntimeTypeInfoProvider, IAgVAMCSTargetSequence, IAgComponentInfo, IAgCloneable):
    """The Target Sequence segment."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
        IAgVAMCSTargetSequence.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
        IAgVAMCSTargetSequence._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegment._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if IAgVAMCSTargetSequence._get_property(self, attrname) is not None: found_prop = IAgVAMCSTargetSequence._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSTargetSequence.")
        
agcls.AgClassCatalog.add_catalog_entry("{DF528E2E-3CFD-4935-9A24-B9C9D8C0E727}", AgVAMCSTargetSequence)
__all__.append("AgVAMCSTargetSequence")


class AgVAProfileCollection(IAgVAProfileCollection, IAgRuntimeTypeInfoProvider):
    """The Profiles of a Target Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAProfileCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileCollection._get_property(self, attrname) is not None: found_prop = IAgVAProfileCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{37B58077-200F-4763-8ED2-C4B5AFA97B2E}", AgVAProfileCollection)
__all__.append("AgVAProfileCollection")


class AgVAMCSOptions(IAgVAMCSOptions):
    """The MCS Options."""
    def __init__(self, sourceObject=None):
        IAgVAMCSOptions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSOptions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSOptions._get_property(self, attrname) is not None: found_prop = IAgVAMCSOptions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSOptions.")
        
agcls.AgClassCatalog.add_catalog_entry("{0A469F1B-225A-48E3-9B89-0EC63C95D705}", AgVAMCSOptions)
__all__.append("AgVAMCSOptions")


class AgVACalcObjectCollection(IAgVACalcObjectCollection):
    """The Calculation Object component folder."""
    def __init__(self, sourceObject=None):
        IAgVACalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACalcObjectCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACalcObjectCollection._get_property(self, attrname) is not None: found_prop = IAgVACalcObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACalcObjectCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{9C6165FC-8537-4B53-AC20-66F2C670A7A9}", AgVACalcObjectCollection)
__all__.append("AgVACalcObjectCollection")


class AgVAConstraintCollection(IAgVAConstraintCollection):
    """The Constraint component folder."""
    def __init__(self, sourceObject=None):
        IAgVAConstraintCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAConstraintCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAConstraintCollection._get_property(self, attrname) is not None: found_prop = IAgVAConstraintCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAConstraintCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{D992E5D5-AE65-4041-B3A8-DF2244DE2068}", AgVAConstraintCollection)
__all__.append("AgVAConstraintCollection")


class AgVAPluginProperties(IAgVAPluginProperties):
    """The plugin attitude control type."""
    def __init__(self, sourceObject=None):
        IAgVAPluginProperties.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPluginProperties._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPluginProperties._get_property(self, attrname) is not None: found_prop = IAgVAPluginProperties._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPluginProperties.")
        
agcls.AgClassCatalog.add_catalog_entry("{A115E060-4BB8-430F-AB23-2BBE3C0C2087}", AgVAPluginProperties)
__all__.append("AgVAPluginProperties")


class AgVAProfileSearchPlugin(IAgVAProfileSearchPlugin, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileSearchPlugin.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileSearchPlugin._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSearchPlugin._get_property(self, attrname) is not None: found_prop = IAgVAProfileSearchPlugin._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSearchPlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{25E94763-B5B1-4964-B563-9AEED96D9D54}", AgVAProfileSearchPlugin)
__all__.append("AgVAProfileSearchPlugin")


class AgVATargeterGraph(IAgVATargeterGraph, IAgRuntimeTypeInfoProvider):
    """Targeter Graph."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraph.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraph._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraph._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraph._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraph.")
        
agcls.AgClassCatalog.add_catalog_entry("{BF6E6956-1E2A-42E5-A56C-1BEF9EFB8A29}", AgVATargeterGraph)
__all__.append("AgVATargeterGraph")


class AgVATargeterGraphCollection(IAgVATargeterGraphCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graphs."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraphCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{322FC0D0-8F69-4F4B-9247-2558D6AFF63F}", AgVATargeterGraphCollection)
__all__.append("AgVATargeterGraphCollection")


class AgVATargeterGraphResultCollection(IAgVATargeterGraphResultCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Result Collection."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphResultCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraphResultCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphResultCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphResultCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{87090DB9-4866-40E4-BA58-BDF7C8EACCEB}", AgVATargeterGraphResultCollection)
__all__.append("AgVATargeterGraphResultCollection")


class AgVATargeterGraphActiveControlCollection(IAgVATargeterGraphActiveControlCollection, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Active Control Collection."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphActiveControlCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraphActiveControlCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphActiveControlCollection._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphActiveControlCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphActiveControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{7FB70374-2313-463C-A69E-C5111C4BC1E4}", AgVATargeterGraphActiveControlCollection)
__all__.append("AgVATargeterGraphActiveControlCollection")


class AgVATargeterGraphActiveControl(IAgVATargeterGraphActiveControl, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Active Control."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphActiveControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraphActiveControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphActiveControl._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphActiveControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphActiveControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6457FA2-28BF-471B-9DCF-575B27BF588B}", AgVATargeterGraphActiveControl)
__all__.append("AgVATargeterGraphActiveControl")


class AgVATargeterGraphResult(IAgVATargeterGraphResult, IAgRuntimeTypeInfoProvider):
    """Targeter Graph Result."""
    def __init__(self, sourceObject=None):
        IAgVATargeterGraphResult.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATargeterGraphResult._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATargeterGraphResult._get_property(self, attrname) is not None: found_prop = IAgVATargeterGraphResult._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATargeterGraphResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{AB6CA723-1634-4A90-AD8C-4DB34D7A2925}", AgVATargeterGraphResult)
__all__.append("AgVATargeterGraphResult")


class AgVAProfileDifferentialCorrector(IAgVAProfileDifferentialCorrector, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Differential Corrector profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileDifferentialCorrector.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileDifferentialCorrector._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileDifferentialCorrector._get_property(self, attrname) is not None: found_prop = IAgVAProfileDifferentialCorrector._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileDifferentialCorrector.")
        
agcls.AgClassCatalog.add_catalog_entry("{4446E46E-A169-4F12-AE14-562D35A6BC60}", AgVAProfileDifferentialCorrector)
__all__.append("AgVAProfileDifferentialCorrector")


class AgVAProfileScriptingTool(IAgVAProfileScriptingTool, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Scripting Tool profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileScriptingTool.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileScriptingTool._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileScriptingTool._get_property(self, attrname) is not None: found_prop = IAgVAProfileScriptingTool._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileScriptingTool.")
        
agcls.AgClassCatalog.add_catalog_entry("{EC9D1E6F-4155-4685-AFE9-785DE109564A}", AgVAProfileScriptingTool)
__all__.append("AgVAProfileScriptingTool")


class AgVADCControl(IAgVADCControl, IAgRuntimeTypeInfoProvider):
    """Control Parameters for a Target Sequence."""
    def __init__(self, sourceObject=None):
        IAgVADCControl.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADCControl._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCControl._get_property(self, attrname) is not None: found_prop = IAgVADCControl._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{5D59626C-A2D6-4D23-91C8-43D3764115C9}", AgVADCControl)
__all__.append("AgVADCControl")


class AgVADCResult(IAgVADCResult, IAgRuntimeTypeInfoProvider):
    """Differential Corrector equality constraints."""
    def __init__(self, sourceObject=None):
        IAgVADCResult.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADCResult._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCResult._get_property(self, attrname) is not None: found_prop = IAgVADCResult._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{1F4606B6-6EB5-4349-90AD-E607DBBC6AB5}", AgVADCResult)
__all__.append("AgVADCResult")


class AgVADCControlCollection(IAgVADCControlCollection, IAgRuntimeTypeInfoProvider):
    """The collection of Control Parameters for a differential corrector profile."""
    def __init__(self, sourceObject=None):
        IAgVADCControlCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADCControlCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCControlCollection._get_property(self, attrname) is not None: found_prop = IAgVADCControlCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{61729FE0-729A-461C-8C94-6816EC0F88E8}", AgVADCControlCollection)
__all__.append("AgVADCControlCollection")


class AgVADCResultCollection(IAgVADCResultCollection, IAgRuntimeTypeInfoProvider):
    """The collection of results for a differential corrector."""
    def __init__(self, sourceObject=None):
        IAgVADCResultCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADCResultCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADCResultCollection._get_property(self, attrname) is not None: found_prop = IAgVADCResultCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADCResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{703FFB61-063E-4B38-AC0A-968903E6E929}", AgVADCResultCollection)
__all__.append("AgVADCResultCollection")


class AgVASearchPluginControl(IAgVASearchPluginControl):
    """Control parameters for a plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginControl.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASearchPluginControl._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginControl._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{C127E67D-2078-4605-BB16-BF4049CBDEF0}", AgVASearchPluginControl)
__all__.append("AgVASearchPluginControl")


class AgVASearchPluginControlCollection(IAgVASearchPluginControlCollection):
    """The list of search plugin control parameters"""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginControlCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASearchPluginControlCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginControlCollection._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{78A7975A-C0F5-434A-9902-411C3E975F7E}", AgVASearchPluginControlCollection)
__all__.append("AgVASearchPluginControlCollection")


class AgVASearchPluginResult(IAgVASearchPluginResult):
    """Equality constraints for a plugin search profile."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASearchPluginResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginResult._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{7A3345FE-C088-4CFA-84BE-5E997BB15CF8}", AgVASearchPluginResult)
__all__.append("AgVASearchPluginResult")


class AgVASearchPluginResultCollection(IAgVASearchPluginResultCollection):
    """The list of search plugin equality constraints."""
    def __init__(self, sourceObject=None):
        IAgVASearchPluginResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASearchPluginResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASearchPluginResultCollection._get_property(self, attrname) is not None: found_prop = IAgVASearchPluginResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASearchPluginResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D37CDE6-2358-4419-9297-0032314ACB35}", AgVASearchPluginResultCollection)
__all__.append("AgVASearchPluginResultCollection")


class AgVAProfileChangeManeuverType(IAgVAProfileChangeManeuverType, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Maneuver Type profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeManeuverType.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileChangeManeuverType._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeManeuverType._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeManeuverType._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeManeuverType.")
        
agcls.AgClassCatalog.add_catalog_entry("{8FCD3010-988A-4C88-A3E8-FB0D991B1DA3}", AgVAProfileChangeManeuverType)
__all__.append("AgVAProfileChangeManeuverType")


class AgVAProfileChangeReturnSegment(IAgVAProfileChangeReturnSegment, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Return Segment profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeReturnSegment.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileChangeReturnSegment._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeReturnSegment._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeReturnSegment._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeReturnSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{D7436885-84AD-41DE-9D0F-7A6F001A863B}", AgVAProfileChangeReturnSegment)
__all__.append("AgVAProfileChangeReturnSegment")


class AgVAProfileChangePropagator(IAgVAProfileChangePropagator, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Propagator profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangePropagator.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileChangePropagator._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangePropagator._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangePropagator._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangePropagator.")
        
agcls.AgClassCatalog.add_catalog_entry("{3EB69307-370B-443E-AB4F-1463A80142CD}", AgVAProfileChangePropagator)
__all__.append("AgVAProfileChangePropagator")


class AgVAProfileChangeStopSegment(IAgVAProfileChangeStopSegment, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Stop Segment profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeStopSegment.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileChangeStopSegment._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeStopSegment._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeStopSegment._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeStopSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{73CD0F57-2A67-47D7-BFAD-4E07D5045AB1}", AgVAProfileChangeStopSegment)
__all__.append("AgVAProfileChangeStopSegment")


class AgVAProfileChangeStoppingConditionState(IAgVAProfileChangeStoppingConditionState, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Change Stopping Condition State profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileChangeStoppingConditionState.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileChangeStoppingConditionState._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileChangeStoppingConditionState._get_property(self, attrname) is not None: found_prop = IAgVAProfileChangeStoppingConditionState._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileChangeStoppingConditionState.")
        
agcls.AgClassCatalog.add_catalog_entry("{593BF97D-DA25-40EC-832A-2514939CCCCB}", AgVAProfileChangeStoppingConditionState)
__all__.append("AgVAProfileChangeStoppingConditionState")


class AgVAProfileSeedFiniteManeuver(IAgVAProfileSeedFiniteManeuver, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Seed Finite Maneuver profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileSeedFiniteManeuver.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileSeedFiniteManeuver._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSeedFiniteManeuver._get_property(self, attrname) is not None: found_prop = IAgVAProfileSeedFiniteManeuver._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSeedFiniteManeuver.")
        
agcls.AgClassCatalog.add_catalog_entry("{4524367A-A29D-401A-8B98-82FB06E4D2B3}", AgVAProfileSeedFiniteManeuver)
__all__.append("AgVAProfileSeedFiniteManeuver")


class AgVAProfileRunOnce(IAgVAProfileRunOnce, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Run Once profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileRunOnce.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileRunOnce._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileRunOnce._get_property(self, attrname) is not None: found_prop = IAgVAProfileRunOnce._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileRunOnce.")
        
agcls.AgClassCatalog.add_catalog_entry("{6B7DC440-DAE4-4F68-BD3A-D431EF7460B4}", AgVAProfileRunOnce)
__all__.append("AgVAProfileRunOnce")


class AgVABPlaneCollection(IAgVABPlaneCollection):
    """The collection of B-Planes."""
    def __init__(self, sourceObject=None):
        IAgVABPlaneCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABPlaneCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABPlaneCollection._get_property(self, attrname) is not None: found_prop = IAgVABPlaneCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABPlaneCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{4A33E12D-FC24-46EB-8AD4-752E5534168D}", AgVABPlaneCollection)
__all__.append("AgVABPlaneCollection")


class AgVAStateCalcDamageFlux(IAgVAStateCalcDamageFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcDamageFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDamageFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcDamageFlux._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDamageFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDamageFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDamageFlux.")
        
agcls.AgClassCatalog.add_catalog_entry("{EFD8FBFA-6ACF-463D-9857-7C272440314F}", AgVAStateCalcDamageFlux)
__all__.append("AgVAStateCalcDamageFlux")


class AgVAStateCalcDamageMassFlux(IAgVAStateCalcDamageMassFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcDamageMassFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDamageMassFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcDamageMassFlux._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDamageMassFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDamageMassFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDamageMassFlux.")
        
agcls.AgClassCatalog.add_catalog_entry("{05A46EDD-2B3D-4505-BD42-DB7516899060}", AgVAStateCalcDamageMassFlux)
__all__.append("AgVAStateCalcDamageMassFlux")


class AgVAStateCalcMagFieldDipoleL(IAgVAStateCalcMagFieldDipoleL, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcMagFieldDipoleL."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcMagFieldDipoleL.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcMagFieldDipoleL._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcMagFieldDipoleL._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMagFieldDipoleL._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMagFieldDipoleL.")
        
agcls.AgClassCatalog.add_catalog_entry("{C1FD9D99-42EF-40F2-9E53-AEBAEC1A5573}", AgVAStateCalcMagFieldDipoleL)
__all__.append("AgVAStateCalcMagFieldDipoleL")


class AgVAStateCalcSEETMagFieldFieldLineSepAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSEETMagFieldFieldLineSepAngle):
    """SEETMagFieldFieldLineSepAngle Calc object."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSEETMagFieldFieldLineSepAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSEETMagFieldFieldLineSepAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSEETMagFieldFieldLineSepAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETMagFieldFieldLineSepAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETMagFieldFieldLineSepAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{585BF1E2-E8E0-4D8B-9101-7BDC793D6E68}", AgVAStateCalcSEETMagFieldFieldLineSepAngle)
__all__.append("AgVAStateCalcSEETMagFieldFieldLineSepAngle")


class AgVAStateCalcImpactFlux(IAgVAStateCalcImpactFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcImpactFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcImpactFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcImpactFlux._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcImpactFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcImpactFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcImpactFlux.")
        
agcls.AgClassCatalog.add_catalog_entry("{2F537C47-80E4-483C-9C6F-A82F91EC5F24}", AgVAStateCalcImpactFlux)
__all__.append("AgVAStateCalcImpactFlux")


class AgVAStateCalcImpactMassFlux(IAgVAStateCalcImpactMassFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcImpactMassFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcImpactMassFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcImpactMassFlux._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcImpactMassFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcImpactMassFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcImpactMassFlux.")
        
agcls.AgClassCatalog.add_catalog_entry("{9D64EF8C-63C9-4924-BE13-8176E3DAB180}", AgVAStateCalcImpactMassFlux)
__all__.append("AgVAStateCalcImpactMassFlux")


class AgVAStateCalcSEETSAAFlux(IAgVAStateCalcSEETSAAFlux, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcSEETSAAFlux."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSEETSAAFlux.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcSEETSAAFlux._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSEETSAAFlux._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETSAAFlux._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETSAAFlux.")
        
agcls.AgClassCatalog.add_catalog_entry("{3C766F5E-9727-4ACD-9E5D-D08684116A79}", AgVAStateCalcSEETSAAFlux)
__all__.append("AgVAStateCalcSEETSAAFlux")


class AgVAStateCalcSEETVehTemp(IAgVAStateCalcSEETVehTemp, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcSEETVehTemp."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSEETVehTemp.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcSEETVehTemp._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSEETVehTemp._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSEETVehTemp._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSEETVehTemp.")
        
agcls.AgClassCatalog.add_catalog_entry("{082CAA56-3DB0-4BA5-BE14-B84D93A32504}", AgVAStateCalcSEETVehTemp)
__all__.append("AgVAStateCalcSEETVehTemp")


class AgVAStateCalcEpoch(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEpoch):
    """Epoch Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEpoch.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEpoch._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEpoch._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEpoch._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEpoch.")
        
agcls.AgClassCatalog.add_catalog_entry("{CC140708-1576-4CFA-9A28-BC454B33DE02}", AgVAStateCalcEpoch)
__all__.append("AgVAStateCalcEpoch")


class AgVAStateCalcJacobiConstant(IAgComponentInfo, IAgCloneable, IAgVAStateCalcJacobiConstant):
    """Jacobi Constant Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcJacobiConstant.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcJacobiConstant._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcJacobiConstant._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcJacobiConstant._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcJacobiConstant.")
        
agcls.AgClassCatalog.add_catalog_entry("{FFF1FA69-1E24-445E-A239-41E2AB0D373B}", AgVAStateCalcJacobiConstant)
__all__.append("AgVAStateCalcJacobiConstant")


class AgVAStateCalcCartesianElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCartesianElem):
    """Cartesian Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCartesianElem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCartesianElem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCartesianElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCartesianElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCartesianElem.")
        
agcls.AgClassCatalog.add_catalog_entry("{AECA6CA7-7D04-4EB5-95D9-216BBCCD0EC1}", AgVAStateCalcCartesianElem)
__all__.append("AgVAStateCalcCartesianElem")


class AgVAStateCalcCartSTMElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCartSTMElem):
    """Cartesian STM Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCartSTMElem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCartSTMElem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCartSTMElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCartSTMElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCartSTMElem.")
        
agcls.AgClassCatalog.add_catalog_entry("{84EAF6DB-A535-421E-8CCF-95A142E3B2FE}", AgVAStateCalcCartSTMElem)
__all__.append("AgVAStateCalcCartSTMElem")


class AgVAStateCalcSTMEigenval(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSTMEigenval):
    """Cartesian STM Eigenvalues Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSTMEigenval.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSTMEigenval._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSTMEigenval._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSTMEigenval._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSTMEigenval.")
        
agcls.AgClassCatalog.add_catalog_entry("{F3AC2C6F-7A0A-40CA-A7EC-230D9EC2D75E}", AgVAStateCalcSTMEigenval)
__all__.append("AgVAStateCalcSTMEigenval")


class AgVAStateCalcSTMEigenvecElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSTMEigenvecElem):
    """Cartesian STM Eigenvector Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSTMEigenvecElem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSTMEigenvecElem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSTMEigenvecElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSTMEigenvecElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSTMEigenvecElem.")
        
agcls.AgClassCatalog.add_catalog_entry("{53BF2ADA-8B4D-4E64-BC61-AFA201DAB3C7}", AgVAStateCalcSTMEigenvecElem)
__all__.append("AgVAStateCalcSTMEigenvecElem")


class AgVAStateCalcEnvironment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEnvironment):
    """Environment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEnvironment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEnvironment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEnvironment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEnvironment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEnvironment.")
        
agcls.AgClassCatalog.add_catalog_entry("{A8319DEC-F018-4890-AC98-9F7B2AF96DF6}", AgVAStateCalcEnvironment)
__all__.append("AgVAStateCalcEnvironment")


class AgVAStateCalcOrbitDelaunayG(IAgVAStateCalcOrbitDelaunayG, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayG."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayG.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcOrbitDelaunayG._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayG._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayG._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayG.")
        
agcls.AgClassCatalog.add_catalog_entry("{5DE99D8D-DB40-4107-9D79-03D51AEAA4E8}", AgVAStateCalcOrbitDelaunayG)
__all__.append("AgVAStateCalcOrbitDelaunayG")


class AgVAStateCalcOrbitDelaunayH(IAgVAStateCalcOrbitDelaunayH, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayH."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayH.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcOrbitDelaunayH._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayH._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayH._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayH.")
        
agcls.AgClassCatalog.add_catalog_entry("{4C7CDC1F-79EA-412B-A1E3-7E519CCAA4F0}", AgVAStateCalcOrbitDelaunayH)
__all__.append("AgVAStateCalcOrbitDelaunayH")


class AgVAStateCalcOrbitDelaunayL(IAgVAStateCalcOrbitDelaunayL, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitDelaunayL."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitDelaunayL.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcOrbitDelaunayL._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitDelaunayL._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitDelaunayL._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitDelaunayL.")
        
agcls.AgClassCatalog.add_catalog_entry("{299A4FF6-0636-4A25-AC74-4FF7D0A33F30}", AgVAStateCalcOrbitDelaunayL)
__all__.append("AgVAStateCalcOrbitDelaunayL")


class AgVAStateCalcOrbitSemiLatusRectum(IAgVAStateCalcOrbitSemiLatusRectum, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcOrbitSemiLatusRectum."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcOrbitSemiLatusRectum.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcOrbitSemiLatusRectum._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcOrbitSemiLatusRectum._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitSemiLatusRectum._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitSemiLatusRectum.")
        
agcls.AgClassCatalog.add_catalog_entry("{9A0EF481-BE9B-47B7-81D5-CAFF636B8E31}", AgVAStateCalcOrbitSemiLatusRectum)
__all__.append("AgVAStateCalcOrbitSemiLatusRectum")


class AgVAStateCalcEquinoctialElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEquinoctialElem):
    """Equinoctial Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEquinoctialElem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEquinoctialElem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEquinoctialElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEquinoctialElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEquinoctialElem.")
        
agcls.AgClassCatalog.add_catalog_entry("{5C90B745-3002-4AEC-9613-0FE8168F2903}", AgVAStateCalcEquinoctialElem)
__all__.append("AgVAStateCalcEquinoctialElem")


class AgVAStateCalcCloseApproachBearing(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachBearing):
    """CloseApproachBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachBearing.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachBearing._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachBearing._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachBearing._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachBearing.")
        
agcls.AgClassCatalog.add_catalog_entry("{E0AD9FFF-8F9D-4EBD-A41D-2982A60968AB}", AgVAStateCalcCloseApproachBearing)
__all__.append("AgVAStateCalcCloseApproachBearing")


class AgVAStateCalcCloseApproachMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachMag):
    """CloseApproachMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachMag.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachMag._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachMag.")
        
agcls.AgClassCatalog.add_catalog_entry("{70461F34-33C2-42B4-9591-5A2F2C5EB8D2}", AgVAStateCalcCloseApproachMag)
__all__.append("AgVAStateCalcCloseApproachMag")


class AgVAStateCalcCloseApproachTheta(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachTheta):
    """CloseApproachTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachTheta.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachTheta._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachTheta._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachTheta._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachTheta.")
        
agcls.AgClassCatalog.add_catalog_entry("{950DA5FA-29AA-4422-B760-AD23CB6A33FB}", AgVAStateCalcCloseApproachTheta)
__all__.append("AgVAStateCalcCloseApproachTheta")


class AgVAStateCalcCloseApproachX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachX):
    """CloseApproachX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachX.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachX._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachX.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD980AD5-6212-4A4A-AC05-4453F9015301}", AgVAStateCalcCloseApproachX)
__all__.append("AgVAStateCalcCloseApproachX")


class AgVAStateCalcCloseApproachY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachY):
    """CloseApproachY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachY.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachY._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachY.")
        
agcls.AgClassCatalog.add_catalog_entry("{D04565A4-C1F2-4A3D-A304-FB3CB2887087}", AgVAStateCalcCloseApproachY)
__all__.append("AgVAStateCalcCloseApproachY")


class AgVAStateCalcCloseApproachCosBearing(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCloseApproachCosBearing):
    """CloseApproachCosBearing Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCloseApproachCosBearing.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCloseApproachCosBearing._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCloseApproachCosBearing._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCloseApproachCosBearing._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCloseApproachCosBearing.")
        
agcls.AgClassCatalog.add_catalog_entry("{EDAFFF24-75C9-4C68-9E4B-00DEFD89DAE1}", AgVAStateCalcCloseApproachCosBearing)
__all__.append("AgVAStateCalcCloseApproachCosBearing")


class AgVAStateCalcRelGroundTrackError(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelGroundTrackError):
    """RelGroundTrackError Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelGroundTrackError.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelGroundTrackError._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelGroundTrackError._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelGroundTrackError._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelGroundTrackError.")
        
agcls.AgClassCatalog.add_catalog_entry("{42632E47-2FF5-4183-BB7F-9A3CDAB5E80D}", AgVAStateCalcRelGroundTrackError)
__all__.append("AgVAStateCalcRelGroundTrackError")


class AgVAStateCalcRelAtAOLMaster(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelAtAOLMaster):
    """RelAOLMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelAtAOLMaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelAtAOLMaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelAtAOLMaster._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelAtAOLMaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelAtAOLMaster.")
        
agcls.AgClassCatalog.add_catalog_entry("{4ADF0E11-ECD1-434B-AD01-57FD9F0A692A}", AgVAStateCalcRelAtAOLMaster)
__all__.append("AgVAStateCalcRelAtAOLMaster")


class AgVAStateCalcDeltaFromMaster(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaFromMaster):
    """DeltaFromMaster Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaFromMaster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDeltaFromMaster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaFromMaster._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaFromMaster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaFromMaster.")
        
agcls.AgClassCatalog.add_catalog_entry("{F88A3044-F12D-4147-8609-B71F3AD972F4}", AgVAStateCalcDeltaFromMaster)
__all__.append("AgVAStateCalcDeltaFromMaster")


class AgVAStateCalcLonDriftRate(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonDriftRate):
    """LongDriftRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonDriftRate.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcLonDriftRate._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonDriftRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonDriftRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonDriftRate.")
        
agcls.AgClassCatalog.add_catalog_entry("{87C78155-DC4F-42C1-B2A6-D48E10F79594}", AgVAStateCalcLonDriftRate)
__all__.append("AgVAStateCalcLonDriftRate")


class AgVAStateCalcMeanEarthLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanEarthLon):
    """MeanEarthLon Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanEarthLon.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMeanEarthLon._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanEarthLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanEarthLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanEarthLon.")
        
agcls.AgClassCatalog.add_catalog_entry("{0D4E3AF8-45A3-4000-BB8A-B6D8323627AD}", AgVAStateCalcMeanEarthLon)
__all__.append("AgVAStateCalcMeanEarthLon")


class AgVAStateCalcRectifiedLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRectifiedLon):
    """RectifiedLongitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRectifiedLon.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRectifiedLon._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRectifiedLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRectifiedLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRectifiedLon.")
        
agcls.AgClassCatalog.add_catalog_entry("{ED61CCC5-71C7-4D2D-BB7D-BF177E6B9D7A}", AgVAStateCalcRectifiedLon)
__all__.append("AgVAStateCalcRectifiedLon")


class AgVAStateCalcHeightAboveTerrain(IAgVAStateCalcHeightAboveTerrain, IAgComponentInfo, IAgCloneable):
    """CoClass AsStateCalcHeightAboveTerrain."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcHeightAboveTerrain.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcHeightAboveTerrain._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcHeightAboveTerrain._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcHeightAboveTerrain._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcHeightAboveTerrain.")
        
agcls.AgClassCatalog.add_catalog_entry("{3212361D-8A8B-4ED0-94C8-2D6F69BC3A12}", AgVAStateCalcHeightAboveTerrain)
__all__.append("AgVAStateCalcHeightAboveTerrain")


class AgVAStateCalcGeodeticElem(IAgComponentInfo, IAgCloneable, IAgVAStateCalcGeodeticElem):
    """Geodetic Elements Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcGeodeticElem.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcGeodeticElem._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcGeodeticElem._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGeodeticElem._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGeodeticElem.")
        
agcls.AgClassCatalog.add_catalog_entry("{C22E7F23-171B-4A81-AF2B-6A3747D92FDA}", AgVAStateCalcGeodeticElem)
__all__.append("AgVAStateCalcGeodeticElem")


class AgVAStateCalcRepeatingGroundTrackErr(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRepeatingGroundTrackErr):
    """RepeatingGrTrackErr Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRepeatingGroundTrackErr.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRepeatingGroundTrackErr._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRepeatingGroundTrackErr._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRepeatingGroundTrackErr._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRepeatingGroundTrackErr.")
        
agcls.AgClassCatalog.add_catalog_entry("{2D4ADF81-8403-42A7-9CD8-969B9C5FEF33}", AgVAStateCalcRepeatingGroundTrackErr)
__all__.append("AgVAStateCalcRepeatingGroundTrackErr")


class AgVAStateCalcAltOfApoapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAltOfApoapsis):
    """AltitudeOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAltOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcAltOfApoapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAltOfApoapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAltOfApoapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAltOfApoapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9398A62-DC62-40F2-8C71-C4D10D180C28}", AgVAStateCalcAltOfApoapsis)
__all__.append("AgVAStateCalcAltOfApoapsis")


class AgVAStateCalcAltOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAltOfPeriapsis):
    """AltitudeOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAltOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcAltOfPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAltOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAltOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAltOfPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{700481E3-804B-4F43-B0AB-D58472F26302}", AgVAStateCalcAltOfPeriapsis)
__all__.append("AgVAStateCalcAltOfPeriapsis")


class AgVAStateCalcArgOfLat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcArgOfLat):
    """Argument of Latitude Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcArgOfLat.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcArgOfLat._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcArgOfLat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcArgOfLat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcArgOfLat.")
        
agcls.AgClassCatalog.add_catalog_entry("{E3D0D3CF-1181-4F67-98D9-2CA6A5530372}", AgVAStateCalcArgOfLat)
__all__.append("AgVAStateCalcArgOfLat")


class AgVAStateCalcArgOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcArgOfPeriapsis):
    """Argument of Periapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcArgOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcArgOfPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcArgOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcArgOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcArgOfPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{64C0F0D2-889C-4EE2-BD26-B32BC6880733}", AgVAStateCalcArgOfPeriapsis)
__all__.append("AgVAStateCalcArgOfPeriapsis")


class AgVAStateCalcEccAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccAnomaly):
    """EccAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccAnomaly.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEccAnomaly._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccAnomaly.")
        
agcls.AgClassCatalog.add_catalog_entry("{56C8EC47-95B0-4BF3-8D07-1F51630C285B}", AgVAStateCalcEccAnomaly)
__all__.append("AgVAStateCalcEccAnomaly")


class AgVAStateCalcLonOfAscNode(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonOfAscNode):
    """LongitudeOfAscendingNode Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonOfAscNode.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcLonOfAscNode._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonOfAscNode._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonOfAscNode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonOfAscNode.")
        
agcls.AgClassCatalog.add_catalog_entry("{2B606060-6816-4394-B4C5-C527490F9329}", AgVAStateCalcLonOfAscNode)
__all__.append("AgVAStateCalcLonOfAscNode")


class AgVAStateCalcMeanMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanMotion):
    """MeanMotion Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanMotion.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMeanMotion._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanMotion.")
        
agcls.AgClassCatalog.add_catalog_entry("{B18119FD-D9C9-41E2-A7EB-46ACDA5CA8D5}", AgVAStateCalcMeanMotion)
__all__.append("AgVAStateCalcMeanMotion")


class AgVAStateCalcOrbitPeriod(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOrbitPeriod):
    """OrbitPeriod Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOrbitPeriod.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOrbitPeriod._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOrbitPeriod._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitPeriod._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitPeriod.")
        
agcls.AgClassCatalog.add_catalog_entry("{D7563267-B5E5-43C5-8062-E07CCA0F2B84}", AgVAStateCalcOrbitPeriod)
__all__.append("AgVAStateCalcOrbitPeriod")


class AgVAStateCalcNumRevs(IAgComponentInfo, IAgCloneable, IAgVAStateCalcNumRevs):
    """NumRevs Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcNumRevs.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcNumRevs._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcNumRevs._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcNumRevs._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcNumRevs.")
        
agcls.AgClassCatalog.add_catalog_entry("{D0585F2A-3F22-472C-B134-5A6DE1873010}", AgVAStateCalcNumRevs)
__all__.append("AgVAStateCalcNumRevs")


class AgVAStateCalcRadOfApoapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadOfApoapsis):
    """RadiusOfApoapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadOfApoapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRadOfApoapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadOfApoapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadOfApoapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadOfApoapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{C0BE1DA2-4518-4DDC-9E9F-C270EECC9CD9}", AgVAStateCalcRadOfApoapsis)
__all__.append("AgVAStateCalcRadOfApoapsis")


class AgVAStateCalcRadOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadOfPeriapsis):
    """RadiusOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRadOfPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadOfPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{3992203A-6D30-4430-AB47-184058ADB753}", AgVAStateCalcRadOfPeriapsis)
__all__.append("AgVAStateCalcRadOfPeriapsis")


class AgVAStateCalcSemiMajorAxis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSemiMajorAxis):
    """SemiMajorAxis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSemiMajorAxis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSemiMajorAxis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSemiMajorAxis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSemiMajorAxis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSemiMajorAxis.")
        
agcls.AgClassCatalog.add_catalog_entry("{2E89613E-B6BE-4708-9642-8C1A7734E695}", AgVAStateCalcSemiMajorAxis)
__all__.append("AgVAStateCalcSemiMajorAxis")


class AgVAStateCalcTimePastAscNode(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTimePastAscNode):
    """TimePastAscNode Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTimePastAscNode.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcTimePastAscNode._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTimePastAscNode._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTimePastAscNode._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTimePastAscNode.")
        
agcls.AgClassCatalog.add_catalog_entry("{0D19A235-5062-4D39-9D24-5BE1951E8982}", AgVAStateCalcTimePastAscNode)
__all__.append("AgVAStateCalcTimePastAscNode")


class AgVAStateCalcTimePastPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTimePastPeriapsis):
    """TimePastPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTimePastPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcTimePastPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTimePastPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTimePastPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTimePastPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{98C81CE6-0D11-4B0B-A6E6-3BD36BBCB98E}", AgVAStateCalcTimePastPeriapsis)
__all__.append("AgVAStateCalcTimePastPeriapsis")


class AgVAStateCalcTrueAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTrueAnomaly):
    """TrueAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTrueAnomaly.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcTrueAnomaly._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTrueAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTrueAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTrueAnomaly.")
        
agcls.AgClassCatalog.add_catalog_entry("{4F084E44-4214-46EF-B67C-0A0B160F6475}", AgVAStateCalcTrueAnomaly)
__all__.append("AgVAStateCalcTrueAnomaly")


class AgVAStateCalcDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaV):
    """DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaV.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDeltaV._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaV.")
        
agcls.AgClassCatalog.add_catalog_entry("{1609A9CD-8AA8-4F97-A00F-35F014FCCE44}", AgVAStateCalcDeltaV)
__all__.append("AgVAStateCalcDeltaV")


class AgVAStateCalcDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaVSquared):
    """DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDeltaVSquared._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaVSquared.")
        
agcls.AgClassCatalog.add_catalog_entry("{CF7792EC-113B-45A7-AD9E-ECC908EBE1FD}", AgVAStateCalcDeltaVSquared)
__all__.append("AgVAStateCalcDeltaVSquared")


class AgVAStateCalcMCSDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMCSDeltaV):
    """MCS DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMCSDeltaV.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMCSDeltaV._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMCSDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMCSDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMCSDeltaV.")
        
agcls.AgClassCatalog.add_catalog_entry("{8E6614E7-7F46-4A9C-B155-FD8ED6C08D94}", AgVAStateCalcMCSDeltaV)
__all__.append("AgVAStateCalcMCSDeltaV")


class AgVAStateCalcMCSDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMCSDeltaVSquared):
    """MCS DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMCSDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMCSDeltaVSquared._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMCSDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMCSDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMCSDeltaVSquared.")
        
agcls.AgClassCatalog.add_catalog_entry("{DA10B4C1-62C7-4E1C-8B86-A355667DF9AE}", AgVAStateCalcMCSDeltaVSquared)
__all__.append("AgVAStateCalcMCSDeltaVSquared")


class AgVAStateCalcSequenceDeltaV(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSequenceDeltaV):
    """Sequence DeltaV Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSequenceDeltaV.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSequenceDeltaV._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSequenceDeltaV._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSequenceDeltaV._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSequenceDeltaV.")
        
agcls.AgClassCatalog.add_catalog_entry("{138B7BC6-2338-46BE-83E9-5099C4D45811}", AgVAStateCalcSequenceDeltaV)
__all__.append("AgVAStateCalcSequenceDeltaV")


class AgVAStateCalcSequenceDeltaVSquared(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSequenceDeltaVSquared):
    """Sequence DeltaV Squared Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSequenceDeltaVSquared.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSequenceDeltaVSquared._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSequenceDeltaVSquared._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSequenceDeltaVSquared._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSequenceDeltaVSquared.")
        
agcls.AgClassCatalog.add_catalog_entry("{27E104DF-B5FF-4E24-B397-06D264C0EADA}", AgVAStateCalcSequenceDeltaVSquared)
__all__.append("AgVAStateCalcSequenceDeltaVSquared")


class AgVAStateCalcFuelMass(IAgComponentInfo, IAgCloneable, IAgVAStateCalcFuelMass):
    """FuelMass Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcFuelMass.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcFuelMass._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcFuelMass._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcFuelMass._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcFuelMass.")
        
agcls.AgClassCatalog.add_catalog_entry("{3C37AFCA-696D-4A00-9E7B-7DCE928F0E7E}", AgVAStateCalcFuelMass)
__all__.append("AgVAStateCalcFuelMass")


class AgVAStateCalcDensity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDensity):
    """Density  Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDensity.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDensity._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDensity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDensity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDensity.")
        
agcls.AgClassCatalog.add_catalog_entry("{61D869F6-7B1C-4B5D-A046-AE495AE0FA7E}", AgVAStateCalcDensity)
__all__.append("AgVAStateCalcDensity")


class AgVAStateCalcInertialDeltaVMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVMag):
    """InertialDeltaVMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVMag.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInertialDeltaVMag._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVMag.")
        
agcls.AgClassCatalog.add_catalog_entry("{E12A8E9C-C11A-43D1-AE06-C659B87574D3}", AgVAStateCalcInertialDeltaVMag)
__all__.append("AgVAStateCalcInertialDeltaVMag")


class AgVAStateCalcInertialDeltaVx(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVx):
    """InertialDeltaVx Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVx.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInertialDeltaVx._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVx._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVx._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVx.")
        
agcls.AgClassCatalog.add_catalog_entry("{43875512-BFCF-42E9-ACC8-BA7AE9E498A9}", AgVAStateCalcInertialDeltaVx)
__all__.append("AgVAStateCalcInertialDeltaVx")


class AgVAStateCalcInertialDeltaVy(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVy):
    """InertialDeltaVy Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInertialDeltaVy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVy._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVy.")
        
agcls.AgClassCatalog.add_catalog_entry("{04689A0A-12D1-4362-B5C8-497CF2E4D72E}", AgVAStateCalcInertialDeltaVy)
__all__.append("AgVAStateCalcInertialDeltaVy")


class AgVAStateCalcInertialDeltaVz(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInertialDeltaVz):
    """InertialDeltaVz Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInertialDeltaVz.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInertialDeltaVz._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInertialDeltaVz._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInertialDeltaVz._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInertialDeltaVz.")
        
agcls.AgClassCatalog.add_catalog_entry("{4A160495-31AE-42EE-8D2D-B945D10E86B8}", AgVAStateCalcInertialDeltaVz)
__all__.append("AgVAStateCalcInertialDeltaVz")


class AgVAStateCalcManeuverSpecificImpulse(IAgComponentInfo, IAgCloneable, IAgVAStateCalcManeuverSpecificImpulse):
    """ManeuverSpecificImpulse Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcManeuverSpecificImpulse.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcManeuverSpecificImpulse._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcManeuverSpecificImpulse._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcManeuverSpecificImpulse._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcManeuverSpecificImpulse.")
        
agcls.AgClassCatalog.add_catalog_entry("{8FEFF2C1-6E15-4026-95B3-1985DB40C154}", AgVAStateCalcManeuverSpecificImpulse)
__all__.append("AgVAStateCalcManeuverSpecificImpulse")


class AgVAStateCalcPressure(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPressure):
    """Pressure Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPressure.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcPressure._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPressure._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPressure._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPressure.")
        
agcls.AgClassCatalog.add_catalog_entry("{B12DCC30-F655-428A-BDE1-6D46900A7152}", AgVAStateCalcPressure)
__all__.append("AgVAStateCalcPressure")


class AgVAStateCalcTemperature(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTemperature):
    """Temperature Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTemperature.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcTemperature._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTemperature._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTemperature._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTemperature.")
        
agcls.AgClassCatalog.add_catalog_entry("{130771EF-F7FE-4CD3-B547-DE13FDF54E94}", AgVAStateCalcTemperature)
__all__.append("AgVAStateCalcTemperature")


class AgVAStateCalcVectorY(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorY):
    """VectorY Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorY.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorY._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorY._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorY._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorY.")
        
agcls.AgClassCatalog.add_catalog_entry("{7DC4C32E-1F4B-4B3E-A11C-7ECACCC602F8}", AgVAStateCalcVectorY)
__all__.append("AgVAStateCalcVectorY")


class AgVAStateCalcVectorZ(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorZ):
    """VectorZ Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorZ.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorZ._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorZ._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorZ._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorZ.")
        
agcls.AgClassCatalog.add_catalog_entry("{32E8F7E7-ECDE-4864-B380-D5A293458898}", AgVAStateCalcVectorZ)
__all__.append("AgVAStateCalcVectorZ")


class AgVAStateCalcMass(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMass):
    """Mass Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMass.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMass._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMass._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMass._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMass.")
        
agcls.AgClassCatalog.add_catalog_entry("{99DD4422-3EB6-455B-9FE8-459FD65D2431}", AgVAStateCalcMass)
__all__.append("AgVAStateCalcMass")


class AgVAStateCalcManeuverTotalMassFlowRate(IAgComponentInfo, IAgCloneable, IAgVAStateCalcManeuverTotalMassFlowRate):
    """ManeuverTotalMassFlowRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcManeuverTotalMassFlowRate.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcManeuverTotalMassFlowRate._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcManeuverTotalMassFlowRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcManeuverTotalMassFlowRate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcManeuverTotalMassFlowRate.")
        
agcls.AgClassCatalog.add_catalog_entry("{049DA4A7-E8EB-4C62-AF0F-FFF566CB662F}", AgVAStateCalcManeuverTotalMassFlowRate)
__all__.append("AgVAStateCalcManeuverTotalMassFlowRate")


class AgVAStateCalcAbsoluteValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAbsoluteValue):
    """AbsoluteValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAbsoluteValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcAbsoluteValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAbsoluteValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAbsoluteValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAbsoluteValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{9CA8D97F-2F2D-4E66-B141-D5F8E3524B56}", AgVAStateCalcAbsoluteValue)
__all__.append("AgVAStateCalcAbsoluteValue")


class AgVAStateCalcDifference(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifference):
    """Difference Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifference.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDifference._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifference._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifference._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifference.")
        
agcls.AgClassCatalog.add_catalog_entry("{8D579CBD-FB96-4CA1-9276-0ECF1E8A2854}", AgVAStateCalcDifference)
__all__.append("AgVAStateCalcDifference")


class AgVAStateCalcDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifferenceOtherSegment):
    """DifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDifferenceOtherSegment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifferenceOtherSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{36A3C1BA-F2AB-4F4C-887C-CF81C4E2BE52}", AgVAStateCalcDifferenceOtherSegment)
__all__.append("AgVAStateCalcDifferenceOtherSegment")


class AgVAStateCalcPosDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPosDifferenceOtherSegment):
    """PosDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPosDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcPosDifferenceOtherSegment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPosDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPosDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPosDifferenceOtherSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{9C09C061-9C4A-4B14-A9DC-C802A44A8AF1}", AgVAStateCalcPosDifferenceOtherSegment)
__all__.append("AgVAStateCalcPosDifferenceOtherSegment")


class AgVAStateCalcVelDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVelDifferenceOtherSegment):
    """VelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVelDifferenceOtherSegment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVelDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVelDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVelDifferenceOtherSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{C884D996-39EF-413B-9CF7-A8C927291B66}", AgVAStateCalcVelDifferenceOtherSegment)
__all__.append("AgVAStateCalcVelDifferenceOtherSegment")


class AgVAStateCalcPosVelDifferenceOtherSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPosVelDifferenceOtherSegment):
    """PosVelDifferenceOtherSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPosVelDifferenceOtherSegment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcPosVelDifferenceOtherSegment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPosVelDifferenceOtherSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPosVelDifferenceOtherSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPosVelDifferenceOtherSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7AFF6F3-C2C7-4132-BEB5-9A714E763A11}", AgVAStateCalcPosVelDifferenceOtherSegment)
__all__.append("AgVAStateCalcPosVelDifferenceOtherSegment")


class AgVAStateCalcValueAtSegment(IAgComponentInfo, IAgCloneable, IAgVAStateCalcValueAtSegment):
    """ValueAtSegment Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcValueAtSegment.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcValueAtSegment._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcValueAtSegment._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcValueAtSegment._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcValueAtSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{80E8AAA2-2782-4176-9656-61AC3485096B}", AgVAStateCalcValueAtSegment)
__all__.append("AgVAStateCalcValueAtSegment")


class AgVAStateCalcMaxValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMaxValue):
    """MaximumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMaxValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMaxValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMaxValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMaxValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMaxValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{CC82EA8F-373C-4A0D-A753-96CFD4AE73CF}", AgVAStateCalcMaxValue)
__all__.append("AgVAStateCalcMaxValue")


class AgVAStateCalcMinValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMinValue):
    """MinimumValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMinValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMinValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMinValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMinValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMinValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{F9C57411-482D-49E9-BE13-CC93E34FB0D4}", AgVAStateCalcMinValue)
__all__.append("AgVAStateCalcMinValue")


class AgVAStateCalcMeanValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanValue):
    """MeanValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMeanValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{9B5472A7-799A-43E6-BDE7-99CB2C8C6E0C}", AgVAStateCalcMeanValue)
__all__.append("AgVAStateCalcMeanValue")


class AgVAStateCalcMedianValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMedianValue):
    """MedianValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMedianValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMedianValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMedianValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMedianValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMedianValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{CE3A18D7-5A69-45A1-AA76-AD7C2CF5259A}", AgVAStateCalcMedianValue)
__all__.append("AgVAStateCalcMedianValue")


class AgVAStateCalcStandardDeviation(IAgComponentInfo, IAgCloneable, IAgVAStateCalcStandardDeviation):
    """StandardDeviation Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcStandardDeviation.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcStandardDeviation._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcStandardDeviation._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcStandardDeviation._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcStandardDeviation.")
        
agcls.AgClassCatalog.add_catalog_entry("{B33D3070-060B-4F32-AF2A-1F9BDD57F365}", AgVAStateCalcStandardDeviation)
__all__.append("AgVAStateCalcStandardDeviation")


class AgVAStateCalcNegative(IAgComponentInfo, IAgCloneable, IAgVAStateCalcNegative):
    """Negative Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcNegative.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcNegative._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcNegative._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcNegative._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcNegative.")
        
agcls.AgClassCatalog.add_catalog_entry("{3E13FEC3-D60F-4203-86F2-42BCBC8EAFDF}", AgVAStateCalcNegative)
__all__.append("AgVAStateCalcNegative")


class AgVAStateCalcEccentricity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEccentricity):
    """Eccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEccentricity.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEccentricity._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEccentricity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEccentricity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEccentricity.")
        
agcls.AgClassCatalog.add_catalog_entry("{A9D98D60-E73E-4C59-9328-DFC5A12EF52B}", AgVAStateCalcEccentricity)
__all__.append("AgVAStateCalcEccentricity")


class AgVAStateCalcMeanAnomaly(IAgComponentInfo, IAgCloneable, IAgVAStateCalcMeanAnomaly):
    """MeanAnomaly Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcMeanAnomaly.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcMeanAnomaly._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcMeanAnomaly._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcMeanAnomaly._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcMeanAnomaly.")
        
agcls.AgClassCatalog.add_catalog_entry("{8787D9AA-FBE1-43E4-932F-CB7B98D23D5B}", AgVAStateCalcMeanAnomaly)
__all__.append("AgVAStateCalcMeanAnomaly")


class AgVAStateCalcRAAN(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRAAN):
    """RAAN Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRAAN.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRAAN._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRAAN._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRAAN._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRAAN.")
        
agcls.AgClassCatalog.add_catalog_entry("{05B5185A-C8F3-4B02-AE8B-B5D58744323C}", AgVAStateCalcRAAN)
__all__.append("AgVAStateCalcRAAN")


class AgVABDotRCalc(IAgComponentInfo, IAgCloneable, IAgVABDotRCalc):
    """BDotR Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABDotRCalc.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVABDotRCalc._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABDotRCalc._get_property(self, attrname) is not None: found_prop = IAgVABDotRCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABDotRCalc.")
        
agcls.AgClassCatalog.add_catalog_entry("{18A16428-2959-4220-A4A2-571D1F5A67FC}", AgVABDotRCalc)
__all__.append("AgVABDotRCalc")


class AgVABDotTCalc(IAgComponentInfo, IAgCloneable, IAgVABDotTCalc):
    """BDotT Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABDotTCalc.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVABDotTCalc._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABDotTCalc._get_property(self, attrname) is not None: found_prop = IAgVABDotTCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABDotTCalc.")
        
agcls.AgClassCatalog.add_catalog_entry("{59ACA04A-9B85-43DF-82FF-B58CFD985158}", AgVABDotTCalc)
__all__.append("AgVABDotTCalc")


class AgVABMagCalc(IAgComponentInfo, IAgCloneable, IAgVABMagCalc):
    """BMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABMagCalc.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVABMagCalc._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABMagCalc._get_property(self, attrname) is not None: found_prop = IAgVABMagCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABMagCalc.")
        
agcls.AgClassCatalog.add_catalog_entry("{87EF9CCA-2D0E-4742-8354-79E977FFD067}", AgVABMagCalc)
__all__.append("AgVABMagCalc")


class AgVABThetaCalc(IAgComponentInfo, IAgCloneable, IAgVABThetaCalc):
    """BTheta Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVABThetaCalc.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVABThetaCalc._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVABThetaCalc._get_property(self, attrname) is not None: found_prop = IAgVABThetaCalc._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABThetaCalc.")
        
agcls.AgClassCatalog.add_catalog_entry("{C5C6EC0C-6F2D-4DAB-9DCD-2A8FD810C642}", AgVABThetaCalc)
__all__.append("AgVABThetaCalc")


class AgVAStateCalcDeltaDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaDec):
    """DeltaDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaDec.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDeltaDec._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaDec.")
        
agcls.AgClassCatalog.add_catalog_entry("{4EA9E58A-9900-41CF-BFA8-8BF7849C9187}", AgVAStateCalcDeltaDec)
__all__.append("AgVAStateCalcDeltaDec")


class AgVAStateCalcDeltaRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDeltaRA):
    """DeltaRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDeltaRA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDeltaRA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDeltaRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDeltaRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDeltaRA.")
        
agcls.AgClassCatalog.add_catalog_entry("{3B1EAA2E-8FA2-4EF2-B7AB-377157AD0505}", AgVAStateCalcDeltaRA)
__all__.append("AgVAStateCalcDeltaRA")


class AgVAStateCalcBetaAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcBetaAngle):
    """BetaAngle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcBetaAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcBetaAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcBetaAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcBetaAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcBetaAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{B51815A6-AEDE-468C-B282-EEA255DAF822}", AgVAStateCalcBetaAngle)
__all__.append("AgVAStateCalcBetaAngle")


class AgVAStateCalcLocalApparentSolarLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLocalApparentSolarLon):
    """LocalApparentSolarLon Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLocalApparentSolarLon.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcLocalApparentSolarLon._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLocalApparentSolarLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLocalApparentSolarLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLocalApparentSolarLon.")
        
agcls.AgClassCatalog.add_catalog_entry("{E7AC3C2D-5E4C-447F-8A56-C9CFCDBB2143}", AgVAStateCalcLocalApparentSolarLon)
__all__.append("AgVAStateCalcLocalApparentSolarLon")


class AgVAStateCalcLonOfPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcLonOfPeriapsis):
    """LonOfPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcLonOfPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcLonOfPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcLonOfPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcLonOfPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcLonOfPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{3DBA2AA2-6A87-4ACE-9F8D-C03001E1DBD1}", AgVAStateCalcLonOfPeriapsis)
__all__.append("AgVAStateCalcLonOfPeriapsis")


class AgVAStateCalcOrbitStateValue(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOrbitStateValue):
    """OrbitStateValue Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOrbitStateValue.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOrbitStateValue._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOrbitStateValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOrbitStateValue._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOrbitStateValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{10879C56-0D1C-4E8E-B7CA-F059FB935366}", AgVAStateCalcOrbitStateValue)
__all__.append("AgVAStateCalcOrbitStateValue")


class AgVAStateCalcSignedEccentricity(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSignedEccentricity):
    """SignedEccentricity Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSignedEccentricity.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSignedEccentricity._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSignedEccentricity._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSignedEccentricity._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSignedEccentricity.")
        
agcls.AgClassCatalog.add_catalog_entry("{469C3DB7-C322-480A-82E2-4763AD59E470}", AgVAStateCalcSignedEccentricity)
__all__.append("AgVAStateCalcSignedEccentricity")


class AgVAStateCalcInclination(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInclination):
    """Inclination Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInclination.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInclination._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInclination._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInclination._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInclination.")
        
agcls.AgClassCatalog.add_catalog_entry("{1B8A0935-D9A7-4710-8C02-8A827F7D85DF}", AgVAStateCalcInclination)
__all__.append("AgVAStateCalcInclination")


class AgVAStateCalcTrueLon(IAgComponentInfo, IAgCloneable, IAgVAStateCalcTrueLon):
    """TrueLong Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcTrueLon.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcTrueLon._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcTrueLon._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcTrueLon._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcTrueLon.")
        
agcls.AgClassCatalog.add_catalog_entry("{E1D740A4-341A-40AA-83E8-4456207A0D98}", AgVAStateCalcTrueLon)
__all__.append("AgVAStateCalcTrueLon")


class AgVAStateCalcPower(IAgComponentInfo, IAgCloneable, IAgVAStateCalcPower):
    """Power Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcPower.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcPower._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcPower._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPower._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPower.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE828349-BB26-44C8-9603-ED89F108DF82}", AgVAStateCalcPower)
__all__.append("AgVAStateCalcPower")


class AgVAStateCalcRelMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelMotion):
    """Relative Motion Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelMotion.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelMotion._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelMotion.")
        
agcls.AgClassCatalog.add_catalog_entry("{1BE88040-9A43-40B0-9A3F-28C1AE4FCC33}", AgVAStateCalcRelMotion)
__all__.append("AgVAStateCalcRelMotion")


class AgVAStateCalcSolarBetaAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSolarBetaAngle):
    """Solar Beta Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSolarBetaAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSolarBetaAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSolarBetaAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSolarBetaAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSolarBetaAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{A2AFBF81-9B6D-4675-B8A3-2995530B257F}", AgVAStateCalcSolarBetaAngle)
__all__.append("AgVAStateCalcSolarBetaAngle")


class AgVAStateCalcSolarInPlaneAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSolarInPlaneAngle):
    """Solar In Plane Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSolarInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSolarInPlaneAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSolarInPlaneAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSolarInPlaneAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSolarInPlaneAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{AF76B597-61AE-41E7-B7F9-47AB9FA06A23}", AgVAStateCalcSolarInPlaneAngle)
__all__.append("AgVAStateCalcSolarInPlaneAngle")


class AgVAStateCalcRelPosDecAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelPosDecAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelPosDecAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelPosDecAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelPosDecAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelPosDecAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelPosDecAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{75D53DB6-15AE-43CE-8ABC-5B8568CEE035}", AgVAStateCalcRelPosDecAngle)
__all__.append("AgVAStateCalcRelPosDecAngle")


class AgVAStateCalcRelPosInPlaneAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelPosInPlaneAngle):
    """Relative Position Declination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelPosInPlaneAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelPosInPlaneAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelPosInPlaneAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelPosInPlaneAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelPosInPlaneAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{4F7C4C55-BAB3-484D-B110-4A34A6F1A006}", AgVAStateCalcRelPosInPlaneAngle)
__all__.append("AgVAStateCalcRelPosInPlaneAngle")


class AgVAStateCalcRelativeInclination(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRelativeInclination):
    """Relative Inclination Angle objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRelativeInclination.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRelativeInclination._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRelativeInclination._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRelativeInclination._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRelativeInclination.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2BAF85F-8B05-4261-8E40-428FD9F6A237}", AgVAStateCalcRelativeInclination)
__all__.append("AgVAStateCalcRelativeInclination")


class AgVAStateCalcCurvilinearRelMotion(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCurvilinearRelMotion):
    """Curvilinear Relative Motion objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCurvilinearRelMotion.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCurvilinearRelMotion._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCurvilinearRelMotion._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCurvilinearRelMotion._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCurvilinearRelMotion.")
        
agcls.AgClassCatalog.add_catalog_entry("{1FBB6D32-A2AD-4914-940D-30E548147C35}", AgVAStateCalcCurvilinearRelMotion)
__all__.append("AgVAStateCalcCurvilinearRelMotion")


class AgVAStateCalcCustomFunction(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCustomFunction):
    """Custom Function Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCustomFunction.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCustomFunction._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCustomFunction._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCustomFunction._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCustomFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{85022653-0E1C-4116-AC71-AE8AE17AD8AB}", AgVAStateCalcCustomFunction)
__all__.append("AgVAStateCalcCustomFunction")


class AgVAStateCalcScript(IAgComponentInfo, IAgCloneable, IAgVAStateCalcScript):
    """Script Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcScript.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcScript._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcScript._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcScript._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcScript.")
        
agcls.AgClassCatalog.add_catalog_entry("{5D44239C-5296-4B55-B0A6-810D2A709B20}", AgVAStateCalcScript)
__all__.append("AgVAStateCalcScript")


class AgVAStateCalcCd(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCd):
    """Cd Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCd.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCd._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCd._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCd._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCd.")
        
agcls.AgClassCatalog.add_catalog_entry("{9672871F-3A83-41E8-851E-509DD513C3E3}", AgVAStateCalcCd)
__all__.append("AgVAStateCalcCd")


class AgVAStateCalcCr(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCr):
    """Cr Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCr.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCr._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCr._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCr._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCr.")
        
agcls.AgClassCatalog.add_catalog_entry("{1AAFF1B0-616E-4A1C-9CE0-075D24C3B170}", AgVAStateCalcCr)
__all__.append("AgVAStateCalcCr")


class AgVAStateCalcDragArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDragArea):
    """DragArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDragArea.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDragArea._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDragArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDragArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDragArea.")
        
agcls.AgClassCatalog.add_catalog_entry("{3ED247EF-6E67-4883-A2FE-B2A7BF19E14E}", AgVAStateCalcDragArea)
__all__.append("AgVAStateCalcDragArea")


class AgVAStateCalcRadiationPressureArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadiationPressureArea):
    """RadPressureArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadiationPressureArea.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRadiationPressureArea._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadiationPressureArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadiationPressureArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadiationPressureArea.")
        
agcls.AgClassCatalog.add_catalog_entry("{C7973875-9EFC-41FC-98CF-CCB7AE0C611F}", AgVAStateCalcRadiationPressureArea)
__all__.append("AgVAStateCalcRadiationPressureArea")


class AgVAStateCalcRadiationPressureCoefficient(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRadiationPressureCoefficient):
    """RadiationPressureCoefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRadiationPressureCoefficient.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRadiationPressureCoefficient._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRadiationPressureCoefficient._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRadiationPressureCoefficient._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRadiationPressureCoefficient.")
        
agcls.AgClassCatalog.add_catalog_entry("{7FDC4AD9-E570-4820-BFB3-939EA5FF7D82}", AgVAStateCalcRadiationPressureCoefficient)
__all__.append("AgVAStateCalcRadiationPressureCoefficient")


class AgVAStateCalcSRPArea(IAgComponentInfo, IAgCloneable, IAgVAStateCalcSRPArea):
    """SRPArea Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcSRPArea.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcSRPArea._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcSRPArea._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSRPArea._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSRPArea.")
        
agcls.AgClassCatalog.add_catalog_entry("{6A0BF963-BD8C-46F9-8C87-F6E0FF16D057}", AgVAStateCalcSRPArea)
__all__.append("AgVAStateCalcSRPArea")


class AgVAStateCalcCosOfVerticalFPA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCosOfVerticalFPA):
    """CosineOfVerticalFPA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCosOfVerticalFPA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCosOfVerticalFPA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCosOfVerticalFPA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCosOfVerticalFPA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCosOfVerticalFPA.")
        
agcls.AgClassCatalog.add_catalog_entry("{779C8E84-1667-442C-BFD9-F20271803FE5}", AgVAStateCalcCosOfVerticalFPA)
__all__.append("AgVAStateCalcCosOfVerticalFPA")


class AgVAStateCalcDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDec):
    """Dec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDec.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDec._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDec.")
        
agcls.AgClassCatalog.add_catalog_entry("{3F821D80-1156-46EB-950F-FF965EB54C3C}", AgVAStateCalcDec)
__all__.append("AgVAStateCalcDec")


class AgVAStateCalcFPA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcFPA):
    """FPA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcFPA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcFPA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcFPA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcFPA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcFPA.")
        
agcls.AgClassCatalog.add_catalog_entry("{BAB717ED-41A9-4D2A-ADB3-F2D0F5BD67D6}", AgVAStateCalcFPA)
__all__.append("AgVAStateCalcFPA")


class AgVAStateCalcRMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRMag):
    """RMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRMag.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRMag._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRMag.")
        
agcls.AgClassCatalog.add_catalog_entry("{4EED7719-E95B-4482-936C-9940FF6EE774}", AgVAStateCalcRMag)
__all__.append("AgVAStateCalcRMag")


class AgVAStateCalcRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcRA):
    """RA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcRA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcRA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRA.")
        
agcls.AgClassCatalog.add_catalog_entry("{2482280B-347A-49C7-BEEB-044CD8F8C899}", AgVAStateCalcRA)
__all__.append("AgVAStateCalcRA")


class AgVAStateCalcVMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVMag):
    """VMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVMag.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVMag._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVMag.")
        
agcls.AgClassCatalog.add_catalog_entry("{B2DD548E-6DD5-4C33-9EDC-8275A4711B70}", AgVAStateCalcVMag)
__all__.append("AgVAStateCalcVMag")


class AgVAStateCalcVelAz(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVelAz):
    """Velocity Azimuth Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVelAz.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVelAz._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVelAz._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVelAz._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVelAz.")
        
agcls.AgClassCatalog.add_catalog_entry("{51BBAEBF-08A7-47B0-82A2-49DD3B47C0DA}", AgVAStateCalcVelAz)
__all__.append("AgVAStateCalcVelAz")


class AgVAStateCalcC3Energy(IAgComponentInfo, IAgCloneable, IAgVAStateCalcC3Energy):
    """C3Energy Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcC3Energy.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcC3Energy._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcC3Energy._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcC3Energy._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcC3Energy.")
        
agcls.AgClassCatalog.add_catalog_entry("{3F05AC7C-3565-44C8-BD75-A9F26F5DEBE7}", AgVAStateCalcC3Energy)
__all__.append("AgVAStateCalcC3Energy")


class AgVAStateCalcInAsympDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInAsympDec):
    """InAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInAsympDec.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInAsympDec._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInAsympDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInAsympDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInAsympDec.")
        
agcls.AgClassCatalog.add_catalog_entry("{74C3D08C-5CBE-4182-9C50-5607CFAE3C29}", AgVAStateCalcInAsympDec)
__all__.append("AgVAStateCalcInAsympDec")


class AgVAStateCalcInAsympRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInAsympRA):
    """InAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInAsympRA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInAsympRA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInAsympRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInAsympRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInAsympRA.")
        
agcls.AgClassCatalog.add_catalog_entry("{FA6F2B49-B25B-4726-A72B-EB01DA9A40FA}", AgVAStateCalcInAsympRA)
__all__.append("AgVAStateCalcInAsympRA")


class AgVAStateCalcInVelAzAtPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcInVelAzAtPeriapsis):
    """InVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcInVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcInVelAzAtPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcInVelAzAtPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcInVelAzAtPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcInVelAzAtPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{F425CF2E-5BD8-47E0-86FB-8E6911450DC2}", AgVAStateCalcInVelAzAtPeriapsis)
__all__.append("AgVAStateCalcInVelAzAtPeriapsis")


class AgVAStateCalcOutAsympDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutAsympDec):
    """OutAsymptoteDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutAsympDec.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOutAsympDec._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutAsympDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutAsympDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutAsympDec.")
        
agcls.AgClassCatalog.add_catalog_entry("{E6479974-FCA0-4BB3-9218-5EA7FBC6B309}", AgVAStateCalcOutAsympDec)
__all__.append("AgVAStateCalcOutAsympDec")


class AgVAStateCalcOutAsympRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutAsympRA):
    """OutAsymptoteRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutAsympRA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOutAsympRA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutAsympRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutAsympRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutAsympRA.")
        
agcls.AgClassCatalog.add_catalog_entry("{5FD80B29-8811-4669-9830-E00AC6A65B7A}", AgVAStateCalcOutAsympRA)
__all__.append("AgVAStateCalcOutAsympRA")


class AgVAStateCalcOutVelAzAtPeriapsis(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOutVelAzAtPeriapsis):
    """OutVelocityAzAtPeriapsis Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOutVelAzAtPeriapsis.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOutVelAzAtPeriapsis._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOutVelAzAtPeriapsis._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOutVelAzAtPeriapsis._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOutVelAzAtPeriapsis.")
        
agcls.AgClassCatalog.add_catalog_entry("{6FACAD87-7615-433A-BED5-B79F771BF045}", AgVAStateCalcOutVelAzAtPeriapsis)
__all__.append("AgVAStateCalcOutVelAzAtPeriapsis")


class AgVAStateCalcDuration(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDuration):
    """Duration Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDuration.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDuration._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDuration._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDuration._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDuration.")
        
agcls.AgClassCatalog.add_catalog_entry("{8A31F99F-B1EA-4818-B3F7-6485F142BEDA}", AgVAStateCalcDuration)
__all__.append("AgVAStateCalcDuration")


class AgVAStateCalcUserValue(IAgVAStateCalcUserValue, IAgComponentInfo, IAgCloneable):
    """CoClass StateCalcUserValue."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcUserValue.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcUserValue._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcUserValue._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcUserValue._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcUserValue.")
        
agcls.AgClassCatalog.add_catalog_entry("{DF6CDC8E-3271-4671-851E-6D8916364D04}", AgVAStateCalcUserValue)
__all__.append("AgVAStateCalcUserValue")


class AgVAStateCalcCrdnAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcCrdnAngle):
    """Vector Geometry Tool Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcCrdnAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcCrdnAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcCrdnAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcCrdnAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcCrdnAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{382A3B1B-6CB2-4E54-A066-C0B62EF241C8}", AgVAStateCalcCrdnAngle)
__all__.append("AgVAStateCalcCrdnAngle")


class AgVAStateCalcAngle(IAgComponentInfo, IAgCloneable, IAgVAStateCalcAngle):
    """Angle Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcAngle.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcAngle._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcAngle._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcAngle._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcAngle.")
        
agcls.AgClassCatalog.add_catalog_entry("{C19A5EF8-79AF-48F2-9D09-86AE97CC689A}", AgVAStateCalcAngle)
__all__.append("AgVAStateCalcAngle")


class AgVAStateCalcDotProduct(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDotProduct):
    """DotProduct Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDotProduct.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDotProduct._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDotProduct._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDotProduct._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDotProduct.")
        
agcls.AgClassCatalog.add_catalog_entry("{B8E6B301-8959-44D9-B9EC-70FEA1B5B12D}", AgVAStateCalcDotProduct)
__all__.append("AgVAStateCalcDotProduct")


class AgVAStateCalcVectorDec(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorDec):
    """VectorDec Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorDec.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorDec._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorDec._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorDec._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorDec.")
        
agcls.AgClassCatalog.add_catalog_entry("{F5F90539-F030-4840-A78F-7BFE9FE6852F}", AgVAStateCalcVectorDec)
__all__.append("AgVAStateCalcVectorDec")


class AgVAStateCalcVectorMag(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorMag):
    """VectorMag Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorMag.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorMag._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorMag._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorMag._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorMag.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE89CDB6-F735-4DAB-88D3-7F2DD834C1E4}", AgVAStateCalcVectorMag)
__all__.append("AgVAStateCalcVectorMag")


class AgVAStateCalcVectorRA(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorRA):
    """VectorRA Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorRA.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorRA._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorRA._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorRA._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorRA.")
        
agcls.AgClassCatalog.add_catalog_entry("{CE22AAAD-F51C-4E90-8E74-5DCEE756020C}", AgVAStateCalcVectorRA)
__all__.append("AgVAStateCalcVectorRA")


class AgVAStateCalcVectorX(IAgComponentInfo, IAgCloneable, IAgVAStateCalcVectorX):
    """VectorX Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcVectorX.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcVectorX._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcVectorX._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcVectorX._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcVectorX.")
        
agcls.AgClassCatalog.add_catalog_entry("{9CC56135-C9E6-4A99-B0E2-70EA81E9AB08}", AgVAStateCalcVectorX)
__all__.append("AgVAStateCalcVectorX")


class AgVAStateCalcOnePtAccess(IAgComponentInfo, IAgCloneable, IAgVAStateCalcOnePtAccess):
    """Access Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcOnePtAccess.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcOnePtAccess._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcOnePtAccess._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcOnePtAccess._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcOnePtAccess.")
        
agcls.AgClassCatalog.add_catalog_entry("{19CBB92F-B6BE-4F6B-A2F9-056AD2EF7940}", AgVAStateCalcOnePtAccess)
__all__.append("AgVAStateCalcOnePtAccess")


class AgVAStateCalcDifferenceAcrossSegmentsOtherSat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcDifferenceAcrossSegmentsOtherSat):
    """DifferenceAcrossSegmentsOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcDifferenceAcrossSegmentsOtherSat.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDifferenceAcrossSegmentsOtherSat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDifferenceAcrossSegmentsOtherSat.")
        
agcls.AgClassCatalog.add_catalog_entry("{83FAC79B-477F-4CD0-83AD-A0A2A9ECA782}", AgVAStateCalcDifferenceAcrossSegmentsOtherSat)
__all__.append("AgVAStateCalcDifferenceAcrossSegmentsOtherSat")


class AgVAStateCalcValueAtSegmentOtherSat(IAgComponentInfo, IAgCloneable, IAgVAStateCalcValueAtSegmentOtherSat):
    """ValueAtSegmentOtherSat Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcValueAtSegmentOtherSat.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcValueAtSegmentOtherSat._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcValueAtSegmentOtherSat._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcValueAtSegmentOtherSat._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcValueAtSegmentOtherSat.")
        
agcls.AgClassCatalog.add_catalog_entry("{5F9F3194-5AC1-46C9-8FB9-F076747180E7}", AgVAStateCalcValueAtSegmentOtherSat)
__all__.append("AgVAStateCalcValueAtSegmentOtherSat")


class AgVAStateCalcRARate(IAgVAStateCalcRARate, IAgComponentInfo, IAgCloneable):
    """RightAscensionRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcRARate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcRARate._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcRARate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcRARate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcRARate.")
        
agcls.AgClassCatalog.add_catalog_entry("{3B9AD865-10A2-4B52-BDC7-7BE11A2CD36D}", AgVAStateCalcRARate)
__all__.append("AgVAStateCalcRARate")


class AgVAStateCalcDecRate(IAgVAStateCalcDecRate, IAgComponentInfo, IAgCloneable):
    """DeclinationRate Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcDecRate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcDecRate._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcDecRate._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcDecRate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcDecRate.")
        
agcls.AgClassCatalog.add_catalog_entry("{CCE41365-840A-4B9A-967F-A7D1E761B2DF}", AgVAStateCalcDecRate)
__all__.append("AgVAStateCalcDecRate")


class AgVAStateCalcGravitationalParameter(IAgVAStateCalcGravitationalParameter, IAgComponentInfo, IAgCloneable):
    """GravitationalParameter Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcGravitationalParameter.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcGravitationalParameter._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcGravitationalParameter._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGravitationalParameter._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGravitationalParameter.")
        
agcls.AgClassCatalog.add_catalog_entry("{0B3B8CA7-E0BC-4A0E-A0BE-026946EBF0A6}", AgVAStateCalcGravitationalParameter)
__all__.append("AgVAStateCalcGravitationalParameter")


class AgVAStateCalcReferenceRadius(IAgVAStateCalcReferenceRadius, IAgComponentInfo, IAgCloneable):
    """Reference Radius Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcReferenceRadius.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcReferenceRadius._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcReferenceRadius._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcReferenceRadius._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcReferenceRadius.")
        
agcls.AgClassCatalog.add_catalog_entry("{C90B0911-1B88-4809-A9AD-B1F083E18808}", AgVAStateCalcReferenceRadius)
__all__.append("AgVAStateCalcReferenceRadius")


class AgVAStateCalcGravCoeff(IAgVAStateCalcGravCoeff, IAgComponentInfo, IAgCloneable):
    """Gravity Coefficient Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcGravCoeff.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcGravCoeff._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcGravCoeff._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcGravCoeff._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcGravCoeff.")
        
agcls.AgClassCatalog.add_catalog_entry("{30223DC9-7946-4480-8E8A-DB3393DFEFC8}", AgVAStateCalcGravCoeff)
__all__.append("AgVAStateCalcGravCoeff")


class AgVAStateCalcSpeedOfLight(IAgVAStateCalcSpeedOfLight, IAgComponentInfo, IAgCloneable):
    """Speed Of Light Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcSpeedOfLight.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcSpeedOfLight._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcSpeedOfLight._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcSpeedOfLight._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcSpeedOfLight.")
        
agcls.AgClassCatalog.add_catalog_entry("{BB3D0551-655B-43D3-89BE-59816A9B2DF4}", AgVAStateCalcSpeedOfLight)
__all__.append("AgVAStateCalcSpeedOfLight")


class AgVAStateCalcPi(IAgVAStateCalcPi, IAgComponentInfo, IAgCloneable):
    """Pi Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcPi.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcPi._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcPi._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcPi._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcPi.")
        
agcls.AgClassCatalog.add_catalog_entry("{81779742-2FD6-4E22-81C5-05F1D271944F}", AgVAStateCalcPi)
__all__.append("AgVAStateCalcPi")


class AgVAStateCalcScalar(IAgVAStateCalcScalar, IAgComponentInfo, IAgCloneable):
    """Scalar Calc objects."""
    def __init__(self, sourceObject=None):
        IAgVAStateCalcScalar.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateCalcScalar._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateCalcScalar._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcScalar._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcScalar.")
        
agcls.AgClassCatalog.add_catalog_entry("{C6136D77-3185-4A4C-83AA-90CC6713A07A}", AgVAStateCalcScalar)
__all__.append("AgVAStateCalcScalar")


class AgVAStateCalcApparentSolarTime(IAgComponentInfo, IAgCloneable, IAgVAStateCalcApparentSolarTime):
    """Apparent Solar Time Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcApparentSolarTime.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcApparentSolarTime._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcApparentSolarTime._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcApparentSolarTime._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcApparentSolarTime.")
        
agcls.AgClassCatalog.add_catalog_entry("{EF933369-A9DC-4A8C-B361-615A7A8B852D}", AgVAStateCalcApparentSolarTime)
__all__.append("AgVAStateCalcApparentSolarTime")


class AgVAStateCalcEarthMeanSolarTime(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEarthMeanSolarTime):
    """EarthMeanSolarTime Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEarthMeanSolarTime.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEarthMeanSolarTime._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEarthMeanSolarTime._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEarthMeanSolarTime._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEarthMeanSolarTime.")
        
agcls.AgClassCatalog.add_catalog_entry("{A36F3E6D-DD64-4089-A0B9-CDDECA9F31BF}", AgVAStateCalcEarthMeanSolarTime)
__all__.append("AgVAStateCalcEarthMeanSolarTime")


class AgVAStateCalcEarthMeanLocTimeAN(IAgComponentInfo, IAgCloneable, IAgVAStateCalcEarthMeanLocTimeAN):
    """EarthMeanLocTimeAN Calc objects."""
    def __init__(self, sourceObject=None):
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
        IAgVAStateCalcEarthMeanLocTimeAN.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
        IAgVAStateCalcEarthMeanLocTimeAN._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if IAgVAStateCalcEarthMeanLocTimeAN._get_property(self, attrname) is not None: found_prop = IAgVAStateCalcEarthMeanLocTimeAN._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateCalcEarthMeanLocTimeAN.")
        
agcls.AgClassCatalog.add_catalog_entry("{8B52530C-09B1-48BB-A644-2564B3F9A23F}", AgVAStateCalcEarthMeanLocTimeAN)
__all__.append("AgVAStateCalcEarthMeanLocTimeAN")


class AgVAAutomaticSequenceCollection(IAgVAAutomaticSequenceCollection):
    """Automatic Sequence Collection."""
    def __init__(self, sourceObject=None):
        IAgVAAutomaticSequenceCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAutomaticSequenceCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAutomaticSequenceCollection._get_property(self, attrname) is not None: found_prop = IAgVAAutomaticSequenceCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAutomaticSequenceCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{364BDB62-ECD6-4661-A8EB-D6943F5BD5BF}", AgVAAutomaticSequenceCollection)
__all__.append("AgVAAutomaticSequenceCollection")


class AgVAAutomaticSequence(IAgVAAutomaticSequence):
    """Automatic Sequence."""
    def __init__(self, sourceObject=None):
        IAgVAAutomaticSequence.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAutomaticSequence._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAutomaticSequence._get_property(self, attrname) is not None: found_prop = IAgVAAutomaticSequence._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAutomaticSequence.")
        
agcls.AgClassCatalog.add_catalog_entry("{8755DF12-EDDB-468E-92AF-D98C5C1B1534}", AgVAAutomaticSequence)
__all__.append("AgVAAutomaticSequence")


class AgVACentralBodyCollection(IAgVACentralBodyCollection):
    """Central Body Collection."""
    def __init__(self, sourceObject=None):
        IAgVACentralBodyCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACentralBodyCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACentralBodyCollection._get_property(self, attrname) is not None: found_prop = IAgVACentralBodyCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACentralBodyCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{393D9C77-A9A2-4E5A-B285-9292EAF77559}", AgVACentralBodyCollection)
__all__.append("AgVACentralBodyCollection")


class AgVACentralBody(IAgVACentralBody, IAgComponentInfo, IAgCloneable):
    """Central Body."""
    def __init__(self, sourceObject=None):
        IAgVACentralBody.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACentralBody._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACentralBody._get_property(self, attrname) is not None: found_prop = IAgVACentralBody._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACentralBody.")
        
agcls.AgClassCatalog.add_catalog_entry("{BB18EA4F-DF6E-44A3-B547-CD21EC10120C}", AgVACentralBody)
__all__.append("AgVACentralBody")


class AgVACbGravityModel(IAgVACbGravityModel):
    """Central Body Gravity Model."""
    def __init__(self, sourceObject=None):
        IAgVACbGravityModel.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbGravityModel._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbGravityModel._get_property(self, attrname) is not None: found_prop = IAgVACbGravityModel._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbGravityModel.")
        
agcls.AgClassCatalog.add_catalog_entry("{B235689A-958C-42EA-BACA-DF03ED880C5B}", AgVACbGravityModel)
__all__.append("AgVACbGravityModel")


class AgVACbShapeSphere(IAgVACbShapeSphere, IAgVACbShape):
    """Central Body Shape - Sphere."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeSphere.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShapeSphere._private_init(self, pUnk)
        IAgVACbShape._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeSphere._get_property(self, attrname) is not None: found_prop = IAgVACbShapeSphere._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeSphere.")
        
agcls.AgClassCatalog.add_catalog_entry("{0AC87F61-8DFA-48FF-A1D2-D7DCD7133900}", AgVACbShapeSphere)
__all__.append("AgVACbShapeSphere")


class AgVACbShapeOblateSpheroid(IAgVACbShapeOblateSpheroid, IAgVACbShape):
    """Central Body Shape - Spheroid."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeOblateSpheroid.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShapeOblateSpheroid._private_init(self, pUnk)
        IAgVACbShape._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeOblateSpheroid._get_property(self, attrname) is not None: found_prop = IAgVACbShapeOblateSpheroid._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeOblateSpheroid.")
        
agcls.AgClassCatalog.add_catalog_entry("{1C606CEB-7C36-486E-A123-42AF0BCB2C8F}", AgVACbShapeOblateSpheroid)
__all__.append("AgVACbShapeOblateSpheroid")


class AgVACbShapeTriaxialEllipsoid(IAgVACbShapeTriaxialEllipsoid, IAgVACbShape):
    """Central Body Shape - Triaxial Ellipsoid."""
    def __init__(self, sourceObject=None):
        IAgVACbShapeTriaxialEllipsoid.__init__(self, sourceObject)
        IAgVACbShape.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbShapeTriaxialEllipsoid._private_init(self, pUnk)
        IAgVACbShape._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbShapeTriaxialEllipsoid._get_property(self, attrname) is not None: found_prop = IAgVACbShapeTriaxialEllipsoid._get_property(self, attrname)
        if IAgVACbShape._get_property(self, attrname) is not None: found_prop = IAgVACbShape._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbShapeTriaxialEllipsoid.")
        
agcls.AgClassCatalog.add_catalog_entry("{286452CC-4917-4618-B2B7-D4C4B226AEAE}", AgVACbShapeTriaxialEllipsoid)
__all__.append("AgVACbShapeTriaxialEllipsoid")


class AgVACbAttitudeRotationCoefficientsFile(IAgVACbAttitudeRotationCoefficientsFile, IAgVACbAttitude):
    """Central Body Attitude - Rotation Coefficients File."""
    def __init__(self, sourceObject=None):
        IAgVACbAttitudeRotationCoefficientsFile.__init__(self, sourceObject)
        IAgVACbAttitude.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbAttitudeRotationCoefficientsFile._private_init(self, pUnk)
        IAgVACbAttitude._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbAttitudeRotationCoefficientsFile._get_property(self, attrname) is not None: found_prop = IAgVACbAttitudeRotationCoefficientsFile._get_property(self, attrname)
        if IAgVACbAttitude._get_property(self, attrname) is not None: found_prop = IAgVACbAttitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbAttitudeRotationCoefficientsFile.")
        
agcls.AgClassCatalog.add_catalog_entry("{BC7D0575-6607-4103-8957-0B791534526D}", AgVACbAttitudeRotationCoefficientsFile)
__all__.append("AgVACbAttitudeRotationCoefficientsFile")


class AgVACbAttitudeIAU1994(IAgVACbAttitudeIAU1994, IAgVACbAttitude):
    """Central Body Attitude - IAU1994."""
    def __init__(self, sourceObject=None):
        IAgVACbAttitudeIAU1994.__init__(self, sourceObject)
        IAgVACbAttitude.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbAttitudeIAU1994._private_init(self, pUnk)
        IAgVACbAttitude._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbAttitudeIAU1994._get_property(self, attrname) is not None: found_prop = IAgVACbAttitudeIAU1994._get_property(self, attrname)
        if IAgVACbAttitude._get_property(self, attrname) is not None: found_prop = IAgVACbAttitude._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbAttitudeIAU1994.")
        
agcls.AgClassCatalog.add_catalog_entry("{147ABE46-6F5E-45D9-8279-5D01B0D78B88}", AgVACbAttitudeIAU1994)
__all__.append("AgVACbAttitudeIAU1994")


class AgVACbEphemerisAnalyticOrbit(IAgVACbEphemerisAnalyticOrbit, IAgVACbEphemeris):
    """Central Body Ephemeris - Analytic Orbit."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisAnalyticOrbit.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemerisAnalyticOrbit._private_init(self, pUnk)
        IAgVACbEphemeris._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisAnalyticOrbit._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisAnalyticOrbit._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisAnalyticOrbit.")
        
agcls.AgClassCatalog.add_catalog_entry("{D2E09031-DB7F-480B-A361-73713F45EB70}", AgVACbEphemerisAnalyticOrbit)
__all__.append("AgVACbEphemerisAnalyticOrbit")


class AgVACbEphemerisJPLSpice(IAgVACbEphemerisJPLSpice, IAgVACbEphemeris):
    """Central Body Ephemeris - JPLSpice."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisJPLSpice.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemerisJPLSpice._private_init(self, pUnk)
        IAgVACbEphemeris._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisJPLSpice._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisJPLSpice._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisJPLSpice.")
        
agcls.AgClassCatalog.add_catalog_entry("{A75A2A9B-F225-43D5-A259-30C9B0488EB8}", AgVACbEphemerisJPLSpice)
__all__.append("AgVACbEphemerisJPLSpice")


class AgVACbEphemerisFile(IAgVACbEphemerisFile, IAgVACbEphemeris):
    """Central Body Ephemeris - File."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisFile.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemerisFile._private_init(self, pUnk)
        IAgVACbEphemeris._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisFile._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisFile._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisFile.")
        
agcls.AgClassCatalog.add_catalog_entry("{063BA11E-7F73-40FA-B691-B12EC38DE29B}", AgVACbEphemerisFile)
__all__.append("AgVACbEphemerisFile")


class AgVACbEphemerisJPLDE(IAgVACbEphemerisJPLDE, IAgVACbEphemeris):
    """Central Body Ephemeris - JPL DE."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisJPLDE.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemerisJPLDE._private_init(self, pUnk)
        IAgVACbEphemeris._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisJPLDE._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisJPLDE._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisJPLDE.")
        
agcls.AgClassCatalog.add_catalog_entry("{6426E9EA-5ED2-46C9-95BB-447955306CA7}", AgVACbEphemerisJPLDE)
__all__.append("AgVACbEphemerisJPLDE")


class AgVACbEphemerisPlanetary(IAgVACbEphemerisPlanetary, IAgVACbEphemeris):
    """Central Body Ephemeris - Planetary."""
    def __init__(self, sourceObject=None):
        IAgVACbEphemerisPlanetary.__init__(self, sourceObject)
        IAgVACbEphemeris.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACbEphemerisPlanetary._private_init(self, pUnk)
        IAgVACbEphemeris._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACbEphemerisPlanetary._get_property(self, attrname) is not None: found_prop = IAgVACbEphemerisPlanetary._get_property(self, attrname)
        if IAgVACbEphemeris._get_property(self, attrname) is not None: found_prop = IAgVACbEphemeris._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACbEphemerisPlanetary.")
        
agcls.AgClassCatalog.add_catalog_entry("{B3946E55-049C-4314-B6E1-1B3E4BD4F660}", AgVACbEphemerisPlanetary)
__all__.append("AgVACbEphemerisPlanetary")


class AgVAMCSSegmentProperties(IAgVAMCSSegmentProperties, IAgRuntimeTypeInfoProvider):
    """Segment Properties."""
    def __init__(self, sourceObject=None):
        IAgVAMCSSegmentProperties.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMCSSegmentProperties._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMCSSegmentProperties._get_property(self, attrname) is not None: found_prop = IAgVAMCSSegmentProperties._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMCSSegmentProperties.")
        
agcls.AgClassCatalog.add_catalog_entry("{9740187E-A60E-4440-952F-46FCEF10879C}", AgVAMCSSegmentProperties)
__all__.append("AgVAMCSSegmentProperties")


class AgVAPowerInternal(IAgVAPowerInternal, IAgComponentInfo, IAgCloneable):
    """Power - Internal."""
    def __init__(self, sourceObject=None):
        IAgVAPowerInternal.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPowerInternal._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerInternal._get_property(self, attrname) is not None: found_prop = IAgVAPowerInternal._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerInternal.")
        
agcls.AgClassCatalog.add_catalog_entry("{269F510C-DE85-4BD7-B09C-15B573F83F31}", AgVAPowerInternal)
__all__.append("AgVAPowerInternal")


class AgVAPowerProcessed(IAgVAPowerProcessed, IAgComponentInfo, IAgCloneable):
    """Power - Processed Power Unit."""
    def __init__(self, sourceObject=None):
        IAgVAPowerProcessed.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPowerProcessed._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerProcessed._get_property(self, attrname) is not None: found_prop = IAgVAPowerProcessed._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerProcessed.")
        
agcls.AgClassCatalog.add_catalog_entry("{F9B2570A-E760-4C58-B95A-6654FA264F43}", AgVAPowerProcessed)
__all__.append("AgVAPowerProcessed")


class AgVAPowerSolarArray(IAgVAPowerSolarArray, IAgComponentInfo, IAgCloneable):
    """Power - Solar Array."""
    def __init__(self, sourceObject=None):
        IAgVAPowerSolarArray.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPowerSolarArray._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPowerSolarArray._get_property(self, attrname) is not None: found_prop = IAgVAPowerSolarArray._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPowerSolarArray.")
        
agcls.AgClassCatalog.add_catalog_entry("{EFF8A0BD-0BEA-4A4C-B486-3BC0DDA2B96E}", AgVAPowerSolarArray)
__all__.append("AgVAPowerSolarArray")


class AgVAGeneralRelativityFunction(IAgVAGeneralRelativityFunction, IAgComponentInfo, IAgCloneable):
    """General Relativity Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAGeneralRelativityFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGeneralRelativityFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGeneralRelativityFunction._get_property(self, attrname) is not None: found_prop = IAgVAGeneralRelativityFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGeneralRelativityFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{2388EABA-68BE-4071-A6FC-5DF5E6913E09}", AgVAGeneralRelativityFunction)
__all__.append("AgVAGeneralRelativityFunction")


class AgVAStateTransFunction(IAgVAStateTransFunction, IAgComponentInfo, IAgCloneable):
    """State Transition Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAStateTransFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAStateTransFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAStateTransFunction._get_property(self, attrname) is not None: found_prop = IAgVAStateTransFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAStateTransFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{BC9BCE93-D459-43A4-B996-0710520ECD35}", AgVAStateTransFunction)
__all__.append("AgVAStateTransFunction")


class AgVACR3BPFunc(IAgVACR3BPFunc, IAgComponentInfo, IAgCloneable):
    """CR3BP Function."""
    def __init__(self, sourceObject=None):
        IAgVACR3BPFunc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACR3BPFunc._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACR3BPFunc._get_property(self, attrname) is not None: found_prop = IAgVACR3BPFunc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACR3BPFunc.")
        
agcls.AgClassCatalog.add_catalog_entry("{0CB5F652-0A94-4493-8397-78E8B147A600}", AgVACR3BPFunc)
__all__.append("AgVACR3BPFunc")


class AgVARadiationPressureFunction(IAgVARadiationPressureFunction, IAgComponentInfo, IAgCloneable):
    """Radiation Pressure Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVARadiationPressureFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARadiationPressureFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARadiationPressureFunction._get_property(self, attrname) is not None: found_prop = IAgVARadiationPressureFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARadiationPressureFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{129DFCA0-E241-4BF5-947C-34D311459876}", AgVARadiationPressureFunction)
__all__.append("AgVARadiationPressureFunction")


class AgVAYarkovskyFunc(IAgVAYarkovskyFunc, IAgComponentInfo, IAgCloneable):
    """Yarkovsky Effect Propagator Function."""
    def __init__(self, sourceObject=None):
        IAgVAYarkovskyFunc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAYarkovskyFunc._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAYarkovskyFunc._get_property(self, attrname) is not None: found_prop = IAgVAYarkovskyFunc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAYarkovskyFunc.")
        
agcls.AgClassCatalog.add_catalog_entry("{991BA5B1-ED2F-4633-8493-5AD584CBD4FC}", AgVAYarkovskyFunc)
__all__.append("AgVAYarkovskyFunc")


class AgVABlendedDensity(IAgVABlendedDensity, IAgComponentInfo, IAgCloneable):
    """Blended atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IAgVABlendedDensity.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABlendedDensity._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABlendedDensity._get_property(self, attrname) is not None: found_prop = IAgVABlendedDensity._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABlendedDensity.")
        
agcls.AgClassCatalog.add_catalog_entry("{8262277E-56CE-4780-8EF3-08324A1A06FD}", AgVABlendedDensity)
__all__.append("AgVABlendedDensity")


class AgVACira72Function(IAgVACira72Function, IAgComponentInfo, IAgCloneable):
    """Cira72 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVACira72Function.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACira72Function._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACira72Function._get_property(self, attrname) is not None: found_prop = IAgVACira72Function._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACira72Function.")
        
agcls.AgClassCatalog.add_catalog_entry("{995263CD-4163-4EDA-8012-310821C8A332}", AgVACira72Function)
__all__.append("AgVACira72Function")


class AgVAExponential(IAgVAExponential, IAgComponentInfo, IAgCloneable):
    """Exponential atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAExponential.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAExponential._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAExponential._get_property(self, attrname) is not None: found_prop = IAgVAExponential._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAExponential.")
        
agcls.AgClassCatalog.add_catalog_entry("{701C6D24-1D0E-4D08-9A3B-61566AABDE02}", AgVAExponential)
__all__.append("AgVAExponential")


class AgVAHarrisPriester(IAgVAHarrisPriester, IAgComponentInfo, IAgCloneable):
    """Harris-Priester atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAHarrisPriester.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAHarrisPriester._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAHarrisPriester._get_property(self, attrname) is not None: found_prop = IAgVAHarrisPriester._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAHarrisPriester.")
        
agcls.AgClassCatalog.add_catalog_entry("{2C45FE9A-0EE9-46B0-B0A5-79A052FDE189}", AgVAHarrisPriester)
__all__.append("AgVAHarrisPriester")


class AgVADensityModelPlugin(IAgVADensityModelPlugin, IAgComponentInfo, IAgCloneable):
    """Plugin atmospheric density propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADensityModelPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADensityModelPlugin._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADensityModelPlugin._get_property(self, attrname) is not None: found_prop = IAgVADensityModelPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADensityModelPlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{5331D02B-13E5-4609-BFE6-9BF842E6096F}", AgVADensityModelPlugin)
__all__.append("AgVADensityModelPlugin")


class AgVAJacchiaRoberts(IAgVAJacchiaRoberts, IAgComponentInfo, IAgCloneable):
    """Jacchia Roberts atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchiaRoberts.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAJacchiaRoberts._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchiaRoberts._get_property(self, attrname) is not None: found_prop = IAgVAJacchiaRoberts._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchiaRoberts.")
        
agcls.AgClassCatalog.add_catalog_entry("{6227B561-C892-4BB5-A835-9619EB144173}", AgVAJacchiaRoberts)
__all__.append("AgVAJacchiaRoberts")


class AgVAJacchiaBowman2008(IAgVAJacchiaBowman2008, IAgComponentInfo, IAgCloneable):
    """Jacchia Bowman 2008 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchiaBowman2008.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAJacchiaBowman2008._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchiaBowman2008._get_property(self, attrname) is not None: found_prop = IAgVAJacchiaBowman2008._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchiaBowman2008.")
        
agcls.AgClassCatalog.add_catalog_entry("{19461979-5C67-4840-8DB9-902EC47E6105}", AgVAJacchiaBowman2008)
__all__.append("AgVAJacchiaBowman2008")


class AgVAJacchia_1960(IAgVAJacchia_1960, IAgComponentInfo, IAgCloneable):
    """Jacchia_1960 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1960.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAJacchia_1960._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1960._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1960._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1960.")
        
agcls.AgClassCatalog.add_catalog_entry("{E803E9D5-31AB-4D5C-B93E-AB9975E2402B}", AgVAJacchia_1960)
__all__.append("AgVAJacchia_1960")


class AgVAJacchia_1970(IAgVAJacchia_1970, IAgComponentInfo, IAgCloneable):
    """Jacchia_1970 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1970.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAJacchia_1970._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1970._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1970._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1970.")
        
agcls.AgClassCatalog.add_catalog_entry("{9E716F44-73D2-4A22-97C9-04C20386D575}", AgVAJacchia_1970)
__all__.append("AgVAJacchia_1970")


class AgVAJacchia_1971(IAgVAJacchia_1971, IAgComponentInfo, IAgCloneable):
    """Jacchia_1971 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAJacchia_1971.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAJacchia_1971._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAJacchia_1971._get_property(self, attrname) is not None: found_prop = IAgVAJacchia_1971._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAJacchia_1971.")
        
agcls.AgClassCatalog.add_catalog_entry("{50FFBB4C-124F-4DC6-BEED-F2EC4930B4E7}", AgVAJacchia_1971)
__all__.append("AgVAJacchia_1971")


class AgVAMSISE_1990(IAgVAMSISE_1990, IAgComponentInfo, IAgCloneable):
    """MSISE 1990 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMSISE_1990.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMSISE_1990._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMSISE_1990._get_property(self, attrname) is not None: found_prop = IAgVAMSISE_1990._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMSISE_1990.")
        
agcls.AgClassCatalog.add_catalog_entry("{A46341F0-9384-4A1D-970A-77B1B683359D}", AgVAMSISE_1990)
__all__.append("AgVAMSISE_1990")


class AgVAMSIS_1986(IAgVAMSIS_1986, IAgComponentInfo, IAgCloneable):
    """MSIS 1986 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMSIS_1986.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMSIS_1986._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMSIS_1986._get_property(self, attrname) is not None: found_prop = IAgVAMSIS_1986._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMSIS_1986.")
        
agcls.AgClassCatalog.add_catalog_entry("{AFAC9D69-5B78-48BA-8CFA-5D6A30BBF371}", AgVAMSIS_1986)
__all__.append("AgVAMSIS_1986")


class AgVANRLMSISE_2000(IAgVANRLMSISE_2000, IAgComponentInfo, IAgCloneable):
    """NRLMSISE 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVANRLMSISE_2000.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVANRLMSISE_2000._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANRLMSISE_2000._get_property(self, attrname) is not None: found_prop = IAgVANRLMSISE_2000._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANRLMSISE_2000.")
        
agcls.AgClassCatalog.add_catalog_entry("{2EEE9C88-FF61-497A-AD40-2429DBA0A581}", AgVANRLMSISE_2000)
__all__.append("AgVANRLMSISE_2000")


class AgVAUS_Standard_Atmosphere(IAgVAUS_Standard_Atmosphere, IAgComponentInfo, IAgCloneable):
    """US_Standard_Atmosphere atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAUS_Standard_Atmosphere.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUS_Standard_Atmosphere._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUS_Standard_Atmosphere._get_property(self, attrname) is not None: found_prop = IAgVAUS_Standard_Atmosphere._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUS_Standard_Atmosphere.")
        
agcls.AgClassCatalog.add_catalog_entry("{14714C17-B360-42E1-86EE-99EB95C71B69}", AgVAUS_Standard_Atmosphere)
__all__.append("AgVAUS_Standard_Atmosphere")


class AgVAMarsGRAM37(IAgVAMarsGRAM37, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 3.7 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM37.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMarsGRAM37._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM37._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM37._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM37.")
        
agcls.AgClassCatalog.add_catalog_entry("{69A9AE89-0133-4410-A486-1ADEFBE56F49}", AgVAMarsGRAM37)
__all__.append("AgVAMarsGRAM37")


class AgVAMarsGRAM2000(IAgVAMarsGRAM2000, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2000 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2000.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMarsGRAM2000._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2000._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2000._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2000.")
        
agcls.AgClassCatalog.add_catalog_entry("{FB31A16E-8E6F-4F8F-8D2D-0E3D0C0020FC}", AgVAMarsGRAM2000)
__all__.append("AgVAMarsGRAM2000")


class AgVAMarsGRAM2001(IAgVAMarsGRAM2001, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2001 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2001.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMarsGRAM2001._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2001._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2001._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2001.")
        
agcls.AgClassCatalog.add_catalog_entry("{F7A3F4ED-100F-463F-A9F5-177F49E44BA9}", AgVAMarsGRAM2001)
__all__.append("AgVAMarsGRAM2001")


class AgVAMarsGRAM2005(IAgVAMarsGRAM2005, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2005.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMarsGRAM2005._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2005._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2005._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2005.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD314E36-8513-484A-B46A-FC8794E939AC}", AgVAMarsGRAM2005)
__all__.append("AgVAMarsGRAM2005")


class AgVAMarsGRAM2010(IAgVAMarsGRAM2010, IAgComponentInfo, IAgCloneable):
    """Mars-GRAM 2010 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAMarsGRAM2010.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAMarsGRAM2010._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAMarsGRAM2010._get_property(self, attrname) is not None: found_prop = IAgVAMarsGRAM2010._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAMarsGRAM2010.")
        
agcls.AgClassCatalog.add_catalog_entry("{EE0F710B-25B2-4423-86BE-892E0F221376}", AgVAMarsGRAM2010)
__all__.append("AgVAMarsGRAM2010")


class AgVAVenusGRAM2005(IAgVAVenusGRAM2005, IAgComponentInfo, IAgCloneable):
    """Venus-GRAM 2005 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAVenusGRAM2005.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAVenusGRAM2005._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAVenusGRAM2005._get_property(self, attrname) is not None: found_prop = IAgVAVenusGRAM2005._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAVenusGRAM2005.")
        
agcls.AgClassCatalog.add_catalog_entry("{2360812C-F645-4237-889F-EF487FFC20D7}", AgVAVenusGRAM2005)
__all__.append("AgVAVenusGRAM2005")


class AgVADTM2012(IAgVADTM2012, IAgComponentInfo, IAgCloneable):
    """DTM 2012 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADTM2012.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADTM2012._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADTM2012._get_property(self, attrname) is not None: found_prop = IAgVADTM2012._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADTM2012.")
        
agcls.AgClassCatalog.add_catalog_entry("{131D3F3F-8444-4017-B12F-D57DF1262F58}", AgVADTM2012)
__all__.append("AgVADTM2012")


class AgVADTM2020(IAgVADTM2020, IAgComponentInfo, IAgCloneable):
    """DTM 2020 atmospheric propagator function."""
    def __init__(self, sourceObject=None):
        IAgVADTM2020.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADTM2020._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADTM2020._get_property(self, attrname) is not None: found_prop = IAgVADTM2020._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADTM2020.")
        
agcls.AgClassCatalog.add_catalog_entry("{68457876-1EF6-4DD4-9295-E72570C4F97B}", AgVADTM2020)
__all__.append("AgVADTM2020")


class AgVAGravityFieldFunction(IAgVAGravityFieldFunction, IAgComponentInfo, IAgCloneable):
    """Gravity Field gravity propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAGravityFieldFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGravityFieldFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGravityFieldFunction._get_property(self, attrname) is not None: found_prop = IAgVAGravityFieldFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGravityFieldFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{C2C24055-1B50-4BD9-A7F7-0AA5FCE8969E}", AgVAGravityFieldFunction)
__all__.append("AgVAGravityFieldFunction")


class AgVAPointMassFunction(IAgVAPointMassFunction, IAgComponentInfo, IAgCloneable):
    """Point Mass function."""
    def __init__(self, sourceObject=None):
        IAgVAPointMassFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPointMassFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPointMassFunction._get_property(self, attrname) is not None: found_prop = IAgVAPointMassFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPointMassFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{E0A1592D-68C0-43DB-A338-DE22A591872A}", AgVAPointMassFunction)
__all__.append("AgVAPointMassFunction")


class AgVATwoBodyFunction(IAgVATwoBodyFunction, IAgComponentInfo, IAgCloneable):
    """Two Body gravity propagator function."""
    def __init__(self, sourceObject=None):
        IAgVATwoBodyFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVATwoBodyFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVATwoBodyFunction._get_property(self, attrname) is not None: found_prop = IAgVATwoBodyFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVATwoBodyFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{5C71D8C2-4A14-4D93-A8E5-5384AAB05E92}", AgVATwoBodyFunction)
__all__.append("AgVATwoBodyFunction")


class AgVAHPOPPluginFunction(IAgVAHPOPPluginFunction, IAgComponentInfo, IAgCloneable):
    """HPOP Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAHPOPPluginFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAHPOPPluginFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAHPOPPluginFunction._get_property(self, attrname) is not None: found_prop = IAgVAHPOPPluginFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAHPOPPluginFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{01BF5EA2-376F-49B2-B6DF-3017F30D8205}", AgVAHPOPPluginFunction)
__all__.append("AgVAHPOPPluginFunction")


class AgVAEOMFuncPluginFunction(IAgVAEOMFuncPluginFunction, IAgComponentInfo, IAgCloneable):
    """EOM Function Plugin propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAEOMFuncPluginFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEOMFuncPluginFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEOMFuncPluginFunction._get_property(self, attrname) is not None: found_prop = IAgVAEOMFuncPluginFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEOMFuncPluginFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{6FCCD724-B386-487C-A2AD-6153FF4756FF}", AgVAEOMFuncPluginFunction)
__all__.append("AgVAEOMFuncPluginFunction")


class AgVASRPAeroT20(IAgVASRPAeroT20, IAgComponentInfo, IAgCloneable):
    """AeroT20 SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPAeroT20.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPAeroT20._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPAeroT20._get_property(self, attrname) is not None: found_prop = IAgVASRPAeroT20._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPAeroT20.")
        
agcls.AgClassCatalog.add_catalog_entry("{6DB3E760-F774-45F3-A6E5-EA2A7E34416F}", AgVASRPAeroT20)
__all__.append("AgVASRPAeroT20")


class AgVASRPAeroT30(IAgVASRPAeroT30, IAgComponentInfo, IAgCloneable):
    """AeroT30 SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPAeroT30.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPAeroT30._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPAeroT30._get_property(self, attrname) is not None: found_prop = IAgVASRPAeroT30._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPAeroT30.")
        
agcls.AgClassCatalog.add_catalog_entry("{E4DF0601-9442-4649-AE24-516F20E819EF}", AgVASRPAeroT30)
__all__.append("AgVASRPAeroT30")


class AgVASRPGSPM04aIIA(IAgVASRPGSPM04aIIA, IAgComponentInfo, IAgCloneable):
    """GSPM04aIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aIIA.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPGSPM04aIIA._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aIIA._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aIIA._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aIIA.")
        
agcls.AgClassCatalog.add_catalog_entry("{F6767C08-2100-464C-B18A-0528243E37DC}", AgVASRPGSPM04aIIA)
__all__.append("AgVASRPGSPM04aIIA")


class AgVASRPGSPM04aIIR(IAgVASRPGSPM04aIIR, IAgComponentInfo, IAgCloneable):
    """GSPM04aIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aIIR.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPGSPM04aIIR._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aIIR._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aIIR._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aIIR.")
        
agcls.AgClassCatalog.add_catalog_entry("{FFF24BB0-8E3E-479A-957A-06719DF68A56}", AgVASRPGSPM04aIIR)
__all__.append("AgVASRPGSPM04aIIR")


class AgVASRPGSPM04aeIIA(IAgVASRPGSPM04aeIIA, IAgComponentInfo, IAgCloneable):
    """GSPM04aeIIA SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aeIIA.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPGSPM04aeIIA._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aeIIA._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aeIIA._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aeIIA.")
        
agcls.AgClassCatalog.add_catalog_entry("{82530B89-B383-4148-8606-BBA0EBA825CE}", AgVASRPGSPM04aeIIA)
__all__.append("AgVASRPGSPM04aeIIA")


class AgVASRPGSPM04aeIIR(IAgVASRPGSPM04aeIIR, IAgComponentInfo, IAgCloneable):
    """GSPM04aeIIR SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPGSPM04aeIIR.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPGSPM04aeIIR._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPGSPM04aeIIR._get_property(self, attrname) is not None: found_prop = IAgVASRPGSPM04aeIIR._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPGSPM04aeIIR.")
        
agcls.AgClassCatalog.add_catalog_entry("{17C9AD04-9981-4541-9515-59A597003348}", AgVASRPGSPM04aeIIR)
__all__.append("AgVASRPGSPM04aeIIR")


class AgVASRPSpherical(IAgVASRPSpherical, IAgComponentInfo, IAgCloneable):
    """Spherical SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPSpherical.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPSpherical._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPSpherical._get_property(self, attrname) is not None: found_prop = IAgVASRPSpherical._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPSpherical.")
        
agcls.AgClassCatalog.add_catalog_entry("{4318B037-C619-4722-A0F5-4FFDFA7D9474}", AgVASRPSpherical)
__all__.append("AgVASRPSpherical")


class AgVASRPNPlate(IAgVASRPNPlate, IAgComponentInfo, IAgCloneable):
    """NPlate SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPNPlate.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPNPlate._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPNPlate._get_property(self, attrname) is not None: found_prop = IAgVASRPNPlate._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPNPlate.")
        
agcls.AgClassCatalog.add_catalog_entry("{81962DC5-1A26-4077-AC39-E8E75145858A}", AgVASRPNPlate)
__all__.append("AgVASRPNPlate")


class AgVASRPTabAreaVec(IAgVASRPTabAreaVec, IAgComponentInfo, IAgCloneable):
    """Tabulated area vector SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPTabAreaVec.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPTabAreaVec._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPTabAreaVec._get_property(self, attrname) is not None: found_prop = IAgVASRPTabAreaVec._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPTabAreaVec.")
        
agcls.AgClassCatalog.add_catalog_entry("{77FAE0BD-36AF-4140-B62E-7B2865841152}", AgVASRPTabAreaVec)
__all__.append("AgVASRPTabAreaVec")


class AgVASRPVariableArea(IAgVASRPVariableArea, IAgComponentInfo, IAgCloneable):
    """Variable Area SRP propagator function."""
    def __init__(self, sourceObject=None):
        IAgVASRPVariableArea.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPVariableArea._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPVariableArea._get_property(self, attrname) is not None: found_prop = IAgVASRPVariableArea._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPVariableArea.")
        
agcls.AgClassCatalog.add_catalog_entry("{193838B2-807F-4E24-A05D-2E0BAB03B497}", AgVASRPVariableArea)
__all__.append("AgVASRPVariableArea")


class AgVAThirdBodyFunction(IAgVAThirdBodyFunction, IAgComponentInfo, IAgCloneable):
    """ThirdBody propagator function."""
    def __init__(self, sourceObject=None):
        IAgVAThirdBodyFunction.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAThirdBodyFunction._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThirdBodyFunction._get_property(self, attrname) is not None: found_prop = IAgVAThirdBodyFunction._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThirdBodyFunction.")
        
agcls.AgClassCatalog.add_catalog_entry("{7E7DF54F-A10B-4B57-9919-ACD123F69001}", AgVAThirdBodyFunction)
__all__.append("AgVAThirdBodyFunction")


class AgVADragModelPlugin(IAgVADragModelPlugin, IAgComponentInfo, IAgCloneable):
    """Drag Model Plugin."""
    def __init__(self, sourceObject=None):
        IAgVADragModelPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVADragModelPlugin._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVADragModelPlugin._get_property(self, attrname) is not None: found_prop = IAgVADragModelPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVADragModelPlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{C48CB2A8-A6E1-4E7B-ABB2-179D1E06D541}", AgVADragModelPlugin)
__all__.append("AgVADragModelPlugin")


class AgVASRPReflectionPlugin(IAgVASRPReflectionPlugin, IAgComponentInfo, IAgCloneable):
    """SRP Reflection Plugin."""
    def __init__(self, sourceObject=None):
        IAgVASRPReflectionPlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASRPReflectionPlugin._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASRPReflectionPlugin._get_property(self, attrname) is not None: found_prop = IAgVASRPReflectionPlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASRPReflectionPlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{926296A2-EA6B-4FC8-A75C-15B9F24B85E5}", AgVASRPReflectionPlugin)
__all__.append("AgVASRPReflectionPlugin")


class AgVAEngineConstAcc(IAgVAEngineConstAcc, IAgComponentInfo, IAgCloneable):
    """Constant Acceleration engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineConstAcc.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineConstAcc._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineConstAcc._get_property(self, attrname) is not None: found_prop = IAgVAEngineConstAcc._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineConstAcc.")
        
agcls.AgClassCatalog.add_catalog_entry("{359488A0-BCA3-4739-8614-E99B675553AF}", AgVAEngineConstAcc)
__all__.append("AgVAEngineConstAcc")


class AgVAEngineConstant(IAgVAEngineConstant, IAgComponentInfo, IAgCloneable):
    """Constant Thrust engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineConstant.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineConstant._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineConstant._get_property(self, attrname) is not None: found_prop = IAgVAEngineConstant._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineConstant.")
        
agcls.AgClassCatalog.add_catalog_entry("{31105070-4B5A-4870-A45B-6F6CF13042DD}", AgVAEngineConstant)
__all__.append("AgVAEngineConstant")


class AgVAEngineIon(IAgVAEngineIon, IAgComponentInfo, IAgCloneable):
    """Ion Engine engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineIon.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineIon._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineIon._get_property(self, attrname) is not None: found_prop = IAgVAEngineIon._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineIon.")
        
agcls.AgClassCatalog.add_catalog_entry("{6AD7EC4F-2E59-4D7B-9FC2-9022CB8540B6}", AgVAEngineIon)
__all__.append("AgVAEngineIon")


class AgVAEngineThrottleTable(IAgVAEngineThrottleTable, IAgComponentInfo, IAgCloneable):
    """Throttle Table engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineThrottleTable.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineThrottleTable._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineThrottleTable._get_property(self, attrname) is not None: found_prop = IAgVAEngineThrottleTable._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineThrottleTable.")
        
agcls.AgClassCatalog.add_catalog_entry("{FB947497-4C0D-4F39-9942-31A9A0D3025F}", AgVAEngineThrottleTable)
__all__.append("AgVAEngineThrottleTable")


class AgVAEngineCustom(IAgVAEngineCustom, IAgComponentInfo, IAgCloneable):
    """Custom engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineCustom.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineCustom._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineCustom._get_property(self, attrname) is not None: found_prop = IAgVAEngineCustom._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineCustom.")
        
agcls.AgClassCatalog.add_catalog_entry("{5C0367CE-254E-4BDB-8056-ED27D584258E}", AgVAEngineCustom)
__all__.append("AgVAEngineCustom")


class AgVAEnginePlugin(IAgVAEnginePlugin, IAgComponentInfo, IAgCloneable):
    """Plugin engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEnginePlugin.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEnginePlugin._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEnginePlugin._get_property(self, attrname) is not None: found_prop = IAgVAEnginePlugin._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEnginePlugin.")
        
agcls.AgClassCatalog.add_catalog_entry("{D7755FC3-1A9F-4DB5-B735-030256F4AE24}", AgVAEnginePlugin)
__all__.append("AgVAEnginePlugin")


class AgVAEngineModelPoly(IAgVAEngineModelPoly, IAgComponentInfo, IAgCloneable):
    """Polynomial Thrust and Isp engine model."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelPoly.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineModelPoly._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelPoly._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelPoly._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelPoly.")
        
agcls.AgClassCatalog.add_catalog_entry("{0D23F634-A8B8-4376-99AE-F8287C267EDC}", AgVAEngineModelPoly)
__all__.append("AgVAEngineModelPoly")


class AgVAEngineModelThrustCoefficients(IAgVAEngineModelThrustCoefficients):
    """Engine Model Thrust Coefficients."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelThrustCoefficients.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineModelThrustCoefficients._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelThrustCoefficients._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelThrustCoefficients._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelThrustCoefficients.")
        
agcls.AgClassCatalog.add_catalog_entry("{1B8E6E69-F100-4A4B-A24A-FFC3C8B0AF70}", AgVAEngineModelThrustCoefficients)
__all__.append("AgVAEngineModelThrustCoefficients")


class AgVAEngineModelIspCoefficients(IAgVAEngineModelIspCoefficients):
    """Engine Model Isp Coefficients."""
    def __init__(self, sourceObject=None):
        IAgVAEngineModelIspCoefficients.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineModelIspCoefficients._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineModelIspCoefficients._get_property(self, attrname) is not None: found_prop = IAgVAEngineModelIspCoefficients._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineModelIspCoefficients.")
        
agcls.AgClassCatalog.add_catalog_entry("{279B11AE-A5F8-4548-9401-95981B21C61C}", AgVAEngineModelIspCoefficients)
__all__.append("AgVAEngineModelIspCoefficients")


class AgVAEngineDefinition(IAgVAEngineDefinition):
    """Engine definition."""
    def __init__(self, sourceObject=None):
        IAgVAEngineDefinition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAEngineDefinition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAEngineDefinition._get_property(self, attrname) is not None: found_prop = IAgVAEngineDefinition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAEngineDefinition.")
        
agcls.AgClassCatalog.add_catalog_entry("{F87429C7-51DC-4AD8-8481-468C14F38AB4}", AgVAEngineDefinition)
__all__.append("AgVAEngineDefinition")


class AgVAThruster(IAgVAThruster):
    """Thruster definition."""
    def __init__(self, sourceObject=None):
        IAgVAThruster.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAThruster._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThruster._get_property(self, attrname) is not None: found_prop = IAgVAThruster._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThruster.")
        
agcls.AgClassCatalog.add_catalog_entry("{749FEA15-5BD9-4466-BADF-E917D640E6D8}", AgVAThruster)
__all__.append("AgVAThruster")


class AgVAThrusterSetCollection(IAgVAThrusterSetCollection):
    """Thruster Set Collection."""
    def __init__(self, sourceObject=None):
        IAgVAThrusterSetCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAThrusterSetCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThrusterSetCollection._get_property(self, attrname) is not None: found_prop = IAgVAThrusterSetCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThrusterSetCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{8C1B379E-8092-48BE-A401-651464239B27}", AgVAThrusterSetCollection)
__all__.append("AgVAThrusterSetCollection")


class AgVAThrusterSet(IAgVAThrusterSet, IAgComponentInfo, IAgCloneable):
    """Thruster Set."""
    def __init__(self, sourceObject=None):
        IAgVAThrusterSet.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAThrusterSet._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAThrusterSet._get_property(self, attrname) is not None: found_prop = IAgVAThrusterSet._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAThrusterSet.")
        
agcls.AgClassCatalog.add_catalog_entry("{00FB61C4-5A63-439B-A030-171588D7CFED}", AgVAThrusterSet)
__all__.append("AgVAThrusterSet")


class AgVAAsTriggerCondition(IAgVAAsTriggerCondition, IAgComponentInfo, IAgCloneable):
    """Constraint."""
    def __init__(self, sourceObject=None):
        IAgVAAsTriggerCondition.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAAsTriggerCondition._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAAsTriggerCondition._get_property(self, attrname) is not None: found_prop = IAgVAAsTriggerCondition._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAAsTriggerCondition.")
        
agcls.AgClassCatalog.add_catalog_entry("{32E146B0-C168-4BD3-A2D9-ECF7096687E5}", AgVAAsTriggerCondition)
__all__.append("AgVAAsTriggerCondition")


class AgVACustomFunctionScriptEngine(IAgVACustomFunctionScriptEngine, IAgComponentInfo, IAgCloneable):
    """Custom Function Script Engine."""
    def __init__(self, sourceObject=None):
        IAgVACustomFunctionScriptEngine.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACustomFunctionScriptEngine._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACustomFunctionScriptEngine._get_property(self, attrname) is not None: found_prop = IAgVACustomFunctionScriptEngine._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACustomFunctionScriptEngine.")
        
agcls.AgClassCatalog.add_catalog_entry("{F4CD79CC-CFAA-4EEE-A01A-0F846D6F6674}", AgVACustomFunctionScriptEngine)
__all__.append("AgVACustomFunctionScriptEngine")


class AgVANumericalPropagatorWrapper(IAgVANumericalPropagatorWrapper, IAgComponentInfo, IAgCloneable):
    """Numerical Propagator."""
    def __init__(self, sourceObject=None):
        IAgVANumericalPropagatorWrapper.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVANumericalPropagatorWrapper._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANumericalPropagatorWrapper._get_property(self, attrname) is not None: found_prop = IAgVANumericalPropagatorWrapper._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANumericalPropagatorWrapper.")
        
agcls.AgClassCatalog.add_catalog_entry("{6F733B37-D5A3-4D83-844B-34A35BA937CC}", AgVANumericalPropagatorWrapper)
__all__.append("AgVANumericalPropagatorWrapper")


class AgVANumericalPropagatorWrapperCR3BP(IAgVANumericalPropagatorWrapperCR3BP, IAgComponentInfo, IAgCloneable):
    """Numerical CR3BP Propagator."""
    def __init__(self, sourceObject=None):
        IAgVANumericalPropagatorWrapperCR3BP.__init__(self, sourceObject)
        IAgComponentInfo.__init__(self, sourceObject)
        IAgCloneable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVANumericalPropagatorWrapperCR3BP._private_init(self, pUnk)
        IAgComponentInfo._private_init(self, pUnk)
        IAgCloneable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVANumericalPropagatorWrapperCR3BP._get_property(self, attrname) is not None: found_prop = IAgVANumericalPropagatorWrapperCR3BP._get_property(self, attrname)
        if IAgComponentInfo._get_property(self, attrname) is not None: found_prop = IAgComponentInfo._get_property(self, attrname)
        if IAgCloneable._get_property(self, attrname) is not None: found_prop = IAgCloneable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVANumericalPropagatorWrapperCR3BP.")
        
agcls.AgClassCatalog.add_catalog_entry("{C4823BEE-E898-47D3-8C29-9CCE6DB490FE}", AgVANumericalPropagatorWrapperCR3BP)
__all__.append("AgVANumericalPropagatorWrapperCR3BP")


class AgVAPropagatorFunctionCollection(IAgVAPropagatorFunctionCollection):
    """Propagator Function Collection."""
    def __init__(self, sourceObject=None):
        IAgVAPropagatorFunctionCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAPropagatorFunctionCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAPropagatorFunctionCollection._get_property(self, attrname) is not None: found_prop = IAgVAPropagatorFunctionCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAPropagatorFunctionCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{41440862-0DA5-41B0-9A84-073FBC64D47A}", AgVAPropagatorFunctionCollection)
__all__.append("AgVAPropagatorFunctionCollection")


class AgVABulirschStoerIntegrator(IAgVABulirschStoerIntegrator, IAgVANumericalIntegrator):
    """Bulirsch-Stoer Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVABulirschStoerIntegrator.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVABulirschStoerIntegrator._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVABulirschStoerIntegrator._get_property(self, attrname) is not None: found_prop = IAgVABulirschStoerIntegrator._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVABulirschStoerIntegrator.")
        
agcls.AgClassCatalog.add_catalog_entry("{B98456C5-48DE-41AB-867B-FD713A325418}", AgVABulirschStoerIntegrator)
__all__.append("AgVABulirschStoerIntegrator")


class AgVAGaussJacksonIntegrator(IAgVAGaussJacksonIntegrator, IAgVANumericalIntegrator):
    """Gauss-Jackson Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVAGaussJacksonIntegrator.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGaussJacksonIntegrator._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGaussJacksonIntegrator._get_property(self, attrname) is not None: found_prop = IAgVAGaussJacksonIntegrator._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGaussJacksonIntegrator.")
        
agcls.AgClassCatalog.add_catalog_entry("{034F55EC-4D6E-4C22-9811-C3DEBC83ABD9}", AgVAGaussJacksonIntegrator)
__all__.append("AgVAGaussJacksonIntegrator")


class AgVARK2nd3rd(IAgVARK2nd3rd, IAgVANumericalIntegrator):
    """RK2nd3rd Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK2nd3rd.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARK2nd3rd._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK2nd3rd._get_property(self, attrname) is not None: found_prop = IAgVARK2nd3rd._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK2nd3rd.")
        
agcls.AgClassCatalog.add_catalog_entry("{F3511C10-B4F1-4592-81AC-41D387A9589B}", AgVARK2nd3rd)
__all__.append("AgVARK2nd3rd")


class AgVARK4th(IAgVARK4th, IAgVANumericalIntegrator):
    """RK4th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARK4th._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4th._get_property(self, attrname) is not None: found_prop = IAgVARK4th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4th.")
        
agcls.AgClassCatalog.add_catalog_entry("{019C798B-5AB2-42F1-847E-AC64438C8341}", AgVARK4th)
__all__.append("AgVARK4th")


class AgVARK4th5th(IAgVARK4th5th, IAgVANumericalIntegrator):
    """RK4th5th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4th5th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARK4th5th._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4th5th._get_property(self, attrname) is not None: found_prop = IAgVARK4th5th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4th5th.")
        
agcls.AgClassCatalog.add_catalog_entry("{25B6537D-FF33-45E7-A314-F6E4EFA34CD5}", AgVARK4th5th)
__all__.append("AgVARK4th5th")


class AgVARK4thAdapt(IAgVARK4thAdapt, IAgVANumericalIntegrator):
    """RK4thAdapt Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARK4thAdapt.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARK4thAdapt._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARK4thAdapt._get_property(self, attrname) is not None: found_prop = IAgVARK4thAdapt._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARK4thAdapt.")
        
agcls.AgClassCatalog.add_catalog_entry("{03F69912-84E6-4209-8AF5-FD2C4B009C44}", AgVARK4thAdapt)
__all__.append("AgVARK4thAdapt")


class AgVARKF7th8th(IAgVARKF7th8th, IAgVANumericalIntegrator):
    """RKF7th8th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARKF7th8th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARKF7th8th._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARKF7th8th._get_property(self, attrname) is not None: found_prop = IAgVARKF7th8th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARKF7th8th.")
        
agcls.AgClassCatalog.add_catalog_entry("{78A98F0E-B687-4D64-B0F6-5608105504CC}", AgVARKF7th8th)
__all__.append("AgVARKF7th8th")


class AgVARKV8th9th(IAgVARKV8th9th, IAgVANumericalIntegrator):
    """RKV8th9th Numerical Integrator."""
    def __init__(self, sourceObject=None):
        IAgVARKV8th9th.__init__(self, sourceObject)
        IAgVANumericalIntegrator.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVARKV8th9th._private_init(self, pUnk)
        IAgVANumericalIntegrator._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVARKV8th9th._get_property(self, attrname) is not None: found_prop = IAgVARKV8th9th._get_property(self, attrname)
        if IAgVANumericalIntegrator._get_property(self, attrname) is not None: found_prop = IAgVANumericalIntegrator._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVARKV8th9th.")
        
agcls.AgClassCatalog.add_catalog_entry("{26857B4B-40C9-4EC2-B5F7-AFEB6103128D}", AgVARKV8th9th)
__all__.append("AgVARKV8th9th")


class AgVAScriptingTool(IAgVAScriptingTool, IAgRuntimeTypeInfoProvider):
    """Scripting Tool."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingTool.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingTool._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingTool._get_property(self, attrname) is not None: found_prop = IAgVAScriptingTool._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingTool.")
        
agcls.AgClassCatalog.add_catalog_entry("{1FB508B7-F4D9-4ABF-8EA8-B44AECAEE9C0}", AgVAScriptingTool)
__all__.append("AgVAScriptingTool")


class AgVAScriptingSegmentCollection(IAgVAScriptingSegmentCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Segment Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingSegmentCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingSegmentCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingSegmentCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingSegmentCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingSegmentCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{2D397364-3CD3-4FC2-8B11-D74D7A348687}", AgVAScriptingSegmentCollection)
__all__.append("AgVAScriptingSegmentCollection")


class AgVAScriptingSegment(IAgVAScriptingSegment, IAgRuntimeTypeInfoProvider):
    """Scripting Segment."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingSegment.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingSegment._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingSegment._get_property(self, attrname) is not None: found_prop = IAgVAScriptingSegment._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingSegment.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD68184D-BA0A-41EC-B03E-E63514058625}", AgVAScriptingSegment)
__all__.append("AgVAScriptingSegment")


class AgVAScriptingParameterCollection(IAgVAScriptingParameterCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingParameterCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{F7B45439-8E25-43DE-882F-844F8645F015}", AgVAScriptingParameterCollection)
__all__.append("AgVAScriptingParameterCollection")


class AgVAScriptingParameter(IAgVAScriptingParameter, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameter.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingParameter._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameter._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameter._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameter.")
        
agcls.AgClassCatalog.add_catalog_entry("{92BFA902-938E-48E0-B402-C6DEE9169BEE}", AgVAScriptingParameter)
__all__.append("AgVAScriptingParameter")


class AgVAScriptingCalcObject(IAgVAScriptingCalcObject):
    """Calc Object."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingCalcObject.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingCalcObject._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingCalcObject._get_property(self, attrname) is not None: found_prop = IAgVAScriptingCalcObject._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingCalcObject.")
        
agcls.AgClassCatalog.add_catalog_entry("{D9895635-D8A5-497F-9C4D-E0A18AF49983}", AgVAScriptingCalcObject)
__all__.append("AgVAScriptingCalcObject")


class AgVAScriptingCalcObjectCollection(IAgVAScriptingCalcObjectCollection):
    """Calc Object Collection."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingCalcObjectCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingCalcObjectCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingCalcObjectCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingCalcObjectCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingCalcObjectCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{9FC08736-F254-451E-9292-C003D5601780}", AgVAScriptingCalcObjectCollection)
__all__.append("AgVAScriptingCalcObjectCollection")


class AgVAUserVariableDefinition(IAgVAUserVariableDefinition):
    """User Variable Definition"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableDefinition.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariableDefinition._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableDefinition._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableDefinition._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableDefinition.")
        
agcls.AgClassCatalog.add_catalog_entry("{659E4C4D-E224-47D7-A899-C9B5DCF7241F}", AgVAUserVariableDefinition)
__all__.append("AgVAUserVariableDefinition")


class AgVAUserVariable(IAgVAUserVariable):
    """User Variable"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariable.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariable._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariable._get_property(self, attrname) is not None: found_prop = IAgVAUserVariable._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariable.")
        
agcls.AgClassCatalog.add_catalog_entry("{437599F8-0E00-4984-81CA-B450200257BC}", AgVAUserVariable)
__all__.append("AgVAUserVariable")


class AgVAUserVariableUpdate(IAgVAUserVariableUpdate):
    """User Variable Update"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableUpdate.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariableUpdate._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableUpdate._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableUpdate._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableUpdate.")
        
agcls.AgClassCatalog.add_catalog_entry("{EB1FC76A-82D7-43C1-919B-05F53CEFC2ED}", AgVAUserVariableUpdate)
__all__.append("AgVAUserVariableUpdate")


class AgVAUserVariableDefinitionCollection(IAgVAUserVariableDefinitionCollection):
    """User Variable Definition Collection."""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableDefinitionCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariableDefinitionCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableDefinitionCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableDefinitionCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableDefinitionCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{E1D09185-E7EC-4E3F-BFEF-52AC92FEEC75}", AgVAUserVariableDefinitionCollection)
__all__.append("AgVAUserVariableDefinitionCollection")


class AgVAUserVariableCollection(IAgVAUserVariableCollection):
    """User Variable Initial Value Collection."""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariableCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{801C61FA-C0FE-4BFD-8001-3335211F7328}", AgVAUserVariableCollection)
__all__.append("AgVAUserVariableCollection")


class AgVAUserVariableUpdateCollection(IAgVAUserVariableUpdateCollection):
    """User Variable Update Collection"""
    def __init__(self, sourceObject=None):
        IAgVAUserVariableUpdateCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAUserVariableUpdateCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAUserVariableUpdateCollection._get_property(self, attrname) is not None: found_prop = IAgVAUserVariableUpdateCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAUserVariableUpdateCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{FD7D6D39-4E5B-41E1-84E2-CBCAE8ECCF41}", AgVAUserVariableUpdateCollection)
__all__.append("AgVAUserVariableUpdateCollection")


class AgVACalculationGraphCollection(IAgVACalculationGraphCollection):
    """Calculation Graph Collection."""
    def __init__(self, sourceObject=None):
        IAgVACalculationGraphCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVACalculationGraphCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVACalculationGraphCollection._get_property(self, attrname) is not None: found_prop = IAgVACalculationGraphCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVACalculationGraphCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{40E20BE7-7961-468B-B396-8F6E980BE49E}", AgVACalculationGraphCollection)
__all__.append("AgVACalculationGraphCollection")


class AgVAScriptingParameterEnumerationChoice(IAgVAScriptingParameterEnumerationChoice, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice."""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterEnumerationChoice.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingParameterEnumerationChoice._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterEnumerationChoice._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterEnumerationChoice._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterEnumerationChoice.")
        
agcls.AgClassCatalog.add_catalog_entry("{82A982C2-A2AD-4FD8-AB46-A54866F56AEA}", AgVAScriptingParameterEnumerationChoice)
__all__.append("AgVAScriptingParameterEnumerationChoice")


class AgVAScriptingParameterEnumerationChoiceCollection(IAgVAScriptingParameterEnumerationChoiceCollection, IAgRuntimeTypeInfoProvider):
    """Scripting Parameter Enumeration Choice Collection"""
    def __init__(self, sourceObject=None):
        IAgVAScriptingParameterEnumerationChoiceCollection.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAScriptingParameterEnumerationChoiceCollection._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAScriptingParameterEnumerationChoiceCollection._get_property(self, attrname) is not None: found_prop = IAgVAScriptingParameterEnumerationChoiceCollection._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAScriptingParameterEnumerationChoiceCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{E4F13182-12CE-420B-AC3A-8530CC46BE35}", AgVAScriptingParameterEnumerationChoiceCollection)
__all__.append("AgVAScriptingParameterEnumerationChoiceCollection")


class AgVAProfileSNOPTOptimizer(IAgVAProfileSNOPTOptimizer, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAProfileSNOPTOptimizer.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileSNOPTOptimizer._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileSNOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAProfileSNOPTOptimizer._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileSNOPTOptimizer.")
        
agcls.AgClassCatalog.add_catalog_entry("{6F7AFA8D-FC45-4955-BEFB-BDE94553C02E}", AgVAProfileSNOPTOptimizer)
__all__.append("AgVAProfileSNOPTOptimizer")


class AgVASNOPTControl(IAgVASNOPTControl):
    """Control parameters for SNOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVASNOPTControl.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASNOPTControl._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTControl._get_property(self, attrname) is not None: found_prop = IAgVASNOPTControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{5CD8E3EB-8BCA-4D53-A361-484285E62C96}", AgVASNOPTControl)
__all__.append("AgVASNOPTControl")


class AgVASNOPTResult(IAgVASNOPTResult):
    """Properties for objecvtive and constraints of a SNOPT profile."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASNOPTResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTResult._get_property(self, attrname) is not None: found_prop = IAgVASNOPTResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{F739575C-EF90-4B58-917A-BD0C12C95055}", AgVASNOPTResult)
__all__.append("AgVASNOPTResult")


class AgVASNOPTControlCollection(IAgVASNOPTControlCollection):
    """Properties for the list of SNOPT control parameters."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASNOPTControlCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTControlCollection._get_property(self, attrname) is not None: found_prop = IAgVASNOPTControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{99EECA52-DE6C-4E2C-805E-725A3A009E4B}", AgVASNOPTControlCollection)
__all__.append("AgVASNOPTControlCollection")


class AgVASNOPTResultCollection(IAgVASNOPTResultCollection):
    """SNOPT result collection."""
    def __init__(self, sourceObject=None):
        IAgVASNOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVASNOPTResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVASNOPTResultCollection._get_property(self, attrname) is not None: found_prop = IAgVASNOPTResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVASNOPTResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{D27CBF33-3EC4-40A0-A138-5F41720B0B08}", AgVASNOPTResultCollection)
__all__.append("AgVASNOPTResultCollection")


class AgVAProfileIPOPTOptimizer(IAgVAProfileIPOPTOptimizer, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAProfileIPOPTOptimizer.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileIPOPTOptimizer._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileIPOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAProfileIPOPTOptimizer._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileIPOPTOptimizer.")
        
agcls.AgClassCatalog.add_catalog_entry("{59AB8108-2D2E-4D46-8B96-F1F43175CC77}", AgVAProfileIPOPTOptimizer)
__all__.append("AgVAProfileIPOPTOptimizer")


class AgVAIPOPTControl(IAgVAIPOPTControl):
    """Control parameters for IPOPT optimizer profile"""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTControl.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAIPOPTControl._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTControl._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{F7FF56DA-D284-4B28-88EC-BEE49D7E0CFD}", AgVAIPOPTControl)
__all__.append("AgVAIPOPTControl")


class AgVAIPOPTResult(IAgVAIPOPTResult):
    """Properties for objecvtive and constraints of a IPOPT profile."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAIPOPTResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTResult._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{DCFD15D6-9ACF-4FCB-B968-CB74B5E95B33}", AgVAIPOPTResult)
__all__.append("AgVAIPOPTResult")


class AgVAIPOPTControlCollection(IAgVAIPOPTControlCollection):
    """Properties for the list of IPOPT control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTControlCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAIPOPTControlCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{522C81BC-6FFF-40FE-90C7-E4368FD1548D}", AgVAIPOPTControlCollection)
__all__.append("AgVAIPOPTControlCollection")


class AgVAIPOPTResultCollection(IAgVAIPOPTResultCollection):
    """IPOPT result collection."""
    def __init__(self, sourceObject=None):
        IAgVAIPOPTResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAIPOPTResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAIPOPTResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAIPOPTResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAIPOPTResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{4A10E1B9-87A1-4370-AAD8-F7856B099B5C}", AgVAIPOPTResultCollection)
__all__.append("AgVAIPOPTResultCollection")


class AgVAManeuverOptimalFinite(IAgVAManeuverOptimalFinite, IAgVAManeuver, IAgRuntimeTypeInfoProvider):
    """The Optimal Finite Maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFinite.__init__(self, sourceObject)
        IAgVAManeuver.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFinite._private_init(self, pUnk)
        IAgVAManeuver._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFinite._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFinite._get_property(self, attrname)
        if IAgVAManeuver._get_property(self, attrname) is not None: found_prop = IAgVAManeuver._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFinite.")
        
agcls.AgClassCatalog.add_catalog_entry("{6666593F-246D-4263-A0E4-78EFD0C04C7B}", AgVAManeuverOptimalFinite)
__all__.append("AgVAManeuverOptimalFinite")


class AgVAManeuverOptimalFiniteSNOPTOptimizer(IAgVAManeuverOptimalFiniteSNOPTOptimizer):
    """Properties of SNOPT Optimizer options for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSNOPTOptimizer.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteSNOPTOptimizer._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSNOPTOptimizer._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSNOPTOptimizer.")
        
agcls.AgClassCatalog.add_catalog_entry("{54E41ADE-C090-4C19-8B09-94F5030260C6}", AgVAManeuverOptimalFiniteSNOPTOptimizer)
__all__.append("AgVAManeuverOptimalFiniteSNOPTOptimizer")


class AgVAManeuverOptimalFiniteInitialBoundaryConditions(IAgVAManeuverOptimalFiniteInitialBoundaryConditions):
    """Properties of initial boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteInitialBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteInitialBoundaryConditions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteInitialBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteInitialBoundaryConditions.")
        
agcls.AgClassCatalog.add_catalog_entry("{3A8835CC-D4EF-4AFE-B198-FC4992E17D6B}", AgVAManeuverOptimalFiniteInitialBoundaryConditions)
__all__.append("AgVAManeuverOptimalFiniteInitialBoundaryConditions")


class AgVAManeuverOptimalFiniteFinalBoundaryConditions(IAgVAManeuverOptimalFiniteFinalBoundaryConditions):
    """Properties of final boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteFinalBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteFinalBoundaryConditions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteFinalBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteFinalBoundaryConditions.")
        
agcls.AgClassCatalog.add_catalog_entry("{FF880BEA-2B6E-40ED-B7BC-85ED2367FC9C}", AgVAManeuverOptimalFiniteFinalBoundaryConditions)
__all__.append("AgVAManeuverOptimalFiniteFinalBoundaryConditions")


class AgVAManeuverOptimalFinitePathBoundaryConditions(IAgVAManeuverOptimalFinitePathBoundaryConditions):
    """Properties of path boundary conditions for optimal finite maneuver."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFinitePathBoundaryConditions.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFinitePathBoundaryConditions._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFinitePathBoundaryConditions._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFinitePathBoundaryConditions._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFinitePathBoundaryConditions.")
        
agcls.AgClassCatalog.add_catalog_entry("{C8E16C04-1A5A-43F9-B770-A67666512F8A}", AgVAManeuverOptimalFinitePathBoundaryConditions)
__all__.append("AgVAManeuverOptimalFinitePathBoundaryConditions")


class AgVAManeuverOptimalFiniteSteeringNodeElement(IAgVAManeuverOptimalFiniteSteeringNodeElement):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSteeringNodeElement.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteSteeringNodeElement._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSteeringNodeElement._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSteeringNodeElement._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSteeringNodeElement.")
        
agcls.AgClassCatalog.add_catalog_entry("{AE276E86-B321-4F0D-B657-852143B3F3EE}", AgVAManeuverOptimalFiniteSteeringNodeElement)
__all__.append("AgVAManeuverOptimalFiniteSteeringNodeElement")


class AgVAManeuverOptimalFiniteSteeringNodeCollection(IAgVAManeuverOptimalFiniteSteeringNodeCollection):
    """Steering/nodes collection."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteSteeringNodeCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteSteeringNodeCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteSteeringNodeCollection._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteSteeringNodeCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteSteeringNodeCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{23249624-8EFC-4AD8-9E67-A564A49D2D67}", AgVAManeuverOptimalFiniteSteeringNodeCollection)
__all__.append("AgVAManeuverOptimalFiniteSteeringNodeCollection")


class AgVAManeuverOptimalFiniteBounds(IAgVAManeuverOptimalFiniteBounds):
    """The elements of the steering node."""
    def __init__(self, sourceObject=None):
        IAgVAManeuverOptimalFiniteBounds.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAManeuverOptimalFiniteBounds._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAManeuverOptimalFiniteBounds._get_property(self, attrname) is not None: found_prop = IAgVAManeuverOptimalFiniteBounds._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAManeuverOptimalFiniteBounds.")
        
agcls.AgClassCatalog.add_catalog_entry("{0F56E447-2391-476B-863C-8B8596486F03}", AgVAManeuverOptimalFiniteBounds)
__all__.append("AgVAManeuverOptimalFiniteBounds")


class AgVAProfileLambertProfile(IAgVAProfileLambertProfile, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileLambertProfile.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileLambertProfile._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileLambertProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfileLambertProfile._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileLambertProfile.")
        
agcls.AgClassCatalog.add_catalog_entry("{3FA3162E-C38E-46D8-8F7C-B8421110EEB2}", AgVAProfileLambertProfile)
__all__.append("AgVAProfileLambertProfile")


class AgVAProfileLambertSearchProfile(IAgVAProfileLambertSearchProfile, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Lambert profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileLambertSearchProfile.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileLambertSearchProfile._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileLambertSearchProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfileLambertSearchProfile._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileLambertSearchProfile.")
        
agcls.AgClassCatalog.add_catalog_entry("{9E98EFA2-5913-4BFA-8293-C294B80DFD4E}", AgVAProfileLambertSearchProfile)
__all__.append("AgVAProfileLambertSearchProfile")


class AgVAProfileGoldenSection(IAgVAProfileGoldenSection, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Golden Section profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileGoldenSection.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileGoldenSection._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileGoldenSection._get_property(self, attrname) is not None: found_prop = IAgVAProfileGoldenSection._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileGoldenSection.")
        
agcls.AgClassCatalog.add_catalog_entry("{8A0E8056-D72B-4C82-85F0-945A96AC4E2E}", AgVAProfileGoldenSection)
__all__.append("AgVAProfileGoldenSection")


class AgVAGoldenSectionControlCollection(IAgVAGoldenSectionControlCollection):
    """Properties for the list of Golden Section control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionControlCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGoldenSectionControlCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{5E3FCD6D-E592-4610-9831-87D9ABD81889}", AgVAGoldenSectionControlCollection)
__all__.append("AgVAGoldenSectionControlCollection")


class AgVAGoldenSectionControl(IAgVAGoldenSectionControl):
    """Control parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionControl.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGoldenSectionControl._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionControl._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{00EBADDE-16F1-4FAC-8014-6952CBF0832E}", AgVAGoldenSectionControl)
__all__.append("AgVAGoldenSectionControl")


class AgVAGoldenSectionResultCollection(IAgVAGoldenSectionResultCollection):
    """Properties for the list of Golden Section result parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGoldenSectionResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{72ADF8B9-9BE8-4112-B295-30B86DAF11F3}", AgVAGoldenSectionResultCollection)
__all__.append("AgVAGoldenSectionResultCollection")


class AgVAGoldenSectionResult(IAgVAGoldenSectionResult):
    """Result parameters for Golden Section profile"""
    def __init__(self, sourceObject=None):
        IAgVAGoldenSectionResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGoldenSectionResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGoldenSectionResult._get_property(self, attrname) is not None: found_prop = IAgVAGoldenSectionResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGoldenSectionResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{A6F34FB1-1740-4EBB-B4FB-E6BB0B9EE427}", AgVAGoldenSectionResult)
__all__.append("AgVAGoldenSectionResult")


class AgVAProfileGridSearch(IAgVAProfileGridSearch, IAgVAProfile, IAgRuntimeTypeInfoProvider):
    """The Grid Search profile."""
    def __init__(self, sourceObject=None):
        IAgVAProfileGridSearch.__init__(self, sourceObject)
        IAgVAProfile.__init__(self, sourceObject)
        IAgRuntimeTypeInfoProvider.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAProfileGridSearch._private_init(self, pUnk)
        IAgVAProfile._private_init(self, pUnk)
        IAgRuntimeTypeInfoProvider._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAProfileGridSearch._get_property(self, attrname) is not None: found_prop = IAgVAProfileGridSearch._get_property(self, attrname)
        if IAgVAProfile._get_property(self, attrname) is not None: found_prop = IAgVAProfile._get_property(self, attrname)
        if IAgRuntimeTypeInfoProvider._get_property(self, attrname) is not None: found_prop = IAgRuntimeTypeInfoProvider._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAProfileGridSearch.")
        
agcls.AgClassCatalog.add_catalog_entry("{7C28EA98-702E-4CA9-8DE6-C49CEC2932E0}", AgVAProfileGridSearch)
__all__.append("AgVAProfileGridSearch")


class AgVAGridSearchControlCollection(IAgVAGridSearchControlCollection):
    """Properties for the list of Grid Search control parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchControlCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGridSearchControlCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchControlCollection._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchControlCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchControlCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{0A1300B1-D35A-46C5-BE62-3AFB811157C5}", AgVAGridSearchControlCollection)
__all__.append("AgVAGridSearchControlCollection")


class AgVAGridSearchControl(IAgVAGridSearchControl):
    """Control parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchControl.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGridSearchControl._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchControl._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchControl._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchControl.")
        
agcls.AgClassCatalog.add_catalog_entry("{DA10881F-2D20-41DF-88DD-F49F9A41BA76}", AgVAGridSearchControl)
__all__.append("AgVAGridSearchControl")


class AgVAGridSearchResultCollection(IAgVAGridSearchResultCollection):
    """Properties for the list of Grid Search result parameters."""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchResultCollection.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGridSearchResultCollection._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchResultCollection._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchResultCollection._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchResultCollection.")
        
agcls.AgClassCatalog.add_catalog_entry("{E189AD76-0BE9-4922-8D76-3E28FAE74507}", AgVAGridSearchResultCollection)
__all__.append("AgVAGridSearchResultCollection")


class AgVAGridSearchResult(IAgVAGridSearchResult):
    """Result parameters for Grid Search profile"""
    def __init__(self, sourceObject=None):
        IAgVAGridSearchResult.__init__(self, sourceObject)
    def _private_init(self, pUnk:IUnknown):
        self.__dict__["_pUnk"] = pUnk
        IAgVAGridSearchResult._private_init(self, pUnk)
    def __eq__(self, other):
        """Checks equality of the underlying STK references."""
        return agcls.compare_com_objects(self, other)
    def __setattr__(self, attrname, value):
        found_prop = None
        if IAgVAGridSearchResult._get_property(self, attrname) is not None: found_prop = IAgVAGridSearchResult._get_property(self, attrname)
        if found_prop is not None:
            found_prop.__set__(self, value)
        else:
            raise STKAttributeError(attrname + " is not a recognized attribute in AgVAGridSearchResult.")
        
agcls.AgClassCatalog.add_catalog_entry("{B37527F8-1781-4484-985E-4F2BE2E8810A}", AgVAGridSearchResult)
__all__.append("AgVAGridSearchResult")



################################################################################
#          Copyright 2020-2020, Analytical Graphics, Inc.
################################################################################
